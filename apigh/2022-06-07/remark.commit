{
  "sha": "fe4db30e6ddd3cd86e7fc6efa364d53801143375",
  "node_id": "C_kwDOBtgov9oAKGZlNGRiMzBlNmRkZDNjZDg2ZTdmYzZlZmEzNjRkNTM4MDExNDMzNzU",
  "commit": {
    "author": {
      "name": "Paul Mineev",
      "email": "paul@mineev.me",
      "date": "2022-06-05T22:20:20Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2022-06-06T15:00:24Z"
    },
    "message": "show subscription buttons in simple view, add ability to hide rss button",
    "tree": {
      "sha": "91d11b012b9a21872058da536952956ac8c22f71",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/91d11b012b9a21872058da536952956ac8c22f71"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/fe4db30e6ddd3cd86e7fc6efa364d53801143375",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/fe4db30e6ddd3cd86e7fc6efa364d53801143375",
  "html_url": "https://github.com/umputun/remark42/commit/fe4db30e6ddd3cd86e7fc6efa364d53801143375",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/fe4db30e6ddd3cd86e7fc6efa364d53801143375/comments",
  "author": null,
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6936268fd298d4dc492d42c3eab3a8eefebca6f7",
      "url": "https://api.github.com/repos/umputun/remark42/commits/6936268fd298d4dc492d42c3eab3a8eefebca6f7",
      "html_url": "https://github.com/umputun/remark42/commit/6936268fd298d4dc492d42c3eab3a8eefebca6f7"
    }
  ],
  "stats": {
    "total": 701,
    "additions": 276,
    "deletions": 425
  },
  "files": [
    {
      "sha": "a8d0373b90a66cc0e62d0a6f9fb07507db007d5b",
      "filename": "frontend/app/__stubs__/settings.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/6936268fd298d4dc492d42c3eab3a8eefebca6f7/frontend%2Fapp%2F__stubs__%2Fsettings.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/6936268fd298d4dc492d42c3eab3a8eefebca6f7/frontend%2Fapp%2F__stubs__%2Fsettings.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2F__stubs__%2Fsettings.ts?ref=6936268fd298d4dc492d42c3eab3a8eefebca6f7",
      "patch": "@@ -1,3 +0,0 @@\n-jest.mock('common/settings', () => ({\n-  siteId: 'remark',\n-}));"
    },
    {
      "sha": "2be1bb6e388576b137bee6a85f74bf0a0852270e",
      "filename": "frontend/app/common/__mocks__/settings.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 19,
      "changes": 19,
      "blob_url": "https://github.com/umputun/remark42/blob/6936268fd298d4dc492d42c3eab3a8eefebca6f7/frontend%2Fapp%2Fcommon%2F__mocks__%2Fsettings.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/6936268fd298d4dc492d42c3eab3a8eefebca6f7/frontend%2Fapp%2Fcommon%2F__mocks__%2Fsettings.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Fcommon%2F__mocks__%2Fsettings.ts?ref=6936268fd298d4dc492d42c3eab3a8eefebca6f7",
      "patch": "@@ -1,19 +0,0 @@\n-const settingsMock: typeof import('common/settings') = {\n-  ...jest.requireActual('common/settings'),\n-  siteId: 'remark',\n-  pageTitle: 'remark test',\n-  url: 'https://remark42.com/test',\n-  maxShownComments: 20,\n-  token: 'abcd',\n-  theme: 'light',\n-  querySettings: {\n-    site_id: 'remark',\n-    page_title: 'remark test',\n-    url: 'https://remark42.com/test',\n-    max_shown_comments: 20,\n-    token: 'abcd',\n-    theme: 'light',\n-  },\n-};\n-\n-module.exports = settingsMock;"
    },
    {
      "sha": "e274964e2d6f88628244bf84bb44dda3b7c3b1ef",
      "filename": "frontend/app/common/settings.ts",
      "status": "modified",
      "additions": 19,
      "deletions": 29,
      "changes": 48,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcommon%2Fsettings.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcommon%2Fsettings.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Fcommon%2Fsettings.ts?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -1,38 +1,28 @@\n import { parseQuery } from 'utils/parse-query';\n-\n-import type { Theme } from './types';\n import { THEMES, MAX_SHOWN_ROOT_COMMENTS } from './constants';\n \n-export interface QuerySettingsType {\n-  site_id?: string;\n-  page_title?: string;\n-  url?: string;\n-  max_shown_comments?: number;\n-  theme: Theme;\n-  /* used in delete users data page */\n-  token?: string;\n-  show_email_subscription?: boolean;\n-}\n+function parseNumber(value: unknown) {\n+  if (typeof value !== 'string') {\n+    return undefined;\n+  }\n \n-export const querySettings: Partial<QuerySettingsType> = parseQuery();\n+  const parsed = +value;\n \n-if (querySettings.max_shown_comments) {\n-  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n-  querySettings.max_shown_comments = parseInt(querySettings.max_shown_comments as any as string, 10);\n-} else {\n-  querySettings.max_shown_comments = MAX_SHOWN_ROOT_COMMENTS;\n+  return isNaN(parsed) ? undefined : parsed;\n }\n \n-if (!querySettings.theme || THEMES.indexOf(querySettings.theme) === -1) {\n-  querySettings.theme = THEMES[0];\n+function includes<T extends U, U>(coll: ReadonlyArray<T>, el: U): el is T {\n+  return coll.includes(el as T);\n }\n \n-// eslint-disable-next-line @typescript-eslint/no-explicit-any\n-querySettings.show_email_subscription = (querySettings.show_email_subscription as any) !== 'false';\n-\n-export const siteId = querySettings.site_id!;\n-export const pageTitle = querySettings.page_title;\n-export const url = querySettings.url;\n-export const maxShownComments = querySettings.max_shown_comments;\n-export const token = querySettings.token!;\n-export const theme = querySettings.theme;\n+export const rawParams = parseQuery();\n+export const maxShownComments = parseNumber(rawParams.max_shown_comments) ?? MAX_SHOWN_ROOT_COMMENTS;\n+export const isEmailSubscription = rawParams.show_email_subscription !== 'false';\n+export const isRssSubscription =\n+  rawParams.show_rss_subscription === undefined || rawParams.show_rss_subscription !== 'false';\n+export const theme = (rawParams.theme = includes(THEMES, rawParams.theme) ? rawParams.theme : THEMES[0]);\n+export const siteId = rawParams.site_id || 'remark';\n+export const pageTitle = rawParams.page_title;\n+export const url = rawParams.url;\n+export const token = rawParams.token;\n+export const locale = rawParams.locale || 'en';"
    },
    {
      "sha": "4558c37f8f8d1c61030be9793413d503f1052d48",
      "filename": "frontend/app/common/static-store.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcommon%2Fstatic-store.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcommon%2Fstatic-store.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Fcommon%2Fstatic-store.ts?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -1,9 +1,7 @@\n import { Config } from './types';\n-import { QuerySettingsType, querySettings } from './settings';\n \n interface StaticStoreType {\n   config: Config;\n-  query: QuerySettingsType;\n   /** used in fetcher, fer example to set comment edit timeout */\n   serverClientTimeDiff?: number;\n }\n@@ -32,5 +30,4 @@ export const StaticStore: StaticStoreType = {\n     telegram_bot_username: '',\n     emoji_enabled: false,\n   },\n-  query: querySettings as QuerySettingsType,\n };"
    },
    {
      "sha": "60dcef7189c73cd3339aebd4171c79f20fca4eec",
      "filename": "frontend/app/components/comment-form/comment-form.spec.tsx",
      "status": "added",
      "additions": 157,
      "deletions": 0,
      "changes": 157,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcomponents%2Fcomment-form%2Fcomment-form.spec.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcomponents%2Fcomment-form%2Fcomment-form.spec.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Fcomponents%2Fcomment-form%2Fcomment-form.spec.tsx?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -0,0 +1,157 @@\n+import '@testing-library/jest-dom';\n+import { fireEvent, screen, waitFor } from '@testing-library/preact';\n+import { useIntl } from 'react-intl';\n+\n+import { render } from 'tests/utils';\n+import { StaticStore } from 'common/static-store';\n+import { LS_SAVED_COMMENT_VALUE } from 'common/constants';\n+import * as localStorageModule from 'common/local-storage';\n+\n+import { CommentForm, CommentFormProps, messages } from './comment-form';\n+\n+const user: CommentFormProps['user'] = {\n+  name: 'username',\n+  id: 'id_1',\n+  picture: '',\n+  ip: '',\n+  admin: false,\n+  block: false,\n+  verified: false,\n+};\n+\n+function setup(\n+  overrideProps: Partial<CommentFormProps> = {},\n+  overrideConfig: Partial<typeof StaticStore['config']> = {}\n+) {\n+  Object.assign(StaticStore.config, overrideConfig);\n+\n+  const props = {\n+    mode: 'main',\n+    theme: 'light',\n+    onSubmit: () => Promise.resolve(),\n+    getPreview: () => Promise.resolve(''),\n+    user: null,\n+    id: '1',\n+    ...overrideProps,\n+  } as CommentFormProps;\n+  const CommentFormWithIntl = () => <CommentForm {...props} intl={useIntl()} />;\n+\n+  return render(<CommentFormWithIntl />);\n+}\n+describe('<CommentForm />', () => {\n+  afterEach(() => {\n+    // reset textarea id in order to have `textarea_1` for every test\n+    CommentForm.textareaId = 0;\n+  });\n+\n+  describe('with initial comment value', () => {\n+    afterEach(() => {\n+      localStorage.clear();\n+    });\n+    it('should has empty value', () => {\n+      const value = 'text';\n+\n+      localStorage.setItem(LS_SAVED_COMMENT_VALUE, JSON.stringify({ 1: value }));\n+      setup();\n+      expect(screen.getByTestId('textarea_1')).toHaveValue(value);\n+    });\n+\n+    it('should get initial value from localStorage', () => {\n+      const value = 'text';\n+\n+      localStorage.setItem(LS_SAVED_COMMENT_VALUE, JSON.stringify({ 1: value }));\n+      setup();\n+      expect(screen.getByTestId('textarea_1')).toHaveValue(value);\n+    });\n+    it('should get initial value from props instead localStorage', () => {\n+      const value = 'text from props';\n+\n+      localStorage.setItem(LS_SAVED_COMMENT_VALUE, JSON.stringify({ 1: 'text from localStorage' }));\n+\n+      setup({ value });\n+      expect(screen.getByTestId('textarea_1')).toHaveValue(value);\n+    });\n+  });\n+\n+  describe('update initial value', () => {\n+    afterEach(() => {\n+      localStorage.clear();\n+    });\n+    it('should update value', () => {\n+      setup();\n+\n+      fireEvent.input(screen.getByTestId('textarea_1'), { target: { value: '1' } });\n+      expect(localStorage.getItem(LS_SAVED_COMMENT_VALUE)).toBe('{\"1\":\"1\"}');\n+\n+      fireEvent.input(screen.getByTestId('textarea_1'), { target: { value: '11' } });\n+      expect(localStorage.getItem(LS_SAVED_COMMENT_VALUE)).toBe('{\"1\":\"11\"}');\n+    });\n+\n+    it('should clear value after send', async () => {\n+      localStorage.setItem(LS_SAVED_COMMENT_VALUE, JSON.stringify({ 1: 'asd' }));\n+      const updateJsonItemSpy = jest.spyOn(localStorageModule, 'updateJsonItem');\n+\n+      setup();\n+      fireEvent.submit(screen.getByTestId('textarea_1'));\n+      await waitFor(() => {\n+        expect(updateJsonItemSpy).toHaveBeenCalled();\n+      });\n+      expect(localStorage.getItem(LS_SAVED_COMMENT_VALUE)).toBe('{}');\n+    });\n+  });\n+\n+  it(`doesn't render preview button and markdown toolbar in simple mode`, () => {\n+    setup({ user }, { simple_view: true });\n+    expect(screen.queryByTestId('markdown-toolbar')).not.toBeInTheDocument();\n+    expect(screen.queryByText('Preview')).not.toBeInTheDocument();\n+  });\n+\n+  it.each`\n+    expected  | value\n+    ${'99'}   | ${'That was Wintermute, manipulating the lock the way it had manipulated the drone micro and the chassis of a gutted game console. It was chambered for .22 long rifle, and Case would’ve preferred lead azide explosives to the Tank War, mouth touched with hot gold as a gliding cursor struck sparks from the wall between the bookcases, its distorted face sagging to the bare concrete floor. Splayed in his elastic g-web, Case watched the other passengers as he made his way down Shiga from the sushi stall he cradled it in his jacket pocket. Images formed and reformed: a flickering montage of the Sprawl’s towers and ragged Fuller domes, dim figures moving toward him in the Japanese night like live wire voodoo and he’d cry for it, cry in his jacket pocket. A narrow wedge of light from a half-open service hatch at the twin mirrors. Still it was a square of faint light. The alarm still oscillated, louder here, the rear wall dulling the roar of the arcade showed him broken lengths of damp chipboard and the robot gardener. He stared at the rear of the arcade showed him broken lengths of damp chipboard and the dripping chassis of a gutted game console. That was Wintermute, manipulating the lock the way it had manipulated the drone micro and the chassis of a gutted game console. It was chambered for .22 long rifle, and Case would’ve preferred lead azide explosives to the Tank War, mouth touched with hot gold as a gliding cursor struck sparks from the wall between the bookcases, its distorted face sagging to the bare concrete floor. Splayed in his elastic g-web, Case watched the other passengers as he made his way down Shiga from the sushi stall he cradled it in his jacket pocket. Images formed and reformed: a flickering montage of the Sprawl’s towers and ragged Fuller domes, dim figures moving toward him in the Japanese night like live wire voodoo and he’d cry for it, cry in his jacket.'}\n+    ${'0'}    | ${'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc, quis gravida magna mi a libero. Fusce vulputate eleifend sapien. Vestibulum purus quam, scelerisque ut, mollis sed, nonummy id, metus. Nullam accumsan lorem in dui. Cras ultricies mi eu turpis hendrerit fringilla. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; In ac dui quis mi consectetuer lacinia. Nam pretium turpis et arcu. Duis arcu tortor, suscipit eget, imperdiet nec, imperdiet iaculis, ipsum. Sed aliquam ultrices mauris. Integer ante arcu, accumsan a, consectetuer eget, posuere ut, mauris. Praesent adipiscing. Phasellus ullamcorper ipsum rutrum nunc. Nunc nonummy metus. Vestib'}\n+    ${'-425'} | ${'All the speed he took, all the turns he’d taken and the amplified breathing of the Sprawl’s towers and ragged Fuller domes, dim figures moving toward him in the dark. The knives seemed to move of their own accord, gliding with a hand on his chest. Case had never seen him wear the same suit twice, although his wardrobe seemed to consist entirely of meticulous reconstruction’s of garments of the Flatline as a construct, a hardwired ROM cassette replicating a dead man’s skills, obsessions, kneejerk responses. Case had never seen him wear the same suit twice, although his wardrobe seemed to consist entirely of meticulous reconstruction’s of garments of the bright void beyond the chain link. Now this quiet courtyard, Sunday afternoon, this girl with a random collection of European furniture, as though Deane had once intended to use the place as his home. Now this quiet courtyard, Sunday afternoon, this girl with a ritual lack of urgency through the arcs and passes of their dance, point passing point, as the men waited for an opening. They floated in the shade beneath a bridge or overpass. A graphic representation of data abstracted from the banks of every computer in the coffin for Armitage’s call. All the speed he took, all the turns he’d taken and the amplified breathing of the Sprawl’s towers and ragged Fuller domes, dim figures moving toward him in the dark. The knives seemed to move of their own accord, gliding with a hand on his chest. Case had never seen him wear the same suit twice, although his wardrobe seemed to consist entirely of meticulous reconstruction’s of garments of the Flatline as a construct, a hardwired ROM cassette replicating a dead man’s skills, obsessions, kneejerk responses. Case had never seen him wear the same suit twice, although his wardrobe seemed to consist entirely of meticulous reconstruction’s of garments of the bright void beyond the chain link. Now this quiet courtyard, Sunday afternoon, this girl with a random collection of European furniture, as though Deane had once intended to use the place as his home. Now this quiet courtyard, Sunday afternoon, this girl with a ritual lack of urgency through the arcs and passes of their dance, point passing point, as the men waited for an opening. They floated in the shade beneath a bridge or overpass. A graphic representation of data abstracted from the banks of every computer in the coffin for Armitage’s call.'}\n+  `('renders counter of rest symbols', async ({ value, expected }) => {\n+    setup({ value }, { max_comment_size: 2000 });\n+    expect(screen.getByText(expected)).toBeInTheDocument();\n+  });\n+\n+  describe('when authorized', () => {\n+    describe('with simple view', () => {\n+      it('renders email subscription button', () => {\n+        setup({ user }, { simple_view: true, email_notifications: true });\n+        expect(screen.getByText(/Subscribe by/)).toBeVisible();\n+        expect(screen.getByTitle('Subscribe by Email')).toBeVisible();\n+      });\n+      it('renders rss subscription button', () => {\n+        setup({ user }, { simple_view: true });\n+        expect(screen.getByText(/Subscribe by/)).toBeVisible();\n+        expect(screen.getByTitle('Subscribe by RSS')).toBeVisible();\n+      });\n+    });\n+    it('renders without email subscription button when email_notifications disabled', () => {\n+      setup({ user }, { email_notifications: false });\n+      expect(screen.queryByText('Subscribe by RSS')).not.toBeInTheDocument();\n+    });\n+  });\n+\n+  describe('when unauthorized', () => {\n+    it(`doesn't email subscription button`, () => {\n+      setup();\n+      expect(screen.queryByText(/Subscribe by/)).not.toBeInTheDocument();\n+      expect(screen.queryByTitle('Subscribe bey Email')).not.toBeInTheDocument();\n+    });\n+\n+    it(`doesn't render rss subscription button`, () => {\n+      setup();\n+      expect(screen.queryByText(/Subscribe by/)).not.toBeInTheDocument();\n+      expect(screen.queryByText('Subscribe by RSS')).not.toBeInTheDocument();\n+    });\n+\n+    it('should show error message of image upload try by anonymous user', () => {\n+      setup({ user: { ...user, id: 'anonymous_1' } });\n+      fireEvent.drop(screen.getByTestId('commentform_1'));\n+      expect(screen.getByText(messages.anonymousUploadingDisabled.defaultMessage)).toBeInTheDocument();\n+    });\n+  });\n+});"
    },
    {
      "sha": "04c11fd7c8997c6f84e29b434cd838f884d18be2",
      "filename": "frontend/app/components/comment-form/comment-form.test.tsx",
      "status": "removed",
      "additions": 0,
      "deletions": 195,
      "changes": 195,
      "blob_url": "https://github.com/umputun/remark42/blob/6936268fd298d4dc492d42c3eab3a8eefebca6f7/frontend%2Fapp%2Fcomponents%2Fcomment-form%2Fcomment-form.test.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/6936268fd298d4dc492d42c3eab3a8eefebca6f7/frontend%2Fapp%2Fcomponents%2Fcomment-form%2Fcomment-form.test.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Fcomponents%2Fcomment-form%2Fcomment-form.test.tsx?ref=6936268fd298d4dc492d42c3eab3a8eefebca6f7",
      "patch": "@@ -1,195 +0,0 @@\n-import { shallow } from 'enzyme';\n-\n-import { user, anonymousUser } from '__stubs__/user';\n-import { StaticStore } from 'common/static-store';\n-import { LS_SAVED_COMMENT_VALUE } from 'common/constants';\n-import * as localStorageModule from 'common/local-storage';\n-import { TextareaAutosize } from 'components/textarea-autosize';\n-\n-import { CommentForm, CommentFormProps, messages } from './comment-form';\n-import { SubscribeByEmail } from './__subscribe-by-email';\n-import { IntlShape } from 'react-intl';\n-\n-function createEvent<E extends Event, T = unknown>(type: string, value: T): E {\n-  const event = new Event(type);\n-\n-  Object.defineProperty(event, 'target', { value });\n-\n-  return event as E;\n-}\n-\n-const DEFAULT_PROPS: Readonly<Omit<CommentFormProps, 'intl'>> = {\n-  mode: 'main',\n-  theme: 'light',\n-  onSubmit: () => Promise.resolve(),\n-  getPreview: () => Promise.resolve(''),\n-  user: null,\n-  id: '1',\n-};\n-\n-const intl = {\n-  formatMessage(message: { defaultMessage: string }) {\n-    return message.defaultMessage || '';\n-  },\n-} as IntlShape;\n-\n-describe('<CommentForm />', () => {\n-  it('should shallow without control panel, preview button, and rss links in \"simple view\" mode', () => {\n-    const props = { ...DEFAULT_PROPS, simpleView: true, intl };\n-    const wrapper = shallow<CommentForm, CommentFormProps>(<CommentForm {...props} />);\n-\n-    expect(wrapper.exists('.comment-form__control-panel')).toEqual(false);\n-    expect(wrapper.exists('.comment-form__button_type_preview')).toEqual(false);\n-    expect(wrapper.exists('.comment-form__rss')).toEqual(false);\n-  });\n-\n-  it('should be shallowed with email subscription button', () => {\n-    StaticStore.config.email_notifications = true;\n-\n-    const props = { ...DEFAULT_PROPS, user, intl };\n-    const wrapper = shallow<CommentForm, CommentFormProps>(<CommentForm {...props} />);\n-\n-    expect(wrapper.exists(SubscribeByEmail)).toEqual(true);\n-  });\n-\n-  it('should be rendered without email subscription button when email_notifications disabled', () => {\n-    StaticStore.config.email_notifications = false;\n-\n-    const props = { ...DEFAULT_PROPS, user, intl };\n-    const wrapper = shallow<CommentForm, CommentFormProps>(<CommentForm {...props} />);\n-\n-    expect(wrapper.exists(SubscribeByEmail)).toEqual(false);\n-  });\n-\n-  describe('initial value of comment', () => {\n-    afterEach(() => {\n-      localStorage.clear();\n-    });\n-    it('should has empty value', () => {\n-      localStorage.setItem(LS_SAVED_COMMENT_VALUE, JSON.stringify({ 2: 'text' }));\n-\n-      const props = { ...DEFAULT_PROPS, user, intl };\n-      const wrapper = shallow<CommentForm, CommentFormProps>(<CommentForm {...props} />);\n-\n-      expect(wrapper.state('text')).toBe('');\n-      expect(wrapper.find(TextareaAutosize).prop('value')).toBe('');\n-    });\n-\n-    it('should get initial value from localStorage', () => {\n-      const COMMENT_VALUE = 'text';\n-\n-      localStorage.setItem(LS_SAVED_COMMENT_VALUE, JSON.stringify({ 1: COMMENT_VALUE }));\n-\n-      const props = { ...DEFAULT_PROPS, user, intl };\n-      const wrapper = shallow<CommentForm, CommentFormProps>(<CommentForm {...props} />);\n-\n-      expect(wrapper.state('text')).toBe(COMMENT_VALUE);\n-      expect(wrapper.find(TextareaAutosize).prop('value')).toBe(COMMENT_VALUE);\n-    });\n-\n-    it('should get initial value from props instead localStorage', () => {\n-      const COMMENT_VALUE = 'text from props';\n-\n-      localStorage.setItem(LS_SAVED_COMMENT_VALUE, JSON.stringify({ 1: 'text from localStorage' }));\n-\n-      const props = { ...DEFAULT_PROPS, user, intl, value: COMMENT_VALUE };\n-      const wrapper = shallow<CommentForm, CommentFormProps>(<CommentForm {...props} />);\n-\n-      expect(wrapper.state('text')).toBe(COMMENT_VALUE);\n-      expect(wrapper.find(TextareaAutosize).prop('value')).toBe(COMMENT_VALUE);\n-    });\n-  });\n-\n-  describe('update value of comment in localStorage', () => {\n-    afterEach(() => {\n-      localStorage.clear();\n-    });\n-    it('should update value', () => {\n-      const props = { ...DEFAULT_PROPS, user, intl };\n-\n-      const wrapper = shallow<CommentForm, CommentFormProps>(<CommentForm {...props} />);\n-      const instance = wrapper.instance();\n-\n-      instance.onInput(createEvent('input', { value: '1' }));\n-      expect(localStorage.getItem(LS_SAVED_COMMENT_VALUE)).toBe('{\"1\":\"1\"}');\n-\n-      instance.onInput(createEvent('input', { value: '11' }));\n-      expect(localStorage.getItem(LS_SAVED_COMMENT_VALUE)).toBe('{\"1\":\"11\"}');\n-    });\n-\n-    it('should clear value after send', async () => {\n-      localStorage.setItem(LS_SAVED_COMMENT_VALUE, JSON.stringify({ '1': 'asd' }));\n-      const updateJsonItemSpy = jest.spyOn(localStorageModule, 'updateJsonItem');\n-      const props = { ...DEFAULT_PROPS, user, intl };\n-\n-      const wrapper = shallow<CommentForm, CommentFormProps>(<CommentForm {...props} />);\n-      const instance = wrapper.instance();\n-\n-      await instance.send(createEvent('send', { preventDefault: () => undefined }));\n-      expect(updateJsonItemSpy).toHaveBeenCalled();\n-      expect(localStorage.getItem(LS_SAVED_COMMENT_VALUE)).toBe(JSON.stringify({}));\n-    });\n-  });\n-\n-  it('should show error message of image upload try by anonymous user', () => {\n-    const props = { ...DEFAULT_PROPS, user: anonymousUser, intl };\n-    const wrapper = shallow<CommentForm, CommentFormProps>(<CommentForm {...props} />);\n-    const instance = wrapper.instance();\n-\n-    instance.onDrop(new Event('drag') as DragEvent);\n-    expect(wrapper.exists('.comment-form__error')).toEqual(true);\n-    expect(wrapper.find('.comment-form__error').text()).toEqual(messages.anonymousUploadingDisabled.defaultMessage);\n-  });\n-\n-  it('should show error message of image upload try by unauthorized user', () => {\n-    const props = { ...DEFAULT_PROPS, intl };\n-    const wrapper = shallow<CommentForm, CommentFormProps>(<CommentForm {...props} />);\n-    const instance = wrapper.instance();\n-\n-    instance.onDrop(new Event('drag') as DragEvent);\n-    expect(wrapper.exists('.comment-form__error')).toEqual(true);\n-    expect(wrapper.find('.comment-form__error').text()).toEqual(messages.unauthorizedUploadingDisabled.defaultMessage);\n-  });\n-\n-  it('should show rest letters counter', async () => {\n-    expect.assertions(3);\n-\n-    const originalConfig = { ...StaticStore.config };\n-    StaticStore.config.max_comment_size = 2000;\n-    const props = { ...DEFAULT_PROPS, intl };\n-    const wrapper = shallow<CommentForm>(<CommentForm {...props} />);\n-    const instance = wrapper.instance();\n-    const text =\n-      'That was Wintermute, manipulating the lock the way it had manipulated the drone micro and the chassis of a gutted game console. It was chambered for .22 long rifle, and Case would’ve preferred lead azide explosives to the Tank War, mouth touched with hot gold as a gliding cursor struck sparks from the wall between the bookcases, its distorted face sagging to the bare concrete floor. Splayed in his elastic g-web, Case watched the other passengers as he made his way down Shiga from the sushi stall he cradled it in his jacket pocket. Images formed and reformed: a flickering montage of the Sprawl’s towers and ragged Fuller domes, dim figures moving toward him in the Japanese night like live wire voodoo and he’d cry for it, cry in his jacket pocket. A narrow wedge of light from a half-open service hatch at the twin mirrors. Still it was a square of faint light. The alarm still oscillated, louder here, the rear wall dulling the roar of the arcade showed him broken lengths of damp chipboard and the robot gardener. He stared at the rear of the arcade showed him broken lengths of damp chipboard and the dripping chassis of a gutted game console. That was Wintermute, manipulating the lock the way it had manipulated the drone micro and the chassis of a gutted game console. It was chambered for .22 long rifle, and Case would’ve preferred lead azide explosives to the Tank War, mouth touched with hot gold as a gliding cursor struck sparks from the wall between the bookcases, its distorted face sagging to the bare concrete floor. Splayed in his elastic g-web, Case watched the other passengers as he made his way down Shiga from the sushi stall he cradled it in his jacket pocket. Images formed and reformed: a flickering montage of the Sprawl’s towers and ragged Fuller domes, dim figures moving toward him in the Japanese night like live wire voodoo and he’d cry for it, cry in his jacket.';\n-\n-    instance.setState({ text });\n-    await wrapper.update();\n-\n-    expect(instance.state.text).toBe(text);\n-    expect(wrapper.find('.comment-form__counter').exists()).toBe(true);\n-    expect(wrapper.find('.comment-form__counter').text()).toBe('99');\n-\n-    StaticStore.config = originalConfig;\n-  });\n-\n-  it('should show zero in rest letters counter', async () => {\n-    expect.assertions(2);\n-\n-    const originalConfig = { ...StaticStore.config };\n-    StaticStore.config.max_comment_size = 2000;\n-    const props = { ...DEFAULT_PROPS, intl };\n-    const wrapper = shallow<CommentForm, CommentFormProps>(<CommentForm {...props} />);\n-    const instance = wrapper.instance();\n-    const text =\n-      'All the speed he took, all the turns he’d taken and the amplified breathing of the Sprawl’s towers and ragged Fuller domes, dim figures moving toward him in the dark. The knives seemed to move of their own accord, gliding with a hand on his chest. Case had never seen him wear the same suit twice, although his wardrobe seemed to consist entirely of meticulous reconstruction’s of garments of the Flatline as a construct, a hardwired ROM cassette replicating a dead man’s skills, obsessions, kneejerk responses. Case had never seen him wear the same suit twice, although his wardrobe seemed to consist entirely of meticulous reconstruction’s of garments of the bright void beyond the chain link. Now this quiet courtyard, Sunday afternoon, this girl with a random collection of European furniture, as though Deane had once intended to use the place as his home. Now this quiet courtyard, Sunday afternoon, this girl with a ritual lack of urgency through the arcs and passes of their dance, point passing point, as the men waited for an opening. They floated in the shade beneath a bridge or overpass. A graphic representation of data abstracted from the banks of every computer in the coffin for Armitage’s call. All the speed he took, all the turns he’d taken and the amplified breathing of the Sprawl’s towers and ragged Fuller domes, dim figures moving toward him in the dark. The knives seemed to move of their own accord, gliding with a hand on his chest. Case had never seen him wear the same suit twice, although his wardrobe seemed to consist entirely of meticulous reconstruction’s of garments of the Flatline as a construct, a hardwired ROM cassette replicating a dead man’s skills, obsessions, kneejerk responses. Case had never seen him wear the same suit twice, although his wardrobe seemed to consist entirely of meticulous reconstruction’s of garments of the bright void beyond the chain link. Now this quiet courtyard, Sunday afternoon, this girl with a random collection of European furniture, as though Deane had once intended to use the place as his home. Now this quiet courtyard, Sunday afternoon, this girl with a ritual lack of urgency through the arcs and passes of their dance, point passing point, as the men waited for an opening. They floated in the shade beneath a bridge or overpass. A graphic representation of data abstracted from the banks of every computer in the coffin for Armitage’s call.';\n-\n-    instance.onInput(createEvent('input', { value: text }));\n-\n-    await wrapper.update();\n-\n-    expect(instance.state.text).toBe(text.substr(0, StaticStore.config.max_comment_size));\n-    expect(wrapper.find('.comment-form__counter').text()).toBe('0');\n-\n-    StaticStore.config = originalConfig;\n-  });\n-});"
    },
    {
      "sha": "6158033cddb56b0b4331a84f1ce0c159e2edc3c6",
      "filename": "frontend/app/components/comment-form/comment-form.tsx",
      "status": "modified",
      "additions": 70,
      "deletions": 66,
      "changes": 136,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcomponents%2Fcomment-form%2Fcomment-form.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcomponents%2Fcomment-form%2Fcomment-form.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Fcomponents%2Fcomment-form%2Fcomment-form.tsx?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -4,7 +4,7 @@ import b, { Mix } from 'bem-react-helper';\n \n import { User, Theme, Image, ApiError } from 'common/types';\n import { StaticStore } from 'common/static-store';\n-import { pageTitle } from 'common/settings';\n+import * as settings from 'common/settings';\n import { extractErrorMessageFromResponse } from 'utils/errorUtils';\n import { isUserAnonymous } from 'utils/isUserAnonymous';\n import { sleep } from 'utils/sleep';\n@@ -21,8 +21,6 @@ import { SubscribeByRSS } from './__subscribe-by-rss';\n import { MarkdownToolbar } from './markdown-toolbar';\n import { TextExpander } from './text-expander';\n \n-let textareaId = 0;\n-\n export type CommentFormProps = {\n   id: string;\n   user: User | null;\n@@ -31,14 +29,13 @@ export type CommentFormProps = {\n   mix?: Mix;\n   mode?: 'main' | 'edit' | 'reply';\n   theme: Theme;\n-  simpleView?: boolean;\n   autofocus?: boolean;\n \n   onSubmit(text: string, pageTitle: string): Promise<void>;\n   getPreview(text: string): Promise<string>;\n   /** action on cancel. optional as root input has no cancel option */\n-  onCancel?: () => void;\n-  uploadImage?: (image: File) => Promise<Image>;\n+  onCancel?(): void;\n+  uploadImage?(image: File): Promise<Image>;\n   intl: IntlShape;\n };\n \n@@ -101,38 +98,24 @@ export const messages = defineMessages({\n export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n   /** reference to textarea element */\n   textareaRef = createRef<HTMLTextAreaElement>();\n-  textareaId: string;\n+  static textareaId = 0;\n+\n+  state = {\n+    preview: null,\n+    isErrorShown: false,\n+    errorMessage: null,\n+    errorLock: false,\n+    isDisabled: false,\n+    text: '',\n+    buttonText: null,\n+  };\n \n   constructor(props: CommentFormProps) {\n     super(props);\n-    textareaId = textareaId + 1;\n-    this.textareaId = `textarea_${textareaId}`;\n \n     const savedComments = getJsonItem<Record<string, string>>(LS_SAVED_COMMENT_VALUE);\n-    let text = savedComments?.[props.id] ?? '';\n-\n-    if (props.value) {\n-      text = props.value;\n-    }\n-\n-    this.state = {\n-      preview: null,\n-      isErrorShown: false,\n-      errorMessage: null,\n-      errorLock: false,\n-      isDisabled: false,\n-      text,\n-      buttonText: null,\n-    };\n-\n-    this.getPreview = this.getPreview.bind(this);\n-    this.onKeyDown = this.onKeyDown.bind(this);\n-    this.onDragOver = this.onDragOver.bind(this);\n-    this.onDrop = this.onDrop.bind(this);\n-    this.appendError = this.appendError.bind(this);\n-    this.uploadImage = this.uploadImage.bind(this);\n-    this.uploadImages = this.uploadImages.bind(this);\n-    this.onPaste = this.onPaste.bind(this);\n+    this.state.text = props.value ?? savedComments?.[props.id] ?? '';\n+    CommentForm.textareaId += 1;\n   }\n \n   componentWillReceiveProps(nextProps: CommentFormProps) {\n@@ -161,12 +144,12 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n     );\n   }\n \n-  onKeyDown(e: KeyboardEvent) {\n+  onKeyDown = (e: KeyboardEvent) => {\n     // send on cmd+enter / ctrl+enter\n     if (e.keyCode === 13 && (e.metaKey || e.ctrlKey)) {\n       this.send(e);\n     }\n-  }\n+  };\n \n   onInput = (e: Event) => {\n     const { value } = e.target as HTMLInputElement;\n@@ -190,14 +173,14 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n     });\n   };\n \n-  async onPaste(e: ClipboardEvent) {\n+  onPaste = async (e: ClipboardEvent) => {\n     if (!(e.clipboardData && e.clipboardData.files.length > 0)) {\n       return;\n     }\n     e.preventDefault();\n     const files = Array.from(e.clipboardData.files);\n     await this.uploadImages(files);\n-  }\n+  };\n \n   send = async (e: Event) => {\n     const { text } = this.state;\n@@ -212,7 +195,7 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n \n     this.setState({ isDisabled: true, isErrorShown: false, text });\n     try {\n-      await this.props.onSubmit(text, pageTitle || document.title);\n+      await this.props.onSubmit(text, settings.pageTitle || document.title);\n     } catch (e) {\n       this.setState({\n         isDisabled: false,\n@@ -233,7 +216,7 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n     this.setState({ isDisabled: false, preview: null, text: '' });\n   };\n \n-  getPreview() {\n+  getPreview = () => {\n     const text = this.textareaRef.current?.value ?? this.state.text;\n \n     if (!text || !text.trim()) return;\n@@ -246,10 +229,10 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n       .catch(() => {\n         this.setState({ isErrorShown: true, errorMessage: null });\n       });\n-  }\n+  };\n \n   /** appends error to input's error block */\n-  appendError(...errors: string[]) {\n+  appendError = (...errors: string[]) => {\n     if (!this.state.errorMessage) {\n       this.setState({\n         errorMessage: errors.join('\\n'),\n@@ -261,9 +244,9 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n       errorMessage: `${this.state.errorMessage}\\n${errors.join('\\n')}`,\n       isErrorShown: true,\n     });\n-  }\n+  };\n \n-  onDragOver(e: DragEvent) {\n+  onDragOver = (e: DragEvent) => {\n     if (!this.props.user) e.preventDefault();\n     if (!this.props.uploadImage) return;\n     if (StaticStore.config.max_image_size === 0) return;\n@@ -273,9 +256,9 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n     if (Array.from(items).filter((i) => i.kind === 'file' && ImageMimeRegex.test(i.type)).length === 0) return;\n     e.preventDefault();\n     e.dataTransfer.dropEffect = 'copy';\n-  }\n+  };\n \n-  onDrop(e: DragEvent) {\n+  onDrop = (e: DragEvent) => {\n     const isAnonymous = this.props.user && isUserAnonymous(this.props.user);\n     if (!this.props.user || isAnonymous) {\n       const message = isAnonymous ? messages.anonymousUploadingDisabled : messages.unauthorizedUploadingDisabled;\n@@ -296,7 +279,7 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n     e.preventDefault();\n \n     this.uploadImages(data);\n-  }\n+  };\n \n   /** returns selection range of a textarea */\n   getSelection(): [number, number] {\n@@ -323,7 +306,7 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n   }\n \n   /** wrapper with error handling for props.uploadImage */\n-  uploadImage(file: File): Promise<Image | Error> {\n+  uploadImage = (file: File): Promise<Image | Error> => {\n     const intl = this.props.intl;\n     return this.props.uploadImage!(file).catch((e: ApiError | string) => {\n       return new Error(\n@@ -333,10 +316,10 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n         })\n       );\n     });\n-  }\n+  };\n \n   /** performs upload process */\n-  async uploadImages(files: File[]) {\n+  uploadImages = async (files: File[]) => {\n     const intl = this.props.intl;\n     if (!this.props.uploadImage) return;\n     if (!this.textareaRef.current) return;\n@@ -419,7 +402,7 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n     }\n \n     this.setState({ errorLock: false, isDisabled: false, buttonText: null });\n-  }\n+  };\n \n   renderMarkdownTip = () => (\n     <div className=\"comment-form__markdown\">\n@@ -437,8 +420,32 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n     </div>\n   );\n \n+  renderSubscribeButtons = () => {\n+    const isEmailNotifications = StaticStore.config.email_notifications;\n+    const isEmailSubscription = isEmailNotifications && settings.isEmailSubscription;\n+    const { isRssSubscription } = settings;\n+\n+    if (!isRssSubscription && !isEmailSubscription) {\n+      return null;\n+    }\n+\n+    return (\n+      <>\n+        <FormattedMessage id=\"commentForm.subscribe-by\" defaultMessage=\"Subscribe by\" />{' '}\n+        {isRssSubscription && <SubscribeByRSS userId={this.props.user?.id ?? null} />}\n+        {isRssSubscription && isEmailSubscription && (\n+          <>\n+            {' '}\n+            <FormattedMessage id=\"commentForm.subscribe-or\" defaultMessage=\"or\" />{' '}\n+          </>\n+        )}\n+        {isEmailSubscription && <SubscribeByEmail />}\n+      </>\n+    );\n+  };\n+\n   render() {\n-    const { theme, mode, simpleView, mix, uploadImage, autofocus, user, intl } = this.props;\n+    const { theme, mode, mix, uploadImage, autofocus, user, intl } = this.props;\n     const { isDisabled, isErrorShown, preview, text, buttonText } = this.state;\n     const charactersLeft = StaticStore.config.max_comment_size - text.length;\n     const errorMessage = this.props.errorMessage || this.state.errorMessage;\n@@ -447,37 +454,41 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n       edit: <FormattedMessage id=\"commentForm.save\" defaultMessage=\"Save\" />,\n       reply: <FormattedMessage id=\"commentForm.reply\" defaultMessage=\"Reply\" />,\n     };\n+    const textareaId = `textarea_${CommentForm.textareaId}`;\n     const label = buttonText || Labels[mode || 'main'];\n     const placeholderMessage = intl.formatMessage(messages.placeholder);\n+    const isSimpleView = StaticStore.config.simple_view;\n+\n     return (\n       <form\n         className={b('comment-form', {\n           mods: {\n             theme,\n             type: mode || 'reply',\n-            simple: simpleView,\n+            simple: isSimpleView,\n           },\n           mix,\n         })}\n         onSubmit={this.send}\n         aria-label={intl.formatMessage(messages.newComment)}\n         onDragOver={this.onDragOver}\n         onDrop={this.onDrop}\n+        data-testid={`commentform_${this.props.id}`}\n       >\n-        {!simpleView && (\n-          <div className=\"comment-form__control-panel\">\n+        {!isSimpleView && (\n+          <div className=\"comment-form__control-panel\" data-testid=\"markdown-toolbar\">\n             <MarkdownToolbar\n               intl={intl}\n               allowUpload={Boolean(uploadImage)}\n               uploadImages={this.uploadImages}\n-              textareaId={this.textareaId}\n+              textareaId={textareaId}\n             />\n           </div>\n         )}\n         <div className=\"comment-form__field-wrapper\">\n           <TextExpander>\n             <TextareaAutosize\n-              id={this.textareaId}\n+              id={textareaId}\n               ref={this.textareaRef}\n               onPaste={this.onPaste}\n               className=\"comment-form__field\"\n@@ -504,7 +515,7 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n           {user ? (\n             <>\n               <div>\n-                {!simpleView && (\n+                {!isSimpleView && (\n                   <Button\n                     kind=\"secondary\"\n                     theme={theme}\n@@ -521,17 +532,10 @@ export class CommentForm extends Component<CommentFormProps, CommentFormState> {\n                 </Button>\n               </div>\n \n-              {!simpleView && mode === 'main' && (\n+              {mode === 'main' && (\n                 <div className=\"comment-form__rss\">\n                   {this.renderMarkdownTip()}\n-                  <FormattedMessage id=\"commentForm.subscribe-by\" defaultMessage=\"Subscribe by\" />{' '}\n-                  <SubscribeByRSS userId={user !== null ? user.id : null} />\n-                  {StaticStore.config.email_notifications && StaticStore.query.show_email_subscription && (\n-                    <>\n-                      {' '}\n-                      <FormattedMessage id=\"commentForm.subscribe-or\" defaultMessage=\"or\" /> <SubscribeByEmail />\n-                    </>\n-                  )}\n+                  {this.renderSubscribeButtons()}\n                 </div>\n               )}\n             </>"
    },
    {
      "sha": "02f553be083957acdacfa47e1778793cbd098793",
      "filename": "frontend/app/components/comment/comment.tsx",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcomponents%2Fcomment%2Fcomment.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcomponents%2Fcomment%2Fcomment.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Fcomponents%2Fcomment%2Fcomment.tsx?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -525,7 +525,6 @@ export class Comment extends Component<CommentProps, State> {\n             getPreview={this.props.getPreview!}\n             autofocus={true}\n             uploadImage={uploadImageHandler}\n-            simpleView={StaticStore.config.simple_view}\n           />\n         )}\n \n@@ -544,7 +543,6 @@ export class Comment extends Component<CommentProps, State> {\n             errorMessage={state.editDeadline === undefined ? intl.formatMessage(messages.expiredTime) : undefined}\n             autofocus={true}\n             uploadImage={uploadImageHandler}\n-            simpleView={StaticStore.config.simple_view}\n           />\n         )}\n       </article>"
    },
    {
      "sha": "2f0801eb322b1bf2cfbef7e1a977ae7dfb6d6b46",
      "filename": "frontend/app/components/root/root.tsx",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcomponents%2Froot%2Froot.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcomponents%2Froot%2Froot.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Fcomponents%2Froot%2Froot.tsx?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -10,7 +10,6 @@ import type { StoreState } from 'store';\n import { COMMENT_NODE_CLASSNAME_PREFIX, MAX_SHOWN_ROOT_COMMENTS, THEMES, IS_MOBILE } from 'common/constants';\n import { maxShownComments, url } from 'common/settings';\n \n-import { StaticStore } from 'common/static-store';\n import {\n   setUser,\n   fetchUser,\n@@ -250,7 +249,6 @@ export class Root extends Component<Props, State> {\n                   onSubmit={(text: string, title: string) => this.props.addComment(text, title)}\n                   getPreview={this.props.getPreview}\n                   uploadImage={imageUploadHandler}\n-                  simpleView={StaticStore.config.simple_view}\n                 />\n               )}\n               {this.props.pinnedComments.length > 0 && ("
    },
    {
      "sha": "f9d575400a1f0c2374e52125ab2988e829ce5103",
      "filename": "frontend/app/components/textarea-autosize.tsx",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcomponents%2Ftextarea-autosize.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fcomponents%2Ftextarea-autosize.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Fcomponents%2Ftextarea-autosize.tsx?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -25,5 +25,5 @@ export const TextareaAutosize = forwardRef<HTMLTextAreaElement, Props>(({ onInpu\n     autoResize(ref.current);\n   }, [value, ref]);\n \n-  return <textarea {...props} onInput={handleInput} value={value} ref={ref} />;\n+  return <textarea {...props} data-testid={props.id} onInput={handleInput} value={value} ref={ref} />;\n });"
    },
    {
      "sha": "af9c98abc250d2ae827a3a56f579f416a8833b6a",
      "filename": "frontend/app/remark.tsx",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fremark.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fremark.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Fremark.tsx?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -4,10 +4,7 @@ import { Provider } from 'react-redux';\n import { IntlProvider } from 'react-intl';\n \n import { loadLocale } from 'utils/loadLocale';\n-import { getLocale } from 'utils/getLocale';\n-import { parseQuery } from 'utils/parse-query';\n import { parseMessage } from 'utils/post-message';\n-import { parseBooleansFromDictionary } from 'utils/parse-booleans-from-dictionary';\n import { ConnectedRoot } from 'components/root';\n import { Profile } from 'components/profile';\n import { store } from 'store';\n@@ -16,6 +13,7 @@ import { StaticStore } from 'common/static-store';\n import { getConfig } from 'common/api';\n import { fetchHiddenUsers } from 'store/user/actions';\n import { restoreCollapsedThreads } from 'store/thread/actions';\n+import { locale, theme, rawParams } from 'common/settings';\n \n if (document.readyState === 'loading') {\n   document.addEventListener('DOMContentLoaded', init);\n@@ -32,8 +30,6 @@ async function init(): Promise<void> {\n     throw new Error(\"Remark42: Can't find root node.\");\n   }\n \n-  const params = parseQuery();\n-  const locale = getLocale(params);\n   const messages = await loadLocale(locale).catch(() => ({}));\n   const boundActions = bindActionCreators({ fetchHiddenUsers, restoreCollapsedThreads }, store.dispatch);\n \n@@ -51,20 +47,22 @@ async function init(): Promise<void> {\n     }\n   });\n \n-  if (params.theme === 'dark') {\n+  if (theme === 'dark') {\n     document.body.classList.add('dark');\n   }\n \n   boundActions.fetchHiddenUsers();\n   boundActions.restoreCollapsedThreads();\n \n   const config = await getConfig();\n-  const optionsParams = parseBooleansFromDictionary(params, 'simple_view');\n-  StaticStore.config = { ...config, ...optionsParams };\n+  StaticStore.config = {\n+    ...config,\n+    simple_view: rawParams.simple_view === undefined || rawParams.simple_view === 'true',\n+  };\n \n   render(\n     <IntlProvider locale={locale} messages={messages}>\n-      <Provider store={store}>{params.page === 'profile' ? <Profile /> : <ConnectedRoot />}</Provider>\n+      <Provider store={store}>{rawParams.page === 'profile' ? <Profile /> : <ConnectedRoot />}</Provider>\n     </IntlProvider>,\n     node\n   );"
    },
    {
      "sha": "25e41f7c6731813a82f683495e835225804c8de1",
      "filename": "frontend/app/store/theme/reducers.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fstore%2Ftheme%2Freducers.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Fstore%2Ftheme%2Freducers.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Fstore%2Ftheme%2Freducers.ts?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -1,9 +1,9 @@\n import { Theme } from 'common/types';\n-import { StaticStore } from 'common/static-store';\n+import * as settings from 'common/settings';\n \n import { THEME_SET_ACTION, THEME_SET } from './types';\n \n-export function theme(state: Theme = StaticStore.query.theme, action: THEME_SET_ACTION): Theme {\n+export function theme(state: Theme = settings.theme, action: THEME_SET_ACTION): Theme {\n   switch (action.type) {\n     case THEME_SET: {\n       return action.theme;"
    },
    {
      "sha": "12476aa0f3bb22b0df49a50bf60fa753caa9022a",
      "filename": "frontend/app/utils/isUserAnonymous.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Futils%2FisUserAnonymous.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Futils%2FisUserAnonymous.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Futils%2FisUserAnonymous.ts?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -4,5 +4,5 @@ import { User } from 'common/types';\n  * Defines whether current client is logged in via `Anonymous provider`\n  */\n export function isUserAnonymous(user: User | null) {\n-  return user === null || user.id.substr(0, 10) === 'anonymous_';\n+  return user === null || user?.id.substring(0, 10) === 'anonymous_';\n }"
    },
    {
      "sha": "5bf537bc9150ff93a4b5d68fd1fa12b003657422",
      "filename": "frontend/app/utils/parse-booleans-from-dictionary.test.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 57,
      "changes": 57,
      "blob_url": "https://github.com/umputun/remark42/blob/6936268fd298d4dc492d42c3eab3a8eefebca6f7/frontend%2Fapp%2Futils%2Fparse-booleans-from-dictionary.test.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/6936268fd298d4dc492d42c3eab3a8eefebca6f7/frontend%2Fapp%2Futils%2Fparse-booleans-from-dictionary.test.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Futils%2Fparse-booleans-from-dictionary.test.ts?ref=6936268fd298d4dc492d42c3eab3a8eefebca6f7",
      "patch": "@@ -1,57 +0,0 @@\n-import { parseBooleansFromDictionary } from './parse-booleans-from-dictionary';\n-\n-const defaultProps = {\n-  components: 'embed,counter',\n-  host: 'http://127.0.0.1:9000',\n-  locale: 'ru',\n-  site_id: 'remark',\n-  theme: 'dark',\n-};\n-\n-describe('getConfigMerge', () => {\n-  it('when we need to get one field and it is \"true\"', () => {\n-    const params = {\n-      ...defaultProps,\n-      simple: 'true',\n-      simple_view: 'true',\n-    };\n-    expect(parseBooleansFromDictionary(params, 'simple_view')).toEqual({ simple_view: true });\n-  });\n-\n-  it('when we need to get one field and it is \"false\"', () => {\n-    const params = {\n-      ...defaultProps,\n-      simple: 'true',\n-      simple_view: 'false',\n-    };\n-    expect(parseBooleansFromDictionary(params, 'simple_view')).toEqual({ simple_view: false });\n-  });\n-  it('when we need to get one or more fields', () => {\n-    const params = {\n-      ...defaultProps,\n-      simple: 'false',\n-      simple_view: 'true',\n-    };\n-    expect(parseBooleansFromDictionary(params, 'simple_view', 'simple')).toEqual({\n-      simple: false,\n-      simple_view: true,\n-    });\n-  });\n-\n-  it('when the required field does not exist', () => {\n-    const params = {\n-      ...defaultProps,\n-      simple: 'true',\n-    };\n-    expect(parseBooleansFromDictionary(params, 'simple_view')).toEqual({});\n-  });\n-\n-  it('when the field has the wrong format', () => {\n-    const params = {\n-      ...defaultProps,\n-      simple: 'true',\n-      simple_view: 'dark',\n-    };\n-    expect(parseBooleansFromDictionary(params, 'simple_view', 'simple')).toEqual({ simple: true });\n-  });\n-});"
    },
    {
      "sha": "e52f9c4c2e9cc77012586a0e5167aa72f07d3ad7",
      "filename": "frontend/app/utils/parse-booleans-from-dictionary.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 15,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/6936268fd298d4dc492d42c3eab3a8eefebca6f7/frontend%2Fapp%2Futils%2Fparse-booleans-from-dictionary.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/6936268fd298d4dc492d42c3eab3a8eefebca6f7/frontend%2Fapp%2Futils%2Fparse-booleans-from-dictionary.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Futils%2Fparse-booleans-from-dictionary.ts?ref=6936268fd298d4dc492d42c3eab3a8eefebca6f7",
      "patch": "@@ -1,15 +0,0 @@\n-export function parseBooleansFromDictionary(input: Record<string, unknown>, ...args: string[]) {\n-  const result: Record<string, boolean> = {};\n-  for (let key of args) {\n-    if (input[key] === undefined) {\n-      continue;\n-    }\n-    if (input[key] === 'true') {\n-      result[key] = true;\n-    }\n-    if (input[key] === 'false') {\n-      result[key] = false;\n-    }\n-  }\n-  return result;\n-}"
    },
    {
      "sha": "4f665cb191e069819a15773848d27328fefd49b4",
      "filename": "frontend/app/utils/parse-query.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Futils%2Fparse-query.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fapp%2Futils%2Fparse-query.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapp%2Futils%2Fparse-query.ts?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -1,9 +1,8 @@\n /** converts window.location.search into object */\n-\n-export function parseQuery<T extends Record<string, string>>(search: string = window.location.search): T {\n-  const params: { [key: string]: string } = {};\n+export function parseQuery(search: string = window.location.search): Record<string, string> {\n+  const params: Record<string, string> = {};\n   new URLSearchParams(search).forEach((value: string, key: string) => {\n     params[key] = value;\n   });\n-  return params as T;\n+  return params;\n }"
    },
    {
      "sha": "e77e0a6e30d85934f751ca6fa31f9ed1b9a3e4aa",
      "filename": "frontend/jest.config.js",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fjest.config.js",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Fjest.config.js",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fjest.config.js?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -39,7 +39,6 @@ module.exports = {\n     '<rootDir>/app/__mocks__/localstorage.ts',\n     '<rootDir>/app/__stubs__/remark-config.ts',\n     '<rootDir>/app/__stubs__/static-config.ts',\n-    '<rootDir>/app/__stubs__/settings.ts',\n   ],\n   collectCoverageFrom: [\n     'app/**/*.{ts,tsx}',"
    },
    {
      "sha": "a9c6f0f5a5aae8305c1bf8df37c6929805fa9532",
      "filename": "frontend/templates/demo.ejs",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Ftemplates%2Fdemo.ejs",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/frontend%2Ftemplates%2Fdemo.ejs",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Ftemplates%2Fdemo.ejs?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -131,7 +131,7 @@\n         // },\n         theme: theme,\n         // locale: \"ru\",\n-        // simple_view: true,\n+        // simple_view: true\n       };\n \n       (function (c, d) {"
    },
    {
      "sha": "6f0fd89112dc3faab27d502498f04d6ecf1e1886",
      "filename": "site/src/docs/configuration/frontend/index.md",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/fe4db30e6ddd3cd86e7fc6efa364d53801143375/site%2Fsrc%2Fdocs%2Fconfiguration%2Ffrontend%2Findex.md",
      "raw_url": "https://github.com/umputun/remark42/raw/fe4db30e6ddd3cd86e7fc6efa364d53801143375/site%2Fsrc%2Fdocs%2Fconfiguration%2Ffrontend%2Findex.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/site%2Fsrc%2Fdocs%2Fconfiguration%2Ffrontend%2Findex.md?ref=fe4db30e6ddd3cd86e7fc6efa364d53801143375",
      "patch": "@@ -5,10 +5,9 @@ title: Frontend Configuration\n ## Configuration\n \n - **`host`**`: string` (required) – hostname of Remark42 server, same as REMARK_URL in backend config, e.g. \"https://demo.remark42.com\"\n-- **`site_id`**`: string` (optional, `remark` by default) –  the `SITE` that you passed to Remark42 instance on start of backend.\n-- **`url`**`: string` (optional,  `window.location.origin + window.location.pathname` by default) – url to the page with comments, it is used as unique identificator for comments thread\n+- **`site_id`**`: string` (optional, `remark` by default) – the `SITE` that you passed to Remark42 instance on start of backend.\n+- **`url`**`: string` (optional, `window.location.origin + window.location.pathname` by default) – url to the page with comments, it is used as unique identificator for comments thread\n   Note that if you use query parameters as significant part of URL (the one that actually changes content on page) you will have to configure URL manually to keep query params, as `window.location.origin + window.location.pathname` doesn't contain query params and hash. For example, default URL for `https://example/com/example-post?id=1#hash` would be `https://example/com/example-post`\n-  \n - **`components`**`: ['embed' | 'last-comments' | 'counter']` (optional, `['embed']` by default) – an array of widgets that should be rendered on a page. You may use more than one widget on a page.\n   Available components are:\n   - `'embed'` – basic comments widget\n@@ -19,9 +18,10 @@ title: Frontend Configuration\n - **`page_title`**`: string` (optional, `document.title` by default) – title for current comments page\n - **`locale`**`: enum` (optional, `'en'` by default) – interface localization, [check possible localizations](#locales)\n - **`show_email_subscription`**`: boolean` (optional, `true` by default) – enables email subscription feature in interface when enable it from backend side, if you set this param in `false` you will get notifications email notifications as admin but your users won't have interface for subscription\n+- **`show_rss_subscription`**`: boolean` (optional, `true` by default) – enables RSS subscription feature in interface\n - **`simple_view`**`: boolean` (optional, `false` by default) – overrides the parameter from the backend minimized UI with basic info only\n \n-Example with all of the params: \n+Example with all of the params:\n \n ```html\n <script>\n@@ -49,6 +49,7 @@ Add following **initialization** script after it.\n <script>!function(e,n){for(var o=0;o<e.length;o++){var r=n.createElement(\"script\"),c=\".js\",d=n.head||n.body;\"noModule\"in r?(r.type=\"module\",c=\".mjs\"):r.async=!0,r.defer=!0,r.src=remark_config.host+\"/web/\"+e[o]+c,d.appendChild(r)}}(remark_config.components||[\"embed\"],document);</script>\n ```\n <!-- prettier-ignore-end -->\n+\n ## Comments\n \n It's the main widget that renders a list of comments with ability of commenting.\n@@ -57,19 +58,19 @@ Add following snippet in the place where you want to see Remark42 widget. The co\n ```html\n <div id=\"remark42\"></div>\n ```\n+\n ::: note 💡\n **Note:** The initialization script should be placed after the code mentioned above.\n :::\n \n If you want to set this up on a Single Page App, see the [appropriate doc page](https://remark42.com/docs/configuration/frontend/spa/).\n \n-\n #### Themes\n \n Remark42 has two themes: light and dark. You can pick one using a configuration object, but there is also a possibility to switch between themes in runtime. For this purpose, Remark42 adds to the `window` object named `REMARK42`, which contains a function `changeTheme`. Just call this function and pass a name of the theme that you want to turn on:\n \n ```js\n-window.REMARK42.changeTheme('light');\n+window.REMARK42.changeTheme(\"light\")\n ```\n \n #### Locales\n@@ -89,10 +90,10 @@ Add this snippet to the bottom of web page, or adjust already present `remark_co\n ```html\n <script>\n   var remark_config = {\n-    host: 'REMARK_URL',\n-    site_id: 'YOUR_SITE_ID',\n-    components: ['last-comments'],\n-  };\n+    host: \"REMARK_URL\",\n+    site_id: \"YOUR_SITE_ID\",\n+    components: [\"last-comments\"],\n+  }\n </script>\n ```\n \n@@ -116,10 +117,10 @@ Add this snippet to the bottom of web page, or adjust already present `remark_co\n ```html\n <script>\n   var remark_config = {\n-    host: 'REMARK_URL',\n-    site_id: 'YOUR_SITE_ID',\n-    components: ['counter'],\n-  };\n+    host: \"REMARK_URL\",\n+    site_id: \"YOUR_SITE_ID\",\n+    components: [\"counter\"],\n+  }\n </script>\n ```\n \n@@ -139,4 +140,3 @@ And then add a node like this in the place where you want to see a number of com\n You can use as many nodes like this as you need to. The script will find all of them by the class `remark__counter`, and it will use the `data-url` attribute to define the page with comments.\n \n Also, the script can use `url` property from `remark_config` object or `window.location.origin + window.location.pathname` if nothing else is defined.\n-"
    }
  ]
}
