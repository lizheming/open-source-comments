{
  "sha": "dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67",
  "node_id": "C_kwDOBtgov9oAKGRkMWJhOWI1MTgzMWJkZGIwZDhmYWUwYTlmMDlkZmM3NzNiNjFmNjc",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2022-10-02T23:44:24Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2022-10-03T08:28:29Z"
    },
    "message": "clean up comment HasReplies cache on child comment deletion\n\nPreviously, the cache kept the entry and deletion of the parent comment\nafter child deletion was not possible for the rest\nof cache life (5m) duration. Now it's possible to delete\na parent comment after the deletion of the child comment\nby a user or admin.\n\nResolves #1481",
    "tree": {
      "sha": "af217bd1a57f5d7afde46cd29024c44f8ffa03ab",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/af217bd1a57f5d7afde46cd29024c44f8ffa03ab"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67",
  "html_url": "https://github.com/umputun/remark42/commit/dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cebe929118d451ec722f882a40b0b75161829047",
      "url": "https://api.github.com/repos/umputun/remark42/commits/cebe929118d451ec722f882a40b0b75161829047",
      "html_url": "https://github.com/umputun/remark42/commit/cebe929118d451ec722f882a40b0b75161829047"
    }
  ],
  "stats": {
    "total": 165,
    "additions": 160,
    "deletions": 5
  },
  "files": [
    {
      "sha": "d393833832b11f3d1bda8c027d046fca50b7f2f3",
      "filename": "backend/app/rest/api/rest_private_test.go",
      "status": "modified",
      "additions": 103,
      "deletions": 2,
      "changes": 105,
      "blob_url": "https://github.com/umputun/remark42/blob/dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67/backend%2Fapp%2Frest%2Fapi%2Frest_private_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67/backend%2Fapp%2Frest%2Fapi%2Frest_private_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_private_test.go?ref=dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67",
      "patch": "@@ -373,6 +373,109 @@ func TestRest_UpdateDelete(t *testing.T) {\n \t\t{URL: \"https://radio-t.com/blah2\", Count: 0}}, j)\n }\n \n+func TestRest_DeleteChildThenParent(t *testing.T) {\n+\tts, _, teardown := startupT(t)\n+\tdefer teardown()\n+\n+\tp := store.Comment{Text: \"test test #1\",\n+\t\tLocator: store.Locator{SiteID: \"remark42\", URL: \"https://radio-t.com/blah1\"}}\n+\tidP := addComment(t, p, ts)\n+\n+\tc1 := store.Comment{Text: \"test test #1\", ParentID: idP,\n+\t\tLocator: store.Locator{SiteID: \"remark42\", URL: \"https://radio-t.com/blah1\"}}\n+\tidC1 := addComment(t, c1, ts)\n+\n+\tc2 := store.Comment{Text: \"test test #1\", ParentID: idP,\n+\t\tLocator: store.Locator{SiteID: \"remark42\", URL: \"https://radio-t.com/blah1\"}}\n+\tidC2 := addComment(t, c2, ts)\n+\n+\t// check multi count equals two\n+\tresp, err := post(t, ts.URL+\"/api/v1/counts?site=remark42\", `[\"https://radio-t.com/blah1\"]`)\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n+\tbb, err := io.ReadAll(resp.Body)\n+\trequire.NoError(t, err)\n+\tassert.NoError(t, resp.Body.Close())\n+\tj := []store.PostInfo{}\n+\terr = json.Unmarshal(bb, &j)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, []store.PostInfo{{URL: \"https://radio-t.com/blah1\", Count: 3}}, j)\n+\n+\t// update a parent comment fails after child is created\n+\tclient := http.Client{}\n+\tdefer client.CloseIdleConnections()\n+\treq, err := http.NewRequest(http.MethodPut, ts.URL+\"/api/v1/comment/\"+idP+\"?site=remark42&url=https://radio-t.com/blah1\",\n+\t\tstrings.NewReader(`{\"text\": \"updated text\", \"summary\":\"updated by user\"}`))\n+\trequire.NoError(t, err)\n+\treq.Header.Add(\"X-JWT\", devToken)\n+\tb, err := client.Do(req)\n+\trequire.NoError(t, err)\n+\tbody, err := io.ReadAll(b.Body)\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, http.StatusBadRequest, b.StatusCode, string(body))\n+\tassert.NoError(t, b.Body.Close())\n+\n+\t// delete first child comment\n+\treq, err = http.NewRequest(http.MethodPut, ts.URL+\"/api/v1/comment/\"+idC1+\"?site=remark42&url=https://radio-t.com/blah1\",\n+\t\tstrings.NewReader(`{\"delete\": true, \"summary\":\"removed by user\"}`))\n+\trequire.NoError(t, err)\n+\treq.Header.Add(\"X-JWT\", devToken)\n+\tb, err = client.Do(req)\n+\trequire.NoError(t, err)\n+\tbody, err = io.ReadAll(b.Body)\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, http.StatusOK, b.StatusCode, string(body))\n+\tassert.NoError(t, b.Body.Close())\n+\n+\t// delete a parent comment, fails as one comment child still present\n+\tdefer client.CloseIdleConnections()\n+\treq, err = http.NewRequest(http.MethodPut, ts.URL+\"/api/v1/comment/\"+idP+\"?site=remark42&url=https://radio-t.com/blah1\",\n+\t\tstrings.NewReader(`{\"delete\": true, \"summary\":\"removed by user\"}`))\n+\trequire.NoError(t, err)\n+\treq.Header.Add(\"X-JWT\", devToken)\n+\tb, err = client.Do(req)\n+\trequire.NoError(t, err)\n+\tbody, err = io.ReadAll(b.Body)\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, http.StatusBadRequest, b.StatusCode, string(body))\n+\tassert.NoError(t, b.Body.Close())\n+\n+\t// delete second child comment, as an admin to check both deletion methods\n+\treq, err = http.NewRequest(http.MethodDelete,\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/comment/%s?site=remark42&url=https://radio-t.com/blah1\", ts.URL, idC2), http.NoBody)\n+\trequire.NoError(t, err)\n+\trequireAdminOnly(t, req)\n+\tresp, err = sendReq(t, req, adminUmputunToken)\n+\tassert.NoError(t, err)\n+\tassert.NoError(t, resp.Body.Close())\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n+\n+\t// delete a parent comment, shouldn't fail after children are deleted\n+\tdefer client.CloseIdleConnections()\n+\treq, err = http.NewRequest(http.MethodPut, ts.URL+\"/api/v1/comment/\"+idP+\"?site=remark42&url=https://radio-t.com/blah1\",\n+\t\tstrings.NewReader(`{\"delete\": true, \"summary\":\"removed by user\"}`))\n+\trequire.NoError(t, err)\n+\treq.Header.Add(\"X-JWT\", devToken)\n+\tb, err = client.Do(req)\n+\trequire.NoError(t, err)\n+\tbody, err = io.ReadAll(b.Body)\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, http.StatusOK, b.StatusCode, string(body))\n+\tassert.NoError(t, b.Body.Close())\n+\n+\t// check multi count decremented to zero\n+\tresp, err = post(t, ts.URL+\"/api/v1/counts?site=remark42\", `[\"https://radio-t.com/blah1\"]`)\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n+\tbb, err = io.ReadAll(resp.Body)\n+\trequire.NoError(t, err)\n+\tassert.NoError(t, resp.Body.Close())\n+\tj = []store.PostInfo{}\n+\terr = json.Unmarshal(bb, &j)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, []store.PostInfo{{URL: \"https://radio-t.com/blah1\", Count: 0}}, j)\n+}\n+\n func TestRest_UpdateNotOwner(t *testing.T) {\n \tts, srv, teardown := startupT(t)\n \tdefer teardown()\n@@ -396,8 +499,6 @@ func TestRest_UpdateNotOwner(t *testing.T) {\n \tassert.Equal(t, http.StatusForbidden, b.StatusCode, string(body), \"update from non-owner\")\n \tassert.Equal(t, `{\"code\":3,\"details\":\"can not edit comments for other users\",\"error\":\"rejected\"}`+\"\\n\", string(body))\n \n-\tclient = http.Client{}\n-\tdefer client.CloseIdleConnections()\n \treq, err = http.NewRequest(http.MethodPut, ts.URL+\"/api/v1/comment/\"+id1+\n \t\t\"?site=remark42&url=https://radio-t.com/blah1\", strings.NewReader(`ERRR \"text\":\"updated text\", \"summary\":\"my\"}`))\n \tassert.NoError(t, err)"
    },
    {
      "sha": "8427d4cc9992fed2709d41a77a944a82141aeee9",
      "filename": "backend/app/store/service/service.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark42/blob/dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67/backend%2Fapp%2Fstore%2Fservice%2Fservice.go",
      "raw_url": "https://github.com/umputun/remark42/raw/dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67/backend%2Fapp%2Fstore%2Fservice%2Fservice.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Fservice.go?ref=dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67",
      "patch": "@@ -496,6 +496,12 @@ func (s *DataStore) EditComment(locator store.Locator, commentID string, req Edi\n \t\tif e := s.AdminStore.OnEvent(comment.Locator.SiteID, admin.EvDelete); e != nil {\n \t\t\tlog.Printf(\"[WARN] failed to send delete event, %s\", e)\n \t\t}\n+\t\t// clean up the comment and it's parent from cache, so that\n+\t\t// after cleaning up the child, parent won't be stuck non-deletable till cache expires\n+\t\tif s.repliesCache.LoadingCache != nil {\n+\t\t\ts.repliesCache.Delete(commentID)\n+\t\t\ts.repliesCache.Delete(comment.ParentID)\n+\t\t}\n \t\tcomment.Deleted = true\n \t\tdelReq := engine.DeleteRequest{Locator: locator, CommentID: commentID, DeleteMode: store.SoftDelete}\n \t\treturn comment, s.Engine.Delete(delReq)\n@@ -739,6 +745,17 @@ func (s *DataStore) Delete(locator store.Locator, commentID string, mode store.D\n \tif e := s.AdminStore.OnEvent(locator.SiteID, admin.EvDelete); e != nil {\n \t\tlog.Printf(\"[WARN] failed to send delete event, %s\", e)\n \t}\n+\t// get comment to learn it's parent ID\n+\tcomment, err := s.Engine.Get(engine.GetRequest{Locator: locator, CommentID: commentID})\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\t// clean up the comment and it's parent from cache, so that\n+\t// after cleaning up the child, parent won't be stuck non-deletable till cache expires\n+\tif s.repliesCache.LoadingCache != nil {\n+\t\ts.repliesCache.Delete(commentID)\n+\t\ts.repliesCache.Delete(comment.ParentID)\n+\t}\n \treq := engine.DeleteRequest{Locator: locator, CommentID: commentID, DeleteMode: mode}\n \treturn s.Engine.Delete(req)\n }"
    },
    {
      "sha": "80f57d2cab52554291cf1bdaeae1633f4d3e7491",
      "filename": "backend/app/store/service/service_test.go",
      "status": "modified",
      "additions": 40,
      "deletions": 3,
      "changes": 43,
      "blob_url": "https://github.com/umputun/remark42/blob/dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go?ref=dd1ba9b51831bddb0d8fae0a9f09dfc773b61f67",
      "patch": "@@ -971,7 +971,7 @@ func TestService_HasReplies(t *testing.T) {\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n-\tb := DataStore{Engine: eng, EditDuration: 100 * time.Millisecond,\n+\tb := DataStore{Engine: eng,\n \t\tAdminStore: admin.NewStaticStore(\"secret 123\", []string{\"radio-t\"}, []string{\"user2\"}, \"user@email.com\")}\n \tdefer b.Close()\n \n@@ -982,11 +982,10 @@ func TestService_HasReplies(t *testing.T) {\n \t\tLocator:   store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n \t\tUser:      store.User{ID: \"user1\", Name: \"user name\"},\n \t}\n-\n \tassert.False(t, b.HasReplies(comment))\n \n \treply := store.Comment{\n-\t\tID:        \"123456\",\n+\t\tID:        \"c-1\",\n \t\tParentID:  \"id-1\",\n \t\tText:      \"some text\",\n \t\tTimestamp: time.Date(2017, 12, 20, 15, 18, 22, 0, time.Local),\n@@ -995,7 +994,45 @@ func TestService_HasReplies(t *testing.T) {\n \t}\n \t_, err := b.Create(reply)\n \tassert.NoError(t, err)\n+\t_, found := b.repliesCache.Peek(comment.ID)\n+\tassert.False(t, found, \"not yet checked\")\n \tassert.True(t, b.HasReplies(comment))\n+\t_, found = b.repliesCache.Peek(reply.ParentID)\n+\tassert.True(t, found, \"checked and has replies\")\n+\n+\t// deletion of the parent comment shouldn't work as the comment has replies\n+\t_, err = b.EditComment(reply.Locator, comment.ID, EditRequest{Orig: comment.ID, Delete: true, Summary: \"user deletes the comment\"})\n+\tassert.EqualError(t, err, \"parent comment with reply can't be edited, \"+comment.ID)\n+\t_, found = b.repliesCache.Peek(reply.ParentID)\n+\tassert.True(t, found, \"checked and has replies\")\n+\n+\t// should not report replies after deletion of the child\n+\terr = b.Delete(reply.Locator, reply.ID, store.HardDelete)\n+\tassert.NoError(t, err)\n+\t_, found = b.repliesCache.Peek(reply.ParentID)\n+\tassert.False(t, found, \"cleaned up from cache by Delete call\")\n+\tassert.False(t, b.HasReplies(comment))\n+\t_, found = b.repliesCache.Peek(reply.ParentID)\n+\tassert.False(t, found, \"checked and has no replies\")\n+\n+\t// recreate reply with the new ID\n+\treply.ID = \"c-2\"\n+\t_, err = b.Create(reply)\n+\tassert.NoError(t, err)\n+\t_, found = b.repliesCache.Peek(reply.ParentID)\n+\tassert.False(t, found, \"not yet checked\")\n+\tassert.True(t, b.HasReplies(comment))\n+\t_, found = b.repliesCache.Peek(reply.ParentID)\n+\tassert.True(t, found, \"checked and has replies again\")\n+\n+\t// should not report replies after deletion of the child using Edit mechanism\n+\t_, err = b.EditComment(reply.Locator, reply.ID, EditRequest{Orig: reply.ID, Delete: true, Summary: \"user deletes the comment\"})\n+\tassert.NoError(t, err)\n+\t_, found = b.repliesCache.Peek(reply.ParentID)\n+\tassert.False(t, found, \"cleaned up from cache by EditComment call\")\n+\tassert.False(t, b.HasReplies(comment))\n+\t_, found = b.repliesCache.Peek(reply.ParentID)\n+\tassert.False(t, found, \"checked and has no replies\")\n }\n \n func TestService_UserReplies(t *testing.T) {"
    }
  ]
}
