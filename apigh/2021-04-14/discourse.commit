{
  "sha": "528cfea079a5555e92b1d546a199e03fd6528790",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo1MjhjZmVhMDc5YTU1NTVlOTJiMWQ1NDZhMTk5ZTAzZmQ2NTI4Nzkw",
  "commit": {
    "author": {
      "name": "Dan Ungureanu",
      "email": "dan@ungureanu.me",
      "date": "2021-04-14T09:15:56Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-04-14T09:15:56Z"
    },
    "message": "FEATURE: Auto-activate users invited by email (#12675)\n\nWhen invited by email, users will receive an invite URL which contains\r\na token. If that token is present when the invite is redeemed, their\r\naccount will be automatically activated.",
    "tree": {
      "sha": "a76ef9980da2288ebcb7327a5f4834ac26ac062e",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/a76ef9980da2288ebcb7327a5f4834ac26ac062e"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/528cfea079a5555e92b1d546a199e03fd6528790",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdrLMCRBK7hj4Ov3rIwAAdHIIAC2aRRTGZ3Rb+ZMLILGyQlP/\np/Vdzj2KJjrpvVKH0Mhh9tGU09gj6D7YFA4MZGW1mlPOOpoj3WhMDorg5OpOamKT\nEGeWPQuvF1JS9aNvTC+TAHy+A7ljuu66R59w1J6+aSobi+ZXYCG/3s5zMgvX3E3M\nW910Ltvg8Xvh6KA5MSzH6n8yfNfZtkLd/0Leczx+Sq9S5mn1+JlyLrJgicEe81eG\nGz747JX5nLOh2IkO6JJ3xdkLc4Hy4+uqh3K5UhMw67AvHgP9LTIBB0GtyJ8F64GD\ncNuyCtiZTKbcsdCsguNHO7o4eKFLEM/N9w8oo3ExbPOy2APxY+fgUqtgr1IpRbU=\n=lNqw\n-----END PGP SIGNATURE-----\n",
      "payload": "tree a76ef9980da2288ebcb7327a5f4834ac26ac062e\nparent e4e2c7c66f04f842ce8d6cfe68268205492b1606\nauthor Dan Ungureanu <dan@ungureanu.me> 1618391756 +0300\ncommitter GitHub <noreply@github.com> 1618391756 +0300\n\nFEATURE: Auto-activate users invited by email (#12675)\n\nWhen invited by email, users will receive an invite URL which contains\r\na token. If that token is present when the invite is redeemed, their\r\naccount will be automatically activated."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/528cfea079a5555e92b1d546a199e03fd6528790",
  "html_url": "https://github.com/discourse/discourse/commit/528cfea079a5555e92b1d546a199e03fd6528790",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/528cfea079a5555e92b1d546a199e03fd6528790/comments",
  "author": {
    "login": "udan11",
    "id": 4147664,
    "node_id": "MDQ6VXNlcjQxNDc2NjQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4147664?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/udan11",
    "html_url": "https://github.com/udan11",
    "followers_url": "https://api.github.com/users/udan11/followers",
    "following_url": "https://api.github.com/users/udan11/following{/other_user}",
    "gists_url": "https://api.github.com/users/udan11/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/udan11/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/udan11/subscriptions",
    "organizations_url": "https://api.github.com/users/udan11/orgs",
    "repos_url": "https://api.github.com/users/udan11/repos",
    "events_url": "https://api.github.com/users/udan11/events{/privacy}",
    "received_events_url": "https://api.github.com/users/udan11/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e4e2c7c66f04f842ce8d6cfe68268205492b1606",
      "url": "https://api.github.com/repos/discourse/discourse/commits/e4e2c7c66f04f842ce8d6cfe68268205492b1606",
      "html_url": "https://github.com/discourse/discourse/commit/e4e2c7c66f04f842ce8d6cfe68268205492b1606"
    }
  ],
  "stats": {
    "total": 134,
    "additions": 105,
    "deletions": 29
  },
  "files": [
    {
      "sha": "3c3658b06fc6c5c7995e7de99b9218d55a33e45d",
      "filename": "app/assets/javascripts/discourse/app/controllers/invites-show.js",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/528cfea079a5555e92b1d546a199e03fd6528790/app/assets/javascripts/discourse/app/controllers/invites-show.js",
      "raw_url": "https://github.com/discourse/discourse/raw/528cfea079a5555e92b1d546a199e03fd6528790/app/assets/javascripts/discourse/app/controllers/invites-show.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/invites-show.js?ref=528cfea079a5555e92b1d546a199e03fd6528790",
      "patch": "@@ -22,6 +22,8 @@ export default Controller.extend(\n   NameValidation,\n   UserFieldsValidation,\n   {\n+    queryParams: [\"t\"],\n+\n     createAccount: controller(),\n \n     invitedBy: readOnly(\"model.invited_by\"),\n@@ -216,6 +218,8 @@ export default Controller.extend(\n \n         if (this.isInviteLink) {\n           data.email = this.email;\n+        } else {\n+          data.email_token = this.t;\n         }\n \n         ajax({"
    },
    {
      "sha": "1a86eb63af612191ada28782e8eff81c5b7909ed",
      "filename": "app/controllers/invites_controller.rb",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/discourse/discourse/blob/528cfea079a5555e92b1d546a199e03fd6528790/app/controllers/invites_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/528cfea079a5555e92b1d546a199e03fd6528790/app/controllers/invites_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/invites_controller.rb?ref=528cfea079a5555e92b1d546a199e03fd6528790",
      "patch": "@@ -197,7 +197,7 @@ def destroy\n   # via the SessionController#sso_login route\n   def perform_accept_invitation\n     params.require(:id)\n-    params.permit(:email, :username, :name, :password, :timezone, user_custom_fields: {})\n+    params.permit(:email, :username, :name, :password, :timezone, :email_token, user_custom_fields: {})\n \n     invite = Invite.find_by(invite_key: params[:id])\n \n@@ -212,13 +212,13 @@ def perform_accept_invitation\n           session: session\n         }\n \n-        attrs[:email] =\n-          if invite.is_invite_link?\n-            params.require([:email])\n-            params[:email]\n-          else\n-            invite.email\n-          end\n+        if invite.is_invite_link?\n+          params.require(:email)\n+          attrs[:email] = params[:email]\n+        else\n+          attrs[:email] = invite.email\n+          attrs[:email_token] = params[:email_token] if params[:email_token].present?\n+        end\n \n         user = invite.redeem(**attrs)\n       rescue ActiveRecord::RecordInvalid, ActiveRecord::RecordNotSaved => e"
    },
    {
      "sha": "6f5f284422f68592f307ec3846a7cbedc0d87c35",
      "filename": "app/mailers/invite_mailer.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/528cfea079a5555e92b1d546a199e03fd6528790/app/mailers/invite_mailer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/528cfea079a5555e92b1d546a199e03fd6528790/app/mailers/invite_mailer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/mailers/invite_mailer.rb?ref=528cfea079a5555e92b1d546a199e03fd6528790",
      "patch": "@@ -36,7 +36,7 @@ def send_invite(invite, invite_to_topic: false)\n                   template: sanitized_message ? 'custom_invite_mailer' : 'invite_mailer',\n                   inviter_name: inviter_name,\n                   site_domain_name: Discourse.current_hostname,\n-                  invite_link: \"#{Discourse.base_url}/invites/#{invite.invite_key}\",\n+                  invite_link: invite.link(with_email_token: true),\n                   topic_title: topic_title,\n                   topic_excerpt: topic_excerpt,\n                   site_description: SiteSetting.site_description,\n@@ -47,7 +47,7 @@ def send_invite(invite, invite_to_topic: false)\n                   template: sanitized_message ? 'custom_invite_forum_mailer' : 'invite_forum_mailer',\n                   inviter_name: inviter_name,\n                   site_domain_name: Discourse.current_hostname,\n-                  invite_link: \"#{Discourse.base_url}/invites/#{invite.invite_key}\",\n+                  invite_link: invite.link(with_email_token: true),\n                   site_description: SiteSetting.site_description,\n                   site_title: SiteSetting.title,\n                   user_custom_message: sanitized_message)"
    },
    {
      "sha": "76181639c9d85f53f6c085207c3afc2bb02ebfa4",
      "filename": "app/models/invite.rb",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/discourse/discourse/blob/528cfea079a5555e92b1d546a199e03fd6528790/app/models/invite.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/528cfea079a5555e92b1d546a199e03fd6528790/app/models/invite.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/invite.rb?ref=528cfea079a5555e92b1d546a199e03fd6528790",
      "patch": "@@ -39,6 +39,12 @@ class ValidationFailed < StandardError; end\n     self.expires_at ||= SiteSetting.invite_expiry_days.days.from_now\n   end\n \n+  before_save do\n+    if will_save_change_to_email?\n+      self.email_token = email.present? ? SecureRandom.hex : nil\n+    end\n+  end\n+\n   before_validation do\n     self.email = Email.downcase(email) unless email.nil?\n   end\n@@ -85,8 +91,9 @@ def expired?\n     expires_at < Time.zone.now\n   end\n \n-  def link\n-    \"#{Discourse.base_url}/invites/#{invite_key}\"\n+  def link(with_email_token: false)\n+    with_email_token ? \"#{Discourse.base_url}/invites/#{invite_key}?t=#{email_token}\"\n+                     : \"#{Discourse.base_url}/invites/#{invite_key}\"\n   end\n \n   def link_valid?\n@@ -167,7 +174,7 @@ def self.generate(invited_by, opts = nil)\n     invite.reload\n   end\n \n-  def redeem(email: nil, username: nil, name: nil, password: nil, user_custom_fields: nil, ip_address: nil, session: nil)\n+  def redeem(email: nil, username: nil, name: nil, password: nil, user_custom_fields: nil, ip_address: nil, session: nil, email_token: nil)\n     return if !redeemable?\n \n     if is_invite_link? && UserEmail.exists?(email: email)\n@@ -183,7 +190,8 @@ def redeem(email: nil, username: nil, name: nil, password: nil, user_custom_fiel\n       password: password,\n       user_custom_fields: user_custom_fields,\n       ip_address: ip_address,\n-      session: session\n+      session: session,\n+      email_token: email_token\n     ).redeem\n   end\n "
    },
    {
      "sha": "f8c607afe174459478164c1b7dacaeecb02d78c6",
      "filename": "app/models/invite_redeemer.rb",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/528cfea079a5555e92b1d546a199e03fd6528790/app/models/invite_redeemer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/528cfea079a5555e92b1d546a199e03fd6528790/app/models/invite_redeemer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/invite_redeemer.rb?ref=528cfea079a5555e92b1d546a199e03fd6528790",
      "patch": "@@ -1,6 +1,6 @@\n # frozen_string_literal: true\n \n-InviteRedeemer = Struct.new(:invite, :email, :username, :name, :password, :user_custom_fields, :ip_address, :session, keyword_init: true) do\n+InviteRedeemer = Struct.new(:invite, :email, :username, :name, :password, :user_custom_fields, :ip_address, :session, :email_token, keyword_init: true) do\n \n   def redeem\n     Invite.transaction do\n@@ -14,7 +14,7 @@ def redeem\n   end\n \n   # extracted from User cause it is very specific to invites\n-  def self.create_user_from_invite(email:, invite:, username: nil, name: nil, password: nil, user_custom_fields: nil, ip_address: nil, session: nil)\n+  def self.create_user_from_invite(email:, invite:, username: nil, name: nil, password: nil, user_custom_fields: nil, ip_address: nil, session: nil, email_token: nil)\n     user = User.where(staged: true).with_email(email.strip.downcase).first\n     user.unstage! if user\n \n@@ -76,7 +76,7 @@ def self.create_user_from_invite(email:, invite:, username: nil, name: nil, pass\n     user.save!\n     authenticator.finish\n \n-    if invite.emailed_status != Invite.emailed_status_types[:not_required] && email == invite.email\n+    if invite.emailed_status != Invite.emailed_status_types[:not_required] && email == invite.email && invite.email_token.present? && email_token == invite.email_token\n       user.email_tokens.create!(email: user.email)\n       user.activate\n     end\n@@ -131,7 +131,8 @@ def get_invited_user\n       password: password,\n       user_custom_fields: user_custom_fields,\n       ip_address: ip_address,\n-      session: session\n+      session: session,\n+      email_token: email_token\n     )\n     result.send_welcome_message = false\n     result"
    },
    {
      "sha": "43d1632a662dd3edb71d46fb48b550ca14efc87b",
      "filename": "db/migrate/20210409142455_add_token_to_invites.rb",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/528cfea079a5555e92b1d546a199e03fd6528790/db/migrate/20210409142455_add_token_to_invites.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/528cfea079a5555e92b1d546a199e03fd6528790/db/migrate/20210409142455_add_token_to_invites.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/db/migrate/20210409142455_add_token_to_invites.rb?ref=528cfea079a5555e92b1d546a199e03fd6528790",
      "patch": "@@ -0,0 +1,7 @@\n+# frozen_string_literal: true\n+\n+class AddTokenToInvites < ActiveRecord::Migration[6.0]\n+  def change\n+    add_column :invites, :email_token, :string\n+  end\n+end"
    },
    {
      "sha": "015879c52b85114c92519e84126246d9b212f605",
      "filename": "plugins/discourse-narrative-bot/spec/requests/discobot_welcome_post_spec.rb",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/528cfea079a5555e92b1d546a199e03fd6528790/plugins/discourse-narrative-bot/spec/requests/discobot_welcome_post_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/528cfea079a5555e92b1d546a199e03fd6528790/plugins/discourse-narrative-bot/spec/requests/discobot_welcome_post_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/plugins/discourse-narrative-bot/spec/requests/discobot_welcome_post_spec.rb?ref=528cfea079a5555e92b1d546a199e03fd6528790",
      "patch": "@@ -29,16 +29,15 @@\n     end\n \n     context 'when user redeems an invite' do\n-      let(:invite) { Fabricate(:invite, invited_by: Fabricate(:admin), email: 'testing@gmail.com') }\n+      let!(:invite) { Fabricate(:invite, invited_by: Fabricate(:admin), email: 'testing@gmail.com') }\n \n       it 'should delay the welcome post until the user logs in' do\n-        invite\n-\n         expect do\n           put \"/invites/show/#{invite.invite_key}.json\", params: {\n             username: 'somename',\n             name: 'testing',\n-            password: 'asodaasdaosdhq'\n+            password: 'verystrongpassword',\n+            email_token: invite.email_token\n           }\n         end.to change { User.count }.by(1)\n "
    },
    {
      "sha": "aee4dcce2f4b89348175db2ad1db945be7c49092",
      "filename": "spec/models/invite_redeemer_spec.rb",
      "status": "modified",
      "additions": 25,
      "deletions": 2,
      "changes": 27,
      "blob_url": "https://github.com/discourse/discourse/blob/528cfea079a5555e92b1d546a199e03fd6528790/spec/models/invite_redeemer_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/528cfea079a5555e92b1d546a199e03fd6528790/spec/models/invite_redeemer_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/invite_redeemer_spec.rb?ref=528cfea079a5555e92b1d546a199e03fd6528790",
      "patch": "@@ -10,9 +10,9 @@\n       user = InviteRedeemer.create_user_from_invite(invite: invite, email: invite.email, username: 'walter', name: 'Walter White')\n       expect(user.username).to eq('walter')\n       expect(user.name).to eq('Walter White')\n-      expect(user).to be_active\n       expect(user.email).to eq('walter.white@email.com')\n       expect(user.approved).to eq(true)\n+      expect(user.active).to eq(false)\n     end\n \n     it \"can set the password and ip_address\" do\n@@ -52,7 +52,30 @@\n       expect(user.approved).to eq(true)\n     end\n \n-    it \"should not activate user invited via links\" do\n+    it \"activates user invited via email with a token\" do\n+      invite = Fabricate(:invite, invited_by: Fabricate(:admin), email: 'walter.white@email.com', emailed_status: Invite.emailed_status_types[:sent])\n+      user = InviteRedeemer.create_user_from_invite(invite: invite, email: invite.email, username: 'walter', name: 'Walter White', email_token: invite.email_token)\n+\n+      expect(user.username).to eq('walter')\n+      expect(user.name).to eq('Walter White')\n+      expect(user.email).to eq('walter.white@email.com')\n+      expect(user.approved).to eq(true)\n+      expect(user.active).to eq(true)\n+    end\n+\n+    it \"does not activate user invited via email with a wrong token\" do\n+      invite = Fabricate(:invite, invited_by: Fabricate(:user), email: 'walter.white@email.com', emailed_status: Invite.emailed_status_types[:sent])\n+      user = InviteRedeemer.create_user_from_invite(invite: invite, email: invite.email, username: 'walter', name: 'Walter White', email_token: 'wrong_token')\n+      expect(user.active).to eq(false)\n+    end\n+\n+    it \"does not activate user invited via email without a token\" do\n+      invite = Fabricate(:invite, invited_by: Fabricate(:user), email: 'walter.white@email.com', emailed_status: Invite.emailed_status_types[:sent])\n+      user = InviteRedeemer.create_user_from_invite(invite: invite, email: invite.email, username: 'walter', name: 'Walter White')\n+      expect(user.active).to eq(false)\n+    end\n+\n+    it \"does not activate user invited via links\" do\n       invite = Fabricate(:invite, email: 'walter.white@email.com', emailed_status: Invite.emailed_status_types[:not_required])\n       user = InviteRedeemer.create_user_from_invite(invite: invite, email: invite.email, username: 'walter', name: 'Walter White')\n "
    },
    {
      "sha": "fd722a15422b4f74722749ba390be660aed97203",
      "filename": "spec/models/invite_spec.rb",
      "status": "modified",
      "additions": 21,
      "deletions": 2,
      "changes": 23,
      "blob_url": "https://github.com/discourse/discourse/blob/528cfea079a5555e92b1d546a199e03fd6528790/spec/models/invite_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/528cfea079a5555e92b1d546a199e03fd6528790/spec/models/invite_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/invite_spec.rb?ref=528cfea079a5555e92b1d546a199e03fd6528790",
      "patch": "@@ -40,7 +40,23 @@\n     end\n   end\n \n-  context '::generate' do\n+  context 'before_save' do\n+    it 'regenerates the email token when email is changed' do\n+      invite = Fabricate(:invite, email: 'test@example.com')\n+      token = invite.email_token\n+\n+      invite.update!(email: 'test@example.com')\n+      expect(invite.email_token).to eq(token)\n+\n+      invite.update!(email: 'test2@example.com')\n+      expect(invite.email_token).not_to eq(token)\n+\n+      invite.update!(email: nil)\n+      expect(invite.email_token).to eq(nil)\n+    end\n+  end\n+\n+  context '.generate' do\n     it 'saves an invites' do\n       invite = Invite.generate(user, email: 'TEST@EXAMPLE.COM')\n       expect(invite.invite_key).to be_present\n@@ -59,9 +75,11 @@\n     end\n \n     context 'via email' do\n-      it 'enqueues a job to email the invite' do\n+      it 'can be created and a job is enqueued to email the invite' do\n         invite = Invite.generate(user, email: 'test@example.com')\n+        expect(invite.email).to eq('test@example.com')\n         expect(invite.emailed_status).to eq(Invite.emailed_status_types[:sending])\n+        expect(invite.email_token).not_to eq(nil)\n         expect(Jobs::InviteEmail.jobs.size).to eq(1)\n       end\n \n@@ -91,6 +109,7 @@\n         expect(invite.expires_at.to_date).to eq(SiteSetting.invite_expiry_days.days.from_now.to_date)\n         expect(invite.emailed_status).to eq(Invite.emailed_status_types[:not_required])\n         expect(invite.is_invite_link?).to eq(true)\n+        expect(invite.email_token).to eq(nil)\n       end\n \n       it 'checks for max_redemptions_allowed range' do"
    },
    {
      "sha": "f2001d530977277215e0a2740059fa9b45e9ed63",
      "filename": "spec/requests/invites_controller_spec.rb",
      "status": "modified",
      "additions": 18,
      "deletions": 3,
      "changes": 21,
      "blob_url": "https://github.com/discourse/discourse/blob/528cfea079a5555e92b1d546a199e03fd6528790/spec/requests/invites_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/528cfea079a5555e92b1d546a199e03fd6528790/spec/requests/invites_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/invites_controller_spec.rb?ref=528cfea079a5555e92b1d546a199e03fd6528790",
      "patch": "@@ -414,7 +414,7 @@\n \n       it 'logs in the user' do\n         events = DiscourseEvent.track_events do\n-          put \"/invites/show/#{invite.invite_key}.json\"\n+          put \"/invites/show/#{invite.invite_key}.json\", params: { email_token: invite.email_token }\n         end\n \n         expect(events.map { |event| event[:event_name] }).to include(:user_logged_in, :user_first_logged_in)\n@@ -427,7 +427,7 @@\n       end\n \n       it 'redirects to the first topic the user was invited to' do\n-        put \"/invites/show/#{invite.invite_key}.json\"\n+        put \"/invites/show/#{invite.invite_key}.json\", params: { email_token: invite.email_token }\n         expect(response.status).to eq(200)\n         expect(response.parsed_body['redirect_to']).to eq(topic.relative_url)\n       end\n@@ -553,7 +553,7 @@\n \n             it 'does not send an activation email and activates the user' do\n               expect do\n-                put \"/invites/show/#{invite.invite_key}.json\", params: { password: 'verystrongpassword' }\n+                put \"/invites/show/#{invite.invite_key}.json\", params: { password: 'verystrongpassword', email_token: invite.email_token }\n               end.to change { UserAuthToken.count }.by(1)\n \n               expect(response.status).to eq(200)\n@@ -565,6 +565,21 @@\n               expect(invited_user.active).to eq(true)\n               expect(invited_user.email_confirmed?).to eq(true)\n             end\n+\n+            it 'does not activate user if email token is missing' do\n+              expect do\n+                put \"/invites/show/#{invite.invite_key}.json\", params: { password: 'verystrongpassword' }\n+              end.to change { UserAuthToken.count }.by(0)\n+\n+              expect(response.status).to eq(200)\n+\n+              expect(Jobs::InvitePasswordInstructionsEmail.jobs.size).to eq(0)\n+              expect(Jobs::CriticalUserEmail.jobs.size).to eq(1)\n+\n+              invited_user = User.find_by_email(invite.email)\n+              expect(invited_user.active).to eq(false)\n+              expect(invited_user.email_confirmed?).to eq(false)\n+            end\n           end\n \n           context 'user was invited via link' do"
    }
  ]
}
