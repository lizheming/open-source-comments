{
  "sha": "74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
  "node_id": "C_kwDOBtgov9oAKDc0YjQ3ZDNhOGFkNzFkNmRhMmZkNmU1YjMyZmY5NGMxZDZlNWM5MjY",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2022-02-09T17:05:44Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2022-02-09T17:05:44Z"
    },
    "message": "Merge pull request #1107 from Ksinia/master\n\nAdd telegram auth to frontend",
    "tree": {
      "sha": "4c4e1a1fa9e9602629d5cedba522f853dfb3b551",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/4c4e1a1fa9e9602629d5cedba522f853dfb3b551"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiA/RoCRBK7hj4Ov3rIwAAp+AIAGfvUpAoYy5cOZNdbP1NFj0/\n3QJ+wV+JLZNLoYl9pCmQ5PiY/H8TdAXlNTPVjL1wBAuWwKS6rLXT5qzBiNGJTjmS\n3aEyg/uOr28J6iJovu0MjNR1Sxfs8p6dO7LU6NSB1nQHFVORjq8IAuyqKS7Jp+3b\n362Qn6D/B4ojXVE3c5Blsz8KD0yqT8O+M5wNeEkyeqRVJkQgWEFHzByeLf19P09D\n4n59Yd1LZu/uHFSr4xuNNrhhw1Tv/maPJb2eHtyoN5OkRAN/XLvs8sUE23r3zqky\nt9yPsBlbJynGhJd8JiE7EIpeArB3WZcmg1nbgfpRt/G5PaTJhZcwxDdxLwEoxzM=\n=JLHT\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 4c4e1a1fa9e9602629d5cedba522f853dfb3b551\nparent 6fd730655ab1e578c25b1c36865ec4149ae25fef\nparent c9b1fb47375e413c2f3dd9c37e8ec8533952ed8e\nauthor Umputun <umputun@gmail.com> 1644426344 -0600\ncommitter GitHub <noreply@github.com> 1644426344 -0600\n\nMerge pull request #1107 from Ksinia/master\n\nAdd telegram auth to frontend"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
  "html_url": "https://github.com/umputun/remark42/commit/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6fd730655ab1e578c25b1c36865ec4149ae25fef",
      "url": "https://api.github.com/repos/umputun/remark42/commits/6fd730655ab1e578c25b1c36865ec4149ae25fef",
      "html_url": "https://github.com/umputun/remark42/commit/6fd730655ab1e578c25b1c36865ec4149ae25fef"
    },
    {
      "sha": "c9b1fb47375e413c2f3dd9c37e8ec8533952ed8e",
      "url": "https://api.github.com/repos/umputun/remark42/commits/c9b1fb47375e413c2f3dd9c37e8ec8533952ed8e",
      "html_url": "https://github.com/umputun/remark42/commit/c9b1fb47375e413c2f3dd9c37e8ec8533952ed8e"
    }
  ],
  "stats": {
    "total": 767,
    "additions": 553,
    "deletions": 214
  },
  "files": [
    {
      "sha": "5722df53a3def8a419be44732f4cce15e121f742",
      "filename": "frontend/app/common/api.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/common/api.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/common/api.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/common/api.ts?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -47,7 +47,9 @@ export const removeMyComment = (id: Comment['id']): Promise<void> =>\n \n export const getPreview = (text: string): Promise<string> => apiFetcher.post('/preview', {}, { text });\n \n-export const getUser = (): Promise<User | null> => apiFetcher.get<User | null>('/user').catch(() => null);\n+export function getUser(): Promise<User | null> {\n+  return apiFetcher.get<User | null>('/user').catch(() => null);\n+}\n \n export const uploadImage = (image: File): Promise<Image> => {\n   const data = new FormData();"
    },
    {
      "sha": "46a67d8af3d2dd7ab48501275c51cc5a272bf118",
      "filename": "frontend/app/common/types.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/common/types.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/common/types.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/common/types.ts?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -95,7 +95,16 @@ export interface Tree {\n   info: PostInfo;\n }\n \n-export type OAuthProvider = 'facebook' | 'twitter' | 'google' | 'yandex' | 'github' | 'microsoft' | 'patreon' | 'dev';\n+export type OAuthProvider =\n+  | 'facebook'\n+  | 'twitter'\n+  | 'google'\n+  | 'yandex'\n+  | 'github'\n+  | 'microsoft'\n+  | 'patreon'\n+  | 'telegram'\n+  | 'dev';\n export type FormProvider = 'email' | 'anonymous';\n export type Provider = OAuthProvider | FormProvider;\n "
    },
    {
      "sha": "972fbe59420e156c88be51e36e56d072d0c2c10d",
      "filename": "frontend/app/components/auth/auth.api.ts",
      "status": "modified",
      "additions": 75,
      "deletions": 0,
      "changes": 75,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.api.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.api.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/auth.api.ts?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -2,8 +2,10 @@ import type { User } from 'common/types';\n \n import { authFetcher } from 'common/fetcher';\n import { siteId } from 'common/settings';\n+import { getUser } from 'common/api';\n \n const EMAIL_SIGNIN_ENDPOINT = '/email/login';\n+const TELEGRAM_SIGNIN_ENDPOINT = '/telegram/login';\n \n export function anonymousSignin(user: string): Promise<User> {\n   return authFetcher.get<User>('/anonymous/login', { user, aud: siteId });\n@@ -23,6 +25,79 @@ export function verifyEmailSignin(token: string): Promise<User> {\n   return authFetcher.get(EMAIL_SIGNIN_ENDPOINT, { token });\n }\n \n+/**\n+ * Performs await of auth from oauth providers\n+ */\n+let subscribed = false;\n+let timeout: NodeJS.Timeout;\n+let authWindow: Window | null = null;\n+\n+/**\n+ * Set waiting state and tries to revalidate `user` when oauth tab is closed\n+ */\n+export function oauthSignin(url: string): Promise<User | null> {\n+  authWindow = window.open(url);\n+\n+  if (subscribed) {\n+    return Promise.resolve(null);\n+  }\n+\n+  return new Promise((resolve, reject) => {\n+    function unsubscribe() {\n+      document.removeEventListener('visibilitychange', handleWindowVisibilityChange);\n+      window.removeEventListener('focus', handleWindowVisibilityChange);\n+      subscribed = false;\n+      clearTimeout(timeout);\n+    }\n+\n+    async function handleWindowVisibilityChange() {\n+      if (!document.hasFocus() || document.hidden || !authWindow?.closed) {\n+        return;\n+      }\n+\n+      const user = await getUser();\n+\n+      clearTimeout(timeout);\n+\n+      if (user === null) {\n+        // Retry after 1 min if current attempt unsuccessful\n+        timeout = setTimeout(() => {\n+          handleWindowVisibilityChange();\n+        }, 60 * 1000);\n+\n+        return null;\n+      }\n+\n+      resolve(user);\n+      unsubscribe();\n+    }\n+\n+    setTimeout(() => {\n+      reject();\n+    }, 5 * 60 * 1000);\n+\n+    document.addEventListener('visibilitychange', handleWindowVisibilityChange);\n+    window.addEventListener('focus', handleWindowVisibilityChange);\n+  });\n+}\n+\n+/**\n+ * First step of two of `telegram` authorization\n+ */\n+export function getTelegramSigninParams(): Promise<{\n+  bot: string;\n+  token: string;\n+}> {\n+  return authFetcher.get(TELEGRAM_SIGNIN_ENDPOINT);\n+}\n+\n+/**\n+ * Second step of two of `telegram` authorization\n+ */\n+export function verifyTelegramSignin(token: string): Promise<User> {\n+  return authFetcher.get(TELEGRAM_SIGNIN_ENDPOINT, { token });\n+}\n+\n export function logout(): Promise<void> {\n   return authFetcher.get('/logout');\n }"
    },
    {
      "sha": "668bde962ab7849dacbd0a0d0192b9e3da051869",
      "filename": "frontend/app/components/auth/auth.hooks.ts",
      "status": "modified",
      "additions": 54,
      "deletions": 3,
      "changes": 57,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.hooks.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.hooks.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/auth.hooks.ts?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -1,5 +1,9 @@\n-import { useEffect, useRef, useState } from 'preact/hooks';\n+import { useEffect, useRef, useState, useMemo } from 'preact/hooks';\n+import { useIntl } from 'react-intl';\n+\n+import { errorMessages, RequestError } from 'utils/errorUtils';\n import { parseMessage, postMessageToParent } from 'utils/post-message';\n+import { messages } from './auth.messsages';\n \n function handleChangeIframeSize(element: HTMLElement) {\n   const { top } = element.getBoundingClientRect();\n@@ -10,6 +14,7 @@ function handleChangeIframeSize(element: HTMLElement) {\n \n export function useDropdown(disableClosing?: boolean) {\n   const rootRef = useRef<HTMLDivElement>(null);\n+  const clickInsideRef = useRef<boolean>(false);\n   const [showDropdown, setShowDropdown] = useState(false);\n   const toggleDropdownState = () => {\n     setShowDropdown((s) => !s);\n@@ -32,18 +37,29 @@ export function useDropdown(disableClosing?: boolean) {\n       setShowDropdown(false);\n     }\n \n-    function handleClickOutside(evt: MouseEvent) {\n-      if (disableClosing || dropdownElement?.contains(evt.target as HTMLDivElement)) {\n+    function handleClickOutside() {\n+      const isClickInside = clickInsideRef.current;\n+\n+      clickInsideRef.current = false;\n+\n+      if (disableClosing || isClickInside) {\n         return;\n       }\n \n       setShowDropdown(false);\n     }\n \n+    function handleClickInside() {\n+      clickInsideRef.current = true;\n+    }\n+\n+    // check if click is inside dropdown on capture phase\n+    dropdownElement.addEventListener('click', handleClickInside, { capture: true });\n     document.addEventListener('click', handleClickOutside);\n     window.addEventListener('message', handleMessageFromParent);\n \n     return () => {\n+      dropdownElement.removeEventListener('click', handleClickInside);\n       document.removeEventListener('click', handleClickOutside);\n       window.removeEventListener('message', handleMessageFromParent);\n     };\n@@ -74,3 +90,38 @@ export function useDropdown(disableClosing?: boolean) {\n \n   return [rootRef, showDropdown, toggleDropdownState] as const;\n }\n+\n+export function useErrorMessage(): [string | null, (e: unknown) => void] {\n+  const intl = useIntl();\n+  const [invalidReason, setInvalidReason] = useState<string | null>(null);\n+\n+  return useMemo(() => {\n+    let errorMessage = invalidReason;\n+\n+    if (invalidReason && messages[invalidReason]) {\n+      errorMessage = intl.formatMessage(messages[invalidReason]);\n+    }\n+\n+    if (invalidReason && errorMessages[invalidReason]) {\n+      errorMessage = intl.formatMessage(errorMessages[invalidReason]);\n+    }\n+\n+    function setError(err: unknown): void {\n+      if (err === null) {\n+        setInvalidReason(null);\n+        return;\n+      }\n+\n+      if (typeof err === 'string') {\n+        setInvalidReason(err);\n+        return;\n+      }\n+\n+      const errorReason = err instanceof RequestError ? err.error : err instanceof Error ? err.message : 'error.0';\n+\n+      setInvalidReason(errorReason);\n+    }\n+\n+    return [errorMessage, setError];\n+  }, [intl, invalidReason]);\n+}"
    },
    {
      "sha": "f56536f5603830763e2a0ef11cbcd6f932a2b1b9",
      "filename": "frontend/app/components/auth/auth.messsages.ts",
      "status": "modified",
      "additions": 25,
      "deletions": 1,
      "changes": 26,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.messsages.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.messsages.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/auth.messsages.ts?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -1,6 +1,6 @@\n import { defineMessages } from 'react-intl';\n \n-export const messages = defineMessages({\n+export const messages = defineMessages<string>({\n   signin: {\n     id: 'auth.signin',\n     defaultMessage: 'Sign In',\n@@ -57,6 +57,30 @@ export const messages = defineMessages({\n     id: 'auth.submit',\n     defaultMessage: 'Submit',\n   },\n+  telegramLink: {\n+    id: 'auth.telegram-link',\n+    defaultMessage: 'by the link',\n+  },\n+  telegramCheck: {\n+    id: 'auth.telegram-check',\n+    defaultMessage: 'Check',\n+  },\n+  telegramMessage1: {\n+    id: 'auth.telegram-message-1',\n+    defaultMessage: 'Open the Telegram',\n+  },\n+  telegramOptionalQR: {\n+    id: 'auth.telegram-optional-qr',\n+    defaultMessage: 'or by scanning the QR code',\n+  },\n+  telegramMessage2: {\n+    id: 'auth.telegram-message-2',\n+    defaultMessage: 'and click “Start” there.',\n+  },\n+  telegramMessage3: {\n+    id: 'auth.telegram-message-3',\n+    defaultMessage: 'Afterwards, click “Check” below.',\n+  },\n   openProfile: {\n     id: 'auth.open-profile',\n     defaultMessage: 'Open My Profile',"
    },
    {
      "sha": "9120cfcd4b882c93731e645fc725a35562209e25",
      "filename": "frontend/app/components/auth/auth.module.css",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.module.css",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.module.css",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/auth.module.css?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -195,3 +195,13 @@\n   color: var(--error-color);\n   line-height: 1.2;\n }\n+\n+.telegramQR {\n+  display: block;\n+  margin: 0 auto 0 auto;\n+  width: 75%;\n+}\n+\n+.telegram {\n+  margin-bottom: 0;\n+}"
    },
    {
      "sha": "eed4e9873b0641882b4de092f0f463a37453375f",
      "filename": "frontend/app/components/auth/auth.spec.tsx",
      "status": "modified",
      "additions": 135,
      "deletions": 71,
      "changes": 206,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.spec.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.spec.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/auth.spec.tsx?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -1,23 +1,19 @@\n import '@testing-library/jest-dom';\n import { h } from 'preact';\n-import { fireEvent, waitFor } from '@testing-library/preact';\n+import { fireEvent, waitFor, screen } from '@testing-library/preact';\n import { render } from 'tests/utils';\n \n import { OAuthProvider, User } from 'common/types';\n import { StaticStore } from 'common/static-store';\n+import { BASE_URL } from 'common/constants.config';\n+import * as userActions from 'store/user/actions';\n \n import { Auth } from './auth';\n import * as utils from './auth.utils';\n import * as api from './auth.api';\n import { getProviderData } from './components/oauth.utils';\n \n-jest.mock('react-redux', () => ({\n-  useDispatch: () => jest.fn(),\n-}));\n-\n-jest.mock('hooks/useTheme', () => ({\n-  useTheme: () => 'light',\n-}));\n+window.open = jest.fn();\n \n describe('<Auth/>', () => {\n   let defaultProviders = StaticStore.config.auth_providers;\n@@ -35,35 +31,35 @@ describe('<Auth/>', () => {\n     });\n \n     it('should close dropdown by click on button', () => {\n-      const { container, getByText } = render(<Auth />);\n+      const { container } = render(<Auth />);\n \n       expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n \n-      fireEvent.click(getByText('Sign In'));\n+      fireEvent.click(screen.getByText('Sign In'));\n       expect(container.querySelector('.auth-dropdown')).toBeInTheDocument();\n \n-      fireEvent.click(getByText('Sign In'));\n+      fireEvent.click(screen.getByText('Sign In'));\n       expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n     });\n \n     it('should close dropdown by click outside of it', () => {\n-      const { container, getByText } = render(<Auth />);\n+      const { container } = render(<Auth />);\n \n       expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n \n-      fireEvent.click(getByText('Sign In'));\n+      fireEvent.click(screen.getByText('Sign In'));\n       expect(container.querySelector('.auth-dropdown')).toBeInTheDocument();\n \n       fireEvent.click(document);\n       expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n     });\n \n     it('should close dropdown by message from parent', async () => {\n-      const { container, getByText } = render(<Auth />);\n+      const { container } = render(<Auth />);\n \n       expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n \n-      fireEvent.click(getByText('Sign In'));\n+      fireEvent.click(screen.getByText('Sign In'));\n       expect(container.querySelector('.auth-dropdown')).toBeInTheDocument();\n \n       window.postMessage('{\"clickOutside\": true}', '*');\n@@ -81,63 +77,63 @@ describe('<Auth/>', () => {\n   ] as [OAuthProvider[]][])('should renders with %j providers', async (providers) => {\n     StaticStore.config.auth_providers = providers;\n \n-    const { container, getByText, getByTitle, queryByPlaceholderText, queryByText } = render(<Auth />);\n+    const { container } = render(<Auth />);\n \n     expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n \n-    expect(getByText('Sign In')).toHaveClass('auth-button');\n-    fireEvent.click(getByText('Sign In'));\n+    expect(screen.getByText('Sign In')).toHaveClass('auth-button');\n+    fireEvent.click(screen.getByText('Sign In'));\n     expect(container.querySelector('.auth-dropdown')).toBeInTheDocument();\n     providers.forEach((p) => {\n       const { name } = getProviderData(p, 'light');\n-      expect(getByTitle(`Sign In with ${name}`)).toBeInTheDocument();\n+      expect(screen.getByTitle(`Sign In with ${name}`)).toBeInTheDocument();\n     });\n-    expect(queryByPlaceholderText('Username')).not.toBeInTheDocument();\n-    expect(queryByText('Submit')).not.toBeInTheDocument();\n+    expect(screen.queryByPlaceholderText('Username')).not.toBeInTheDocument();\n+    expect(screen.queryByText('Submit')).not.toBeInTheDocument();\n   });\n \n   it('should render email provider', () => {\n     StaticStore.config.auth_providers = ['email'];\n \n-    const { getByText, getByPlaceholderText } = render(<Auth />);\n+    render(<Auth />);\n \n-    fireEvent.click(getByText('Sign In'));\n-    expect(getByText('email')).toHaveClass('auth-form-title');\n-    expect(getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n-    expect(getByPlaceholderText('Email Address')).toHaveClass('auth-input-email');\n-    expect(getByText('Submit')).toHaveClass('auth-submit');\n+    fireEvent.click(screen.getByText('Sign In'));\n+    expect(screen.getByText('email')).toHaveClass('auth-form-title');\n+    expect(screen.getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n+    expect(screen.getByPlaceholderText('Email Address')).toHaveClass('auth-input-email');\n+    expect(screen.getByText('Submit')).toHaveClass('auth-submit');\n   });\n \n   it('should render anonymous provider', () => {\n     StaticStore.config.auth_providers = ['anonymous'];\n \n-    const { getByText, getByPlaceholderText } = render(<Auth />);\n+    render(<Auth />);\n \n-    fireEvent.click(getByText('Sign In'));\n-    expect(getByText('anonymous')).toHaveClass('auth-form-title');\n-    expect(getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n-    expect(getByText('Submit')).toHaveClass('auth-submit');\n+    fireEvent.click(screen.getByText('Sign In'));\n+    expect(screen.getByText('anonymous')).toHaveClass('auth-form-title');\n+    expect(screen.getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n+    expect(screen.getByText('Submit')).toHaveClass('auth-submit');\n   });\n \n   it('should render tabs with two form providers', () => {\n     StaticStore.config.auth_providers = ['email', 'anonymous'];\n \n-    const { getByText, getByLabelText, getByPlaceholderText, getByDisplayValue } = render(<Auth />);\n-\n-    fireEvent.click(getByText('Sign In'));\n-    expect(getByDisplayValue('email')).toHaveAttribute('id', 'form-provider-email');\n-    expect(getByText('email')).toHaveAttribute('for', 'form-provider-email');\n-    expect(getByText('email')).toHaveClass('auth-tabs-item');\n-    expect(getByDisplayValue('anonymous')).toHaveAttribute('id', 'form-provider-anonymous');\n-    expect(getByText('anonym')).toHaveAttribute('for', 'form-provider-anonymous');\n-    expect(getByText('anonym')).toHaveClass('auth-tabs-item');\n-    expect(getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n-    expect(getByText('Submit')).toHaveClass('auth-submit');\n-\n-    fireEvent.click(getByLabelText('email'));\n-    expect(getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n-    expect(getByPlaceholderText('Email Address')).toHaveClass('auth-input-email');\n-    expect(getByText('Submit')).toHaveClass('auth-submit');\n+    render(<Auth />);\n+\n+    fireEvent.click(screen.getByText('Sign In'));\n+    expect(screen.getByDisplayValue('email')).toHaveAttribute('id', 'form-provider-email');\n+    expect(screen.getByText('email')).toHaveAttribute('for', 'form-provider-email');\n+    expect(screen.getByText('email')).toHaveClass('auth-tabs-item');\n+    expect(screen.getByDisplayValue('anonymous')).toHaveAttribute('id', 'form-provider-anonymous');\n+    expect(screen.getByText('anonym')).toHaveAttribute('for', 'form-provider-anonymous');\n+    expect(screen.getByText('anonym')).toHaveClass('auth-tabs-item');\n+    expect(screen.getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n+    expect(screen.getByText('Submit')).toHaveClass('auth-submit');\n+\n+    fireEvent.click(screen.getByLabelText('email'));\n+    expect(screen.getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n+    expect(screen.getByPlaceholderText('Email Address')).toHaveClass('auth-input-email');\n+    expect(screen.getByText('Submit')).toHaveClass('auth-submit');\n   });\n \n   it('should send email and then verify forms', async () => {\n@@ -146,28 +142,28 @@ describe('<Auth/>', () => {\n     jest.spyOn(api, 'verifyEmailSignin').mockImplementationOnce(async () => ({} as User));\n     jest.spyOn(utils, 'getTokenInvalidReason').mockImplementationOnce(() => null);\n \n-    const { getByText, getByPlaceholderText, getByTitle, getByRole } = render(<Auth />);\n+    render(<Auth />);\n \n-    fireEvent.click(getByText('Sign In'));\n-    fireEvent.change(getByPlaceholderText('Username'), { target: { value: 'username' } });\n-    fireEvent.change(getByPlaceholderText('Email Address'), {\n+    fireEvent.click(screen.getByText('Sign In'));\n+    fireEvent.change(screen.getByPlaceholderText('Username'), { target: { value: 'username' } });\n+    fireEvent.change(screen.getByPlaceholderText('Email Address'), {\n       target: { value: 'email@email.com' },\n     });\n-    fireEvent.click(getByText('Submit'));\n+    fireEvent.click(screen.getByText('Submit'));\n \n-    expect(getByRole('presentation')).toHaveClass('spinner');\n+    expect(screen.getByRole('presentation')).toHaveClass('spinner');\n     await waitFor(() => expect(api.emailSignin).toBeCalled());\n     expect(api.emailSignin).toBeCalledWith('email@email.com', 'username');\n \n-    expect(getByText('Back')).toHaveClass('auth-back-button');\n-    expect(getByTitle('Close sign-in dropdown')).toHaveClass('auth-close-button');\n-    expect(getByPlaceholderText('Token')).toHaveClass('auth-token-textarea');\n+    expect(screen.getByText('Back')).toHaveClass('auth-back-button');\n+    expect(screen.getByTitle('Close sign-in dropdown')).toHaveClass('auth-close-button');\n+    expect(screen.getByPlaceholderText('Token')).toHaveClass('auth-token-textarea');\n \n-    fireEvent.change(getByPlaceholderText('Token'), {\n+    fireEvent.change(screen.getByPlaceholderText('Token'), {\n       target: { value: 'token' },\n     });\n \n-    fireEvent.click(getByText('Submit'));\n+    fireEvent.click(screen.getByText('Submit'));\n \n     await waitFor(() => expect(api.verifyEmailSignin).toBeCalled());\n     expect(api.verifyEmailSignin).toBeCalledWith('token');\n@@ -205,13 +201,13 @@ describe('<Auth/>', () => {\n     StaticStore.config.auth_providers = ['anonymous'];\n     jest.spyOn(api, 'anonymousSignin').mockImplementationOnce(async () => ({} as User));\n \n-    const { getByText, getByPlaceholderText, getByRole } = render(<Auth />);\n+    render(<Auth />);\n \n-    fireEvent.click(getByText('Sign In'));\n-    fireEvent.change(getByPlaceholderText('Username'), { target: { value: 'username' } });\n-    fireEvent.click(getByText('Submit'));\n-    expect(getByRole('presentation')).toHaveClass('spinner');\n-    expect(getByRole('presentation')).toHaveAttribute('aria-label', 'Loading...');\n+    fireEvent.click(screen.getByText('Sign In'));\n+    fireEvent.change(screen.getByPlaceholderText('Username'), { target: { value: 'username' } });\n+    fireEvent.click(screen.getByText('Submit'));\n+    expect(screen.getByRole('presentation')).toHaveClass('spinner');\n+    expect(screen.getByRole('presentation')).toHaveAttribute('aria-label', 'Loading...');\n     await waitFor(() => expect(api.anonymousSignin).toBeCalled());\n   });\n \n@@ -223,10 +219,10 @@ describe('<Auth/>', () => {\n   `('should remove spaces in the first/last position in username', async ({ value, expected }) => {\n     StaticStore.config.auth_providers = ['email'];\n \n-    const { getByText, getByPlaceholderText } = render(<Auth />);\n-    fireEvent.click(getByText('Sign In'));\n+    render(<Auth />);\n+    fireEvent.click(screen.getByText('Sign In'));\n \n-    const input = getByPlaceholderText('Username');\n+    const input = screen.getByPlaceholderText('Username');\n \n     fireEvent.change(input, { target: { value } });\n     fireEvent.blur(input);\n@@ -242,14 +238,82 @@ describe('<Auth/>', () => {\n   `('should leave spaces in the middle of username', ({ value, expected }) => {\n     StaticStore.config.auth_providers = ['email'];\n \n-    const { getByText, getByPlaceholderText } = render(<Auth />);\n-    fireEvent.click(getByText('Sign In'));\n+    render(<Auth />);\n+\n+    fireEvent.click(screen.getByText('Sign In'));\n \n-    const input = getByPlaceholderText('Username');\n+    const input = screen.getByPlaceholderText('Username');\n \n     fireEvent.change(input, { target: { value } });\n     fireEvent.blur(input);\n \n     expect(input).toHaveValue(expected);\n   });\n+\n+  describe('OAuth providers', () => {\n+    it('should not set user if unauthorized', async () => {\n+      StaticStore.config.auth_providers = ['google'];\n+\n+      const setUser = jest.spyOn(userActions, 'setUser').mockImplementation(jest.fn());\n+      const oauthSignin = jest.spyOn(api, 'oauthSignin').mockImplementation(async () => null);\n+\n+      render(<Auth />);\n+      fireEvent.click(screen.getByText('Sign In'));\n+      await waitFor(() => fireEvent.click(screen.getByTitle('Sign In with Google')));\n+      await waitFor(() =>\n+        expect(oauthSignin).toBeCalledWith(\n+          `${BASE_URL}/auth/google/login?from=http%3A%2F%2Flocalhost%2F%3FselfClose&site=remark`\n+        )\n+      );\n+      expect(setUser).toBeCalledTimes(0);\n+      expect(screen.getByText('Sign In')).toBeInTheDocument();\n+    });\n+\n+    it('should set user if authorized', async () => {\n+      StaticStore.config.auth_providers = ['google'];\n+\n+      const user = { name: 'UserName1' } as User;\n+      const setUser = jest.spyOn(userActions, 'setUser').mockImplementation(jest.fn());\n+      const oauthSignin = jest.spyOn(api, 'oauthSignin').mockImplementation(async () => user);\n+\n+      render(<Auth />);\n+\n+      fireEvent.click(screen.getByText('Sign In'));\n+      await waitFor(() => fireEvent.click(screen.getByTitle('Sign In with Google')));\n+\n+      await waitFor(() =>\n+        expect(oauthSignin).toBeCalledWith(\n+          `${BASE_URL}/auth/google/login?from=http%3A%2F%2Flocalhost%2F%3FselfClose&site=remark`\n+        )\n+      );\n+      expect(setUser).toBeCalledWith(user);\n+    });\n+  });\n+\n+  describe('Telegram auth', () => {\n+    it('should go through the auth flow', async () => {\n+      StaticStore.config.auth_providers = ['telegram'];\n+\n+      const user = { name: 'UserName1' } as User;\n+      const getTelegramSigninParams = jest\n+        .spyOn(api, 'getTelegramSigninParams')\n+        .mockImplementationOnce(async () => ({ bot: 'botid', token: 'tokentokentoken' }));\n+      const verifyTelegramSignin = jest.spyOn(api, 'verifyTelegramSignin').mockImplementationOnce(async () => user);\n+      const setUser = jest.spyOn(userActions, 'setUser').mockImplementation(jest.fn());\n+      render(<Auth />);\n+\n+      fireEvent.click(screen.getByText('Sign In'));\n+      fireEvent.click(screen.getByTitle('Sign In with Telegram'));\n+      await waitFor(() => expect(getTelegramSigninParams).toBeCalledTimes(1));\n+      const telegramLink = screen.getByText('by the link').getAttribute('href');\n+      expect(typeof telegramLink === 'string').toBe(true);\n+      const telegramUrl = new URL(telegramLink as string);\n+      expect(telegramUrl.origin).toBe('https://t.me');\n+      expect(telegramUrl.searchParams.get('start')).toBe('tokentokentoken');\n+      expect(telegramUrl.pathname.startsWith(`/botid`)).toBeTruthy();\n+      fireEvent.click(screen.getByText('Check'));\n+      await waitFor(() => expect(verifyTelegramSignin).toBeCalledTimes(1));\n+      await waitFor(() => expect(setUser).toHaveBeenCalledWith(user));\n+    });\n+  });\n });"
    },
    {
      "sha": "75bd66b579d21fd19331039b369a0911bea8ee18",
      "filename": "frontend/app/components/auth/auth.tsx",
      "status": "modified",
      "additions": 133,
      "deletions": 17,
      "changes": 150,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/auth.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/auth.tsx?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -1,9 +1,10 @@\n import clsx from 'clsx';\n-import { h, Fragment } from 'preact';\n-import { useState } from 'preact/hooks';\n+import { h, Fragment, JSX } from 'preact';\n+import { useState, useRef } from 'preact/hooks';\n import { useIntl } from 'react-intl';\n import { useDispatch } from 'react-redux';\n \n+import { BASE_URL, API_BASE } from 'common/constants.config';\n import { setUser } from 'store/user/actions';\n import { Input } from 'components/input';\n import { CrossIcon } from 'components/icons/cross';\n@@ -14,49 +15,90 @@ import { ArrowIcon } from 'components/icons/arrow';\n import { Button } from './components/button';\n import { OAuth } from './components/oauth';\n import { messages } from './auth.messsages';\n-import { useDropdown } from './auth.hooks';\n+import { useDropdown, useErrorMessage } from './auth.hooks';\n import { getProviders, getTokenInvalidReason } from './auth.utils';\n-import { emailSignin, verifyEmailSignin, anonymousSignin } from './auth.api';\n+import {\n+  oauthSignin,\n+  emailSignin,\n+  verifyEmailSignin,\n+  anonymousSignin,\n+  verifyTelegramSignin,\n+  getTelegramSigninParams,\n+} from './auth.api';\n \n import styles from './auth.module.css';\n \n export function Auth() {\n   const intl = useIntl();\n+  const telegramParamsRef = useRef<null | { bot: string; token: string }>(null);\n   const dispatch = useDispatch();\n   const [oauthProviders, formProviders] = getProviders();\n \n   // UI State\n   const [isLoading, setLoading] = useState(false);\n-  const [view, setView] = useState<typeof formProviders[number] | 'token'>(formProviders[0]);\n-  const [ref, isDropdownShown, toggleDropdownState] = useDropdown(view === 'token');\n+  const [view, setView] = useState<typeof formProviders[number] | 'token' | 'telegram'>(formProviders[0]);\n+  const [ref, isDropdownShown, toggleDropdownState] = useDropdown(view === 'token' || view === 'telegram');\n \n   // Errors\n-  const [invalidReason, setInvalidReason] = useState<keyof typeof messages | null>(null);\n+  const [errorMessage, setError] = useErrorMessage();\n \n   function handleClickSingIn(evt: Event) {\n     evt.preventDefault();\n     toggleDropdownState();\n   }\n \n+  function resetView() {\n+    setView(formProviders[0]);\n+    setError(null);\n+  }\n+\n   function handleDropdownClose(evt: Event) {\n     evt.preventDefault();\n-    setView(formProviders[0]);\n+    resetView();\n     toggleDropdownState();\n   }\n \n+  function handleClickBack(evt: JSX.TargetedMouseEvent<HTMLButtonElement>) {\n+    evt.preventDefault();\n+    resetView();\n+  }\n+\n+  async function handleOauthClick(evt: JSX.TargetedMouseEvent<HTMLAnchorElement>) {\n+    evt.preventDefault();\n+\n+    const { href, dataset } = evt.currentTarget;\n+\n+    if (dataset.providerName?.toLowerCase() === 'telegram') {\n+      telegramParamsRef.current = await getTelegramSigninParams();\n+      window.open(`https://t.me/${telegramParamsRef.current.bot}/?start=${telegramParamsRef.current.token}`);\n+      setView('telegram');\n+      setError(null);\n+      return;\n+    }\n+\n+    const user = await oauthSignin(href);\n+\n+    if (user === null) {\n+      // TODO: add error message when user is null\n+      return;\n+    }\n+\n+    dispatch(setUser(user));\n+  }\n+\n   function handleProviderChange(evt: Event) {\n     const { value } = evt.currentTarget as HTMLInputElement;\n \n-    setInvalidReason(null);\n     setView(value as typeof formProviders[number]);\n+    setError(null);\n   }\n \n   async function handleSubmit(evt: Event) {\n     const data = new FormData(evt.target as HTMLFormElement);\n \n     evt.preventDefault();\n     setLoading(true);\n-    setInvalidReason(null);\n+    setError(null);\n \n     try {\n       switch (view) {\n@@ -80,7 +122,7 @@ export function Auth() {\n           const invalidReason = getTokenInvalidReason(token);\n \n           if (invalidReason) {\n-            setInvalidReason(invalidReason);\n+            setError(invalidReason);\n           } else {\n             const user = await verifyEmailSignin(token);\n             dispatch(setUser(user));\n@@ -90,7 +132,27 @@ export function Auth() {\n         }\n       }\n     } catch (e) {\n-      setInvalidReason(e.message || e.error);\n+      setError(e);\n+    }\n+\n+    setLoading(false);\n+  }\n+\n+  async function handleTelegramSubmit(evt: Event) {\n+    evt.preventDefault();\n+    setLoading(true);\n+    setError(null);\n+\n+    if (telegramParamsRef.current === null) {\n+      telegramParamsRef.current = await getTelegramSigninParams();\n+    }\n+\n+    try {\n+      const user = await verifyTelegramSignin(telegramParamsRef.current.token);\n+\n+      dispatch(setUser(user));\n+    } catch (e) {\n+      setError(e);\n     }\n \n     setLoading(false);\n@@ -99,13 +161,12 @@ export function Auth() {\n   function handleShowEmailStep(evt: Event) {\n     evt.preventDefault();\n     setView('email');\n+    setError(null);\n   }\n \n   const hasOAuthProviders = oauthProviders.length > 0;\n   const hasFormProviders = formProviders.length > 0;\n-  const errorMessage =\n-    invalidReason !== null && messages[invalidReason] ? intl.formatMessage(messages[invalidReason]) : invalidReason;\n-  const isTokenView = view === 'token';\n+\n   const formFooterJSX = (\n     <>\n       {errorMessage && <div className={clsx('auth-error', styles.error)}>{errorMessage}</div>}\n@@ -114,6 +175,7 @@ export function Auth() {\n       </Button>\n     </>\n   );\n+\n   return (\n     <div className={clsx('auth', styles.root)}>\n       <Button className=\"auth-button\" selected={isDropdownShown} onClick={handleClickSingIn} suffix={<ArrowIcon />}>\n@@ -122,7 +184,61 @@ export function Auth() {\n       {isDropdownShown && (\n         <div className={clsx('auth-dropdown', styles.dropdown)} ref={ref}>\n           <form className={clsx('auth-form', styles.form)} onSubmit={handleSubmit}>\n-            {isTokenView ? (\n+            {view === 'telegram' && telegramParamsRef.current !== null ? (\n+              <>\n+                <div className={clsx('auth-row', styles.row)}>\n+                  <div className={styles.backButton}>\n+                    <Button className=\"auth-back-button\" size=\"xs\" kind=\"transparent\" onClick={handleClickBack}>\n+                      <svg\n+                        className={styles.backButtonArrow}\n+                        width=\"14\"\n+                        height=\"14\"\n+                        viewBox=\"0 0 14 14\"\n+                        fill=\"none\"\n+                        xmlns=\"http://www.w3.org/2000/svg\"\n+                      >\n+                        <path\n+                          d=\"M8.75 3L5 7.25L9 11\"\n+                          stroke=\"currentColor\"\n+                          stroke-width=\"2\"\n+                          stroke-linecap=\"round\"\n+                          stroke-linejoin=\"round\"\n+                        />\n+                      </svg>\n+                      {intl.formatMessage(messages.back)}\n+                    </Button>\n+                  </div>\n+                  <button\n+                    className={clsx('auth-close-button', styles.closeButton)}\n+                    title=\"Close sign-in dropdown\"\n+                    onClick={handleDropdownClose}\n+                  >\n+                    <CrossIcon />\n+                  </button>\n+                </div>\n+                <p className={clsx('telegram', styles.telegram)}>\n+                  {intl.formatMessage(messages.telegramMessage1)}{' '}\n+                  <a href={`https://t.me/${telegramParamsRef.current.bot}/?start=${telegramParamsRef.current.token}`}>\n+                    {intl.formatMessage(messages.telegramLink)}\n+                  </a>\n+                  {window.screen.width >= 768 && ` ${intl.formatMessage(messages.telegramOptionalQR)}`}{' '}\n+                  {intl.formatMessage(messages.telegramMessage2)}\n+                  <br />\n+                  {intl.formatMessage(messages.telegramMessage3)}\n+                </p>\n+                {window.screen.width >= 768 && (\n+                  <img\n+                    src={`${BASE_URL}${API_BASE}/qr/telegram?url=https://t.me/${telegramParamsRef.current.bot}/?start=${telegramParamsRef.current.token}`}\n+                    className={clsx('telegram-qr', styles.telegramQR)}\n+                    alt={'telegram QR-code'}\n+                  />\n+                )}\n+                <Button key=\"submit\" className=\"auth-submit\" type=\"submit\" onClick={handleTelegramSubmit}>\n+                  {intl.formatMessage(messages.telegramCheck)}\n+                </Button>\n+                {errorMessage && <div className={clsx('auth-error', styles.error)}>{errorMessage}</div>}\n+              </>\n+            ) : view === 'token' ? (\n               <>\n                 <div className={clsx('auth-row', styles.row)}>\n                   <div className={styles.backButton}>\n@@ -171,7 +287,7 @@ export function Auth() {\n                     <h5 className={clsx('auth-form-title', styles.title)}>\n                       {intl.formatMessage(messages.oauthSource)}\n                     </h5>\n-                    <OAuth providers={oauthProviders} />\n+                    <OAuth providers={oauthProviders} onOauthClick={handleOauthClick} />\n                   </>\n                 )}\n                 {hasOAuthProviders && hasFormProviders && ("
    },
    {
      "sha": "79cae93385fa599cacaa63ac139da9e8bfb6618e",
      "filename": "frontend/app/components/auth/components/assets/telegram.svg",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/components/assets/telegram.svg",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/components/assets/telegram.svg",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/components/assets/telegram.svg?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -0,0 +1 @@\n+<svg width=\"20\" height=\"20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14.6 18.2c.2.1.5.2.8 0a1 1 0 0 0 .6-.6l3-14.4a.6.6 0 0 0-.2-.6.6.6 0 0 0-.6 0L.4 9.1a.7.7 0 0 0-.4.6c0 .3.2.5.5.6l4.3 1.3L6.6 17a.7.7 0 0 0 .4.4.7.7 0 0 0 .7-.1l2.4-2.4 4.5 3.3Zm-8.8-7 1.4 4.5.3-2.8 8-7.3a.2.2 0 0 0 0-.3.2.2 0 0 0-.2 0l-9.5 6Z\" fill=\"#2DA6E0\"/></svg>"
    },
    {
      "sha": "1ff34ff9e524118d860f787d8c6e37a0abc949a4",
      "filename": "frontend/app/components/auth/components/oauth.api.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 58,
      "changes": 58,
      "blob_url": "https://github.com/umputun/remark42/blob/6fd730655ab1e578c25b1c36865ec4149ae25fef/frontend/app/components/auth/components/oauth.api.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/6fd730655ab1e578c25b1c36865ec4149ae25fef/frontend/app/components/auth/components/oauth.api.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/components/oauth.api.ts?ref=6fd730655ab1e578c25b1c36865ec4149ae25fef",
      "patch": "@@ -1,58 +0,0 @@\n-import { getUser } from 'common/api';\n-import { User } from 'common/types';\n-\n-/**\n- * Performs await of auth from oauth providers\n- */\n-let subscribed = false;\n-let timeout: NodeJS.Timeout;\n-let authWindow: Window | null = null;\n-\n-/**\n- * Set waiting state and tries to revalidate `user` when oauth tab is closed\n- */\n-export function oauthSignin(url: string): Promise<User | null> {\n-  authWindow = window.open(url);\n-\n-  if (subscribed) {\n-    return Promise.resolve(null);\n-  }\n-\n-  return new Promise((resolve, reject) => {\n-    function unsubscribe() {\n-      document.removeEventListener('visibilitychange', handleWindowVisibilityChange);\n-      window.removeEventListener('focus', handleWindowVisibilityChange);\n-      subscribed = false;\n-      clearTimeout(timeout);\n-    }\n-\n-    async function handleWindowVisibilityChange() {\n-      if (!document.hasFocus() || document.hidden || !authWindow?.closed) {\n-        return;\n-      }\n-\n-      const user = await getUser();\n-\n-      clearTimeout(timeout);\n-\n-      if (user === null) {\n-        // Retry after 1 min if current attempt unsuccessful\n-        timeout = setTimeout(() => {\n-          handleWindowVisibilityChange();\n-        }, 60 * 1000);\n-\n-        return null;\n-      }\n-\n-      resolve(user);\n-      unsubscribe();\n-    }\n-\n-    setTimeout(() => {\n-      reject();\n-    }, 5 * 60 * 1000);\n-\n-    document.addEventListener('visibilitychange', handleWindowVisibilityChange);\n-    window.addEventListener('focus', handleWindowVisibilityChange);\n-  });\n-}"
    },
    {
      "sha": "e10e80b8f1aa4fad47a32f1a9afa3a18468319ae",
      "filename": "frontend/app/components/auth/components/oauth.consts.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/components/oauth.consts.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/components/oauth.consts.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/components/oauth.consts.ts?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -13,6 +13,7 @@ export const OAUTH_DATA = {\n       dark: require('./assets/github-dark.svg').default as string,\n     },\n   },\n+  telegram: require('./assets/telegram.svg').default as string,\n } as const;\n \n export const OAUTH_PROVIDERS = Object.keys(OAUTH_DATA);"
    },
    {
      "sha": "392ac808304093ad85cb531ee9a4ccdebb526618",
      "filename": "frontend/app/components/auth/components/oauth.spec.tsx",
      "status": "modified",
      "additions": 0,
      "deletions": 43,
      "changes": 43,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/components/oauth.spec.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/components/oauth.spec.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/components/oauth.spec.tsx?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -1,21 +1,8 @@\n import { h } from 'preact';\n-import { fireEvent, waitFor } from '@testing-library/preact';\n import { render } from 'tests/utils';\n-\n-import type { User } from 'common/types';\n-import * as userActions from 'store/user/actions';\n import { BASE_URL } from 'common/constants.config';\n \n import { OAuth } from './oauth';\n-import * as api from './oauth.api';\n-\n-jest.mock('react-redux', () => ({\n-  useDispatch: () => jest.fn(),\n-}));\n-\n-jest.mock('hooks/useTheme', () => ({\n-  useTheme: () => 'light',\n-}));\n \n describe('<OAuth />', () => {\n   it('should have permanent class name', () => {\n@@ -34,34 +21,4 @@ describe('<OAuth />', () => {\n       `${BASE_URL}/auth/google/login?from=http%3A%2F%2Flocalhost%2F%3FselfClose&site=remark`\n     );\n   });\n-\n-  it('should not set user if unauthorized', async () => {\n-    const setUser = jest.spyOn(userActions, 'setUser').mockImplementation(jest.fn());\n-    const oauthSignin = jest.spyOn(api, 'oauthSignin').mockImplementation(async () => null);\n-    const { container } = render(<OAuth providers={['google']} />);\n-\n-    fireEvent.click(container.querySelector('a')!);\n-\n-    await waitFor(() =>\n-      expect(oauthSignin).toBeCalledWith(\n-        `${BASE_URL}/auth/google/login?from=http%3A%2F%2Flocalhost%2F%3FselfClose&site=remark`\n-      )\n-    );\n-    expect(setUser).toBeCalledTimes(0);\n-  });\n-\n-  it('should set user if authorized', async () => {\n-    const setUser = jest.spyOn(userActions, 'setUser').mockImplementation(jest.fn());\n-    const oauthSignin = jest.spyOn(api, 'oauthSignin').mockImplementation(async () => ({} as User));\n-    const { container } = render(<OAuth providers={['google']} />);\n-\n-    fireEvent.click(container.querySelector('a')!);\n-\n-    await waitFor(() =>\n-      expect(oauthSignin).toBeCalledWith(\n-        `${BASE_URL}/auth/google/login?from=http%3A%2F%2Flocalhost%2F%3FselfClose&site=remark`\n-      )\n-    );\n-    expect(setUser).toBeCalledWith({});\n-  });\n });"
    },
    {
      "sha": "5526900b8434920f4eb28ca254bc7a61912aff29",
      "filename": "frontend/app/components/auth/components/oauth.tsx",
      "status": "modified",
      "additions": 3,
      "deletions": 18,
      "changes": 21,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/components/oauth.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/components/auth/components/oauth.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/components/oauth.tsx?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -1,16 +1,13 @@\n import { h, JSX } from 'preact';\n-import { useDispatch } from 'react-redux';\n import clsx from 'clsx';\n import { useIntl } from 'react-intl';\n \n import type { OAuthProvider } from 'common/types';\n import { siteId } from 'common/settings';\n import { useTheme } from 'hooks/useTheme';\n-import { setUser } from 'store/user/actions';\n \n import { messages } from 'components/auth/auth.messsages';\n \n-import { oauthSignin } from './oauth.api';\n import { BASE_URL } from 'common/constants.config';\n import { getButtonVariant, getProviderData } from './oauth.utils';\n import styles from './oauth.module.css';\n@@ -19,25 +16,13 @@ const location = encodeURIComponent(`${window.location.origin}${window.location.\n \n type Props = {\n   providers: OAuthProvider[];\n+  onOauthClick?(evt: JSX.TargetedMouseEvent<HTMLAnchorElement>): void;\n };\n \n-export function OAuth({ providers }: Props) {\n+export function OAuth({ providers, onOauthClick }: Props) {\n   const intl = useIntl();\n-  const dispatch = useDispatch();\n   const theme = useTheme();\n   const buttonVariant = getButtonVariant(providers.length);\n-  const handleOauthClick: JSX.GenericEventHandler<HTMLAnchorElement> = async (evt) => {\n-    const { href } = evt.currentTarget as HTMLAnchorElement;\n-\n-    evt.preventDefault();\n-    const user = await oauthSignin(href);\n-\n-    if (user === null) {\n-      return;\n-    }\n-\n-    dispatch(setUser(user));\n-  };\n \n   return (\n     <ul className={clsx('oauth', styles.root)}>\n@@ -50,7 +35,7 @@ export function OAuth({ providers }: Props) {\n               target=\"_blank\"\n               rel=\"noopener noreferrer\"\n               href={`${BASE_URL}/auth/${p}/login?from=${location}&site=${siteId}`}\n-              onClick={handleOauthClick}\n+              onClick={onOauthClick}\n               className={clsx('oauth-button', styles.button, styles[buttonVariant], styles[p])}\n               data-provider-name={name}\n               title={intl.formatMessage(messages.oauthTitle, { provider: name })}"
    },
    {
      "sha": "d0485a695396936b08d8b9db5e594ec1ba2605eb",
      "filename": "frontend/app/locales/be.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/be.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/be.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/be.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Выйсці?\",\n   \"auth.submit\": \"Адправіць\",\n   \"auth.symbols-restriction\": \"імя карыстальніка мусіць пачынацца з літары і ўтрымоўваць толькі лацінскія літары, лічбы, знакі падкрэслівання і прабелы(?)\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"Карыстальнік не знойдзены\",\n   \"auth.username\": \"Імя карыстальніка\",\n   \"authPanel.disable-comments\": \"Адключыць каментары\","
    },
    {
      "sha": "86b3668cdf3280984bfa4f3d96634cae15ce9920",
      "filename": "frontend/app/locales/bg.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/bg.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/bg.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/bg.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Изход\",\n   \"auth.submit\": \"Изпрати\",\n   \"auth.symbols-restriction\": \"Потребителското име трябва да започва с буква и да бъде само от латински букви, цифри, подчертавки или разтояния\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"Не бе намерен потребител\",\n   \"auth.username\": \"Потребителско име\",\n   \"authPanel.disable-comments\": \"Забрани коментарите\","
    },
    {
      "sha": "14128b4a13152bdfa069b017c93dc5aa3a149b46",
      "filename": "frontend/app/locales/bp.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/bp.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/bp.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/bp.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Fazer logout\",\n   \"auth.submit\": \"Enviar\",\n   \"auth.symbols-restriction\": \"O nome de usuário deve conter apenas letras, números, sublinhados ou espaços\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"Nenhum usuário encontrado\",\n   \"auth.username\": \"Nome do usuário\",\n   \"authPanel.disable-comments\": \"Desabilitar comentários\","
    },
    {
      "sha": "8b931514053ee8d8968852b80396835f034f6fa5",
      "filename": "frontend/app/locales/de.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/de.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/de.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/de.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Abmelden\",\n   \"auth.submit\": \"Absenden\",\n   \"auth.symbols-restriction\": \"Der Benutzername darf nur Buchstaben, Zahlen, Unterstriche oder Leerzeichen enthalten\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"Benutzer konnte nicht gefunden werden\",\n   \"auth.username\": \"Benutzername\",\n   \"authPanel.disable-comments\": \"Kommentarfunktion deaktivieren\","
    },
    {
      "sha": "3a61b421c227f86a93d12419653545e9120e2db0",
      "filename": "frontend/app/locales/en.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/en.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/en.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/en.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Sign Out\",\n   \"auth.submit\": \"Submit\",\n   \"auth.symbols-restriction\": \"Username must contain only letters, numbers, underscores or spaces\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"by the link\",\n+  \"auth.telegram-message-1\": \"Open the Telegram\",\n+  \"auth.telegram-message-2\": \"and click “Start” there.\",\n+  \"auth.telegram-message-3\": \"Afterwards, click “Check” below.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"No user was found\",\n   \"auth.username\": \"Username\",\n   \"authPanel.disable-comments\": \"Disable comments\","
    },
    {
      "sha": "68110025ab2af46c0a40babeb24c7596f1fd15d3",
      "filename": "frontend/app/locales/es.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/es.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/es.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/es.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"¿Salir?\",\n   \"auth.submit\": \"Enviar\",\n   \"auth.symbols-restriction\": \"El nombre de usuario debe comenzar con una letra y contener solamente letras latinas, números, guión bajo o espacio\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"No se encontró el usuario\",\n   \"auth.username\": \"Nombre de usuario\",\n   \"authPanel.disable-comments\": \"Deshabilitar comentarios\","
    },
    {
      "sha": "84c99fad60e1e01357ba42942d40b0849ac15c10",
      "filename": "frontend/app/locales/fi.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/fi.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/fi.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/fi.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Kirjaudu ulos\",\n   \"auth.submit\": \"Lähetä\",\n   \"auth.symbols-restriction\": \"Käyttäjätunnuksen tulee alkaa kirjaimella ja sisältää vain latinalaisia kirjaimia, numeroita, alaviivoja ja välilyöntejä\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"Käyttäjää ei löytynyt\",\n   \"auth.username\": \"Käyttäjätunnus\",\n   \"authPanel.disable-comments\": \"Poista kommentit käytöstä\","
    },
    {
      "sha": "02ca17eb142fbbf06a9c404deaa37ed0b88147bc",
      "filename": "frontend/app/locales/fr.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/fr.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/fr.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/fr.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Se déconnecter\",\n   \"auth.submit\": \"Valider\",\n   \"auth.symbols-restriction\": \"Le nom d'utilisateur ne doit contenir que des lettres, nombres, tirets bas et espaces.\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"Aucun utilisateur n'a été trouvé\",\n   \"auth.username\": \"Nom d'utilisateur\",\n   \"authPanel.disable-comments\": \"Désactiver les commentaires\","
    },
    {
      "sha": "8bfa077ba76143a6a40bedeea346b1742104290f",
      "filename": "frontend/app/locales/it.json",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/it.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/it.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/it.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Esci\",\n   \"auth.submit\": \"Invia\",\n   \"auth.symbols-restriction\": \"L'username deve contenere solo lettere, numberi, trattini bassi o spazi\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"Nessun utente trovato\",\n   \"auth.username\": \"Username\",\n   \"authPanel.disable-comments\": \"Disabilita commenti\",\n@@ -157,8 +163,8 @@\n   \"toolbar.ordered-list\": \"Aggiungi lista numerata\",\n   \"toolbar.quote\": \"Inserisci citazione\",\n   \"toolbar.unordered-list\": \"Aggiungi lista a pallini\",\n-  \"user.my-comments\": \"My comments\",\n   \"user.comments\": \"Comments\",\n+  \"user.my-comments\": \"My comments\",\n   \"vote.anonymous\": \"Gli utenti anonimi non possono votare\",\n   \"vote.deleted\": \"Non puoi votare per un commento eliminato\",\n   \"vote.guest\": \"Accedi per votare\","
    },
    {
      "sha": "56c90a59b2f73b3d20160ddfccf12078dbbc316b",
      "filename": "frontend/app/locales/ja.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/ja.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/ja.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/ja.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"ログアウトしますか\",\n   \"auth.submit\": \"送信\",\n   \"auth.symbols-restriction\": \"ユーザー名には英数字、アンダースコア、またはスペースのみを指定してください\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"ユーザーが見つかりませんでした\",\n   \"auth.username\": \"ユーザー名\",\n   \"authPanel.disable-comments\": \"コメントの無効化\","
    },
    {
      "sha": "b3edd76ef734e5c59df434fcc5bc57cefb36ffb9",
      "filename": "frontend/app/locales/ko.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/ko.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/ko.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/ko.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"로그아웃하시겠어요\",\n   \"auth.submit\": \"확인\",\n   \"auth.symbols-restriction\": \"사용자 이름에는 문자, 숫자, 밑줄 또는 공백만 포함되어야 합니다\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"사용자를 찾을 수 없습니다\",\n   \"auth.username\": \"사용자 이름\",\n   \"authPanel.disable-comments\": \"댓글 비활성화\","
    },
    {
      "sha": "a359621f344335408068ddf6c60afe462483dabd",
      "filename": "frontend/app/locales/pl.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/pl.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/pl.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/pl.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Wyloguj\",\n   \"auth.submit\": \"Potwierdź\",\n   \"auth.symbols-restriction\": \"Nazwa użytkownika powinna składać się z liter, numerów, podkreślinków lub spacji\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"Żaden użytkownik nie został znaleziony\",\n   \"auth.username\": \"Nazwa użytkownika\",\n   \"authPanel.disable-comments\": \"Wyłącz komentarze\","
    },
    {
      "sha": "89bf46c87710b22eb09550cf892bcc2138e4ae21",
      "filename": "frontend/app/locales/ru.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/ru.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/ru.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/ru.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Выйти\",\n   \"auth.submit\": \"Отправить\",\n   \"auth.symbols-restriction\": \"Имя пользователя должно начинаться с буквы и содержать только латинские буквы, цифры, знаки подчеркивания и пробелы\",\n+  \"auth.telegram-check\": \"Проверить\",\n+  \"auth.telegram-link\": \"по ссылке\",\n+  \"auth.telegram-message-1\": \"Откройте Телеграм\",\n+  \"auth.telegram-message-2\": \"и нажмите там кнопку “Start”/“Начать”.\",\n+  \"auth.telegram-message-3\": \"Затем нажмите кнопку “Проверить”.\",\n+  \"auth.telegram-optional-qr\": \"или по QR-коду\",\n   \"auth.user-not-found\": \"Пользователь не найден\",\n   \"auth.username\": \"Имя пользователя\",\n   \"authPanel.disable-comments\": \"Отключить комментарии\","
    },
    {
      "sha": "e7b9d0b1d07c31521b26658cf1c05e90db4ac238",
      "filename": "frontend/app/locales/tr.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/tr.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/tr.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/tr.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Çıkış yap\",\n   \"auth.submit\": \"Gönder\",\n   \"auth.symbols-restriction\": \"Kullanıcı adı harf ile başlayıp; yalnızca harf, rakam, alt çizgi veya boşluk içerebilir\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"Kullanıcı bulunamadı\",\n   \"auth.username\": \"Kullanıcı adı\",\n   \"authPanel.disable-comments\": \"Yorumları devre dışı bırak\","
    },
    {
      "sha": "de10ebbf8a9ab49e84646c3cb16b807977bce5c0",
      "filename": "frontend/app/locales/ua.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/ua.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/ua.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/ua.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Вийти\",\n   \"auth.submit\": \"Відправити\",\n   \"auth.symbols-restriction\": \"Ім’я користувача повинно починатися з літери та містити тільки символи латинського алфавіту, цифри, знаки підкреслення або пробіли\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"Користувач не знайдений\",\n   \"auth.username\": \"Ім’я користувача\",\n   \"authPanel.disable-comments\": \"Вимкнути коментарі\","
    },
    {
      "sha": "a36139321a7fd4f7d9cee14a5820c89a1c59861b",
      "filename": "frontend/app/locales/vi.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/vi.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/vi.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/vi.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"Thoát\",\n   \"auth.submit\": \"Gửi đi\",\n   \"auth.symbols-restriction\": \"Tên người dùng chỉ được chứa các chữ cái, số, dấu gạch dưới hoặc dấu cách\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"Không tìm thấy người dùng nào\",\n   \"auth.username\": \"Tên người dùng\",\n   \"authPanel.disable-comments\": \"Tắt bình luận\","
    },
    {
      "sha": "341847efc27374fe2bbb6f5db84f365278e1596d",
      "filename": "frontend/app/locales/zh.json",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/zh.json",
      "raw_url": "https://github.com/umputun/remark42/raw/74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926/frontend/app/locales/zh.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/locales/zh.json?ref=74b47d3a8ad71d6da2fd6e5b32ff94c1d6e5c926",
      "patch": "@@ -10,6 +10,12 @@\n   \"auth.signout\": \"登出\",\n   \"auth.submit\": \"提交\",\n   \"auth.symbols-restriction\": \"用户名只能包含字母、数字、下划线或空格\",\n+  \"auth.telegram-check\": \"Check\",\n+  \"auth.telegram-link\": \"Telegram bot\",\n+  \"auth.telegram-message-1\": \"You need to authorize your account in the\",\n+  \"auth.telegram-message-2\": \"by clicking “Start” there.\",\n+  \"auth.telegram-message-3\": \"Click “Check” below after authorization in the Telegram bot.\",\n+  \"auth.telegram-optional-qr\": \"or by scanning the QR code\",\n   \"auth.user-not-found\": \"未找到用户\",\n   \"auth.username\": \"用户名\",\n   \"authPanel.disable-comments\": \"禁用评论\","
    }
  ]
}
