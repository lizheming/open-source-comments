{
  "sha": "e10a74694a2ed445d57e1740ba349e72dcc4842d",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODplMTBhNzQ2OTRhMmVkNDQ1ZDU3ZTE3NDBiYTM0OWU3MmRjYzQ4NDJk",
  "commit": {
    "author": {
      "name": "Krzysztof Kotlarek",
      "email": "kotlarek.krzysztof@gmail.com",
      "date": "2021-03-15T22:47:57Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-03-15T22:47:57Z"
    },
    "message": "FIX: deprecation warning - initialization autoloaded the constant (#12400)\n\nGet rid of deprecation related to Zeitwerk autoloader.\r\n\r\nOriginal PR was reverted because of multisite bug #12381 - thank you @davidtaylorhq for fixing it.\r\n\r\nI added the last commit to fix that multisite problem.",
    "tree": {
      "sha": "79dbf7c5e469533b97c2c4a8215e0b97881eb58e",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/79dbf7c5e469533b97c2c4a8215e0b97881eb58e"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/e10a74694a2ed445d57e1740ba349e72dcc4842d",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgT+QdCRBK7hj4Ov3rIwAAdHIIAIkHaV7HX5h2ZL/rKnLg6Qd7\n9jjo0TNyYiBQqTh43sFJJ8WJozdl6DksOh7qiF6WOd5aMjWsauF7+0w6HOlycIvm\nk3rMeklMykcb5LyfEh25Xk+aW3AQxd+A8ie4fiKrQm7PkamV/f8Oc26K+8cazqjD\nSbVtcO35JOj0DZ+CO1AGMKlGt2P2RbbuOQEM5HZUsAr9xKVtGnqWmeRvgyaIICwo\n6gEiR5ojrNkU+S4DjwTh7i1eGUhaBjKu86PpE7qEU+zmFWHyMydO3zD+l/K04GLv\n7uwiGV8Ow1BDIiUKQXNPHnpu8xY1uepW5ohc24sDwLfFdchDRldPh6ntbvUoLyU=\n=FL9r\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 79dbf7c5e469533b97c2c4a8215e0b97881eb58e\nparent ddf8e9b6b69667101763414649aca760df01c666\nauthor Krzysztof Kotlarek <kotlarek.krzysztof@gmail.com> 1615848477 +1100\ncommitter GitHub <noreply@github.com> 1615848477 +1100\n\nFIX: deprecation warning - initialization autoloaded the constant (#12400)\n\nGet rid of deprecation related to Zeitwerk autoloader.\r\n\r\nOriginal PR was reverted because of multisite bug #12381 - thank you @davidtaylorhq for fixing it.\r\n\r\nI added the last commit to fix that multisite problem."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/e10a74694a2ed445d57e1740ba349e72dcc4842d",
  "html_url": "https://github.com/discourse/discourse/commit/e10a74694a2ed445d57e1740ba349e72dcc4842d",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/e10a74694a2ed445d57e1740ba349e72dcc4842d/comments",
  "author": {
    "login": "lis2",
    "id": 72780,
    "node_id": "MDQ6VXNlcjcyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/72780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lis2",
    "html_url": "https://github.com/lis2",
    "followers_url": "https://api.github.com/users/lis2/followers",
    "following_url": "https://api.github.com/users/lis2/following{/other_user}",
    "gists_url": "https://api.github.com/users/lis2/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lis2/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lis2/subscriptions",
    "organizations_url": "https://api.github.com/users/lis2/orgs",
    "repos_url": "https://api.github.com/users/lis2/repos",
    "events_url": "https://api.github.com/users/lis2/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lis2/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ddf8e9b6b69667101763414649aca760df01c666",
      "url": "https://api.github.com/repos/discourse/discourse/commits/ddf8e9b6b69667101763414649aca760df01c666",
      "html_url": "https://github.com/discourse/discourse/commit/ddf8e9b6b69667101763414649aca760df01c666"
    }
  ],
  "stats": {
    "total": 321,
    "additions": 170,
    "deletions": 151
  },
  "files": [
    {
      "sha": "111c989f8996c204cbe46b30de8f4b1bd94240a1",
      "filename": "config/application.rb",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/discourse/discourse/blob/e10a74694a2ed445d57e1740ba349e72dcc4842d/config/application.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e10a74694a2ed445d57e1740ba349e72dcc4842d/config/application.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/application.rb?ref=e10a74694a2ed445d57e1740ba349e72dcc4842d",
      "patch": "@@ -55,6 +55,8 @@\n \n require 'discourse_fonts'\n \n+require_relative '../lib/zeitwerk_config.rb'\n+\n if defined?(Bundler)\n   bundler_groups = [:default]\n \n@@ -116,6 +118,7 @@ def config.database_configuration\n     config.autoload_paths += Dir[\"#{config.root}/lib/validators/\"]\n \n     Rails.autoloaders.main.ignore(Dir[\"#{config.root}/app/models/reports\"])\n+    Rails.autoloaders.main.ignore(Dir[\"#{config.root}/lib/freedom_patches\"])\n \n     # Only load the plugins named here, in the order given (default is alphabetical).\n     # :all can be used as a placeholder for all plugins not explicitly named."
    },
    {
      "sha": "b957e037114ce71539f55d044ab80bb400d9df5d",
      "filename": "config/initializers/002-freedom_patches.rb",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/discourse/discourse/blob/e10a74694a2ed445d57e1740ba349e72dcc4842d/config/initializers/002-freedom_patches.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e10a74694a2ed445d57e1740ba349e72dcc4842d/config/initializers/002-freedom_patches.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/initializers/002-freedom_patches.rb?ref=e10a74694a2ed445d57e1740ba349e72dcc4842d",
      "patch": "@@ -1,5 +1,13 @@\n # frozen_string_literal: true\n \n-Dir[\"#{Rails.root}/lib/freedom_patches/*.rb\"].each do |f|\n-  require(f)\n+# Multisite freedom patch defines RailsMultisite::DiscoursePatches.config which is used  by 200-first_middlewares.rb\n+# Therefore it can not be postponed with .to_prepare\n+RUN_WITHOUT_PREPARE = [\"#{Rails.root}/lib/freedom_patches/rails_multisite.rb\"]\n+RUN_WITHOUT_PREPARE.each { |path| require(path) }\n+\n+Rails.application.reloader.to_prepare do\n+  Dir[\"#{Rails.root}/lib/freedom_patches/*.rb\"].each do |f|\n+    next if RUN_WITHOUT_PREPARE.any? { |path| path == f }\n+    require(f)\n+  end\n end"
    },
    {
      "sha": "f437b7398838fa4e9c86aefeecebf918388e0a99",
      "filename": "config/initializers/005-site_settings.rb",
      "status": "modified",
      "additions": 16,
      "deletions": 14,
      "changes": 30,
      "blob_url": "https://github.com/discourse/discourse/blob/e10a74694a2ed445d57e1740ba349e72dcc4842d/config/initializers/005-site_settings.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e10a74694a2ed445d57e1740ba349e72dcc4842d/config/initializers/005-site_settings.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/initializers/005-site_settings.rb?ref=e10a74694a2ed445d57e1740ba349e72dcc4842d",
      "patch": "@@ -16,24 +16,26 @@\n   return\n end\n \n-reload_settings = lambda {\n-  RailsMultisite::ConnectionManagement.safe_each_connection do\n-    begin\n-      SiteSetting.refresh!\n+Rails.application.reloader.to_prepare do\n+  reload_settings = lambda {\n+    RailsMultisite::ConnectionManagement.safe_each_connection do\n+      begin\n+        SiteSetting.refresh!\n \n-      unless String === SiteSetting.push_api_secret_key && SiteSetting.push_api_secret_key.length == 32\n-        SiteSetting.push_api_secret_key = SecureRandom.hex\n+        unless String === SiteSetting.push_api_secret_key && SiteSetting.push_api_secret_key.length == 32\n+          SiteSetting.push_api_secret_key = SecureRandom.hex\n+        end\n+      rescue ActiveRecord::StatementInvalid\n+        # This will happen when migrating a new database\n       end\n-    rescue ActiveRecord::StatementInvalid\n-      # This will happen when migrating a new database\n     end\n-  end\n-}\n+  }\n \n-reload_settings.call\n+  reload_settings.call\n \n-if !Rails.configuration.cache_classes\n-  ActiveSupport::Reloader.to_prepare do\n-    reload_settings.call\n+  if !Rails.configuration.cache_classes\n+    ActiveSupport::Reloader.to_prepare do\n+      reload_settings.call\n+    end\n   end\n end"
    },
    {
      "sha": "1a49029738f7328848cdb5ccdcbae5b08c4ede33",
      "filename": "config/initializers/100-i18n.rb",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/discourse/discourse/blob/e10a74694a2ed445d57e1740ba349e72dcc4842d/config/initializers/100-i18n.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e10a74694a2ed445d57e1740ba349e72dcc4842d/config/initializers/100-i18n.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/initializers/100-i18n.rb?ref=e10a74694a2ed445d57e1740ba349e72dcc4842d",
      "patch": "@@ -5,15 +5,17 @@\n require 'i18n/backend/discourse_i18n'\n require 'i18n/backend/fallback_locale_list'\n \n-I18n.backend = I18n::Backend::DiscourseI18n.new\n-I18n.fallbacks = I18n::Backend::FallbackLocaleList.new\n-I18n.config.missing_interpolation_argument_handler = proc { throw(:exception) }\n-I18n.reload!\n-I18n.init_accelerator!(overrides_enabled: ENV['DISABLE_TRANSLATION_OVERRIDES'] != '1')\n+Rails.application.reloader.to_prepare do\n+  I18n.backend = I18n::Backend::DiscourseI18n.new\n+  I18n.fallbacks = I18n::Backend::FallbackLocaleList.new\n+  I18n.config.missing_interpolation_argument_handler = proc { throw(:exception) }\n+  I18n.reload!\n+  I18n.init_accelerator!(overrides_enabled: ENV['DISABLE_TRANSLATION_OVERRIDES'] != '1')\n \n-unless Rails.env.test?\n-  MessageBus.subscribe(\"/i18n-flush\") do\n-    I18n.reload!\n-    ExtraLocalesController.clear_cache!\n+  unless Rails.env.test?\n+    MessageBus.subscribe(\"/i18n-flush\") do\n+      I18n.reload!\n+      ExtraLocalesController.clear_cache!\n+    end\n   end\n end"
    },
    {
      "sha": "5b89d984f586b1c002d6ced413a91abd5ada1bda",
      "filename": "config/initializers/100-logster.rb",
      "status": "modified",
      "additions": 130,
      "deletions": 126,
      "changes": 256,
      "blob_url": "https://github.com/discourse/discourse/blob/e10a74694a2ed445d57e1740ba349e72dcc4842d/config/initializers/100-logster.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e10a74694a2ed445d57e1740ba349e72dcc4842d/config/initializers/100-logster.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/initializers/100-logster.rb?ref=e10a74694a2ed445d57e1740ba349e72dcc4842d",
      "patch": "@@ -1,148 +1,152 @@\n # frozen_string_literal: true\n \n if GlobalSetting.skip_redis?\n-  if Rails.logger.respond_to? :chained\n-    Rails.logger = Rails.logger.chained.first\n+  Rails.application.reloader.to_prepare do\n+    if Rails.logger.respond_to? :chained\n+      Rails.logger = Rails.logger.chained.first\n+    end\n   end\n   return\n end\n \n-if Rails.env.development? && RUBY_VERSION.match?(/^2\\.5\\.[23]/)\n-  STDERR.puts \"WARNING: Discourse development environment runs slower on Ruby 2.5.3 or below\"\n-  STDERR.puts \"We recommend you upgrade to Ruby 2.6.1 for the optimal development performance\"\n-\n-  # we have to used to older and slower version of the logger cause the new one exposes a Ruby bug in\n-  # the Queue class which causes segmentation faults\n-  Logster::Scheduler.disable\n-end\n-\n-if Rails.env.development? && !Sidekiq.server? && ENV[\"RAILS_LOGS_STDOUT\"] == \"1\"\n-  console = ActiveSupport::Logger.new(STDOUT)\n-  original_logger = Rails.logger.chained.first\n-  console.formatter = original_logger.formatter\n-  console.level = original_logger.level\n+Rails.application.reloader.to_prepare do\n+  if Rails.env.development? && RUBY_VERSION.match?(/^2\\.5\\.[23]/)\n+    STDERR.puts \"WARNING: Discourse development environment runs slower on Ruby 2.5.3 or below\"\n+    STDERR.puts \"We recommend you upgrade to Ruby 2.6.1 for the optimal development performance\"\n \n-  unless ActiveSupport::Logger.logger_outputs_to?(original_logger, STDOUT)\n-    original_logger.extend(ActiveSupport::Logger.broadcast(console))\n+    # we have to used to older and slower version of the logger cause the new one exposes a Ruby bug in\n+    # the Queue class which causes segmentation faults\n+    Logster::Scheduler.disable\n   end\n-end\n-\n-if Rails.env.production?\n-  Logster.store.ignore = [\n-    # honestly, Rails should not be logging this, its real noisy\n-    /^ActionController::RoutingError \\(No route matches/,\n-\n-    /^PG::Error: ERROR:\\s+duplicate key/,\n-\n-    /^ActionController::UnknownFormat/,\n-    /^ActionController::UnknownHttpMethod/,\n-    /^AbstractController::ActionNotFound/,\n-    # ignore any empty JS errors that contain blanks or zeros for line and column fields\n-    #\n-    # Line:\n-    # Column:\n-    #\n-    /(?m).*?Line: (?:\\D|0).*?Column: (?:\\D|0)/,\n-\n-    # suppress empty JS errors (covers MSIE 9, etc)\n-    /^(Syntax|Script) error.*Line: (0|1)\\b/m,\n-\n-    # CSRF errors are not providing enough data\n-    # suppress unconditionally for now\n-    /^Can't verify CSRF token authenticity.$/,\n-\n-    # Yandex bot triggers this JS error a lot\n-    /^Uncaught ReferenceError: I18n is not defined/,\n-\n-    # related to browser plugins somehow, we don't care\n-    /Error calling method on NPObject/,\n-\n-    # 404s can be dealt with elsewhere\n-    /^ActiveRecord::RecordNotFound/,\n \n-    # bad asset requested, no need to log\n-    /^ActionController::BadRequest/,\n+  if Rails.env.development? && !Sidekiq.server? && ENV[\"RAILS_LOGS_STDOUT\"] == \"1\"\n+    console = ActiveSupport::Logger.new(STDOUT)\n+    original_logger = Rails.logger.chained.first\n+    console.formatter = original_logger.formatter\n+    console.level = original_logger.level\n \n-    # we can't do anything about invalid parameters\n-    /Rack::QueryParser::InvalidParameterError/,\n-\n-    # we handle this cleanly in the message bus middleware\n-    # no point logging to logster\n-    /RateLimiter::LimitExceeded.*/m,\n+    unless ActiveSupport::Logger.logger_outputs_to?(original_logger, STDOUT)\n+      original_logger.extend(ActiveSupport::Logger.broadcast(console))\n+    end\n+  end\n \n-    # see https://github.com/rails/rails/issues/34599\n-    # Poll defines an enum with the value `open` ActiveRecord then attempts\n-    # AR then warns cause #open is being redefined, it is already defined\n-    # privately in Kernel per: http://ruby-doc.org/core-2.5.3/Kernel.html#method-i-open\n-    # Once the rails issue is fixed we can stop this error suppression and stop defining\n-    # scopes for the enums\n-    /^Creating scope :open\\. Overwriting existing method Poll\\.open\\./,\n-  ]\n-  Logster.config.env_expandable_keys.push(:hostname, :problem_db)\n-end\n+  if Rails.env.production?\n+    Logster.store.ignore = [\n+      # honestly, Rails should not be logging this, its real noisy\n+      /^ActionController::RoutingError \\(No route matches/,\n+\n+      /^PG::Error: ERROR:\\s+duplicate key/,\n+\n+      /^ActionController::UnknownFormat/,\n+      /^ActionController::UnknownHttpMethod/,\n+      /^AbstractController::ActionNotFound/,\n+      # ignore any empty JS errors that contain blanks or zeros for line and column fields\n+      #\n+      # Line:\n+      # Column:\n+      #\n+      /(?m).*?Line: (?:\\D|0).*?Column: (?:\\D|0)/,\n+\n+      # suppress empty JS errors (covers MSIE 9, etc)\n+      /^(Syntax|Script) error.*Line: (0|1)\\b/m,\n+\n+      # CSRF errors are not providing enough data\n+      # suppress unconditionally for now\n+      /^Can't verify CSRF token authenticity.$/,\n+\n+      # Yandex bot triggers this JS error a lot\n+      /^Uncaught ReferenceError: I18n is not defined/,\n+\n+      # related to browser plugins somehow, we don't care\n+      /Error calling method on NPObject/,\n+\n+      # 404s can be dealt with elsewhere\n+      /^ActiveRecord::RecordNotFound/,\n+\n+      # bad asset requested, no need to log\n+      /^ActionController::BadRequest/,\n+\n+      # we can't do anything about invalid parameters\n+      /Rack::QueryParser::InvalidParameterError/,\n+\n+      # we handle this cleanly in the message bus middleware\n+      # no point logging to logster\n+      /RateLimiter::LimitExceeded.*/m,\n+\n+      # see https://github.com/rails/rails/issues/34599\n+      # Poll defines an enum with the value `open` ActiveRecord then attempts\n+      # AR then warns cause #open is being redefined, it is already defined\n+      # privately in Kernel per: http://ruby-doc.org/core-2.5.3/Kernel.html#method-i-open\n+      # Once the rails issue is fixed we can stop this error suppression and stop defining\n+      # scopes for the enums\n+      /^Creating scope :open\\. Overwriting existing method Poll\\.open\\./,\n+    ]\n+    Logster.config.env_expandable_keys.push(:hostname, :problem_db)\n+  end\n \n-Logster.store.max_backlog = GlobalSetting.max_logster_logs\n-\n-# TODO logster should be able to do this automatically\n-Logster.config.subdirectory = \"#{GlobalSetting.relative_url_root}/logs\"\n-\n-Logster.config.application_version = Discourse.git_version\n-Logster.config.enable_custom_patterns_via_ui = true\n-Logster.config.enable_js_error_reporting = GlobalSetting.enable_js_error_reporting\n-\n-store = Logster.store\n-redis = Logster.store.redis\n-store.redis_prefix = Proc.new { redis.namespace }\n-store.redis_raw_connection = redis.without_namespace\n-severities = [Logger::WARN, Logger::ERROR, Logger::FATAL, Logger::UNKNOWN]\n-\n-RailsMultisite::ConnectionManagement.each_connection do\n-  error_rate_per_minute = SiteSetting.alert_admins_if_errors_per_minute rescue 0\n-\n-  if (error_rate_per_minute || 0) > 0\n-    store.register_rate_limit_per_minute(severities, error_rate_per_minute) do |rate|\n-      MessageBus.publish(\"/logs_error_rate_exceeded\",\n-        {\n-          rate: rate,\n-          duration: 'minute',\n-          publish_at: Time.current.to_i\n-        },\n-        group_ids: [Group::AUTO_GROUPS[:admins]]\n-      )\n+  Logster.store.max_backlog = GlobalSetting.max_logster_logs\n+\n+  # TODO logster should be able to do this automatically\n+  Logster.config.subdirectory = \"#{GlobalSetting.relative_url_root}/logs\"\n+\n+  Logster.config.application_version = Discourse.git_version\n+  Logster.config.enable_custom_patterns_via_ui = true\n+  Logster.config.enable_js_error_reporting = GlobalSetting.enable_js_error_reporting\n+\n+  store = Logster.store\n+  redis = Logster.store.redis\n+  store.redis_prefix = Proc.new { redis.namespace }\n+  store.redis_raw_connection = redis.without_namespace\n+  severities = [Logger::WARN, Logger::ERROR, Logger::FATAL, Logger::UNKNOWN]\n+\n+  RailsMultisite::ConnectionManagement.each_connection do\n+    error_rate_per_minute = SiteSetting.alert_admins_if_errors_per_minute rescue 0\n+\n+    if (error_rate_per_minute || 0) > 0\n+      store.register_rate_limit_per_minute(severities, error_rate_per_minute) do |rate|\n+        MessageBus.publish(\"/logs_error_rate_exceeded\",\n+                           {\n+                             rate: rate,\n+                             duration: 'minute',\n+                             publish_at: Time.current.to_i\n+                           },\n+                           group_ids: [Group::AUTO_GROUPS[:admins]]\n+                          )\n+      end\n     end\n-  end\n \n-  error_rate_per_hour = SiteSetting.alert_admins_if_errors_per_hour rescue 0\n-\n-  if (error_rate_per_hour || 0) > 0\n-    store.register_rate_limit_per_hour(severities, error_rate_per_hour) do |rate|\n-      MessageBus.publish(\"/logs_error_rate_exceeded\",\n-        {\n-          rate: rate,\n-          duration: 'hour',\n-          publish_at: Time.current.to_i,\n-        },\n-        group_ids: [Group::AUTO_GROUPS[:admins]]\n-      )\n+    error_rate_per_hour = SiteSetting.alert_admins_if_errors_per_hour rescue 0\n+\n+    if (error_rate_per_hour || 0) > 0\n+      store.register_rate_limit_per_hour(severities, error_rate_per_hour) do |rate|\n+        MessageBus.publish(\"/logs_error_rate_exceeded\",\n+                           {\n+                             rate: rate,\n+                             duration: 'hour',\n+                             publish_at: Time.current.to_i,\n+                           },\n+                           group_ids: [Group::AUTO_GROUPS[:admins]]\n+                          )\n+      end\n     end\n   end\n-end\n \n-if Rails.configuration.multisite\n-  if Rails.logger.respond_to? :chained\n-    chained = Rails.logger.chained\n-    chained && chained.first.formatter = RailsMultisite::Formatter.new\n+  if Rails.configuration.multisite\n+    if Rails.logger.respond_to? :chained\n+      chained = Rails.logger.chained\n+      chained && chained.first.formatter = RailsMultisite::Formatter.new\n+    end\n   end\n-end\n \n-Logster.config.project_directories = [\n-  { path: Rails.root.to_s, url: \"https://github.com/discourse/discourse\", main_app: true }\n-]\n-Discourse.plugins.each do |plugin|\n-  next if !plugin.metadata.url\n+  Logster.config.project_directories = [\n+    { path: Rails.root.to_s, url: \"https://github.com/discourse/discourse\", main_app: true }\n+  ]\n+  Discourse.plugins.each do |plugin|\n+    next if !plugin.metadata.url\n \n-  Logster.config.project_directories << {\n-    path: \"#{Rails.root.to_s}/plugins/#{plugin.directory_name}\",\n-    url: plugin.metadata.url\n-  }\n+    Logster.config.project_directories << {\n+      path: \"#{Rails.root.to_s}/plugins/#{plugin.directory_name}\",\n+      url: plugin.metadata.url\n+    }\n+  end\n end"
    },
    {
      "sha": "92a066b83392d71161a0cdb3a6da9acc95722bb0",
      "filename": "lib/zeitwerk_config.rb",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/discourse/discourse/blob/e10a74694a2ed445d57e1740ba349e72dcc4842d/lib/zeitwerk_config.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e10a74694a2ed445d57e1740ba349e72dcc4842d/lib/zeitwerk_config.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/zeitwerk_config.rb?ref=e10a74694a2ed445d57e1740ba349e72dcc4842d",
      "previous_filename": "lib/freedom_patches/zeitwerk.rb"
    }
  ]
}
