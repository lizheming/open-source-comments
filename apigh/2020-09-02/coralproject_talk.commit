{
  "sha": "832f19bad54213f7ff36d27c2c09b06e40649222",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6ODMyZjE5YmFkNTQyMTNmN2ZmMzZkMjdjMmMwOWIwNmU0MDY0OTIyMg==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2020-09-02T16:03:24Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-09-02T16:03:24Z"
    },
    "message": "fix: fixes issue with intersection provider (#3167)\n\nCo-authored-by: Vinh <vinh@vinh.tech>",
    "tree": {
      "sha": "9aa67991e6caba8fc240ab0a4ba610cc61cc4f5e",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/9aa67991e6caba8fc240ab0a4ba610cc61cc4f5e"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/832f19bad54213f7ff36d27c2c09b06e40649222",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfT8JMCRBK7hj4Ov3rIwAAdHIIAE64x5VKskWo9sXULiAT1yyl\nh4dL3UCgghowrR/WVT/XWs8fTLJC9xSJV6kZyhMYON0Bda23j5M9XXKlrSvYf834\nx3HDTFwrOgLc4+a7jtemTlJRICMl6OGe44B36yW0Ew9Wubg6CoJY27ctcqDK7e3M\n6yCn3FDWtpspAElibAvFqcgP3s5g/3uPqKi5JR+L/1zLEcUg0e2kFYbFwftI4Q8P\nu1/lg3VU2DDXKv9x1Xzb64PdQI5/j9G/SPpLEmOyBh/JQ2MkVa2W3h+Szw4llcgP\nnCmIIaWRnf1Z3rd1zQb9697dfz2Zb7SoZP5tTUb663C6zz90lTPQ4DKdQ4QMvmA=\n=Sk6p\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 9aa67991e6caba8fc240ab0a4ba610cc61cc4f5e\nparent f518a2fae49446a9facefc9a2ad7e913a098789d\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1599062604 -0600\ncommitter GitHub <noreply@github.com> 1599062604 +0000\n\nfix: fixes issue with intersection provider (#3167)\n\nCo-authored-by: Vinh <vinh@vinh.tech>"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/832f19bad54213f7ff36d27c2c09b06e40649222",
  "html_url": "https://github.com/coralproject/talk/commit/832f19bad54213f7ff36d27c2c09b06e40649222",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/832f19bad54213f7ff36d27c2c09b06e40649222/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f518a2fae49446a9facefc9a2ad7e913a098789d",
      "url": "https://api.github.com/repos/coralproject/talk/commits/f518a2fae49446a9facefc9a2ad7e913a098789d",
      "html_url": "https://github.com/coralproject/talk/commit/f518a2fae49446a9facefc9a2ad7e913a098789d"
    }
  ],
  "stats": {
    "total": 340,
    "additions": 130,
    "deletions": 210
  },
  "files": [
    {
      "sha": "c2f44a6b7dfd1b3b6c41627cc57b6dc188e96b30",
      "filename": "src/core/client/admin/components/AutoLoadMore.tsx",
      "status": "modified",
      "additions": 29,
      "deletions": 30,
      "changes": 59,
      "blob_url": "https://github.com/coralproject/talk/blob/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/admin/components/AutoLoadMore.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/admin/components/AutoLoadMore.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/components/AutoLoadMore.tsx?ref=832f19bad54213f7ff36d27c2c09b06e40649222",
      "patch": "@@ -1,43 +1,42 @@\n-import React from \"react\";\n+import React, { FunctionComponent, useEffect } from \"react\";\n \n-import { withInView } from \"coral-framework/lib/intersection\";\n+import { useInView } from \"coral-framework/lib/intersection\";\n import { BaseButton, Spinner } from \"coral-ui/components/v2\";\n \n interface Props {\n-  inView: boolean | undefined;\n-  intersectionRef: React.Ref<any>;\n   disableLoadMore?: boolean;\n   onLoadMore: () => void;\n }\n \n-class AutoLoadMoresContainer extends React.Component<Props> {\n-  public UNSAFE_componentWillReceiveProps(nextProps: Props) {\n-    if (nextProps.inView && !nextProps.disableLoadMore) {\n-      nextProps.onLoadMore();\n-    }\n-  }\n-  public render() {\n-    // We can't really test infinite scrolling behavior\n-    // with jsdom in our feature tests, so we'll just a\n-    // button here to make it testable.\n-    if (process.env.NODE_ENV === \"test\") {\n-      return (\n-        <BaseButton\n-          onClick={this.props.onLoadMore}\n-          disabled={this.props.disableLoadMore}\n-        >\n-          Load More\n-        </BaseButton>\n-      );\n+const AutoLoadMoresContainer: FunctionComponent<Props> = ({\n+  onLoadMore,\n+  disableLoadMore = false,\n+}) => {\n+  const { inView, intersectionRef } = useInView();\n+\n+  useEffect(() => {\n+    if (!inView || disableLoadMore) {\n+      return;\n     }\n+\n+    onLoadMore();\n+  }, [disableLoadMore, inView, onLoadMore]);\n+\n+  // We can't really test infinite scrolling behavior\n+  // with jsdom in our feature tests, so we'll just a\n+  // button here to make it testable.\n+  if (process.env.NODE_ENV === \"test\") {\n     return (\n-      <div ref={this.props.intersectionRef}>\n-        <Spinner />\n-      </div>\n+      <BaseButton onClick={onLoadMore} disabled={disableLoadMore}>\n+        Load More\n+      </BaseButton>\n     );\n   }\n-}\n-\n-const enhanced = withInView(AutoLoadMoresContainer);\n+  return (\n+    <div ref={intersectionRef}>\n+      <Spinner />\n+    </div>\n+  );\n+};\n \n-export default enhanced;\n+export default AutoLoadMoresContainer;"
    },
    {
      "sha": "6b9df85c576248009162906c0f02424bbe495925",
      "filename": "src/core/client/admin/routes/Moderate/Queue/__snapshots__/Queue.spec.tsx.snap",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/admin/routes/Moderate/Queue/__snapshots__/Queue.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/admin/routes/Moderate/Queue/__snapshots__/Queue.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Moderate/Queue/__snapshots__/Queue.spec.tsx.snap?ref=832f19bad54213f7ff36d27c2c09b06e40649222",
      "patch": "@@ -14,7 +14,7 @@ exports[`renders correctly with load more 1`] = `\n   <ForwardRef(forwardRef)\n     justifyContent=\"center\"\n   >\n-    <withContext(WithInView)\n+    <AutoLoadMoresContainer\n       disableLoadMore={false}\n       onLoadMore={[Function]}\n     />"
    },
    {
      "sha": "c165e5b42c9c2be2d1f278e5a3722679470358ad",
      "filename": "src/core/client/framework/lib/intersection/IntersectionContext.tsx",
      "status": "modified",
      "additions": 50,
      "deletions": 64,
      "changes": 114,
      "blob_url": "https://github.com/coralproject/talk/blob/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/framework/lib/intersection/IntersectionContext.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/framework/lib/intersection/IntersectionContext.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/intersection/IntersectionContext.tsx?ref=832f19bad54213f7ff36d27c2c09b06e40649222",
      "patch": "@@ -1,82 +1,68 @@\n-import React from \"react\";\n-\n-import { createContextHOC } from \"coral-framework/helpers\";\n+import React, { useCallback, useEffect, useMemo, useRef } from \"react\";\n \n export type IntersectionCallback = (entry: IntersectionObserverEntry) => void;\n+\n export type Observe = (\n   target: Element,\n   callback: IntersectionCallback\n ) => () => void;\n+\n export interface IntersectionContext {\n   observe: Observe;\n }\n \n-const { Provider, Consumer } = React.createContext<IntersectionContext>(\n-  {} as any\n-);\n-export const IntersectionConsumer = Consumer;\n+const IntersectionContext = React.createContext<IntersectionContext>({} as any);\n \n-export class IntersectionProvider extends React.Component<any, any> {\n-  private observer: IntersectionObserver;\n-  private elements = new Map();\n-  private elementBuffer: Element[] = [];\n-  private unmounted = false;\n+export const useIntersectionContext = () =>\n+  React.useContext(IntersectionContext);\n \n-  public componentDidMount() {\n-    if (this.unmounted) {\n-      return;\n-    }\n-    this.observer = new IntersectionObserver(this.onIntersect, {\n-      root: this.props.node ? this.props.node : undefined,\n-      rootMargin: \"0px\",\n-      threshold: 0.25,\n-    });\n-    this.elementBuffer.forEach((element) => this.observer.observe(element));\n-    this.elementBuffer = [];\n-  }\n+export const IntersectionProvider: React.FunctionComponent = ({ children }) => {\n+  const callbacks = useRef(new Map<Element, IntersectionCallback>());\n \n-  public componentWillUnmount() {\n-    this.unmounted = true;\n-  }\n+  const onIntersect = useCallback(\n+    (entries: IntersectionObserverEntry[]) =>\n+      entries.forEach((entry) => {\n+        const callback = callbacks.current.get(entry.target);\n+        if (!callback) {\n+          // This should prevent the edge case where the target was unobserved\n+          // but the event still fired.\n+          return;\n+        }\n \n-  private unobserve = (element: Element) => {\n-    this.elements.delete(element);\n-    if (!this.observer) {\n-      this.elementBuffer = this.elementBuffer.filter((e) => e !== element);\n-    } else {\n-      this.observer.unobserve(element);\n-    }\n-  };\n+        callback(entry);\n+      }),\n+    []\n+  );\n \n-  private observe: Observe = (element, callback) => {\n-    this.elements.set(element, callback);\n-    // this funny bit to handle react's lifecycle order and also wait\n-    // for polyfill.\n-    if (!this.observer) {\n-      this.elementBuffer.push(element);\n-    } else {\n-      this.observer.observe(element);\n-    }\n-    return () => this.unobserve(element);\n-  };\n+  // Create the observer that will last for the lifetime of the component.\n+  const observer = useMemo(\n+    () =>\n+      new IntersectionObserver(onIntersect, {\n+        rootMargin: \"0px\",\n+        threshold: 0.25,\n+      }),\n+    [onIntersect]\n+  );\n \n-  private onIntersect = (\n-    entries: IntersectionObserverEntry[],\n-    observer: IntersectionObserver\n-  ) => {\n-    entries.forEach((entry) => this.elements.get(entry.target)(entry));\n-  };\n+  // When we unmount, disconnect the observer.\n+  useEffect(() => () => observer.disconnect(), [observer]);\n \n-  public render() {\n-    return (\n-      <Provider value={{ observe: this.observe }}>\n-        {this.props.children}\n-      </Provider>\n-    );\n-  }\n-}\n+  const observe: Observe = useCallback(\n+    (element, callback) => {\n+      callbacks.current.set(element, callback);\n+      observer.observe(element);\n+\n+      return () => {\n+        observer.unobserve(element);\n+        callbacks.current.delete(element);\n+      };\n+    },\n+    [observer]\n+  );\n \n-export const withIntersectionContext = createContextHOC<IntersectionContext>(\n-  \"withContext\",\n-  IntersectionConsumer\n-);\n+  return (\n+    <IntersectionContext.Provider value={{ observe }}>\n+      {children}\n+    </IntersectionContext.Provider>\n+  );\n+};"
    },
    {
      "sha": "1c6e43d5eb95df123f219eb473d213925b207fdf",
      "filename": "src/core/client/framework/lib/intersection/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/framework/lib/intersection/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/framework/lib/intersection/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/intersection/index.ts?ref=832f19bad54213f7ff36d27c2c09b06e40649222",
      "patch": "@@ -1,6 +1,2 @@\n-export {\n-  IntersectionProvider,\n-  Observe,\n-  withIntersectionContext,\n-} from \"./IntersectionContext\";\n-export { default as withInView } from \"./withInView\";\n+export { IntersectionProvider, Observe } from \"./IntersectionContext\";\n+export { default as useInView } from \"./useInView\";"
    },
    {
      "sha": "513623b4e15e295c34e94f53564e51082b508ac8",
      "filename": "src/core/client/framework/lib/intersection/useInView.ts",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/coralproject/talk/blob/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/framework/lib/intersection/useInView.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/framework/lib/intersection/useInView.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/intersection/useInView.ts?ref=832f19bad54213f7ff36d27c2c09b06e40649222",
      "patch": "@@ -0,0 +1,27 @@\n+import { useEffect, useState } from \"react\";\n+\n+import { useIntersectionContext } from \"./IntersectionContext\";\n+\n+const useInView = () => {\n+  const { observe } = useIntersectionContext();\n+  const [intersectionRef, setIntersectionRef] = useState<Element | null>(null);\n+  const [inView, setInView] = useState<boolean>(false);\n+\n+  useEffect(() => {\n+    if (!intersectionRef) {\n+      return;\n+    }\n+\n+    // Begin observing te ref element. This will return a function for\n+    // unobserving the element.\n+    return observe(intersectionRef, ({ intersectionRatio }) => {\n+      // We will use the intersection ratio. Once the ratio is greater than zero\n+      // we will mark that the element is in view.\n+      setInView(intersectionRatio > 0);\n+    });\n+  }, [intersectionRef, observe]);\n+\n+  return { inView, intersectionRef: setIntersectionRef };\n+};\n+\n+export default useInView;"
    },
    {
      "sha": "401e2208cbf3a43d6bd4b5ceda4ea0b41dec7ffa",
      "filename": "src/core/client/framework/lib/intersection/withInView.tsx",
      "status": "removed",
      "additions": 0,
      "deletions": 83,
      "changes": 83,
      "blob_url": "https://github.com/coralproject/talk/blob/f518a2fae49446a9facefc9a2ad7e913a098789d/src/core/client/framework/lib/intersection/withInView.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/f518a2fae49446a9facefc9a2ad7e913a098789d/src/core/client/framework/lib/intersection/withInView.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/intersection/withInView.tsx?ref=f518a2fae49446a9facefc9a2ad7e913a098789d",
      "patch": "@@ -1,83 +0,0 @@\n-import React from \"react\";\n-import { DefaultingInferableComponentEnhancer, hoistStatics } from \"recompose\";\n-\n-import { Observe, withIntersectionContext } from \"./IntersectionContext\";\n-\n-interface InjectedProps {\n-  inView: boolean | undefined;\n-  intersectionRef: React.Ref<any>;\n-}\n-\n-interface Props {\n-  observe: Observe;\n-}\n-\n-interface State {\n-  inView: boolean | undefined;\n-}\n-\n-/**\n- * withInView provides a property `inView: boolean`\n- * to indicate whether or not the referenced element is\n- * in the current browser view.\n- */\n-const withInView: DefaultingInferableComponentEnhancer<InjectedProps> = hoistStatics<\n-  InjectedProps\n->(<T extends InjectedProps>(BaseComponent: React.ComponentType<T>) => {\n-  // TODO: (cvle) This is a workaround for a typescript bug\n-  // https://github.com/Microsoft/TypeScript/issues/30762\n-  const Workaround = BaseComponent as React.ComponentType<InjectedProps>;\n-\n-  class WithInView extends React.Component<Props, State> {\n-    private unobserve: (() => void) | null = null;\n-\n-    public state = {\n-      inView: undefined,\n-    };\n-\n-    private changeRef = (ref: any) => {\n-      if (this.unobserve) {\n-        this.unobserve();\n-        this.unobserve = null;\n-      }\n-      if (ref) {\n-        this.unobserve = this.props.observe(\n-          ref,\n-          ({ intersectionRatio }: any) => {\n-            // Callback is called whenever we run observe.\n-            if (this.state.inView === undefined) {\n-              this.setState({ inView: intersectionRatio > 0 });\n-            } else {\n-              this.setState((s) => ({\n-                inView: !s.inView,\n-              }));\n-            }\n-          }\n-        );\n-      }\n-    };\n-\n-    public componentWillUnmount() {\n-      if (this.unobserve) {\n-        this.unobserve();\n-      }\n-    }\n-\n-    public render() {\n-      return (\n-        <Workaround\n-          {...this.props}\n-          inView={this.state.inView}\n-          intersectionRef={this.changeRef}\n-        />\n-      );\n-    }\n-  }\n-\n-  const enhanced = withIntersectionContext(({ observe }) => ({ observe }))(\n-    WithInView\n-  );\n-  return enhanced as React.ComponentClass<any>;\n-});\n-\n-export default withInView;"
    },
    {
      "sha": "13a16210508e6f59fb72f91b706241629231d4af",
      "filename": "src/core/client/stream/tabs/Comments/Stream/ViewersWatchingContainer.tsx",
      "status": "modified",
      "additions": 21,
      "deletions": 26,
      "changes": 47,
      "blob_url": "https://github.com/coralproject/talk/blob/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/stream/tabs/Comments/Stream/ViewersWatchingContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/832f19bad54213f7ff36d27c2c09b06e40649222/src/core/client/stream/tabs/Comments/Stream/ViewersWatchingContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/stream/tabs/Comments/Stream/ViewersWatchingContainer.tsx?ref=832f19bad54213f7ff36d27c2c09b06e40649222",
      "patch": "@@ -8,7 +8,7 @@ import React, {\n import { graphql } from \"react-relay\";\n \n import { useLive, useVisibilityState } from \"coral-framework/hooks\";\n-import { withInView } from \"coral-framework/lib/intersection\";\n+import { useInView } from \"coral-framework/lib/intersection\";\n import { useFetch, withFragmentContainer } from \"coral-framework/lib/relay\";\n import { Icon } from \"coral-ui/components/v2\";\n import { CallOut } from \"coral-ui/components/v3\";\n@@ -21,8 +21,6 @@ import RefreshStoryViewerCount from \"./RefreshStoryViewerCount\";\n import styles from \"./ViewersWatchingContainer.css\";\n \n interface Props {\n-  inView: boolean | undefined;\n-  intersectionRef: React.Ref<any>;\n   story: ViewersWatchingContainer_story;\n   settings: ViewersWatchingContainer_settings;\n }\n@@ -34,9 +32,8 @@ const MAX_TIMEOUT = TIMEOUT + TIMEOUT_JITTER;\n const ViewersWatchingContainer: FunctionComponent<Props> = ({\n   story,\n   settings,\n-  inView = false,\n-  intersectionRef,\n }) => {\n+  const { inView, intersectionRef } = useInView();\n   const [lastRefreshed, setLastRefreshed] = useState<number>(Date.now());\n   const [refreshed, setRefreshed] = useState(false);\n   const live = useLive({ story, settings });\n@@ -137,7 +134,7 @@ const ViewersWatchingContainer: FunctionComponent<Props> = ({\n         color=\"primary\"\n         title={\n           <Localized id=\"comments-watchers\" $count={viewerCount}>\n-            <span>{viewerCount} people is online</span>\n+            <span>{viewerCount} online</span>\n           </Localized>\n         }\n         titleWeight=\"semiBold\"\n@@ -146,28 +143,26 @@ const ViewersWatchingContainer: FunctionComponent<Props> = ({\n   );\n };\n \n-const enhanced = withInView(\n-  withFragmentContainer<Props>({\n-    story: graphql`\n-      fragment ViewersWatchingContainer_story on Story {\n-        id\n-        viewerCount\n-        isClosed\n-        settings {\n-          live {\n-            enabled\n-          }\n-        }\n-      }\n-    `,\n-    settings: graphql`\n-      fragment ViewersWatchingContainer_settings on Settings {\n-        disableCommenting {\n+const enhanced = withFragmentContainer<Props>({\n+  story: graphql`\n+    fragment ViewersWatchingContainer_story on Story {\n+      id\n+      viewerCount\n+      isClosed\n+      settings {\n+        live {\n           enabled\n         }\n       }\n-    `,\n-  })(ViewersWatchingContainer)\n-);\n+    }\n+  `,\n+  settings: graphql`\n+    fragment ViewersWatchingContainer_settings on Settings {\n+      disableCommenting {\n+        enabled\n+      }\n+    }\n+  `,\n+})(ViewersWatchingContainer);\n \n export default enhanced;"
    }
  ]
}
