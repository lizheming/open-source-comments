{
  "sha": "2aec92d0b4262a58cce86ed4c25a3346e77198f1",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODoyYWVjOTJkMGI0MjYyYTU4Y2NlODZlZDRjMjVhMzM0NmU3NzE5OGYx",
  "commit": {
    "author": {
      "name": "jbrw",
      "email": "jamie@goatforce5.org",
      "date": "2020-07-23T13:50:00Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-07-23T13:50:00Z"
    },
    "message": "FEATURE - allow Group Moderators to edit category description (#10292)\n\nCo-authored-by: Alan Guo Xiang Tan <gxtan1990@gmail.com>",
    "tree": {
      "sha": "6fa747c7f87bd8076f90454962f4eb58d4635868",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/6fa747c7f87bd8076f90454962f4eb58d4635868"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/2aec92d0b4262a58cce86ed4c25a3346e77198f1",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGZWICRBK7hj4Ov3rIwAAdHIIABWIm65DBpl9EdD0FlPIO8V+\nhKbpbA+jGsHIAy1TpfyyapvD48eYHFynSe0rqDdW5jYbQ1HCNtAa0Cihhmb98VB7\naTYafouVOAph8BG6e3Z1zRCiOI8dhw17hLv6kNmrUF3EhGedWAL7wgGEfmwesCeF\noGUzqG0r3Fri4I2AkGsV1y5er75SXBsrAkuDI8aptzSIQ/ssamY0VkTZA/zjBx68\nhlRGoEcL8e9saacRbvt9AaJ7ReIwJS+fSjUGv0fpLNOrhms1Xq9q4xNivZbEgIMb\nRy5QNfwI+CqWPsVnC8Ud8a+eUU1jNMjA5EUwzMmNrLQcz3LVJNw1Q+TgsFjMC80=\n=B1YL\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 6fa747c7f87bd8076f90454962f4eb58d4635868\nparent 61d36406431f23e5c19811e78b2036fef91e78d1\nauthor jbrw <jamie@goatforce5.org> 1595512200 -0400\ncommitter GitHub <noreply@github.com> 1595512200 -0400\n\nFEATURE - allow Group Moderators to edit category description (#10292)\n\nCo-authored-by: Alan Guo Xiang Tan <gxtan1990@gmail.com>"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/2aec92d0b4262a58cce86ed4c25a3346e77198f1",
  "html_url": "https://github.com/discourse/discourse/commit/2aec92d0b4262a58cce86ed4c25a3346e77198f1",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/2aec92d0b4262a58cce86ed4c25a3346e77198f1/comments",
  "author": {
    "login": "jbrw",
    "id": 42120,
    "node_id": "MDQ6VXNlcjQyMTIw",
    "avatar_url": "https://avatars0.githubusercontent.com/u/42120?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbrw",
    "html_url": "https://github.com/jbrw",
    "followers_url": "https://api.github.com/users/jbrw/followers",
    "following_url": "https://api.github.com/users/jbrw/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbrw/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbrw/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbrw/subscriptions",
    "organizations_url": "https://api.github.com/users/jbrw/orgs",
    "repos_url": "https://api.github.com/users/jbrw/repos",
    "events_url": "https://api.github.com/users/jbrw/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbrw/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "61d36406431f23e5c19811e78b2036fef91e78d1",
      "url": "https://api.github.com/repos/discourse/discourse/commits/61d36406431f23e5c19811e78b2036fef91e78d1",
      "html_url": "https://github.com/discourse/discourse/commit/61d36406431f23e5c19811e78b2036fef91e78d1"
    }
  ],
  "stats": {
    "total": 114,
    "additions": 112,
    "deletions": 2
  },
  "files": [
    {
      "sha": "766703268b0f7ba1e215eaff0bf91611b4b89b4e",
      "filename": "app/models/post.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/2aec92d0b4262a58cce86ed4c25a3346e77198f1/app/models/post.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2aec92d0b4262a58cce86ed4c25a3346e77198f1/app/models/post.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/post.rb?ref=2aec92d0b4262a58cce86ed4c25a3346e77198f1",
      "patch": "@@ -485,6 +485,10 @@ def is_first_post?\n       post_number == 1\n   end\n \n+  def is_category_description?\n+    topic.present? && topic.is_category_topic? && is_first_post?\n+  end\n+\n   def is_reply_by_email?\n     via_email && post_number.present? && post_number > 1\n   end"
    },
    {
      "sha": "3699bcea2c91438cb5a1922e6feb63c1653a6672",
      "filename": "lib/guardian/category_guardian.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/2aec92d0b4262a58cce86ed4c25a3346e77198f1/lib/guardian/category_guardian.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2aec92d0b4262a58cce86ed4c25a3346e77198f1/lib/guardian/category_guardian.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/guardian/category_guardian.rb?ref=2aec92d0b4262a58cce86ed4c25a3346e77198f1",
      "patch": "@@ -54,6 +54,10 @@ def can_see_category?(category)\n     secure_category_ids.include?(category.id)\n   end\n \n+  def can_edit_category_description?(category)\n+    can_perform_action_available_to_group_moderators?(category.topic)\n+  end\n+\n   def secure_category_ids\n     @secure_category_ids ||= @user.secure_category_ids\n   end"
    },
    {
      "sha": "2827f5462bf4eb036853d6fddd17963eff734244",
      "filename": "lib/guardian/post_guardian.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/2aec92d0b4262a58cce86ed4c25a3346e77198f1/lib/guardian/post_guardian.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2aec92d0b4262a58cce86ed4c25a3346e77198f1/lib/guardian/post_guardian.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/guardian/post_guardian.rb?ref=2aec92d0b4262a58cce86ed4c25a3346e77198f1",
      "patch": "@@ -161,6 +161,10 @@ def can_edit_post?(post)\n       return !post.edit_time_limit_expired?(@user)\n     end\n \n+    if post.is_category_description?\n+      return true if can_edit_category_description?(post.topic.category)\n+    end\n+\n     false\n   end\n "
    },
    {
      "sha": "0b7a6502f1db31486c10cdbd1a503dfb3b19e0e5",
      "filename": "lib/post_revisor.rb",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/2aec92d0b4262a58cce86ed4c25a3346e77198f1/lib/post_revisor.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2aec92d0b4262a58cce86ed4c25a3346e77198f1/lib/post_revisor.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/post_revisor.rb?ref=2aec92d0b4262a58cce86ed4c25a3346e77198f1",
      "patch": "@@ -192,8 +192,13 @@ def revise!(editor, fields, opts = {})\n       PostLocker.new(@post, @editor).lock\n     end\n \n-    # We log staff edits to posts\n-    if @editor.staff? && @editor.id != @post.user_id && @fields.has_key?('raw') && !@opts[:skip_staff_log]\n+    # We log staff/group moderator edits to posts\n+    if (\n+      (@editor.staff? || (@post.is_category_description? && Guardian.new(@editor).can_edit_category_description?(@post.topic.category))) &&\n+      @editor.id != @post.user_id &&\n+      @fields.has_key?('raw') &&\n+      !@opts[:skip_staff_log]\n+    )\n       StaffActionLogger.new(@editor).log_post_edit(\n         @post,\n         old_raw: old_raw"
    },
    {
      "sha": "bb8c07517569286748db6094c30fb1b008c776a2",
      "filename": "spec/components/post_revisor_spec.rb",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/discourse/discourse/blob/2aec92d0b4262a58cce86ed4c25a3346e77198f1/spec/components/post_revisor_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2aec92d0b4262a58cce86ed4c25a3346e77198f1/spec/components/post_revisor_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/post_revisor_spec.rb?ref=2aec92d0b4262a58cce86ed4c25a3346e77198f1",
      "patch": "@@ -598,6 +598,28 @@\n       end\n     end\n \n+    context \"logging group moderator edits\" do\n+      fab!(:group_user) { Fabricate(:group_user) }\n+      fab!(:category) { Fabricate(:category, reviewable_by_group_id: group_user.group.id, topic: topic) }\n+\n+      before do\n+        SiteSetting.enable_category_group_moderation = true\n+        topic.update!(category: category)\n+        post.update!(topic: topic)\n+      end\n+\n+      it \"logs an edit when a group moderator revises the category description\" do\n+        PostRevisor.new(post).revise!(group_user.user, raw: \"a group moderator can update the description\")\n+\n+        log = UserHistory.where(\n+          acting_user_id: group_user.user.id,\n+          action: UserHistory.actions[:post_edit]\n+        ).first\n+        expect(log).to be_present\n+        expect(log.details).to eq(\"Hello world\\n\\n---\\n\\na group moderator can update the description\")\n+      end\n+    end\n+\n     context \"staff_edit_locks_post\" do\n \n       context \"disabled\" do"
    },
    {
      "sha": "6622b42acf6d7c7e37f33a8e5dc38bfdf6f824ee",
      "filename": "spec/requests/posts_controller_spec.rb",
      "status": "modified",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/discourse/discourse/blob/2aec92d0b4262a58cce86ed4c25a3346e77198f1/spec/requests/posts_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2aec92d0b4262a58cce86ed4c25a3346e77198f1/spec/requests/posts_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/posts_controller_spec.rb?ref=2aec92d0b4262a58cce86ed4c25a3346e77198f1",
      "patch": "@@ -426,6 +426,53 @@\n       end\n     end\n \n+    describe \"when logged in as group moderator\" do\n+      fab!(:topic) { Fabricate(:topic, category: category) }\n+      fab!(:post) { Fabricate(:post, user: user, topic: topic) }\n+      fab!(:group_user) { Fabricate(:group_user) }\n+      let(:user_gm) { group_user.user }\n+      let(:group) { group_user.group }\n+\n+      before do\n+        SiteSetting.enable_category_group_moderation = true\n+        post.topic.category.update!(reviewable_by_group_id: group.id, topic_id: topic.id)\n+        sign_in(user_gm)\n+      end\n+\n+      it \"allows updating the category description\" do\n+        put \"/posts/#{post.id}.json\", params: update_params\n+        expect(response.status).to eq(200)\n+\n+        post.reload\n+        expect(post.raw).to eq('edited body')\n+        expect(UserHistory.where(action: UserHistory.actions[:post_edit]).count).to eq(1)\n+      end\n+\n+      it \"can not update other posts within the primary category topic\" do\n+        second_post = Fabricate(:post, user: user, topic: topic)\n+\n+        put \"/posts/#{second_post.id}.json\", params: update_params\n+        expect(response.status).to eq(403)\n+      end\n+\n+      it \"can not update other first posts of topics in the same category\" do\n+        second_topic_in_category = Fabricate(:topic, category: category)\n+        post_in_second_topic = Fabricate(:post, user: user, topic: second_topic_in_category)\n+\n+        put \"/posts/#{post_in_second_topic.id}.json\", params: update_params\n+        expect(response.status).to eq(403)\n+      end\n+\n+      it \"can not update category descriptions in other categories\" do\n+        second_category = Fabricate(:category)\n+        topic.update!(category: second_category)\n+\n+        put \"/posts/#{post.id}.json\", params: update_params\n+        expect(response.status).to eq(403)\n+      end\n+\n+    end\n+\n     it 'can not change category to a disallowed category' do\n       post = create_post\n       sign_in(post.user)"
    },
    {
      "sha": "097298488904d60fffa291143fca4264cb4efe21",
      "filename": "spec/services/staff_action_logger_spec.rb",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/discourse/discourse/blob/2aec92d0b4262a58cce86ed4c25a3346e77198f1/spec/services/staff_action_logger_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2aec92d0b4262a58cce86ed4c25a3346e77198f1/spec/services/staff_action_logger_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/services/staff_action_logger_spec.rb?ref=2aec92d0b4262a58cce86ed4c25a3346e77198f1",
      "patch": "@@ -595,4 +595,26 @@\n     end\n   end\n \n+  describe 'log_post_staff_note' do\n+    fab!(:post) { Fabricate(:post) }\n+\n+    it \"raises an error when argument is missing\" do\n+      expect { logger.log_topic_archived(nil) }.to raise_error(Discourse::InvalidParameters)\n+    end\n+\n+    it \"creates a new UserHistory record\" do\n+      expect { logger.log_post_staff_note(post, { new_raw_value: 'my note', old_value: nil }) }.to change { UserHistory.count }.by(1)\n+      user_history = UserHistory.last\n+      expect(user_history.action).to eq(UserHistory.actions[:post_staff_note_create])\n+      expect(user_history.new_value).to eq('my note')\n+      expect(user_history.previous_value).to eq(nil)\n+\n+      expect { logger.log_post_staff_note(post, { new_raw_value: nil, old_value: 'my note' }) }.to change { UserHistory.count }.by(1)\n+      user_history = UserHistory.last\n+      expect(user_history.action).to eq(UserHistory.actions[:post_staff_note_destroy])\n+      expect(user_history.new_value).to eq(nil)\n+      expect(user_history.previous_value).to eq('my note')\n+    end\n+  end\n+\n end"
    },
    {
      "sha": "c17e96bb7fa62b97f8e5b5026c1ee34a5c50b396",
      "filename": "test/javascripts/acceptance/post-admin-menu-test.js",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/2aec92d0b4262a58cce86ed4c25a3346e77198f1/test/javascripts/acceptance/post-admin-menu-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/2aec92d0b4262a58cce86ed4c25a3346e77198f1/test/javascripts/acceptance/post-admin-menu-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/acceptance/post-admin-menu-test.js?ref=2aec92d0b4262a58cce86ed4c25a3346e77198f1",
      "patch": "@@ -7,6 +7,7 @@ QUnit.test(\"Enter as a anon user\", async assert => {\n   await click(\".show-more-actions\");\n \n   assert.ok(exists(\"#topic\"), \"The topic was rendered\");\n+  assert.ok(exists(\"#post_1 .post-controls .edit\"), \"The edit button was not rendered\");\n   assert.ok(!exists(\".show-post-admin-menu\"), \"The wrench button was not rendered\");\n });\n \n@@ -17,5 +18,6 @@ QUnit.test(\"Enter as a user with group moderator permissions\", async assert => {\n   await click(\".show-more-actions\");\n   await click(\".show-post-admin-menu\");\n \n+  assert.ok(exists(\"#post_1 .post-controls .edit\"), \"The edit button was rendered\");\n   assert.ok(exists(\".add-notice\"), \"The add notice button was rendered\");\n });"
    }
  ]
}
