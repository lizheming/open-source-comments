{
  "sha": "807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjgwNzE2MGRjZjYzMDNiN2Q4NWJjYTljNzhkY2Q2Zjk4OWRkOGQ0ZDU=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-02-15T19:14:23Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-02-15T19:14:23Z"
    },
    "message": "prep admin to support multiple keys, per aud (siteID)",
    "tree": {
      "sha": "241971273ebbec36af30a5cd278e952e78864eed",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/241971273ebbec36af30a5cd278e952e78864eed"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
  "html_url": "https://github.com/umputun/remark42/commit/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a50adc823b9a6cffe271fd4ddaa3487bd2c21668",
      "url": "https://api.github.com/repos/umputun/remark42/commits/a50adc823b9a6cffe271fd4ddaa3487bd2c21668",
      "html_url": "https://github.com/umputun/remark42/commit/a50adc823b9a6cffe271fd4ddaa3487bd2c21668"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 22,
    "deletions": 17
  },
  "files": [
    {
      "sha": "95a6fde78123fca005a6c70a728e1a110cf732e6",
      "filename": "backend/_example/memory_store/accessor/admin.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/_example/memory_store/accessor/admin.go",
      "raw_url": "https://github.com/umputun/remark42/raw/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/_example/memory_store/accessor/admin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/_example/memory_store/accessor/admin.go?ref=807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
      "patch": "@@ -35,7 +35,7 @@ func NewMemAdminStore(key string) *MemAdmin {\n }\n \n // Key executes find by siteID and returns substructure with secret key\n-func (m *MemAdmin) Key() (key string, err error) {\n+func (m *MemAdmin) Key(_ string) (key string, err error) {\n \treturn m.key, nil\n }\n "
    },
    {
      "sha": "7dc31be99ba15ae74356f9d47427dcd1c2826414",
      "filename": "backend/_example/memory_store/accessor/admin_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/_example/memory_store/accessor/admin_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/_example/memory_store/accessor/admin_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/_example/memory_store/accessor/admin_test.go?ref=807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
      "patch": "@@ -31,7 +31,7 @@ func TestMemAdmin_Get(t *testing.T) {\n \temail, err := ms.Email(\"site1\")\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"e1\", email)\n-\tkey, err := ms.Key()\n+\tkey, err := ms.Key(\"any\")\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"secret\", key)\n \n@@ -41,7 +41,7 @@ func TestMemAdmin_Get(t *testing.T) {\n \temail, err = ms.Email(\"site2\")\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"e2\", email)\n-\tkey, err = ms.Key()\n+\tkey, err = ms.Key(\"any\")\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"secret\", key)\n "
    },
    {
      "sha": "70b8441e6ab7f4590c7c617cf9c7eb3c926d6f3a",
      "filename": "backend/_example/memory_store/server/admin.go",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/_example/memory_store/server/admin.go",
      "raw_url": "https://github.com/umputun/remark42/raw/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/_example/memory_store/server/admin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/_example/memory_store/server/admin.go?ref=807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
      "patch": "@@ -15,8 +15,13 @@ import (\n )\n \n // get admin key\n-func (s *RPC) admKeyHndl(id uint64, _ json.RawMessage) (rr jrpc.Response) {\n-\tkey, err := s.adm.Key()\n+func (s *RPC) admKeyHndl(id uint64, params json.RawMessage) (rr jrpc.Response) {\n+\tvar siteID string\n+\tif err := json.Unmarshal(params, &siteID); err != nil {\n+\t\treturn jrpc.Response{Error: err.Error()}\n+\t}\n+\n+\tkey, err := s.adm.Key(siteID)\n \tif err != nil {\n \t\treturn jrpc.Response{Error: err.Error()}\n \t}"
    },
    {
      "sha": "dd2a75dc962ad330bb662c1aa73e86fd5851725f",
      "filename": "backend/_example/memory_store/server/admin_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/_example/memory_store/server/admin_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/_example/memory_store/server/admin_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/_example/memory_store/server/admin_test.go?ref=807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
      "patch": "@@ -24,7 +24,7 @@ func TestRPC_admKeyHndl(t *testing.T) {\n \tapi := fmt.Sprintf(\"http://localhost:%d/test\", port)\n \n \tra := admin.RPC{Client: jrpc.Client{API: api, Client: http.Client{Timeout: 1 * time.Second}}}\n-\tkey, err := ra.Key()\n+\tkey, err := ra.Key(\"any\")\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"secret\", key)\n }"
    },
    {
      "sha": "be3bc806028af18fee3f464019197bd6193edf58",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark42/raw/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server.go?ref=807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
      "patch": "@@ -908,7 +908,7 @@ func (s *ServerCommand) makeAuthenticator(ds *service.DataStore, avas avatar.Sto\n \t\tSameSiteCookie: s.parseSameSite(s.Auth.SameSite),\n \t\tSecureCookies:  strings.HasPrefix(s.RemarkURL, \"https://\"),\n \t\tSecretReader: token.SecretFunc(func(aud string) (string, error) { // get secret per site\n-\t\t\treturn admns.Key()\n+\t\t\treturn admns.Key(\"\")\n \t\t}),\n \t\tClaimsUpd: token.ClaimsUpdFunc(func(c token.Claims) token.Claims { // set attributes, on new token or refresh\n \t\t\tif c.User == nil {"
    },
    {
      "sha": "4f97812c22aa907dbdcfeb10395341dd326d4015",
      "filename": "backend/app/rest/api/migrator.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/rest/api/migrator.go",
      "raw_url": "https://github.com/umputun/remark42/raw/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/rest/api/migrator.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/migrator.go?ref=807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
      "patch": "@@ -37,7 +37,7 @@ type Migrator struct {\n \n // KeyStore defines sub-interface for consumers needed just a key\n type KeyStore interface {\n-\tKey() (key string, err error)\n+\tKey(siteID string) (key string, err error)\n }\n \n // POST /import?secret=key&site=site-id&provider=disqus|remark|wordpress"
    },
    {
      "sha": "7a023ada7a8c9cb28eed0444460f0039f52c698d",
      "filename": "backend/app/store/admin/admin.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/store/admin/admin.go",
      "raw_url": "https://github.com/umputun/remark42/raw/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/store/admin/admin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/admin/admin.go?ref=807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
      "patch": "@@ -10,7 +10,7 @@ import (\n \n // Store defines interface returning admins info for given site\n type Store interface {\n-\tKey() (key string, err error)\n+\tKey(siteID string) (key string, err error)\n \tAdmins(siteID string) (ids []string, err error)\n \tEmail(siteID string) (email string, err error)\n \tEnabled(siteID string) (ok bool, err error)\n@@ -48,7 +48,7 @@ func NewStaticKeyStore(key string) *StaticStore {\n }\n \n // Key returns static key, same for all sites\n-func (s *StaticStore) Key() (key string, err error) {\n+func (s *StaticStore) Key(_ string) (key string, err error) {\n \tif s.key == \"\" {\n \t\treturn \"\", errors.New(\"empty key for static key store\")\n \t}"
    },
    {
      "sha": "1809c1a199df5886043b145e1efdb2953dca2a94",
      "filename": "backend/app/store/admin/admin_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/store/admin/admin_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/store/admin/admin_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/admin/admin_test.go?ref=807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
      "patch": "@@ -10,7 +10,7 @@ func TestStaticStore_Get(t *testing.T) {\n \tvar ks Store = NewStaticStore(\"key123\", []string{\"s1\", \"s2\", \"s3\"},\n \t\t[]string{\"123\", \"xyz\"}, \"aa@example.com\")\n \n-\tk, err := ks.Key()\n+\tk, err := ks.Key(\"any\")\n \tassert.NoError(t, err, \"valid store\")\n \tassert.Equal(t, \"key123\", k, \"valid site\")\n "
    },
    {
      "sha": "8cde62f1030af355a6ba499e17238d4fa17f4296",
      "filename": "backend/app/store/admin/remote.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/store/admin/remote.go",
      "raw_url": "https://github.com/umputun/remark42/raw/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/store/admin/remote.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/admin/remote.go?ref=807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
      "patch": "@@ -18,8 +18,8 @@ type RPC struct {\n }\n \n // Key returns the key, same for all sites\n-func (r *RPC) Key() (key string, err error) {\n-\tresp, err := r.Call(\"admin.key\")\n+func (r *RPC) Key(siteID string) (key string, err error) {\n+\tresp, err := r.Call(\"admin.key\", siteID)\n \tif err != nil {\n \t\treturn \"\", err\n \t}"
    },
    {
      "sha": "e8cd020eac4a2147dfaf1e4ff07e562115bb221c",
      "filename": "backend/app/store/admin/remote_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/store/admin/remote_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/store/admin/remote_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/admin/remote_test.go?ref=807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
      "patch": "@@ -19,15 +19,15 @@ import (\n )\n \n func TestRemote_Key(t *testing.T) {\n-\tts := testServer(t, `{\"method\":\"admin.key\",\"id\":1}`,\n-\t\t`{\"result\":\"12345\",\"id\":1}`)\n+\tts := testServer(t, `{\"method\":\"admin.key\",\"params\":\"any\",\"id\":1}`,\n+\t\t`{\"result\":\"12345\",\"params\":\"any\",\"id\":1}`)\n \tdefer ts.Close()\n \tc := RPC{Client: jrpc.Client{API: ts.URL, Client: http.Client{}}}\n \n \tvar a Store = &c\n \t_ = a\n \n-\tres, err := c.Key()\n+\tres, err := c.Key(\"any\")\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"12345\", res)\n \tt.Logf(\"%v %T\", res, res)"
    },
    {
      "sha": "70bacd4068aeb18b29eaa38da77635552c6d7981",
      "filename": "backend/app/store/service/service.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/store/service/service.go",
      "raw_url": "https://github.com/umputun/remark42/raw/807160dcf6303b7d85bca9c78dcd6f989dd8d4d5/backend/app/store/service/service.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/service/service.go?ref=807160dcf6303b7d85bca9c78dcd6f989dd8d4d5",
      "patch": "@@ -949,7 +949,7 @@ func (s *DataStore) prepVotes(c store.Comment, user store.User) store.Comment {\n // Note: secret shared across sites, but some sites can be disabled.\n func (s *DataStore) getSecret(siteID string) (secret string, err error) {\n \n-\tif secret, err = s.AdminStore.Key(); err != nil {\n+\tif secret, err = s.AdminStore.Key(\"any\"); err != nil {\n \t\treturn \"\", errors.Wrapf(err, \"can't get secret for site %s\", siteID)\n \t}\n "
    }
  ]
}
