{
  "sha": "13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODoxM2QyYTFmODJjMjVlMTZmOTZhYzNiZGFkNjdmNDM2OWUzZDQzYTYx",
  "commit": {
    "author": {
      "name": "David Taylor",
      "email": "david@taylorhq.com",
      "date": "2021-02-18T10:35:10Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-02-18T10:35:10Z"
    },
    "message": "SECURITY: Attach DiscourseConnect (SSO) nonce to current session (#12124)",
    "tree": {
      "sha": "c61e266cf4a55f922ce06814ac4939532fe98616",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/c61e266cf4a55f922ce06814ac4939532fe98616"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLkLeCRBK7hj4Ov3rIwAAdHIIAFM+7s9JrlrxHXsKVu9YPDcK\nSFyLB194FAOLjpxZ1Gih+hmevFNNSd2nTxHTEA+Igz5XAohs+UiXgHDUVVquuTVo\nqfIPqUZphiEfCjpYp1tgYUW5oazP+SADDd6hXwTY4Nu3gMc4hcBNoP1RgPJryu5P\nR4aSwOVXN6NhgKkO6LDBe73YyuhqKXE7+chLiPuK5jGCV8h3JIxT6XiP94b2xeDA\n+Tziu017/XZ8dJspIFTJukBsUEJqijYxRjvqiPE09NHVDXKyYxko2nF5W4KUH0Uo\nnKbJbfYg2DljUGogsF7gK21stx+IVnpEjO6Scb0F4ND8cnULDRJ8SDzQTv/Jl88=\n=5geC\n-----END PGP SIGNATURE-----\n",
      "payload": "tree c61e266cf4a55f922ce06814ac4939532fe98616\nparent 2f4630742c6e8f4df92f859e2843071c9a75ca74\nauthor David Taylor <david@taylorhq.com> 1613644510 +0000\ncommitter GitHub <noreply@github.com> 1613644510 +0000\n\nSECURITY: Attach DiscourseConnect (SSO) nonce to current session (#12124)\n\n"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
  "html_url": "https://github.com/discourse/discourse/commit/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/comments",
  "author": {
    "login": "davidtaylorhq",
    "id": 6270921,
    "node_id": "MDQ6VXNlcjYyNzA5MjE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6270921?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davidtaylorhq",
    "html_url": "https://github.com/davidtaylorhq",
    "followers_url": "https://api.github.com/users/davidtaylorhq/followers",
    "following_url": "https://api.github.com/users/davidtaylorhq/following{/other_user}",
    "gists_url": "https://api.github.com/users/davidtaylorhq/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davidtaylorhq/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davidtaylorhq/subscriptions",
    "organizations_url": "https://api.github.com/users/davidtaylorhq/orgs",
    "repos_url": "https://api.github.com/users/davidtaylorhq/repos",
    "events_url": "https://api.github.com/users/davidtaylorhq/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davidtaylorhq/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2f4630742c6e8f4df92f859e2843071c9a75ca74",
      "url": "https://api.github.com/repos/discourse/discourse/commits/2f4630742c6e8f4df92f859e2843071c9a75ca74",
      "html_url": "https://github.com/discourse/discourse/commit/2f4630742c6e8f4df92f859e2843071c9a75ca74"
    }
  ],
  "stats": {
    "total": 115,
    "additions": 74,
    "deletions": 41
  },
  "files": [
    {
      "sha": "69dfc97392e5116a66d049bd234884c7d71a7879",
      "filename": "app/controllers/admin/users_controller.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/app/controllers/admin/users_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/app/controllers/admin/users_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/admin/users_controller.rb?ref=13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
      "patch": "@@ -442,7 +442,7 @@ def sync_sso\n     return render body: nil, status: 404 unless SiteSetting.enable_discourse_connect\n \n     begin\n-      sso = DiscourseSingleSignOn.parse(\"sso=#{params[:sso]}&sig=#{params[:sig]}\")\n+      sso = DiscourseSingleSignOn.parse(\"sso=#{params[:sso]}&sig=#{params[:sig]}\", secure_session: secure_session)\n     rescue DiscourseSingleSignOn::ParseError => e\n       return render json: failed_json.merge(message: I18n.t(\"discourse_connect.login_error\")), status: 422\n     end"
    },
    {
      "sha": "1b5cf7c27619cfe8e12ca5a06db1a08b132da0b6",
      "filename": "app/controllers/session_controller.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/app/controllers/session_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/app/controllers/session_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/session_controller.rb?ref=13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
      "patch": "@@ -25,7 +25,7 @@ def sso\n     cookies.delete(:destination_url)\n \n     if SiteSetting.enable_discourse_connect?\n-      sso = DiscourseSingleSignOn.generate_sso(return_path)\n+      sso = DiscourseSingleSignOn.generate_sso(return_path, secure_session: secure_session)\n       if SiteSetting.verbose_discourse_connect_logging\n         Rails.logger.warn(\"Verbose SSO log: Started SSO process\\n\\n#{sso.diagnostics}\")\n       end\n@@ -144,7 +144,7 @@ def sso_login\n     params.require(:sig)\n \n     begin\n-      sso = DiscourseSingleSignOn.parse(request.query_string)\n+      sso = DiscourseSingleSignOn.parse(request.query_string, secure_session: secure_session)\n     rescue DiscourseSingleSignOn::ParseError => e\n       if SiteSetting.verbose_discourse_connect_logging\n         Rails.logger.warn(\"Verbose SSO log: Signature parse error\\n\\n#{e.message}\\n\\n#{sso&.diagnostics}\")"
    },
    {
      "sha": "3daa48dee36418dca978421bf822ab9a075a6846",
      "filename": "app/models/discourse_single_sign_on.rb",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/discourse/discourse/blob/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/app/models/discourse_single_sign_on.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/app/models/discourse_single_sign_on.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/discourse_single_sign_on.rb?ref=13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
      "patch": "@@ -13,35 +13,39 @@ def self.sso_secret\n     SiteSetting.discourse_connect_secret\n   end\n \n-  def self.generate_sso(return_path = \"/\")\n-    sso = new\n+  def self.generate_sso(return_path = \"/\", secure_session:)\n+    sso = new(secure_session: secure_session)\n     sso.nonce = SecureRandom.hex\n     sso.register_nonce(return_path)\n     sso.return_sso_url = Discourse.base_url + \"/session/sso_login\"\n     sso\n   end\n \n-  def self.generate_url(return_path = \"/\")\n-    generate_sso(return_path).to_url\n+  def self.generate_url(return_path = \"/\", secure_session:)\n+    generate_sso(return_path, secure_session: secure_session).to_url\n+  end\n+\n+  def initialize(secure_session:)\n+    @secure_session = secure_session\n   end\n \n   def register_nonce(return_path)\n     if nonce\n-      Discourse.cache.write(nonce_key, return_path, expires_in: SingleSignOn.nonce_expiry_time)\n+      @secure_session.set(nonce_key, return_path, expires: SingleSignOn.nonce_expiry_time)\n     end\n   end\n \n   def nonce_valid?\n-    nonce && Discourse.cache.read(nonce_key).present?\n+    nonce && @secure_session[nonce_key].present?\n   end\n \n   def return_path\n-    Discourse.cache.read(nonce_key) || \"/\"\n+    @secure_session[nonce_key] || \"/\"\n   end\n \n   def expire_nonce!\n     if nonce\n-      Discourse.cache.delete nonce_key\n+      @secure_session[nonce_key] = nil\n     end\n   end\n "
    },
    {
      "sha": "729b3df20063ca5ea860286175017999463d0551",
      "filename": "lib/single_sign_on.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/lib/single_sign_on.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/lib/single_sign_on.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/single_sign_on.rb?ref=13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
      "patch": "@@ -61,8 +61,8 @@ def self.sso_url\n     raise RuntimeError, \"sso_url not implemented on class, be sure to set it on instance\"\n   end\n \n-  def self.parse(payload, sso_secret = nil)\n-    sso = new\n+  def self.parse(payload, sso_secret = nil, **init_kwargs)\n+    sso = new(**init_kwargs)\n     sso.sso_secret = sso_secret if sso_secret\n \n     parsed = Rack::Utils.parse_query(payload)"
    },
    {
      "sha": "edf3b856abcd71f64558b28e8240dc07ca268778",
      "filename": "spec/models/discourse_single_sign_on_spec.rb",
      "status": "modified",
      "additions": 30,
      "deletions": 25,
      "changes": 55,
      "blob_url": "https://github.com/discourse/discourse/blob/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/spec/models/discourse_single_sign_on_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/spec/models/discourse_single_sign_on_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/discourse_single_sign_on_spec.rb?ref=13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
      "patch": "@@ -37,6 +37,10 @@ def make_sso\n     sso\n   end\n \n+  def new_discourse_sso\n+    DiscourseSingleSignOn.new(secure_session: secure_session)\n+  end\n+\n   def test_parsed(parsed, sso)\n     expect(parsed.nonce).to eq sso.nonce\n     expect(parsed.email).to eq sso.email\n@@ -72,9 +76,10 @@ def test_parsed(parsed, sso)\n   end\n \n   let(:ip_address) { \"127.0.0.1\" }\n+  let(:secure_session) { SecureSession.new(\"abc\") }\n \n   it \"bans bad external id\" do\n-    sso = DiscourseSingleSignOn.new\n+    sso = new_discourse_sso\n     sso.username = \"test\"\n     sso.name = \"\"\n     sso.email = \"test@test.com\"\n@@ -102,7 +107,7 @@ def test_parsed(parsed, sso)\n   end\n \n   it \"can lookup or create user when name is blank\" do\n-    sso = DiscourseSingleSignOn.new\n+    sso = new_discourse_sso\n     sso.username = \"test\"\n     sso.name = \"\"\n     sso.email = \"test@test.com\"\n@@ -119,7 +124,7 @@ def test_parsed(parsed, sso)\n     email = \"staged@user.com\"\n     Fabricate(:user, staged: true, email: email)\n \n-    sso = DiscourseSingleSignOn.new\n+    sso = new_discourse_sso\n     sso.username = \"staged\"\n     sso.name = \"Bob O'Bob\"\n     sso.email = email\n@@ -136,7 +141,7 @@ def test_parsed(parsed, sso)\n \n   context \"reviewables\" do\n     let(:sso) do\n-      DiscourseSingleSignOn.new.tap do |sso|\n+      new_discourse_sso.tap do |sso|\n         sso.username = \"staged\"\n         sso.name = \"Bob O'Bob\"\n         sso.email = \"bob@obob.com\"\n@@ -164,7 +169,7 @@ def test_parsed(parsed, sso)\n     mod_group = Group[:moderators]\n     staff_group = Group[:staff]\n \n-    sso = DiscourseSingleSignOn.new\n+    sso = new_discourse_sso\n     sso.username = \"misteradmin\"\n     sso.name = \"Bob Admin\"\n     sso.email = \"admin@admin.com\"\n@@ -186,7 +191,7 @@ def test_parsed(parsed, sso)\n     group1 = Fabricate(:group, name: 'group1')\n     group2 = Fabricate(:group, name: 'group2')\n \n-    sso = DiscourseSingleSignOn.new\n+    sso = new_discourse_sso\n     sso.username = \"bobsky\"\n     sso.name = \"Bob\"\n     sso.email = user.email\n@@ -232,7 +237,7 @@ def test_parsed(parsed, sso)\n     add_group1.add(user)\n     existing_group.save!\n \n-    sso = DiscourseSingleSignOn.new\n+    sso = new_discourse_sso\n     sso.username = \"bobsky\"\n     sso.name = \"Bob\"\n     sso.email = user.email\n@@ -262,7 +267,7 @@ def test_parsed(parsed, sso)\n   it 'can override username properly when only the case changes' do\n     SiteSetting.auth_overrides_username = true\n \n-    sso = DiscourseSingleSignOn.new\n+    sso = new_discourse_sso\n     sso.username = \"testuser\"\n     sso.name = \"test user\"\n     sso.email = \"test@test.com\"\n@@ -283,7 +288,7 @@ def test_parsed(parsed, sso)\n   it 'behaves properly when auth_overrides_username is set but username is missing or blank' do\n     SiteSetting.auth_overrides_username = true\n \n-    sso = DiscourseSingleSignOn.new\n+    sso = new_discourse_sso\n     sso.username = \"testuser\"\n     sso.name = \"test user\"\n     sso.email = \"test@test.com\"\n@@ -314,7 +319,7 @@ def test_parsed(parsed, sso)\n     SiteSetting.auth_overrides_email = true\n     SiteSetting.auth_overrides_username = true\n \n-    sso = DiscourseSingleSignOn.new\n+    sso = new_discourse_sso\n     sso.username = \"bob%the$admin\"\n     sso.name = \"Bob Admin\"\n     sso.email = admin.email\n@@ -365,9 +370,9 @@ def test_parsed(parsed, sso)\n   end\n \n   it \"validates nonce\" do\n-    _ , payload = DiscourseSingleSignOn.generate_url.split(\"?\")\n+    _ , payload = DiscourseSingleSignOn.generate_url(secure_session: secure_session).split(\"?\")\n \n-    sso = DiscourseSingleSignOn.parse(payload)\n+    sso = DiscourseSingleSignOn.parse(payload, secure_session: secure_session)\n     expect(sso.nonce_valid?).to eq true\n \n     sso.expire_nonce!\n@@ -377,18 +382,18 @@ def test_parsed(parsed, sso)\n   end\n \n   it \"generates a correct sso url\" do\n-    url, payload = DiscourseSingleSignOn.generate_url.split(\"?\")\n+    url, payload = DiscourseSingleSignOn.generate_url(secure_session: secure_session).split(\"?\")\n     expect(url).to eq @discourse_connect_url\n \n-    sso = DiscourseSingleSignOn.parse(payload)\n+    sso = DiscourseSingleSignOn.parse(payload, secure_session: secure_session)\n     expect(sso.nonce).to_not be_nil\n   end\n \n   context 'user locale' do\n     it 'sets default user locale if specified' do\n       SiteSetting.allow_user_locale = true\n \n-      sso = DiscourseSingleSignOn.new\n+      sso = new_discourse_sso\n       sso.username = \"test\"\n       sso.name = \"test\"\n       sso.email = \"test@test.com\"\n@@ -416,7 +421,7 @@ def test_parsed(parsed, sso)\n \n   context 'trusting emails' do\n     let(:sso) do\n-      sso = DiscourseSingleSignOn.new\n+      sso = new_discourse_sso\n       sso.username = \"test\"\n       sso.name = \"test\"\n       sso.email = \"test@example.com\"\n@@ -489,7 +494,7 @@ def test_parsed(parsed, sso)\n \n   context 'welcome emails' do\n     let(:sso) {\n-      sso = DiscourseSingleSignOn.new\n+      sso = new_discourse_sso\n       sso.username = \"test\"\n       sso.name = \"test\"\n       sso.email = \"test@example.com\"\n@@ -511,7 +516,7 @@ def test_parsed(parsed, sso)\n \n   context 'setting title for a user' do\n     let(:sso) {\n-      sso = DiscourseSingleSignOn.new\n+      sso = new_discourse_sso\n       sso.username = 'test'\n       sso.name = 'test'\n       sso.email = 'test@test.com'\n@@ -538,7 +543,7 @@ def test_parsed(parsed, sso)\n \n   context 'setting bio for a user' do\n     let(:sso) do\n-      sso = DiscourseSingleSignOn.new\n+      sso = new_discourse_sso\n       sso.username = \"test\"\n       sso.name = \"test\"\n       sso.email = \"test@test.com\"\n@@ -578,7 +583,7 @@ def test_parsed(parsed, sso)\n   context 'when discourse_connect_overrides_avatar is not enabled' do\n \n     it \"correctly handles provided avatar_urls\" do\n-      sso = DiscourseSingleSignOn.new\n+      sso = new_discourse_sso\n       sso.external_id = 666\n       sso.email = \"sam@sam.com\"\n       sso.name = \"sam\"\n@@ -639,7 +644,7 @@ def test_parsed(parsed, sso)\n     fab!(:sso_record) { Fabricate(:single_sign_on_record, external_avatar_url: \"http://example.com/an_image.png\") }\n \n     let!(:sso) {\n-      sso = DiscourseSingleSignOn.new\n+      sso = new_discourse_sso\n       sso.username = \"test\"\n       sso.name = \"test\"\n       sso.email = sso_record.user.email\n@@ -686,7 +691,7 @@ def test_parsed(parsed, sso)\n   context 'when discourse_connect_overrides_profile_background is not enabled' do\n \n     it \"correctly handles provided profile_background_urls\" do\n-      sso = DiscourseSingleSignOn.new\n+      sso = new_discourse_sso\n       sso.external_id = 666\n       sso.email = \"sam@sam.com\"\n       sso.name = \"sam\"\n@@ -719,7 +724,7 @@ def test_parsed(parsed, sso)\n     fab!(:sso_record) { Fabricate(:single_sign_on_record, external_profile_background_url: \"http://example.com/an_image.png\") }\n \n     let!(:sso) {\n-      sso = DiscourseSingleSignOn.new\n+      sso = new_discourse_sso\n       sso.username = \"test\"\n       sso.name = \"test\"\n       sso.email = sso_record.user.email\n@@ -758,7 +763,7 @@ def test_parsed(parsed, sso)\n   context 'when discourse_connect_overrides_card_background is not enabled' do\n \n     it \"correctly handles provided card_background_urls\" do\n-      sso = DiscourseSingleSignOn.new\n+      sso = new_discourse_sso\n       sso.external_id = 666\n       sso.email = \"sam@sam.com\"\n       sso.name = \"sam\"\n@@ -791,7 +796,7 @@ def test_parsed(parsed, sso)\n     fab!(:sso_record) { Fabricate(:single_sign_on_record, external_card_background_url: \"http://example.com/an_image.png\") }\n \n     let!(:sso) {\n-      sso = DiscourseSingleSignOn.new\n+      sso = new_discourse_sso\n       sso.username = \"test\"\n       sso.name = \"test\"\n       sso.email = sso_record.user.email"
    },
    {
      "sha": "68d470eb7d9779f7921bc5a449231fab27134acc",
      "filename": "spec/requests/admin/users_controller_spec.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/spec/requests/admin/users_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/spec/requests/admin/users_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/admin/users_controller_spec.rb?ref=13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
      "patch": "@@ -877,7 +877,7 @@\n       sso.email = \"bob@bob.com\"\n       sso.external_id = \"1\"\n \n-      user = DiscourseSingleSignOn.parse(sso.payload).lookup_or_create_user\n+      user = DiscourseSingleSignOn.parse(sso.payload, secure_session: read_secure_session).lookup_or_create_user\n \n       sso.name = \"Bill\"\n       sso.username = \"Hokli$$!!\""
    },
    {
      "sha": "9fd1ae9edd0ce71932279c4f7306ca0eed09f556",
      "filename": "spec/requests/session_controller_spec.rb",
      "status": "modified",
      "additions": 17,
      "deletions": 2,
      "changes": 19,
      "blob_url": "https://github.com/discourse/discourse/blob/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/spec/requests/session_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/spec/requests/session_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/session_controller_spec.rb?ref=13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
      "patch": "@@ -533,7 +533,7 @@\n \n     def get_sso(return_path)\n       nonce = SecureRandom.hex\n-      dso = DiscourseSingleSignOn.new\n+      dso = DiscourseSingleSignOn.new(secure_session: read_secure_session)\n       dso.nonce = nonce\n       dso.register_nonce(return_path)\n \n@@ -682,7 +682,7 @@ def sso_for_ip_specs\n       ScreenedIpAddress.all.destroy_all\n       get \"/\"\n       sso = sso_for_ip_specs\n-      DiscourseSingleSignOn.parse(sso.payload).lookup_or_create_user(request.remote_ip)\n+      DiscourseSingleSignOn.parse(sso.payload, secure_session: read_secure_session).lookup_or_create_user(request.remote_ip)\n \n       sso = sso_for_ip_specs\n       _screened_ip = Fabricate(:screened_ip_address, ip_address: request.remote_ip, action_type: ScreenedIpAddress.actions[:block])\n@@ -891,6 +891,21 @@ def sso_for_ip_specs\n       expect(response.status).to eq(419)\n     end\n \n+    it 'associates the nonce with the current session' do\n+      sso = get_sso('/hello/world')\n+      sso.external_id = '997'\n+      sso.sso_url = \"http://somewhere.over.com/sso_login\"\n+\n+      user = Fabricate(:user)\n+      user.create_single_sign_on_record(external_id: '997', last_payload: '')\n+\n+      # Establish a fresh session\n+      cookies.to_hash.keys.each { |k| cookies.delete(k) }\n+\n+      get \"/session/sso_login\", params: Rack::Utils.parse_query(sso.payload), headers: headers\n+      expect(response.status).to eq(419)\n+    end\n+\n     context \"when sso provider is enabled\" do\n       before do\n         SiteSetting.enable_discourse_connect_provider = true"
    },
    {
      "sha": "182a5514ee41f9424a95459aef5e56ba19a44c12",
      "filename": "spec/support/integration_helpers.rb",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/spec/support/integration_helpers.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/13d2a1f82c25e16f96ac3bdad67f4369e3d43a61/spec/support/integration_helpers.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/support/integration_helpers.rb?ref=13d2a1f82c25e16f96ac3bdad67f4369e3d43a61",
      "patch": "@@ -35,6 +35,15 @@ def sign_out\n   end\n \n   def read_secure_session\n+    id = begin\n+      session[:secure_session_id]\n+    rescue NoMethodError\n+      nil\n+    end\n+\n+    # This route will init the secure_session for us\n+    get \"/session/hp.json\" if id.nil?\n+\n     SecureSession.new(session[:secure_session_id])\n   end\n end"
    }
  ]
}
