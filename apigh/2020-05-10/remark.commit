{
  "sha": "a8f3e1730bd12537c92e4ac96d234b85373548cd",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmE4ZjNlMTczMGJkMTI1MzdjOTJlNGFjOTZkMjM0Yjg1MzczNTQ4Y2Q=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-05-10T02:20:03Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-05-10T02:20:03Z"
    },
    "message": "update to lcw@master",
    "tree": {
      "sha": "6cffe0abdf91f7378190e5cb1332d628fae9a11f",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/6cffe0abdf91f7378190e5cb1332d628fae9a11f"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/a8f3e1730bd12537c92e4ac96d234b85373548cd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/a8f3e1730bd12537c92e4ac96d234b85373548cd",
  "html_url": "https://github.com/umputun/remark42/commit/a8f3e1730bd12537c92e4ac96d234b85373548cd",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/a8f3e1730bd12537c92e4ac96d234b85373548cd/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bbfeaeb3d00ee048bea4ec0758a5a978d41c9856",
      "url": "https://api.github.com/repos/umputun/remark42/commits/bbfeaeb3d00ee048bea4ec0758a5a978d41c9856",
      "html_url": "https://github.com/umputun/remark42/commit/bbfeaeb3d00ee048bea4ec0758a5a978d41c9856"
    }
  ],
  "stats": {
    "total": 1616,
    "additions": 1158,
    "deletions": 458
  },
  "files": [
    {
      "sha": "4fc05cbc214f6b6c468d734451475b50cb21cd72",
      "filename": "backend/go.mod",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/go.mod?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -14,7 +14,7 @@ require (\n \tgithub.com/go-chi/render v1.0.1\n \tgithub.com/go-pkgz/auth v0.10.1\n \tgithub.com/go-pkgz/jrpc v0.1.0\n-\tgithub.com/go-pkgz/lcw v0.5.0\n+\tgithub.com/go-pkgz/lcw v0.5.1-0.20200509170726-dc283cfc28cf\n \tgithub.com/go-pkgz/lgr v0.7.0\n \tgithub.com/go-pkgz/repeater v1.1.3\n \tgithub.com/go-pkgz/rest v1.5.0"
    },
    {
      "sha": "8c8b6532a6ebe9b18c948ce6273e367fb64fea31",
      "filename": "backend/go.sum",
      "status": "modified",
      "additions": 22,
      "deletions": 20,
      "changes": 42,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/go.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/go.sum?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -25,8 +25,8 @@ github.com/alecthomas/repr v0.0.0-20181024024818-d37bc2a10ba1 h1:GDQdwm/gAcJcLAK\n github.com/alecthomas/repr v0.0.0-20181024024818-d37bc2a10ba1/go.mod h1:xTS7Pm1pD1mvyM075QCDSRqH6qRLXylzS24ZTpRiSzQ=\n github.com/alicebob/gopher-json v0.0.0-20180125190556-5a6b3ba71ee6 h1:45bxf7AZMwWcqkLzDAQugVEwedisr5nRJ1r+7LYnv0U=\n github.com/alicebob/gopher-json v0.0.0-20180125190556-5a6b3ba71ee6/go.mod h1:SGnFV6hVsYE877CKEZ6tDNTjaSXYUk6QqoIK6PrAtcc=\n-github.com/alicebob/miniredis v2.5.0+incompatible h1:yBHoLpsyjupjz3NL3MhKMVkR41j82Yjf3KFv7ApYzUI=\n-github.com/alicebob/miniredis v2.5.0+incompatible/go.mod h1:8HZjEj4yU0dwhYHky+DxYx+6BMjkBbe5ONFIF1MXffk=\n+github.com/alicebob/miniredis/v2 v2.11.4 h1:GsuyeunTx7EllZBU3/6Ji3dhMQZDpC9rLf1luJ+6M5M=\n+github.com/alicebob/miniredis/v2 v2.11.4/go.mod h1:VL3UDEfAH59bSa7MuHMuFToxkqyHh69s/WUbYlOAuyg=\n github.com/andybalholm/cascadia v1.1.0 h1:BuuO6sSfQNFRu1LppgbD25Hr2vLYW25JvxHs5zzsLTo=\n github.com/andybalholm/cascadia v1.1.0/go.mod h1:GsXiBklL0woXo1j/WYWtSYYC4ouU9PqHO0sqidkEA4Y=\n github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\n@@ -68,8 +68,8 @@ github.com/go-pkgz/auth v0.10.1 h1:GYf64js5n/oVEPXhRShyDDiR/oahdZOMLbxmnnGX2IU=\n github.com/go-pkgz/auth v0.10.1/go.mod h1:wxyQqc0UUP1jT4l6zk1r6XPcVdcgIzW2OiQ8hBEHd64=\n github.com/go-pkgz/jrpc v0.1.0 h1:hNg/IyfEqJcSWOKkuHw0ZwcuGc9TDp7QZREsD2ycmiM=\n github.com/go-pkgz/jrpc v0.1.0/go.mod h1:JxZsvoBklA50DNhELVJnJ567Rt+KrMH9rR3u515wvE8=\n-github.com/go-pkgz/lcw v0.5.0 h1:dSf98y5067zRmBA6fo+gbqLGLy08RGUHoaecwtjDyOE=\n-github.com/go-pkgz/lcw v0.5.0/go.mod h1:CSdQRQthxJQ4iDD4wTPPuWFbFdknJzwJ8WXu1nfxb10=\n+github.com/go-pkgz/lcw v0.5.1-0.20200509170726-dc283cfc28cf h1:lUztZWD77zDSILb3DHCpIpHxLILUmAf15aYNAEbWtIM=\n+github.com/go-pkgz/lcw v0.5.1-0.20200509170726-dc283cfc28cf/go.mod h1:vovP88gZLeuIWn5cm0NlgPYFyGGkv3m2OcKMOOaHhj0=\n github.com/go-pkgz/lgr v0.7.0 h1:S/AAPwt/RE9a5mNJskA7dGVp+Dq6SMIW6LYjG3ITxY8=\n github.com/go-pkgz/lgr v0.7.0/go.mod h1:yMgxU+GobMRJgIEbSzDKy/67W18S7qmGx/7BVL5AB8Q=\n github.com/go-pkgz/repeater v1.1.3 h1:q6+JQF14ESSy28Dd7F+wRelY4F+41HJ0LEy/szNnMiE=\n@@ -80,8 +80,8 @@ github.com/go-pkgz/rest v1.5.0 h1:C8SxXcXza4GiUUAn/95iCkvoIrGbS30qpwK19iqlrWQ=\n github.com/go-pkgz/rest v1.5.0/go.mod h1:nQaM3RhSTUAmbBZWY4hfe4buyeC9VckvhoCktiQXJxI=\n github.com/go-pkgz/syncs v1.1.1 h1:jWN+y6FS/Xe+8z4l3QMbSnODGyaxDHGojIS+wyKIjxg=\n github.com/go-pkgz/syncs v1.1.1/go.mod h1:bt9lxWRRJ9vOCMGc8Big8ttjYHLKP88ofj1y38UlaHE=\n-github.com/go-redis/redis/v7 v7.0.0-beta.4 h1:p6z7Pde69EGRWvlC++y8aFcaWegyrKHzOBGo0zUACTQ=\n-github.com/go-redis/redis/v7 v7.0.0-beta.4/go.mod h1:xhhSbUMTsleRPur+Vgx9sUHtyN33bdjxY+9/0n9Ig8s=\n+github.com/go-redis/redis/v7 v7.2.0 h1:CrCexy/jYWZjW0AyVoHlcJUeZN19VWlbepTh1Vq6dJs=\n+github.com/go-redis/redis/v7 v7.2.0/go.mod h1:JDNMw23GTyLNC4GZu9njt15ctBQVn7xjRfnwdHj/Dcg=\n github.com/go-session/session v3.1.2+incompatible/go.mod h1:8B3iivBQjrz/JtC68Np2T1yBBLxTan3mn/3OM0CyRt0=\n github.com/go-stack/stack v1.8.0 h1:5SgMzNM5HxrEjV0ww2lTmX6E2Izsfxas4+YHWRs3Lsk=\n github.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\n@@ -97,8 +97,8 @@ github.com/golang/protobuf v1.3.2 h1:6nsPYzhq5kReh6QImI3k5qWzO4PEbvbIW2cwSfR/6xs\n github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\n github.com/golang/snappy v0.0.1 h1:Qgr9rKW7uDUkrbSmQeiDsGa8SjGyCOGtuasMWwvp2P4=\n github.com/golang/snappy v0.0.1/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\n-github.com/gomodule/redigo v2.0.0+incompatible h1:K/R+8tc58AaqLkqG2Ol3Qk+DR/TlNuhuh457pBFPtt0=\n-github.com/gomodule/redigo v2.0.0+incompatible/go.mod h1:B4C85qUVwatsJoIUNIfCRsp7qO0iAmpGFZ4EELWSbC4=\n+github.com/gomodule/redigo v1.7.1-0.20190322064113-39e2c31b7ca3 h1:6amM4HsNPOvMLVc2ZnyqrjeQ92YAVWn7T4WBKK87inY=\n+github.com/gomodule/redigo v1.7.1-0.20190322064113-39e2c31b7ca3/go.mod h1:B4C85qUVwatsJoIUNIfCRsp7qO0iAmpGFZ4EELWSbC4=\n github.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\n github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\n github.com/google/go-cmp v0.3.0 h1:crn/baboCvb5fXaQ0IJ1SGTsTVrWpDsCWC8EGETZijY=\n@@ -116,16 +116,14 @@ github.com/gorilla/feeds v1.1.1 h1:HwKXxqzcRNg9to+BbvJog4+f3s/xzvtZXICcQGutYfY=\n github.com/gorilla/feeds v1.1.1/go.mod h1:Nk0jZrvPFZX1OBe5NPiddPw7CfwF6Q9eqzaBbaightA=\n github.com/hashicorp/errwrap v1.0.0 h1:hLrqtEDnRye3+sgx6z4qVLNuviH3MR5aQ0ykNJa/UYA=\n github.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\n-github.com/hashicorp/go-multierror v1.0.0 h1:iVjPR7a6H0tWELX5NxNe7bYopibicUzc7uPribsnS6o=\n-github.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=\n github.com/hashicorp/go-multierror v1.1.0 h1:B9UzwGQJehnUY1yNrnwREHc3fGbC2xefo8g4TbElacI=\n github.com/hashicorp/go-multierror v1.1.0/go.mod h1:spPvp8C1qA32ftKqdAHm4hHTbPw+vmowP0z+KUhOZdA=\n github.com/hashicorp/golang-lru v0.5.0 h1:CL2msUPvZTLb5O648aiLNJw3hnBxN2+1Jq8rCOH9wdo=\n github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\n github.com/hashicorp/golang-lru v0.5.1 h1:0hERBMJE1eitiLkihrMvRVBYAkpHzc/J3QdDN+dAcgU=\n github.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\n-github.com/hashicorp/golang-lru v0.5.3 h1:YPkqC67at8FYaadspW/6uE0COsBxS2656RLEr8Bppgk=\n-github.com/hashicorp/golang-lru v0.5.3/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\n+github.com/hashicorp/golang-lru v0.5.4 h1:YDjusn29QI/Das2iO9M0BHnIbxPeyuCHsjMW+lJfyTc=\n+github.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\n github.com/hpcloud/tail v1.0.0 h1:nfCOvKYfkgYP8hkirhJocXT2+zOD8yUNjXaWfTlyFKI=\n github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\n github.com/imkira/go-interpol v1.1.0 h1:KIiKr0VSG2CUW1hl1jpiyuzuJeKUUpC8iM1AIE7N1Vk=\n@@ -159,11 +157,11 @@ github.com/nullrocks/identicon v0.0.0-20180626043057-7875f45b0022 h1:Ys0rDzh8s4U\n github.com/nullrocks/identicon v0.0.0-20180626043057-7875f45b0022/go.mod h1:x4NsS+uc7ecH/Cbm9xKQ6XzmJM57rWTkjywjfB2yQ18=\n github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n github.com/onsi/ginkgo v1.7.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n-github.com/onsi/ginkgo v1.8.0 h1:VkHVNpR4iVnU8XQR6DBm8BqYjN7CRzw+xKUbVVbbW9w=\n-github.com/onsi/ginkgo v1.8.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n+github.com/onsi/ginkgo v1.10.1 h1:q/mM8GF/n0shIN8SaAZ0V+jnLPzen6WIVZdiwrRlMlo=\n+github.com/onsi/ginkgo v1.10.1/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n github.com/onsi/gomega v1.4.3/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\n-github.com/onsi/gomega v1.5.0 h1:izbySO9zDPmjJ8rDjLvkA2zJHIo+HkYXHnf7eN7SSyo=\n-github.com/onsi/gomega v1.5.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\n+github.com/onsi/gomega v1.7.0 h1:XPnZz8VVBHjVsy1vzJmRwIcSwiUO+JFfrv/xGiigmME=\n+github.com/onsi/gomega v1.7.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\n github.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=\n github.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=\n github.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\n@@ -235,8 +233,8 @@ github.com/yudai/golcs v0.0.0-20170316035057-ecda9a501e82 h1:BHyfKlQyqbsFN5p3Ifn\n github.com/yudai/golcs v0.0.0-20170316035057-ecda9a501e82/go.mod h1:lgjkn3NuSvDfVJdfcVVdX+jpBxNmX4rDAzaS45IcYoM=\n github.com/yudai/pp v2.0.1+incompatible h1:Q4//iY4pNF6yPLZIigmvcl7k/bPgrcTPIFIcmawg5bI=\n github.com/yudai/pp v2.0.1+incompatible/go.mod h1:PuxR/8QJ7cyCkFp/aUDS+JY727OFEZkTdatxwunjIkc=\n-github.com/yuin/gopher-lua v0.0.0-20190514113301-1cd887cd7036 h1:1b6PAtenNyhsmo/NKXVe34h7JEZKva1YB/ne7K7mqKM=\n-github.com/yuin/gopher-lua v0.0.0-20190514113301-1cd887cd7036/go.mod h1:gqRgreBUhTSL0GeU64rtZ3Uq3wtjOa/TB2YfrtkCbVQ=\n+github.com/yuin/gopher-lua v0.0.0-20191220021717-ab39c6098bdb h1:ZkM6LRnq40pR1Ox0hTHlnpkcOTuFIDQpZ1IN8rKKhX0=\n+github.com/yuin/gopher-lua v0.0.0-20191220021717-ab39c6098bdb/go.mod h1:gqRgreBUhTSL0GeU64rtZ3Uq3wtjOa/TB2YfrtkCbVQ=\n go.etcd.io/bbolt v1.3.4 h1:hi1bXHMVrlQh6WwxAy+qZCV/SYIlqo+Ushwdpa4tAKg=\n go.etcd.io/bbolt v1.3.4/go.mod h1:G5EMThwa9y8QZGBClrRx5EY+Yw9kAhnjy3bSjsnlVTQ=\n go.mongodb.org/mongo-driver v1.1.1 h1:Sq1fR+0c58RME5EoqKdjkiQAmPjmfHlZOoRI6fTUOcs=\n@@ -271,9 +269,9 @@ golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn\n golang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\n golang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\n golang.org/x/net v0.0.0-20190611141213-3f473d35a33a/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n-golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/net v0.0.0-20190724013045-ca1201d0de80 h1:Ao/3l156eZf2AW5wK8a7/smtodRU+gha3+BeqJ69lRk=\n golang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n+golang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/net v0.0.0-20200202094626-16171245cfb2 h1:CCH4IOTTfewWjGOlSp+zGcjutRKlBEZQ6wTn8ozI/nI=\n golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\n@@ -297,7 +295,7 @@ golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5h\n golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n golang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n golang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n-golang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n+golang.org/x/sys v0.0.0-20191010194322-b09406accb47/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n golang.org/x/sys v0.0.0-20200202164722-d101bd2416d5 h1:LfCXLvNmTYH9kEmVgqbnsWfruoXZIrh4YBgqVHtDvw0=\n golang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n golang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=\n@@ -333,6 +331,8 @@ google.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiq\n gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\n gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\n+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n gopkg.in/fsnotify.v1 v1.4.7 h1:xOHLXZwVvI9hhs+cLKq5+I5onOuwQLhQwiu63xxlHs4=\n gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\n gopkg.in/oauth2.v3 v3.10.1 h1:/abis3O6tZFizY1/FgKGoDOmmu2ddvscBSSPdHVa6OI=\n@@ -342,6 +342,8 @@ gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWD\n gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n gopkg.in/yaml.v2 v2.2.2 h1:ZCJp+EgiOT7lHqUV2J862kp8Qj64Jo6az82+3Td9dZw=\n gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n+gopkg.in/yaml.v2 v2.2.4 h1:/eiJrUcujPVeJ3xlSWaiNi3uSVmDGBK1pDHUHAnao1I=\n+gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\n honnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\n honnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4="
    },
    {
      "sha": "7442cd4087080b86164278b5a16aa02f6755e537",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/.golangci.yml",
      "status": "modified",
      "additions": 14,
      "deletions": 10,
      "changes": 24,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/.golangci.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/.golangci.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/.golangci.yml?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -7,8 +7,6 @@ linters-settings:\n     min-complexity: 15\n   maligned:\n     suggest-new: true\n-  dupl:\n-    threshold: 100\n   goconst:\n     min-len: 2\n     min-occurrences: 2\n@@ -25,9 +23,9 @@ linters-settings:\n       - wrapperFunc\n \n linters:\n-  disable-all: true\n   enable:\n     - megacheck\n+    - golint\n     - govet\n     - unconvert\n     - megacheck\n@@ -42,19 +40,25 @@ linters:\n     - typecheck\n     - ineffassign\n     - varcheck\n+    - stylecheck\n+    - gochecknoinits\n+    - scopelint\n+    - gocritic\n+    - nakedret\n+    - gosimple\n+    - prealloc\n   fast: false\n-\n+  disable-all: true\n \n run:\n-#  modules-download-mode: vendor\n+  output:\n+    format: tab\n   skip-dirs:\n     - vendor\n \n issues:\n   exclude-rules:\n-    - text: \"weak cryptographic primitive\"\n+    - text: \"should have a package comment, unless it's in another file for this package\"\n       linters:\n-        - gosec\n-\n-service:\n-  golangci-lint-version: 1.19.x\n\\ No newline at end of file\n+        - golint\n+  exclude-use-default: false"
    },
    {
      "sha": "c1b684bfdd131c354389d84f2b103eba2eaf9536",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/LICENSE",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/LICENSE",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/LICENSE?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -1,6 +1,6 @@\n MIT License\n \n-Copyright (c) 2019 Umputun\n+Copyright (c) 2020 Umputun\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
    },
    {
      "sha": "036c4c117eb2719c49a879a19fcac907ab8d93c2",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/README.md",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/README.md?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -1,7 +1,6 @@\n # Loading Cache Wrapper [![Build Status](https://github.com/go-pkgz/lcw/workflows/build/badge.svg)](https://github.com/go-pkgz/lcw/actions) [![Coverage Status](https://coveralls.io/repos/github/go-pkgz/lcw/badge.svg?branch=master)](https://coveralls.io/github/go-pkgz/lcw?branch=master) [![godoc](https://godoc.org/github.com/go-pkgz/lcw?status.svg)](https://godoc.org/github.com/go-pkgz/lcw)\n \n-\n-The library adds a thin layer on top of [lru cache](https://github.com/hashicorp/golang-lru) and [patrickmn/go-cache](https://github.com/patrickmn/go-cache).\n+The library adds a thin layer on top of [lru cache](https://github.com/hashicorp/golang-lru) and internal implementation of expirable cache.\n \n | Cache name     | Constructor           | Defaults          | Description             |\n | -------------- | --------------------- | ----------------- | ----------------------- |\n@@ -10,7 +9,6 @@ The library adds a thin layer on top of [lru cache](https://github.com/hashicorp\n | RedisCache     | lcw.NewRedisCache     | ttl=5m            | Redis cache with limits |\n | Nop            | lcw.NewNopCache       |                   | Do-nothing cache        |\n \n-\n Main features:\n - LoadingCache (guava style)\n - Limit maximum cache size (in bytes)\n@@ -42,7 +40,6 @@ if err != nil {\n }\n \n s := val.(string) // cached value\n-\n ```\n \n ### Cache with URI\n@@ -58,14 +55,18 @@ Cache can be created with URIs:\n \n `Scache` provides a wrapper on top of all implementations of `LoadingCache` with a number of special features:\n \n-1. Key is not a string but a composed type made from partition, key-id and list of scopes (tags). \n+1. Key is not a string, but a composed type made from partition, key-id and list of scopes (tags). \n 1. Value type limited to `[]byte`\n 1. Added `Flush` method for scoped/tagged invalidation of multiple records in a given partition\n-1. Simplified interface with Get, Stat and Flush only.\n+1. A simplified interface with Get, Stat and Flush only.\n \n ## Details\n \n+- In all cache types other than Redis (e.g. LRU and Expirable at the moment) values are stored as-is which means\n+that mutable values can be changed outside of cache. `ExampleLoadingCache_Mutability` illustrates that.\n - All byte-size limits (MaxCacheSize and MaxValSize) only work for values implementing `lcw.Sizer` interface.\n - Negative limits (max options) rejected\n - `lgr.Value` wraps `interface{}` and should be converted back to the concrete type.\n-- The implementation started as a part of [remark42](https://github.com/umputun/remark) and later on moved to [go-pkgz/rest](https://github.com/go-pkgz/rest/tree/master/cache) library and finaly generalized to become `lcw`.\n+- The implementation started as a part of [remark42](https://github.com/umputun/remark)\n+and later on moved to [go-pkgz/rest](https://github.com/go-pkgz/rest/tree/master/cache)\n+library and finally generalized to become `lcw`."
    },
    {
      "sha": "b917bd598dd3c3f53d870c6d624d26f82ae1ec53",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/cache.go",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/cache.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/cache.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/cache.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -1,4 +1,4 @@\n-// Package lcw adds a thin layer on top of lru cache and go-cache providing more limits and common interface.\n+// Package lcw adds a thin layer on top of lru and expirable cache providing more limits and common interface.\n // The primary method to get (and set) data to/from the cache is LoadingCache.Get returning stored data for a given key or\n // call provided func to retrieve and store, similar to Guava loading cache.\n // Limits allow max values for key size, number of keys, value size and total size of values in the cache.\n@@ -28,6 +28,7 @@ type LoadingCache interface {\n \tPurge()                                                          // clear cache\n \tStat() CacheStat                                                 // cache stats\n \tKeys() []string                                                  // list of all keys\n+\tClose() error                                                    // close open connections\n }\n \n // CacheStat represent stats values\n@@ -68,10 +69,15 @@ func (n *Nop) Purge() {}\n // Delete does nothing for nop cache\n func (n *Nop) Delete(key string) {}\n \n-// Delete does nothing for nop cache\n+// Keys does nothing for nop cache\n func (n *Nop) Keys() []string { return nil }\n \n // Stat always 0s for nop cache\n func (n *Nop) Stat() CacheStat {\n \treturn CacheStat{}\n }\n+\n+// Close does nothing for nop cache\n+func (n *Nop) Close() error {\n+\treturn nil\n+}"
    },
    {
      "sha": "f772086e741cced7d32075cdf9dadb05b3541b82",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/expirable_cache.go",
      "status": "modified",
      "additions": 35,
      "deletions": 32,
      "changes": 67,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/expirable_cache.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/expirable_cache.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/expirable_cache.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -4,21 +4,21 @@ import (\n \t\"sync/atomic\"\n \t\"time\"\n \n-\tcache \"github.com/patrickmn/go-cache\"\n \t\"github.com/pkg/errors\"\n+\n+\t\"github.com/go-pkgz/lcw/internal/cache\"\n )\n \n // ExpirableCache implements LoadingCache with TTL.\n type ExpirableCache struct {\n \toptions\n \tCacheStat\n \tcurrentSize int64\n-\tbackend     *cache.Cache\n+\tbackend     *cache.LoadingCache\n }\n \n-// NewExpirableCache makes expirable LoadingCache implementation, 1000 max keys by default and 5s TTL\n+// NewExpirableCache makes expirable LoadingCache implementation, 1000 max keys by default and 5m TTL\n func NewExpirableCache(opts ...Option) (*ExpirableCache, error) {\n-\n \tres := ExpirableCache{\n \t\toptions: options{\n \t\t\tmaxKeys:      1000,\n@@ -33,25 +33,30 @@ func NewExpirableCache(opts ...Option) (*ExpirableCache, error) {\n \t\t}\n \t}\n \n-\tres.backend = cache.New(res.ttl, res.ttl/2)\n-\n-\t// OnEvicted called automatically for expired and manually deleted\n-\tres.backend.OnEvicted(func(key string, value interface{}) {\n-\t\tif res.onEvicted != nil {\n-\t\t\tres.onEvicted(key, value)\n-\t\t}\n-\t\tif s, ok := value.(Sizer); ok {\n-\t\t\tsize := s.Size()\n-\t\t\tatomic.AddInt64(&res.currentSize, -1*int64(size))\n-\t\t}\n-\t})\n+\tbackend, err := cache.NewLoadingCache(\n+\t\tcache.MaxKeys(res.maxKeys),\n+\t\tcache.TTL(res.ttl),\n+\t\tcache.PurgeEvery(res.ttl/2),\n+\t\tcache.OnEvicted(func(key string, value interface{}) {\n+\t\t\tif res.onEvicted != nil {\n+\t\t\t\tres.onEvicted(key, value)\n+\t\t\t}\n+\t\t\tif s, ok := value.(Sizer); ok {\n+\t\t\t\tsize := s.Size()\n+\t\t\t\tatomic.AddInt64(&res.currentSize, -1*int64(size))\n+\t\t\t}\n+\t\t}),\n+\t)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrap(err, \"error creating backend\")\n+\t}\n+\tres.backend = backend\n \n \treturn &res, nil\n }\n \n // Get gets value by key or load with fn if not found in cache\n func (c *ExpirableCache) Get(key string, fn func() (Value, error)) (data Value, err error) {\n-\n \tif v, ok := c.backend.Get(key); ok {\n \t\tatomic.AddInt64(&c.Hits, 1)\n \t\treturn v, nil\n@@ -71,44 +76,36 @@ func (c *ExpirableCache) Get(key string, fn func() (Value, error)) (data Value,\n \t\t\t}\n \t\t\tatomic.AddInt64(&c.currentSize, int64(s.Size()))\n \t\t}\n-\t\tc.backend.Set(key, data, c.ttl)\n+\t\tc.backend.Set(key, data)\n \t}\n \n \treturn data, nil\n }\n \n // Invalidate removes keys with passed predicate fn, i.e. fn(key) should be true to get evicted\n func (c *ExpirableCache) Invalidate(fn func(key string) bool) {\n-\tfor key := range c.backend.Items() { // Keys() returns copy of cache's key, safe to remove directly\n-\t\tif fn(key) {\n-\t\t\tc.backend.Delete(key)\n-\t\t}\n-\t}\n+\tc.backend.InvalidateFn(fn)\n }\n \n // Peek returns the key value (or undefined if not found) without updating the \"recently used\"-ness of the key.\n func (c *ExpirableCache) Peek(key string) (Value, bool) {\n-\treturn c.backend.Get(key)\n+\treturn c.backend.Peek(key)\n }\n \n // Purge clears the cache completely.\n func (c *ExpirableCache) Purge() {\n-\tc.backend.Flush()\n+\tc.backend.Purge()\n \tatomic.StoreInt64(&c.currentSize, 0)\n }\n \n // Delete cache item by key\n func (c *ExpirableCache) Delete(key string) {\n-\tc.backend.Delete(key)\n+\tc.backend.Invalidate(key)\n }\n \n+// Keys returns cache keys\n func (c *ExpirableCache) Keys() (res []string) {\n-\titems := c.backend.Items()\n-\tres = make([]string, 0, len(items))\n-\tfor key := range items {\n-\t\tres = append(res, key)\n-\t}\n-\treturn res\n+\treturn c.backend.Keys()\n }\n \n // Stat returns cache statistics\n@@ -122,6 +119,12 @@ func (c *ExpirableCache) Stat() CacheStat {\n \t}\n }\n \n+// Close kills cleanup goroutine\n+func (c *ExpirableCache) Close() error {\n+\tc.backend.Close()\n+\treturn nil\n+}\n+\n func (c *ExpirableCache) size() int64 {\n \treturn atomic.LoadInt64(&c.currentSize)\n }"
    },
    {
      "sha": "5ac87b0839fed9a2b7c60e5f4561f8b989e31939",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/go.mod",
      "status": "modified",
      "additions": 6,
      "deletions": 17,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/go.mod?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -1,23 +1,12 @@\n module github.com/go-pkgz/lcw\n \n require (\n-\tgithub.com/alicebob/gopher-json v0.0.0-20180125190556-5a6b3ba71ee6 // indirect\n-\tgithub.com/alicebob/miniredis v2.5.0+incompatible\n-\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n-\tgithub.com/go-redis/redis/v7 v7.0.0-beta.4\n-\tgithub.com/golang/protobuf v1.3.2 // indirect\n-\tgithub.com/gomodule/redigo v2.0.0+incompatible // indirect\n-\tgithub.com/hashicorp/go-multierror v1.0.0\n-\tgithub.com/hashicorp/golang-lru v0.5.3\n-\tgithub.com/kr/pretty v0.1.0 // indirect\n-\tgithub.com/patrickmn/go-cache v2.1.0+incompatible\n-\tgithub.com/pkg/errors v0.8.1\n-\tgithub.com/stretchr/testify v1.3.0\n-\tgithub.com/yuin/gopher-lua v0.0.0-20190514113301-1cd887cd7036 // indirect\n-\tgolang.org/x/net v0.0.0-20190620200207-3b0461eec859 // indirect\n-\tgolang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0 // indirect\n-\tgolang.org/x/text v0.3.2 // indirect\n-\tgopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 // indirect\n+\tgithub.com/alicebob/miniredis/v2 v2.11.4\n+\tgithub.com/go-redis/redis/v7 v7.2.0\n+\tgithub.com/hashicorp/go-multierror v1.1.0\n+\tgithub.com/hashicorp/golang-lru v0.5.4\n+\tgithub.com/pkg/errors v0.9.1\n+\tgithub.com/stretchr/testify v1.5.1\n )\n \n go 1.13"
    },
    {
      "sha": "38edae2d21b38b6a8b6a6a92a9b9fcd9fc893797",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/go.sum",
      "status": "modified",
      "additions": 29,
      "deletions": 38,
      "changes": 67,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/go.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/go.sum?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -1,30 +1,27 @@\n github.com/alicebob/gopher-json v0.0.0-20180125190556-5a6b3ba71ee6 h1:45bxf7AZMwWcqkLzDAQugVEwedisr5nRJ1r+7LYnv0U=\n github.com/alicebob/gopher-json v0.0.0-20180125190556-5a6b3ba71ee6/go.mod h1:SGnFV6hVsYE877CKEZ6tDNTjaSXYUk6QqoIK6PrAtcc=\n-github.com/alicebob/miniredis v2.5.0+incompatible h1:yBHoLpsyjupjz3NL3MhKMVkR41j82Yjf3KFv7ApYzUI=\n-github.com/alicebob/miniredis v2.5.0+incompatible/go.mod h1:8HZjEj4yU0dwhYHky+DxYx+6BMjkBbe5ONFIF1MXffk=\n+github.com/alicebob/miniredis/v2 v2.11.4 h1:GsuyeunTx7EllZBU3/6Ji3dhMQZDpC9rLf1luJ+6M5M=\n+github.com/alicebob/miniredis/v2 v2.11.4/go.mod h1:VL3UDEfAH59bSa7MuHMuFToxkqyHh69s/WUbYlOAuyg=\n github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\n github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\n github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\n github.com/davecgh/go-spew v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=\n github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n-github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\n-github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n github.com/fsnotify/fsnotify v1.4.7 h1:IXs+QLmnXW2CcXuY+8Mzv/fWEsPGWxqefPtCP5CnV9I=\n github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\n-github.com/go-redis/redis/v7 v7.0.0-beta.4 h1:p6z7Pde69EGRWvlC++y8aFcaWegyrKHzOBGo0zUACTQ=\n-github.com/go-redis/redis/v7 v7.0.0-beta.4/go.mod h1:xhhSbUMTsleRPur+Vgx9sUHtyN33bdjxY+9/0n9Ig8s=\n-github.com/golang/protobuf v1.2.0 h1:P3YflyNX/ehuJFLhxviNdFxQPkGK5cDcApsge1SqnvM=\n+github.com/go-redis/redis/v7 v7.2.0 h1:CrCexy/jYWZjW0AyVoHlcJUeZN19VWlbepTh1Vq6dJs=\n+github.com/go-redis/redis/v7 v7.2.0/go.mod h1:JDNMw23GTyLNC4GZu9njt15ctBQVn7xjRfnwdHj/Dcg=\n github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\n github.com/golang/protobuf v1.3.2 h1:6nsPYzhq5kReh6QImI3k5qWzO4PEbvbIW2cwSfR/6xs=\n github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\n-github.com/gomodule/redigo v2.0.0+incompatible h1:K/R+8tc58AaqLkqG2Ol3Qk+DR/TlNuhuh457pBFPtt0=\n-github.com/gomodule/redigo v2.0.0+incompatible/go.mod h1:B4C85qUVwatsJoIUNIfCRsp7qO0iAmpGFZ4EELWSbC4=\n+github.com/gomodule/redigo v1.7.1-0.20190322064113-39e2c31b7ca3 h1:6amM4HsNPOvMLVc2ZnyqrjeQ92YAVWn7T4WBKK87inY=\n+github.com/gomodule/redigo v1.7.1-0.20190322064113-39e2c31b7ca3/go.mod h1:B4C85qUVwatsJoIUNIfCRsp7qO0iAmpGFZ4EELWSbC4=\n github.com/hashicorp/errwrap v1.0.0 h1:hLrqtEDnRye3+sgx6z4qVLNuviH3MR5aQ0ykNJa/UYA=\n github.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\n-github.com/hashicorp/go-multierror v1.0.0 h1:iVjPR7a6H0tWELX5NxNe7bYopibicUzc7uPribsnS6o=\n-github.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=\n-github.com/hashicorp/golang-lru v0.5.3 h1:YPkqC67at8FYaadspW/6uE0COsBxS2656RLEr8Bppgk=\n-github.com/hashicorp/golang-lru v0.5.3/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\n+github.com/hashicorp/go-multierror v1.1.0 h1:B9UzwGQJehnUY1yNrnwREHc3fGbC2xefo8g4TbElacI=\n+github.com/hashicorp/go-multierror v1.1.0/go.mod h1:spPvp8C1qA32ftKqdAHm4hHTbPw+vmowP0z+KUhOZdA=\n+github.com/hashicorp/golang-lru v0.5.4 h1:YDjusn29QI/Das2iO9M0BHnIbxPeyuCHsjMW+lJfyTc=\n+github.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\n github.com/hpcloud/tail v1.0.0 h1:nfCOvKYfkgYP8hkirhJocXT2+zOD8yUNjXaWfTlyFKI=\n github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\n github.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\n@@ -33,47 +30,41 @@ github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\n github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\n github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\n github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n-github.com/onsi/ginkgo v1.8.0 h1:VkHVNpR4iVnU8XQR6DBm8BqYjN7CRzw+xKUbVVbbW9w=\n-github.com/onsi/ginkgo v1.8.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n-github.com/onsi/gomega v1.5.0 h1:izbySO9zDPmjJ8rDjLvkA2zJHIo+HkYXHnf7eN7SSyo=\n-github.com/onsi/gomega v1.5.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\n-github.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=\n-github.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=\n-github.com/pkg/errors v0.8.1 h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=\n-github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\n+github.com/onsi/ginkgo v1.10.1 h1:q/mM8GF/n0shIN8SaAZ0V+jnLPzen6WIVZdiwrRlMlo=\n+github.com/onsi/ginkgo v1.10.1/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n+github.com/onsi/gomega v1.7.0 h1:XPnZz8VVBHjVsy1vzJmRwIcSwiUO+JFfrv/xGiigmME=\n+github.com/onsi/gomega v1.7.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\n+github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\n+github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\n github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\n github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\n github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\n-github.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=\n-github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\n-github.com/yuin/gopher-lua v0.0.0-20190514113301-1cd887cd7036 h1:1b6PAtenNyhsmo/NKXVe34h7JEZKva1YB/ne7K7mqKM=\n-github.com/yuin/gopher-lua v0.0.0-20190514113301-1cd887cd7036/go.mod h1:gqRgreBUhTSL0GeU64rtZ3Uq3wtjOa/TB2YfrtkCbVQ=\n+github.com/stretchr/testify v1.5.1 h1:nOGnQDM7FYENwehXlg/kFVnos3rEvtKTjRvOWSzb6H4=\n+github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\n+github.com/yuin/gopher-lua v0.0.0-20191220021717-ab39c6098bdb h1:ZkM6LRnq40pR1Ox0hTHlnpkcOTuFIDQpZ1IN8rKKhX0=\n+github.com/yuin/gopher-lua v0.0.0-20191220021717-ab39c6098bdb/go.mod h1:gqRgreBUhTSL0GeU64rtZ3Uq3wtjOa/TB2YfrtkCbVQ=\n golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\n-golang.org/x/net v0.0.0-20180906233101-161cd47e91fd h1:nTDtHvHSdCn1m6ITfMRqtOd/9+7a3s8RBNOZ3eYZzJA=\n golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n-golang.org/x/net v0.0.0-20190620200207-3b0461eec859 h1:R/3boaszxrf1GEUWTVDzSKVwLmSJpwZ1yqXm8j0v2QI=\n-golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n-golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f h1:wMNYb4v58l5UBM7MYRLPG6ZhfOqbKu7X5eyFl8ZhKvA=\n+golang.org/x/net v0.0.0-20190923162816-aa69164e4478 h1:l5EDrHhldLYb3ZRHDUhXF7Om7MvYXnkV9/iQNo1lX6g=\n+golang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n-golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e h1:o3PsSEY8E4eXWkXrIP9YJALUkVZqzHJT5DOasTyn8Vs=\n golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n-golang.org/x/sys v0.0.0-20190204203706-41f3e6584952 h1:FDfvYgoVsA7TTZSbgiqjAbfPbK47CNHdWl3h/PJtii0=\n golang.org/x/sys v0.0.0-20190204203706-41f3e6584952/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n-golang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0 h1:HyfiK1WMnHj5FXFXatD+Qs1A/xC2Run6RzeW1SyHxpc=\n-golang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n-golang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=\n+golang.org/x/sys v0.0.0-20191010194322-b09406accb47 h1:/XfQ9z7ib8eEJX2hdgFTZJ/ntt0swNk5oYBziWeTCvY=\n+golang.org/x/sys v0.0.0-20191010194322-b09406accb47/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\n golang.org/x/text v0.3.2 h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=\n golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\n golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\n-gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\n gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n-gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\n-gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\n+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n gopkg.in/fsnotify.v1 v1.4.7 h1:xOHLXZwVvI9hhs+cLKq5+I5onOuwQLhQwiu63xxlHs4=\n gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\n gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=\n gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\n-gopkg.in/yaml.v2 v2.2.1 h1:mUhvW9EsL+naU5Q3cakzfE91YhliOondGd6ZrsDBHQE=\n gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n+gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n+gopkg.in/yaml.v2 v2.2.4 h1:/eiJrUcujPVeJ3xlSWaiNi3uSVmDGBK1pDHUHAnao1I=\n+gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI="
    },
    {
      "sha": "15ef1d1f8d1115bbca49e802d49b7b02232bdf96",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/internal/cache/cache.go",
      "status": "added",
      "additions": 242,
      "deletions": 0,
      "changes": 242,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/internal/cache/cache.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/internal/cache/cache.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/internal/cache/cache.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -0,0 +1,242 @@\n+// Package cache implements LoadingCache.\n+//\n+// Support LRC TTL-based eviction.\n+package cache\n+\n+import (\n+\t\"sort\"\n+\t\"sync\"\n+\t\"time\"\n+\n+\t\"github.com/pkg/errors\"\n+)\n+\n+// LoadingCache provides expirable loading cache with LRC eviction.\n+type LoadingCache struct {\n+\tpurgeEvery time.Duration\n+\tttl        time.Duration\n+\tmaxKeys    int64\n+\tdone       chan struct{}\n+\tonEvicted  func(key string, value interface{})\n+\n+\tsync.Mutex\n+\tdata map[string]*cacheItem\n+}\n+\n+// noEvictionTTL - very long ttl to prevent eviction\n+const noEvictionTTL = time.Hour * 24 * 365 * 10\n+\n+// NewLoadingCache returns a new expirable LRC cache, activates purge with purgeEvery (0 to never purge).\n+// Default MaxKeys is unlimited (0).\n+func NewLoadingCache(options ...Option) (*LoadingCache, error) {\n+\tres := LoadingCache{\n+\t\tdata:       map[string]*cacheItem{},\n+\t\tttl:        noEvictionTTL,\n+\t\tpurgeEvery: 0,\n+\t\tmaxKeys:    0,\n+\t\tdone:       make(chan struct{}),\n+\t}\n+\n+\tfor _, opt := range options {\n+\t\tif err := opt(&res); err != nil {\n+\t\t\treturn nil, errors.Wrap(err, \"failed to set cache option\")\n+\t\t}\n+\t}\n+\n+\tif res.maxKeys > 0 || res.purgeEvery > 0 {\n+\t\tif res.purgeEvery == 0 {\n+\t\t\tres.purgeEvery = time.Minute * 5 // non-zero purge enforced because maxKeys defined\n+\t\t}\n+\t\tgo func(done <-chan struct{}) {\n+\t\t\tticker := time.NewTicker(res.purgeEvery)\n+\t\t\tfor {\n+\t\t\t\tselect {\n+\t\t\t\tcase <-done:\n+\t\t\t\t\treturn\n+\t\t\t\tcase <-ticker.C:\n+\t\t\t\t\tres.Lock()\n+\t\t\t\t\tres.purge(res.maxKeys)\n+\t\t\t\t\tres.Unlock()\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}(res.done)\n+\t}\n+\treturn &res, nil\n+}\n+\n+// Set key\n+func (c *LoadingCache) Set(key string, value interface{}) {\n+\tc.Lock()\n+\tdefer c.Unlock()\n+\n+\tnow := time.Now()\n+\tif _, ok := c.data[key]; !ok {\n+\t\tc.data[key] = &cacheItem{}\n+\t}\n+\tc.data[key].data = value\n+\tc.data[key].expiresAt = now.Add(c.ttl)\n+\n+\t// Enforced purge call in addition the one from the ticker\n+\t// to limit the worst-case scenario with a lot of sets in the\n+\t// short period of time (between two timed purge calls)\n+\tif c.maxKeys > 0 && int64(len(c.data)) >= c.maxKeys*2 {\n+\t\tc.purge(c.maxKeys)\n+\t}\n+}\n+\n+// Get returns the key value\n+func (c *LoadingCache) Get(key string) (interface{}, bool) {\n+\tc.Lock()\n+\tdefer c.Unlock()\n+\tvalue, ok := c.getValue(key)\n+\tif !ok {\n+\t\treturn nil, false\n+\t}\n+\treturn value, ok\n+}\n+\n+// Peek returns the key value (or undefined if not found) without updating the \"recently used\"-ness of the key.\n+func (c *LoadingCache) Peek(key string) (interface{}, bool) {\n+\tc.Lock()\n+\tdefer c.Unlock()\n+\tvalue, ok := c.getValue(key)\n+\tif !ok {\n+\t\treturn nil, false\n+\t}\n+\treturn value, ok\n+}\n+\n+// Invalidate key (item) from the cache\n+func (c *LoadingCache) Invalidate(key string) {\n+\tc.Lock()\n+\tif value, ok := c.data[key]; ok {\n+\t\tdelete(c.data, key)\n+\t\tif c.onEvicted != nil {\n+\t\t\tc.onEvicted(key, value.data)\n+\t\t}\n+\t}\n+\tc.Unlock()\n+}\n+\n+// InvalidateFn deletes multiple keys if predicate is true\n+func (c *LoadingCache) InvalidateFn(fn func(key string) bool) {\n+\tc.Lock()\n+\tfor key, value := range c.data {\n+\t\tif fn(key) {\n+\t\t\tdelete(c.data, key)\n+\t\t\tif c.onEvicted != nil {\n+\t\t\t\tc.onEvicted(key, value.data)\n+\t\t\t}\n+\t\t}\n+\t}\n+\tc.Unlock()\n+}\n+\n+// Keys return slice of current keys in the cache\n+func (c *LoadingCache) Keys() []string {\n+\tc.Lock()\n+\tdefer c.Unlock()\n+\tkeys := make([]string, 0, len(c.data))\n+\tfor k := range c.data {\n+\t\tkeys = append(keys, k)\n+\t}\n+\treturn keys\n+}\n+\n+// get value respecting the expiration, should be called with lock\n+func (c *LoadingCache) getValue(key string) (interface{}, bool) {\n+\tvalue, ok := c.data[key]\n+\tif !ok {\n+\t\treturn nil, false\n+\t}\n+\tif time.Now().After(c.data[key].expiresAt) {\n+\t\treturn nil, false\n+\t}\n+\treturn value.data, ok\n+}\n+\n+// Purge clears the cache completely.\n+func (c *LoadingCache) Purge() {\n+\tc.Lock()\n+\tdefer c.Unlock()\n+\tfor k, v := range c.data {\n+\t\tdelete(c.data, k)\n+\t\tif c.onEvicted != nil {\n+\t\t\tc.onEvicted(k, v.data)\n+\t\t}\n+\t}\n+}\n+\n+// DeleteExpired clears cache of expired items\n+func (c *LoadingCache) DeleteExpired() {\n+\tc.Lock()\n+\tdefer c.Unlock()\n+\tc.purge(0)\n+}\n+\n+// ItemCount return count of items in cache\n+func (c *LoadingCache) ItemCount() int {\n+\tc.Lock()\n+\tn := len(c.data)\n+\tc.Unlock()\n+\treturn n\n+}\n+\n+// Close cleans the cache and destroys running goroutines\n+func (c *LoadingCache) Close() {\n+\tc.Lock()\n+\tdefer c.Unlock()\n+\tclose(c.done)\n+}\n+\n+// keysWithTs includes list of keys with ts. This is for sorting keys\n+// in order to provide least recently added sorting for size-based eviction\n+type keysWithTs []struct {\n+\tkey string\n+\tts  time.Time\n+}\n+\n+// purge records > maxKeys. Has to be called with lock!\n+// call with maxKeys 0 will only clear expired entries.\n+func (c *LoadingCache) purge(maxKeys int64) {\n+\tkts := keysWithTs{}\n+\n+\tfor key, value := range c.data {\n+\t\t// ttl eviction\n+\t\tif time.Now().After(c.data[key].expiresAt) {\n+\t\t\tdelete(c.data, key)\n+\t\t\tif c.onEvicted != nil {\n+\t\t\t\tc.onEvicted(key, value.data)\n+\t\t\t}\n+\t\t}\n+\n+\t\t// prepare list of keysWithTs for size eviction\n+\t\tif maxKeys > 0 && int64(len(c.data)) > maxKeys {\n+\t\t\tts := c.data[key].expiresAt\n+\n+\t\t\tkts = append(kts, struct {\n+\t\t\t\tkey string\n+\t\t\t\tts  time.Time\n+\t\t\t}{key, ts})\n+\t\t}\n+\t}\n+\n+\t// size eviction\n+\tsize := int64(len(c.data))\n+\tif len(kts) > 0 {\n+\t\tsort.Slice(kts, func(i int, j int) bool { return kts[i].ts.Before(kts[j].ts) })\n+\t\tfor d := 0; int64(d) < size-maxKeys; d++ {\n+\t\t\tkey := kts[d].key\n+\t\t\tvalue := c.data[key].data\n+\t\t\tdelete(c.data, key)\n+\t\t\tif c.onEvicted != nil {\n+\t\t\t\tc.onEvicted(key, value)\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+type cacheItem struct {\n+\texpiresAt  time.Time\n+\tdata       interface{}\n+}"
    },
    {
      "sha": "f1262e9daa004d7137ae5ecfd0654ae797e95d65",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/internal/cache/options.go",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/internal/cache/options.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/internal/cache/options.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/internal/cache/options.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -0,0 +1,42 @@\n+package cache\n+\n+import \"time\"\n+\n+// Option func type\n+type Option func(lc *LoadingCache) error\n+\n+// OnEvicted called automatically for expired and manually deleted entries\n+func OnEvicted(fn func(key string, value interface{})) Option {\n+\treturn func(lc *LoadingCache) error {\n+\t\tlc.onEvicted = fn\n+\t\treturn nil\n+\t}\n+}\n+\n+// PurgeEvery functional option defines purge interval\n+// by default it is 0, i.e. never. If MaxKeys set to any non-zero this default will be 5minutes\n+func PurgeEvery(interval time.Duration) Option {\n+\treturn func(lc *LoadingCache) error {\n+\t\tlc.purgeEvery = interval\n+\t\treturn nil\n+\t}\n+}\n+\n+// MaxKeys functional option defines how many keys to keep.\n+// By default it is 0, which means unlimited.\n+// If any non-zero MaxKeys set, default PurgeEvery will be set to 5 minutes\n+func MaxKeys(max int) Option {\n+\treturn func(lc *LoadingCache) error {\n+\t\tlc.maxKeys = int64(max)\n+\t\treturn nil\n+\t}\n+}\n+\n+// TTL functional option defines TTL for all cache entries.\n+// By default it is set to 10 years, sane option for expirable cache might be 5 minutes.\n+func TTL(ttl time.Duration) Option {\n+\treturn func(lc *LoadingCache) error {\n+\t\tlc.ttl = ttl\n+\t\treturn nil\n+\t}\n+}"
    },
    {
      "sha": "8c36c267a2a4b401ba6fa6eaca03e6ca57ac3f48",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/lru_cache.go",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/lru_cache.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/lru_cache.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/lru_cache.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -17,7 +17,6 @@ type LruCache struct {\n \n // NewLruCache makes LRU LoadingCache implementation, 1000 max keys by default\n func NewLruCache(opts ...Option) (*LruCache, error) {\n-\n \tres := LruCache{\n \t\toptions: options{\n \t\t\tmaxKeys:      1000,\n@@ -51,7 +50,6 @@ func NewLruCache(opts ...Option) (*LruCache, error) {\n \n // Get gets value by key or load with fn if not found in cache\n func (c *LruCache) Get(key string, fn func() (Value, error)) (data Value, err error) {\n-\n \tif v, ok := c.backend.Get(key); ok {\n \t\tatomic.AddInt64(&c.Hits, 1)\n \t\treturn v, nil\n@@ -104,6 +102,7 @@ func (c *LruCache) Delete(key string) {\n \tc.backend.Remove(key)\n }\n \n+// Keys returns cache keys\n func (c *LruCache) Keys() (res []string) {\n \tkeys := c.backend.Keys()\n \tres = make([]string, 0, len(keys))\n@@ -124,6 +123,11 @@ func (c *LruCache) Stat() CacheStat {\n \t}\n }\n \n+// Close does nothing for this type of cache\n+func (c *LruCache) Close() error {\n+\treturn nil\n+}\n+\n func (c *LruCache) size() int64 {\n \treturn atomic.LoadInt64(&c.currentSize)\n }"
    },
    {
      "sha": "ced6bd36a68474f4d564c1782631f14f76fab6d3",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/redis_cache.go",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/redis_cache.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/redis_cache.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/redis_cache.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -4,7 +4,7 @@ import (\n \t\"sync/atomic\"\n \t\"time\"\n \n-\tredis \"github.com/go-redis/redis/v7\"\n+\t\"github.com/go-redis/redis/v7\"\n \t\"github.com/pkg/errors\"\n )\n \n@@ -20,7 +20,6 @@ type RedisCache struct {\n \n // NewRedisCache makes Redis LoadingCache implementation.\n func NewRedisCache(backend *redis.Client, opts ...Option) (*RedisCache, error) {\n-\n \tres := RedisCache{\n \t\toptions: options{\n \t\t\tttl: 5 * time.Minute,\n@@ -43,7 +42,6 @@ func NewRedisCache(backend *redis.Client, opts ...Option) (*RedisCache, error) {\n \n // Get gets value by key or load with fn if not found in cache\n func (c *RedisCache) Get(key string, fn func() (Value, error)) (data Value, err error) {\n-\n \tv, getErr := c.backend.Get(key).Result()\n \tswitch getErr {\n \t// RedisClient returns nil when find a key in DB\n@@ -69,7 +67,6 @@ func (c *RedisCache) Get(key string, fn func() (Value, error)) (data Value, err\n \t\t\tatomic.AddInt64(&c.Errors, 1)\n \t\t\treturn data, setErr\n \t\t}\n-\n \t}\n \treturn data, nil\n }\n@@ -119,6 +116,11 @@ func (c *RedisCache) Stat() CacheStat {\n \t}\n }\n \n+// Close closes underlying connections\n+func (c *RedisCache) Close() error {\n+\treturn c.backend.Close()\n+}\n+\n func (c *RedisCache) size() int64 {\n \treturn 0\n }"
    },
    {
      "sha": "59b9d50239675f970c58713517bb098d73f0eaa7",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/scache.go",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/scache.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/scache.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/scache.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -17,6 +17,7 @@ func NewScache(lc LoadingCache) *Scache {\n \treturn &Scache{lc: lc}\n }\n \n+// Get retrieves a key from underlying backend\n func (m *Scache) Get(key Key, fn func() ([]byte, error)) (data []byte, err error) {\n \tkeyStr := key.String()\n \tval, err := m.lc.Get(keyStr, func() (value Value, e error) {\n@@ -32,7 +33,6 @@ func (m *Scache) Stat() CacheStat {\n \n // Flush clears cache and calls postFlushFn async\n func (m *Scache) Flush(req FlusherRequest) {\n-\n \tif len(req.scopes) == 0 {\n \t\tm.lc.Purge()\n \t\treturn\n@@ -93,11 +93,11 @@ func (k Key) Scopes(scopes ...string) Key {\n // key string made as <partition>@@<id>@@<scope1>$$<scope2>....\n func (k Key) String() string {\n \tbld := strings.Builder{}\n-\tbld.WriteString(k.partition)\n-\tbld.WriteString(\"@@\")\n-\tbld.WriteString(k.id)\n-\tbld.WriteString(\"@@\")\n-\tbld.WriteString(strings.Join(k.scopes, \"$$\"))\n+\t_, _ = bld.WriteString(k.partition)\n+\t_, _ = bld.WriteString(\"@@\")\n+\t_, _ = bld.WriteString(k.id)\n+\t_, _ = bld.WriteString(\"@@\")\n+\t_, _ = bld.WriteString(strings.Join(k.scopes, \"$$\"))\n \treturn bld.String()\n }\n "
    },
    {
      "sha": "2d0a01eee7f87f7944a7f156ace45a990e36db12",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/url.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/url.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-pkgz/lcw/url.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/lcw/url.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -52,7 +52,6 @@ func New(uri string) (LoadingCache, error) {\n }\n \n func optionsFromQuery(q url.Values) (opts []Option, err error) {\n-\n \terrs := new(multierror.Error)\n \n \tif v := q.Get(\"max_val_size\"); v != \"\" {"
    },
    {
      "sha": "912dab1ef392d4513782f31225883fe3d46704f9",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/.golangci.yml",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/.golangci.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/.golangci.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/.golangci.yml?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -5,7 +5,11 @@ run:\n linters:\n   enable-all: true\n   disable:\n+    - funlen\n     - gochecknoglobals\n+    - gocognit\n     - goconst\n+    - godox\n     - gosec\n     - maligned\n+    - wsl"
    },
    {
      "sha": "0c1eef918816106745b746b02f9cbe285ac73b3d",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/.travis.yml",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/.travis.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/.travis.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/.travis.yml?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -8,6 +8,7 @@ services:\n go:\n   - 1.11.x\n   - 1.12.x\n+  - 1.13.x\n   - tip\n \n matrix:\n@@ -20,4 +21,4 @@ env:\n go_import_path: github.com/go-redis/redis\n \n before_install:\n-  - curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.17.1\n+  - curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.21.0"
    },
    {
      "sha": "88701cfd5ac6a5be1ccb1c1982ec2e7bcadfb093",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/CHANGELOG.md",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/CHANGELOG.md",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/CHANGELOG.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/CHANGELOG.md?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -1,14 +1,21 @@\n # Changelog\n \n-## v7 WIP\n+## v7.2\n \n+- Existing `HMSet` is renamed to `HSet` and old deprecated `HMSet` is restored for Redis 3 users.\n+\n+## v7\n+\n+- *Important*. Tx.Pipeline now returns a non-transactional pipeline. Use Tx.TxPipeline for a transactional pipeline.\n - WrapProcess is replaced with more convenient AddHook that has access to context.Context.\n - WithContext now can not be used to create a shallow copy of the client.\n - New methods ProcessContext, DoContext, and ExecContext.\n - Client respects Context.Deadline when setting net.Conn deadline.\n - Client listens on Context.Done while waiting for a connection from the pool and returns an error when context context is cancelled.\n - Add PubSub.ChannelWithSubscriptions that sends `*Subscription` in addition to `*Message` to allow detecting reconnections.\n-- `time.Time` is now marshalled in RFC3339 format. `rdb.Get(\"foo\").Time()` helper is added to parse time.\n+- `time.Time` is now marshalled in RFC3339 format. `rdb.Get(\"foo\").Time()` helper is added to parse the time.\n+- `SetLimiter` is removed and added `Options.Limiter` instead.\n+- `HMSet` is deprecated as of Redis v4.\n \n ## v6.15\n "
    },
    {
      "sha": "421993ef28540050261c84aae795fa08c36efa53",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/Makefile",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/Makefile",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/Makefile",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/Makefile?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -3,9 +3,6 @@ all: testdeps\n \tgo test ./... -short -race\n \tgo test ./... -run=NONE -bench=. -benchmem\n \tenv GOOS=linux GOARCH=386 go test ./...\n-\tgo vet\n-\tgo get github.com/gordonklaus/ineffassign\n-\tineffassign .\n \tgolangci-lint run\n \n testdeps: testdata/redis/src/redis-server\n@@ -17,8 +14,7 @@ bench: testdeps\n \n testdata/redis:\n \tmkdir -p $@\n-\twget -qO- https://github.com/antirez/redis/archive/5.0.tar.gz | tar xvz --strip-components=1 -C $@\n+\twget -qO- http://download.redis.io/releases/redis-5.0.7.tar.gz | tar xvz --strip-components=1 -C $@\n \n testdata/redis/src/redis-server: testdata/redis\n-\tsed -i.bak 's/libjemalloc.a/libjemalloc.a -lrt/g' $</src/Makefile\n \tcd $< && make all"
    },
    {
      "sha": "7331a56bf302aaa8b74b22acd9520512e3c1e6a4",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/README.md",
      "status": "modified",
      "additions": 15,
      "deletions": 9,
      "changes": 24,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/README.md?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -27,21 +27,22 @@ Examples: https://godoc.org/github.com/go-redis/redis#pkg-examples.\n \n ## Installation\n \n-Install:\n+go-redis requires a Go version with [Modules](https://github.com/golang/go/wiki/Modules) support and uses import versioning. So please make sure to initialize a Go module before installing go-redis:\n \n-```shell\n-go get -u github.com/go-redis/redis\n+``` shell\n+go mod init github.com/my/repo\n+go get github.com/go-redis/redis/v7\n ```\n \n Import:\n \n-```go\n-import \"github.com/go-redis/redis\"\n+``` go\n+import \"github.com/go-redis/redis/v7\"\n ```\n \n ## Quickstart\n \n-```go\n+``` go\n func ExampleNewClient() {\n \tclient := redis.NewClient(&redis.Options{\n \t\tAddr:     \"localhost:6379\",\n@@ -55,6 +56,11 @@ func ExampleNewClient() {\n }\n \n func ExampleClient() {\n+\tclient := redis.NewClient(&redis.Options{\n+\t\tAddr:     \"localhost:6379\",\n+\t\tPassword: \"\", // no password set\n+\t\tDB:       0,  // use default DB\n+\t})\n \terr := client.Set(\"key\", \"value\", 0).Err()\n \tif err != nil {\n \t\tpanic(err)\n@@ -87,12 +93,12 @@ Please go through [examples](https://godoc.org/github.com/go-redis/redis#pkg-exa\n \n Some corner cases:\n \n-```go\n+``` go\n // SET key value EX 10 NX\n set, err := client.SetNX(\"key\", \"value\", 10*time.Second).Result()\n \n // SORT list LIMIT 0 2 ASC\n-vals, err := client.Sort(\"list\", redis.Sort{Offset: 0, Count: 2, Order: \"ASC\"}).Result()\n+vals, err := client.Sort(\"list\", &redis.Sort{Offset: 0, Count: 2, Order: \"ASC\"}).Result()\n \n // ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2\n vals, err := client.ZRangeByScoreWithScores(\"zset\", redis.ZRangeBy{\n@@ -109,7 +115,7 @@ vals, err := client.ZInterStore(\"out\", redis.ZStore{Weights: []int64{2, 3}}, \"zs\n vals, err := client.Eval(\"return {KEYS[1],ARGV[1]}\", []string{\"key\"}, \"hello\").Result()\n \n // custom command\n-res, err := client.Do(\"set\", \"key\", \"value\")\n+res, err := client.Do(\"set\", \"key\", \"value\").Result()\n ```\n \n ## See also"
    },
    {
      "sha": "2cf6e01b97aa71c442e2555d134d8c7c0b34d439",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/cluster.go",
      "status": "modified",
      "additions": 126,
      "deletions": 90,
      "changes": 216,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/cluster.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/cluster.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/cluster.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -696,7 +696,7 @@ func (c *ClusterClient) WithContext(ctx context.Context) *ClusterClient {\n \t}\n \tclone := *c\n \tclone.cmdable = clone.Process\n-\tclone.hooks.Lock()\n+\tclone.hooks.lock()\n \tclone.ctx = ctx\n \treturn &clone\n }\n@@ -743,7 +743,7 @@ func (c *ClusterClient) ProcessContext(ctx context.Context, cmd Cmder) error {\n func (c *ClusterClient) process(ctx context.Context, cmd Cmder) error {\n \terr := c._process(ctx, cmd)\n \tif err != nil {\n-\t\tcmd.setErr(err)\n+\t\tcmd.SetErr(err)\n \t\treturn err\n \t}\n \treturn nil\n@@ -773,13 +773,13 @@ func (c *ClusterClient) _process(ctx context.Context, cmd Cmder) error {\n \n \t\tif ask {\n \t\t\tpipe := node.Client.Pipeline()\n-\t\t\t_ = pipe.Process(NewCmd(\"ASKING\"))\n+\t\t\t_ = pipe.Process(NewCmd(\"asking\"))\n \t\t\t_ = pipe.Process(cmd)\n \t\t\t_, lastErr = pipe.ExecContext(ctx)\n \t\t\t_ = pipe.Close()\n \t\t\task = false\n \t\t} else {\n-\t\t\tlastErr = node.Client._process(ctx, cmd)\n+\t\t\tlastErr = node.Client.ProcessContext(ctx, cmd)\n \t\t}\n \n \t\t// If there is no error - we are done.\n@@ -840,6 +840,7 @@ func (c *ClusterClient) ForEachMaster(fn func(client *Client) error) error {\n \n \tvar wg sync.WaitGroup\n \terrCh := make(chan error, 1)\n+\n \tfor _, master := range state.Masters {\n \t\twg.Add(1)\n \t\tgo func(node *clusterNode) {\n@@ -853,6 +854,7 @@ func (c *ClusterClient) ForEachMaster(fn func(client *Client) error) error {\n \t\t\t}\n \t\t}(master)\n \t}\n+\n \twg.Wait()\n \n \tselect {\n@@ -873,6 +875,7 @@ func (c *ClusterClient) ForEachSlave(fn func(client *Client) error) error {\n \n \tvar wg sync.WaitGroup\n \terrCh := make(chan error, 1)\n+\n \tfor _, slave := range state.Slaves {\n \t\twg.Add(1)\n \t\tgo func(node *clusterNode) {\n@@ -886,6 +889,7 @@ func (c *ClusterClient) ForEachSlave(fn func(client *Client) error) error {\n \t\t\t}\n \t\t}(slave)\n \t}\n+\n \twg.Wait()\n \n \tselect {\n@@ -906,6 +910,7 @@ func (c *ClusterClient) ForEachNode(fn func(client *Client) error) error {\n \n \tvar wg sync.WaitGroup\n \terrCh := make(chan error, 1)\n+\n \tworker := func(node *clusterNode) {\n \t\tdefer wg.Done()\n \t\terr := fn(node.Client)\n@@ -927,6 +932,7 @@ func (c *ClusterClient) ForEachNode(fn func(client *Client) error) error {\n \t}\n \n \twg.Wait()\n+\n \tselect {\n \tcase err := <-errCh:\n \t\treturn err\n@@ -1046,7 +1052,7 @@ func (c *ClusterClient) processPipeline(ctx context.Context, cmds []Cmder) error\n \n func (c *ClusterClient) _processPipeline(ctx context.Context, cmds []Cmder) error {\n \tcmdsMap := newCmdsMap()\n-\terr := c.mapCmdsByNode(cmds, cmdsMap)\n+\terr := c.mapCmdsByNode(cmdsMap, cmds)\n \tif err != nil {\n \t\tsetCmdsErr(cmds, err)\n \t\treturn err\n@@ -1068,23 +1074,16 @@ func (c *ClusterClient) _processPipeline(ctx context.Context, cmds []Cmder) erro\n \t\t\tgo func(node *clusterNode, cmds []Cmder) {\n \t\t\t\tdefer wg.Done()\n \n-\t\t\t\terr := node.Client.withConn(ctx, func(ctx context.Context, cn *pool.Conn) error {\n-\t\t\t\t\terr := cn.WithWriter(ctx, c.opt.WriteTimeout, func(wr *proto.Writer) error {\n-\t\t\t\t\t\treturn writeCmd(wr, cmds...)\n-\t\t\t\t\t})\n-\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\treturn err\n-\t\t\t\t\t}\n-\n-\t\t\t\t\treturn cn.WithReader(ctx, c.opt.ReadTimeout, func(rd *proto.Reader) error {\n-\t\t\t\t\t\treturn c.pipelineReadCmds(node, rd, cmds, failedCmds)\n-\t\t\t\t\t})\n-\t\t\t\t})\n-\t\t\t\tif err != nil {\n-\t\t\t\t\terr = c.mapCmdsByNode(cmds, failedCmds)\n-\t\t\t\t\tif err != nil {\n+\t\t\t\terr := c._processPipelineNode(ctx, node, cmds, failedCmds)\n+\t\t\t\tif err == nil {\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\t\t\t\tif attempt < c.opt.MaxRedirects {\n+\t\t\t\t\tif err := c.mapCmdsByNode(failedCmds, cmds); err != nil {\n \t\t\t\t\t\tsetCmdsErr(cmds, err)\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tsetCmdsErr(cmds, err)\n \t\t\t\t}\n \t\t\t}(node, cmds)\n \t\t}\n@@ -1099,41 +1098,27 @@ func (c *ClusterClient) _processPipeline(ctx context.Context, cmds []Cmder) erro\n \treturn cmdsFirstErr(cmds)\n }\n \n-type cmdsMap struct {\n-\tmu sync.Mutex\n-\tm  map[*clusterNode][]Cmder\n-}\n-\n-func newCmdsMap() *cmdsMap {\n-\treturn &cmdsMap{\n-\t\tm: make(map[*clusterNode][]Cmder),\n-\t}\n-}\n-\n-func (m *cmdsMap) Add(node *clusterNode, cmds ...Cmder) {\n-\tm.mu.Lock()\n-\tm.m[node] = append(m.m[node], cmds...)\n-\tm.mu.Unlock()\n-}\n-\n-func (c *ClusterClient) mapCmdsByNode(cmds []Cmder, cmdsMap *cmdsMap) error {\n+func (c *ClusterClient) mapCmdsByNode(cmdsMap *cmdsMap, cmds []Cmder) error {\n \tstate, err := c.state.Get()\n \tif err != nil {\n \t\treturn err\n \t}\n \n-\tcmdsAreReadOnly := c.opt.ReadOnly && c.cmdsAreReadOnly(cmds)\n+\tif c.opt.ReadOnly && c.cmdsAreReadOnly(cmds) {\n+\t\tfor _, cmd := range cmds {\n+\t\t\tslot := c.cmdSlot(cmd)\n+\t\t\tnode, err := c.slotReadOnlyNode(state, slot)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\tcmdsMap.Add(node, cmd)\n+\t\t}\n+\t\treturn nil\n+\t}\n+\n \tfor _, cmd := range cmds {\n \t\tslot := c.cmdSlot(cmd)\n-\n-\t\tvar node *clusterNode\n-\t\tvar err error\n-\t\tif cmdsAreReadOnly {\n-\t\t\tcmdInfo := c.cmdInfo(cmd.Name())\n-\t\t\tnode, err = c.cmdNode(cmdInfo, slot)\n-\t\t} else {\n-\t\t\tnode, err = state.slotMasterNode(slot)\n-\t\t}\n+\t\tnode, err := state.slotMasterNode(slot)\n \t\tif err != nil {\n \t\t\treturn err\n \t\t}\n@@ -1152,6 +1137,25 @@ func (c *ClusterClient) cmdsAreReadOnly(cmds []Cmder) bool {\n \treturn true\n }\n \n+func (c *ClusterClient) _processPipelineNode(\n+\tctx context.Context, node *clusterNode, cmds []Cmder, failedCmds *cmdsMap,\n+) error {\n+\treturn node.Client.hooks.processPipeline(ctx, cmds, func(ctx context.Context, cmds []Cmder) error {\n+\t\treturn node.Client.withConn(ctx, func(ctx context.Context, cn *pool.Conn) error {\n+\t\t\terr := cn.WithWriter(ctx, c.opt.WriteTimeout, func(wr *proto.Writer) error {\n+\t\t\t\treturn writeCmds(wr, cmds)\n+\t\t\t})\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\n+\t\t\treturn cn.WithReader(ctx, c.opt.ReadTimeout, func(rd *proto.Reader) error {\n+\t\t\t\treturn c.pipelineReadCmds(node, rd, cmds, failedCmds)\n+\t\t\t})\n+\t\t})\n+\t})\n+}\n+\n func (c *ClusterClient) pipelineReadCmds(\n \tnode *clusterNode, rd *proto.Reader, cmds []Cmder, failedCmds *cmdsMap,\n ) error {\n@@ -1196,7 +1200,7 @@ func (c *ClusterClient) checkMovedErr(\n \t}\n \n \tif ask {\n-\t\tfailedCmds.Add(node, NewCmd(\"ASKING\"), cmd)\n+\t\tfailedCmds.Add(node, NewCmd(\"asking\"), cmd)\n \t\treturn true\n \t}\n \n@@ -1253,32 +1257,16 @@ func (c *ClusterClient) _processTxPipeline(ctx context.Context, cmds []Cmder) er\n \t\t\t\tgo func(node *clusterNode, cmds []Cmder) {\n \t\t\t\t\tdefer wg.Done()\n \n-\t\t\t\t\terr := node.Client.withConn(ctx, func(ctx context.Context, cn *pool.Conn) error {\n-\t\t\t\t\t\terr := cn.WithWriter(ctx, c.opt.WriteTimeout, func(wr *proto.Writer) error {\n-\t\t\t\t\t\t\treturn txPipelineWriteMulti(wr, cmds)\n-\t\t\t\t\t\t})\n-\t\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\t\treturn err\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\terr = cn.WithReader(ctx, c.opt.ReadTimeout, func(rd *proto.Reader) error {\n-\t\t\t\t\t\t\terr := c.txPipelineReadQueued(rd, cmds, failedCmds)\n-\t\t\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\t\t\tmoved, ask, addr := isMovedError(err)\n-\t\t\t\t\t\t\t\tif moved || ask {\n-\t\t\t\t\t\t\t\t\treturn c.cmdsMoved(cmds, moved, ask, addr, failedCmds)\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\treturn err\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\treturn pipelineReadCmds(rd, cmds)\n-\t\t\t\t\t\t})\n-\t\t\t\t\t\treturn err\n-\t\t\t\t\t})\n-\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\terr = c.mapCmdsByNode(cmds, failedCmds)\n-\t\t\t\t\t\tif err != nil {\n+\t\t\t\t\terr := c._processTxPipelineNode(ctx, node, cmds, failedCmds)\n+\t\t\t\t\tif err == nil {\n+\t\t\t\t\t\treturn\n+\t\t\t\t\t}\n+\t\t\t\t\tif attempt < c.opt.MaxRedirects {\n+\t\t\t\t\t\tif err := c.mapCmdsByNode(failedCmds, cmds); err != nil {\n \t\t\t\t\t\t\tsetCmdsErr(cmds, err)\n \t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tsetCmdsErr(cmds, err)\n \t\t\t\t\t}\n \t\t\t\t}(node, cmds)\n \t\t\t}\n@@ -1303,11 +1291,42 @@ func (c *ClusterClient) mapCmdsBySlot(cmds []Cmder) map[int][]Cmder {\n \treturn cmdsMap\n }\n \n+func (c *ClusterClient) _processTxPipelineNode(\n+\tctx context.Context, node *clusterNode, cmds []Cmder, failedCmds *cmdsMap,\n+) error {\n+\treturn node.Client.hooks.processTxPipeline(ctx, cmds, func(ctx context.Context, cmds []Cmder) error {\n+\t\treturn node.Client.withConn(ctx, func(ctx context.Context, cn *pool.Conn) error {\n+\t\t\terr := cn.WithWriter(ctx, c.opt.WriteTimeout, func(wr *proto.Writer) error {\n+\t\t\t\treturn writeCmds(wr, cmds)\n+\t\t\t})\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\n+\t\t\treturn cn.WithReader(ctx, c.opt.ReadTimeout, func(rd *proto.Reader) error {\n+\t\t\t\tstatusCmd := cmds[0].(*StatusCmd)\n+\t\t\t\t// Trim multi and exec.\n+\t\t\t\tcmds = cmds[1 : len(cmds)-1]\n+\n+\t\t\t\terr := c.txPipelineReadQueued(rd, statusCmd, cmds, failedCmds)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\tmoved, ask, addr := isMovedError(err)\n+\t\t\t\t\tif moved || ask {\n+\t\t\t\t\t\treturn c.cmdsMoved(cmds, moved, ask, addr, failedCmds)\n+\t\t\t\t\t}\n+\t\t\t\t\treturn err\n+\t\t\t\t}\n+\n+\t\t\t\treturn pipelineReadCmds(rd, cmds)\n+\t\t\t})\n+\t\t})\n+\t})\n+}\n+\n func (c *ClusterClient) txPipelineReadQueued(\n-\trd *proto.Reader, cmds []Cmder, failedCmds *cmdsMap,\n+\trd *proto.Reader, statusCmd *StatusCmd, cmds []Cmder, failedCmds *cmdsMap,\n ) error {\n \t// Parse queued replies.\n-\tvar statusCmd StatusCmd\n \tif err := statusCmd.readReply(rd); err != nil {\n \t\treturn err\n \t}\n@@ -1359,7 +1378,7 @@ func (c *ClusterClient) cmdsMoved(\n \n \tif ask {\n \t\tfor _, cmd := range cmds {\n-\t\t\tfailedCmds.Add(node, NewCmd(\"ASKING\"), cmd)\n+\t\t\tfailedCmds.Add(node, NewCmd(\"asking\"), cmd)\n \t\t}\n \t\treturn nil\n \t}\n@@ -1561,29 +1580,27 @@ func (c *ClusterClient) cmdNode(cmdInfo *CommandInfo, slot int) (*clusterNode, e\n \t}\n \n \tif c.opt.ReadOnly && cmdInfo != nil && cmdInfo.ReadOnly {\n-\t\tif c.opt.RouteByLatency {\n-\t\t\treturn state.slotClosestNode(slot)\n-\t\t}\n-\t\tif c.opt.RouteRandomly {\n-\t\t\treturn state.slotRandomNode(slot)\n-\t\t}\n-\t\treturn state.slotSlaveNode(slot)\n+\t\treturn c.slotReadOnlyNode(state, slot)\n \t}\n-\n \treturn state.slotMasterNode(slot)\n }\n \n+func (c *clusterClient) slotReadOnlyNode(state *clusterState, slot int) (*clusterNode, error) {\n+\tif c.opt.RouteByLatency {\n+\t\treturn state.slotClosestNode(slot)\n+\t}\n+\tif c.opt.RouteRandomly {\n+\t\treturn state.slotRandomNode(slot)\n+\t}\n+\treturn state.slotSlaveNode(slot)\n+}\n+\n func (c *ClusterClient) slotMasterNode(slot int) (*clusterNode, error) {\n \tstate, err := c.state.Get()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\n-\tnodes := state.slotNodes(slot)\n-\tif len(nodes) > 0 {\n-\t\treturn nodes[0], nil\n-\t}\n-\treturn c.nodes.Random()\n+\treturn state.slotMasterNode(slot)\n }\n \n func appendUniqueNode(nodes []*clusterNode, node *clusterNode) []*clusterNode {\n@@ -1622,3 +1639,22 @@ func remove(ss []string, es ...string) []string {\n \t}\n \treturn ss\n }\n+\n+//------------------------------------------------------------------------------\n+\n+type cmdsMap struct {\n+\tmu sync.Mutex\n+\tm  map[*clusterNode][]Cmder\n+}\n+\n+func newCmdsMap() *cmdsMap {\n+\treturn &cmdsMap{\n+\t\tm: make(map[*clusterNode][]Cmder),\n+\t}\n+}\n+\n+func (m *cmdsMap) Add(node *clusterNode, cmds ...Cmder) {\n+\tm.mu.Lock()\n+\tm.m[node] = append(m.m[node], cmds...)\n+\tm.mu.Unlock()\n+}"
    },
    {
      "sha": "c9b9b9de24756fc90b8e39afb286b71c8a71c9b6",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/cluster_commands.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/cluster_commands.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/cluster_commands.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/cluster_commands.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -14,7 +14,7 @@ func (c *ClusterClient) DBSize() *IntCmd {\n \t\treturn nil\n \t})\n \tif err != nil {\n-\t\tcmd.setErr(err)\n+\t\tcmd.SetErr(err)\n \t\treturn cmd\n \t}\n \tcmd.val = size"
    },
    {
      "sha": "266e389232e6ae872edde7a2895bc6f303efa287",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/command.go",
      "status": "modified",
      "additions": 126,
      "deletions": 10,
      "changes": 136,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/command.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/command.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/command.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -15,19 +15,20 @@ import (\n type Cmder interface {\n \tName() string\n \tArgs() []interface{}\n+\tString() string\n \tstringArg(int) string\n \n \treadTimeout() *time.Duration\n \treadReply(rd *proto.Reader) error\n \n-\tsetErr(error)\n+\tSetErr(error)\n \tErr() error\n }\n \n func setCmdsErr(cmds []Cmder, e error) {\n \tfor _, cmd := range cmds {\n \t\tif cmd.Err() == nil {\n-\t\t\tcmd.setErr(e)\n+\t\t\tcmd.SetErr(e)\n \t\t}\n \t}\n }\n@@ -41,16 +42,19 @@ func cmdsFirstErr(cmds []Cmder) error {\n \treturn nil\n }\n \n-func writeCmd(wr *proto.Writer, cmds ...Cmder) error {\n+func writeCmds(wr *proto.Writer, cmds []Cmder) error {\n \tfor _, cmd := range cmds {\n-\t\terr := wr.WriteArgs(cmd.Args())\n-\t\tif err != nil {\n+\t\tif err := writeCmd(wr, cmd); err != nil {\n \t\t\treturn err\n \t\t}\n \t}\n \treturn nil\n }\n \n+func writeCmd(wr *proto.Writer, cmd Cmder) error {\n+\treturn wr.WriteArgs(cmd.Args())\n+}\n+\n func cmdString(cmd Cmder, val interface{}) string {\n \tss := make([]string, 0, len(cmd.Args()))\n \tfor _, arg := range cmd.Args() {\n@@ -119,7 +123,7 @@ func (cmd *baseCmd) stringArg(pos int) string {\n \treturn s\n }\n \n-func (cmd *baseCmd) setErr(e error) {\n+func (cmd *baseCmd) SetErr(e error) {\n \tcmd.err = e\n }\n \n@@ -149,6 +153,10 @@ func NewCmd(args ...interface{}) *Cmd {\n \t}\n }\n \n+func (cmd *Cmd) String() string {\n+\treturn cmdString(cmd, cmd.val)\n+}\n+\n func (cmd *Cmd) Val() interface{} {\n \treturn cmd.val\n }\n@@ -157,7 +165,7 @@ func (cmd *Cmd) Result() (interface{}, error) {\n \treturn cmd.val, cmd.err\n }\n \n-func (cmd *Cmd) String() (string, error) {\n+func (cmd *Cmd) Text() (string, error) {\n \tif cmd.err != nil {\n \t\treturn \"\", cmd.err\n \t}\n@@ -385,6 +393,10 @@ func (cmd *IntCmd) Result() (int64, error) {\n \treturn cmd.val, cmd.err\n }\n \n+func (cmd *IntCmd) Uint64() (uint64, error) {\n+\treturn uint64(cmd.val), cmd.err\n+}\n+\n func (cmd *IntCmd) String() string {\n \treturn cmdString(cmd, cmd.val)\n }\n@@ -999,14 +1011,20 @@ func xMessageSliceParser(rd *proto.Reader, n int64) (interface{}, error) {\n \t\t\t\treturn nil, err\n \t\t\t}\n \n+\t\t\tvar values map[string]interface{}\n+\n \t\t\tv, err := rd.ReadArrayReply(stringInterfaceMapParser)\n \t\t\tif err != nil {\n-\t\t\t\treturn nil, err\n+\t\t\t\tif err != proto.Nil {\n+\t\t\t\t\treturn nil, err\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvalues = v.(map[string]interface{})\n \t\t\t}\n \n \t\t\tmsgs[i] = XMessage{\n \t\t\t\tID:     id,\n-\t\t\t\tValues: v.(map[string]interface{}),\n+\t\t\t\tValues: values,\n \t\t\t}\n \t\t\treturn nil, nil\n \t\t})\n@@ -1285,6 +1303,96 @@ func (cmd *XPendingExtCmd) readReply(rd *proto.Reader) error {\n \n //------------------------------------------------------------------------------\n \n+type XInfoGroupsCmd struct {\n+\tbaseCmd\n+\tval []XInfoGroups\n+}\n+\n+type XInfoGroups struct {\n+\tName            string\n+\tConsumers       int64\n+\tPending         int64\n+\tLastDeliveredID string\n+}\n+\n+var _ Cmder = (*XInfoGroupsCmd)(nil)\n+\n+func NewXInfoGroupsCmd(stream string) *XInfoGroupsCmd {\n+\treturn &XInfoGroupsCmd{\n+\t\tbaseCmd: baseCmd{args: []interface{}{\"xinfo\", \"groups\", stream}},\n+\t}\n+}\n+\n+func (cmd *XInfoGroupsCmd) Val() []XInfoGroups {\n+\treturn cmd.val\n+}\n+\n+func (cmd *XInfoGroupsCmd) Result() ([]XInfoGroups, error) {\n+\treturn cmd.val, cmd.err\n+}\n+\n+func (cmd *XInfoGroupsCmd) String() string {\n+\treturn cmdString(cmd, cmd.val)\n+}\n+\n+func (cmd *XInfoGroupsCmd) readReply(rd *proto.Reader) error {\n+\t_, cmd.err = rd.ReadArrayReply(\n+\t\tfunc(rd *proto.Reader, n int64) (interface{}, error) {\n+\t\t\tfor i := int64(0); i < n; i++ {\n+\t\t\t\tv, err := rd.ReadReply(xGroupInfoParser)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\treturn nil, err\n+\t\t\t\t}\n+\t\t\t\tcmd.val = append(cmd.val, v.(XInfoGroups))\n+\t\t\t}\n+\t\t\treturn nil, nil\n+\t\t})\n+\treturn nil\n+}\n+\n+func xGroupInfoParser(rd *proto.Reader, n int64) (interface{}, error) {\n+\tif n != 8 {\n+\t\treturn nil, fmt.Errorf(\"redis: got %d elements in XINFO GROUPS reply,\"+\n+\t\t\t\"wanted 8\", n)\n+\t}\n+\tvar (\n+\t\terr error\n+\t\tgrp XInfoGroups\n+\t\tkey string\n+\t\tval string\n+\t)\n+\n+\tfor i := 0; i < 4; i++ {\n+\t\tkey, err = rd.ReadString()\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tval, err = rd.ReadString()\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tswitch key {\n+\t\tcase \"name\":\n+\t\t\tgrp.Name = val\n+\t\tcase \"consumers\":\n+\t\t\tgrp.Consumers, err = strconv.ParseInt(val, 0, 64)\n+\t\tcase \"pending\":\n+\t\t\tgrp.Pending, err = strconv.ParseInt(val, 0, 64)\n+\t\tcase \"last-delivered-id\":\n+\t\t\tgrp.LastDeliveredID = val\n+\t\tdefault:\n+\t\t\treturn nil, fmt.Errorf(\"redis: unexpected content %s \"+\n+\t\t\t\t\"in XINFO GROUPS reply\", key)\n+\t\t}\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\treturn grp, err\n+}\n+\n+//------------------------------------------------------------------------------\n+\n type ZSliceCmd struct {\n \tbaseCmd\n \n@@ -1769,7 +1877,6 @@ func (cmd *GeoPosCmd) readReply(rd *proto.Reader) error {\n \t\treturn nil, nil\n \t})\n \treturn cmd.err\n-\n }\n \n //------------------------------------------------------------------------------\n@@ -1912,6 +2019,15 @@ func (c *cmdsInfoCache) Get() (map[string]*CommandInfo, error) {\n \t\tif err != nil {\n \t\t\treturn err\n \t\t}\n+\n+\t\t// Extensions have cmd names in upper case. Convert them to lower case.\n+\t\tfor k, v := range cmds {\n+\t\t\tlower := internal.ToLower(k)\n+\t\t\tif lower != k {\n+\t\t\t\tcmds[lower] = v\n+\t\t\t}\n+\t\t}\n+\n \t\tc.cmds = cmds\n \t\treturn nil\n \t})"
    },
    {
      "sha": "d4447c4d396b9a75e67d37e4b180db037c6c5c51",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/commands.go",
      "status": "modified",
      "additions": 60,
      "deletions": 30,
      "changes": 90,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/commands.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/commands.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/commands.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -34,11 +34,17 @@ func formatSec(dur time.Duration) int64 {\n \n func appendArgs(dst, src []interface{}) []interface{} {\n \tif len(src) == 1 {\n-\t\tif ss, ok := src[0].([]string); ok {\n-\t\t\tfor _, s := range ss {\n+\t\tswitch v := src[0].(type) {\n+\t\tcase []string:\n+\t\t\tfor _, s := range v {\n \t\t\t\tdst = append(dst, s)\n \t\t\t}\n \t\t\treturn dst\n+\t\tcase map[string]interface{}:\n+\t\t\tfor k, v := range v {\n+\t\t\t\tdst = append(dst, k, v)\n+\t\t\t}\n+\t\t\treturn dst\n \t\t}\n \t}\n \n@@ -107,8 +113,8 @@ type Cmdable interface {\n \tIncrBy(key string, value int64) *IntCmd\n \tIncrByFloat(key string, value float64) *FloatCmd\n \tMGet(keys ...string) *SliceCmd\n-\tMSet(pairs ...interface{}) *StatusCmd\n-\tMSetNX(pairs ...interface{}) *BoolCmd\n+\tMSet(values ...interface{}) *StatusCmd\n+\tMSetNX(values ...interface{}) *BoolCmd\n \tSet(key string, value interface{}, expiration time.Duration) *StatusCmd\n \tSetBit(key string, offset int64, value int) *IntCmd\n \tSetNX(key string, value interface{}, expiration time.Duration) *BoolCmd\n@@ -124,8 +130,8 @@ type Cmdable interface {\n \tHKeys(key string) *StringSliceCmd\n \tHLen(key string) *IntCmd\n \tHMGet(key string, fields ...string) *SliceCmd\n-\tHMSet(key string, fields map[string]interface{}) *StatusCmd\n-\tHSet(key, field string, value interface{}) *BoolCmd\n+\tHSet(key string, values ...interface{}) *IntCmd\n+\tHMSet(key string, values ...interface{}) *BoolCmd\n \tHSetNX(key, field string, value interface{}) *BoolCmd\n \tHVals(key string) *StringSliceCmd\n \tBLPop(timeout time.Duration, keys ...string) *StringSliceCmd\n@@ -186,6 +192,7 @@ type Cmdable interface {\n \tXClaimJustID(a *XClaimArgs) *StringSliceCmd\n \tXTrim(key string, maxLen int64) *IntCmd\n \tXTrimApprox(key string, maxLen int64) *IntCmd\n+\tXInfoGroups(key string) *XInfoGroupsCmd\n \tBZPopMax(timeout time.Duration, keys ...string) *ZWithKeyCmd\n \tBZPopMin(timeout time.Duration, keys ...string) *ZWithKeyCmd\n \tZAdd(key string, members ...*Z) *IntCmd\n@@ -799,19 +806,27 @@ func (c cmdable) MGet(keys ...string) *SliceCmd {\n \treturn cmd\n }\n \n-func (c cmdable) MSet(pairs ...interface{}) *StatusCmd {\n-\targs := make([]interface{}, 1, 1+len(pairs))\n+// MSet is like Set but accepts multiple values:\n+//   - MSet(\"key1\", \"value1\", \"key2\", \"value2\")\n+//   - MSet([]string{\"key1\", \"value1\", \"key2\", \"value2\"})\n+//   - MSet(map[string]interface{}{\"key1\": \"value1\", \"key2\": \"value2\"})\n+func (c cmdable) MSet(values ...interface{}) *StatusCmd {\n+\targs := make([]interface{}, 1, 1+len(values))\n \targs[0] = \"mset\"\n-\targs = appendArgs(args, pairs)\n+\targs = appendArgs(args, values)\n \tcmd := NewStatusCmd(args...)\n \t_ = c(cmd)\n \treturn cmd\n }\n \n-func (c cmdable) MSetNX(pairs ...interface{}) *BoolCmd {\n-\targs := make([]interface{}, 1, 1+len(pairs))\n+// MSetNX is like SetNX but accepts multiple values:\n+//   - MSetNX(\"key1\", \"value1\", \"key2\", \"value2\")\n+//   - MSetNX([]string{\"key1\", \"value1\", \"key2\", \"value2\"})\n+//   - MSetNX(map[string]interface{}{\"key1\": \"value1\", \"key2\": \"value2\"})\n+func (c cmdable) MSetNX(values ...interface{}) *BoolCmd {\n+\targs := make([]interface{}, 1, 1+len(values))\n \targs[0] = \"msetnx\"\n-\targs = appendArgs(args, pairs)\n+\targs = appendArgs(args, values)\n \tcmd := NewBoolCmd(args...)\n \t_ = c(cmd)\n \treturn cmd\n@@ -822,7 +837,7 @@ func (c cmdable) MSetNX(pairs ...interface{}) *BoolCmd {\n // Use expiration for `SETEX`-like behavior.\n // Zero expiration means the key has no expiration time.\n func (c cmdable) Set(key string, value interface{}, expiration time.Duration) *StatusCmd {\n-\targs := make([]interface{}, 3, 4)\n+\targs := make([]interface{}, 3, 5)\n \targs[0] = \"set\"\n \targs[1] = key\n \targs[2] = value\n@@ -954,6 +969,8 @@ func (c cmdable) HLen(key string) *IntCmd {\n \treturn cmd\n }\n \n+// HMGet returns the values for the specified fields in the hash stored at key.\n+// It returns an interface{} to distinguish between empty string and nil value.\n func (c cmdable) HMGet(key string, fields ...string) *SliceCmd {\n \targs := make([]interface{}, 2+len(fields))\n \targs[0] = \"hmget\"\n@@ -966,23 +983,29 @@ func (c cmdable) HMGet(key string, fields ...string) *SliceCmd {\n \treturn cmd\n }\n \n-func (c cmdable) HMSet(key string, fields map[string]interface{}) *StatusCmd {\n-\targs := make([]interface{}, 2+len(fields)*2)\n-\targs[0] = \"hmset\"\n+// HSet accepts values in following formats:\n+//   - HMSet(\"myhash\", \"key1\", \"value1\", \"key2\", \"value2\")\n+//   - HMSet(\"myhash\", []string{\"key1\", \"value1\", \"key2\", \"value2\"})\n+//   - HMSet(\"myhash\", map[string]interface{}{\"key1\": \"value1\", \"key2\": \"value2\"})\n+//\n+// Note that it requires Redis v4 for multiple field/value pairs support.\n+func (c cmdable) HSet(key string, values ...interface{}) *IntCmd {\n+\targs := make([]interface{}, 2, 2+len(values))\n+\targs[0] = \"hset\"\n \targs[1] = key\n-\ti := 2\n-\tfor k, v := range fields {\n-\t\targs[i] = k\n-\t\targs[i+1] = v\n-\t\ti += 2\n-\t}\n-\tcmd := NewStatusCmd(args...)\n+\targs = appendArgs(args, values)\n+\tcmd := NewIntCmd(args...)\n \t_ = c(cmd)\n \treturn cmd\n }\n \n-func (c cmdable) HSet(key, field string, value interface{}) *BoolCmd {\n-\tcmd := NewBoolCmd(\"hset\", key, field, value)\n+// HMSet is a deprecated version of HSet left for compatibility with Redis 3.\n+func (c cmdable) HMSet(key string, values ...interface{}) *BoolCmd {\n+\targs := make([]interface{}, 2, 2+len(values))\n+\targs[0] = \"hmset\"\n+\targs[1] = key\n+\targs = appendArgs(args, values)\n+\tcmd := NewBoolCmd(args...)\n \t_ = c(cmd)\n \treturn cmd\n }\n@@ -1387,7 +1410,7 @@ func (c cmdable) XRevRangeN(stream, start, stop string, count int64) *XMessageSl\n }\n \n type XReadArgs struct {\n-\tStreams []string\n+\tStreams []string // list of streams and ids, e.g. stream1 stream2 id1 id2\n \tCount   int64\n \tBlock   time.Duration\n }\n@@ -1403,6 +1426,7 @@ func (c cmdable) XRead(a *XReadArgs) *XStreamSliceCmd {\n \t\targs = append(args, \"block\")\n \t\targs = append(args, int64(a.Block/time.Millisecond))\n \t}\n+\n \targs = append(args, \"streams\")\n \tfor _, s := range a.Streams {\n \t\targs = append(args, s)\n@@ -1571,6 +1595,12 @@ func (c cmdable) XTrimApprox(key string, maxLen int64) *IntCmd {\n \treturn cmd\n }\n \n+func (c cmdable) XInfoGroups(key string) *XInfoGroupsCmd {\n+\tcmd := NewXInfoGroupsCmd(key)\n+\t_ = c(cmd)\n+\treturn cmd\n+}\n+\n //------------------------------------------------------------------------------\n \n // Z represents sorted set member.\n@@ -2512,7 +2542,7 @@ func (c cmdable) GeoAdd(key string, geoLocation ...*GeoLocation) *IntCmd {\n func (c cmdable) GeoRadius(key string, longitude, latitude float64, query *GeoRadiusQuery) *GeoLocationCmd {\n \tcmd := NewGeoLocationCmd(query, \"georadius_ro\", key, longitude, latitude)\n \tif query.Store != \"\" || query.StoreDist != \"\" {\n-\t\tcmd.setErr(errors.New(\"GeoRadius does not support Store or StoreDist\"))\n+\t\tcmd.SetErr(errors.New(\"GeoRadius does not support Store or StoreDist\"))\n \t\treturn cmd\n \t}\n \t_ = c(cmd)\n@@ -2524,7 +2554,7 @@ func (c cmdable) GeoRadiusStore(key string, longitude, latitude float64, query *\n \targs := geoLocationArgs(query, \"georadius\", key, longitude, latitude)\n \tcmd := NewIntCmd(args...)\n \tif query.Store == \"\" && query.StoreDist == \"\" {\n-\t\tcmd.setErr(errors.New(\"GeoRadiusStore requires Store or StoreDist\"))\n+\t\tcmd.SetErr(errors.New(\"GeoRadiusStore requires Store or StoreDist\"))\n \t\treturn cmd\n \t}\n \t_ = c(cmd)\n@@ -2535,7 +2565,7 @@ func (c cmdable) GeoRadiusStore(key string, longitude, latitude float64, query *\n func (c cmdable) GeoRadiusByMember(key, member string, query *GeoRadiusQuery) *GeoLocationCmd {\n \tcmd := NewGeoLocationCmd(query, \"georadiusbymember_ro\", key, member)\n \tif query.Store != \"\" || query.StoreDist != \"\" {\n-\t\tcmd.setErr(errors.New(\"GeoRadiusByMember does not support Store or StoreDist\"))\n+\t\tcmd.SetErr(errors.New(\"GeoRadiusByMember does not support Store or StoreDist\"))\n \t\treturn cmd\n \t}\n \t_ = c(cmd)\n@@ -2547,7 +2577,7 @@ func (c cmdable) GeoRadiusByMemberStore(key, member string, query *GeoRadiusQuer\n \targs := geoLocationArgs(query, \"georadiusbymember\", key, member)\n \tcmd := NewIntCmd(args...)\n \tif query.Store == \"\" && query.StoreDist == \"\" {\n-\t\tcmd.setErr(errors.New(\"GeoRadiusByMemberStore requires Store or StoreDist\"))\n+\t\tcmd.SetErr(errors.New(\"GeoRadiusByMemberStore requires Store or StoreDist\"))\n \t\treturn cmd\n \t}\n \t_ = c(cmd)"
    },
    {
      "sha": "e3a4dec54a8ae3004bbefde5c4a7f68f8f6654d3",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/go.mod",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/go.mod?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -1,8 +1,15 @@\n module github.com/go-redis/redis/v7\n \n require (\n-\tgithub.com/onsi/ginkgo v1.8.0\n-\tgithub.com/onsi/gomega v1.5.0\n+\tgithub.com/golang/protobuf v1.3.2 // indirect\n+\tgithub.com/kr/pretty v0.1.0 // indirect\n+\tgithub.com/onsi/ginkgo v1.10.1\n+\tgithub.com/onsi/gomega v1.7.0\n+\tgolang.org/x/net v0.0.0-20190923162816-aa69164e4478 // indirect\n+\tgolang.org/x/sys v0.0.0-20191010194322-b09406accb47 // indirect\n+\tgolang.org/x/text v0.3.2 // indirect\n+\tgopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 // indirect\n+\tgopkg.in/yaml.v2 v2.2.4 // indirect\n )\n \n go 1.11"
    },
    {
      "sha": "6a04dbb63aa24dc2c6c704c32cb2b874a6d30d51",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/go.sum",
      "status": "modified",
      "additions": 24,
      "deletions": 4,
      "changes": 28,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/go.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/go.sum?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -2,26 +2,46 @@ github.com/fsnotify/fsnotify v1.4.7 h1:IXs+QLmnXW2CcXuY+8Mzv/fWEsPGWxqefPtCP5CnV\n github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\n github.com/golang/protobuf v1.2.0 h1:P3YflyNX/ehuJFLhxviNdFxQPkGK5cDcApsge1SqnvM=\n github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\n+github.com/golang/protobuf v1.3.2 h1:6nsPYzhq5kReh6QImI3k5qWzO4PEbvbIW2cwSfR/6xs=\n+github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\n github.com/hpcloud/tail v1.0.0 h1:nfCOvKYfkgYP8hkirhJocXT2+zOD8yUNjXaWfTlyFKI=\n github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\n+github.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\n+github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\n+github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\n+github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\n+github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\n github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n-github.com/onsi/ginkgo v1.8.0 h1:VkHVNpR4iVnU8XQR6DBm8BqYjN7CRzw+xKUbVVbbW9w=\n-github.com/onsi/ginkgo v1.8.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n-github.com/onsi/gomega v1.5.0 h1:izbySO9zDPmjJ8rDjLvkA2zJHIo+HkYXHnf7eN7SSyo=\n-github.com/onsi/gomega v1.5.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\n+github.com/onsi/ginkgo v1.10.1 h1:q/mM8GF/n0shIN8SaAZ0V+jnLPzen6WIVZdiwrRlMlo=\n+github.com/onsi/ginkgo v1.10.1/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n+github.com/onsi/gomega v1.7.0 h1:XPnZz8VVBHjVsy1vzJmRwIcSwiUO+JFfrv/xGiigmME=\n+github.com/onsi/gomega v1.7.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\n+golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\n golang.org/x/net v0.0.0-20180906233101-161cd47e91fd h1:nTDtHvHSdCn1m6ITfMRqtOd/9+7a3s8RBNOZ3eYZzJA=\n golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n+golang.org/x/net v0.0.0-20190923162816-aa69164e4478 h1:l5EDrHhldLYb3ZRHDUhXF7Om7MvYXnkV9/iQNo1lX6g=\n+golang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f h1:wMNYb4v58l5UBM7MYRLPG6ZhfOqbKu7X5eyFl8ZhKvA=\n golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e h1:o3PsSEY8E4eXWkXrIP9YJALUkVZqzHJT5DOasTyn8Vs=\n golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n+golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n+golang.org/x/sys v0.0.0-20191010194322-b09406accb47 h1:/XfQ9z7ib8eEJX2hdgFTZJ/ntt0swNk5oYBziWeTCvY=\n+golang.org/x/sys v0.0.0-20191010194322-b09406accb47/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n golang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=\n golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\n+golang.org/x/text v0.3.2 h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=\n+golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\n+golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\n gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\n gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\n+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n gopkg.in/fsnotify.v1 v1.4.7 h1:xOHLXZwVvI9hhs+cLKq5+I5onOuwQLhQwiu63xxlHs4=\n gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\n gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=\n gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\n gopkg.in/yaml.v2 v2.2.1 h1:mUhvW9EsL+naU5Q3cakzfE91YhliOondGd6ZrsDBHQE=\n gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n+gopkg.in/yaml.v2 v2.2.4 h1:/eiJrUcujPVeJ3xlSWaiNi3uSVmDGBK1pDHUHAnao1I=\n+gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI="
    },
    {
      "sha": "bbf5b30048e7c525d837d6ab3cf5bd2f5510ab50",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/internal/pool/pool.go",
      "status": "modified",
      "additions": 20,
      "deletions": 9,
      "changes": 29,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/internal/pool/pool.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/internal/pool/pool.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/internal/pool/pool.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -78,7 +78,8 @@ type ConnPool struct {\n \n \tstats Stats\n \n-\t_closed uint32 // atomic\n+\t_closed  uint32 // atomic\n+\tclosedCh chan struct{}\n }\n \n var _ Pooler = (*ConnPool)(nil)\n@@ -90,6 +91,7 @@ func NewConnPool(opt *Options) *ConnPool {\n \t\tqueue:     make(chan struct{}, opt.PoolSize),\n \t\tconns:     make([]*Conn, 0, opt.PoolSize),\n \t\tidleConns: make([]*Conn, 0, opt.PoolSize),\n+\t\tclosedCh:  make(chan struct{}),\n \t}\n \n \tp.checkMinIdleConns()\n@@ -416,6 +418,7 @@ func (p *ConnPool) Close() error {\n \tif !atomic.CompareAndSwapUint32(&p._closed, 0, 1) {\n \t\treturn ErrClosed\n \t}\n+\tclose(p.closedCh)\n \n \tvar firstErr error\n \tp.connsMu.Lock()\n@@ -437,14 +440,22 @@ func (p *ConnPool) reaper(frequency time.Duration) {\n \tticker := time.NewTicker(frequency)\n \tdefer ticker.Stop()\n \n-\tfor range ticker.C {\n-\t\tif p.closed() {\n-\t\t\tbreak\n-\t\t}\n-\t\t_, err := p.ReapStaleConns()\n-\t\tif err != nil {\n-\t\t\tinternal.Logger.Printf(\"ReapStaleConns failed: %s\", err)\n-\t\t\tcontinue\n+\tfor {\n+\t\tselect {\n+\t\tcase <-ticker.C:\n+\t\t\t// It is possible that ticker and closedCh arrive together,\n+\t\t\t// and select pseudo-randomly pick ticker case, we double\n+\t\t\t// check here to prevent being executed after closed.\n+\t\t\tif p.closed() {\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\t_, err := p.ReapStaleConns()\n+\t\t\tif err != nil {\n+\t\t\t\tinternal.Logger.Printf(\"ReapStaleConns failed: %s\", err)\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\tcase <-p.closedCh:\n+\t\t\treturn\n \t\t}\n \t}\n }"
    },
    {
      "sha": "04758a00d4178a6561e3faf259e7ac2df2d973e8",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/internal/pool/pool_single.go",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/internal/pool/pool_single.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/internal/pool/pool_single.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/internal/pool/pool_single.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -19,7 +19,11 @@ type BadConnError struct {\n var _ error = (*BadConnError)(nil)\n \n func (e BadConnError) Error() string {\n-\treturn \"pg: Conn is in a bad state\"\n+\ts := \"redis: Conn is in a bad state\"\n+\tif e.wrapped != nil {\n+\t\ts += \": \" + e.wrapped.Error()\n+\t}\n+\treturn s\n }\n \n func (e BadConnError) Unwrap() error {\n@@ -94,7 +98,7 @@ func (p *SingleConnPool) Get(ctx context.Context) (*Conn, error) {\n \t\t\tpanic(\"not reached\")\n \t\t}\n \t}\n-\treturn nil, fmt.Errorf(\"pg: SingleConnPool.Get: infinite loop\")\n+\treturn nil, fmt.Errorf(\"redis: SingleConnPool.Get: infinite loop\")\n }\n \n func (p *SingleConnPool) Put(cn *Conn) {\n@@ -166,7 +170,7 @@ func (p *SingleConnPool) Close() error {\n \t\t}\n \t}\n \n-\treturn fmt.Errorf(\"pg: SingleConnPool.Close: infinite loop\")\n+\treturn fmt.Errorf(\"redis: SingleConnPool.Close: infinite loop\")\n }\n \n func (p *SingleConnPool) Reset() error {\n@@ -182,12 +186,12 @@ func (p *SingleConnPool) Reset() error {\n \t\tp.pool.Remove(cn, ErrClosed)\n \t\tp._badConnError.Store(BadConnError{wrapped: nil})\n \tdefault:\n-\t\treturn fmt.Errorf(\"pg: SingleConnPool does not have a Conn\")\n+\t\treturn fmt.Errorf(\"redis: SingleConnPool does not have a Conn\")\n \t}\n \n \tif !atomic.CompareAndSwapUint32(&p.state, stateInited, stateDefault) {\n \t\tstate := atomic.LoadUint32(&p.state)\n-\t\treturn fmt.Errorf(\"pg: invalid SingleConnPool state: %d\", state)\n+\t\treturn fmt.Errorf(\"redis: invalid SingleConnPool state: %d\", state)\n \t}\n \n \treturn nil"
    },
    {
      "sha": "621d3a37167505a35056cd125432d1b7ec198e0e",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/options.go",
      "status": "modified",
      "additions": 20,
      "deletions": 5,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/options.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/options.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/options.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -21,8 +21,8 @@ type Limiter interface {\n \t// If operation is allowed client must ReportResult of the operation\n \t// whether it is a success or a failure.\n \tAllow() error\n-\t// ReportResult reports the result of previously allowed operation.\n-\t// nil indicates a success, non-nil error indicates a failure.\n+\t// ReportResult reports the result of the previously allowed operation.\n+\t// nil indicates a success, non-nil error usually indicates a failure.\n \tReportResult(result error)\n }\n \n@@ -96,15 +96,22 @@ type Options struct {\n \n \t// TLS Config to use. When set TLS will be negotiated.\n \tTLSConfig *tls.Config\n+\n+\t// Limiter interface used to implemented circuit breaker or rate limiter.\n+\tLimiter Limiter\n }\n \n func (opt *Options) init() {\n-\tif opt.Network == \"\" {\n-\t\topt.Network = \"tcp\"\n-\t}\n \tif opt.Addr == \"\" {\n \t\topt.Addr = \"localhost:6379\"\n \t}\n+\tif opt.Network == \"\" {\n+\t\tif strings.HasPrefix(opt.Addr, \"/\") {\n+\t\t\topt.Network = \"unix\"\n+\t\t} else {\n+\t\t\topt.Network = \"tcp\"\n+\t\t}\n+\t}\n \tif opt.Dialer == nil {\n \t\topt.Dialer = func(ctx context.Context, network, addr string) (net.Conn, error) {\n \t\t\tnetDialer := &net.Dialer{\n@@ -145,6 +152,9 @@ func (opt *Options) init() {\n \t\topt.IdleCheckFrequency = time.Minute\n \t}\n \n+\tif opt.MaxRetries == -1 {\n+\t\topt.MaxRetries = 0\n+\t}\n \tswitch opt.MinRetryBackoff {\n \tcase -1:\n \t\topt.MinRetryBackoff = 0\n@@ -159,6 +169,11 @@ func (opt *Options) init() {\n \t}\n }\n \n+func (opt *Options) clone() *Options {\n+\tclone := *opt\n+\treturn &clone\n+}\n+\n // ParseURL parses an URL into Options that can be used to connect to Redis.\n func ParseURL(redisURL string) (*Options, error) {\n \to := &Options{Network: \"tcp\"}"
    },
    {
      "sha": "e11640932a4bb00300694578b4f27b1affd668c5",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/pubsub.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/pubsub.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/pubsub.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/pubsub.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -468,6 +468,7 @@ func (c *PubSub) initPing() {\n \t\t\t\t\t}\n \t\t\t\t\tc.mu.Lock()\n \t\t\t\t\tc.reconnect(pingErr)\n+\t\t\t\t\thealthy = true\n \t\t\t\t\tc.mu.Unlock()\n \t\t\t\t}\n \t\t\tcase <-c.exit:"
    },
    {
      "sha": "93032579c10395fb8e6509160b9cd828bc197e9b",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/redis.go",
      "status": "modified",
      "additions": 89,
      "deletions": 44,
      "changes": 133,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/redis.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/redis.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/redis.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -32,10 +32,16 @@ type hooks struct {\n \thooks []Hook\n }\n \n-func (hs hooks) Lock() {\n+func (hs *hooks) lock() {\n \ths.hooks = hs.hooks[:len(hs.hooks):len(hs.hooks)]\n }\n \n+func (hs hooks) clone() hooks {\n+\tclone := hs\n+\tclone.lock()\n+\treturn clone\n+}\n+\n func (hs *hooks) AddHook(hook Hook) {\n \ths.hooks = append(hs.hooks, hook)\n }\n@@ -45,13 +51,14 @@ func (hs hooks) process(\n ) error {\n \tctx, err := hs.beforeProcess(ctx, cmd)\n \tif err != nil {\n+\t\tcmd.SetErr(err)\n \t\treturn err\n \t}\n \n \tcmdErr := fn(ctx, cmd)\n \n-\terr = hs.afterProcess(ctx, cmd)\n-\tif err != nil {\n+\tif err := hs.afterProcess(ctx, cmd); err != nil {\n+\t\tcmd.SetErr(err)\n \t\treturn err\n \t}\n \n@@ -85,13 +92,14 @@ func (hs hooks) processPipeline(\n ) error {\n \tctx, err := hs.beforeProcessPipeline(ctx, cmds)\n \tif err != nil {\n+\t\tsetCmdsErr(cmds, err)\n \t\treturn err\n \t}\n \n \tcmdsErr := fn(ctx, cmds)\n \n-\terr = hs.afterProcessPipeline(ctx, cmds)\n-\tif err != nil {\n+\tif err := hs.afterProcessPipeline(ctx, cmds); err != nil {\n+\t\tsetCmdsErr(cmds, err)\n \t\treturn err\n \t}\n \n@@ -120,16 +128,45 @@ func (hs hooks) afterProcessPipeline(ctx context.Context, cmds []Cmder) error {\n \treturn firstErr\n }\n \n+func (hs hooks) processTxPipeline(\n+\tctx context.Context, cmds []Cmder, fn func(context.Context, []Cmder) error,\n+) error {\n+\tcmds = wrapMultiExec(cmds)\n+\treturn hs.processPipeline(ctx, cmds, fn)\n+}\n+\n //------------------------------------------------------------------------------\n \n type baseClient struct {\n \topt      *Options\n \tconnPool pool.Pooler\n-\tlimiter  Limiter\n \n \tonClose func() error // hook called when client is closed\n }\n \n+func newBaseClient(opt *Options, connPool pool.Pooler) *baseClient {\n+\treturn &baseClient{\n+\t\topt:      opt,\n+\t\tconnPool: connPool,\n+\t}\n+}\n+\n+func (c *baseClient) clone() *baseClient {\n+\tclone := *c\n+\treturn &clone\n+}\n+\n+func (c *baseClient) withTimeout(timeout time.Duration) *baseClient {\n+\topt := c.opt.clone()\n+\topt.ReadTimeout = timeout\n+\topt.WriteTimeout = timeout\n+\n+\tclone := c.clone()\n+\tclone.opt = opt\n+\n+\treturn clone\n+}\n+\n func (c *baseClient) String() string {\n \treturn fmt.Sprintf(\"Redis<%s db:%d>\", c.getAddr(), c.opt.DB)\n }\n@@ -150,17 +187,17 @@ func (c *baseClient) newConn(ctx context.Context) (*pool.Conn, error) {\n }\n \n func (c *baseClient) getConn(ctx context.Context) (*pool.Conn, error) {\n-\tif c.limiter != nil {\n-\t\terr := c.limiter.Allow()\n+\tif c.opt.Limiter != nil {\n+\t\terr := c.opt.Limiter.Allow()\n \t\tif err != nil {\n \t\t\treturn nil, err\n \t\t}\n \t}\n \n \tcn, err := c._getConn(ctx)\n \tif err != nil {\n-\t\tif c.limiter != nil {\n-\t\t\tc.limiter.ReportResult(err)\n+\t\tif c.opt.Limiter != nil {\n+\t\t\tc.opt.Limiter.ReportResult(err)\n \t\t}\n \t\treturn nil, err\n \t}\n@@ -228,8 +265,8 @@ func (c *baseClient) initConn(ctx context.Context, cn *pool.Conn) error {\n }\n \n func (c *baseClient) releaseConn(cn *pool.Conn, err error) {\n-\tif c.limiter != nil {\n-\t\tc.limiter.ReportResult(err)\n+\tif c.opt.Limiter != nil {\n+\t\tc.opt.Limiter.ReportResult(err)\n \t}\n \n \tif isBadConn(err, false) {\n@@ -257,7 +294,7 @@ func (c *baseClient) withConn(\n func (c *baseClient) process(ctx context.Context, cmd Cmder) error {\n \terr := c._process(ctx, cmd)\n \tif err != nil {\n-\t\tcmd.setErr(err)\n+\t\tcmd.SetErr(err)\n \t\treturn err\n \t}\n \treturn nil\n@@ -381,7 +418,7 @@ func (c *baseClient) pipelineProcessCmds(\n \tctx context.Context, cn *pool.Conn, cmds []Cmder,\n ) (bool, error) {\n \terr := cn.WithWriter(ctx, c.opt.WriteTimeout, func(wr *proto.Writer) error {\n-\t\treturn writeCmd(wr, cmds...)\n+\t\treturn writeCmds(wr, cmds)\n \t})\n \tif err != nil {\n \t\treturn true, err\n@@ -407,41 +444,46 @@ func (c *baseClient) txPipelineProcessCmds(\n \tctx context.Context, cn *pool.Conn, cmds []Cmder,\n ) (bool, error) {\n \terr := cn.WithWriter(ctx, c.opt.WriteTimeout, func(wr *proto.Writer) error {\n-\t\treturn txPipelineWriteMulti(wr, cmds)\n+\t\treturn writeCmds(wr, cmds)\n \t})\n \tif err != nil {\n \t\treturn true, err\n \t}\n \n \terr = cn.WithReader(ctx, c.opt.ReadTimeout, func(rd *proto.Reader) error {\n-\t\terr := txPipelineReadQueued(rd, cmds)\n+\t\tstatusCmd := cmds[0].(*StatusCmd)\n+\t\t// Trim multi and exec.\n+\t\tcmds = cmds[1 : len(cmds)-1]\n+\n+\t\terr := txPipelineReadQueued(rd, statusCmd, cmds)\n \t\tif err != nil {\n \t\t\treturn err\n \t\t}\n+\n \t\treturn pipelineReadCmds(rd, cmds)\n \t})\n \treturn false, err\n }\n \n-func txPipelineWriteMulti(wr *proto.Writer, cmds []Cmder) error {\n-\tmultiExec := make([]Cmder, 0, len(cmds)+2)\n-\tmultiExec = append(multiExec, NewStatusCmd(\"MULTI\"))\n-\tmultiExec = append(multiExec, cmds...)\n-\tmultiExec = append(multiExec, NewSliceCmd(\"EXEC\"))\n-\treturn writeCmd(wr, multiExec...)\n+func wrapMultiExec(cmds []Cmder) []Cmder {\n+\tif len(cmds) == 0 {\n+\t\tpanic(\"not reached\")\n+\t}\n+\tcmds = append(cmds, make([]Cmder, 2)...)\n+\tcopy(cmds[1:], cmds[:len(cmds)-2])\n+\tcmds[0] = NewStatusCmd(\"multi\")\n+\tcmds[len(cmds)-1] = NewSliceCmd(\"exec\")\n+\treturn cmds\n }\n \n-func txPipelineReadQueued(rd *proto.Reader, cmds []Cmder) error {\n+func txPipelineReadQueued(rd *proto.Reader, statusCmd *StatusCmd, cmds []Cmder) error {\n \t// Parse queued replies.\n-\tvar statusCmd StatusCmd\n-\terr := statusCmd.readReply(rd)\n-\tif err != nil {\n+\tif err := statusCmd.readReply(rd); err != nil {\n \t\treturn err\n \t}\n \n \tfor range cmds {\n-\t\terr = statusCmd.readReply(rd)\n-\t\tif err != nil && !isRedisError(err) {\n+\t\tif err := statusCmd.readReply(rd); err != nil && !isRedisError(err) {\n \t\t\treturn err\n \t\t}\n \t}\n@@ -474,7 +516,7 @@ func txPipelineReadQueued(rd *proto.Reader, cmds []Cmder) error {\n // underlying connections. It's safe for concurrent use by multiple\n // goroutines.\n type Client struct {\n-\tbaseClient\n+\t*baseClient\n \tcmdable\n \thooks\n \tctx context.Context\n@@ -485,17 +527,27 @@ func NewClient(opt *Options) *Client {\n \topt.init()\n \n \tc := Client{\n-\t\tbaseClient: baseClient{\n-\t\t\topt:      opt,\n-\t\t\tconnPool: newConnPool(opt),\n-\t\t},\n-\t\tctx: context.Background(),\n+\t\tbaseClient: newBaseClient(opt, newConnPool(opt)),\n+\t\tctx:        context.Background(),\n \t}\n \tc.cmdable = c.Process\n \n \treturn &c\n }\n \n+func (c *Client) clone() *Client {\n+\tclone := *c\n+\tclone.cmdable = clone.Process\n+\tclone.hooks.lock()\n+\treturn &clone\n+}\n+\n+func (c *Client) WithTimeout(timeout time.Duration) *Client {\n+\tclone := c.clone()\n+\tclone.baseClient = c.baseClient.withTimeout(timeout)\n+\treturn clone\n+}\n+\n func (c *Client) Context() context.Context {\n \treturn c.ctx\n }\n@@ -504,11 +556,9 @@ func (c *Client) WithContext(ctx context.Context) *Client {\n \tif ctx == nil {\n \t\tpanic(\"nil context\")\n \t}\n-\tclone := *c\n-\tclone.cmdable = clone.Process\n-\tclone.hooks.Lock()\n+\tclone := c.clone()\n \tclone.ctx = ctx\n-\treturn &clone\n+\treturn clone\n }\n \n func (c *Client) Conn() *Conn {\n@@ -539,19 +589,14 @@ func (c *Client) processPipeline(ctx context.Context, cmds []Cmder) error {\n }\n \n func (c *Client) processTxPipeline(ctx context.Context, cmds []Cmder) error {\n-\treturn c.hooks.processPipeline(ctx, cmds, c.baseClient.processTxPipeline)\n+\treturn c.hooks.processTxPipeline(ctx, cmds, c.baseClient.processTxPipeline)\n }\n \n // Options returns read-only Options that were used to create the client.\n func (c *Client) Options() *Options {\n \treturn c.opt\n }\n \n-func (c *Client) SetLimiter(l Limiter) *Client {\n-\tc.limiter = l\n-\treturn c\n-}\n-\n type PoolStats pool.Stats\n \n // PoolStats returns connection pool stats."
    },
    {
      "sha": "4b7de63a1295372681d0b4bfd3530c9eca5d1dc3",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/result.go",
      "status": "modified",
      "additions": 42,
      "deletions": 18,
      "changes": 60,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/result.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/result.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/result.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -6,111 +6,111 @@ import \"time\"\n func NewCmdResult(val interface{}, err error) *Cmd {\n \tvar cmd Cmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewSliceResult returns a SliceCmd initialised with val and err for testing\n func NewSliceResult(val []interface{}, err error) *SliceCmd {\n \tvar cmd SliceCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewStatusResult returns a StatusCmd initialised with val and err for testing\n func NewStatusResult(val string, err error) *StatusCmd {\n \tvar cmd StatusCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewIntResult returns an IntCmd initialised with val and err for testing\n func NewIntResult(val int64, err error) *IntCmd {\n \tvar cmd IntCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewDurationResult returns a DurationCmd initialised with val and err for testing\n func NewDurationResult(val time.Duration, err error) *DurationCmd {\n \tvar cmd DurationCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewBoolResult returns a BoolCmd initialised with val and err for testing\n func NewBoolResult(val bool, err error) *BoolCmd {\n \tvar cmd BoolCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewStringResult returns a StringCmd initialised with val and err for testing\n func NewStringResult(val string, err error) *StringCmd {\n \tvar cmd StringCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewFloatResult returns a FloatCmd initialised with val and err for testing\n func NewFloatResult(val float64, err error) *FloatCmd {\n \tvar cmd FloatCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewStringSliceResult returns a StringSliceCmd initialised with val and err for testing\n func NewStringSliceResult(val []string, err error) *StringSliceCmd {\n \tvar cmd StringSliceCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewBoolSliceResult returns a BoolSliceCmd initialised with val and err for testing\n func NewBoolSliceResult(val []bool, err error) *BoolSliceCmd {\n \tvar cmd BoolSliceCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewStringStringMapResult returns a StringStringMapCmd initialised with val and err for testing\n func NewStringStringMapResult(val map[string]string, err error) *StringStringMapCmd {\n \tvar cmd StringStringMapCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewStringIntMapCmdResult returns a StringIntMapCmd initialised with val and err for testing\n func NewStringIntMapCmdResult(val map[string]int64, err error) *StringIntMapCmd {\n \tvar cmd StringIntMapCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewZSliceCmdResult returns a ZSliceCmd initialised with val and err for testing\n func NewZSliceCmdResult(val []Z, err error) *ZSliceCmd {\n \tvar cmd ZSliceCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewZWithKeyCmdResult returns a NewZWithKeyCmd initialised with val and err for testing\n func NewZWithKeyCmdResult(val *ZWithKey, err error) *ZWithKeyCmd {\n \tvar cmd ZWithKeyCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n@@ -119,30 +119,54 @@ func NewScanCmdResult(keys []string, cursor uint64, err error) *ScanCmd {\n \tvar cmd ScanCmd\n \tcmd.page = keys\n \tcmd.cursor = cursor\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewClusterSlotsCmdResult returns a ClusterSlotsCmd initialised with val and err for testing\n func NewClusterSlotsCmdResult(val []ClusterSlot, err error) *ClusterSlotsCmd {\n \tvar cmd ClusterSlotsCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewGeoLocationCmdResult returns a GeoLocationCmd initialised with val and err for testing\n func NewGeoLocationCmdResult(val []GeoLocation, err error) *GeoLocationCmd {\n \tvar cmd GeoLocationCmd\n \tcmd.locations = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n+\treturn &cmd\n+}\n+\n+// NewGeoPosCmdResult returns a GeoPosCmd initialised with val and err for testing\n+func NewGeoPosCmdResult(val []*GeoPos, err error) *GeoPosCmd {\n+\tvar cmd GeoPosCmd\n+\tcmd.val = val\n+\tcmd.SetErr(err)\n \treturn &cmd\n }\n \n // NewCommandsInfoCmdResult returns a CommandsInfoCmd initialised with val and err for testing\n func NewCommandsInfoCmdResult(val map[string]*CommandInfo, err error) *CommandsInfoCmd {\n \tvar cmd CommandsInfoCmd\n \tcmd.val = val\n-\tcmd.setErr(err)\n+\tcmd.SetErr(err)\n+\treturn &cmd\n+}\n+\n+// NewXMessageSliceCmdResult returns a XMessageSliceCmd initialised with val and err for testing\n+func NewXMessageSliceCmdResult(val []XMessage, err error) *XMessageSliceCmd {\n+\tvar cmd XMessageSliceCmd\n+\tcmd.val = val\n+\tcmd.SetErr(err)\n+\treturn &cmd\n+}\n+\n+// NewXStreamSliceCmdResult returns a XStreamSliceCmd initialised with val and err for testing\n+func NewXStreamSliceCmdResult(val []XStream, err error) *XStreamSliceCmd {\n+\tvar cmd XStreamSliceCmd\n+\tcmd.val = val\n+\tcmd.SetErr(err)\n \treturn &cmd\n }"
    },
    {
      "sha": "e1b499174aa5ed258b1b6876e100d2dedb001a07",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/ring.go",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/ring.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/ring.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/ring.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -407,7 +407,7 @@ func (c *Ring) WithContext(ctx context.Context) *Ring {\n \t}\n \tclone := *c\n \tclone.cmdable = clone.Process\n-\tclone.hooks.Lock()\n+\tclone.hooks.lock()\n \tclone.ctx = ctx\n \treturn &clone\n }\n@@ -561,7 +561,7 @@ func (c *Ring) cmdShard(cmd Cmder) (*ringShard, error) {\n func (c *Ring) process(ctx context.Context, cmd Cmder) error {\n \terr := c._process(ctx, cmd)\n \tif err != nil {\n-\t\tcmd.setErr(err)\n+\t\tcmd.SetErr(err)\n \t\treturn err\n \t}\n \treturn nil\n@@ -581,7 +581,7 @@ func (c *Ring) _process(ctx context.Context, cmd Cmder) error {\n \t\t\treturn err\n \t\t}\n \n-\t\tlastErr = shard.Client._process(ctx, cmd)\n+\t\tlastErr = shard.Client.ProcessContext(ctx, cmd)\n \t\tif lastErr == nil || !isRetryableError(lastErr, cmd.readTimeout() == nil) {\n \t\t\treturn lastErr\n \t\t}\n@@ -646,10 +646,7 @@ func (c *Ring) generalProcessPipeline(\n \t\tgo func(hash string, cmds []Cmder) {\n \t\t\tdefer wg.Done()\n \n-\t\t\terr := c.processShardPipeline(ctx, hash, cmds, tx)\n-\t\t\tif err != nil {\n-\t\t\t\tsetCmdsErr(cmds, err)\n-\t\t\t}\n+\t\t\t_ = c.processShardPipeline(ctx, hash, cmds, tx)\n \t\t}(hash, cmds)\n \t}\n \n@@ -663,15 +660,14 @@ func (c *Ring) processShardPipeline(\n \t//TODO: retry?\n \tshard, err := c.shards.GetByHash(hash)\n \tif err != nil {\n+\t\tsetCmdsErr(cmds, err)\n \t\treturn err\n \t}\n \n \tif tx {\n-\t\terr = shard.Client._generalProcessPipeline(\n-\t\t\tctx, cmds, shard.Client.txPipelineProcessCmds)\n+\t\terr = shard.Client.processTxPipeline(ctx, cmds)\n \t} else {\n-\t\terr = shard.Client._generalProcessPipeline(\n-\t\t\tctx, cmds, shard.Client.pipelineProcessCmds)\n+\t\terr = shard.Client.processPipeline(ctx, cmds)\n \t}\n \treturn err\n }"
    },
    {
      "sha": "6487ef63f17bfc2c436a764e68f713eb8df2197f",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/sentinel.go",
      "status": "modified",
      "additions": 51,
      "deletions": 42,
      "changes": 93,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/sentinel.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/sentinel.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/sentinel.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -59,7 +59,9 @@ func (opt *FailoverOptions) options() *Options {\n \t\tDB:       opt.DB,\n \t\tPassword: opt.Password,\n \n-\t\tMaxRetries: opt.MaxRetries,\n+\t\tMaxRetries:      opt.MaxRetries,\n+\t\tMinRetryBackoff: opt.MinRetryBackoff,\n+\t\tMaxRetryBackoff: opt.MaxRetryBackoff,\n \n \t\tDialTimeout:  opt.DialTimeout,\n \t\tReadTimeout:  opt.ReadTimeout,\n@@ -69,6 +71,8 @@ func (opt *FailoverOptions) options() *Options {\n \t\tPoolTimeout:        opt.PoolTimeout,\n \t\tIdleTimeout:        opt.IdleTimeout,\n \t\tIdleCheckFrequency: opt.IdleCheckFrequency,\n+\t\tMinIdleConns:       opt.MinIdleConns,\n+\t\tMaxConnAge:         opt.MaxConnAge,\n \n \t\tTLSConfig: opt.TLSConfig,\n \t}\n@@ -90,14 +94,11 @@ func NewFailoverClient(failoverOpt *FailoverOptions) *Client {\n \t}\n \n \tc := Client{\n-\t\tbaseClient: baseClient{\n-\t\t\topt:      opt,\n-\t\t\tconnPool: failover.Pool(),\n-\t\t\tonClose:  failover.Close,\n-\t\t},\n-\t\tctx: context.Background(),\n+\t\tbaseClient: newBaseClient(opt, failover.Pool()),\n+\t\tctx:        context.Background(),\n \t}\n \tc.cmdable = c.Process\n+\tc.onClose = failover.Close\n \n \treturn &c\n }\n@@ -301,6 +302,19 @@ func (c *sentinelFailover) Close() error {\n \treturn nil\n }\n \n+func (c *sentinelFailover) closeSentinel() error {\n+\tfirstErr := c.pubsub.Close()\n+\tc.pubsub = nil\n+\n+\terr := c.sentinel.Close()\n+\tif err != nil && firstErr == nil {\n+\t\tfirstErr = err\n+\t}\n+\tc.sentinel = nil\n+\n+\treturn firstErr\n+}\n+\n func (c *sentinelFailover) Pool() *pool.ConnPool {\n \tc.poolOnce.Do(func() {\n \t\topt := *c.opt\n@@ -331,17 +345,32 @@ func (c *sentinelFailover) MasterAddr() (string, error) {\n }\n \n func (c *sentinelFailover) masterAddr() (string, error) {\n-\taddr := c.getMasterAddr()\n-\tif addr != \"\" {\n-\t\treturn addr, nil\n+\tc.mu.RLock()\n+\tsentinel := c.sentinel\n+\tc.mu.RUnlock()\n+\n+\tif sentinel != nil {\n+\t\taddr := c.getMasterAddr(sentinel)\n+\t\tif addr != \"\" {\n+\t\t\treturn addr, nil\n+\t\t}\n \t}\n \n \tc.mu.Lock()\n \tdefer c.mu.Unlock()\n \n+\tif c.sentinel != nil {\n+\t\taddr := c.getMasterAddr(c.sentinel)\n+\t\tif addr != \"\" {\n+\t\t\treturn addr, nil\n+\t\t}\n+\t\t_ = c.closeSentinel()\n+\t}\n+\n \tfor i, sentinelAddr := range c.sentinelAddrs {\n \t\tsentinel := NewSentinelClient(&Options{\n-\t\t\tAddr: sentinelAddr,\n+\t\t\tAddr:   sentinelAddr,\n+\t\t\tDialer: c.opt.Dialer,\n \n \t\t\tPassword: c.password,\n \n@@ -378,27 +407,13 @@ func (c *sentinelFailover) masterAddr() (string, error) {\n \treturn \"\", errors.New(\"redis: all sentinels are unreachable\")\n }\n \n-func (c *sentinelFailover) getMasterAddr() string {\n-\tc.mu.RLock()\n-\tsentinel := c.sentinel\n-\tc.mu.RUnlock()\n-\n-\tif sentinel == nil {\n-\t\treturn \"\"\n-\t}\n-\n+func (c *sentinelFailover) getMasterAddr(sentinel *SentinelClient) string {\n \taddr, err := sentinel.GetMasterAddrByName(c.masterName).Result()\n \tif err != nil {\n \t\tinternal.Logger.Printf(\"sentinel: GetMasterAddrByName name=%q failed: %s\",\n \t\t\tc.masterName, err)\n-\t\tc.mu.Lock()\n-\t\tif c.sentinel == sentinel {\n-\t\t\t_ = c.closeSentinel()\n-\t\t}\n-\t\tc.mu.Unlock()\n \t\treturn \"\"\n \t}\n-\n \treturn net.JoinHostPort(addr[0], addr[1])\n }\n \n@@ -413,6 +428,10 @@ func (c *sentinelFailover) switchMaster(addr string) {\n \tc.mu.Lock()\n \tdefer c.mu.Unlock()\n \n+\tif c._masterAddr == addr {\n+\t\treturn\n+\t}\n+\n \tinternal.Logger.Printf(\"sentinel: new master=%q addr=%q\",\n \t\tc.masterName, addr)\n \t_ = c.Pool().Filter(func(cn *pool.Conn) bool {\n@@ -422,28 +441,18 @@ func (c *sentinelFailover) switchMaster(addr string) {\n }\n \n func (c *sentinelFailover) setSentinel(sentinel *SentinelClient) {\n-\tc.discoverSentinels(sentinel)\n+\tif c.sentinel != nil {\n+\t\tpanic(\"not reached\")\n+\t}\n \tc.sentinel = sentinel\n+\tc.discoverSentinels()\n \n \tc.pubsub = sentinel.Subscribe(\"+switch-master\")\n \tgo c.listen(c.pubsub)\n }\n \n-func (c *sentinelFailover) closeSentinel() error {\n-\tfirstErr := c.pubsub.Close()\n-\tc.pubsub = nil\n-\n-\terr := c.sentinel.Close()\n-\tif err != nil && firstErr == nil {\n-\t\tfirstErr = err\n-\t}\n-\tc.sentinel = nil\n-\n-\treturn firstErr\n-}\n-\n-func (c *sentinelFailover) discoverSentinels(sentinel *SentinelClient) {\n-\tsentinels, err := sentinel.Sentinels(c.masterName).Result()\n+func (c *sentinelFailover) discoverSentinels() {\n+\tsentinels, err := c.sentinel.Sentinels(c.masterName).Result()\n \tif err != nil {\n \t\tinternal.Logger.Printf(\"sentinel: Sentinels master=%q failed: %s\", c.masterName, err)\n \t\treturn"
    },
    {
      "sha": "9ae159015ea29f93bc55bd9553dd9d5048b29a3b",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/tx.go",
      "status": "modified",
      "additions": 28,
      "deletions": 15,
      "changes": 43,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/tx.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/tx.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/tx.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -18,6 +18,7 @@ type Tx struct {\n \tbaseClient\n \tcmdable\n \tstatefulCmdable\n+\thooks\n \tctx context.Context\n }\n \n@@ -27,7 +28,8 @@ func (c *Client) newTx(ctx context.Context) *Tx {\n \t\t\topt:      c.opt,\n \t\t\tconnPool: pool.NewStickyConnPool(c.connPool.(*pool.ConnPool), true),\n \t\t},\n-\t\tctx: ctx,\n+\t\thooks: c.hooks.clone(),\n+\t\tctx:   ctx,\n \t}\n \ttx.init()\n \treturn &tx\n@@ -47,8 +49,9 @@ func (c *Tx) WithContext(ctx context.Context) *Tx {\n \t\tpanic(\"nil context\")\n \t}\n \tclone := *c\n-\tclone.ctx = ctx\n \tclone.init()\n+\tclone.hooks.lock()\n+\tclone.ctx = ctx\n \treturn &clone\n }\n \n@@ -57,7 +60,7 @@ func (c *Tx) Process(cmd Cmder) error {\n }\n \n func (c *Tx) ProcessContext(ctx context.Context, cmd Cmder) error {\n-\treturn c.baseClient.process(ctx, cmd)\n+\treturn c.hooks.process(ctx, cmd, c.baseClient.process)\n }\n \n // Watch prepares a transaction and marks the keys to be watched\n@@ -113,34 +116,44 @@ func (c *Tx) Unwatch(keys ...string) *StatusCmd {\n \treturn cmd\n }\n \n-// Pipeline creates a new pipeline. It is more convenient to use Pipelined.\n+// Pipeline creates a pipeline. Usually it is more convenient to use Pipelined.\n func (c *Tx) Pipeline() Pipeliner {\n \tpipe := Pipeline{\n-\t\tctx:  c.ctx,\n-\t\texec: c.processTxPipeline,\n+\t\tctx: c.ctx,\n+\t\texec: func(ctx context.Context, cmds []Cmder) error {\n+\t\t\treturn c.hooks.processPipeline(ctx, cmds, c.baseClient.processPipeline)\n+\t\t},\n \t}\n \tpipe.init()\n \treturn &pipe\n }\n \n-// Pipelined executes commands queued in the fn in a transaction.\n+// Pipelined executes commands queued in the fn outside of the transaction.\n+// Use TxPipelined if you need transactional behavior.\n+func (c *Tx) Pipelined(fn func(Pipeliner) error) ([]Cmder, error) {\n+\treturn c.Pipeline().Pipelined(fn)\n+}\n+\n+// TxPipelined executes commands queued in the fn in the transaction.\n //\n // When using WATCH, EXEC will execute commands only if the watched keys\n // were not modified, allowing for a check-and-set mechanism.\n //\n // Exec always returns list of commands. If transaction fails\n // TxFailedErr is returned. Otherwise Exec returns an error of the first\n // failed command or nil.\n-func (c *Tx) Pipelined(fn func(Pipeliner) error) ([]Cmder, error) {\n-\treturn c.Pipeline().Pipelined(fn)\n-}\n-\n-// TxPipelined is an alias for Pipelined.\n func (c *Tx) TxPipelined(fn func(Pipeliner) error) ([]Cmder, error) {\n-\treturn c.Pipelined(fn)\n+\treturn c.TxPipeline().Pipelined(fn)\n }\n \n-// TxPipeline is an alias for Pipeline.\n+// TxPipeline creates a pipeline. Usually it is more convenient to use TxPipelined.\n func (c *Tx) TxPipeline() Pipeliner {\n-\treturn c.Pipeline()\n+\tpipe := Pipeline{\n+\t\tctx: c.ctx,\n+\t\texec: func(ctx context.Context, cmds []Cmder) error {\n+\t\t\treturn c.hooks.processTxPipeline(ctx, cmds, c.baseClient.processTxPipeline)\n+\t\t},\n+\t}\n+\tpipe.init()\n+\treturn &pipe\n }"
    },
    {
      "sha": "21c4d07abf4262f09f2ddf1498ff2f5fe58504e7",
      "filename": "backend/vendor/github.com/go-redis/redis/v7/universal.go",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/universal.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/go-redis/redis/v7/universal.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-redis/redis/v7/universal.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -49,7 +49,8 @@ type UniversalOptions struct {\n \tMasterName string\n }\n \n-func (o *UniversalOptions) cluster() *ClusterOptions {\n+// Cluster returns cluster options created from the universal options.\n+func (o *UniversalOptions) Cluster() *ClusterOptions {\n \tif len(o.Addrs) == 0 {\n \t\to.Addrs = []string{\"127.0.0.1:6379\"}\n \t}\n@@ -84,7 +85,8 @@ func (o *UniversalOptions) cluster() *ClusterOptions {\n \t}\n }\n \n-func (o *UniversalOptions) failover() *FailoverOptions {\n+// Failover returns failover options created from the universal options.\n+func (o *UniversalOptions) Failover() *FailoverOptions {\n \tif len(o.Addrs) == 0 {\n \t\to.Addrs = []string{\"127.0.0.1:26379\"}\n \t}\n@@ -118,7 +120,8 @@ func (o *UniversalOptions) failover() *FailoverOptions {\n \t}\n }\n \n-func (o *UniversalOptions) simple() *Options {\n+// Simple returns basic options created from the universal options.\n+func (o *UniversalOptions) Simple() *Options {\n \taddr := \"127.0.0.1:6379\"\n \tif len(o.Addrs) > 0 {\n \t\taddr = o.Addrs[0]\n@@ -183,9 +186,9 @@ var _ UniversalClient = (*Ring)(nil)\n // 3. otherwise, a single-node redis Client will be returned.\n func NewUniversalClient(opts *UniversalOptions) UniversalClient {\n \tif opts.MasterName != \"\" {\n-\t\treturn NewFailoverClient(opts.failover())\n+\t\treturn NewFailoverClient(opts.Failover())\n \t} else if len(opts.Addrs) > 1 {\n-\t\treturn NewClusterClient(opts.cluster())\n+\t\treturn NewClusterClient(opts.Cluster())\n \t}\n-\treturn NewClient(opts.simple())\n+\treturn NewClient(opts.Simple())\n }"
    },
    {
      "sha": "4e5e9d8fd080c6126c3d6fe494d01ca9750b6015",
      "filename": "backend/vendor/github.com/hashicorp/golang-lru/lru.go",
      "status": "modified",
      "additions": 19,
      "deletions": 3,
      "changes": 22,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/hashicorp/golang-lru/lru.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/github.com/hashicorp/golang-lru/lru.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/hashicorp/golang-lru/lru.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -37,7 +37,7 @@ func (c *Cache) Purge() {\n \tc.lock.Unlock()\n }\n \n-// Add adds a value to the cache.  Returns true if an eviction occurred.\n+// Add adds a value to the cache. Returns true if an eviction occurred.\n func (c *Cache) Add(key, value interface{}) (evicted bool) {\n \tc.lock.Lock()\n \tevicted = c.lru.Add(key, value)\n@@ -71,8 +71,8 @@ func (c *Cache) Peek(key interface{}) (value interface{}, ok bool) {\n \treturn value, ok\n }\n \n-// ContainsOrAdd checks if a key is in the cache  without updating the\n-// recent-ness or deleting it for being stale,  and if not, adds the value.\n+// ContainsOrAdd checks if a key is in the cache without updating the\n+// recent-ness or deleting it for being stale, and if not, adds the value.\n // Returns whether found and whether an eviction occurred.\n func (c *Cache) ContainsOrAdd(key, value interface{}) (ok, evicted bool) {\n \tc.lock.Lock()\n@@ -85,6 +85,22 @@ func (c *Cache) ContainsOrAdd(key, value interface{}) (ok, evicted bool) {\n \treturn false, evicted\n }\n \n+// PeekOrAdd checks if a key is in the cache without updating the\n+// recent-ness or deleting it for being stale, and if not, adds the value.\n+// Returns whether found and whether an eviction occurred.\n+func (c *Cache) PeekOrAdd(key, value interface{}) (previous interface{}, ok, evicted bool) {\n+\tc.lock.Lock()\n+\tdefer c.lock.Unlock()\n+\n+\tprevious, ok = c.lru.Peek(key)\n+\tif ok {\n+\t\treturn previous, true, false\n+\t}\n+\n+\tevicted = c.lru.Add(key, value)\n+\treturn nil, false, evicted\n+}\n+\n // Remove removes the provided key from the cache.\n func (c *Cache) Remove(key interface{}) (present bool) {\n \tc.lock.Lock()"
    },
    {
      "sha": "531087655559e3fba07998030deba3500b872ee1",
      "filename": "backend/vendor/gopkg.in/yaml.v2/decode.go",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/gopkg.in/yaml.v2/decode.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/gopkg.in/yaml.v2/decode.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/gopkg.in/yaml.v2/decode.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -229,6 +229,10 @@ type decoder struct {\n \tmapType reflect.Type\n \tterrors []string\n \tstrict  bool\n+\n+\tdecodeCount int\n+\taliasCount  int\n+\taliasDepth  int\n }\n \n var (\n@@ -314,7 +318,39 @@ func (d *decoder) prepare(n *node, out reflect.Value) (newout reflect.Value, unm\n \treturn out, false, false\n }\n \n+const (\n+\t// 400,000 decode operations is ~500kb of dense object declarations, or ~5kb of dense object declarations with 10000% alias expansion\n+\talias_ratio_range_low = 400000\n+\t// 4,000,000 decode operations is ~5MB of dense object declarations, or ~4.5MB of dense object declarations with 10% alias expansion\n+\talias_ratio_range_high = 4000000\n+\t// alias_ratio_range is the range over which we scale allowed alias ratios\n+\talias_ratio_range = float64(alias_ratio_range_high - alias_ratio_range_low)\n+)\n+\n+func allowedAliasRatio(decodeCount int) float64 {\n+\tswitch {\n+\tcase decodeCount <= alias_ratio_range_low:\n+\t\t// allow 99% to come from alias expansion for small-to-medium documents\n+\t\treturn 0.99\n+\tcase decodeCount >= alias_ratio_range_high:\n+\t\t// allow 10% to come from alias expansion for very large documents\n+\t\treturn 0.10\n+\tdefault:\n+\t\t// scale smoothly from 99% down to 10% over the range.\n+\t\t// this maps to 396,000 - 400,000 allowed alias-driven decodes over the range.\n+\t\t// 400,000 decode operations is ~100MB of allocations in worst-case scenarios (single-item maps).\n+\t\treturn 0.99 - 0.89*(float64(decodeCount-alias_ratio_range_low)/alias_ratio_range)\n+\t}\n+}\n+\n func (d *decoder) unmarshal(n *node, out reflect.Value) (good bool) {\n+\td.decodeCount++\n+\tif d.aliasDepth > 0 {\n+\t\td.aliasCount++\n+\t}\n+\tif d.aliasCount > 100 && d.decodeCount > 1000 && float64(d.aliasCount)/float64(d.decodeCount) > allowedAliasRatio(d.decodeCount) {\n+\t\tfailf(\"document contains excessive aliasing\")\n+\t}\n \tswitch n.kind {\n \tcase documentNode:\n \t\treturn d.document(n, out)\n@@ -353,7 +389,9 @@ func (d *decoder) alias(n *node, out reflect.Value) (good bool) {\n \t\tfailf(\"anchor '%s' value contains itself\", n.value)\n \t}\n \td.aliases[n] = true\n+\td.aliasDepth++\n \tgood = d.unmarshal(n.alias, out)\n+\td.aliasDepth--\n \tdelete(d.aliases, n)\n \treturn good\n }"
    },
    {
      "sha": "4120e0c9160a132d8d470a434f3b8abfda58c71b",
      "filename": "backend/vendor/gopkg.in/yaml.v2/resolve.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/gopkg.in/yaml.v2/resolve.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/gopkg.in/yaml.v2/resolve.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/gopkg.in/yaml.v2/resolve.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -81,7 +81,7 @@ func resolvableTag(tag string) bool {\n \treturn false\n }\n \n-var yamlStyleFloat = regexp.MustCompile(`^[-+]?[0-9]*\\.?[0-9]+([eE][-+][0-9]+)?$`)\n+var yamlStyleFloat = regexp.MustCompile(`^[-+]?(\\.[0-9]+|[0-9]+(\\.[0-9]*)?)([eE][-+]?[0-9]+)?$`)\n \n func resolve(tag string, in string) (rtag string, out interface{}) {\n \tif !resolvableTag(tag) {"
    },
    {
      "sha": "570b8ecd10fd5b827f79ad1a14b62ddf8a13f821",
      "filename": "backend/vendor/gopkg.in/yaml.v2/scannerc.go",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/gopkg.in/yaml.v2/scannerc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/gopkg.in/yaml.v2/scannerc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/gopkg.in/yaml.v2/scannerc.go?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -906,13 +906,21 @@ func yaml_parser_remove_simple_key(parser *yaml_parser_t) bool {\n \treturn true\n }\n \n+// max_flow_level limits the flow_level\n+const max_flow_level = 10000\n+\n // Increase the flow level and resize the simple key list if needed.\n func yaml_parser_increase_flow_level(parser *yaml_parser_t) bool {\n \t// Reset the simple key on the next level.\n \tparser.simple_keys = append(parser.simple_keys, yaml_simple_key_t{})\n \n \t// Increase the flow level.\n \tparser.flow_level++\n+\tif parser.flow_level > max_flow_level {\n+\t\treturn yaml_parser_set_scanner_error(parser,\n+\t\t\t\"while increasing flow level\", parser.simple_keys[len(parser.simple_keys)-1].mark,\n+\t\t\tfmt.Sprintf(\"exceeded max depth of %d\", max_flow_level))\n+\t}\n \treturn true\n }\n \n@@ -925,6 +933,9 @@ func yaml_parser_decrease_flow_level(parser *yaml_parser_t) bool {\n \treturn true\n }\n \n+// max_indents limits the indents stack size\n+const max_indents = 10000\n+\n // Push the current indentation level to the stack and set the new level\n // the current column is greater than the indentation level.  In this case,\n // append or insert the specified token into the token queue.\n@@ -939,6 +950,11 @@ func yaml_parser_roll_indent(parser *yaml_parser_t, column, number int, typ yaml\n \t\t// indentation level.\n \t\tparser.indents = append(parser.indents, parser.indent)\n \t\tparser.indent = column\n+\t\tif len(parser.indents) > max_indents {\n+\t\t\treturn yaml_parser_set_scanner_error(parser,\n+\t\t\t\t\"while increasing indent level\", parser.simple_keys[len(parser.simple_keys)-1].mark,\n+\t\t\t\tfmt.Sprintf(\"exceeded max depth of %d\", max_indents))\n+\t\t}\n \n \t\t// Create a token and insert it into the queue.\n \t\ttoken := yaml_token_t{"
    },
    {
      "sha": "f6d9a9ae5fffc6b526430f2754e8cba2a0da63f2",
      "filename": "backend/vendor/modules.txt",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/modules.txt",
      "raw_url": "https://github.com/umputun/remark42/raw/a8f3e1730bd12537c92e4ac96d234b85373548cd/backend/vendor/modules.txt",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/modules.txt?ref=a8f3e1730bd12537c92e4ac96d234b85373548cd",
      "patch": "@@ -84,9 +84,10 @@ github.com/go-pkgz/auth/token\n # github.com/go-pkgz/jrpc v0.1.0\n ## explicit\n github.com/go-pkgz/jrpc\n-# github.com/go-pkgz/lcw v0.5.0\n+# github.com/go-pkgz/lcw v0.5.1-0.20200509170726-dc283cfc28cf\n ## explicit\n github.com/go-pkgz/lcw\n+github.com/go-pkgz/lcw/internal/cache\n # github.com/go-pkgz/lgr v0.7.0\n ## explicit\n github.com/go-pkgz/lgr\n@@ -101,7 +102,7 @@ github.com/go-pkgz/rest/logger\n # github.com/go-pkgz/syncs v1.1.1\n ## explicit\n github.com/go-pkgz/syncs\n-# github.com/go-redis/redis/v7 v7.0.0-beta.4\n+# github.com/go-redis/redis/v7 v7.2.0\n github.com/go-redis/redis/v7\n github.com/go-redis/redis/v7/internal\n github.com/go-redis/redis/v7/internal/consistenthash\n@@ -126,7 +127,7 @@ github.com/hashicorp/errwrap\n # github.com/hashicorp/go-multierror v1.1.0\n ## explicit\n github.com/hashicorp/go-multierror\n-# github.com/hashicorp/golang-lru v0.5.3\n+# github.com/hashicorp/golang-lru v0.5.4\n github.com/hashicorp/golang-lru\n github.com/hashicorp/golang-lru/simplelru\n # github.com/kyokomi/emoji v2.2.1+incompatible\n@@ -254,5 +255,5 @@ google.golang.org/appengine/urlfetch\n gopkg.in/oauth2.v3\n gopkg.in/oauth2.v3/errors\n gopkg.in/oauth2.v3/server\n-# gopkg.in/yaml.v2 v2.2.2\n+# gopkg.in/yaml.v2 v2.2.4\n gopkg.in/yaml.v2"
    }
  ]
}
