{
  "sha": "b90d076fdfa7c12259e922bacc3ecd02e30e589c",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmI5MGQwNzZmZGZhN2MxMjI1OWU5MjJiYWNjM2VjZDAyZTMwZTU4OWM=",
  "commit": {
    "author": {
      "name": "Pavel Mineev",
      "email": "pavel@mineev.me",
      "date": "2020-05-10T19:30:40Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-05-11T04:51:13Z"
    },
    "message": "Move html to separete files",
    "tree": {
      "sha": "7f8197d0e7897726f37878717e8d77f810fdf743",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/7f8197d0e7897726f37878717e8d77f810fdf743"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/b90d076fdfa7c12259e922bacc3ecd02e30e589c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/b90d076fdfa7c12259e922bacc3ecd02e30e589c",
  "html_url": "https://github.com/umputun/remark42/commit/b90d076fdfa7c12259e922bacc3ecd02e30e589c",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/b90d076fdfa7c12259e922bacc3ecd02e30e589c/comments",
  "author": {
    "login": "akellbl4",
    "id": 2330682,
    "node_id": "MDQ6VXNlcjIzMzA2ODI=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/2330682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/akellbl4",
    "html_url": "https://github.com/akellbl4",
    "followers_url": "https://api.github.com/users/akellbl4/followers",
    "following_url": "https://api.github.com/users/akellbl4/following{/other_user}",
    "gists_url": "https://api.github.com/users/akellbl4/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/akellbl4/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/akellbl4/subscriptions",
    "organizations_url": "https://api.github.com/users/akellbl4/orgs",
    "repos_url": "https://api.github.com/users/akellbl4/repos",
    "events_url": "https://api.github.com/users/akellbl4/events{/privacy}",
    "received_events_url": "https://api.github.com/users/akellbl4/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f5fcd5b254f6238af1245d45c9b46bb4de98cdd2",
      "url": "https://api.github.com/repos/umputun/remark42/commits/f5fcd5b254f6238af1245d45c9b46bb4de98cdd2",
      "html_url": "https://github.com/umputun/remark42/commit/f5fcd5b254f6238af1245d45c9b46bb4de98cdd2"
    }
  ],
  "stats": {
    "total": 767,
    "additions": 478,
    "deletions": 289
  },
  "files": [
    {
      "sha": "d8b056c9667dfb19547872c14df573c020116f99",
      "filename": "Dockerfile",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/Dockerfile",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/Dockerfile",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/Dockerfile?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -1,4 +1,4 @@\n-FROM umputun/baseimage:buildgo-latest as build-backend\n+FROM umputun/baseimage:buildgo as build-backend\n \n ARG CI\n ARG DRONE\n@@ -30,6 +30,8 @@ RUN \\\n     if [ -z \"$DRONE\" ] ; then echo \"runs outside of drone\" && version=\"$(/script/git-rev.sh)\" ; \\\n     else version=${DRONE_TAG}${DRONE_BRANCH}${DRONE_PULL_REQUEST}-${DRONE_COMMIT:0:7}-$(date +%Y%m%d-%H:%M:%S) ; fi && \\\n     echo \"version=$version\" && \\\n+    statik --src=/build/backend/templates --dest=/build/backend/app -p templates -ns templates -f && \\\n+    ls -la /build/backend/app/templates/statik.go && \\\n     go build -o remark42 -ldflags \"-X main.revision=${version} -s -w\" ./app\n \n FROM node:10.11-alpine as build-frontend-deps"
    },
    {
      "sha": "0d696a0f8a8d9eb494c2dc27a763a61c6dc0395d",
      "filename": "Dockerfile.artifacts",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/Dockerfile.artifacts",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/Dockerfile.artifacts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/Dockerfile.artifacts?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -26,7 +26,7 @@ RUN cd /srv/frontend && \\\n     npm run build && \\\n     rm -rf ./node_modules\n \n-FROM umputun/baseimage:buildgo-latest as build-backend\n+FROM umputun/baseimage:buildgo as build-backend\n \n ARG GITHUB_TOKEN\n ENV SKIP_BACKEND_TEST=true\n@@ -46,6 +46,8 @@ RUN \\\n     export WEB_ROOT=/build/backend/web && \\\n     sed -i \"s|https://demo.remark42.com|http://127.0.0.1:8080|g\" ${WEB_ROOT}/*.js && \\\n     statik --src=${WEB_ROOT} --dest=/build/backend/app/rest -p api -f && \\\n+    statik --src=/build/backend/templates --dest=/build/backend/app -p templates -ns templates -f && \\\n+    ls -la /build/backend/app/templates/statik.go && \\\n     ls -la /build/backend/app/rest/api/statik.go && \\\n     ls -la /build/backend/web/\n "
    },
    {
      "sha": "0e6776fa5251b195bd887d9941e460c9fe25cd08",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 43,
      "deletions": 43,
      "changes": 86,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server.go?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -1,9 +1,9 @@\n package cmd\n \n import (\n+\t\"io/ioutil\"\n \t\"context\"\n \t\"fmt\"\n-\t\"io/ioutil\"\n \t\"net/http\"\n \t\"net/url\"\n \t\"os\"\n@@ -37,6 +37,7 @@ import (\n \t\"github.com/umputun/remark/backend/app/store/engine\"\n \t\"github.com/umputun/remark/backend/app/store/image\"\n \t\"github.com/umputun/remark/backend/app/store/service\"\n+\t\"github.com/umputun/remark/backend/app/templates\"\n )\n \n // ServerCommand with command line flags and env\n@@ -97,7 +98,7 @@ type ServerCommand struct {\n \t\t\tSMTPUserName string        `long:\"user\" env:\"USER\" description:\"[deprecated, use --smtp.username] enable TLS\"`\n \t\t\tTLS          bool          `long:\"tls\" env:\"TLS\" description:\"[deprecated, use --smtp.tls] SMTP TCP connection timeout\"`\n \t\t\tTimeOut      time.Duration `long:\"timeout\" env:\"TIMEOUT\" default:\"10s\" description:\"[deprecated, use --smtp.timeout] SMTP TCP connection timeout\"`\n-\t\t\tMsgTemplate  string        `long:\"template\" env:\"TEMPLATE\" description:\"message template file\"`\n+\t\t\tMsgTemplate  string        `long:\"template\" env:\"TEMPLATE\" description:\"[deprecated, message template file]\" default:\"email_confirmation_login.html.tmpl\"`\n \t\t} `group:\"email\" namespace:\"email\" env-namespace:\"EMAIL\"`\n \t} `group:\"auth\" namespace:\"auth\" env-namespace:\"AUTH\"`\n \n@@ -303,6 +304,9 @@ func (s *ServerCommand) HandleDeprecatedFlags() (result []DeprecatedFlag) {\n \t\ts.SMTP.TimeOut = s.Auth.Email.TimeOut\n \t\tresult = append(result, DeprecatedFlag{Old: \"auth.email.timeout\", New: \"smtp.timeout\", RemoveVersion: \"1.7.0\"})\n \t}\n+\tif s.Auth.Email.MsgTemplate != \"email_confirmation_login.html.tmpl\" {\n+\t\tresult = append(result, DeprecatedFlag{Old: \"auth.email.template\", RemoveVersion: \"1.9.0\"})\n+\t}\n \tif s.LegacyImageProxy && !s.ImageProxy.HTTP2HTTPS {\n \t\ts.ImageProxy.HTTP2HTTPS = s.LegacyImageProxy\n \t\tresult = append(result, DeprecatedFlag{Old: \"img-proxy\", New: \"image-proxy.http2https\", RemoveVersion: \"1.7.0\"})\n@@ -362,7 +366,10 @@ func (s *ServerCommand) newServerApp() (*serverApp, error) {\n \tif err != nil {\n \t\treturn nil, errors.Wrap(err, \"failed to make avatar store\")\n \t}\n-\tauthenticator := s.makeAuthenticator(dataService, avatarStore, adminStore)\n+\tauthenticator, err := s.makeAuthenticator(dataService, avatarStore, adminStore)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrap(err, \"failed to make authenticator\")\n+\t}\n \n \texporter := &migrator.Native{DataStore: dataService}\n \n@@ -659,29 +666,7 @@ func (s *ServerCommand) makeCache() (LoadingCache, error) {\n \treturn nil, errors.Errorf(\"unsupported cache type %s\", s.Cache.Type)\n }\n \n-var msgTemplate = `\n-<!DOCTYPE html>\n-<html>\n-<head>\n-\t<meta name=\"viewport\" content=\"width=device-width\" />\n-\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n-</head>\n-<body>\n-<div style=\"text-align: center; font-family: Arial, sans-serif; font-size: 18px;\">\n-\t<h1 style=\"position: relative; color: #4fbbd6; margin-top: 0.2em;\">Remark42</h1>\n-\t<p style=\"position: relative; max-width: 20em; margin: 0 auto 1em auto; line-height: 1.4em;\">Confirmation for <b>{{.User}}</b> on site <b>{{.Site}}</b></p>\n-\t<div style=\"background-color: #eee; max-width: 20em; margin: 0 auto; border-radius: 0.4em; padding: 0.5em;\">\n-\t\t<p style=\"position: relative; margin: 0 0 0.5em 0;\">TOKEN</p>\n-\t\t<p style=\"position: relative; font-size: 0.7em; opacity: 0.8;\"><i>Copy and paste this text into “token” field on comments page</i></p>\n-\t\t<p style=\"position: relative; font-family: monospace; background-color: #fff; margin: 0; padding: 0.5em; word-break: break-all; text-align: left; border-radius: 0.2em; -webkit-user-select: all; user-select: all;\">{{.Token}}</p>\n-\t</div>\n-\t<p style=\"position: relative; margin-top: 2em; font-size: 0.8em; opacity: 0.8;\"><i>Sent to {{.Address}}</i></p>\n-</div>\n-</body>\n-</html>\n-`\n-\n-func (s *ServerCommand) addAuthProviders(authenticator *auth.Service) {\n+func (s *ServerCommand) addAuthProviders(authenticator *auth.Service) error {\n \n \tproviders := 0\n \tif s.Auth.Google.CID != \"\" && s.Auth.Google.CSEC != \"\" {\n@@ -724,7 +709,11 @@ func (s *ServerCommand) addAuthProviders(authenticator *auth.Service) {\n \t\t\tContentType:  s.Auth.Email.ContentType,\n \t\t}\n \t\tsndr := sender.NewEmailClient(params, log.Default())\n-\t\tauthenticator.AddVerifProvider(\"email\", s.loadEmailTemplate(), sndr)\n+\t\ttmpl, err := s.loadEmailTemplate()\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tauthenticator.AddVerifProvider(\"email\", tmpl, sndr)\n \t}\n \n \tif s.Auth.Anonymous {\n@@ -748,22 +737,29 @@ func (s *ServerCommand) addAuthProviders(authenticator *auth.Service) {\n \tif providers == 0 {\n \t\tlog.Printf(\"[WARN] no auth providers defined\")\n \t}\n+\n+\treturn nil\n }\n \n-// loadEmailTemplate trying to get template from opts MsgTemplate and default to embedded\n-// if not defined or failed to load\n-func (s *ServerCommand) loadEmailTemplate() string {\n-\ttmpl := msgTemplate\n-\tif s.Auth.Email.MsgTemplate != \"\" {\n-\t\tlog.Printf(\"[DEBUG] load email template from %s\", s.Auth.Email.MsgTemplate)\n-\t\tb, err := ioutil.ReadFile(s.Auth.Email.MsgTemplate)\n-\t\tif err == nil {\n-\t\t\ttmpl = string(b)\n-\t\t} else {\n-\t\t\tlog.Printf(\"[WARN] failed to load email template from %s, %v\", s.Auth.Email.MsgTemplate, err)\n-\t\t}\n+// loadEmailTemplate trying to get template from statik\n+func (s *ServerCommand) loadEmailTemplate() (string, error) {\n+\tvar file []byte\n+\tvar err error\n+\n+\tif s.Auth.Email.MsgTemplate == \"email_confirmation_login.html.tmpl\" {\n+\t\tfs := templates.NewFS()\n+\t\tfile, err = fs.ReadFile(s.Auth.Email.MsgTemplate)\n+\t} else {\n+\t\t// deprecated loading from an external file, should be removed before v1.9.0\n+\t\tfile, err = ioutil.ReadFile(s.Auth.Email.MsgTemplate)\n+\t\tlog.Printf(\"[INFO] template %s will be read from disk\", s.Auth.Email.MsgTemplate)\n \t}\n-\treturn tmpl\n+\n+\tif err != nil {\n+\t\treturn \"\", errors.Wrapf(err, \"failed to read file %s\", s.Auth.Email.MsgTemplate)\n+\t}\n+\n+\treturn string(file), nil\n }\n \n func (s *ServerCommand) makeNotify(dataStore *service.DataStore, authenticator *auth.Service) (*notify.Service, error) {\n@@ -859,7 +855,7 @@ func (s *ServerCommand) makeSSLConfig() (config api.SSLConfig, err error) {\n \treturn config, err\n }\n \n-func (s *ServerCommand) makeAuthenticator(ds *service.DataStore, avas avatar.Store, admns admin.Store) *auth.Service {\n+func (s *ServerCommand) makeAuthenticator(ds *service.DataStore, avas avatar.Store, admns admin.Store) (*auth.Service, error) {\n \tauthenticator := auth.NewService(auth.Opts{\n \t\tURL:            strings.TrimSuffix(s.RemarkURL, \"/\"),\n \t\tIssuer:         \"remark42\",\n@@ -915,8 +911,12 @@ func (s *ServerCommand) makeAuthenticator(ds *service.DataStore, avas avatar.Sto\n \t\tRefreshCache:      newAuthRefreshCache(),\n \t\tUseGravatar:       true,\n \t})\n-\ts.addAuthProviders(authenticator)\n-\treturn authenticator\n+\n+\tif err := s.addAuthProviders(authenticator); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn authenticator, nil\n }\n \n // authRefreshCache used by authenticator to minimize repeatable token refreshes"
    },
    {
      "sha": "defbcc85c4436a5fae1de8007fed077c02eaeda9",
      "filename": "backend/app/cmd/server_test.go",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/cmd/server_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/cmd/server_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server_test.go?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -372,6 +372,7 @@ func TestServerApp_DeprecatedArgs(t *testing.T) {\n \t\t\"--auth.email.user=test_user\",\n \t\t\"--auth.email.passwd=test_password\",\n \t\t\"--auth.email.timeout=15s\",\n+\t\t\"--auth.email.template=file.tmpl\",\n \t}\n \tassert.Empty(t, s.SMTP.Host)\n \tassert.Empty(t, s.SMTP.Port)\n@@ -390,6 +391,7 @@ func TestServerApp_DeprecatedArgs(t *testing.T) {\n \t\t\t{Old: \"auth.email.user\", New: \"smtp.username\", RemoveVersion: \"1.7.0\"},\n \t\t\t{Old: \"auth.email.passwd\", New: \"smtp.password\", RemoveVersion: \"1.7.0\"},\n \t\t\t{Old: \"auth.email.timeout\", New: \"smtp.timeout\", RemoveVersion: \"1.7.0\"},\n+\t\t\t{Old: \"auth.email.template\", RemoveVersion: \"1.9.0\"},\n \t\t},\n \t\tdeprecatedFlags)\n \tassert.Equal(t, \"smtp.example.org\", s.SMTP.Host)\n@@ -490,7 +492,7 @@ func TestServerAuthHooks(t *testing.T) {\n \trequire.NoError(t, err)\n \tt.Logf(\"no-aud claims: %s\", tkNoAud)\n \treq, err = http.NewRequest(\"POST\", fmt.Sprintf(\"http://localhost:%d/api/v1/comment\", port),\n-\t\tstrings.NewReader(`{\"text\": \"test 123\", \"locator\":{\"url\": \"https://radio-t.com/p/2018/12/29/podcast-631/\", \n+\t\tstrings.NewReader(`{\"text\": \"test 123\", \"locator\":{\"url\": \"https://radio-t.com/p/2018/12/29/podcast-631/\",\n \"site\": \"remark\"}}`))\n \trequire.NoError(t, err)\n \treq.Header.Set(\"X-JWT\", tkNoAud)\n@@ -534,16 +536,14 @@ func TestServerAuthHooks(t *testing.T) {\n func TestServer_loadEmailTemplate(t *testing.T) {\n \tcmd := ServerCommand{}\n \tcmd.Auth.Email.MsgTemplate = \"testdata/email.tmpl\"\n-\tr := cmd.loadEmailTemplate()\n+\tr, err := cmd.loadEmailTemplate()\n+\tassert.NoError(t, err)\n \tassert.Equal(t, \"The token is {{.Token}}\", r)\n \n-\tcmd.Auth.Email.MsgTemplate = \"\"\n-\tr = cmd.loadEmailTemplate()\n-\tassert.Contains(t, r, \"Remark42</h1>\")\n-\n-\tcmd.Auth.Email.MsgTemplate = \"bad-file\"\n-\tr = cmd.loadEmailTemplate()\n-\tassert.Contains(t, r, \"Remark42</h1>\")\n+\tcmd.Auth.Email.MsgTemplate = \"badpath.tmpl\"\n+\tr, err = cmd.loadEmailTemplate()\n+\tassert.EqualError(t, err, \"failed to read file badpath.tmpl: open badpath.tmpl: no such file or directory\")\n+\tassert.Equal(t, r, \"\")\n }\n \n func chooseRandomUnusedPort() (port int) {"
    },
    {
      "sha": "a8daf00839c67c9699bf6d2a3779f38904f31732",
      "filename": "backend/app/notify/email.go",
      "status": "modified",
      "additions": 48,
      "deletions": 120,
      "changes": 168,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/notify/email.go",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/notify/email.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/email.go?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -15,16 +15,18 @@ import (\n \tlog \"github.com/go-pkgz/lgr\"\n \t\"github.com/go-pkgz/repeater\"\n \t\"github.com/pkg/errors\"\n+\n+\t\"github.com/umputun/remark/backend/app/templates\"\n )\n \n // EmailParams contain settings for email notifications\n type EmailParams struct {\n-\tFrom                 string // from email address\n-\tMsgTemplate          string // request message template\n-\tVerificationSubject  string // verification message subject\n-\tVerificationTemplate string // verification message template\n-\tSubscribeURL         string // full subscribe handler URL\n-\tUnsubscribeURL       string // full unsubscribe handler URL\n+\tFrom                     string // from email address\n+\tMsgTemplatePath          string // path to request message template\n+\tVerificationSubject      string // verification message sub\n+\tVerificationTemplatePath string // path to verification template\n+\tSubscribeURL             string // full subscribe handler URL\n+\tUnsubscribeURL           string // full unsubscribe handler URL\n \n \tTokenGenFn func(userID, email, site string) (string, error) // Unsubscribe token generation function\n }\n@@ -101,139 +103,65 @@ type verifyTmplData struct {\n }\n \n const (\n-\tdefaultVerificationSubject = \"Email verification\"\n-\tdefaultEmailTimeout        = 10 * time.Second\n-\tdefaultEmailTemplate       = `<!DOCTYPE html>\n-<html>\n-<head>\n-\t<meta name=\"viewport\" content=\"width=device-width\" />\n-\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n-\t<style type=\"text/css\">\n-\t\timg {\n-\t\t\tmax-width: 100%;\n-\t\t\tmax-height: 250px;\n-\t\t\tmargin: 5px 0;\n-\t\t\tdisplay: block;\n-\t\t\tcolor: #000;\n-\t\t}\n-\t\ta {\n-\t\t\ttext-decoration: none;\n-\t\t\tcolor: #0aa;\n-\t\t}\n-\t\tp {\n-\t\t\tmargin: 0 0 12px;\n-\t\t}\n-\t\tblockquote {\n-\t\t\tmargin: 10px 0;\n-\t\t\tpadding: 12px 12px 1px 12px;\n-\t\t\tbackground: rgba(255,255,255,.5)\n-\t\t}\n-\t</style>\n-</head>\n-<!-- Some of blocks on this page have color: #000 because GMail can wrap block in his own tags which can change text color -->\n-<body>\n-\t<div style=\"font-family: Helvetica, Arial, sans-serif; font-size: 18px; width: 100%; max-width: 640px; margin: auto;\">\n-\t\t<h1 style=\"text-align: center; position: relative; color: #4fbbd6; margin-top: 10px; margin-bottom: 10px;\">Remark42</h1>\n-        {{- if .ForAdmin}}\n-\t\t<div style=\"font-size: 16px; text-align: center; margin-bottom: 10px; color:#000!important;\">New comment from {{.UserName}} on your site {{if .PostTitle}} to «{{.PostTitle}}»{{ end }}</div>\n-        {{- else }}\n-\t\t<div style=\"font-size: 16px; text-align: center; margin-bottom: 10px; color:#000!important;\">New reply from {{.UserName}} on your comment{{if .PostTitle}} to «{{.PostTitle}}»{{ end }}</div>\n-        {{- end }}\n-\t\t<div style=\"background-color: #eee; padding: 15px 20px 20px 20px; border-radius: 3px;\">\n-            {{- if .ParentCommentText}}\n-\t\t\t<div style=\"margin-bottom: 12px; line-height: 24px; word-break: break-all;\">\n-\t\t\t\t<img src=\"{{.ParentUserPicture}}\" style=\"width: 24px; height: 24px; display: inline; vertical-align: middle; margin: 0 8px 0 0; border-radius: 3px; background-color: #ccc;\"/>\n-\t\t\t\t<span style=\"font-size: 14px; font-weight: bold; color: #777\">{{.ParentUserName}}</span>\n-\t\t\t\t<span style=\"color: #999; font-size: 14px; margin: 0 8px;\">{{.ParentCommentDate.Format \"02.01.2006 at 15:04\"}}</span>\n-\t\t\t\t<a href=\"{{.ParentCommentLink}}\" style=\"color: #0aa; font-size: 14px;\"><b>Show</b></a>\n-\t\t\t</div>\n-\t\t\t<div style=\"font-size: 14px; color:#333!important; padding: 0 14px 0 2px; border-radius: 3px; line-height: 1.4;\">\n-\t\t\t\t{{.ParentCommentText}}\n-\t\t\t</div>\n-            {{- end }}\n-\t\t\t<div style=\"padding-left: 20px; border-left: 1px dotted rgba(0,0,0,0.15); margin-top: 15px; padding-top: 5px;\">\n-\t\t\t\t<div style=\"margin-bottom: 12px;\" line-height: 24px;word-break: break-all;>\n-\t\t\t\t\t<img src=\"{{.UserPicture}}\" style=\"width: 24px; height: 24px; display:inline; vertical-align:middle; margin: 0 8px 0 0; border-radius: 3px; background-color: #ccc;\"/>\n-\t\t\t\t\t<span style=\"font-size: 14px; font-weight: bold; color: #777\">{{.UserName}}</span>\n-\t\t\t\t\t<span style=\"color: #999; font-size: 14px; margin: 0 8px;\">{{.CommentDate.Format \"02.01.2006 at 15:04\"}}</span>\n-\t\t\t\t\t<a href=\"{{.CommentLink}}\" style=\"color: #0aa; font-size: 14px;\"><b>Reply</b></a>\n-\t\t\t\t</div>\n-\t\t\t\t<div style=\"font-size: 16px; background-color: #fff; color:#000!important; padding: 14px 14px 2px 14px; border-radius: 3px; line-height: 1.4;\">{{.CommentText}}</div>\n-\t\t\t</div>\n-\t\t</div>\n-\t\t<div style=\"text-align: center; font-size: 14px; margin-top: 32px;\">\n-\t\t\t<i style=\"color: #000!important;\">Sent to <a style=\"color:inherit; text-decoration: none\" href=\"mailto:{{.Email}}\">{{.Email}}</a>{{if not .ForAdmin}} for {{.ParentUserName}}{{ end }}</i>\n-\t\t\t<div style=\"margin: auto; width: 150px; border-top: 1px solid rgba(0, 0, 0, 0.15); padding-top: 15px; margin-top: 15px;\"></div>\n-\t\t\t{{- if .UnsubscribeLink}}\n-\t\t\t<a style=\"color: #0aa;\" href=\"{{.UnsubscribeLink}}\">Unsubscribe</a>\n-\t\t\t{{- end }}\n-\t\t\t<!-- This is hack for remove collapser in Gmail which can collapse end of the message -->\n-\t\t\t<div style=\"opacity: 0;font-size: 1;\">[{{.CommentDate.Format \"02.01.2006 at 15:04\"}}]</div>\n-\t\t</div>\n-\t</div>\n-</body>\n-</html>\n-`\n-\tdefaultEmailVerificationTemplate = `<!DOCTYPE html>\n-<html>\n-<head>\n-\t<meta name=\"viewport\" content=\"width=device-width\" />\n-\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n-</head>\n-<body>\n-\t<!-- Some of blocks on this page have color: #000 because GMail can wrap block in his own tags which can change text color -->\n-\t<div style=\"text-align: center; font-family: Helvetica, Arial, sans-serif; font-size: 18px;\">\n-\t\t<h1 style=\"position: relative; color: #4fbbd6; margin-top: 0.2em;\">Remark42</h1>\n-\t\t<p style=\"position: relative; max-width: 20em; margin: 0 auto 1em auto; line-height: 1.4em; color:#000!important;\">Confirmation for <b>{{.User}}</b> on site <b>{{.Site}}</b></p>\n-\t\t{{- if .SubscribeURL}}\n-\t\t<p style=\"position: relative; margin: 0 0 0.5em 0;color:#000!important;\"><a href=\"{{.SubscribeURL}}{{.Token}}\">Click here to subscribe to email notifications</a></p>\n-\t\t<p style=\"position: relative; margin: 0 0 0.5em 0;color:#000!important;\">Alternatively, you can use code below for subscription.</p>\n-\t\t{{- end }}\n-\t\t<div style=\"background-color: #eee; max-width: 20em; margin: 0 auto; border-radius: 0.4em; padding: 0.5em;\">\n-\t\t\t<p style=\"position: relative; margin: 0 0 0.5em 0;color:#000!important;\">TOKEN</p>\n-\t\t\t<p style=\"position: relative; font-size: 0.7em; opacity: 0.8;\"><i style=\"color:#000!important;\">Copy and paste this text into “token” field on comments page</i></p>\n-\t\t\t<p style=\"position: relative; font-family: monospace; background-color: #fff; margin: 0; padding: 0.5em; word-break: break-all; text-align: left; border-radius: 0.2em; -webkit-user-select: all; user-select: all;\">{{.Token}}</p>\n-\t\t</div>\n-\t\t<p style=\"position: relative; margin-top: 2em; font-size: 0.8em; opacity: 0.8;\"><i style=\"color:#000!important;\">Sent to {{.Email}}</i></p>\n-\t</div>\n-</body>\n-</html>\n-`\n+\tdefaultVerificationSubject           = \"Email verification\"\n+\tdefaultEmailTimeout                  = 10 * time.Second\n+\tdefaultEmailTemplatePath             = \"email_reply.html.tmpl\"\n+\tdefaultEmailVerificationTemplatePath = \"email_confirmation_subscription.html.tmpl\"\n )\n \n // NewEmail makes new Email object, returns error in case of e.MsgTemplate or e.VerificationTemplate parsing error\n func NewEmail(emailParams EmailParams, smtpParams SMTPParams) (*Email, error) {\n \t// set up Email emailParams\n \tres := Email{EmailParams: emailParams}\n-\tif res.MsgTemplate == \"\" {\n-\t\tres.MsgTemplate = defaultEmailTemplate\n-\t}\n-\tif res.VerificationTemplate == \"\" {\n-\t\tres.VerificationTemplate = defaultEmailVerificationTemplate\n+\tres.smtp = &emailClient{}\n+\tres.SMTPParams = smtpParams\n+\tif res.TimeOut <= 0 {\n+\t\tres.TimeOut = defaultEmailTimeout\n \t}\n+\n \tif res.VerificationSubject == \"\" {\n \t\tres.VerificationSubject = defaultVerificationSubject\n \t}\n \n-\t// set up SMTP emailParams\n-\tres.smtp = &emailClient{}\n-\tres.SMTPParams = smtpParams\n-\tif res.TimeOut <= 0 {\n-\t\tres.TimeOut = defaultEmailTimeout\n+\t// initialize templates\n+\terr := res.setTemplates()\n+\tif err != nil {\n+\t\treturn nil, errors.Wrap(err, \"can't set templates\")\n \t}\n \n \tlog.Printf(\"[DEBUG] Create new email notifier for server %s with user %s, timeout=%s\",\n \t\tres.Host, res.Username, res.TimeOut)\n \n-\t// initialize templates\n+\treturn &res, nil\n+}\n+\n+func (e *Email) setTemplates() error {\n \tvar err error\n-\tif res.msgTmpl, err = template.New(\"messageFromRequest\").Parse(res.MsgTemplate); err != nil {\n-\t\treturn nil, errors.Wrapf(err, \"can't parse message template\")\n+\tvar msgTmplFile, verifyTmplFile []byte\n+\tfs := templates.NewFS()\n+\n+\tif e.VerificationTemplatePath == \"\" {\n+\t\te.VerificationTemplatePath = defaultEmailVerificationTemplatePath\n+\t}\n+\n+\tif e.MsgTemplatePath == \"\" {\n+\t\te.MsgTemplatePath = defaultEmailTemplatePath\n+\t}\n+\n+\tif msgTmplFile, err = fs.ReadFile(e.MsgTemplatePath); err != nil {\n+\t\treturn errors.Wrapf(err, \"can't read message template\")\n+\t}\n+\tif verifyTmplFile, err = fs.ReadFile(e.VerificationTemplatePath); err != nil {\n+\t\treturn errors.Wrapf(err, \"can't read verification template\")\n \t}\n-\tif res.verifyTmpl, err = template.New(\"messageFromRequest\").Parse(res.VerificationTemplate); err != nil {\n-\t\treturn nil, errors.Wrapf(err, \"can't parse verification template\")\n+\tif e.msgTmpl, err = template.New(\"msgTmpl\").Parse(string(msgTmplFile)); err != nil {\n+\t\treturn errors.Wrapf(err, \"can't parse message template\")\n \t}\n-\treturn &res, err\n+\tif e.verifyTmpl, err = template.New(\"verifyTmpl\").Parse(string(verifyTmplFile)); err != nil {\n+\t\treturn errors.Wrapf(err, \"can't parse verification template\")\n+\t}\n+\n+\treturn nil\n }\n \n // Send email about comment reply to Request.Email if it's set,"
    },
    {
      "sha": "b12e10e63a8696d51265d63aa0cb4c6fb0318027",
      "filename": "backend/app/notify/email_test.go",
      "status": "modified",
      "additions": 81,
      "deletions": 69,
      "changes": 150,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/notify/email_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/notify/email_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/email_test.go?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -17,79 +17,86 @@ import (\n )\n \n func TestEmailNew(t *testing.T) {\n-\tvar testSet = []struct {\n-\t\tname        string\n-\t\terr         bool\n-\t\terrText     string\n+\temailParams := EmailParams{\n+\t\tFrom: \"test@from\",\n+\t\tVerificationTemplatePath: \"testdata/verification.html.tmpl\",\n+\t\tMsgTemplatePath: \"testdata/msg.html.tmpl\",\n+\t}\n+\tsmtpParams := SMTPParams{\n+\t\tHost:     \"test@host\",\n+\t\tPort:     1000,\n+\t\tTLS:      true,\n+\t\tUsername: \"test@username\",\n+\t\tPassword: \"test@password\",\n+\t\tTimeOut:  time.Second,\n+\t}\n+\n+\temail, err := NewEmail(emailParams, smtpParams)\n+\n+\tassert.NoError(t, err)\n+\tassert.NotNil(t, email, \"email returned\")\n+\n+\tassert.NotNil(t, email.msgTmpl, \"e.template is set\")\n+\tassert.Equal(t, emailParams.From, email.EmailParams.From, \"emailParams.From unchanged after creation\")\n+\tif smtpParams.TimeOut == 0 {\n+\t\tassert.Equal(t, defaultEmailTimeout, email.TimeOut, \"empty emailParams.TimeOut changed to default\")\n+\t} else {\n+\t\tassert.Equal(t, smtpParams.TimeOut, email.TimeOut, \"emailParams.TimOut unchanged after creation\")\n+\t}\n+\tassert.Equal(t, smtpParams.Host, email.Host, \"emailParams.Host unchanged after creation\")\n+\tassert.Equal(t, smtpParams.Username, email.Username, \"emailParams.Username unchanged after creation\")\n+\tassert.Equal(t, smtpParams.Password, email.Password, \"emailParams.Password unchanged after creation\")\n+\tassert.Equal(t, smtpParams.Port, email.Port, \"emailParams.Port unchanged after creation\")\n+\tassert.Equal(t, smtpParams.TLS, email.TLS, \"emailParams.TLS unchanged after creation\")\n+}\n+\n+func Test_initTemplates(t *testing.T) {\n+\ttestSet := []struct{\n+\t\tname string\n+\t\terrText string\n \t\temailParams EmailParams\n-\t\tsmtpParams  SMTPParams\n \t}{\n-\t\t{name: \"empty\"},\n-\t\t{name: \"with template parse error\",\n-\t\t\terr: true, errText: \"can't parse message template: template: messageFromRequest:1: unexpected unclosed action in command\",\n-\t\t\temailParams: EmailParams{\n-\t\t\t\tMsgTemplate: \"{{\",\n-\t\t\t}},\n-\t\t{name: \"with verification template parse error\",\n-\t\t\terr: true, errText: \"can't parse verification template: template: messageFromRequest:1: unexpected unclosed action in command\",\n+\t\t{\n+\t\t\tname: \"with wrong path to verification template\",\n+\t\t\terrText: \"can't read verification template: open notfount.tmpl: no such file or directory\",\n \t\t\temailParams: EmailParams{\n-\t\t\t\tFrom:                 \"test@from\",\n-\t\t\t\tVerificationTemplate: \"{{\",\n+\t\t\t\tVerificationTemplatePath: \"notfount.tmpl\",\n+\t\t\t\tMsgTemplatePath: \"testdata/msg.html.tmpl\",\n \t\t\t},\n-\t\t\tsmtpParams: SMTPParams{\n-\t\t\t\tHost:     \"test@host\",\n-\t\t\t\tPort:     1000,\n-\t\t\t\tTLS:      true,\n-\t\t\t\tUsername: \"test@username\",\n-\t\t\t\tPassword: \"test@password\",\n-\t\t\t\tTimeOut:  time.Second,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"with wrong path to message template\",\n+\t\t\terrText: \"can't read message template: open notfount.tmpl: no such file or directory\",\n+\t\t\temailParams: EmailParams{\n+\t\t\t\tVerificationTemplatePath: \"testdata/verification.html.tmpl\",\n+\t\t\t\tMsgTemplatePath: \"notfount.tmpl\",\n \t\t\t},\n \t\t},\n-\t\t{name: \"normal creation\",\n-\t\t\terr: false, errText: \"can't parse verification template: template: messageFromRequest:1: unexpected unclosed action in command\",\n+\t\t{\n+\t\t\tname: \"with error on read verification template\",\n+\t\t\terrText: \"can't parse verification template: template: verifyTmpl:1: unexpected unclosed action in command\",\n \t\t\temailParams: EmailParams{\n-\t\t\t\tFrom: \"test@from\",\n+\t\t\t\tVerificationTemplatePath: \"testdata/bad.html.tmpl\",\n+\t\t\t\tMsgTemplatePath: \"testdata/msg.html.tmpl\",\n \t\t\t},\n-\t\t\tsmtpParams: SMTPParams{\n-\t\t\t\tHost:     \"test@host\",\n-\t\t\t\tPort:     1000,\n-\t\t\t\tTLS:      true,\n-\t\t\t\tUsername: \"test@username\",\n-\t\t\t\tPassword: \"test@password\",\n-\t\t\t\tTimeOut:  time.Second,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"with error on read message template\",\n+\t\t\terrText: \"can't parse message template: template: msgTmpl:1: unexpected unclosed action in command\",\n+\t\t\temailParams: EmailParams{\n+\t\t\t\tVerificationTemplatePath: \"testdata/verification.html.tmpl\",\n+\t\t\t\tMsgTemplatePath: \"testdata/bad.html.tmpl\",\n \t\t\t},\n \t\t},\n \t}\n+\n \tfor _, d := range testSet {\n \t\td := d\n \t\tt.Run(d.name, func(t *testing.T) {\n-\t\t\temail, err := NewEmail(d.emailParams, d.smtpParams)\n-\n-\t\t\tif d.err && d.errText == \"\" {\n-\t\t\t\tassert.Error(t, err)\n-\t\t\t\tassert.Nil(t, email)\n-\t\t\t} else if d.err && d.errText != \"\" {\n-\t\t\t\tassert.EqualError(t, err, d.errText)\n-\t\t\t\tassert.Nil(t, email)\n-\t\t\t} else {\n-\t\t\t\tassert.NoError(t, err)\n-\t\t\t\tassert.NotNil(t, email, \"email returned\")\n-\n-\t\t\t\tassert.NotNil(t, email.msgTmpl, \"e.template is set\")\n-\t\t\t\tassert.Equal(t, defaultEmailTemplate, email.EmailParams.MsgTemplate, \"empty emailParams.MsgTemplate changed to default\")\n-\t\t\t\tassert.Equal(t, defaultEmailVerificationTemplate, email.EmailParams.VerificationTemplate, \"empty emailParams.VerificationTemplate changed to default\")\n-\t\t\t\tassert.Equal(t, d.emailParams.From, email.EmailParams.From, \"emailParams.From unchanged after creation\")\n-\t\t\t\tif d.smtpParams.TimeOut == 0 {\n-\t\t\t\t\tassert.Equal(t, defaultEmailTimeout, email.TimeOut, \"empty emailParams.TimeOut changed to default\")\n-\t\t\t\t} else {\n-\t\t\t\t\tassert.Equal(t, d.smtpParams.TimeOut, email.TimeOut, \"emailParams.TimOut unchanged after creation\")\n-\t\t\t\t}\n-\t\t\t\tassert.Equal(t, d.smtpParams.Host, email.Host, \"emailParams.Host unchanged after creation\")\n-\t\t\t\tassert.Equal(t, d.smtpParams.Username, email.Username, \"emailParams.Username unchanged after creation\")\n-\t\t\t\tassert.Equal(t, d.smtpParams.Password, email.Password, \"emailParams.Password unchanged after creation\")\n-\t\t\t\tassert.Equal(t, d.smtpParams.Port, email.Port, \"emailParams.Port unchanged after creation\")\n-\t\t\t\tassert.Equal(t, d.smtpParams.TLS, email.TLS, \"emailParams.TLS unchanged after creation\")\n-\t\t\t}\n+\t\t\te := Email{EmailParams: d.emailParams}\n+\t\t\terr := e.setTemplates()\n+\n+\t\t\tassert.EqualError(t, err, d.errText)\n \t\t})\n \t}\n }\n@@ -103,15 +110,11 @@ func TestEmailSendErrors(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.EqualError(t, e.Send(context.Background(), Request{Email: \"bad@example.org\", Verification: VerificationMetadata{Token: \"some\"}}),\n \t\t\"error executing template to build verification message: template: test:1:2: executing \\\"test\\\" at <.Test>: can't evaluate field Test in type notify.verifyTmplData\")\n-\te.verifyTmpl, err = template.New(\"test\").Parse(defaultEmailVerificationTemplate)\n-\tassert.NoError(t, err)\n \n \te.msgTmpl, err = template.New(\"test\").Parse(\"{{.Test}}\")\n \tassert.NoError(t, err)\n \tassert.EqualError(t, e.Send(context.Background(), Request{Comment: store.Comment{ID: \"999\"}, parent: store.Comment{User: store.User{ID: \"test\"}}, Email: \"bad@example.org\"}),\n \t\t\"error executing template to build comment reply message: template: test:1:2: executing \\\"test\\\" at <.Test>: can't evaluate field Test in type notify.msgTmplData\")\n-\te.msgTmpl, err = template.New(\"test\").Parse(defaultEmailTemplate)\n-\tassert.NoError(t, err)\n \n \tctx, cancel := context.WithCancel(context.Background())\n \tcancel()\n@@ -121,12 +124,13 @@ func TestEmailSendErrors(t *testing.T) {\n \te.smtp = &fakeTestSMTP{}\n \tassert.EqualError(t, e.Send(context.Background(), Request{Comment: store.Comment{ID: \"999\"}, parent: store.Comment{User: store.User{ID: \"error\"}}, Email: \"bad@example.org\"}),\n \t\t\"error creating token for unsubscribe link: token generation error\")\n-\te.msgTmpl, err = template.New(\"test\").Parse(defaultEmailTemplate)\n-\tassert.NoError(t, err)\n }\n \n func TestEmailSend_ExitConditions(t *testing.T) {\n-\temail, err := NewEmail(EmailParams{}, SMTPParams{})\n+\temail, err := NewEmail(EmailParams{\n+\t\tVerificationTemplatePath: \"testdata/verification.html.tmpl\",\n+\t\tMsgTemplatePath: \"testdata/msg.html.tmpl\",\n+\t}, SMTPParams{})\n \tassert.NoError(t, err)\n \tassert.NotNil(t, email, \"expecting email returned\")\n \t// prevent triggering e.autoFlush creation\n@@ -181,7 +185,11 @@ func TestEmailSendClientError(t *testing.T) {\n }\n \n func TestEmail_Send(t *testing.T) {\n-\temail, err := NewEmail(EmailParams{From: \"from@example.org\"}, SMTPParams{})\n+\temail, err := NewEmail(EmailParams{\n+\t\tFrom: \"from@example.org\",\n+\t\tVerificationTemplatePath: \"testdata/verification.html.tmpl\",\n+\t\tMsgTemplatePath: \"testdata/msg.html.tmpl\",\n+\t}, SMTPParams{})\n \tassert.NoError(t, err)\n \tassert.NotNil(t, email)\n \tfakeSMTP := fakeTestSMTP{}\n@@ -229,7 +237,11 @@ Date: `)\n }\n \n func TestEmail_SendVerification(t *testing.T) {\n-\temail, err := NewEmail(EmailParams{From: \"from@example.org\"}, SMTPParams{})\n+\temail, err := NewEmail(EmailParams{\n+\t\tFrom: \"from@example.org\",\n+\t\tVerificationTemplatePath: \"testdata/verification.html.tmpl\",\n+\t\tMsgTemplatePath: \"testdata/msg.html.tmpl\",\n+\t}, SMTPParams{})\n \tassert.NoError(t, err)\n \tassert.NotNil(t, email)\n \tfakeSMTP := fakeTestSMTP{}\n@@ -247,7 +259,7 @@ func TestEmail_SendVerification(t *testing.T) {\n \tassert.Equal(t, \"from@example.org\", fakeSMTP.readMail())\n \tassert.Equal(t, 1, fakeSMTP.readQuitCount())\n \tassert.Equal(t, \"test@example.org\", fakeSMTP.readRcpt())\n-\t// test buildMessageFromRequest separately for message text\n+\t// test buildVerificationMessage separately for message text\n \tres, err := email.buildVerificationMessage(req.Verification.User, req.Email, req.Verification.Token, req.Verification.SiteID)\n \tassert.NoError(t, err)\n \tassert.Contains(t, res, `From: from@example.org"
    },
    {
      "sha": "e1c0a767058b2753e8acd10396d4467a34b8ade9",
      "filename": "backend/app/notify/testdata/bad.html.tmpl",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/notify/testdata/bad.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/notify/testdata/bad.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/testdata/bad.html.tmpl?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1 @@\n+{{"
    },
    {
      "sha": "c1f89bf6fa5e823acf0851f51f352c473c87f5d0",
      "filename": "backend/app/notify/testdata/msg.html.tmpl",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/notify/testdata/msg.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/notify/testdata/msg.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/testdata/msg.html.tmpl?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1,20 @@\n+{{- if .ForAdmin}}\n+New comment from {{.UserName}} on your site {{if .PostTitle}} to «{{.PostTitle}}»{{ end }}\n+{{- else }}\n+\tNew reply from {{.UserName}} on your comment{{if .PostTitle}} to «{{.PostTitle}}»{{ end }}\n+{{- end }}\n+{{- if .ParentCommentText}}\n+\t{{.ParentUserPicture}}\n+\t{{.ParentUserName}}\n+\t{{.ParentCommentDate.Format \"02.01.2006 at 15:04\"}}\n+\tParent comment link: {{.ParentCommentLink}}\n+\t{{.ParentCommentText}}\n+{{- end }}\n+\n+User: {{.UserName}}\n+{{.CommentDate.Format \"02.01.2006 at 15:04\"}}\n+Comment: {{.CommentText}}\n+{{.Email}} {{if not .ForAdmin}} for {{.ParentUserName}}{{ end }}\n+{{- if .UnsubscribeLink}}\n+Unsubscribe link: {{.UnsubscribeLink}}\n+{{- end }}"
    },
    {
      "sha": "eb80d09e628358d90cf9358f054fd14bf1e9f6f0",
      "filename": "backend/app/notify/testdata/verification.html.tmpl",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/notify/testdata/verification.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/notify/testdata/verification.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/testdata/verification.html.tmpl?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1,7 @@\n+Confirmation for {{.User}} on site {{.Site}}\n+{{- if .SubscribeURL}}\n+Subscribe url: {{.SubscribeURL}}{{.Token}}\n+{{- end }}\n+Token:{{.Token}}\n+Sent to {{.Email}}\n+"
    },
    {
      "sha": "02b9b064366605f3968247fe63b38c34845aea44",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/rest/api/rest.go",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/rest/api/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest.go?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -31,6 +31,7 @@ import (\n \t\"github.com/umputun/remark/backend/app/store\"\n \t\"github.com/umputun/remark/backend/app/store/image\"\n \t\"github.com/umputun/remark/backend/app/store/service\"\n+\t\"github.com/umputun/remark/backend/app/templates\"\n )\n \n // Rest is a rest access server\n@@ -367,6 +368,7 @@ func (s *Rest) controllerGroups() (public, private, admin, rss) {\n \t\tremarkURL:        s.RemarkURL,\n \t\tadminEmail:       s.AdminEmail,\n \t\tanonVote:         s.AnonVote,\n+\t\ttemplates:        templates.NewFS(),\n \t}\n \n \tadmGrp := admin{"
    },
    {
      "sha": "a0cd5d822dab45299ab3670dc435f371ef8ca7e9",
      "filename": "backend/app/rest/api/rest_private.go",
      "status": "modified",
      "additions": 19,
      "deletions": 25,
      "changes": 44,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/rest/api/rest_private.go",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/rest/api/rest_private.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_private.go?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -28,6 +28,7 @@ import (\n \t\"github.com/umputun/remark/backend/app/store/engine\"\n \t\"github.com/umputun/remark/backend/app/store/image\"\n \t\"github.com/umputun/remark/backend/app/store/service\"\n+\t\"github.com/umputun/remark/backend/app/templates\"\n )\n \n type private struct {\n@@ -41,6 +42,7 @@ type private struct {\n \tremarkURL        string\n \tadminEmail       string\n \tanonVote         bool\n+\ttemplates        templates.FileReader\n }\n \n type privStore interface {\n@@ -59,21 +61,6 @@ type privStore interface {\n \tInfo(locator store.Locator, readonlyAge int) (store.PostInfo, error)\n }\n \n-const unsubscribeHTML = `<!DOCTYPE html>\n-<html>\n-<head>\n-    <meta name=\"viewport\" content=\"width=device-width\"/>\n-    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n-</head>\n-<body>\n-<div style=\"text-align: center; font-family: Arial, sans-serif; font-size: 18px;\">\n-    <h1 style=\"position: relative; color: #4fbbd6; margin-top: 0.2em;\">Remark42</h1>\n-\t<p style=\"position: relative; max-width: 20em; margin: 0 auto 1em auto; line-height: 1.4em;\">Successfully unsubscribed</p>\n-</div>\n-</body>\n-</html>\n-`\n-\n // POST /comment - adds comment, resets all immutable fields\n func (s *private) createCommentCtrl(w http.ResponseWriter, r *http.Request) {\n \n@@ -379,25 +366,25 @@ func (s *private) setConfirmedEmailCtrl(w http.ResponseWriter, r *http.Request)\n func (s *private) emailUnsubscribeCtrl(w http.ResponseWriter, r *http.Request) {\n \ttkn := r.URL.Query().Get(\"tkn\")\n \tif tkn == \"\" {\n-\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, errors.New(\"missing parameter\"), \"token parameter is required\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, errors.New(\"missing parameter\"), \"token parameter is required\", rest.ErrInternal, s.templates)\n \t\treturn\n \t}\n \tsiteID := r.URL.Query().Get(\"site\")\n \n \tconfClaims, err := s.authenticator.TokenService().Parse(tkn)\n \tif err != nil {\n-\t\trest.SendErrorHTML(w, r, http.StatusForbidden, err, \"failed to verify confirmation token\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusForbidden, err, \"failed to verify confirmation token\", rest.ErrInternal, s.templates)\n \t\treturn\n \t}\n \n \tif s.authenticator.TokenService().IsExpired(confClaims) {\n-\t\trest.SendErrorHTML(w, r, http.StatusForbidden, errors.New(\"expired\"), \"failed to verify confirmation token\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusForbidden, errors.New(\"expired\"), \"failed to verify confirmation token\", rest.ErrInternal, s.templates)\n \t\treturn\n \t}\n \n \telems := strings.Split(confClaims.Handshake.ID, \"::\")\n \tif len(elems) != 2 {\n-\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, errors.New(confClaims.Handshake.ID), \"invalid handshake token\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, errors.New(confClaims.Handshake.ID), \"invalid handshake token\", rest.ErrInternal, s.templates)\n \t\treturn\n \t}\n \tuserID := elems[0]\n@@ -408,19 +395,19 @@ func (s *private) emailUnsubscribeCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tlog.Printf(\"[WARN] can't read email for %s, %v\", userID, err)\n \t}\n \tif existingAddress == \"\" {\n-\t\trest.SendErrorHTML(w, r, http.StatusConflict, errors.New(\"user is not subscribed\"), \"user does not have active email subscription\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusConflict, errors.New(\"user is not subscribed\"), \"user does not have active email subscription\", rest.ErrInternal, s.templates)\n \t\treturn\n \t}\n \tif address != existingAddress {\n-\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, errors.New(\"wrong email unsubscription\"), \"email address in request does not match known for this user\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, errors.New(\"wrong email unsubscription\"), \"email address in request does not match known for this user\", rest.ErrInternal, s.templates)\n \t\treturn\n \t}\n \n \tlog.Printf(\"[DEBUG] unsubscribe user %s\", userID)\n \n \tif err = s.dataService.DeleteUserDetail(siteID, userID, engine.UserEmail); err != nil {\n \t\tcode := parseError(err, rest.ErrInternal)\n-\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, err, \"can't delete email for user\", code)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, err, \"can't delete email for user\", code, s.templates)\n \t\treturn\n \t}\n \t// clean User.Email from the token, if user has the token\n@@ -431,7 +418,7 @@ func (s *private) emailUnsubscribeCtrl(w http.ResponseWriter, r *http.Request) {\n \tif claims.User != nil && claims.User.Email != \"\" {\n \t\tclaims.User.Email = \"\"\n \t\tif _, err = s.authenticator.TokenService().Set(w, claims); err != nil {\n-\t\t\trest.SendErrorHTML(w, r, http.StatusInternalServerError, err, \"failed to set token\", rest.ErrInternal)\n+\t\t\trest.SendErrorHTML(w, r, http.StatusInternalServerError, err, \"failed to set token\", rest.ErrInternal, s.templates)\n \t\t\treturn\n \t\t}\n \t}\n@@ -442,8 +429,15 @@ func (s *private) emailUnsubscribeCtrl(w http.ResponseWriter, r *http.Request) {\n \t\t\tpanic(err)\n \t\t}\n \t}\n-\n-\ttmpl := template.Must(template.New(\"unsubscribe\").Parse(unsubscribeHTML))\n+\tMustRead := func(path string) string {\n+\t\tfile, err := s.templates.ReadFile(path)\n+\t\tif err != nil {\n+\t\t\tpanic(err)\n+\t\t}\n+\t\treturn string(file)\n+\t}\n+\ttmplstr := MustRead(\"unsubscribe.html.tmpl\")\n+\ttmpl := template.Must(template.New(\"unsubscribe\").Parse(tmplstr))\n \tmsg := bytes.Buffer{}\n \tMustExecute(tmpl, &msg, nil)\n \trender.HTML(w, r, msg.String())"
    },
    {
      "sha": "a8be4cd52eb6adb99efb7bb6cc2030cb61f0c3e6",
      "filename": "backend/app/rest/api/rest_private_test.go",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/rest/api/rest_private_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/rest/api/rest_private_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_private_test.go?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -120,7 +120,7 @@ func TestRest_CreateWithRestrictedWord(t *testing.T) {\n \tts, _, teardown := startupT(t)\n \tdefer teardown()\n \n-\tbadComment := fmt.Sprintf(`{\"text\": \"What the duck is that?\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \n+\tbadComment := fmt.Sprintf(`{\"text\": \"What the duck is that?\", \"locator\":{\"url\": \"https://radio-t.com/blah1\",\n \"site\": \"remark42\"}}`)\n \n \tresp, err := post(t, ts.URL+\"/api/v1/comment\", badComment)\n@@ -503,10 +503,17 @@ func TestRest_AnonVote(t *testing.T) {\n \tassert.Equal(t, map[string]bool(nil), cr.Votes)\n }\n \n+type MockFS struct {}\n+func (fs *MockFS) ReadFile(path string) ([]byte, error) {\n+\treturn []byte(fmt.Sprintf(\"template %s\", path)), nil\n+}\n+\n func TestRest_Email(t *testing.T) {\n \tts, srv, teardown := startupT(t)\n \tdefer teardown()\n \n+\tsrv.privRest.templates = &MockFS{}\n+\n \t// issue good token\n \tclaims := token.Claims{\n \t\tHandshake: &token.Handshake{ID: \"dev::good@example.com\"},"
    },
    {
      "sha": "c174fe0b0fc6ed58ea8faf7b58ca2fb852e6b7a8",
      "filename": "backend/app/rest/httperrors.go",
      "status": "modified",
      "additions": 12,
      "deletions": 18,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/rest/httperrors.go",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/rest/httperrors.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/httperrors.go?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -13,6 +13,8 @@ import (\n \t\"github.com/go-chi/render\"\n \tlog \"github.com/go-pkgz/lgr\"\n \t\"github.com/go-pkgz/rest\"\n+\n+\t\"github.com/umputun/remark/backend/app/templates\"\n )\n \n // All error codes for UI mapping and translation\n@@ -38,21 +40,6 @@ const (\n \tErrAssetNotFound      = 18 // requested file not found\n )\n \n-const errorHTML = `<!DOCTYPE html>\n-<html>\n-<head>\n-    <meta name=\"viewport\" content=\"width=device-width\"/>\n-    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n-</head>\n-<body>\n-<div style=\"text-align: center; font-family: Arial, sans-serif; font-size: 18px;\">\n-    <h1 style=\"position: relative; color: #4fbbd6; margin-top: 0.2em;\">Remark42</h1>\n-\t<p style=\"position: relative; max-width: 20em; margin: 0 auto 1em auto; line-height: 1.4em;\">{{.Error}}: {{.Details}}.</p>\n-</div>\n-</body>\n-</html>\n-`\n-\n // errTmplData store data for error message\n type errTmplData struct {\n \tError   string\n@@ -61,15 +48,22 @@ type errTmplData struct {\n \n // SendErrorHTML makes html body with provided template and responds with provided http status code,\n // error code is not included in render as it is intended for UI developers and not for the users\n-func SendErrorHTML(w http.ResponseWriter, r *http.Request, httpStatusCode int, err error, details string, errCode int) {\n+func SendErrorHTML(w http.ResponseWriter, r *http.Request, httpStatusCode int, err error, details string, errCode int, t templates.FileReader) {\n \t// MustExecute behaves like template.Execute, but panics if an error occurs.\n \tMustExecute := func(tmpl *template.Template, wr io.Writer, data interface{}) {\n \t\tif err = tmpl.Execute(wr, data); err != nil {\n \t\t\tpanic(err)\n \t\t}\n \t}\n-\n-\ttmpl := template.Must(template.New(\"error\").Parse(errorHTML))\n+\tMustRead := func(path string) string {\n+\t\tfile, e := t.ReadFile(path)\n+\t\tif e != nil {\n+\t\t\tpanic(e)\n+\t\t}\n+\t\treturn string(file)\n+\t}\n+\ttmplstr := MustRead(\"error_response.html.tmpl\")\n+\ttmpl := template.Must(template.New(\"error\").Parse(tmplstr))\n \tlog.Printf(\"[WARN] %s\", errDetailsMsg(r, httpStatusCode, err, details, errCode))\n \trender.Status(r, httpStatusCode)\n \tmsg := bytes.Buffer{}"
    },
    {
      "sha": "960a975cdf9d3e7ebb1f7291804619fe08fee690",
      "filename": "backend/app/rest/httperrors_test.go",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/rest/httperrors_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/rest/httperrors_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/httperrors_test.go?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -2,6 +2,7 @@ package rest\n \n import (\n \t\"errors\"\n+\t\"fmt\"\n \t\"io/ioutil\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n@@ -37,12 +38,18 @@ func TestSendErrorJSON(t *testing.T) {\n \tassert.Equal(t, `{\"code\":123,\"details\":\"error details 123456\",\"error\":\"error 500\"}`+\"\\n\", string(body))\n }\n \n-func TestSendErrorHTML(t *testing.T) {\n+type MockFS struct {}\n+func (fs *MockFS) ReadFile(path string) ([]byte, error) {\n+\treturn []byte(fmt.Sprintf(\"{{.Error}}{{.Details}} %s\", path)), nil\n+}\n \n+\n+func TestSendErrorHTML(t *testing.T) {\n+\tfs := &MockFS{}\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tif r.URL.Path == \"/error\" {\n \t\t\tt.Log(\"http err request\", r.URL)\n-\t\t\tSendErrorHTML(w, r, 500, errors.New(\"error 500\"), \"error details 123456\", 987)\n+\t\t\tSendErrorHTML(w, r, 500, errors.New(\"error 500\"), \"error details 123456\", 987, fs)\n \t\t\treturn\n \t\t}\n \t\tw.WriteHeader(404)"
    },
    {
      "sha": "4185b7708617ce32080949db5e373c908af22554",
      "filename": "backend/app/templates/templates.go",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/templates/templates.go",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/templates/templates.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/templates/templates.go?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1,38 @@\n+package templates\n+\n+import (\n+\t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"path/filepath\"\n+\n+\tlog \"github.com/go-pkgz/lgr\"\n+\t\"github.com/rakyll/statik/fs\"\n+)\n+\n+// FS stores link to statikFS if it exists\n+type FS struct {\n+\tstatik http.FileSystem\n+}\n+\n+// FileReader describes methods of filesystem\n+type FileReader interface {\n+\tReadFile(path string) ([]byte, error)\n+}\n+\n+// NewFS returns new FS instance, which will read from statik if it's available and from fs otherwise\n+func NewFS() *FS {\n+\tf := &FS{}\n+\tif statikFS, err := fs.NewWithNamespace(\"templates\"); err == nil {\n+\t\tlog.Printf(\"[INFO] templates will be read from statik\")\n+\t\tf.statik = statikFS\n+\t}\n+\treturn f\n+}\n+\n+// ReadFile depends on statik achieve exists\n+func (f *FS) ReadFile(path string) ([]byte, error) {\n+\tif f.statik != nil {\n+\t\treturn fs.ReadFile(f.statik, filepath.Join(\"/\", path))\n+\t}\n+\treturn ioutil.ReadFile(filepath.Join(\"./\",filepath.Clean(path)))\n+}"
    },
    {
      "sha": "3ccd968e0c7bb329d7b429ae128926c6f11cffce",
      "filename": "backend/app/templates/templates_test.go",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/templates/templates_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/templates/templates_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/templates/templates_test.go?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1,24 @@\n+package templates\n+\n+import (\n+\t\"testing\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+func TestNewFS(t *testing.T) {\n+\tfs := NewFS()\n+\tassert.NotNil(t, &fs)\n+}\n+\n+func TestFS_ReadFile(t *testing.T) {\n+\tfs := NewFS()\n+\n+\tfile, err := fs.ReadFile(\"testdata/template.html.tmpl\")\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, []byte(\"template\\n\"), file)\n+\n+\tfile, err = fs.ReadFile(\"testdata/bad_path.html.tmpl\")\n+\tassert.Error(t, err)\n+\tassert.Nil(t, file)\n+}"
    },
    {
      "sha": "3236cba6d6ebe89a13ca485fe17c890548d23da5",
      "filename": "backend/app/templates/testdata/template.html.tmpl",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/templates/testdata/template.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/app/templates/testdata/template.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/templates/testdata/template.html.tmpl?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1 @@\n+template"
    },
    {
      "sha": "b5fd6b753c9fcd85c1dd59f8bb02c7a2ea86eb4c",
      "filename": "backend/templates/email_confirmation_login.html.tmpl",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/templates/email_confirmation_login.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/templates/email_confirmation_login.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/templates/email_confirmation_login.html.tmpl?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1,19 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+\t<meta name=\"viewport\" content=\"width=device-width\" />\n+\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n+</head>\n+<body>\n+<div style=\"text-align: center; font-family: Arial, sans-serif; font-size: 18px;\">\n+\t<h1 style=\"position: relative; color: #4fbbd6; margin-top: 0.2em;\">Remark42</h1>\n+\t<p style=\"position: relative; max-width: 20em; margin: 0 auto 1em auto; line-height: 1.4em;\">Confirmation for <b>{{.User}}</b> on site <b>{{.Site}}</b></p>\n+\t<div style=\"background-color: #eee; max-width: 20em; margin: 0 auto; border-radius: 0.4em; padding: 0.5em;\">\n+\t\t<p style=\"position: relative; margin: 0 0 0.5em 0;\">TOKEN</p>\n+\t\t<p style=\"position: relative; font-size: 0.7em; opacity: 0.8;\"><i>Copy and paste this text into “token” field on comments page</i></p>\n+\t\t<p style=\"position: relative; font-family: monospace; background-color: #fff; margin: 0; padding: 0.5em; word-break: break-all; text-align: left; border-radius: 0.2em; -webkit-user-select: all; user-select: all;\">{{.Token}}</p>\n+\t</div>\n+\t<p style=\"position: relative; margin-top: 2em; font-size: 0.8em; opacity: 0.8;\"><i>Sent to {{.Address}}</i></p>\n+</div>\n+</body>\n+</html>"
    },
    {
      "sha": "3c34c7e7e35e576bb14faab2c801bad1af351b05",
      "filename": "backend/templates/email_confirmation_subscription.html.tmpl",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/templates/email_confirmation_subscription.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/templates/email_confirmation_subscription.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/templates/email_confirmation_subscription.html.tmpl?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1,24 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+\t<meta name=\"viewport\" content=\"width=device-width\" />\n+\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n+</head>\n+<body>\n+\t<!-- Some of blocks on this page have color: #000 because GMail can wrap block in his own tags which can change text color -->\n+\t<div style=\"text-align: center; font-family: Helvetica, Arial, sans-serif; font-size: 18px;\">\n+\t\t<h1 style=\"position: relative; color: #4fbbd6; margin-top: 0.2em;\">Remark42</h1>\n+\t\t<p style=\"position: relative; max-width: 20em; margin: 0 auto 1em auto; line-height: 1.4em; color:#000!important;\">Confirmation for <b>{{.User}}</b> on site <b>{{.Site}}</b></p>\n+\t\t{{- if .SubscribeURL}}\n+\t\t<p style=\"position: relative; margin: 0 0 0.5em 0;color:#000!important;\"><a href=\"{{.SubscribeURL}}{{.Token}}\">Click here to subscribe to email notifications</a></p>\n+\t\t<p style=\"position: relative; margin: 0 0 0.5em 0;color:#000!important;\">Alternatively, you can use code below for subscription.</p>\n+\t\t{{- end }}\n+\t\t<div style=\"background-color: #eee; max-width: 20em; margin: 0 auto; border-radius: 0.4em; padding: 0.5em;\">\n+\t\t\t<p style=\"position: relative; margin: 0 0 0.5em 0;color:#000!important;\">TOKEN</p>\n+\t\t\t<p style=\"position: relative; font-size: 0.7em; opacity: 0.8;\"><i style=\"color:#000!important;\">Copy and paste this text into “token” field on comments page</i></p>\n+\t\t\t<p style=\"position: relative; font-family: monospace; background-color: #fff; margin: 0; padding: 0.5em; word-break: break-all; text-align: left; border-radius: 0.2em; -webkit-user-select: all; user-select: all;\">{{.Token}}</p>\n+\t\t</div>\n+\t\t<p style=\"position: relative; margin-top: 2em; font-size: 0.8em; opacity: 0.8;\"><i style=\"color:#000!important;\">Sent to {{.Email}}</i></p>\n+\t</div>\n+</body>\n+</html>"
    },
    {
      "sha": "6755e84f4f4b9cb59f526dfa87b980f0a091ad78",
      "filename": "backend/templates/email_reply.html.tmpl",
      "status": "added",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/templates/email_reply.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/templates/email_reply.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/templates/email_reply.html.tmpl?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1,68 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+\t<meta name=\"viewport\" content=\"width=device-width\" />\n+\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n+\t<style type=\"text/css\">\n+\t\timg {\n+\t\t\tmax-width: 100%;\n+\t\t\tmax-height: 250px;\n+\t\t\tmargin: 5px 0;\n+\t\t\tdisplay: block;\n+\t\t\tcolor: #000;\n+\t\t}\n+\t\ta {\n+\t\t\ttext-decoration: none;\n+\t\t\tcolor: #0aa;\n+\t\t}\n+\t\tp {\n+\t\t\tmargin: 0 0 12px;\n+\t\t}\n+\t\tblockquote {\n+\t\t\tmargin: 10px 0;\n+\t\t\tpadding: 12px 12px 1px 12px;\n+\t\t\tbackground: rgba(255,255,255,.5)\n+\t\t}\n+\t</style>\n+</head>\n+<!-- Some of blocks on this page have color: #000 because GMail can wrap block in his own tags which can change text color -->\n+<body>\n+\t<div style=\"font-family: Helvetica, Arial, sans-serif; font-size: 18px; width: 100%; max-width: 640px; margin: auto;\">\n+\t\t<h1 style=\"text-align: center; position: relative; color: #4fbbd6; margin-top: 10px; margin-bottom: 10px;\">Remark42</h1>\n+\t\t{{- if .ForAdmin}}\n+\t\t<div style=\"font-size: 16px; text-align: center; margin-bottom: 10px; color:#000!important;\">New comment from {{.UserName}} on your site {{if .PostTitle}} to «{{.PostTitle}}»{{ end }}</div>\n+\t\t{{- else }}\n+\t\t<div style=\"font-size: 16px; text-align: center; margin-bottom: 10px; color:#000!important;\">New reply from {{.UserName}} on your comment{{if .PostTitle}} to «{{.PostTitle}}»{{ end }}</div>\n+\t\t{{- end }}\n+\t\t<div style=\"background-color: #eee; padding: 15px 20px 20px 20px; border-radius: 3px;\">\n+\t\t\t{{- if .ParentCommentText}}\n+\t\t\t\t<div style=\"margin-bottom: 12px; line-height: 24px; word-break: break-all;\">\n+\t\t\t\t\t<img src=\"{{.ParentUserPicture}}\" style=\"width: 24px; height: 24px; display: inline-block; vertical-align: middle; margin: 0 8px 0 0; border-radius: 3px; background-color: #ccc;\"/>\n+\t\t\t\t\t<span style=\"font-size: 14px; font-weight: bold; color: #777\">{{.ParentUserName}}</span>\n+\t\t\t\t\t<span style=\"color: #999; font-size: 14px; margin: 0 8px;\">{{.ParentCommentDate.Format \"02.01.2006 at 15:04\"}}</span>\n+\t\t\t\t\t<a href=\"{{.ParentCommentLink}}\" style=\"color: #0aa; font-size: 14px;\"><b>Show</b></a>\n+\t\t\t\t</div>\n+\t\t\t\t<div style=\"font-size: 14px; color:#333!important; padding: 0 14px 0 2px; border-radius: 3px; line-height: 1.4;\">{{.ParentCommentText}}</div>\n+\t\t\t{{- end }}\n+\t\t\t<div style=\"padding-left: 20px; border-left: 1px dotted rgba(0,0,0,0.15); margin-top: 15px; padding-top: 5px;\">\n+\t\t\t\t<div style=\"margin-bottom: 12px; line-height: 24px;word-break: break-all;\">\n+\t\t\t\t\t<img src=\"{{.UserPicture}}\" style=\"width: 24px; height: 24px; display:inline-block; vertical-align:middle; margin: 0 8px 0 0; border-radius: 3px; background-color: #ccc;\"/>\n+\t\t\t\t\t<span style=\"font-size: 14px; font-weight: bold; color: #777\">{{.UserName}}</span>\n+\t\t\t\t\t<span style=\"color: #999; font-size: 14px; margin: 0 8px;\">{{.CommentDate.Format \"02.01.2006 at 15:04\"}}</span>\n+\t\t\t\t\t<a href=\"{{.CommentLink}}\" style=\"color: #0aa; font-size: 14px;\"><b>Reply</b></a>\n+\t\t\t\t</div>\n+\t\t\t\t<div style=\"font-size: 16px; background-color: #fff; color:#000!important; padding: 14px 14px 2px 14px; border-radius: 3px; line-height: 1.4;\">{{.CommentText}}</div>\n+\t\t\t</div>\n+\t\t</div>\n+\t\t<div style=\"text-align: center; font-size: 14px; margin-top: 32px;\">\n+\t\t\t<i style=\"color: #000!important;\">Sent to <a style=\"color:inherit; text-decoration: none\" href=\"mailto:{{.Email}}\">{{.Email}}</a>{{if not .ForAdmin}} for {{.ParentUserName}}{{ end }}</i>\n+\t\t\t<div style=\"width: 150px; border-top: 1px solid rgba(0, 0, 0, 0.15); padding-top: 15px; margin: 15px auto 0;\"></div>\n+\t\t\t{{- if .UnsubscribeLink}}\n+\t\t\t<a style=\"color: #0aa;\" href=\"{{.UnsubscribeLink}}\">Unsubscribe</a>\n+\t\t\t{{- end }}\n+\t\t\t<!-- This is hack for remove collapser in Gmail which can collapse end of the message -->\n+\t\t\t<div style=\"opacity: 0;\">[{{.CommentDate.Format \"02.01.2006 at 15:04\"}}]</div>\n+\t\t</div>\n+\t</div>\n+</body>\n+</html>"
    },
    {
      "sha": "f7ca98817b7b1777fc1e31637bbeebb1e653d17a",
      "filename": "backend/templates/email_unsubscribe.html.tmpl",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/templates/email_unsubscribe.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/templates/email_unsubscribe.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/templates/email_unsubscribe.html.tmpl?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1,13 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+\t\t<meta name=\"viewport\" content=\"width=device-width\"/>\n+\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n+</head>\n+<body>\n+<div style=\"text-align: center; font-family: Arial, sans-serif; font-size: 18px;\">\n+\t\t<h1 style=\"position: relative; color: #4fbbd6; margin-top: 0.2em;\">Remark42</h1>\n+\t<p style=\"position: relative; max-width: 20em; margin: 0 auto 1em auto; line-height: 1.4em;\">Successfully unsubscribed</p>\n+</div>\n+</body>\n+</html>"
    },
    {
      "sha": "57245efe35eb049be4d116f5612c5e6ee31e8f5e",
      "filename": "backend/templates/error_response.html.tmpl",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/templates/error_response.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/backend/templates/error_response.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/templates/error_response.html.tmpl?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1,13 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+\t\t<meta name=\"viewport\" content=\"width=device-width\"/>\n+\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n+</head>\n+<body>\n+<div style=\"text-align: center; font-family: Arial, sans-serif; font-size: 18px;\">\n+\t\t<h1 style=\"position: relative; color: #4fbbd6; margin-top: 0.2em;\">Remark42</h1>\n+\t<p style=\"position: relative; max-width: 20em; margin: 0 auto 1em auto; line-height: 1.4em;\">{{.Error}}: {{.Details}}.</p>\n+</div>\n+</body>\n+</html>"
    },
    {
      "sha": "77968948960e20ca348da61fbbc2e273a2fe01b1",
      "filename": "docs/developers-guide/email-templates.md",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/b90d076fdfa7c12259e922bacc3ecd02e30e589c/docs/developers-guide/email-templates.md",
      "raw_url": "https://github.com/umputun/remark42/raw/b90d076fdfa7c12259e922bacc3ecd02e30e589c/docs/developers-guide/email-templates.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/docs/developers-guide/email-templates.md?ref=b90d076fdfa7c12259e922bacc3ecd02e30e589c",
      "patch": "@@ -0,0 +1,13 @@\n+### Email templating\n+\n+We use golang templates for email templating.\n+templates located in `backend/templates` and embeded into binary by statik\n+\n+For getting access to files you can use package `templates` from `backend/app/templates`\n+\n+Now we have following templates:\n+- `email_confirmation_login.html.tmpl` – used for confirmation of login\n+- `email_confirmation_subscription.html.tmpl` – used for confirmation of subscription\n+– `email_reply.html.tmpl` – used for sending replies to user comments (when user subscribed to it) and for noticing admins about new comments on a site\n+– `email_unsubscribe.html.tmpl` – used for notification about successful unsubscribe from replies\n+– `error_response.html.tmpl` – used for ..."
    }
  ]
}
