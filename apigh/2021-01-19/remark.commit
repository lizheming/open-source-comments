{
  "sha": "d40e3542655c183c6cc618721303cad0a9a3259b",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmQ0MGUzNTQyNjU1YzE4M2M2Y2M2MTg3MjEzMDNjYWQwYTlhMzI1OWI=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-01-18T20:52:16Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-01-18T21:44:32Z"
    },
    "message": "add more tests for voted_ip",
    "tree": {
      "sha": "e2a5f0e46bf3a6c55847a04703b565adba361c5e",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/e2a5f0e46bf3a6c55847a04703b565adba361c5e"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/d40e3542655c183c6cc618721303cad0a9a3259b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/d40e3542655c183c6cc618721303cad0a9a3259b",
  "html_url": "https://github.com/umputun/remark42/commit/d40e3542655c183c6cc618721303cad0a9a3259b",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/d40e3542655c183c6cc618721303cad0a9a3259b/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1048355b7bddfcfd3b6e21fb992e800a87bdcd47",
      "url": "https://api.github.com/repos/umputun/remark42/commits/1048355b7bddfcfd3b6e21fb992e800a87bdcd47",
      "html_url": "https://github.com/umputun/remark42/commit/1048355b7bddfcfd3b6e21fb992e800a87bdcd47"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 14,
    "deletions": 2
  },
  "files": [
    {
      "sha": "79033066bc2e2829c5b8feb0aa828e23e11abc6d",
      "filename": "backend/app/rest/api/rest_private_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/d40e3542655c183c6cc618721303cad0a9a3259b/backend/app/rest/api/rest_private_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d40e3542655c183c6cc618721303cad0a9a3259b/backend/app/rest/api/rest_private_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_private_test.go?ref=d40e3542655c183c6cc618721303cad0a9a3259b",
      "patch": "@@ -530,6 +530,7 @@ func TestRest_AnonVote(t *testing.T) {\n \tassert.Equal(t, 1, cr.Score)\n \tassert.Equal(t, 1, cr.Vote)\n \tassert.Equal(t, map[string]bool(nil), cr.Votes)\n+\tassert.Equal(t, map[string]store.VotedIPInfo(nil), cr.VotedIPs)\n }\n \n type MockFS struct{}"
    },
    {
      "sha": "2fc413f733536803bc1502e319741e038bec3d2a",
      "filename": "backend/app/store/comment_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/d40e3542655c183c6cc618721303cad0a9a3259b/backend/app/store/comment_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d40e3542655c183c6cc618721303cad0a9a3259b/backend/app/store/comment_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/comment_test.go?ref=d40e3542655c183c6cc618721303cad0a9a3259b",
      "patch": "@@ -78,6 +78,7 @@ func TestComment_PrepareUntrusted(t *testing.T) {\n \tassert.Equal(t, time.Time{}, comment.Timestamp)\n \tassert.Equal(t, false, comment.Deleted)\n \tassert.Equal(t, make(map[string]bool), comment.Votes)\n+\tassert.Equal(t, make(map[string]VotedIPInfo), comment.VotedIPs)\n \tassert.Equal(t, User{ID: \"username\"}, comment.User)\n \n }\n@@ -101,6 +102,7 @@ func TestComment_SetDeleted(t *testing.T) {\n \tassert.Equal(t, \"\", comment.Text)\n \tassert.Equal(t, \"\", comment.Orig)\n \tassert.Equal(t, map[string]bool{}, comment.Votes)\n+\tassert.Equal(t, map[string]VotedIPInfo{}, comment.VotedIPs)\n \tassert.Equal(t, 0, comment.Score)\n \tassert.True(t, comment.Deleted)\n \tassert.Nil(t, comment.Edit)\n@@ -127,6 +129,7 @@ func TestComment_SetDeletedHard(t *testing.T) {\n \tassert.Equal(t, \"\", comment.Text)\n \tassert.Equal(t, \"\", comment.Orig)\n \tassert.Equal(t, map[string]bool{}, comment.Votes)\n+\tassert.Equal(t, map[string]VotedIPInfo{}, comment.VotedIPs)\n \tassert.Equal(t, 0, comment.Score)\n \tassert.True(t, comment.Deleted)\n \tassert.Nil(t, comment.Edit)"
    },
    {
      "sha": "f0486725dced0156675de278a5d73528a5e5a8c0",
      "filename": "backend/app/store/service/service_test.go",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/d40e3542655c183c6cc618721303cad0a9a3259b/backend/app/store/service/service_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d40e3542655c183c6cc618721303cad0a9a3259b/backend/app/store/service/service_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/service/service_test.go?ref=d40e3542655c183c6cc618721303cad0a9a3259b",
      "patch": "@@ -52,6 +52,7 @@ func TestService_CreateFromEmpty(t *testing.T) {\n \tassert.Equal(t, \"name\", res.User.Name)\n \tassert.Equal(t, \"23f97cf4d5c29ef788ca2bdd1c9e75656c0e4149\", res.User.IP)\n \tassert.Equal(t, map[string]bool(nil), res.Votes)\n+\tassert.Equal(t, map[string]store.VotedIPInfo(nil), res.VotedIPs)\n }\n \n func TestService_CreateSiteDisabled(t *testing.T) {\n@@ -79,8 +80,10 @@ func TestService_CreateFromPartial(t *testing.T) {\n \t\tText:      \"text\",\n \t\tTimestamp: time.Date(2018, 3, 25, 16, 34, 33, 0, time.UTC),\n \t\tVotes:     map[string]bool{\"u1\": true, \"u2\": false},\n-\t\tUser:      store.User{IP: \"192.168.1.1\", ID: \"user\", Name: \"name\"},\n-\t\tLocator:   store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n+\t\tVotedIPs: map[string]store.VotedIPInfo{\"xxx\": {Value: true, Timestamp: time.Now()},\n+\t\t\t\"yyy\": {Value: false, Timestamp: time.Now()}},\n+\t\tUser:    store.User{IP: \"192.168.1.1\", ID: \"user\", Name: \"name\"},\n+\t\tLocator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n \t}\n \tid, err := b.Create(comment)\n \tassert.NoError(t, err)\n@@ -241,12 +244,14 @@ func TestService_Vote(t *testing.T) {\n \tassert.Equal(t, 1, c.Score)\n \tassert.Equal(t, 1, c.Vote, \"can see own vote result\")\n \tassert.Nil(t, c.Votes)\n+\tassert.Nil(t, c.VotedIPs)\n \t// check result as user2\n \tc, err = b.Get(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, store.User{ID: \"user2\"})\n \tassert.NoError(t, err)\n \tassert.Equal(t, 1, c.Score)\n \tassert.Equal(t, 0, c.Vote, \"can't see other user vote result\")\n \tassert.Nil(t, c.Votes)\n+\tassert.Nil(t, c.VotedIPs)\n \n \treq = VoteReq{\n \t\tLocator:   store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n@@ -302,6 +307,7 @@ func TestService_Vote(t *testing.T) {\n \tassert.Equal(t, 0, res[0].Score)\n \tassert.Equal(t, 0, res[0].Vote)\n \tassert.Equal(t, map[string]bool(nil), res[0].Votes, \"vote reset ok\")\n+\tassert.Equal(t, map[string]store.VotedIPInfo(nil), res[0].VotedIPs, \"vote reset ok\")\n }\n \n func TestService_VoteLimit(t *testing.T) {\n@@ -384,6 +390,7 @@ func TestService_VoteAggressive(t *testing.T) {\n \tassert.Equal(t, 2, res[0].Score, \"add single +1\")\n \tassert.Equal(t, 1, res[0].Vote, \"user1 voted +1\")\n \tassert.Equal(t, 0, len(res[0].Votes), \"votes hidden\")\n+\tassert.Equal(t, 0, len(res[0].VotedIPs), \"vote ips hidden\")\n \n \t// random +1/-1 result should be [0..2]\n \trand.Seed(time.Now().UnixNano())\n@@ -436,6 +443,7 @@ func TestService_VoteConcurrent(t *testing.T) {\n \trequire.NoError(t, err)\n \tassert.Equal(t, 100, res[0].Score, \"should have 100 score\")\n \tassert.Equal(t, 0, len(res[0].Votes), \"should hide votes\")\n+\tassert.Equal(t, 0, len(res[0].VotedIPs), \"should hide vote ips\")\n \tassert.Equal(t, 0.0, res[0].Controversy, \"should have 0 controversy\")\n }\n "
    }
  ]
}
