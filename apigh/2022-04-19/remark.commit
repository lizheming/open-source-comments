{
  "sha": "3f3bfaffc6f04de6d7a32837b33fb9779c125152",
  "node_id": "C_kwDOBtgov9oAKDNmM2JmYWZmYzZmMDRkZTZkN2EzMjgzN2IzM2ZiOTc3OWMxMjUxNTI",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2022-04-18T05:03:59Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2022-04-18T05:03:59Z"
    },
    "message": "Merge remote-tracking branch 'origin/master'",
    "tree": {
      "sha": "ade34ab07df276cb64d4f9bed38743bb3a35529b",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/ade34ab07df276cb64d4f9bed38743bb3a35529b"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/3f3bfaffc6f04de6d7a32837b33fb9779c125152",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/3f3bfaffc6f04de6d7a32837b33fb9779c125152",
  "html_url": "https://github.com/umputun/remark42/commit/3f3bfaffc6f04de6d7a32837b33fb9779c125152",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/3f3bfaffc6f04de6d7a32837b33fb9779c125152/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9efcc9aba3e3d7057aa1cda5d0c7b875ead3ce21",
      "url": "https://api.github.com/repos/umputun/remark42/commits/9efcc9aba3e3d7057aa1cda5d0c7b875ead3ce21",
      "html_url": "https://github.com/umputun/remark42/commit/9efcc9aba3e3d7057aa1cda5d0c7b875ead3ce21"
    },
    {
      "sha": "2a7966b9e60a83c5da5035bef4905db44bb5d71f",
      "url": "https://api.github.com/repos/umputun/remark42/commits/2a7966b9e60a83c5da5035bef4905db44bb5d71f",
      "html_url": "https://github.com/umputun/remark42/commit/2a7966b9e60a83c5da5035bef4905db44bb5d71f"
    }
  ],
  "stats": {
    "total": 513,
    "additions": 161,
    "deletions": 352
  },
  "files": [
    {
      "sha": "5f4a8fa96fada5971cbb05d471b6d89834cf18c7",
      "filename": "backend/app/cmd/avatar_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Favatar_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Favatar_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Favatar_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -12,7 +12,6 @@ import (\n )\n \n func TestAvatar_Execute(t *testing.T) {\n-\n \tdefer os.RemoveAll(\"/tmp/ava-test\")\n \n \t// from fs to bolt"
    },
    {
      "sha": "a842e906cb0ceb6c632978f4ad473bba18d0a84e",
      "filename": "backend/app/cmd/cleanup.go",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fcleanup.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fcleanup.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fcleanup.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -55,7 +55,6 @@ func (cc *CleanupCommand) Execute(_ []string) error {\n \t\t\tcc.procTitles(comments)\n \t\t} else {\n \t\t\tspamComments += cc.procSpam(comments)\n-\n \t\t}\n \t}\n \n@@ -151,7 +150,6 @@ func (cc *CleanupCommand) listPosts() ([]store.PostInfo, error) {\n \n // get all comments for post url via /find?site=siteID&url=post-url&format=[tree|plain]\n func (cc *CleanupCommand) listComments(postURL string) ([]store.Comment, error) {\n-\n \tcommentsURL := fmt.Sprintf(\"%s/api/v1/find?site=%s&url=%s&format=plain\", cc.RemarkURL, cc.Site, postURL)\n \n \tvar r *http.Response\n@@ -191,7 +189,6 @@ func (cc *CleanupCommand) listComments(postURL string) ([]store.Comment, error)\n \n // deleteComment with DELETE /admin/comment/{id}?site=siteID&url=post-url\n func (cc *CleanupCommand) deleteComment(c store.Comment) error {\n-\n \tdeleteURL := fmt.Sprintf(\"%s/api/v1/admin/comment/%s?site=%s&url=%s&format=plain\", cc.RemarkURL, c.ID, cc.Site, c.Locator.URL)\n \treq, err := http.NewRequest(\"DELETE\", deleteURL, http.NoBody)\n \tif err != nil {\n@@ -213,7 +210,6 @@ func (cc *CleanupCommand) deleteComment(c store.Comment) error {\n \n // setTitle with PUT /admin/title/{id}?site=siteID&url=post-url\n func (cc *CleanupCommand) setTitle(c store.Comment) error {\n-\n \ttitleURL := fmt.Sprintf(\"%s/api/v1/admin/title/%s?site=%s&url=%s&format=plain\", cc.RemarkURL, c.ID, cc.Site, c.Locator.URL)\n \treq, err := http.NewRequest(\"PUT\", titleURL, http.NoBody)\n \tif err != nil {\n@@ -235,7 +231,6 @@ func (cc *CleanupCommand) setTitle(c store.Comment) error {\n \n // isSpam calculates spam's probability as a score\n func (cc *CleanupCommand) isSpam(comment store.Comment) (isSpam bool, spamScore float64) {\n-\n \tbadWord := func(txt string) float64 {\n \t\tres := 0.0\n \t\tfor _, w := range cc.BadWords {"
    },
    {
      "sha": "402513109b314421680e0d70a2082edb11611cbb",
      "filename": "backend/app/cmd/cleanup_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fcleanup_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fcleanup_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fcleanup_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -59,7 +59,6 @@ func TestCleanup_IsSpam(t *testing.T) {\n }\n \n func TestCleanup_postsInRange(t *testing.T) {\n-\n \tr := chi.NewRouter()\n \tcleanupRoutes(t, r, nil)\n \tts := httptest.NewServer(r)\n@@ -211,5 +210,4 @@ func cleanupRoutes(t *testing.T, r *chi.Mux, c *cleanedComments) {\n \t\tc.ids = append(c.ids, r.URL.Path)\n \t\tc.lock.Unlock()\n \t})\n-\n }"
    },
    {
      "sha": "c630f3c03ec3121e4f8dc30c31be0cdfc3c1bb50",
      "filename": "backend/app/cmd/cmd.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fcmd.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fcmd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fcmd.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -59,7 +59,6 @@ type fileParser struct {\n \n // parse apply template and also concat path and file. In case if file contains path separator path will be ignored\n func (p *fileParser) parse(now time.Time) (string, error) {\n-\n \t// file/location parameters my have template masks\n \tfileTemplate := struct {\n \t\tYYYYMMDD string"
    },
    {
      "sha": "1e69b09cf98c5b3e313b0c9dc80ecd8c57923e46",
      "filename": "backend/app/cmd/import_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fimport_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fimport_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fimport_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -15,7 +15,6 @@ import (\n )\n \n func TestImport_Execute(t *testing.T) {\n-\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tassert.Equal(t, r.URL.Path, \"/api/v1/admin/import\")\n \t\tassert.Equal(t, \"POST\", r.Method)\n@@ -48,7 +47,6 @@ func TestImport_Execute(t *testing.T) {\n }\n \n func TestImport_ExecuteFailed(t *testing.T) {\n-\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tassert.Equal(t, r.URL.Path, \"/api/v1/admin/import\")\n \t\tassert.Equal(t, \"POST\", r.Method)\n@@ -102,7 +100,6 @@ func TestImport_ExecuteTimeout(t *testing.T) {\n \t\ttime.Sleep(500 * time.Millisecond)\n \t\tfmt.Fprintln(w, \"some response\")\n \t\tfmt.Fprintln(w, string(body))\n-\n \t}))\n \tdefer ts.Close()\n "
    },
    {
      "sha": "22c7329424e88aceef5fb034e0885ddead78c0e5",
      "filename": "backend/app/cmd/remap_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fremap_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fremap_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fremap_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -12,7 +12,6 @@ import (\n )\n \n func TestRemap_Execute(t *testing.T) {\n-\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tassert.Equal(t, r.URL.Path, \"/api/v1/admin/remap\")\n \t\tassert.Equal(t, \"POST\", r.Method)"
    },
    {
      "sha": "228c00575c348308f51109bf051024619f653bd3",
      "filename": "backend/app/cmd/restore_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Frestore_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Frestore_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Frestore_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -13,7 +13,6 @@ import (\n )\n \n func TestRestore_Execute(t *testing.T) {\n-\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tassert.Equal(t, r.URL.Path, \"/api/v1/admin/import\")\n \t\tassert.Equal(t, \"POST\", r.Method)"
    },
    {
      "sha": "dd11bf1a678169db24a5e5b92d278c5d3c1f55e4",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fserver.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fserver.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fserver.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -449,7 +449,6 @@ func contains(s string, a []string) bool {\n // newServerApp prepares application and return it with all active parts\n // doesn't start anything\n func (s *ServerCommand) newServerApp(ctx context.Context) (*serverApp, error) {\n-\n \tif err := makeDirs(s.BackupLocation); err != nil {\n \t\treturn nil, errors.Wrap(err, \"failed to create backup store\")\n \t}\n@@ -885,7 +884,6 @@ func (s *ServerCommand) addAuthProviders(authenticator *auth.Service) error {\n \t\tlog.Print(\"[INFO] anonymous access enabled\")\n \t\tvar isValidAnonName = regexp.MustCompile(`^[\\p{L}\\d_ ]+$`).MatchString\n \t\tauthenticator.AddDirectProvider(\"anonymous\", provider.CredCheckerFunc(func(user, _ string) (ok bool, err error) {\n-\n \t\t\t// don't allow anon with space prefix or suffix\n \t\t\tif strings.HasPrefix(user, \" \") || strings.HasSuffix(user, \" \") {\n \t\t\t\tlog.Printf(\"[WARN] name %q has space as a suffix or prefix\", user)\n@@ -1205,7 +1203,6 @@ func (s *ServerCommand) startTelegramAuthAndNotify(ctx context.Context, telegram\n // Eliminate leading and trailing dbl quotes in each element only if both presented\n // based on https://stackoverflow.com/a/59318708\n func splitAtCommas(s string) []string {\n-\n \tcleanup := func(s string) string {\n \t\tif s == \"\" {\n \t\t\treturn s"
    },
    {
      "sha": "e64e2bfcb5acceb519ddbb420eb05330d9276942",
      "filename": "backend/app/cmd/server_test.go",
      "status": "modified",
      "additions": 5,
      "deletions": 9,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fserver_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fcmd%2Fserver_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fserver_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -38,7 +38,7 @@ func TestServerApp(t *testing.T) {\n \tresp, err := http.Get(fmt.Sprintf(\"http://localhost:%d/api/v1/ping\", port))\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n@@ -83,7 +83,7 @@ func TestServerApp_DevMode(t *testing.T) {\n \t// send ping\n \tresp, err := http.Get(fmt.Sprintf(\"http://localhost:%d/api/v1/ping\", port))\n \trequire.NoError(t, err)\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n@@ -251,14 +251,14 @@ func TestServerApp_WithSSL(t *testing.T) {\n \tresp, err := client.Get(fmt.Sprintf(\"http://localhost:%d/blah?param=1\", port))\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 307, resp.StatusCode)\n+\tassert.Equal(t, http.StatusTemporaryRedirect, resp.StatusCode)\n \tassert.Equal(t, fmt.Sprintf(\"https://localhost:%d/blah?param=1\", sslPort), resp.Header.Get(\"Location\"))\n \n \t// check https server\n \tresp, err = client.Get(fmt.Sprintf(\"https://localhost:%d/ping\", sslPort))\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n@@ -268,7 +268,6 @@ func TestServerApp_WithSSL(t *testing.T) {\n }\n \n func TestServerApp_WithRemote(t *testing.T) {\n-\n \topts := ServerCommand{}\n \topts.SetCommon(CommonOpts{RemarkURL: \"https://demo.remark42.com\", SharedSecret: \"123456\"})\n \n@@ -294,7 +293,7 @@ func TestServerApp_WithRemote(t *testing.T) {\n \tresp, err := http.Get(fmt.Sprintf(\"http://localhost:%d/api/v1/ping\", port))\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n@@ -377,7 +376,6 @@ func TestServerApp_Shutdown(t *testing.T) {\n }\n \n func TestServerApp_MainSignal(t *testing.T) {\n-\n \tdone := make(chan struct{})\n \tgo func() {\n \t\t<-done\n@@ -663,7 +661,6 @@ func TestServer_loadEmailTemplate(t *testing.T) {\n }\n \n func TestServerCommand_parseSameSite(t *testing.T) {\n-\n \ttbl := []struct {\n \t\tinp string\n \t\tres http.SameSite\n@@ -686,7 +683,6 @@ func TestServerCommand_parseSameSite(t *testing.T) {\n }\n \n func Test_splitAtCommas(t *testing.T) {\n-\n \ttbl := []struct {\n \t\tinp string\n \t\tres []string"
    },
    {
      "sha": "6d90dbe5c3836af3c57e53a7aac233e3ac1d23bb",
      "filename": "backend/app/main_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmain_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmain_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fmain_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -22,7 +22,6 @@ import (\n )\n \n func Test_Main(t *testing.T) {\n-\n \tdir, err := ioutil.TempDir(os.TempDir(), \"remark42\")\n \trequire.NoError(t, err)\n \tdefer os.RemoveAll(dir)\n@@ -54,7 +53,7 @@ func Test_Main(t *testing.T) {\n \tresp, err := http.Get(fmt.Sprintf(\"http://localhost:%d/api/v1/ping\", port))\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n@@ -118,7 +117,7 @@ func TestMain_WithWebhook(t *testing.T) {\n \t\tstrings.NewReader(`{\"text\": \"env test\", \"locator\":{\"url\": \"https://radio-t.com\", \"site\": \"remark\"}}`))\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 201, resp.StatusCode)\n+\tassert.Equal(t, http.StatusCreated, resp.StatusCode)\n }\n \n func TestGetDump(t *testing.T) {"
    },
    {
      "sha": "2886302ab4ad73eff9f7b3762651b5ba1482b9cf",
      "filename": "backend/app/migrator/commento.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmigrator%2Fcommento.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmigrator%2Fcommento.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fmigrator%2Fcommento.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -85,7 +85,6 @@ func (d *Commento) convert(r io.Reader, siteID string) (ch chan store.Comment) {\n \tdecoder := json.NewDecoder(r)\n \n \tgo func() {\n-\n \t\tvar exportedData commentoExport\n \t\terr := decoder.Decode(&exportedData)\n \t\tif err != nil {"
    },
    {
      "sha": "d5055ba07af9f24781df812d7f9288990e481a13",
      "filename": "backend/app/migrator/disqus.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmigrator%2Fdisqus.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmigrator%2Fdisqus.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fmigrator%2Fdisqus.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -82,7 +82,6 @@ func (d *Disqus) Import(r io.Reader, siteID string) (size int, err error) {\n // convert disqus stream (xml) from reader and fill channel of comments.\n // runs async and closes channel on completion.\n func (d *Disqus) convert(r io.Reader, siteID string) (ch chan store.Comment) {\n-\n \tpostsMap := map[string]string{} // tid:url\n \tdecoder := xml.NewDecoder(r)\n \tcommentsCh := make(chan store.Comment)"
    },
    {
      "sha": "43f6f65f770383752d55cdb1c1c550995c01af4b",
      "filename": "backend/app/migrator/native.go",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmigrator%2Fnative.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmigrator%2Fnative.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fmigrator%2Fnative.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -35,7 +35,6 @@ type meta struct {\n // Export all comments to writer as json strings. Each comment is one string, separated by \"\\n\"\n // The final file is a valid json\n func (n *Native) Export(w io.Writer, siteID string) (size int, err error) {\n-\n \tif err = n.exportMeta(siteID, w); err != nil {\n \t\treturn 0, errors.Wrapf(err, \"failed to export meta for site %s\", siteID)\n \t}\n@@ -55,7 +54,6 @@ func (n *Native) Export(w io.Writer, siteID string) (size int, err error) {\n \t\t}\n \n \t\tfor _, comment := range comments {\n-\n \t\t\tbuf := &bytes.Buffer{}\n \t\t\tenc := json.NewEncoder(buf)\n \t\t\tenc.SetEscapeHTML(false)\n@@ -180,7 +178,6 @@ func (n *Native) Import(reader io.Reader, siteID string) (size int, err error) {\n \t\t\t\tlog.Printf(\"[DEBUG] imported %d comments\", num)\n \t\t\t}\n \t\t})\n-\n \t}\n \n \tgrp.Wait()"
    },
    {
      "sha": "9c1e44cd2642ef3c3266aa518bdceab1c4eeb95e",
      "filename": "backend/app/migrator/native_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmigrator%2Fnative_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmigrator%2Fnative_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fmigrator%2Fnative_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -153,7 +153,6 @@ func TestNative_ImportWrongVersion(t *testing.T) {\n \tsize, err := r.Import(strings.NewReader(inp), \"radio-t\")\n \tassert.EqualError(t, err, \"unexpected import file version 2\")\n \tassert.Equal(t, 0, size)\n-\n }\n func TestNative_ImportManyWithError(t *testing.T) {\n \tb, teardown := prep(t) // write 2 comments\n@@ -181,7 +180,6 @@ func TestNative_ImportManyWithError(t *testing.T) {\n \n // makes new boltdb, put two records\n func prep(t *testing.T) (ds *service.DataStore, teardown func()) {\n-\n \ttestDB := fmt.Sprintf(\"/tmp/migrator-%d.db\", rand.Intn(999999999))\n \n \tboltStore, err := engine.NewBoltDB(bolt.Options{}, engine.BoltSite{SiteID: \"radio-t\", FileName: testDB})"
    },
    {
      "sha": "0b9e3ece99a9b62b4badb6d8c456ad2b1d3e295f",
      "filename": "backend/app/migrator/wordpress.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmigrator%2Fwordpress.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fmigrator%2Fwordpress.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fmigrator%2Fwordpress.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -60,7 +60,6 @@ func (w *WordPress) Convert(text string) string {\n \n // Import comments from WP and save to store\n func (w *WordPress) Import(r io.Reader, siteID string) (size int, err error) {\n-\n \tif e := w.DataStore.DeleteAll(siteID); e != nil {\n \t\treturn 0, e\n \t}\n@@ -88,7 +87,6 @@ func (w *WordPress) Import(r io.Reader, siteID string) (size int, err error) {\n }\n \n func (w *WordPress) convert(r io.Reader, siteID string) chan store.Comment {\n-\n \tdecoder := xml.NewDecoder(r)\n \tcommentsCh := make(chan store.Comment)\n "
    },
    {
      "sha": "3828c4bc8550d56fc8e5360267de97b4795f7db7",
      "filename": "backend/app/notify/slack.go",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fnotify%2Fslack.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fnotify%2Fslack.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fnotify%2Fslack.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -17,7 +17,6 @@ type Slack struct {\n \n // NewSlack makes Slack bot for notifications\n func NewSlack(token, channelName string, opts ...slack.Option) (*Slack, error) {\n-\n \tif channelName == \"\" {\n \t\tchannelName = \"general\"\n \t}\n@@ -38,7 +37,6 @@ func NewSlack(token, channelName string, opts ...slack.Option) (*Slack, error) {\n \n // Send to Slack channel\n func (t *Slack) Send(ctx context.Context, req Request) error {\n-\n \tlog.Printf(\"[DEBUG] send slack notification, comment id %s\", req.Comment.ID)\n \n \tuser := req.Comment.User.Name\n@@ -63,7 +61,6 @@ func (t *Slack) Send(ctx context.Context, req Request) error {\n \t)\n \n \treturn err\n-\n }\n \n // SendVerification is not implemented for Slack\n@@ -76,10 +73,8 @@ func (t *Slack) String() string {\n }\n \n func (t *Slack) findChannelIDByName(name string) (string, error) {\n-\n \tparams := slack.GetConversationsParameters{}\n \tfor {\n-\n \t\tchans, next, err := t.client.GetConversations(&params)\n \t\tif err != nil {\n \t\t\treturn \"\", err\n@@ -95,7 +90,6 @@ func (t *Slack) findChannelIDByName(name string) (string, error) {\n \t\t\tbreak\n \t\t}\n \t\tparams.Cursor = next\n-\n \t}\n \treturn \"\", errors.New(\"no such channel\")\n }"
    },
    {
      "sha": "ba9c796f89ad42504e297cc80830fcdb8790e2de",
      "filename": "backend/app/notify/slack_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fnotify%2Fslack_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fnotify%2Fslack_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fnotify%2Fslack_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -16,7 +16,6 @@ import (\n )\n \n func TestSlack_New(t *testing.T) {\n-\n \tts := newMockSlackServer()\n \tdefer ts.Close()\n \n@@ -28,11 +27,9 @@ func TestSlack_New(t *testing.T) {\n \t_, err = ts.newClient(\"unknown-channel\")\n \trequire.Error(t, err)\n \tassert.Contains(t, err.Error(), \"no such channel\")\n-\n }\n \n func TestSlack_Send(t *testing.T) {\n-\n \tts := newMockSlackServer()\n \tdefer ts.Close()\n \n@@ -63,7 +60,6 @@ func TestSlack_Send(t *testing.T) {\n \terr = tb.Send(context.TODO(), Request{Comment: c, parent: cp})\n \trequire.Error(t, err)\n \tassert.Contains(t, err.Error(), \"slack server error\", \"send on broken client\")\n-\n }\n \n func TestSlack_Name(t *testing.T) {\n@@ -98,7 +94,6 @@ func (ts *mockSlackServer) newClient(channelName string) (*Slack, error) {\n }\n \n func newMockSlackServer() *mockSlackServer {\n-\n \tmockServer := mockSlackServer{}\n \trouter := chi.NewRouter()\n \trouter.Post(\"/conversations.list\", func(w http.ResponseWriter, r *http.Request) {\n@@ -139,10 +134,8 @@ func newMockSlackServer() *mockSlackServer {\n \t})\n \n \trouter.Post(\"/chat.postMessage\", func(w http.ResponseWriter, r *http.Request) {\n-\n \t\tif mockServer.isServerDown {\n \t\t\tw.WriteHeader(500)\n-\n \t\t} else {\n \t\t\ts := `{\n \t\t\t    \"ok\": true,"
    },
    {
      "sha": "cb864044db8f43c1b94b6891b9b1e3a9e5578b01",
      "filename": "backend/app/notify/webhook_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fnotify%2Fwebhook_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fnotify%2Fwebhook_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fnotify%2Fwebhook_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -35,7 +35,6 @@ func (errReader) Read(p []byte) (n int, err error) {\n }\n \n func TestWebhook_NewWebhook(t *testing.T) {\n-\n \twh, err := NewWebhook(okWebhookClient, WebhookParams{\n \t\tWebhookURL: \"https://example.org/webhook\",\n \t\tHeaders:    []string{\"Authorization:Basic AXVubzpwQDU1dzByYM==\"},\n@@ -68,7 +67,6 @@ func TestWebhook_NewWebhook(t *testing.T) {\n }\n \n func TestWebhook_Send(t *testing.T) {\n-\n \twh, err := NewWebhook(funcWebhookClient(func(r *http.Request) (*http.Response, error) {\n \t\tassert.Len(t, r.Header, 1)\n \t\tassert.Equal(t, r.Header.Get(\"Content-Type\"), \"application/json,text/plain\")"
    },
    {
      "sha": "d1e75790ea705efe775f5ec4365aaff31e069538",
      "filename": "backend/app/rest/api/admin.go",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Fadmin.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Fadmin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Fadmin.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -44,7 +44,6 @@ type adminStore interface {\n \n // DELETE /comment/{id}?site=siteID&url=post-url - removes comment\n func (a *admin) deleteCommentCtrl(w http.ResponseWriter, r *http.Request) {\n-\n \tid := chi.URLParam(r, \"id\")\n \tlocator := store.Locator{SiteID: r.URL.Query().Get(\"site\"), URL: r.URL.Query().Get(\"url\")}\n \tlog.Printf(\"[INFO] delete comment %s\", id)\n@@ -61,7 +60,6 @@ func (a *admin) deleteCommentCtrl(w http.ResponseWriter, r *http.Request) {\n \n // DELETE /user/{userid}?site=side-id - delete all user comments for requested userid\n func (a *admin) deleteUserCtrl(w http.ResponseWriter, r *http.Request) {\n-\n \tuserID := chi.URLParam(r, \"userid\")\n \tsiteID := r.URL.Query().Get(\"site\")\n \tlog.Printf(\"[INFO] delete all user comments for %s, site %s\", userID, siteID)\n@@ -77,7 +75,6 @@ func (a *admin) deleteUserCtrl(w http.ResponseWriter, r *http.Request) {\n \n // GET /user/{userid}?site=side-id - get user info for requested userid\n func (a *admin) getUserInfoCtrl(w http.ResponseWriter, r *http.Request) {\n-\n \tuserID := chi.URLParam(r, \"userid\")\n \tsiteID := r.URL.Query().Get(\"site\")\n \tlog.Printf(\"[INFO] get user info for %s, site %s\", userID, siteID)\n@@ -94,7 +91,6 @@ func (a *admin) getUserInfoCtrl(w http.ResponseWriter, r *http.Request) {\n // GET /deleteme?token=jwt - delete all user comments and details by user's request. Gets info about deleted used from provided token\n // request made GET to allow direct click from the email sent by user\n func (a *admin) deleteMeRequestCtrl(w http.ResponseWriter, r *http.Request) {\n-\n \ttoken := r.URL.Query().Get(\"token\")\n \n \tclaims, err := a.authenticator.TokenService().Parse(token)"
    },
    {
      "sha": "8664959a0ab42468281c37b80dde4bdcbe2f7f9b",
      "filename": "backend/app/rest/api/admin_test.go",
      "status": "modified",
      "additions": 45,
      "deletions": 47,
      "changes": 92,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Fadmin_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Fadmin_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Fadmin_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -38,7 +38,7 @@ func TestAdmin_Delete(t *testing.T) {\n \n \t// check last comments\n \tres, code := get(t, ts.URL+\"/api/v1/last/2?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments := []store.Comment{}\n \terr := json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -65,10 +65,10 @@ func TestAdmin_Delete(t *testing.T) {\n \tresp, err = sendReq(t, req, adminUmputunToken)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \n \tbody, code := getWithDevAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcr := store.Comment{}\n \terr = json.Unmarshal([]byte(body), &cr)\n \tassert.NoError(t, err)\n@@ -78,15 +78,15 @@ func TestAdmin_Delete(t *testing.T) {\n \ttime.Sleep(250 * time.Millisecond)\n \t// check last comments updated\n \tres, code = get(t, ts.URL+\"/api/v1/last/2?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments = []store.Comment{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 1, len(comments), \"should have 1 comments\")\n \n \t// check count updated\n \tres, code = get(t, ts.URL+\"/api/v1/count?site=remark42&url=https://radio-t.com/blah\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tb := map[string]interface{}{}\n \terr = json.Unmarshal([]byte(res), &b)\n \tassert.NoError(t, err)\n@@ -142,10 +142,10 @@ func TestAdmin_Title(t *testing.T) {\n \tresp, err := sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \n \tbody, code := get(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=%s/post1\", ts.URL, id1, tss.URL))\n-\trequire.Equal(t, 200, code)\n+\trequire.Equal(t, http.StatusOK, code)\n \tcr := store.Comment{}\n \terr = json.Unmarshal([]byte(body), &cr)\n \tassert.NoError(t, err)\n@@ -177,11 +177,11 @@ func TestAdmin_DeleteUser(t *testing.T) {\n \tresp, err := sendReq(t, req, adminUmputunToken)\n \tassert.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \n \t// all 3 comments here, but for id2 they deleted\n \tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah&sort=+time\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcmntWithInfo := commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &cmntWithInfo)\n \tassert.NoError(t, err)\n@@ -231,19 +231,19 @@ func TestAdmin_Pin(t *testing.T) {\n \t}\n \n \tcode := pin(1)\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \n \tbody, code := get(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcr := store.Comment{}\n \terr := json.Unmarshal([]byte(body), &cr)\n \tassert.NoError(t, err)\n \tassert.True(t, cr.Pin)\n \n \tcode = pin(-1)\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tbody, code = get(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcr = store.Comment{}\n \terr = json.Unmarshal([]byte(body), &cr)\n \tassert.NoError(t, err)\n@@ -286,7 +286,7 @@ func TestAdmin_Block(t *testing.T) {\n \n \t// block permanently\n \tcode, body := block(1, \"\")\n-\trequire.Equal(t, 200, code)\n+\trequire.Equal(t, http.StatusOK, code)\n \tj := R.JSON{}\n \terr := json.Unmarshal(body, &j)\n \tassert.NoError(t, err)\n@@ -299,7 +299,7 @@ func TestAdmin_Block(t *testing.T) {\n \n \t// get last to confirm one comment deleted\n \tbodyStr, code := get(t, ts.URL+\"/api/v1/last/10?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tpi := []store.PostInfo{}\n \tassert.NoError(t, json.Unmarshal([]byte(bodyStr), &pi))\n \tassert.Equal(t, 1, len(pi), \"last status updated, one comment left\")\n@@ -317,7 +317,7 @@ func TestAdmin_Block(t *testing.T) {\n \tassert.Equal(t, []store.PostInfo{{URL: \"https://radio-t.com/blah\", Count: 1}}, pi)\n \n \tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah&sort=+time\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments := commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -327,19 +327,19 @@ func TestAdmin_Block(t *testing.T) {\n \n \t// unblock\n \tcode, body = block(-1, \"\")\n-\trequire.Equal(t, 200, code)\n+\trequire.Equal(t, http.StatusOK, code)\n \terr = json.Unmarshal(body, &j)\n \tassert.NoError(t, err)\n \tassert.Equal(t, false, j[\"block\"])\n \n \t// block with ttl\n \tmakeTwoComments()\n \tcode, _ = block(1, \"50ms\")\n-\trequire.Equal(t, 200, code)\n+\trequire.Equal(t, http.StatusOK, code)\n \n \t// get as regular user\n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah&sort=+time\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -351,7 +351,7 @@ func TestAdmin_Block(t *testing.T) {\n \t// time\n \ttime.Sleep(50 * time.Millisecond)\n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah&sort=+time\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -385,7 +385,7 @@ func TestAdmin_BlockedList(t *testing.T) {\n \tres, err := sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \trequire.NoError(t, res.Body.Close())\n-\tassert.Equal(t, 200, res.StatusCode)\n+\tassert.Equal(t, http.StatusOK, res.StatusCode)\n \n \t// block user2\n \treq, err = http.NewRequest(http.MethodPut,\n@@ -394,13 +394,13 @@ func TestAdmin_BlockedList(t *testing.T) {\n \tres, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \trequire.NoError(t, res.Body.Close())\n-\tassert.Equal(t, 200, res.StatusCode)\n+\tassert.Equal(t, http.StatusOK, res.StatusCode)\n \n \treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/blocked?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \tres, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n-\trequire.Equal(t, 200, res.StatusCode)\n+\trequire.Equal(t, http.StatusOK, res.StatusCode)\n \tusers := []store.BlockedUser{}\n \terr = json.NewDecoder(res.Body).Decode(&users)\n \tassert.NoError(t, err)\n@@ -417,7 +417,7 @@ func TestAdmin_BlockedList(t *testing.T) {\n \trequire.NoError(t, err)\n \tres, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n-\trequire.Equal(t, 200, res.StatusCode)\n+\trequire.Equal(t, http.StatusOK, res.StatusCode)\n \tusers = []store.BlockedUser{}\n \terr = json.NewDecoder(res.Body).Decode(&users)\n \tassert.NoError(t, err)\n@@ -450,11 +450,11 @@ func TestAdmin_ReadOnly(t *testing.T) {\n \tresp, err := sendReq(t, req, \"\") // non-admin user\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 401, resp.StatusCode)\n+\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n \tresp, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tinfo, err = srv.DataService.Info(store.Locator{SiteID: \"remark42\", URL: \"https://radio-t.com/blah\"}, 0)\n \tassert.NoError(t, err)\n \tassert.True(t, info.ReadOnly)\n@@ -478,7 +478,7 @@ func TestAdmin_ReadOnly(t *testing.T) {\n \tresp, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tinfo, err = srv.DataService.Info(store.Locator{SiteID: \"remark42\", URL: \"https://radio-t.com/blah\"}, 0)\n \tassert.NoError(t, err)\n \tassert.False(t, info.ReadOnly)\n@@ -508,12 +508,12 @@ func TestAdmin_ReadOnlyNoComments(t *testing.T) {\n \tresp, err := sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \t_, err = srv.DataService.Info(store.Locator{SiteID: \"remark42\", URL: \"https://radio-t.com/blah\"}, 0)\n \tassert.Error(t, err)\n \n \tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah&format=tree\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments := commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -544,7 +544,7 @@ func TestAdmin_ReadOnlyWithAge(t *testing.T) {\n \tresp, err := sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tinfo, err = srv.DataService.Info(store.Locator{SiteID: \"remark42\", URL: \"https://radio-t.com/blah\"}, 0)\n \tassert.NoError(t, err)\n \tassert.True(t, info.ReadOnly)\n@@ -556,11 +556,10 @@ func TestAdmin_ReadOnlyWithAge(t *testing.T) {\n \tresp, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 403, resp.StatusCode)\n+\tassert.Equal(t, http.StatusForbidden, resp.StatusCode)\n \tinfo, err = srv.DataService.Info(store.Locator{SiteID: \"remark42\", URL: \"https://radio-t.com/blah\"}, 0)\n \tassert.NoError(t, err)\n \tassert.True(t, info.ReadOnly)\n-\n }\n func TestAdmin_Verify(t *testing.T) {\n \tts, srv, teardown := startupT(t)\n@@ -586,12 +585,12 @@ func TestAdmin_Verify(t *testing.T) {\n \tresp, err := sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tverified = srv.DataService.IsVerified(\"remark42\", \"user1\")\n \tassert.True(t, verified)\n \n \tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah&sort=+time\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments := commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -605,12 +604,12 @@ func TestAdmin_Verify(t *testing.T) {\n \tresp, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tverified = srv.DataService.IsVerified(\"remark42\", \"user1\")\n \tassert.False(t, verified)\n \n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah&sort=+time\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -632,7 +631,7 @@ func TestAdmin_ExportStream(t *testing.T) {\n \taddComment(t, c2, ts)\n \n \tbody, code := getWithAdminAuth(t, ts.URL+\"/api/v1/admin/export?site=remark42&mode=stream\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tassert.Equal(t, 3, strings.Count(body, \"\\n\"))\n \tassert.Equal(t, 2, strings.Count(body, \"\\\"text\\\"\"))\n \tt.Logf(\"%s\", body)\n@@ -656,7 +655,7 @@ func TestAdmin_ExportFile(t *testing.T) {\n \tresp, err := sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tassert.Equal(t, \"application/gzip\", resp.Header.Get(\"Content-Type\"))\n \n \tungzReader, err := gzip.NewReader(resp.Body)\n@@ -727,15 +726,14 @@ func TestAdmin_DeleteMeRequest(t *testing.T) {\n \tresp, err := client.Do(req)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \n \t_, err = srv.DataService.User(\"remark42\", \"user1\", 0, 0, store.User{})\n \tassert.EqualError(t, err, \"no comments for user user1 in store\")\n \n \temail, err = srv.DataService.GetUserEmail(\"remark42\", \"user1\")\n \tassert.NoError(t, err)\n \tassert.Empty(t, email, \"user1 email was deleted\")\n-\n }\n \n func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n@@ -760,7 +758,7 @@ func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n \tresp, err := client.Do(req)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 400, resp.StatusCode)\n+\tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n \n \t// try with bad auth\n \tclaims := token.Claims{\n@@ -788,7 +786,7 @@ func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 403, resp.StatusCode)\n+\tassert.Equal(t, http.StatusForbidden, resp.StatusCode)\n \n \t// try bad user\n \tbadClaims := claims\n@@ -801,7 +799,7 @@ func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 400, resp.StatusCode, resp.Status)\n+\tassert.Equal(t, http.StatusBadRequest, resp.StatusCode, resp.Status)\n \n \t// try without deleteme flag\n \tbadClaims2 := claims\n@@ -813,7 +811,7 @@ func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n-\tassert.Equal(t, 403, resp.StatusCode)\n+\tassert.Equal(t, http.StatusForbidden, resp.StatusCode)\n \tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n@@ -836,16 +834,16 @@ func TestAdmin_GetUserInfo(t *testing.T) {\n \n \tbody, code := getWithAdminAuth(t, fmt.Sprintf(\"%s/api/v1/admin/user/user1?site=remark42&url=https://radio-t.com/blah\",\n \t\tts.URL))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tu := store.User{}\n \terr = json.Unmarshal([]byte(body), &u)\n \tassert.NoError(t, err)\n \tassert.Equal(t, store.User{Name: \"user1 name\", ID: \"user1\", Picture: \"\", IP: \"823688dafca7393d24c871a2da98a84d8732e927\",\n \t\tAdmin: false, Blocked: false, Verified: false}, u)\n \n \t_, code = get(t, fmt.Sprintf(\"%s/api/v1/admin/user/user1?site=remark42&url=https://radio-t.com/blah\", ts.URL))\n-\tassert.Equal(t, 401, code, \"no auth\")\n+\tassert.Equal(t, http.StatusUnauthorized, code, \"no auth\")\n \n \t_, code = getWithAdminAuth(t, fmt.Sprintf(\"%s/api/v1/admin/user/userX?site=remark42&url=https://radio-t.com/blah\", ts.URL))\n-\tassert.Equal(t, 400, code, \"no info about user\")\n+\tassert.Equal(t, http.StatusBadRequest, code, \"no info about user\")\n }"
    },
    {
      "sha": "70dd908dae18c0972ab07e1cd5a3537cc67393df",
      "filename": "backend/app/rest/api/migrator.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Fmigrator.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Fmigrator.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Fmigrator.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -44,7 +44,6 @@ type KeyStore interface {\n // POST /import?secret=key&site=site-id&provider=disqus|remark|wordpress\n // imports comments from post body.\n func (m *Migrator) importCtrl(w http.ResponseWriter, r *http.Request) {\n-\n \tsiteID := r.URL.Query().Get(\"site\")\n \n \tif m.isBusy(siteID) {\n@@ -132,7 +131,6 @@ func (m *Migrator) waitCtrl(w http.ResponseWriter, r *http.Request) {\n // GET /export?site=site-id&secret=12345&?mode=file|stream\n // exports all comments for siteID as gz file\n func (m *Migrator) exportCtrl(w http.ResponseWriter, r *http.Request) {\n-\n \tsiteID := r.URL.Query().Get(\"site\")\n \n \tvar writer io.Writer = w"
    },
    {
      "sha": "0dba550536eda554de16416a9442da013c70364f",
      "filename": "backend/app/rest/api/migrator_test.go",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Fmigrator_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Fmigrator_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Fmigrator_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -260,7 +260,7 @@ func TestMigrator_Export(t *testing.T) {\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\trequire.Equal(t, 200, resp.StatusCode)\n+\trequire.Equal(t, http.StatusOK, resp.StatusCode)\n \trequire.Equal(t, \"application/gzip\", resp.Header.Get(\"Content-Type\"))\n \n \tungzReader, err := gzip.NewReader(resp.Body)\n@@ -278,7 +278,7 @@ func TestMigrator_Export(t *testing.T) {\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\trequire.Equal(t, 200, resp.StatusCode)\n+\trequire.Equal(t, http.StatusOK, resp.StatusCode)\n \trequire.Equal(t, \"text/plain; charset=utf-8\", resp.Header.Get(\"Content-Type\"))\n \n \tbody, err := io.ReadAll(resp.Body)\n@@ -325,15 +325,15 @@ func TestMigrator_Remap(t *testing.T) {\n \n \t// check that comments created as expected\n \tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://remark42.com/demo/\")\n-\trequire.Equal(t, 200, code)\n+\trequire.Equal(t, http.StatusOK, code)\n \tcomments := commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n \trequire.Equal(t, 2, comments.Info.Count)\n \trequire.False(t, comments.Info.ReadOnly)\n \n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://remark42.com/demo-another/\")\n-\trequire.Equal(t, 200, code)\n+\trequire.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n@@ -350,15 +350,15 @@ func TestMigrator_Remap(t *testing.T) {\n \n \t// after remap finished we should find comments from new urls\n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://www.remark42.com/demo/\")\n-\trequire.Equal(t, 200, code)\n+\trequire.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n \trequire.Equal(t, 2, comments.Info.Count)\n \trequire.False(t, comments.Info.ReadOnly)\n \n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://www.remark42.com/demo-another/\")\n-\trequire.Equal(t, 200, code)\n+\trequire.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n@@ -367,14 +367,14 @@ func TestMigrator_Remap(t *testing.T) {\n \n \t// should find nothing from previous url\n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://remark42.com/demo/\")\n-\trequire.Equal(t, 200, code)\n+\trequire.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n \trequire.Equal(t, 0, comments.Info.Count)\n \n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://remark42.com/demo-another/\")\n-\trequire.Equal(t, 200, code)\n+\trequire.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n@@ -403,7 +403,7 @@ func waitForMigrationCompletion(t *testing.T, ts *httptest.Server) {\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err := client.Do(req)\n \trequire.NoError(t, err)\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tb, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()"
    },
    {
      "sha": "0907fbe22dad6e73b255b49a86c5b76039c3538e",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -96,7 +96,6 @@ type commentsWithInfo struct {\n \n // Run the lister and request's router, activate rest server\n func (s *Rest) Run(address string, port int) {\n-\n \tif address == \"*\" {\n \t\taddress = \"\"\n \t}\n@@ -239,7 +238,6 @@ func (s *Rest) routes() chi.Router {\n \n \t// api routes\n \trouter.Route(\"/api/v1\", func(rapi chi.Router) {\n-\n \t\trapi.Group(func(rava chi.Router) {\n \t\t\trava.Use(middleware.Timeout(5 * time.Second))\n \t\t\trava.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(100, nil)))\n@@ -267,7 +265,6 @@ func (s *Rest) routes() chi.Router {\n \t\t\t\trrss.Get(\"/site\", s.rssRest.siteCommentsCtrl)\n \t\t\t\trrss.Get(\"/reply\", s.rssRest.repliesCtrl)\n \t\t\t})\n-\n \t\t})\n \n \t\t// open routes, cached\n@@ -342,7 +339,6 @@ func (s *Rest) routes() chi.Router {\n \t\t\trauth.Use(logger.New(logger.Log(log.Default()), logger.Prefix(\"[DEBUG]\"), logger.IPfn(ipFn)).Handler)\n \t\t\trauth.Post(\"/picture\", s.privRest.savePictureCtrl)\n \t\t})\n-\n \t})\n \n \t// open routes on root level\n@@ -361,7 +357,6 @@ func (s *Rest) routes() chi.Router {\n }\n \n func (s *Rest) controllerGroups() (public, private, admin, rss) {\n-\n \tpubGrp := public{\n \t\tdataService:      s.DataService,\n \t\tcache:            s.Cache,\n@@ -472,7 +467,6 @@ func (s *Rest) configCtrl(w http.ResponseWriter, r *http.Request) {\n \n // serves static files from /web or embedded by statik\n func addFileServer(r chi.Router, path string, root http.FileSystem, version string) {\n-\n \tvar webFS http.Handler\n \n \tstatikFS, err := fs.New()\n@@ -597,7 +591,6 @@ func matchSiteID(next http.Handler) http.Handler {\n \n // cacheControl is a middleware setting cache expiration. Using url+version as etag\n func cacheControl(expiration time.Duration, version string) func(http.Handler) http.Handler {\n-\n \tetag := func(r *http.Request, version string) string {\n \t\ts := version + \":\" + r.URL.String()\n \t\treturn store.EncodeID(s)\n@@ -677,7 +670,6 @@ func parseError(err error, defaultCode int) (code int) {\n \t\tcode = rest.ErrCommentEditExpired\n \tcase strings.HasPrefix(err.Error(), \"parent comment with reply can't be edited\"):\n \t\tcode = rest.ErrCommentEditChanged\n-\n \t}\n \n \treturn code"
    },
    {
      "sha": "f44b2a75e3d8437d89f7c2fd35329c164877af46",
      "filename": "backend/app/rest/api/rest_private.go",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest_private.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest_private.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_private.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -106,7 +106,6 @@ func (s *private) previewCommentCtrl(w http.ResponseWriter, r *http.Request) {\n \n // POST /comment - adds comment, resets all immutable fields\n func (s *private) createCommentCtrl(w http.ResponseWriter, r *http.Request) {\n-\n \tcomment := store.Comment{}\n \tif err := render.DecodeJSON(http.MaxBytesReader(w, r.Body, hardBodyLimit), &comment); err != nil {\n \t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't bind comment\", rest.ErrDecode)\n@@ -183,7 +182,6 @@ func (s *private) createCommentCtrl(w http.ResponseWriter, r *http.Request) {\n \n // PUT /comment/{id}?site=siteID&url=post-url - update comment\n func (s *private) updateCommentCtrl(w http.ResponseWriter, r *http.Request) {\n-\n \tedit := struct {\n \t\tText    string\n \t\tSummary string\n@@ -657,7 +655,6 @@ func (s *private) userAllDataCtrl(w http.ResponseWriter, r *http.Request) {\n \t\trest.SendErrorJSON(w, r, http.StatusInternalServerError, merr, \"can't write user info\", rest.ErrInternal)\n \t\treturn\n \t}\n-\n }\n \n // POST /deleteme?site_id=site - requesting delete of all user info"
    },
    {
      "sha": "fd9bbe189d5901c029eb2dd753290907e063ac2d",
      "filename": "backend/app/rest/api/rest_private_test.go",
      "status": "modified",
      "additions": 38,
      "deletions": 39,
      "changes": 77,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest_private_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest_private_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_private_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -143,7 +143,6 @@ func TestRest_CreateWithRestrictedWord(t *testing.T) {\n }\n \n func TestRest_CreateRejected(t *testing.T) {\n-\n \tts, _, teardown := startupT(t)\n \tdefer teardown()\n \tbody := `{\"text\": \"test 123\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"remark42\"}}`\n@@ -152,7 +151,7 @@ func TestRest_CreateRejected(t *testing.T) {\n \tresp, err := http.Post(ts.URL+\"/api/v1/comment\", \"\", strings.NewReader(body))\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 401, resp.StatusCode)\n+\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n \n \t// try with wrong aud\n \tclient := &http.Client{Timeout: 5 * time.Second}\n@@ -224,7 +223,7 @@ func TestRest_CreateAndGet(t *testing.T) {\n \n \t// get created comment by id as admin\n \tres, code := getWithAdminAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah1\", ts.URL, id))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomment := store.Comment{}\n \terr = json.Unmarshal([]byte(res), &comment)\n \tassert.NoError(t, err)\n@@ -236,7 +235,7 @@ func TestRest_CreateAndGet(t *testing.T) {\n \n \t// get created comment by id as non-admin\n \tres, code = getWithDevAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah1\", ts.URL, id))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomment = store.Comment{}\n \terr = json.Unmarshal([]byte(res), &comment)\n \tassert.NoError(t, err)\n@@ -260,7 +259,7 @@ func TestRest_Update(t *testing.T) {\n \tassert.NoError(t, err)\n \tbody, err := io.ReadAll(b.Body)\n \tassert.NoError(t, err)\n-\tassert.Equal(t, 200, b.StatusCode, string(body))\n+\tassert.Equal(t, http.StatusOK, b.StatusCode, string(body))\n \tassert.NoError(t, b.Body.Close())\n \n \t// comments returned by update\n@@ -275,7 +274,7 @@ func TestRest_Update(t *testing.T) {\n \n \t// read updated comment\n \tres, code := getWithAdminAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah1\", ts.URL, id))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tc3 := store.Comment{}\n \terr = json.Unmarshal([]byte(res), &c3)\n \tassert.NoError(t, err)\n@@ -313,7 +312,7 @@ func TestRest_UpdateDelete(t *testing.T) {\n \trequire.NoError(t, err)\n \tbody, err := io.ReadAll(b.Body)\n \trequire.NoError(t, err)\n-\tassert.Equal(t, 200, b.StatusCode, string(body))\n+\tassert.Equal(t, http.StatusOK, b.StatusCode, string(body))\n \tassert.NoError(t, b.Body.Close())\n \n \t// comments returned by update\n@@ -325,7 +324,7 @@ func TestRest_UpdateDelete(t *testing.T) {\n \n \t// read updated comment\n \tres, code := getWithDevAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah1\", ts.URL, id))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tc3 := store.Comment{}\n \terr = json.Unmarshal([]byte(res), &c3)\n \tassert.NoError(t, err)\n@@ -366,7 +365,7 @@ func TestRest_UpdateNotOwner(t *testing.T) {\n \tbody, err := io.ReadAll(b.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, b.Body.Close())\n-\tassert.Equal(t, 403, b.StatusCode, string(body), \"update from non-owner\")\n+\tassert.Equal(t, http.StatusForbidden, b.StatusCode, string(body), \"update from non-owner\")\n \tassert.Equal(t, `{\"code\":3,\"details\":\"can not edit comments for other users\",\"error\":\"rejected\"}`+\"\\n\", string(body))\n \n \tclient = http.Client{}\n@@ -377,7 +376,7 @@ func TestRest_UpdateNotOwner(t *testing.T) {\n \tb, err = client.Do(req)\n \tassert.NoError(t, err)\n \tassert.NoError(t, b.Body.Close())\n-\tassert.Equal(t, 400, b.StatusCode, string(body), \"update is not json\")\n+\tassert.Equal(t, http.StatusBadRequest, b.StatusCode, string(body), \"update is not json\")\n }\n \n func TestRest_UpdateWrongAud(t *testing.T) {\n@@ -420,7 +419,7 @@ func TestRest_UpdateWithRestrictedWords(t *testing.T) {\n \tc := R.JSON{}\n \terr = json.Unmarshal(body, &c)\n \tassert.NoError(t, err)\n-\tassert.Equal(t, 400, b.StatusCode, string(body))\n+\tassert.Equal(t, http.StatusBadRequest, b.StatusCode, string(body))\n \tassert.Equal(t, \"comment contains restricted words\", c[\"error\"])\n \tassert.Equal(t, \"invalid comment\", c[\"details\"])\n }\n@@ -449,10 +448,10 @@ func TestRest_Vote(t *testing.T) {\n \t\treturn resp.StatusCode\n \t}\n \n-\tassert.Equal(t, 200, vote(1), \"first vote allowed\")\n-\tassert.Equal(t, 400, vote(1), \"second vote rejected\")\n+\tassert.Equal(t, http.StatusOK, vote(1), \"first vote allowed\")\n+\tassert.Equal(t, http.StatusBadRequest, vote(1), \"second vote rejected\")\n \tbody, code := getWithDevAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcr := store.Comment{}\n \terr := json.Unmarshal([]byte(body), &cr)\n \tassert.NoError(t, err)\n@@ -461,35 +460,35 @@ func TestRest_Vote(t *testing.T) {\n \tassert.Equal(t, map[string]bool(nil), cr.Votes, \"hidden\")\n \tassert.Equal(t, map[string]store.VotedIPInfo(nil), cr.VotedIPs, \"hidden\")\n \n-\tassert.Equal(t, 200, vote(-1), \"opposite vote allowed\")\n+\tassert.Equal(t, http.StatusOK, vote(-1), \"opposite vote allowed\")\n \tbody, code = getWithDevAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcr = store.Comment{}\n \terr = json.Unmarshal([]byte(body), &cr)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 0, cr.Score)\n \tassert.Equal(t, 0, cr.Vote)\n \n-\tassert.Equal(t, 200, vote(-1), \"opposite vote allowed one more time\")\n+\tassert.Equal(t, http.StatusOK, vote(-1), \"opposite vote allowed one more time\")\n \tbody, code = getWithDevAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcr = store.Comment{}\n \terr = json.Unmarshal([]byte(body), &cr)\n \tassert.NoError(t, err)\n \tassert.Equal(t, -1, cr.Score)\n \tassert.Equal(t, -1, cr.Vote)\n \n-\tassert.Equal(t, 400, vote(-1), \"dbl vote not allowed\")\n+\tassert.Equal(t, http.StatusBadRequest, vote(-1), \"dbl vote not allowed\")\n \tbody, code = getWithDevAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcr = store.Comment{}\n \terr = json.Unmarshal([]byte(body), &cr)\n \tassert.NoError(t, err)\n \tassert.Equal(t, -1, cr.Score)\n \tassert.Equal(t, -1, cr.Vote)\n \n \tbody, code = get(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcr = store.Comment{}\n \terr = json.Unmarshal([]byte(body), &cr)\n \tassert.NoError(t, err)\n@@ -503,7 +502,7 @@ func TestRest_Vote(t *testing.T) {\n \tassert.NoError(t, err)\n \tresp, err := sendReq(t, req, adminUmputunToken)\n \tassert.NoError(t, err)\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tcr = store.Comment{}\n \terr = json.NewDecoder(resp.Body).Decode(&cr)\n \tassert.NoError(t, err)\n@@ -551,13 +550,13 @@ func TestRest_AnonVote(t *testing.T) {\n \t\treturn string(b), r.StatusCode\n \t}\n \n-\tassert.Equal(t, 403, vote(1), \"vote is disallowed with anonVote false\")\n+\tassert.Equal(t, http.StatusForbidden, vote(1), \"vote is disallowed with anonVote false\")\n \tsrv.privRest.anonVote = true\n-\tassert.Equal(t, 200, vote(1), \"first vote allowed\")\n-\tassert.Equal(t, 400, vote(1), \"second vote rejected\")\n+\tassert.Equal(t, http.StatusOK, vote(1), \"first vote allowed\")\n+\tassert.Equal(t, http.StatusBadRequest, vote(1), \"second vote rejected\")\n \tbody, code := getWithAnonAuth(fmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1))\n \n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcr := store.Comment{}\n \terr := json.Unmarshal([]byte(body), &cr)\n \tassert.NoError(t, err)\n@@ -1021,7 +1020,7 @@ func TestRest_UserAllData(t *testing.T) {\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err := client.Do(req)\n \trequire.NoError(t, err)\n-\trequire.Equal(t, 200, resp.StatusCode)\n+\trequire.Equal(t, http.StatusOK, resp.StatusCode)\n \trequire.Equal(t, \"application/gzip\", resp.Header.Get(\"Content-Type\"))\n \n \tungzReader, err := gzip.NewReader(resp.Body)\n@@ -1050,7 +1049,7 @@ func TestRest_UserAllData(t *testing.T) {\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\trequire.Equal(t, 401, resp.StatusCode)\n+\trequire.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n }\n \n func TestRest_UserAllDataManyComments(t *testing.T) {\n@@ -1073,7 +1072,7 @@ func TestRest_UserAllDataManyComments(t *testing.T) {\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err := client.Do(req)\n \trequire.NoError(t, err)\n-\trequire.Equal(t, 200, resp.StatusCode)\n+\trequire.Equal(t, http.StatusOK, resp.StatusCode)\n \trequire.Equal(t, \"application/gzip\", resp.Header.Get(\"Content-Type\"))\n \n \tungzReader, err := gzip.NewReader(resp.Body)\n@@ -1097,7 +1096,7 @@ func TestRest_DeleteMe(t *testing.T) {\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err := client.Do(req)\n \tassert.NoError(t, err)\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, resp.Body.Close())\n \tassert.NoError(t, err)\n@@ -1118,7 +1117,7 @@ func TestRest_DeleteMe(t *testing.T) {\n \tassert.NoError(t, err)\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n-\tassert.Equal(t, 401, resp.StatusCode)\n+\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n \tassert.NoError(t, resp.Body.Close())\n }\n \n@@ -1144,7 +1143,7 @@ func TestRest_SavePictureCtrl(t *testing.T) {\n \t\treq.Header.Add(\"X-JWT\", devToken)\n \t\tresp, err := client.Do(req)\n \t\tassert.NoError(t, err)\n-\t\tassert.Equal(t, 200, resp.StatusCode)\n+\t\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \t\tbody, err := io.ReadAll(resp.Body)\n \t\trequire.NoError(t, err)\n \t\trequire.NoError(t, resp.Body.Close())\n@@ -1159,7 +1158,7 @@ func TestRest_SavePictureCtrl(t *testing.T) {\n \tid := savePic(\"picture.png\")\n \tresp, err := http.Get(fmt.Sprintf(\"%s/api/v1/picture/%s\", ts.URL, id))\n \trequire.NoError(t, err)\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tbody, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n@@ -1170,34 +1169,34 @@ func TestRest_SavePictureCtrl(t *testing.T) {\n \tresp, err = http.Get(fmt.Sprintf(\"%s/api/v1/picture/%s\", ts.URL, id))\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tassert.Equal(t, \"image/png\", resp.Header.Get(\"Content-Type\"))\n \n \tid = savePic(\"picture.jpg\")\n \tresp, err = http.Get(fmt.Sprintf(\"%s/api/v1/picture/%s\", ts.URL, id))\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tassert.Equal(t, \"image/png\", resp.Header.Get(\"Content-Type\"))\n \n \tid = savePic(\"picture.blah\")\n \tresp, err = http.Get(fmt.Sprintf(\"%s/api/v1/picture/%s\", ts.URL, id))\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tassert.Equal(t, \"image/png\", resp.Header.Get(\"Content-Type\"))\n \n \tresp, err = http.Get(fmt.Sprintf(\"%s/api/v1/picture/blah/pic.blah\", ts.URL))\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 400, resp.StatusCode)\n+\tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n }\n \n func TestRest_CreateWithPictures(t *testing.T) {\n \tts, svc, teardown := startupT(t)\n \tdefer func() {\n \t\tteardown()\n-\t\tos.RemoveAll(\"/tmp/remark42\")\n+\t\tassert.NoError(t, os.RemoveAll(\"/tmp/remark42\"))\n \t}()\n \tlgr.Setup(lgr.Debug, lgr.CallerFile, lgr.CallerFunc)\n \n@@ -1235,7 +1234,7 @@ func TestRest_CreateWithPictures(t *testing.T) {\n \t\treq.Header.Add(\"X-JWT\", devToken)\n \t\tresp, err := client.Do(req)\n \t\tassert.NoError(t, err)\n-\t\tassert.Equal(t, 200, resp.StatusCode)\n+\t\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \n \t\tbody, err := io.ReadAll(resp.Body)\n \t\trequire.NoError(t, err)"
    },
    {
      "sha": "42e2f47826cf4674f3ba31052434b68c4cf5941a",
      "filename": "backend/app/rest/api/rest_public.go",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest_public.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest_public.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_public.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -174,7 +174,6 @@ func (s *public) lastCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \n // GET /id/{id}?site=siteID&url=post-url - gets a comment by id\n func (s *public) commentByIDCtrl(w http.ResponseWriter, r *http.Request) {\n-\n \tid := chi.URLParam(r, \"id\")\n \tsiteID := r.URL.Query().Get(\"site\")\n \turl := r.URL.Query().Get(\"url\")\n@@ -195,7 +194,6 @@ func (s *public) commentByIDCtrl(w http.ResponseWriter, r *http.Request) {\n \n // GET /comments?site=siteID&user=id&limit=123&skip=10 - returns comments for given userID\n func (s *public) findUserCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n-\n \tuserID := r.URL.Query().Get(\"user\")\n \tsiteID := r.URL.Query().Get(\"site\")\n \n@@ -291,7 +289,6 @@ func (s *public) countMultiCtrl(w http.ResponseWriter, r *http.Request) {\n \n // GET /list?site=siteID&limit=50&skip=10 - list posts with comments\n func (s *public) listCtrl(w http.ResponseWriter, r *http.Request) {\n-\n \tsiteID := r.URL.Query().Get(\"site\")\n \tlimit, skip := 0, 0\n "
    },
    {
      "sha": "ea8eb1d3bfa74075f06a1bbbc9f8e04a8332e620",
      "filename": "backend/app/rest/api/rest_public_test.go",
      "status": "modified",
      "additions": 40,
      "deletions": 41,
      "changes": 81,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest_public_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest_public_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_public_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -66,7 +66,7 @@ func TestRest_Preview(t *testing.T) {\n \tresp, err = post(t, ts.URL+\"/api/v1/preview\", \"bad\")\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 400, resp.StatusCode)\n+\tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n \n \tresp, err = post(t, ts.URL+\"/api/v1/preview\", fmt.Sprintf(`{\"text\": \"![non-existent.jpg](%s/api/v1/picture/dev_user/bad_picture)\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"radio-t\"}}`, srv.RemarkURL))\n \tassert.NoError(t, err)\n@@ -83,7 +83,6 @@ func TestRest_Preview(t *testing.T) {\n \t\tstring(b),\n \t\t\"/pics-remark42/staging/dev_user/62/bad_picture: no such file or directory\\\"}\\n\",\n \t)\n-\n }\n \n func TestRest_PreviewWithWrongImage(t *testing.T) {\n@@ -168,7 +167,7 @@ func TestRest_Find(t *testing.T) {\n \tdefer teardown()\n \n \tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments := commentsWithInfo{}\n \terr := json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -186,7 +185,7 @@ func TestRest_Find(t *testing.T) {\n \n \t// get sorted by +time\n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1&sort=+time\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -202,7 +201,7 @@ func TestRest_Find(t *testing.T) {\n \n \t// get sorted by -time\n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1&sort=-time\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n \trequire.Equal(t, 2, len(comments.Comments), \"should have 2 comments\")\n@@ -212,7 +211,7 @@ func TestRest_Find(t *testing.T) {\n \t// get in tree mode\n \ttree := service.Tree{}\n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1&format=tree\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \terr = json.Unmarshal([]byte(res), &tree)\n \tassert.NoError(t, err)\n \trequire.Equal(t, 1, len(tree.Nodes))\n@@ -239,14 +238,14 @@ func TestRest_FindAge(t *testing.T) {\n \ttree := service.Tree{}\n \n \tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1&format=tree\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \terr = json.Unmarshal([]byte(res), &tree)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"https://radio-t.com/blah1\", tree.Info.URL)\n \tassert.False(t, tree.Info.ReadOnly, \"post is fresh\")\n \n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah2&format=tree\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \terr = json.Unmarshal([]byte(res), &tree)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"https://radio-t.com/blah2\", tree.Info.URL)\n@@ -280,15 +279,15 @@ func TestRest_FindReadOnly(t *testing.T) {\n \n \ttree := service.Tree{}\n \tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1&format=tree\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \terr = json.Unmarshal([]byte(res), &tree)\n \trequire.NoError(t, err)\n \tassert.Equal(t, \"https://radio-t.com/blah1\", tree.Info.URL)\n \tassert.True(t, tree.Info.ReadOnly, \"post is ro\")\n \n \ttree = service.Tree{}\n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah2&format=tree\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \terr = json.Unmarshal([]byte(res), &tree)\n \trequire.NoError(t, err)\n \tassert.Equal(t, \"https://radio-t.com/blah2\", tree.Info.URL)\n@@ -300,7 +299,7 @@ func TestRest_FindUserView(t *testing.T) {\n \tdefer teardown()\n \n \tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1&view=user\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments := commentsWithInfo{}\n \terr := json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -318,7 +317,7 @@ func TestRest_FindUserView(t *testing.T) {\n \n \t// get sorted by +time with view=user\n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1&sort=+time&view=user\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -335,7 +334,7 @@ func TestRest_FindUserView(t *testing.T) {\n \tsrv.Cache.Flush(cache.FlusherRequest{})\n \n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1&sort=+time&view=user\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -348,7 +347,7 @@ func TestRest_Last(t *testing.T) {\n \tdefer teardown()\n \n \tres, code := get(t, ts.URL+\"/api/v1/last/2?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tassert.Equal(t, \"[]\\n\", res, \"empty last should return empty list\")\n \n \tc1 := store.Comment{Text: \"test test #1\", ParentID: \"p1\",\n@@ -365,7 +364,7 @@ func TestRest_Last(t *testing.T) {\n \tid2 := addComment(t, c2, ts)\n \n \tres, code = get(t, ts.URL+\"/api/v1/last/2?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments := []store.Comment{}\n \terr := json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -374,7 +373,7 @@ func TestRest_Last(t *testing.T) {\n \tassert.Equal(t, id2, comments[0].ID)\n \n \tres, code = get(t, fmt.Sprintf(\"%s/api/v1/last/2?site=remark42&since=%d\", ts.URL, ts1))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments = []store.Comment{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n@@ -383,21 +382,21 @@ func TestRest_Last(t *testing.T) {\n \tassert.Equal(t, id2, comments[0].ID)\n \n \tres, code = get(t, fmt.Sprintf(\"%s/api/v1/last/2?site=remark42&since=%d\", ts.URL, ts2))\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tcomments = []store.Comment{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n \trequire.Equal(t, 1, len(comments), \"should have 1 comments\")\n \tassert.Equal(t, id2, comments[0].ID)\n \n \tres, code = get(t, ts.URL+\"/api/v1/last/5?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 3, len(comments), \"should have 3 comments\")\n \n \tres, code = get(t, ts.URL+\"/api/v1/last/X?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 3, len(comments), \"should have 3 comments\")\n@@ -406,13 +405,13 @@ func TestRest_Last(t *testing.T) {\n \tassert.NoError(t, err)\n \tsrv.Cache.Flush(cache.FlusherRequest{})\n \tres, code = get(t, ts.URL+\"/api/v1/last/5?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 2, len(comments), \"should have 2 comments\")\n \n \t_, code = get(t, ts.URL+\"/api/v1/last/2?site=remark42-BLAH\")\n-\tassert.Equal(t, 500, code)\n+\tassert.Equal(t, http.StatusInternalServerError, code)\n }\n \n func TestRest_FindUserComments(t *testing.T) {\n@@ -437,11 +436,11 @@ func TestRest_FindUserComments(t *testing.T) {\n \tassert.NoError(t, err)\n \n \tcomments, code := get(t, ts.URL+\"/api/v1/comments?site=remark42&user=blah\")\n-\tassert.Equal(t, 200, code, \"noting for user blah\")\n+\tassert.Equal(t, http.StatusOK, code, \"noting for user blah\")\n \tassert.Equal(t, `{\"comments\":[],\"count\":0}`+\"\\n\", comments)\n \t{\n \t\tres, code := get(t, ts.URL+\"/api/v1/comments?site=remark42&user=dev\")\n-\t\tassert.Equal(t, 200, code)\n+\t\tassert.Equal(t, http.StatusOK, code)\n \n \t\tresp := struct {\n \t\t\tComments []store.Comment\n@@ -460,7 +459,7 @@ func TestRest_FindUserComments(t *testing.T) {\n \n \t{\n \t\tres, code := get(t, ts.URL+\"/api/v1/comments?site=remark42&user=dev&skip=1&limit=2\")\n-\t\tassert.Equal(t, 200, code)\n+\t\tassert.Equal(t, http.StatusOK, code)\n \n \t\tresp := struct {\n \t\t\tComments []store.Comment\n@@ -482,7 +481,7 @@ func TestRest_UserInfo(t *testing.T) {\n \tdefer teardown()\n \n \tbody, code := getWithDevAuth(t, ts.URL+\"/api/v1/user?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tuser := store.User{}\n \terr := json.Unmarshal([]byte(body), &user)\n \tassert.NoError(t, err)\n@@ -506,20 +505,20 @@ func TestRest_Count(t *testing.T) {\n \taddComment(t, c2, ts)\n \n \tbody, code := get(t, ts.URL+\"/api/v1/count?site=remark42&url=https://radio-t.com/blah1\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tj := R.JSON{}\n \terr := json.Unmarshal([]byte(body), &j)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 3.0, j[\"count\"])\n \n \tbody, code = get(t, ts.URL+\"/api/v1/count?site=remark42&url=https://radio-t.com/blah2\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \terr = json.Unmarshal([]byte(body), &j)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 2.0, j[\"count\"])\n \n \t_, code = get(t, ts.URL+\"/api/v1/count?site=remark42-BLAH&url=https://radio-t.com/blah1XXX\")\n-\tassert.Equal(t, 400, code)\n+\tassert.Equal(t, http.StatusBadRequest, code)\n }\n \n func TestRest_Counts(t *testing.T) {\n@@ -553,7 +552,7 @@ func TestRest_Counts(t *testing.T) {\n \n \tresp, err = post(t, ts.URL+\"/api/v1/counts?site=radio-XXX\", `{}`)\n \trequire.NoError(t, err)\n-\tassert.Equal(t, 400, resp.StatusCode)\n+\tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n \tassert.NoError(t, resp.Body.Close())\n }\n \n@@ -573,7 +572,7 @@ func TestRest_List(t *testing.T) {\n \taddComment(t, c2, ts)\n \n \tbody, code := get(t, ts.URL+\"/api/v1/list?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tpi := []store.PostInfo{}\n \terr := json.Unmarshal([]byte(body), &pi)\n \tassert.NoError(t, err)\n@@ -583,7 +582,7 @@ func TestRest_List(t *testing.T) {\n \tassert.Equal(t, 3, pi[1].Count)\n \n \t_, code = get(t, ts.URL+\"/api/v1/list?site=remark42-BLAH\")\n-\tassert.Equal(t, 400, code)\n+\tassert.Equal(t, http.StatusBadRequest, code)\n }\n \n func TestRest_ListWithSkipAndLimit(t *testing.T) {\n@@ -606,7 +605,7 @@ func TestRest_ListWithSkipAndLimit(t *testing.T) {\n \taddComment(t, c3, ts)\n \n \tbody, code := get(t, ts.URL+\"/api/v1/list?site=remark42&skip=1&limit=2\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tpi := []store.PostInfo{}\n \terr := json.Unmarshal([]byte(body), &pi)\n \tassert.NoError(t, err)\n@@ -622,7 +621,7 @@ func TestRest_Config(t *testing.T) {\n \tdefer teardown()\n \n \tbody, code := get(t, ts.URL+\"/api/v1/config?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tj := R.JSON{}\n \terr := json.Unmarshal([]byte(body), &j)\n \tassert.NoError(t, err)\n@@ -645,17 +644,17 @@ func TestRest_QR(t *testing.T) {\n \n \t// missing parameter\n \tbody, code := get(t, ts.URL+\"/api/v1/qr/telegram\")\n-\tassert.Equal(t, 400, code)\n+\tassert.Equal(t, http.StatusBadRequest, code)\n \tassert.Equal(t, \"{\\\"code\\\":0,\\\"details\\\":\\\"text parameter is required\\\",\\\"error\\\":\\\"missing parameter\\\"}\\n\", body)\n \n \t// too long request to build the qr\n \tbody, code = get(t, ts.URL+\"/api/v1/qr/telegram?url=https://t.me/\"+strings.Repeat(\"string\", 1000))\n-\tassert.Equal(t, 500, code)\n+\tassert.Equal(t, http.StatusInternalServerError, code)\n \tassert.Equal(t, \"{\\\"code\\\":0,\\\"details\\\":\\\"can't generate QR\\\",\\\"error\\\":\\\"content too long to encode\\\"}\\n\", body)\n \n \t// wrong request\n \tbody, code = get(t, ts.URL+\"/api/v1/qr/telegram?url=nonsense\")\n-\tassert.Equal(t, 400, code)\n+\tassert.Equal(t, http.StatusBadRequest, code)\n \tassert.Equal(t, \"{\\\"code\\\":0,\\\"details\\\":\\\"text parameter should start with https://t.me/\\\",\\\"error\\\":\\\"wrong parameter\\\"}\\n\", body)\n \n \t// correct request\n@@ -666,7 +665,7 @@ func TestRest_QR(t *testing.T) {\n \trequire.NoError(t, r.Body.Close())\n \trequire.NotEmpty(t, bdy)\n \tassert.Equal(t, \"image/png\", r.Header.Get(\"Content-Type\"))\n-\tassert.Equal(t, 200, r.StatusCode)\n+\tassert.Equal(t, http.StatusOK, r.StatusCode)\n \n \t// compare the image\n \tfh, err := os.Open(\"testdata/qr_test.png\")\n@@ -699,7 +698,7 @@ func TestRest_Info(t *testing.T) {\n \trequire.NoError(t, err)\n \n \tbody, code := get(t, ts.URL+\"/api/v1/info?site=remark42&url=https://radio-t.com/blah1\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \n \tinfo := store.PostInfo{}\n \terr = json.Unmarshal([]byte(body), &info)\n@@ -709,17 +708,17 @@ func TestRest_Info(t *testing.T) {\n \tassert.Equal(t, exp, info)\n \n \t_, code = get(t, ts.URL+\"/api/v1/info?site=remark42&url=https://radio-t.com/blah-no\")\n-\tassert.Equal(t, 400, code)\n+\tassert.Equal(t, http.StatusBadRequest, code)\n \t_, code = get(t, ts.URL+\"/api/v1/info?site=remark42-no&url=https://radio-t.com/blah-no\")\n-\tassert.Equal(t, 400, code)\n+\tassert.Equal(t, http.StatusBadRequest, code)\n }\n \n func TestRest_Robots(t *testing.T) {\n \tts, _, teardown := startupT(t)\n \tdefer teardown()\n \n \tbody, code := get(t, ts.URL+\"/robots.txt\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tassert.Equal(t, \"User-agent: *\\nDisallow: /auth/\\nDisallow: /api/\\nAllow: /api/v1/find\\n\"+\n \t\t\"Allow: /api/v1/last\\nAllow: /api/v1/id\\nAllow: /api/v1/count\\nAllow: /api/v1/counts\\n\"+\n \t\t\"Allow: /api/v1/list\\nAllow: /api/v1/config\\nAllow: /api/v1/user\\nAllow: /api/v1/img\\n\"+"
    },
    {
      "sha": "4084412e0610ac952221d16afdfebfc9b5697763",
      "filename": "backend/app/rest/api/rest_test.go",
      "status": "modified",
      "additions": 8,
      "deletions": 19,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frest_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -56,7 +56,7 @@ func TestRest_FileServer(t *testing.T) {\n \tassert.NoError(t, err)\n \n \tbody, code := get(t, ts.URL+\"/web/\"+testHTMLName)\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tassert.Equal(t, \"some html\", body)\n \t_ = os.Remove(testHTMLFile)\n }\n@@ -70,13 +70,12 @@ func TestRest_GetStarted(t *testing.T) {\n \tassert.NoError(t, err)\n \n \tbody, code := get(t, ts.URL+\"/index.html\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tassert.Equal(t, \"some html blah\", body)\n \n \t_ = os.Remove(getStartedHTML)\n \t_, code = get(t, ts.URL+\"/index.html\")\n-\tassert.Equal(t, 404, code)\n-\n+\tassert.Equal(t, http.StatusNotFound, code)\n }\n \n func TestRest_Shutdown(t *testing.T) {\n@@ -152,13 +151,13 @@ func TestRest_RunStaticSSLMode(t *testing.T) {\n \tresp, err := client.Get(fmt.Sprintf(\"http://localhost:%d/blah?param=1\", port))\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 307, resp.StatusCode)\n+\tassert.Equal(t, http.StatusTemporaryRedirect, resp.StatusCode)\n \tassert.Equal(t, fmt.Sprintf(\"https://localhost:%d/blah?param=1\", sslPort), resp.Header.Get(\"Location\"))\n \n \tresp, err = client.Get(fmt.Sprintf(\"https://localhost:%d/ping\", sslPort))\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n@@ -196,14 +195,13 @@ func TestRest_RunAutocertModeHTTPOnly(t *testing.T) {\n \tresp, err := client.Get(fmt.Sprintf(\"http://localhost:%d/blah?param=1\", port))\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 307, resp.StatusCode)\n+\tassert.Equal(t, http.StatusTemporaryRedirect, resp.StatusCode)\n \tassert.Equal(t, fmt.Sprintf(\"https://localhost:%d/blah?param=1\", sslPort), resp.Header.Get(\"Location\"))\n \n \tsrv.Shutdown()\n }\n \n func TestRest_rejectAnonUser(t *testing.T) {\n-\n \tts := httptest.NewServer(fakeAuth(rejectAnonUser(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tfmt.Fprintln(w, \"Hello\")\n \t}))))\n@@ -247,7 +245,6 @@ func Test_URLKey(t *testing.T) {\n \t\t\tassert.Equal(t, tt.key, URLKey(r))\n \t\t})\n \t}\n-\n }\n \n func Test_URLKeyWithUser(t *testing.T) {\n@@ -273,7 +270,6 @@ func Test_URLKeyWithUser(t *testing.T) {\n \t\t\tassert.Equal(t, tt.key, URLKeyWithUser(r))\n \t\t})\n \t}\n-\n }\n \n func TestRest_parseError(t *testing.T) {\n@@ -300,7 +296,6 @@ func TestRest_parseError(t *testing.T) {\n }\n \n func TestRest_cacheControl(t *testing.T) {\n-\n \ttbl := []struct {\n \t\turl     string\n \t\tversion string\n@@ -328,14 +323,11 @@ func TestRest_cacheControl(t *testing.T) {\n \t\t\tt.Logf(\"%+v\", resp.Header)\n \t\t\tassert.Equal(t, `\"`+tt.etag+`\"`, resp.Header.Get(\"Etag\"))\n \t\t\tassert.Equal(t, `max-age=`+strconv.Itoa(int(tt.exp.Seconds()))+\", no-cache\", resp.Header.Get(\"Cache-Control\"))\n-\n \t\t})\n \t}\n-\n }\n \n func TestRest_frameAncestors(t *testing.T) {\n-\n \ttbl := []struct {\n \t\thosts  []string\n \t\theader string\n@@ -358,14 +350,11 @@ func TestRest_frameAncestors(t *testing.T) {\n \t\t\tassert.NoError(t, resp.Body.Close())\n \t\t\tt.Logf(\"%+v\", resp.Header)\n \t\t\tassert.Equal(t, tt.header, resp.Header.Get(\"Content-Security-Policy\"))\n-\n \t\t})\n \t}\n-\n }\n \n func TestRest_subscribersOnly(t *testing.T) {\n-\n \tpaidSubUser := &token.User{}\n \tpaidSubUser.SetPaidSub(true)\n \n@@ -586,12 +575,12 @@ func requireAdminOnly(t *testing.T, req *http.Request) {\n \tresp, err := sendReq(t, req, \"\") // no-auth user\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 401, resp.StatusCode)\n+\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n \n \tresp, err = sendReq(t, req, devToken) // non-admin user\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tassert.Equal(t, 403, resp.StatusCode)\n+\tassert.Equal(t, http.StatusForbidden, resp.StatusCode)\n }\n \n func chooseRandomUnusedPort() (port int) {"
    },
    {
      "sha": "bf3da0ac2df54d2a1098b30025ab25861bbbd185",
      "filename": "backend/app/rest/api/rss.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frss.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frss.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frss.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -102,7 +102,6 @@ func (s *rss) repliesCtrl(w http.ResponseWriter, r *http.Request) {\n \n \tkey := cache.NewKey(siteID).ID(URLKey(r)).Scopes(siteID, lastCommentsScope)\n \tdata, err := s.cache.Get(key, func() (res []byte, e error) {\n-\n \t\treplies, userName, e := s.dataService.UserReplies(siteID, userID, maxRssItems, maxReplyDuration)\n \t\tif e != nil {\n \t\t\treturn nil, errors.Wrap(e, \"can't get last comments\")\n@@ -128,7 +127,6 @@ func (s *rss) repliesCtrl(w http.ResponseWriter, r *http.Request) {\n }\n \n func (s *rss) toRssFeed(url string, comments []store.Comment, description string) (string, error) {\n-\n \tif description == \"\" {\n \t\tdescription = \"comment updates\"\n \t}"
    },
    {
      "sha": "1c9a0e21a6438c7af66c32947a9401c0b6c96066",
      "filename": "backend/app/rest/api/rss_test.go",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frss_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Frss_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frss_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -2,6 +2,7 @@ package api\n \n import (\n \t\"fmt\"\n+\t\"net/http\"\n \t\"regexp\"\n \t\"strings\"\n \t\"testing\"\n@@ -31,7 +32,7 @@ func TestServer_RssPost(t *testing.T) {\n \tpubDate := time.Now().Format(time.RFC1123Z)\n \n \tres, code := get(t, ts.URL+\"/api/v1/rss/post?site=remark42&url=https://radio-t.com/blah1\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tt.Log(res)\n \n \texpected := fmt.Sprintf(`<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\">\n@@ -55,7 +56,7 @@ func TestServer_RssPost(t *testing.T) {\n \tassert.Equal(t, expected, res)\n \n \t_, code = get(t, ts.URL+\"/api/v1/rss/post?site=remark42-bad&url=https://radio-t.com/blah1\")\n-\tassert.Equal(t, 400, code)\n+\tassert.Equal(t, http.StatusBadRequest, code)\n }\n \n func TestServer_RssSite(t *testing.T) {\n@@ -86,7 +87,7 @@ func TestServer_RssSite(t *testing.T) {\n \n \trequire.NoError(t, err)\n \tres, code := get(t, ts.URL+\"/api/v1/rss/site?site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tt.Log(res)\n \n \texpected := fmt.Sprintf(`<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\">\n@@ -118,7 +119,7 @@ func TestServer_RssSite(t *testing.T) {\n \tassert.Equal(t, expected, res)\n \n \t_, code = get(t, ts.URL+\"/api/v1/rss/site?site=bad-radio-t\")\n-\tassert.Equal(t, 400, code)\n+\tassert.Equal(t, http.StatusBadRequest, code)\n }\n \n func TestServer_RssWithReply(t *testing.T) {\n@@ -149,7 +150,7 @@ func TestServer_RssWithReply(t *testing.T) {\n \trequire.NoError(t, err)\n \n \tres, code := get(t, ts.URL+\"/api/v1/rss/post?site=remark42&url=https://radio-t.com/blah10\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tt.Log(res)\n \n \texpected := fmt.Sprintf(`<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\">\n@@ -236,7 +237,7 @@ func TestServer_RssReplies(t *testing.T) {\n \n \t// replies to c1 (user1). Must be [c3, c2]\n \tres, code := get(t, ts.URL+\"/api/v1/rss/reply?user=user1&site=remark42\")\n-\tassert.Equal(t, 200, code)\n+\tassert.Equal(t, http.StatusOK, code)\n \tt.Log(res)\n \texpected := fmt.Sprintf(`<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\">\n \t    <channel>\n@@ -266,7 +267,7 @@ func TestServer_RssReplies(t *testing.T) {\n \tassert.Equal(t, expected, res)\n \n \t_, code = get(t, ts.URL+\"/api/v1/rss/reply?user=user1&site=remark42-bad\")\n-\tassert.Equal(t, 400, code)\n+\tassert.Equal(t, http.StatusBadRequest, code)\n }\n \n func waitOnSecChange() {"
    },
    {
      "sha": "e9fe4f6bd15f88ebe83c859bfca3b1c6ccbfdfc7",
      "filename": "backend/app/rest/api/ssl_test.go",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Fssl_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fapi%2Fssl_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Fssl_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -35,7 +35,7 @@ func TestSSL_Redirect(t *testing.T) {\n \tresp, err := client.Get(ts.URL + \"/blah?param=1\")\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 307, resp.StatusCode)\n+\tassert.Equal(t, http.StatusTemporaryRedirect, resp.StatusCode)\n \tassert.Equal(t, \"https://localhost:443/blah?param=1\", resp.Header.Get(\"Location\"))\n }\n \n@@ -64,7 +64,7 @@ func TestSSL_ACME_HTTPChallengeRouter(t *testing.T) {\n \tresp, err := client.Get(ts.URL + \"/blah?param=1\")\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 307, resp.StatusCode)\n+\tassert.Equal(t, http.StatusTemporaryRedirect, resp.StatusCode)\n \tassert.Equal(t, \"https://localhost:443/blah?param=1\", resp.Header.Get(\"Location\"))\n \n \t// check acme http challenge\n@@ -74,15 +74,15 @@ func TestSSL_ACME_HTTPChallengeRouter(t *testing.T) {\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 404, resp.StatusCode)\n+\tassert.Equal(t, http.StatusNotFound, resp.StatusCode)\n \n \terr = m.Cache.Put(context.Background(), \"token123+http-01\", []byte(\"token\"))\n \tassert.NoError(t, err)\n \n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tbody, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \tassert.Equal(t, \"token\", string(body))"
    },
    {
      "sha": "cc7b0872d7a5ccf97b198bbaeee1ee5b74759ec7",
      "filename": "backend/app/rest/httperrors_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fhttperrors_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fhttperrors_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fhttperrors_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -15,7 +15,6 @@ import (\n )\n \n func TestSendErrorJSON(t *testing.T) {\n-\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tif r.URL.Path == \"/error\" {\n \t\t\tt.Log(\"http err request\", r.URL)\n@@ -33,7 +32,7 @@ func TestSendErrorJSON(t *testing.T) {\n \n \tbody, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n-\tassert.Equal(t, 500, resp.StatusCode)\n+\tassert.Equal(t, http.StatusInternalServerError, resp.StatusCode)\n \n \tassert.Equal(t, `{\"code\":123,\"details\":\"error details 123456\",\"error\":\"error 500\"}`+\"\\n\", string(body))\n }\n@@ -63,7 +62,7 @@ func TestSendErrorHTML(t *testing.T) {\n \n \tbody, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n-\tassert.Equal(t, 500, resp.StatusCode)\n+\tassert.Equal(t, http.StatusInternalServerError, resp.StatusCode)\n \n \tassert.NotContains(t, string(body), `987`, \"user html should not contain internal error code\")\n \tassert.Contains(t, string(body), `error details 123456`)"
    },
    {
      "sha": "6e4c9b5da0244413e6316c4881e8c96bdf3aa4c2",
      "filename": "backend/app/rest/user.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fuser.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Frest%2Fuser.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fuser.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -21,7 +21,6 @@ func MustGetUserInfo(r *http.Request) store.User {\n \n // GetUserInfo returns user from request context\n func GetUserInfo(r *http.Request) (user store.User, err error) {\n-\n \tu, err := token.GetUserInfo(r)\n \tif err != nil {\n \t\treturn store.User{}, errors.Wrap(err, \"can't extract user info from the token\")"
    },
    {
      "sha": "205cc3fa596e2e21f19dcb21c776c4ac563576bc",
      "filename": "backend/app/store/comment_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fcomment_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fcomment_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fcomment_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -9,7 +9,6 @@ import (\n )\n \n func TestComment_Sanitize(t *testing.T) {\n-\n \ttbl := []struct {\n \t\tinp Comment\n \t\tout Comment\n@@ -114,7 +113,6 @@ func TestComment_PrepareUntrusted(t *testing.T) {\n \tassert.Equal(t, User{ID: \"username\"}, comment.User)\n \tassert.Equal(t, 0., comment.Controversy)\n \tassert.Equal(t, false, comment.Imported)\n-\n }\n \n func TestComment_SetDeleted(t *testing.T) {\n@@ -195,7 +193,6 @@ func TestComment_Snippet(t *testing.T) {\n }\n \n func TestComment_sanitizeAsURL(t *testing.T) {\n-\n \ttbl := []struct {\n \t\tinp, out string\n \t}{\n@@ -231,7 +228,6 @@ func TestComment_sanitizeAsURL(t *testing.T) {\n }\n \n func TestComment_sanitizeText(t *testing.T) {\n-\n \ttbl := []struct {\n \t\tinp, out string\n \t}{\n@@ -260,5 +256,4 @@ func TestComment_sanitizeText(t *testing.T) {\n \t\t\tassert.Equal(t, tt.out, c.SanitizeText(tt.inp))\n \t\t})\n \t}\n-\n }"
    },
    {
      "sha": "8028048a79cea339019e739052cf3e942851ddb7",
      "filename": "backend/app/store/engine/bolt.go",
      "status": "modified",
      "additions": 0,
      "deletions": 17,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fengine%2Fbolt.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fengine%2Fbolt.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fengine%2Fbolt.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -139,7 +139,6 @@ func (b *BoltDB) Create(comment store.Comment) (commentID string, err error) {\n \n // Get returns comment for locator.URL and commentID string\n func (b *BoltDB) Get(req GetRequest) (comment store.Comment, err error) {\n-\n \tbdb, err := b.db(req.Locator.SiteID)\n \tif err != nil {\n \t\treturn comment, err\n@@ -167,7 +166,6 @@ func (b *BoltDB) Find(req FindRequest) (comments []store.Comment, err error) {\n \tswitch {\n \tcase req.Locator.SiteID != \"\" && req.Locator.URL != \"\": // find post comments, i.e. for site and url\n \t\terr = bdb.View(func(tx *bolt.Tx) error {\n-\n \t\t\tbucket, e := b.getPostBucket(tx, req.Locator.URL)\n \t\t\tif e != nil {\n \t\t\t\treturn e\n@@ -235,7 +233,6 @@ func (b *BoltDB) UserDetail(req UserDetailRequest) ([]UserDetailEntry, error) {\n \n // Update for locator.URL with mutable part of comment\n func (b *BoltDB) Update(comment store.Comment) error {\n-\n \tgetReq := GetRequest{Locator: comment.Locator, CommentID: comment.ID}\n \tif curComment, err := b.Get(getReq); err == nil {\n \t\t// preserve immutable fields\n@@ -261,7 +258,6 @@ func (b *BoltDB) Update(comment store.Comment) error {\n \n // Count returns number of comments for post or user\n func (b *BoltDB) Count(req FindRequest) (count int, err error) {\n-\n \tbdb, err := b.db(req.Locator.SiteID)\n \tif err != nil {\n \t\treturn 0, err\n@@ -295,7 +291,6 @@ func (b *BoltDB) Count(req FindRequest) (count int, err error) {\n \n // Info get post(s) meta info\n func (b *BoltDB) Info(req InfoRequest) ([]store.PostInfo, error) {\n-\n \tbdb, err := b.db(req.Locator.SiteID)\n \tif err != nil {\n \t\treturn []store.PostInfo{}, err\n@@ -354,7 +349,6 @@ func (b *BoltDB) Info(req InfoRequest) ([]store.PostInfo, error) {\n // ListFlags get list of flagged keys, like blocked & verified user\n // works for full locator (post flags) or with userID\n func (b *BoltDB) ListFlags(req FlagRequest) (res []interface{}, err error) {\n-\n \tbdb, e := b.db(req.Locator.SiteID)\n \tif e != nil {\n \t\treturn nil, e\n@@ -400,7 +394,6 @@ func (b *BoltDB) ListFlags(req FlagRequest) (res []interface{}, err error) {\n \n // Delete post(s), user, comment, user details, or everything\n func (b *BoltDB) Delete(req DeleteRequest) error {\n-\n \tbdb, e := b.db(req.Locator.SiteID)\n \tif e != nil {\n \t\treturn e\n@@ -432,7 +425,6 @@ func (b *BoltDB) Close() error {\n \n // Last returns up to max last comments for given siteID\n func (b *BoltDB) lastComments(siteID string, max int, since time.Time) (comments []store.Comment, err error) {\n-\n \tcomments = []store.Comment{}\n \n \tif max > lastLimit || max == 0 {\n@@ -449,7 +441,6 @@ func (b *BoltDB) lastComments(siteID string, max int, since time.Time) (comments\n \t\tc := lastBkt.Cursor()\n \n \t\tfor k, v := c.Last(); k != nil; k, v = c.Prev() {\n-\n \t\t\tif !since.IsZero() {\n \t\t\t\t// stop if reached \"since\" ts\n \t\t\t\ttsSince := []byte(since.Format(tsNano))\n@@ -488,7 +479,6 @@ func (b *BoltDB) lastComments(siteID string, max int, since time.Time) (comments\n // userComments extracts all comments for given site and given userID\n // \"users\" bucket has sub-bucket for each userID, and keeps it as ts:ref\n func (b *BoltDB) userComments(siteID, userID string, limit, skip int) (comments []store.Comment, err error) {\n-\n \tcomments = []store.Comment{}\n \tcommentRefs := []string{}\n \n@@ -544,7 +534,6 @@ func (b *BoltDB) userComments(siteID, userID string, limit, skip int) (comments\n }\n \n func (b *BoltDB) checkFlag(req FlagRequest) (val bool) {\n-\n \tbdb, err := b.db(req.Locator.SiteID)\n \tif err != nil {\n \t\treturn false\n@@ -791,9 +780,7 @@ func (b *BoltDB) deleteUserDetail(bdb *bolt.DB, userID string, userDetail UserDe\n }\n \n func (b *BoltDB) deleteComment(bdb *bolt.DB, locator store.Locator, commentID string, mode store.DeleteMode) error {\n-\n \treturn bdb.Update(func(tx *bolt.Tx) error {\n-\n \t\tpostBkt, e := b.getPostBucket(tx, locator.URL)\n \t\tif e != nil {\n \t\t\treturn e\n@@ -830,14 +817,12 @@ func (b *BoltDB) deleteComment(bdb *bolt.DB, locator store.Locator, commentID st\n \n // deleteAll removes all top-level buckets for given siteID\n func (b *BoltDB) deleteAll(bdb *bolt.DB, siteID string) error {\n-\n \t// delete all buckets except blocked users\n \ttoDelete := []string{postsBucketName, lastBucketName, userBucketName, userDetailsBucketName, infoBucketName}\n \n \t// delete top-level buckets\n \terr := bdb.Update(func(tx *bolt.Tx) error {\n \t\tfor _, bktName := range toDelete {\n-\n \t\t\tif e := tx.DeleteBucket([]byte(bktName)); e != nil {\n \t\t\t\treturn errors.Wrapf(e, \"failed to delete top level bucket %s\", bktName)\n \t\t\t}\n@@ -854,7 +839,6 @@ func (b *BoltDB) deleteAll(bdb *bolt.DB, siteID string) error {\n // deleteUser removes all comments and details for given user. Everything will be market as deleted\n // and user name and userID will be changed to \"deleted\". Also removes from last and from user buckets.\n func (b *BoltDB) deleteUser(bdb *bolt.DB, siteID, userID string, mode store.DeleteMode) error {\n-\n \t// get list of all comments outside of transaction loop\n \tposts, err := b.Info(InfoRequest{Locator: store.Locator{SiteID: siteID}})\n \tif err != nil {\n@@ -989,7 +973,6 @@ func (b *BoltDB) load(bkt *bolt.Bucket, key string, res interface{}) error {\n // count adds val to counts key postURL. val can be negative to subtract. if val 0 can be used as accessor\n // it uses separate counts bucket because boltdb Stat call is very slow\n func (b *BoltDB) count(tx *bolt.Tx, postURL string, val int) (int, error) {\n-\n \tinfoBkt := tx.Bucket([]byte(infoBucketName))\n \n \tinfo := store.PostInfo{}"
    },
    {
      "sha": "5985e57c0dad363bbbf2fab100cd6a8c059c0928",
      "filename": "backend/app/store/engine/bolt_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 12,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fengine%2Fbolt_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fengine%2Fbolt_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fengine%2Fbolt_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -416,7 +416,6 @@ func TestBoltDB_InfoList(t *testing.T) {\n }\n \n func TestBolt_FlagBlockedUser(t *testing.T) {\n-\n \tb, teardown := prep(t)\n \tdefer teardown()\n \n@@ -461,7 +460,6 @@ func TestBolt_FlagBlockedUser(t *testing.T) {\n }\n \n func TestBolt_FlagReadOnlyPost(t *testing.T) {\n-\n \tb, teardown := prep(t)\n \tdefer teardown()\n \n@@ -503,7 +501,6 @@ func TestBolt_FlagReadOnlyPost(t *testing.T) {\n }\n \n func TestBolt_FlagVerified(t *testing.T) {\n-\n \tb, teardown := prep(t)\n \tdefer teardown()\n \n@@ -540,7 +537,6 @@ func TestBolt_FlagVerified(t *testing.T) {\n }\n \n func TestBolt_FlagListVerified(t *testing.T) {\n-\n \tb, teardown := prep(t)\n \tdefer teardown()\n \n@@ -575,7 +571,6 @@ func TestBolt_FlagListVerified(t *testing.T) {\n }\n \n func TestBolt_FlagListBlocked(t *testing.T) {\n-\n \tb, teardown := prep(t)\n \tdefer teardown()\n \n@@ -617,11 +612,9 @@ func TestBolt_FlagListBlocked(t *testing.T) {\n \n \t_, err = b.ListFlags(FlagRequest{Flag: Blocked, Locator: store.Locator{SiteID: \"bad\"}})\n \tassert.EqualError(t, err, `site \"bad\" not found`)\n-\n }\n \n func TestBoltDB_UserDetail(t *testing.T) {\n-\n \tb, teardown := prep(t)\n \tdefer teardown()\n \n@@ -672,7 +665,6 @@ func TestBoltDB_UserDetail(t *testing.T) {\n }\n \n func TestBolt_DeleteComment(t *testing.T) {\n-\n \tb, teardown := prep(t)\n \tdefer teardown()\n \n@@ -728,7 +720,6 @@ func TestBolt_DeleteComment(t *testing.T) {\n }\n \n func TestBolt_DeleteHard(t *testing.T) {\n-\n \tb, teardown := prep(t)\n \tdefer teardown()\n \n@@ -751,7 +742,6 @@ func TestBolt_DeleteHard(t *testing.T) {\n }\n \n func TestBolt_DeleteAll(t *testing.T) {\n-\n \tb, teardown := prep(t)\n \tdefer teardown()\n \n@@ -811,7 +801,6 @@ func TestBolt_DeleteUserDetail(t *testing.T) {\n }\n \n func TestBoltAdmin_DeleteUserHard(t *testing.T) {\n-\n \tb, teardown := prep(t)\n \tdefer teardown()\n \n@@ -852,7 +841,6 @@ func TestBoltAdmin_DeleteUserHard(t *testing.T) {\n }\n \n func TestBoltAdmin_DeleteUserSoft(t *testing.T) {\n-\n \tb, teardown := prep(t)\n \tdefer teardown()\n "
    },
    {
      "sha": "7c3c84f6ad6d2631b594536b975c648f7582a7c5",
      "filename": "backend/app/store/engine/remote.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fengine%2Fremote.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fengine%2Fremote.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fengine%2Fremote.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -15,7 +15,6 @@ type RPC struct {\n \n // Create comment and return ID\n func (r *RPC) Create(comment store.Comment) (commentID string, err error) {\n-\n \tresp, err := r.Call(\"store.create\", comment)\n \tif err != nil {\n \t\treturn \"\", err"
    },
    {
      "sha": "b3a7ccc1ed6b87a80a9fe78d2c211a09af4c43d3",
      "filename": "backend/app/store/engine/remote_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fengine%2Fremote_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fengine%2Fremote_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fengine%2Fremote_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -95,7 +95,6 @@ func TestRemote_Update(t *testing.T) {\n \terr := c.Update(store.Comment{ID: \"123\", Locator: store.Locator{URL: \"http://example.com/url\", SiteID: \"site123\"},\n \t\tText: \"msg\"})\n \tassert.NoError(t, err)\n-\n }\n \n func TestRemote_Find(t *testing.T) {"
    },
    {
      "sha": "6517ecbbde2b7ac75fd108ede8e9d02159e00bfb",
      "filename": "backend/app/store/formatter_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fformatter_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fformatter_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fformatter_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -122,7 +122,6 @@ func TestFormatter_ShortenAutoLinks(t *testing.T) {\n }\n \n func TestCommentFormatter_lazyImage(t *testing.T) {\n-\n \ttbl := []struct {\n \t\tinp, out string\n \t}{\n@@ -139,5 +138,4 @@ func TestCommentFormatter_lazyImage(t *testing.T) {\n \t\t\tassert.Equal(t, tt.out, f.lazyImage(tt.inp))\n \t\t})\n \t}\n-\n }"
    },
    {
      "sha": "8dd1c38d028fbd14164eab40458754fa896dfe93",
      "filename": "backend/app/store/image/bolt_store_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fimage%2Fbolt_store_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fimage%2Fbolt_store_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fbolt_store_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -40,7 +40,6 @@ func TestBoltStore_SaveCommit(t *testing.T) {\n \t\treturn nil\n \t})\n \tassert.NoError(t, err)\n-\n }\n \n func TestBoltStore_LoadAfterSave(t *testing.T) {"
    },
    {
      "sha": "ae338697e0af72f6888046d468573ca7eff39943",
      "filename": "backend/app/store/image/fs_store.go",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fimage%2Ffs_store.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fimage%2Ffs_store.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Ffs_store.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -78,7 +78,6 @@ func (f *FileSystem) ResetCleanupTimer(id string) error {\n \n // Load image from FS. Uses id to get partition subdirectory.\n func (f *FileSystem) Load(id string) ([]byte, error) {\n-\n \t// get image file by id. first try permanent location and if not found - staging\n \timg := func(id string) (file string, err error) {\n \t\tfile = f.location(f.Location, id)\n@@ -104,7 +103,6 @@ func (f *FileSystem) Load(id string) ([]byte, error) {\n \n // Cleanup runs scan of staging and removes old files based on ttl\n func (f *FileSystem) Cleanup(_ context.Context, ttl time.Duration) error {\n-\n \tif _, err := os.Stat(f.Staging); os.IsNotExist(err) {\n \t\treturn nil\n \t}\n@@ -161,7 +159,6 @@ func (f *FileSystem) Info() (StoreInfo, error) {\n // the end result is a full path like this - /tmp/images/user1/92/xxx-yyy.png.\n // Number of partitions defined by FileSystem.Partitions\n func (f *FileSystem) location(base, id string) string {\n-\n \tpartition := func(id string) string {\n \t\tf.crc.Do(func() {\n \t\t\tf.crc.Table = crc64.MakeTable(crc64.ECMA)"
    },
    {
      "sha": "c2a3fb3f5f550af1ba47432ac09a9de967f9d3fd",
      "filename": "backend/app/store/image/fs_store_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fimage%2Ffs_store_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fimage%2Ffs_store_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Ffs_store_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -100,7 +100,6 @@ func TestFsStore_SaveAndCommit(t *testing.T) {\n }\n \n func TestFsStore_LoadAfterSave(t *testing.T) {\n-\n \tsvc, teardown := prepareImageTest(t)\n \tdefer teardown()\n \n@@ -117,7 +116,6 @@ func TestFsStore_LoadAfterSave(t *testing.T) {\n }\n \n func TestFsStore_LoadAfterCommit(t *testing.T) {\n-\n \tsvc, teardown := prepareImageTest(t)\n \tdefer teardown()\n "
    },
    {
      "sha": "cbe1170e5d79c550e903cde1af239d7cbefeab70",
      "filename": "backend/app/store/image/image.go",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fimage%2Fimage.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fimage%2Fimage.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fimage.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -144,7 +144,6 @@ func (s *Service) Submit(idsFn func() []string) {\n \n // ExtractPictures gets list of images from the doc html and convert from urls to ids, i.e. user/pic.png\n func (s *Service) ExtractPictures(commentHTML string) (ids []string) {\n-\n \tdoc, err := goquery.NewDocumentFromReader(strings.NewReader(commentHTML))\n \tif err != nil {\n \t\tlog.Printf(\"[ERROR] can't parse commentHTML to parse images: %q, error: %v\", commentHTML, err)\n@@ -313,7 +312,6 @@ func resize(data []byte, limitW, limitH int) []byte {\n \n // getProportionalSizes returns width and height resized by both dimensions proportionally\n func getProportionalSizes(srcW, srcH, limitW, limitH int) (resW, resH int) {\n-\n \tif srcW <= limitW && srcH <= limitH {\n \t\treturn srcW, srcH\n \t}\n@@ -333,7 +331,6 @@ func getProportionalSizes(srcW, srcH, limitW, limitH int) (resW, resH int) {\n \n // check if file f is a valid image format, i.e. gif, png, jpeg or webp and reads up to maxSize.\n func readAndValidateImage(r io.Reader, maxSize int) ([]byte, error) {\n-\n \tisValidImage := func(b []byte) bool {\n \t\tct := http.DetectContentType(b)\n \t\treturn ct == \"image/gif\" || ct == \"image/png\" || ct == \"image/jpeg\" || ct == \"image/webp\""
    },
    {
      "sha": "0de628ef7ea51e6bea5c001ecee617db77ede8ae",
      "filename": "backend/app/store/image/image_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fimage%2Fimage_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fimage%2Fimage_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fimage_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -226,7 +226,6 @@ func TestService_resize(t *testing.T) {\n \t\tassert.Equal(t, c.wr, bounds.Dx(), \"file %s\", c.file)\n \t\tassert.Equal(t, c.hr, bounds.Dy(), \"file %s\", c.file)\n \t}\n-\n }\n \n func TestGetProportionalSizes(t *testing.T) {"
    },
    {
      "sha": "388085b479d2c0fda74e6253702772d863ce2238",
      "filename": "backend/app/store/service/restricted_words_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Frestricted_words_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Frestricted_words_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Frestricted_words_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -7,7 +7,6 @@ import (\n )\n \n func TestMatcher_Tokenize(t *testing.T) {\n-\n \tmatcher := NewRestrictedWordsMatcher(StaticRestrictedWordsLister{})\n \n \ttbl := []struct {\n@@ -32,7 +31,6 @@ func TestMatcher_Tokenize(t *testing.T) {\n }\n \n func TestWildcardTrie_Check(t *testing.T) {\n-\n \ttbl := []struct {\n \t\tinput   []string\n \t\tmatch   []string"
    },
    {
      "sha": "ebf41cbc79d2141558d43e420a4a4fb3f97b78cb",
      "filename": "backend/app/store/service/service.go",
      "status": "modified",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Fservice.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Fservice.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Fservice.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -81,7 +81,6 @@ var ErrRestrictedWordsFound = errors.New(\"comment contains restricted words\")\n \n // Create prepares comment and forward to Interface.Create\n func (s *DataStore) Create(comment store.Comment) (commentID string, err error) {\n-\n \tif comment, err = s.prepareNewComment(comment); err != nil {\n \t\treturn \"\", errors.Wrap(err, \"failed to prepare comment\")\n \t}\n@@ -338,7 +337,6 @@ type VoteReq struct {\n \n // Vote for comment by id and locator\n func (s *DataStore) Vote(req VoteReq) (comment store.Comment, err error) {\n-\n \tcLock := s.getScopedLocks(req.Locator.URL) // get lock for URL scope\n \tcLock.Lock()                               // prevents race on voting\n \tdefer cLock.Unlock()\n@@ -444,7 +442,6 @@ func (s *DataStore) isSameIPVote(req VoteReq, userIPHash string, comment store.C\n // controversy calculates controversial index of votes\n // source - https://github.com/reddit-archive/reddit/blob/master/r2/r2/lib/db/_sorts.pyx#L60\n func (s *DataStore) controversy(ups, downs int) float64 {\n-\n \tif downs <= 0 || ups <= 0 {\n \t\treturn 0\n \t}\n@@ -468,7 +465,6 @@ type EditRequest struct {\n \n // EditComment to edit text and update Edit info\n func (s *DataStore) EditComment(locator store.Locator, commentID string, req EditRequest) (comment store.Comment, err error) {\n-\n \teditAllowed := func(comment store.Comment) error {\n \t\tif req.Admin && s.AdminEdits {\n \t\t\treturn nil\n@@ -525,7 +521,6 @@ func (s *DataStore) EditComment(locator store.Locator, commentID string, req Edi\n // Loads last maxLastCommentsReply comments and compare parent id to the comment's id\n // Comments with replies cached for 5 minutes\n func (s *DataStore) HasReplies(comment store.Comment) bool {\n-\n \ts.repliesCache.once.Do(func() {\n \t\t// default expiration time of 5 minutes and cleanup time of 2.5 minutes\n \t\ts.repliesCache.LoadingCache, _ = lcw.NewExpirableCache(lcw.TTL(5 * time.Minute))\n@@ -558,7 +553,6 @@ func (s *DataStore) HasReplies(comment store.Comment) bool {\n \n // UserReplies returns list of all comments replied to given user\n func (s *DataStore) UserReplies(siteID, userID string, limit int, duration time.Duration) ([]store.Comment, string, error) {\n-\n \tcomments, e := s.Last(siteID, maxLastCommentsReply, time.Time{}, nonAdminUser)\n \tif e != nil {\n \t\treturn nil, \"\", errors.Wrap(e, \"can't get last comments\")\n@@ -573,7 +567,6 @@ func (s *DataStore) UserReplies(siteID, userID string, limit int, duration time.\n \n \t// collect replies\n \tfor _, c := range comments {\n-\n \t\tif len(replies) > limit || time.Since(c.Timestamp) > duration {\n \t\t\tbreak\n \t\t}\n@@ -671,7 +664,6 @@ func (s *DataStore) SetReadOnly(locator store.Locator, status bool) error {\n \troStatus := engine.FlagFalse\n \tif status {\n \t\troStatus = engine.FlagTrue\n-\n \t}\n \treq := engine.FlagRequest{Locator: locator, Flag: engine.ReadOnly, Update: roStatus}\n \t_, err := s.Engine.Flag(req)\n@@ -944,7 +936,6 @@ func (s *DataStore) alterComments(cc []store.Comment, user store.User) (res []st\n }\n \n func (s *DataStore) alterComment(c store.Comment, user store.User) (res store.Comment) {\n-\n \tblocReq := engine.FlagRequest{Flag: engine.Blocked, Locator: store.Locator{SiteID: c.Locator.SiteID}, UserID: c.User.ID}\n \tblocked, bErr := s.Engine.Flag(blocReq)\n \n@@ -972,7 +963,6 @@ func (s *DataStore) alterComment(c store.Comment, user store.User) (res store.Co\n \n // prepare vote info for client view\n func (s *DataStore) prepVotes(c store.Comment, user store.User) store.Comment {\n-\n \tc.Vote = 0 // default is \"none\" (not voted)\n \n \tif v, ok := c.Votes[user.ID]; ok {\n@@ -991,7 +981,6 @@ func (s *DataStore) prepVotes(c store.Comment, user store.User) store.Comment {\n // get secret for given siteID\n // Note: secret shared across sites, but some sites can be disabled.\n func (s *DataStore) getSecret(siteID string) (secret string, err error) {\n-\n \tif secret, err = s.AdminStore.Key(\"any\"); err != nil {\n \t\treturn \"\", errors.Wrapf(err, \"can't get secret for site %s\", siteID)\n \t}"
    },
    {
      "sha": "88785ec69e1a712deff92e22a50e631e4699b822",
      "filename": "backend/app/store/service/service_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 39,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -29,7 +29,6 @@ import (\n )\n \n func TestService_CreateFromEmpty(t *testing.T) {\n-\n \tks := admin.NewStaticKeyStore(\"secret 123\")\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -56,7 +55,6 @@ func TestService_CreateFromEmpty(t *testing.T) {\n }\n \n func TestService_CreateSiteDisabled(t *testing.T) {\n-\n \tks := admin.NewStaticStore(\"secret 123\", []string{\"xxx\"}, nil, \"email\")\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -71,7 +69,6 @@ func TestService_CreateSiteDisabled(t *testing.T) {\n }\n \n func TestService_CreateFromPartial(t *testing.T) {\n-\n \tks := admin.NewStaticKeyStore(\"secret 123\")\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -147,7 +144,6 @@ func TestService_CreateFromPartialWithTitle(t *testing.T) {\n }\n \n func TestService_SetTitle(t *testing.T) {\n-\n \tvar titleEnable int32\n \ttss := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tif atomic.LoadInt32(&titleEnable) == 0 {\n@@ -204,7 +200,6 @@ func TestService_SetTitle(t *testing.T) {\n }\n \n func TestService_Vote(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\"), MaxVotes: -1}\n@@ -311,7 +306,6 @@ func TestService_Vote(t *testing.T) {\n }\n \n func TestService_VoteLimit(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\"), MaxVotes: 2}\n@@ -335,7 +329,6 @@ func TestService_VoteLimit(t *testing.T) {\n }\n \n func TestService_VotesDisabled(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\"), MaxVotes: 0}\n@@ -346,7 +339,6 @@ func TestService_VotesDisabled(t *testing.T) {\n }\n \n func TestService_VoteAggressive(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\"), MaxVotes: -1}\n@@ -412,7 +404,6 @@ func TestService_VoteAggressive(t *testing.T) {\n }\n \n func TestService_VoteConcurrent(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\"), MaxVotes: -1}\n@@ -448,7 +439,6 @@ func TestService_VoteConcurrent(t *testing.T) {\n }\n \n func TestService_VotePositive(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\"),\n@@ -496,11 +486,9 @@ func TestService_VotePositive(t *testing.T) {\n \t\tUserID: \"user4\", Val: false})\n \tassert.NoError(t, err, \"minimal score ignored\")\n \tassert.Equal(t, -1, c.Score)\n-\n }\n \n func TestService_VoteControversy(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\"), MaxVotes: -1}\n@@ -531,7 +519,6 @@ func TestService_VoteControversy(t *testing.T) {\n }\n \n func TestService_VoteSameIP(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\"), MaxVotes: -1}\n@@ -559,7 +546,6 @@ func TestService_VoteSameIP(t *testing.T) {\n }\n \n func TestService_VoteSameIPWithDuration(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\"),\n@@ -616,7 +602,6 @@ func TestService_Controversy(t *testing.T) {\n }\n \n func TestService_Pin(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\")}\n@@ -642,7 +627,6 @@ func TestService_Pin(t *testing.T) {\n }\n \n func TestService_EditComment(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\")}\n@@ -672,7 +656,6 @@ func TestService_EditComment(t *testing.T) {\n }\n \n func TestService_DeleteComment(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\")}\n@@ -694,7 +677,6 @@ func TestService_DeleteComment(t *testing.T) {\n }\n \n func TestService_EditCommentDurationFailed(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, EditDuration: 100 * time.Millisecond,\n@@ -714,7 +696,6 @@ func TestService_EditCommentDurationFailed(t *testing.T) {\n }\n \n func TestService_EditCommentReplyFailed(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, AdminStore: admin.NewStaticKeyStore(\"secret 123\")}\n@@ -766,7 +747,6 @@ func TestService_EditCommentAdmin(t *testing.T) {\n }\n \n func TestService_ValidateComment(t *testing.T) {\n-\n \tb := DataStore{MaxCommentSize: 2000, AdminStore: admin.NewStaticKeyStore(\"secret 123\")}\n \tlongText := fmt.Sprintf(\"%4000s\", \"X\")\n \n@@ -792,7 +772,6 @@ func TestService_ValidateComment(t *testing.T) {\n }\n \n func TestService_Counts(t *testing.T) {\n-\n \tb, teardown := prepStoreEngine(t) // two comments for https://radio-t.com\n \tdefer teardown()\n \n@@ -822,7 +801,6 @@ func TestService_Counts(t *testing.T) {\n }\n \n func TestService_GetMetas(t *testing.T) {\n-\n \t// two comments for https://radio-t.com\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -869,7 +847,6 @@ func TestService_GetMetas(t *testing.T) {\n }\n \n func TestService_SetMetas(t *testing.T) {\n-\n \t// two comments for https://radio-t.com\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -898,7 +875,6 @@ func TestService_SetMetas(t *testing.T) {\n }\n \n func TestService_UserDetailsOperations(t *testing.T) {\n-\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n \tb := DataStore{Engine: eng, EditDuration: 100 * time.Millisecond,\n@@ -952,7 +928,6 @@ func TestService_UserDetailsOperations(t *testing.T) {\n }\n \n func TestService_IsAdmin(t *testing.T) {\n-\n \t// two comments for https://radio-t.com\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -965,7 +940,6 @@ func TestService_IsAdmin(t *testing.T) {\n }\n \n func TestService_HasReplies(t *testing.T) {\n-\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -997,7 +971,6 @@ func TestService_HasReplies(t *testing.T) {\n }\n \n func TestService_UserReplies(t *testing.T) {\n-\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -1079,11 +1052,9 @@ func TestService_UserReplies(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.Equal(t, 0, len(cc), \"0 replies to uxxx\")\n \tassert.Equal(t, \"\", u)\n-\n }\n \n func TestService_Find(t *testing.T) {\n-\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -1141,7 +1112,6 @@ func TestService_FindSince(t *testing.T) {\n }\n \n func TestService_Info(t *testing.T) {\n-\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -1163,7 +1133,6 @@ func TestService_Info(t *testing.T) {\n }\n \n func TestService_Delete(t *testing.T) {\n-\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -1184,7 +1153,6 @@ func TestService_Delete(t *testing.T) {\n \n // DeleteUser removes all comments from user\n func TestService_DeleteUser(t *testing.T) {\n-\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -1216,7 +1184,6 @@ func TestService_DeleteUser(t *testing.T) {\n }\n \n func TestService_List(t *testing.T) {\n-\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -1249,7 +1216,6 @@ func TestService_List(t *testing.T) {\n }\n \n func TestService_Count(t *testing.T) {\n-\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -1281,7 +1247,6 @@ func TestService_Count(t *testing.T) {\n }\n \n func TestService_UserComments(t *testing.T) {\n-\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -1307,7 +1272,6 @@ func TestService_UserComments(t *testing.T) {\n }\n \n func TestService_UserCount(t *testing.T) {\n-\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -1338,7 +1302,6 @@ func TestService_UserCount(t *testing.T) {\n }\n \n func TestService_DeleteAll(t *testing.T) {\n-\n \t// two comments for https://radio-t.com, no reply\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -1365,7 +1328,6 @@ func TestService_DeleteAll(t *testing.T) {\n }\n \n func TestService_submitImages(t *testing.T) {\n-\n \tlgr.Setup(lgr.Debug, lgr.CallerFile, lgr.CallerFunc)\n \n \tmockStore := image.MockStore{}\n@@ -1510,7 +1472,6 @@ func TestService_ResubmitStagingImages_EngineError(t *testing.T) {\n }\n \n func TestService_alterComment(t *testing.T) {\n-\n \tengineMock := engine.MockInterface{}\n \tengineMock.On(\"Flag\", engine.FlagRequest{Flag: engine.Blocked, UserID: \"devid\"}).Return(false, nil)\n \tengineMock.On(\"Flag\", engine.FlagRequest{Flag: engine.Verified, UserID: \"devid\"}).Return(false, nil)"
    },
    {
      "sha": "17a83ea1987f3afa4cc09103574489bb4c0a946a",
      "filename": "backend/app/store/service/title_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Ftitle_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Ftitle_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Ftitle_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -17,7 +17,6 @@ import (\n )\n \n func TestTitle_GetTitle(t *testing.T) {\n-\n \ttbl := []struct {\n \t\tpage  string\n \t\tok    bool"
    },
    {
      "sha": "bd2ee608510dafdb01fa81bff15d37fc288b3618",
      "filename": "backend/app/store/service/tree.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Ftree.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Ftree.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Ftree.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -80,7 +80,6 @@ func MakeTree(comments []store.Comment, sortType string, readOnlyAge int) *Tree\n \n // proc makes tree for one top-level comment recursively\n func (t *Tree) proc(comments []store.Comment, node *Node, rd *recurData, parentID string) (result *Node, modified, created time.Time) {\n-\n \tif rd.tsModified.IsZero() || rd.tsCreated.IsZero() {\n \t\trd.tsModified, rd.tsCreated = node.Comment.Timestamp, node.Comment.Timestamp\n \t}\n@@ -124,7 +123,6 @@ func (t *Tree) filter(comments []store.Comment, fn func(comment store.Comment) b\n // sort list of nodes, i.e. top-level comments\n // time sort uses tsModified from latest reply\n func (t *Tree) sortNodes(sortType string) {\n-\n \tsort.Slice(t.Nodes, func(i, j int) bool {\n \t\tswitch sortType {\n \t\tcase \"+time\", \"-time\", \"time\":"
    },
    {
      "sha": "10b8095f1d5287904f7ca20de27ed02e3f56f10e",
      "filename": "backend/app/store/service/tree_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Ftree_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fservice%2Ftree_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Ftree_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -13,7 +13,6 @@ import (\n )\n \n func TestMakeTree(t *testing.T) {\n-\n \tloc := store.Locator{URL: \"url\", SiteID: \"site\"}\n \tts := func(min int, sec int) time.Time { return time.Date(2017, 12, 25, 19, min, sec, 0, time.UTC) }\n \n@@ -87,7 +86,6 @@ func TestMakeEmptySubtree(t *testing.T) {\n \n \texpJSON := mustLoadJSONFile(t, \"testdata/tree_del.json\")\n \tassert.Equal(t, string(expJSON), string(resJSON))\n-\n }\n \n func TestTreeSortNodes(t *testing.T) {"
    },
    {
      "sha": "c49d200d4ff483aed9a96d29919fcfd9670ded8b",
      "filename": "backend/app/store/user.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fuser.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fuser.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fuser.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -49,7 +49,6 @@ func EncodeID(id string) string {\n \n // hashWithFallback tries to has val with hash.Hash and fallback to crc if needed\n func hashWithFallback(h hash.Hash, val string) string {\n-\n \tif reValidSha.MatchString(val) {\n \t\treturn val // already hashed\n \t}"
    },
    {
      "sha": "5db80d7db35a86eceb93ad9503e86d916668d8fd",
      "filename": "backend/app/store/user_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fuser_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/3f3bfaffc6f04de6d7a32837b33fb9779c125152/backend%2Fapp%2Fstore%2Fuser_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fuser_test.go?ref=3f3bfaffc6f04de6d7a32837b33fb9779c125152",
      "patch": "@@ -55,7 +55,6 @@ func TestUser_HashFailed(t *testing.T) {\n \n \tr = hashWithFallback(sha1.New(), \"123456789\")\n \tassert.Equal(t, \"f7c3bc1d808e04732adf679965ccc34ca7ae3441\", r)\n-\n }\n \n type mockHash struct{}"
    }
  ]
}
