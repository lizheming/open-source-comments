{
  "sha": "e77dc3333330223d63e6732ab825aca89d5410f2",
  "node_id": "C_kwDOBtgov9oAKGU3N2RjMzMzMzMzMDIyM2Q2M2U2NzMyYWI4MjVhY2E4OWQ1NDEwZjI",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2022-09-10T22:08:34Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2022-09-12T22:22:34Z"
    },
    "message": "bump mockery from v1.1.2 to v2.14.0\n\nCommand-line params changed their names,\nand old ones won't work anymore.",
    "tree": {
      "sha": "d764a105741cd87e967d83e9671f796eff2452e1",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/d764a105741cd87e967d83e9671f796eff2452e1"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/e77dc3333330223d63e6732ab825aca89d5410f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/e77dc3333330223d63e6732ab825aca89d5410f2",
  "html_url": "https://github.com/umputun/remark42/commit/e77dc3333330223d63e6732ab825aca89d5410f2",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/e77dc3333330223d63e6732ab825aca89d5410f2/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5fee19f6c76ea5a5d8aaace954c44176cb1e76ff",
      "url": "https://api.github.com/repos/umputun/remark42/commits/5fee19f6c76ea5a5d8aaace954c44176cb1e76ff",
      "html_url": "https://github.com/umputun/remark42/commit/5fee19f6c76ea5a5d8aaace954c44176cb1e76ff"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 37,
    "deletions": 9
  },
  "files": [
    {
      "sha": "8644a0eed1cc617e40acff4b01a948e347ef4c60",
      "filename": "backend/app/store/engine/engine.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/e77dc3333330223d63e6732ab825aca89d5410f2/backend%2Fapp%2Fstore%2Fengine%2Fengine.go",
      "raw_url": "https://github.com/umputun/remark42/raw/e77dc3333330223d63e6732ab825aca89d5410f2/backend%2Fapp%2Fstore%2Fengine%2Fengine.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fengine%2Fengine.go?ref=e77dc3333330223d63e6732ab825aca89d5410f2",
      "patch": "@@ -11,8 +11,8 @@ import (\n \t\"github.com/umputun/remark42/backend/app/store\"\n )\n \n-// NOTE: mockery works from linked to go-path and with go generate\n-//go:generate sh -c \"mockery -inpkg -name Interface -print > /tmp/engine-mock.tmp && mv /tmp/engine-mock.tmp engine_mock.go\"\n+// NOTE: mockery should be installed globally and works with `go generate ./...`\n+//go:generate mockery --inpackage --name Interface --filename engine_mock.go\n \n // Interface defines methods provided by low-level storage engine\n type Interface interface {"
    },
    {
      "sha": "170fe3a3ec971c1313ce6372784a2e3796623ccd",
      "filename": "backend/app/store/engine/engine_mock.go",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark42/blob/e77dc3333330223d63e6732ab825aca89d5410f2/backend%2Fapp%2Fstore%2Fengine%2Fengine_mock.go",
      "raw_url": "https://github.com/umputun/remark42/raw/e77dc3333330223d63e6732ab825aca89d5410f2/backend%2Fapp%2Fstore%2Fengine%2Fengine_mock.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fengine%2Fengine_mock.go?ref=e77dc3333330223d63e6732ab825aca89d5410f2",
      "patch": "@@ -1,4 +1,4 @@\n-// Code generated by mockery v1.1.2. DO NOT EDIT.\n+// Code generated by mockery v2.14.0. DO NOT EDIT.\n \n package engine\n \n@@ -229,3 +229,18 @@ func (_m *MockInterface) UserDetail(req UserDetailRequest) ([]UserDetailEntry, e\n \n \treturn r0, r1\n }\n+\n+type mockConstructorTestingTNewMockInterface interface {\n+\tmock.TestingT\n+\tCleanup(func())\n+}\n+\n+// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.\n+func NewMockInterface(t mockConstructorTestingTNewMockInterface) *MockInterface {\n+\tmock := &MockInterface{}\n+\tmock.Mock.Test(t)\n+\n+\tt.Cleanup(func() { mock.AssertExpectations(t) })\n+\n+\treturn mock\n+}"
    },
    {
      "sha": "6cf4fb2e23afa893bc1c2fd1bac7f45e18bbbbe8",
      "filename": "backend/app/store/image/image.go",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/e77dc3333330223d63e6732ab825aca89d5410f2/backend%2Fapp%2Fstore%2Fimage%2Fimage.go",
      "raw_url": "https://github.com/umputun/remark42/raw/e77dc3333330223d63e6732ab825aca89d5410f2/backend%2Fapp%2Fstore%2Fimage%2Fimage.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fimage.go?ref=e77dc3333330223d63e6732ab825aca89d5410f2",
      "patch": "@@ -3,7 +3,8 @@\n // Service object encloses Store and add common methods, this is the one consumer should use.\n package image\n \n-//go:generate sh -c \"mockery -inpkg -name Store -print > /tmp/mock.tmp && mv /tmp/mock.tmp image_mock.go\"\n+// NOTE: mockery should be installed globally and works with `go generate ./...`\n+//go:generate mockery --inpackage --name Store --filename image_mock.go\n \n import (\n \t\"bytes\"\n@@ -61,9 +62,6 @@ type StoreInfo struct {\n \tFirstStagingImageTS time.Time\n }\n \n-// To regenerate mock run from this directory:\n-// sh -c \"mockery -inpkg -name Store -print > /tmp/image-mock.tmp && mv /tmp/image-mock.tmp image_mock.go\"\n-\n // Store defines interface for saving and loading pictures.\n // Declares two-stage save with Commit. Save stores to staging area and Commit moves to the final location.\n // Two-stage commit scheme is used for not storing images which are uploaded but later never used in the comments,\n@@ -367,7 +365,7 @@ func Sha1Str(s string) string {\n // ID would look like: \"cached_images/<sha1-of-image-url-hostname>-<sha1-of-image-entire-url>\"\n // <sha1-of-image-url-hostname> - would allow us to identify all images from particular site if ever needed\n // <sha1-of-image-entire-url> - would allow us to avoid storing duplicates of the same image\n-//                              (as accurate as deduplication based on potentially mutable url can be)\n+// (as accurate as deduplication based on potentially mutable url can be)\n func CachedImgID(imgURL string) (string, error) {\n \tparsedURL, err := url.Parse(imgURL)\n \tif err != nil {"
    },
    {
      "sha": "d7f08205e8e2c1923d8f1ab49ad1b93d6edf40ba",
      "filename": "backend/app/store/image/image_mock.go",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark42/blob/e77dc3333330223d63e6732ab825aca89d5410f2/backend%2Fapp%2Fstore%2Fimage%2Fimage_mock.go",
      "raw_url": "https://github.com/umputun/remark42/raw/e77dc3333330223d63e6732ab825aca89d5410f2/backend%2Fapp%2Fstore%2Fimage%2Fimage_mock.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fimage_mock.go?ref=e77dc3333330223d63e6732ab825aca89d5410f2",
      "patch": "@@ -1,4 +1,4 @@\n-// Code generated by mockery v1.1.2. DO NOT EDIT.\n+// Code generated by mockery v2.14.0. DO NOT EDIT.\n \n package image\n \n@@ -113,3 +113,18 @@ func (_m *MockStore) Save(id string, img []byte) error {\n \n \treturn r0\n }\n+\n+type mockConstructorTestingTNewMockStore interface {\n+\tmock.TestingT\n+\tCleanup(func())\n+}\n+\n+// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.\n+func NewMockStore(t mockConstructorTestingTNewMockStore) *MockStore {\n+\tmock := &MockStore{}\n+\tmock.Mock.Test(t)\n+\n+\tt.Cleanup(func() { mock.AssertExpectations(t) })\n+\n+\treturn mock\n+}"
    }
  ]
}
