{
  "sha": "6cf2849e7009711b327c9cf7621cda249269dc64",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjZjZjI4NDllNzAwOTcxMWIzMjdjOWNmNzYyMWNkYTI0OTI2OWRjNjQ=",
  "commit": {
    "author": {
      "name": "Pavel Mineev",
      "email": "pavel@mineev.me",
      "date": "2021-04-08T08:22:51Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-04-09T16:07:12Z"
    },
    "message": "rewrite tests in recommended way and add more cases coverage",
    "tree": {
      "sha": "9845e47f189368ca543e30aaf09daecc25369a6d",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/9845e47f189368ca543e30aaf09daecc25369a6d"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/6cf2849e7009711b327c9cf7621cda249269dc64",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/6cf2849e7009711b327c9cf7621cda249269dc64",
  "html_url": "https://github.com/umputun/remark42/commit/6cf2849e7009711b327c9cf7621cda249269dc64",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/6cf2849e7009711b327c9cf7621cda249269dc64/comments",
  "author": {
    "login": "akellbl4",
    "id": 2330682,
    "node_id": "MDQ6VXNlcjIzMzA2ODI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2330682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/akellbl4",
    "html_url": "https://github.com/akellbl4",
    "followers_url": "https://api.github.com/users/akellbl4/followers",
    "following_url": "https://api.github.com/users/akellbl4/following{/other_user}",
    "gists_url": "https://api.github.com/users/akellbl4/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/akellbl4/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/akellbl4/subscriptions",
    "organizations_url": "https://api.github.com/users/akellbl4/orgs",
    "repos_url": "https://api.github.com/users/akellbl4/repos",
    "events_url": "https://api.github.com/users/akellbl4/events{/privacy}",
    "received_events_url": "https://api.github.com/users/akellbl4/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c9ce2bbf8cbdc18912419f79a65b7a976cc02ede",
      "url": "https://api.github.com/repos/umputun/remark42/commits/c9ce2bbf8cbdc18912419f79a65b7a976cc02ede",
      "html_url": "https://github.com/umputun/remark42/commit/c9ce2bbf8cbdc18912419f79a65b7a976cc02ede"
    }
  ],
  "stats": {
    "total": 147,
    "additions": 76,
    "deletions": 71
  },
  "files": [
    {
      "sha": "5a2d205eebd520949c1bedf85f342ef2196afe37",
      "filename": "frontend/app/components/auth/auth.spec.tsx",
      "status": "modified",
      "additions": 76,
      "deletions": 71,
      "changes": 147,
      "blob_url": "https://github.com/umputun/remark42/blob/6cf2849e7009711b327c9cf7621cda249269dc64/frontend/app/components/auth/auth.spec.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/6cf2849e7009711b327c9cf7621cda249269dc64/frontend/app/components/auth/auth.spec.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/auth/auth.spec.tsx?ref=6cf2849e7009711b327c9cf7621cda249269dc64",
      "patch": "@@ -2,12 +2,13 @@ import '@testing-library/jest-dom';\n import { h } from 'preact';\n import { fireEvent, render, waitFor } from '@testing-library/preact';\n \n-import { Provider, User } from 'common/types';\n+import { OAuthProvider, User } from 'common/types';\n import { StaticStore } from 'common/static-store';\n \n import Auth from './auth';\n import * as utils from './auth.utils';\n import * as api from './auth.api';\n+import { getProviderData } from './components/oauth.utils';\n \n jest.mock('react-redux', () => ({\n   useDispatch: () => jest.fn(),\n@@ -31,35 +32,35 @@ describe('<Auth/>', () => {\n     });\n \n     it('should close dropdown by click on button', () => {\n-      const { container } = render(<Auth />);\n+      const { container, getByText } = render(<Auth />);\n \n       expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n \n-      fireEvent.click(container.querySelector('.auth-button')!);\n+      fireEvent.click(getByText('Sign In'));\n       expect(container.querySelector('.auth-dropdown')).toBeInTheDocument();\n \n-      fireEvent.click(container.querySelector('.auth-button')!);\n+      fireEvent.click(getByText('Sign In'));\n       expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n     });\n \n     it('should close dropdown by click outside of it', () => {\n-      const { container } = render(<Auth />);\n+      const { container, getByText } = render(<Auth />);\n \n       expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n \n-      fireEvent.click(container.querySelector('.auth-button')!);\n+      fireEvent.click(getByText('Sign In'));\n       expect(container.querySelector('.auth-dropdown')).toBeInTheDocument();\n \n       fireEvent.click(document);\n       expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n     });\n \n     it('should close dropdown by message from parent', async () => {\n-      const { container } = render(<Auth />);\n+      const { container, getByText } = render(<Auth />);\n \n       expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n \n-      fireEvent.click(container.querySelector('.auth-button')!);\n+      fireEvent.click(getByText('Sign In'));\n       expect(container.querySelector('.auth-dropdown')).toBeInTheDocument();\n \n       window.postMessage('{\"clickOutside\": true}', '*');\n@@ -74,61 +75,66 @@ describe('<Auth/>', () => {\n     [['facebook', 'google', 'microsoft']],\n     [['facebook', 'google', 'microsoft', 'yandex']],\n     [['facebook', 'google', 'microsoft', 'yandex', 'twitter']],\n-  ] as [Provider[]][])('should renders with %j providers', (providers) => {\n+  ] as [OAuthProvider[]][])('should renders with %j providers', async (providers) => {\n     StaticStore.config.auth_providers = providers;\n \n-    const { container } = render(<Auth />);\n+    const { container, getByText, getByTitle, queryByPlaceholderText, queryByText } = render(<Auth />);\n \n-    expect(container.querySelector('.auth-dropdown')).toBeNull();\n+    expect(container.querySelector('.auth-dropdown')).not.toBeInTheDocument();\n \n-    fireEvent.click(container.querySelector('.auth-button')!);\n+    expect(getByText('Sign In')).toHaveClass('auth-button');\n+    fireEvent.click(getByText('Sign In'));\n     expect(container.querySelector('.auth-dropdown')).toBeInTheDocument();\n-    expect(container.querySelectorAll('.oauth-button')).toHaveLength(providers.length);\n-    expect(container.querySelector('[name=\"username\"]')).not.toBeInTheDocument();\n-    expect(container.querySelector('.auth-submit')).not.toBeInTheDocument();\n+    providers.forEach((p) => {\n+      const { name } = getProviderData(p, 'light');\n+      expect(getByTitle(`Sign In with ${name}`)).toBeInTheDocument();\n+    });\n+    expect(queryByPlaceholderText('Username')).not.toBeInTheDocument();\n+    expect(queryByText('Submit')).not.toBeInTheDocument();\n   });\n \n   it('should render email provider', () => {\n     StaticStore.config.auth_providers = ['email'];\n \n-    const { container } = render(<Auth />);\n+    const { getByText, getByPlaceholderText } = render(<Auth />);\n \n-    fireEvent.click(container.querySelector('.auth-button')!);\n-    expect(container.querySelector('.auth-dropdown')).toBeInTheDocument();\n-    expect(container.querySelector('.auth-form-title')?.innerHTML).toContain('email');\n-    expect(container.querySelector('[name=\"username\"]')).toBeInTheDocument();\n-    expect(container.querySelector('[name=\"email\"]')).toBeInTheDocument();\n-    expect(container.querySelector('.auth-submit')).toBeInTheDocument();\n+    fireEvent.click(getByText('Sign In'));\n+    expect(getByText('email')).toHaveClass('auth-form-title');\n+    expect(getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n+    expect(getByPlaceholderText('Email Address')).toHaveClass('auth-input-email');\n+    expect(getByText('Submit')).toHaveClass('auth-submit');\n   });\n \n   it('should render anonymous provider', () => {\n     StaticStore.config.auth_providers = ['anonymous'];\n \n-    const { container } = render(<Auth />);\n+    const { getByText, getByPlaceholderText } = render(<Auth />);\n \n-    fireEvent.click(container.querySelector('.auth-button')!);\n-    expect(container.querySelector('.auth-dropdown')).toBeInTheDocument();\n-    expect(container.querySelector('.auth-form-title')?.innerHTML).toContain('anonymous');\n-    expect(container.querySelector('[name=\"username\"]')).toBeInTheDocument();\n-    expect(container.querySelector('.auth-submit')).toBeInTheDocument();\n+    fireEvent.click(getByText('Sign In'));\n+    expect(getByText('anonymous')).toHaveClass('auth-form-title');\n+    expect(getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n+    expect(getByText('Submit')).toHaveClass('auth-submit');\n   });\n \n   it('should render tabs with two form providers', () => {\n     StaticStore.config.auth_providers = ['email', 'anonymous'];\n \n-    const { container } = render(<Auth />);\n-\n-    fireEvent.click(container.querySelector('.auth-button')!);\n-    expect(container.querySelector('.auth-dropdown')).toBeInTheDocument();\n-    expect(container.querySelector('[for=\"form-provider-anonymous\"]')).toBeInTheDocument();\n-    expect(container.querySelector('[for=\"form-provider-email\"]')).toBeInTheDocument();\n-    expect(container.querySelector('[name=\"username\"]')).toBeInTheDocument();\n-    expect(container.querySelector('.auth-submit')).toBeInTheDocument();\n-\n-    fireEvent.click(container.querySelector('[for=\"form-provider-email\"]')!);\n-    expect(container.querySelector('[name=\"username\"]')).toBeInTheDocument();\n-    expect(container.querySelector('[name=\"email\"]')).toBeInTheDocument();\n-    expect(container.querySelector('.auth-submit')).toBeInTheDocument();\n+    const { getByText, getByLabelText, getByPlaceholderText, getByDisplayValue } = render(<Auth />);\n+\n+    fireEvent.click(getByText('Sign In'));\n+    expect(getByDisplayValue('email')).toHaveAttribute('id', 'form-provider-email');\n+    expect(getByText('email')).toHaveAttribute('for', 'form-provider-email');\n+    expect(getByText('email')).toHaveClass('auth-tabs-item');\n+    expect(getByDisplayValue('anonymous')).toHaveAttribute('id', 'form-provider-anonymous');\n+    expect(getByText('anonym')).toHaveAttribute('for', 'form-provider-anonymous');\n+    expect(getByText('anonym')).toHaveClass('auth-tabs-item');\n+    expect(getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n+    expect(getByText('Submit')).toHaveClass('auth-submit');\n+\n+    fireEvent.click(getByLabelText('email'));\n+    expect(getByPlaceholderText('Username')).toHaveClass('auth-input-username');\n+    expect(getByPlaceholderText('Email Address')).toHaveClass('auth-input-email');\n+    expect(getByText('Submit')).toHaveClass('auth-submit');\n   });\n \n   it('should send email and then verify forms', async () => {\n@@ -137,27 +143,28 @@ describe('<Auth/>', () => {\n     jest.spyOn(api, 'verifyEmailSignin').mockImplementationOnce(async () => ({} as User));\n     jest.spyOn(utils, 'getTokenInvalidReason').mockImplementationOnce(() => null);\n \n-    const { container } = render(<Auth />);\n+    const { getByText, getByPlaceholderText, getByTitle, getByRole } = render(<Auth />);\n \n-    fireEvent.click(container.querySelector('.auth-button')!);\n-    fireEvent.change(container.querySelector('[name=\"username\"]')!, { target: { value: 'username' } });\n-    fireEvent.change(container.querySelector('[name=\"email\"]')!, {\n+    fireEvent.click(getByText('Sign In'));\n+    fireEvent.change(getByPlaceholderText('Username'), { target: { value: 'username' } });\n+    fireEvent.change(getByPlaceholderText('Email Address'), {\n       target: { value: 'email@email.com' },\n     });\n-    fireEvent.click(container.querySelector('.auth-submit')!);\n+    fireEvent.click(getByText('Submit'));\n \n-    expect(container.querySelector('.spinner')).toBeInTheDocument();\n+    expect(getByRole('presentation')).toHaveClass('spinner');\n     await waitFor(() => expect(api.emailSignin).toBeCalled());\n     expect(api.emailSignin).toBeCalledWith('email@email.com', 'username');\n \n-    expect(container.querySelector('.auth-back-button')).toBeInTheDocument();\n-    expect(container.querySelector('.auth-close-button')).toBeInTheDocument();\n-    expect(container.querySelector('[name=\"token\"]')).toBeInTheDocument();\n+    expect(getByText('Back')).toHaveClass('auth-back-button');\n+    expect(getByTitle('Close sign-in dropdown')).toHaveClass('auth-close-button');\n+    expect(getByPlaceholderText('Token')).toHaveClass('auth-token-textatea');\n \n-    fireEvent.change(container.querySelector('[name=\"token\"]')!, {\n+    fireEvent.change(getByPlaceholderText('Token'), {\n       target: { value: 'token' },\n     });\n-    fireEvent.click(container.querySelector('.auth-submit')!);\n+\n+    fireEvent.click(getByText('Submit'));\n \n     await waitFor(() => expect(api.verifyEmailSignin).toBeCalled());\n     expect(api.verifyEmailSignin).toBeCalledWith('token');\n@@ -167,43 +174,41 @@ describe('<Auth/>', () => {\n     StaticStore.config.auth_providers = ['email'];\n     jest.spyOn(api, 'emailSignin').mockImplementationOnce(async () => null);\n \n-    const { container, getByText } = render(<Auth />);\n+    const { getByText, getByTitle, getByPlaceholderText } = render(<Auth />);\n \n-    fireEvent.click(container.querySelector('.auth-button')!);\n-\n-    fireEvent.change(container.querySelector('[name=\"username\"]')!, { target: { value: 'username' } });\n-    fireEvent.change(container.querySelector('[name=\"email\"]')!, {\n+    fireEvent.click(getByText('Sign In'));\n+    fireEvent.change(getByPlaceholderText('Username'), { target: { value: 'username' } });\n+    fireEvent.change(getByPlaceholderText('Email Address'), {\n       target: { value: 'email@email.com' },\n     });\n-    fireEvent.click(container.querySelector('.auth-submit')!);\n+    fireEvent.click(getByText('Submit'));\n     await waitFor(() => expect(api.emailSignin).toBeCalled());\n \n-    expect(container.querySelector('.auth-back-button')).toBeInTheDocument();\n-    expect(container.querySelector('.auth-close-button')).toBeInTheDocument();\n-    expect(container.querySelector('[name=\"token\"]')).toBeInTheDocument();\n+    expect(getByText('Back')).toHaveClass('auth-back-button');\n+    expect(getByTitle('Close sign-in dropdown')).toHaveClass('auth-close-button');\n+    expect(getByPlaceholderText('Token')).toHaveClass('auth-token-textatea');\n \n-    fireEvent.change(container.querySelector('[name=\"token\"]')!, {\n-      target: { value: 'token' },\n-    });\n-    fireEvent.click(container.querySelector('.auth-submit')!);\n+    fireEvent.change(getByPlaceholderText('Token'), { target: { value: 'token' } });\n+    fireEvent.click(getByText('Submit'));\n     await waitFor(() => expect(utils.getTokenInvalidReason).toBeCalled());\n \n     expect(utils.getTokenInvalidReason).toBeCalledWith('token');\n \n     await waitFor(() => expect(getByText('Token is invalid')).toBeInTheDocument());\n-    expect(getByText('Token is invalid').getAttribute('class')).toContain('auth-error');\n+    expect(getByText('Token is invalid')).toHaveClass('auth-error');\n   });\n \n   it('should send anonym form', async () => {\n     StaticStore.config.auth_providers = ['anonymous'];\n     jest.spyOn(api, 'anonymousSignin').mockImplementationOnce(async () => ({} as User));\n \n-    const { container } = render(<Auth />);\n+    const { getByText, getByPlaceholderText, getByRole } = render(<Auth />);\n \n-    fireEvent.click(container.querySelector('.auth-button')!);\n-    fireEvent.change(container.querySelector('[name=\"username\"]')!, { target: { value: 'username' } });\n-    fireEvent.click(container.querySelector('.auth-submit')!);\n-    expect(container.querySelector('.spinner')).toBeInTheDocument();\n+    fireEvent.click(getByText('Sign In'));\n+    fireEvent.change(getByPlaceholderText('Username'), { target: { value: 'username' } });\n+    fireEvent.click(getByText('Submit'));\n+    expect(getByRole('presentation')).toHaveClass('spinner');\n+    expect(getByRole('presentation')).toHaveAttribute('aria-label', 'Loading...');\n     await waitFor(() => expect(api.anonymousSignin).toBeCalled());\n   });\n });"
    }
  ]
}
