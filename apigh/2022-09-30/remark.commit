{
  "sha": "2ecc80e18c2ae9f03a1eafe272ce0700e514e01d",
  "node_id": "C_kwDOBtgov9oAKDJlY2M4MGUxOGMyYWU5ZjAzYTFlYWZlMjcyY2UwNzAwZTUxNGUwMWQ",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2022-09-28T20:58:51Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2022-09-29T16:56:12Z"
    },
    "message": "fix RPC engine work with ListFlags method\n\nFixes the following conversion problem for BlockedUser:\n\n```\npanic: interface conversion: interface {} is map[string]interface {},\nnot store.BlockedUser [recovered]\n```\n\nResolves #1475.",
    "tree": {
      "sha": "711173062dcbe0fdc95f6cc2a8b8621efcf9f8b3",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/711173062dcbe0fdc95f6cc2a8b8621efcf9f8b3"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/2ecc80e18c2ae9f03a1eafe272ce0700e514e01d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/2ecc80e18c2ae9f03a1eafe272ce0700e514e01d",
  "html_url": "https://github.com/umputun/remark42/commit/2ecc80e18c2ae9f03a1eafe272ce0700e514e01d",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/2ecc80e18c2ae9f03a1eafe272ce0700e514e01d/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0728b2885665f5771295b5b376fc82f9a7e8b15a",
      "url": "https://api.github.com/repos/umputun/remark42/commits/0728b2885665f5771295b5b376fc82f9a7e8b15a",
      "html_url": "https://github.com/umputun/remark42/commit/0728b2885665f5771295b5b376fc82f9a7e8b15a"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 83,
    "deletions": 10
  },
  "files": [
    {
      "sha": "5e8f7efe1d3683ae68355f4ad958080e6b8fc2ad",
      "filename": "backend/_example/memory_store/server/data_test.go",
      "status": "modified",
      "additions": 43,
      "deletions": 6,
      "changes": 49,
      "blob_url": "https://github.com/umputun/remark42/blob/2ecc80e18c2ae9f03a1eafe272ce0700e514e01d/backend%2F_example%2Fmemory_store%2Fserver%2Fdata_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2ecc80e18c2ae9f03a1eafe272ce0700e514e01d/backend%2F_example%2Fmemory_store%2Fserver%2Fdata_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Fserver%2Fdata_test.go?ref=2ecc80e18c2ae9f03a1eafe272ce0700e514e01d",
      "patch": "@@ -198,25 +198,62 @@ func TestRPC_listFlagsHndl(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"123456\", id)\n \n-\tflagReq := engine.FlagRequest{\n+\t// verify user\n+\tverifyFlagReq := engine.FlagRequest{\n \t\tFlag:   engine.Verified,\n \t\tUserID: \"u1\",\n \t\tLocator: store.Locator{\n \t\t\tSiteID: \"test-site\",\n \t\t},\n \t}\n-\tflags, err := re.ListFlags(flagReq)\n+\tflags, err := re.ListFlags(verifyFlagReq)\n \trequire.NoError(t, err)\n-\tassert.Equal(t, []interface{}{}, flags)\n+\tassert.Empty(t, flags)\n \n-\tflagReq.Update = engine.FlagTrue\n-\tstatus, err := re.Flag(flagReq)\n+\tverifyFlagReq.Update = engine.FlagTrue\n+\tstatus, err := re.Flag(verifyFlagReq)\n \trequire.NoError(t, err)\n \tassert.Equal(t, true, status)\n \n-\tflags, err = re.ListFlags(flagReq)\n+\tflags, err = re.ListFlags(verifyFlagReq)\n \trequire.NoError(t, err)\n \tassert.Equal(t, []interface{}{\"u1\"}, flags)\n+\tverifiedUsers := make([]string, 0, len(flags))\n+\tfor _, v := range flags {\n+\t\tverifiedUsers = append(verifiedUsers, v.(string))\n+\t}\n+\tassert.Equal(t, []string{\"u1\"}, verifiedUsers)\n+\n+\t// block user\n+\tblockFlagReq := engine.FlagRequest{\n+\t\tFlag:   engine.Blocked,\n+\t\tUserID: \"u1\",\n+\t\tLocator: store.Locator{\n+\t\t\tSiteID: \"test-site\",\n+\t\t},\n+\t\tTTL: time.Hour,\n+\t}\n+\tflags, err = re.ListFlags(blockFlagReq)\n+\trequire.NoError(t, err)\n+\tassert.Empty(t, flags)\n+\n+\tblockFlagReq.Update = engine.FlagTrue\n+\tstatus, err = re.Flag(blockFlagReq)\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, true, status)\n+\n+\tflags, err = re.ListFlags(blockFlagReq)\n+\trequire.NoError(t, err)\n+\tassert.NotEmpty(t, flags)\n+\tblockedUsers := make([]store.BlockedUser, 0, len(flags))\n+\tfor _, v := range flags {\n+\t\tblockedUsers = append(blockedUsers, v.(store.BlockedUser))\n+\t}\n+\trequire.Equal(t, 1, len(blockedUsers))\n+\tblockedUserInfo := blockedUsers[0]\n+\tassert.Equal(t, \"u1\", blockedUserInfo.ID)\n+\tassert.True(t, blockedUserInfo.Until.After(time.Now().Add(time.Minute*59)), \"blocked duration is more than 59m away\")\n+\tassert.True(t, blockedUserInfo.Until.Before(time.Now().Add(time.Minute*61)), \"blocked duration is less than 61m away\")\n }\n \n func TestRPC_userDetailHndl(t *testing.T) {"
    },
    {
      "sha": "5a2cedec75494bc9543ee3831d8fa54a46dbdcc7",
      "filename": "backend/app/store/engine/remote.go",
      "status": "modified",
      "additions": 33,
      "deletions": 3,
      "changes": 36,
      "blob_url": "https://github.com/umputun/remark42/blob/2ecc80e18c2ae9f03a1eafe272ce0700e514e01d/backend%2Fapp%2Fstore%2Fengine%2Fremote.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2ecc80e18c2ae9f03a1eafe272ce0700e514e01d/backend%2Fapp%2Fstore%2Fengine%2Fremote.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fengine%2Fremote.go?ref=2ecc80e18c2ae9f03a1eafe272ce0700e514e01d",
      "patch": "@@ -71,14 +71,44 @@ func (r *RPC) Flag(req FlagRequest) (status bool, err error) {\n \treturn status, err\n }\n \n+func unmarshalString(data []byte) ([]interface{}, error) {\n+\tvar strings []string\n+\tif err := json.Unmarshal(data, &strings); err != nil {\n+\t\treturn nil, err\n+\t}\n+\tlist := make([]interface{}, 0, len(strings))\n+\tfor _, w := range strings {\n+\t\tlist = append(list, w)\n+\t}\n+\treturn list, nil\n+}\n+\n+func unmarshalBlockedUser(data []byte) ([]interface{}, error) {\n+\tvar blockedUsers []store.BlockedUser\n+\tif err := json.Unmarshal(data, &blockedUsers); err != nil {\n+\t\treturn nil, err\n+\t}\n+\tlist := make([]interface{}, 0, len(blockedUsers))\n+\tfor _, w := range blockedUsers {\n+\t\tlist = append(list, w)\n+\t}\n+\treturn list, nil\n+}\n+\n // ListFlags get list of flagged keys, like blocked & verified user\n-func (r *RPC) ListFlags(req FlagRequest) (list []interface{}, err error) {\n+func (r *RPC) ListFlags(req FlagRequest) ([]interface{}, error) {\n \tresp, err := r.Call(\"store.list_flags\", req)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\terr = json.Unmarshal(*resp.Result, &list)\n-\treturn list, err\n+\t// try []store.BlockedUser\n+\tlist, err := unmarshalBlockedUser(*resp.Result)\n+\tif err == nil {\n+\t\treturn list, nil\n+\t}\n+\n+\t// try []strings\n+\treturn unmarshalString(*resp.Result)\n }\n \n // UserDetail sets or gets single detail value, or gets all details for requested site."
    },
    {
      "sha": "fe0a10fd2bef5c022472d482db7bc9a39c31771b",
      "filename": "backend/app/store/engine/remote_test.go",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/2ecc80e18c2ae9f03a1eafe272ce0700e514e01d/backend%2Fapp%2Fstore%2Fengine%2Fremote_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2ecc80e18c2ae9f03a1eafe272ce0700e514e01d/backend%2Fapp%2Fstore%2Fengine%2Fremote_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fengine%2Fremote_test.go?ref=2ecc80e18c2ae9f03a1eafe272ce0700e514e01d",
      "patch": "@@ -134,7 +134,13 @@ func TestRemote_ListFlag(t *testing.T) {\n \tc := RPC{Client: jrpc.Client{API: ts.URL, Client: http.Client{}}}\n \tres, err := c.ListFlags(FlagRequest{Locator: store.Locator{SiteID: \"site_id\"}, Flag: Blocked})\n \tassert.NoError(t, err)\n-\tassert.Equal(t, []interface{}{map[string]interface{}{\"ID\": \"id1\"}, map[string]interface{}{\"ID\": \"id2\"}}, res)\n+\trequire.Equal(t, 2, len(res))\n+\tblockedUsers := make([]store.BlockedUser, 0, len(res))\n+\tfor _, v := range res {\n+\t\tblockedUsers = append(blockedUsers, v.(store.BlockedUser))\n+\t}\n+\tassert.Equal(t, 2, len(blockedUsers))\n+\tassert.Equal(t, []store.BlockedUser{{ID: \"id1\"}, {ID: \"id2\"}}, blockedUsers)\n }\n \n func TestRemote_UserDetail(t *testing.T) {"
    }
  ]
}
