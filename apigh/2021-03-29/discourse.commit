{
  "sha": "f0b2e77abb932f118878951fa75911db2d3a3013",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpmMGIyZTc3YWJiOTMyZjExODg3ODk1MWZhNzU5MTFkYjJkM2EzMDEz",
  "commit": {
    "author": {
      "name": "Jarek Radosz",
      "email": "jradosz@gmail.com",
      "date": "2021-03-29T11:58:03Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-03-29T11:58:03Z"
    },
    "message": "FIX: Isolate modal and global key-binds (#12477)\n\nThis change makes is so that when a time-picking modal (e.g.  \"Add bookmark\" modal) is visible, **all** global key bindings are paused.\r\n\r\n1. Fixes an issue where opening and closing a time-picking modal would break global single-key keybinds, so for example, <kbd>L</kbd> would no longer like posts, but <kbd>L</kbd> <kbd>L</kbd> would\r\n2. Fixes a related issue, where doing the above would also override custom keybinds provided by plugins (e.g. <kbd>L</kbd> shortcut that discourse-reactions uses)\r\n\r\nIncluded:\r\n\r\n* DEV: Reset Mousetraps instead of unbinding\r\n* FIX: Make unbind use unbind\r\n* DEV: Don't check for keyTrapper twice\r\n* DEV: Use an instance of Mousetrap\r\n* DEV: Remove an invalid `for` attribute (`set_reminder` doesn't exist)\r\n* DEV: Add ability to pause all KeyboardShortcuts\r\n* FIX: Pause all keybinds when in a time-picking modal\r\n* DEV: Move bookmark keybind resets to willDestroyElement\r\n* DEV: Fix shortcuts-related tests",
    "tree": {
      "sha": "1447b086ff976710172776bec9c6fa96813119f1",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/1447b086ff976710172776bec9c6fa96813119f1"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/f0b2e77abb932f118878951fa75911db2d3a3013",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgYcDLCRBK7hj4Ov3rIwAAdHIIABsa+5MZtRgsyv13VAEckJii\nLDkBsXkWwCnAmGv6PKzd1X6hY5d+Nzz3aBMBiApzxkxgPICayfoAmYQTsu4xQ1lY\nWa+FV6UCPp1B3NQIMCwRE6e3Q2Nd2BRfpUDylg09xYxPm3F/WmpuK1aSMC3hgJEk\nRfPJ5sDAaFhjVuvacWueKJqwDgDWVlS09ojIffwIw9z2uXwNap8sQzChMX4FOVq1\ncshI6b72U0luADXbY0IU/MgSch+MP5mBlBLTo1MbYBTU08AfDe57S5IOZNoZib+U\nrADs3N+DwXOH4M7FT/OemEkhNmXV7rpFUcKE+/0oN+1QA2mU1td5V+AXHp6ZxQY=\n=odeq\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 1447b086ff976710172776bec9c6fa96813119f1\nparent 8335c8dc1a30a2be87173e9d844b6890d1d00225\nauthor Jarek Radosz <jradosz@gmail.com> 1617019083 +0200\ncommitter GitHub <noreply@github.com> 1617019083 +0200\n\nFIX: Isolate modal and global key-binds (#12477)\n\nThis change makes is so that when a time-picking modal (e.g.  \"Add bookmark\" modal) is visible, **all** global key bindings are paused.\r\n\r\n1. Fixes an issue where opening and closing a time-picking modal would break global single-key keybinds, so for example, <kbd>L</kbd> would no longer like posts, but <kbd>L</kbd> <kbd>L</kbd> would\r\n2. Fixes a related issue, where doing the above would also override custom keybinds provided by plugins (e.g. <kbd>L</kbd> shortcut that discourse-reactions uses)\r\n\r\nIncluded:\r\n\r\n* DEV: Reset Mousetraps instead of unbinding\r\n* FIX: Make unbind use unbind\r\n* DEV: Don't check for keyTrapper twice\r\n* DEV: Use an instance of Mousetrap\r\n* DEV: Remove an invalid `for` attribute (`set_reminder` doesn't exist)\r\n* DEV: Add ability to pause all KeyboardShortcuts\r\n* FIX: Pause all keybinds when in a time-picking modal\r\n* DEV: Move bookmark keybind resets to willDestroyElement\r\n* DEV: Fix shortcuts-related tests"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/f0b2e77abb932f118878951fa75911db2d3a3013",
  "html_url": "https://github.com/discourse/discourse/commit/f0b2e77abb932f118878951fa75911db2d3a3013",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/f0b2e77abb932f118878951fa75911db2d3a3013/comments",
  "author": {
    "login": "CvX",
    "id": 66961,
    "node_id": "MDQ6VXNlcjY2OTYx",
    "avatar_url": "https://avatars.githubusercontent.com/u/66961?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/CvX",
    "html_url": "https://github.com/CvX",
    "followers_url": "https://api.github.com/users/CvX/followers",
    "following_url": "https://api.github.com/users/CvX/following{/other_user}",
    "gists_url": "https://api.github.com/users/CvX/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/CvX/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/CvX/subscriptions",
    "organizations_url": "https://api.github.com/users/CvX/orgs",
    "repos_url": "https://api.github.com/users/CvX/repos",
    "events_url": "https://api.github.com/users/CvX/events{/privacy}",
    "received_events_url": "https://api.github.com/users/CvX/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8335c8dc1a30a2be87173e9d844b6890d1d00225",
      "url": "https://api.github.com/repos/discourse/discourse/commits/8335c8dc1a30a2be87173e9d844b6890d1d00225",
      "html_url": "https://github.com/discourse/discourse/commit/8335c8dc1a30a2be87173e9d844b6890d1d00225"
    }
  ],
  "stats": {
    "total": 186,
    "additions": 94,
    "deletions": 92
  },
  "files": [
    {
      "sha": "ccd790e526bd529403fcafad4b43f4b4f461fe55",
      "filename": "app/assets/javascripts/discourse/app/components/bookmark.js",
      "status": "modified",
      "additions": 12,
      "deletions": 23,
      "changes": 35,
      "blob_url": "https://github.com/discourse/discourse/blob/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/components/bookmark.js",
      "raw_url": "https://github.com/discourse/discourse/raw/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/components/bookmark.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/bookmark.js?ref=f0b2e77abb932f118878951fa75911db2d3a3013",
      "patch": "@@ -7,14 +7,13 @@ import {\n   startOfDay,\n   tomorrow,\n } from \"discourse/lib/time-utils\";\n-\n import { AUTO_DELETE_PREFERENCES } from \"discourse/models/bookmark\";\n import Component from \"@ember/component\";\n import I18n from \"I18n\";\n import KeyboardShortcuts from \"discourse/lib/keyboard-shortcuts\";\n+import Mousetrap from \"mousetrap\";\n import { Promise } from \"rsvp\";\n import { TIME_SHORTCUT_TYPES } from \"discourse/lib/time-shortcut\";\n-\n import { action } from \"@ember/object\";\n import { ajax } from \"discourse/lib/ajax\";\n import bootbox from \"bootbox\";\n@@ -24,11 +23,6 @@ import { and, notEmpty } from \"@ember/object/computed\";\n import { popupAjaxError } from \"discourse/lib/ajax-error\";\n import { later } from \"@ember/runloop\";\n \n-// global shortcuts that interfere with these modal shortcuts, they are rebound when the\n-// modal is closed\n-//\n-// d deletePost\n-const GLOBAL_SHORTCUTS_TO_PAUSE = [\"d\"];\n const BOOKMARK_BINDINGS = {\n   enter: { handler: \"saveAndClose\" },\n   \"d d\": { handler: \"delete\" },\n@@ -127,26 +121,18 @@ export default Component.extend({\n   },\n \n   _bindKeyboardShortcuts() {\n-    KeyboardShortcuts.pause(GLOBAL_SHORTCUTS_TO_PAUSE);\n+    KeyboardShortcuts.pause();\n+\n+    this._mousetrap = new Mousetrap();\n     Object.keys(BOOKMARK_BINDINGS).forEach((shortcut) => {\n-      KeyboardShortcuts.addShortcut(shortcut, () => {\n+      this._mousetrap.bind(shortcut, () => {\n         let binding = BOOKMARK_BINDINGS[shortcut];\n-        if (binding.args) {\n-          return this.send(binding.handler, ...binding.args);\n-        }\n         this.send(binding.handler);\n+        return false;\n       });\n     });\n   },\n \n-  _unbindKeyboardShortcuts() {\n-    KeyboardShortcuts.unbind(BOOKMARK_BINDINGS);\n-  },\n-\n-  _restoreGlobalShortcuts() {\n-    KeyboardShortcuts.unpause(GLOBAL_SHORTCUTS_TO_PAUSE);\n-  },\n-\n   _loadPostLocalDates() {\n     let postEl = document.querySelector(\n       `[data-post-id=\"${this.model.postId}\"]`\n@@ -270,9 +256,6 @@ export default Component.extend({\n     this._closeWithoutSaving =\n       this._closeWithoutSaving || initiatedByCloseButton;\n \n-    this._unbindKeyboardShortcuts();\n-    this._restoreGlobalShortcuts();\n-\n     if (!this._closeWithoutSaving && !this._savingBookmarkManually) {\n       this._saveBookmark().catch((e) => this._handleSaveError(e));\n     }\n@@ -281,6 +264,12 @@ export default Component.extend({\n     }\n   },\n \n+  willDestroyElement() {\n+    this._super(...arguments);\n+    this._mousetrap.reset();\n+    KeyboardShortcuts.unpause();\n+  },\n+\n   showExistingReminderAt: notEmpty(\"model.reminderAt\"),\n   showDelete: notEmpty(\"model.id\"),\n   userHasTimezoneSet: notEmpty(\"userTimezone\"),"
    },
    {
      "sha": "a0c9d2dda0c01f1c7f626db6210b545f8a79b85d",
      "filename": "app/assets/javascripts/discourse/app/components/d-editor.js",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/discourse/discourse/blob/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/components/d-editor.js",
      "raw_url": "https://github.com/discourse/discourse/raw/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/components/d-editor.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/d-editor.js?ref=f0b2e77abb932f118878951fa75911db2d3a3013",
      "patch": "@@ -274,12 +274,14 @@ export default Component.extend({\n \n     scheduleOnce(\"afterRender\", this, this._readyNow);\n \n-    const mouseTrap = Mousetrap(this.element.querySelector(\".d-editor-input\"));\n+    this._mouseTrap = new Mousetrap(\n+      this.element.querySelector(\".d-editor-input\")\n+    );\n     const shortcuts = this.get(\"toolbar.shortcuts\");\n \n     Object.keys(shortcuts).forEach((sc) => {\n       const button = shortcuts[sc];\n-      mouseTrap.bind(sc, () => {\n+      this._mouseTrap.bind(sc, () => {\n         button.action(button);\n         return false;\n       });\n@@ -317,7 +319,6 @@ export default Component.extend({\n       this.appEvents.on(\"composer:insert-text\", this, \"_insertText\");\n       this.appEvents.on(\"composer:replace-text\", this, \"_replaceText\");\n     }\n-    this._mouseTrap = mouseTrap;\n \n     if (isTesting()) {\n       this.element.addEventListener(\"paste\", this.paste.bind(this));\n@@ -340,10 +341,7 @@ export default Component.extend({\n       this.appEvents.off(\"composer:replace-text\", this, \"_replaceText\");\n     }\n \n-    const mouseTrap = this._mouseTrap;\n-    Object.keys(this.get(\"toolbar.shortcuts\")).forEach((sc) =>\n-      mouseTrap.unbind(sc)\n-    );\n+    this._mouseTrap.reset();\n     $(this.element.querySelector(\".d-editor-preview\")).off(\"click.preview\");\n \n     if (isTesting()) {"
    },
    {
      "sha": "cb3ad395236d23d902c95727d68304e2e16097b7",
      "filename": "app/assets/javascripts/discourse/app/components/edit-topic-timer-form.js",
      "status": "modified",
      "additions": 23,
      "deletions": 8,
      "changes": 31,
      "blob_url": "https://github.com/discourse/discourse/blob/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/components/edit-topic-timer-form.js",
      "raw_url": "https://github.com/discourse/discourse/raw/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/components/edit-topic-timer-form.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/edit-topic-timer-form.js?ref=f0b2e77abb932f118878951fa75911db2d3a3013",
      "patch": "@@ -8,13 +8,15 @@ import {\n   PUBLISH_TO_CATEGORY_STATUS_TYPE,\n } from \"discourse/controllers/edit-topic-timer\";\n import { FORMAT } from \"select-kit/components/future-date-input-selector\";\n-import discourseComputed, { on } from \"discourse-common/utils/decorators\";\n+import discourseComputed from \"discourse-common/utils/decorators\";\n import { equal, or, readOnly } from \"@ember/object/computed\";\n import I18n from \"I18n\";\n import { action } from \"@ember/object\";\n import Component from \"@ember/component\";\n import { isEmpty } from \"@ember/utils\";\n import { now, startOfDay, thisWeekend } from \"discourse/lib/time-utils\";\n+import KeyboardShortcuts from \"discourse/lib/keyboard-shortcuts\";\n+import Mousetrap from \"mousetrap\";\n \n export default Component.extend({\n   statusType: readOnly(\"topicTimer.status_type\"),\n@@ -37,18 +39,31 @@ export default Component.extend({\n   ),\n   duration: null,\n \n-  @on(\"init\")\n-  preloadDuration() {\n+  init() {\n+    this._super(...arguments);\n+\n+    KeyboardShortcuts.pause();\n+    this._mousetrap = new Mousetrap();\n+\n+    this.set(\"duration\", this.initialDuration);\n+  },\n+\n+  get initialDuration() {\n     if (!this.useDuration || !this.topicTimer.duration_minutes) {\n-      return;\n-    }\n-    if (this.durationType === \"days\") {\n-      this.set(\"duration\", this.topicTimer.duration_minutes / 60 / 24);\n+      return null;\n+    } else if (this.durationType === \"days\") {\n+      return this.topicTimer.duration_minutes / 60 / 24;\n     } else {\n-      this.set(\"duration\", this.topicTimer.duration_minutes / 60);\n+      return this.topicTimer.duration_minutes / 60;\n     }\n   },\n \n+  willDestroyElement() {\n+    this._super(...arguments);\n+    this._mousetrap.reset();\n+    KeyboardShortcuts.unpause();\n+  },\n+\n   @discourseComputed(\"autoDeleteReplies\")\n   durationType(autoDeleteReplies) {\n     return autoDeleteReplies ? \"days\" : \"hours\";"
    },
    {
      "sha": "eac53665d6f5aee44d4561f4c3d341cb016107eb",
      "filename": "app/assets/javascripts/discourse/app/components/site-header.js",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/components/site-header.js",
      "raw_url": "https://github.com/discourse/discourse/raw/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/components/site-header.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/site-header.js?ref=f0b2e77abb932f118878951fa75911db2d3a3013",
      "patch": "@@ -251,8 +251,8 @@ const SiteHeaderComponent = MountWidget.extend(\n       }\n \n       const header = document.querySelector(\"header.d-header\");\n-      const mousetrap = new Mousetrap(header);\n-      mousetrap.bind([\"right\", \"left\"], (e) => {\n+      this._mousetrap = new Mousetrap(header);\n+      this._mousetrap.bind([\"right\", \"left\"], (e) => {\n         const activeTab = document.querySelector(\".glyphs .menu-link.active\");\n \n         if (activeTab) {\n@@ -267,8 +267,6 @@ const SiteHeaderComponent = MountWidget.extend(\n           });\n         }\n       });\n-\n-      this.set(\"_mousetrap\", mousetrap);\n     },\n \n     _cleanDom() {\n@@ -290,7 +288,7 @@ const SiteHeaderComponent = MountWidget.extend(\n       cancel(this._scheduledRemoveAnimate);\n       window.cancelAnimationFrame(this._scheduledMovingAnimation);\n \n-      this._mousetrap.unbind([\"right\", \"left\"]);\n+      this._mousetrap.reset();\n \n       document.removeEventListener(\"click\", this._dismissFirstNotification);\n     },"
    },
    {
      "sha": "e35e3a33a37d5732d86bc6eb5b98e5ffef610a8e",
      "filename": "app/assets/javascripts/discourse/app/components/time-shortcut-picker.js",
      "status": "modified",
      "additions": 6,
      "deletions": 19,
      "changes": 25,
      "blob_url": "https://github.com/discourse/discourse/blob/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/components/time-shortcut-picker.js",
      "raw_url": "https://github.com/discourse/discourse/raw/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/components/time-shortcut-picker.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/time-shortcut-picker.js?ref=f0b2e77abb932f118878951fa75911db2d3a3013",
      "patch": "@@ -16,18 +16,9 @@ import discourseComputed, {\n \n import Component from \"@ember/component\";\n import I18n from \"I18n\";\n-import KeyboardShortcuts from \"discourse/lib/keyboard-shortcuts\";\n import { action } from \"@ember/object\";\n import { and, equal } from \"@ember/object/computed\";\n \n-// global shortcuts that interfere with these modal shortcuts, they are rebound when the\n-// component is destroyed\n-//\n-// c createTopic\n-// r replyToPost\n-// l toggle like\n-// t replyAsNewTopic\n-const GLOBAL_SHORTCUTS_TO_PAUSE = [\"c\", \"r\", \"l\", \"t\"];\n const BINDINGS = {\n   \"l t\": {\n     handler: \"selectShortcut\",\n@@ -113,10 +104,9 @@ export default Component.extend({\n     }\n   },\n \n-  @on(\"willDestroyElement\")\n-  _resetKeyboardShortcuts() {\n-    KeyboardShortcuts.unbind(BINDINGS);\n-    KeyboardShortcuts.unpause(GLOBAL_SHORTCUTS_TO_PAUSE);\n+  willDestroyElement() {\n+    this._super(...arguments);\n+    this.mousetrap.unbind(Object.keys(BINDINGS));\n   },\n \n   parsePrefilledDatetime() {\n@@ -157,14 +147,11 @@ export default Component.extend({\n   },\n \n   _bindKeyboardShortcuts() {\n-    KeyboardShortcuts.pause(GLOBAL_SHORTCUTS_TO_PAUSE);\n     Object.keys(BINDINGS).forEach((shortcut) => {\n-      KeyboardShortcuts.addShortcut(shortcut, () => {\n+      this.mousetrap.bind(shortcut, () => {\n         let binding = BINDINGS[shortcut];\n-        if (binding.args) {\n-          return this.send(binding.handler, ...binding.args);\n-        }\n-        this.send(binding.handler);\n+        this.send(binding.handler, ...binding.args);\n+        return false;\n       });\n     });\n   },"
    },
    {
      "sha": "dbe5dbb68537d3235864b8dbfddeb69e4b64ba8c",
      "filename": "app/assets/javascripts/discourse/app/lib/keyboard-shortcuts.js",
      "status": "modified",
      "additions": 20,
      "deletions": 11,
      "changes": 31,
      "blob_url": "https://github.com/discourse/discourse/blob/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/lib/keyboard-shortcuts.js",
      "raw_url": "https://github.com/discourse/discourse/raw/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/lib/keyboard-shortcuts.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/lib/keyboard-shortcuts.js?ref=f0b2e77abb932f118878951fa75911db2d3a3013",
      "patch": "@@ -100,7 +100,7 @@ function preventKeyboardEvent(event) {\n \n export default {\n   init(keyTrapper, container) {\n-    this.keyTrapper = keyTrapper;\n+    this.keyTrapper = new keyTrapper();\n     this.container = container;\n     this._stopCallback();\n \n@@ -168,6 +168,12 @@ export default {\n     if (this.isTornDown()) {\n       return;\n     }\n+\n+    if (!combinations) {\n+      this.keyTrapper.paused = true;\n+      return;\n+    }\n+\n     combinations.forEach((combo) => this.keyTrapper.unbind(combo));\n   },\n \n@@ -176,10 +182,12 @@ export default {\n     if (this.isTornDown()) {\n       return;\n     }\n-    // if the keytrapper has already been torn down this will error\n-    if (this.keyTrapper == null) {\n+\n+    if (!combinations) {\n+      this.keyTrapper.paused = false;\n       return;\n     }\n+\n     combinations.forEach((combo) => this.bindKey(combo));\n   },\n \n@@ -210,7 +218,7 @@ export default {\n   //   'c': createTopic\n   // }\n   unbind(combinations) {\n-    this.pause(Object.keys(combinations));\n+    Object.keys(combinations).forEach((combo) => this.keyTrapper.unbind(combo));\n   },\n \n   toggleBookmark(event) {\n@@ -758,20 +766,21 @@ export default {\n   },\n \n   _stopCallback() {\n-    const oldStopCallback = this.keyTrapper.prototype.stopCallback;\n+    const prototype = Object.getPrototypeOf(this.keyTrapper);\n+    const oldStopCallback = prototype.stopCallback;\n+\n+    prototype.stopCallback = function (e, element, combo, sequence) {\n+      if (this.paused) {\n+        return true;\n+      }\n \n-    this.keyTrapper.prototype.stopCallback = function (\n-      e,\n-      element,\n-      combo,\n-      sequence\n-    ) {\n       if (\n         (combo === \"ctrl+f\" || combo === \"command+f\") &&\n         element.id === \"search-term\"\n       ) {\n         return false;\n       }\n+\n       return oldStopCallback.call(this, e, element, combo, sequence);\n     };\n   },"
    },
    {
      "sha": "f9748900680e95b7b17d482b6ae6bb13501379b7",
      "filename": "app/assets/javascripts/discourse/app/templates/components/bookmark.hbs",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/templates/components/bookmark.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/templates/components/bookmark.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/templates/components/bookmark.hbs?ref=f0b2e77abb932f118878951fa75911db2d3a3013",
      "patch": "@@ -30,12 +30,18 @@\n   {{/if}}\n \n   <div class=\"control-group\">\n-    <label class=\"control-label\" for=\"set_reminder\">\n+    <label class=\"control-label\">\n       {{i18n \"post.bookmarks.set_reminder\"}}\n     </label>\n \n     {{#if userHasTimezoneSet}}\n-      {{time-shortcut-picker prefilledDatetime=prefilledDatetime onTimeSelected=(action \"onTimeSelected\") customOptions=customTimeShortcutOptions additionalOptionsToShow=additionalTimeShortcutOptions}}\n+      {{time-shortcut-picker\n+        prefilledDatetime=prefilledDatetime\n+        onTimeSelected=(action \"onTimeSelected\")\n+        customOptions=customTimeShortcutOptions\n+        additionalOptionsToShow=additionalTimeShortcutOptions\n+        mousetrap=_mousetrap\n+      }}\n     {{else}}\n       <div class=\"alert alert-info\">{{html-safe (i18n \"bookmarks.no_timezone\" basePath=(base-path))}}</div>\n     {{/if}}"
    },
    {
      "sha": "f2b4aca37cd3d6d912dadf87954545170c4c1ea9",
      "filename": "app/assets/javascripts/discourse/app/templates/components/edit-topic-timer-form.hbs",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/templates/components/edit-topic-timer-form.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/app/templates/components/edit-topic-timer-form.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/templates/components/edit-topic-timer-form.hbs?ref=f0b2e77abb932f118878951fa75911db2d3a3013",
      "patch": "@@ -19,7 +19,13 @@\n   {{/if}}\n   {{#if showFutureDateInput}}\n     <label class=\"control-label\">{{i18n \"topic.topic_status_update.when\"}}</label>\n-    {{time-shortcut-picker prefilledDatetime=topicTimer.execute_at onTimeSelected=onTimeSelected customOptions=customTimeShortcutOptions hiddenOptions=hiddenTimeShortcutOptions}}\n+    {{time-shortcut-picker\n+      prefilledDatetime=topicTimer.execute_at\n+      onTimeSelected=onTimeSelected\n+      customOptions=customTimeShortcutOptions\n+      hiddenOptions=hiddenTimeShortcutOptions\n+      mousetrap=_mousetrap\n+    }}\n   {{/if}}\n   {{#if useDuration}}\n     <div class=\"controls\">\n@@ -45,4 +51,3 @@\n     </div>\n   {{/if}}\n </form>\n-"
    },
    {
      "sha": "daf77fffdeade5f7e99ceac274f480df290d566c",
      "filename": "app/assets/javascripts/discourse/tests/acceptance/bookmarks-test.js",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/tests/acceptance/bookmarks-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/tests/acceptance/bookmarks-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/acceptance/bookmarks-test.js?ref=f0b2e77abb932f118878951fa75911db2d3a3013",
      "patch": "@@ -4,12 +4,11 @@ import {\n   loggedInUser,\n   queryAll,\n } from \"discourse/tests/helpers/qunit-helpers\";\n-import { click, fillIn, getApplication, visit } from \"@ember/test-helpers\";\n+import { click, fillIn, visit } from \"@ember/test-helpers\";\n import I18n from \"I18n\";\n import selectKit from \"discourse/tests/helpers/select-kit-helper\";\n import { test } from \"qunit\";\n import topicFixtures from \"discourse/tests/fixtures/topic\";\n-import KeyboardShortcutInitializer from \"discourse/initializers/keyboard-shortcuts\";\n \n async function openBookmarkModal(postNumber = 1) {\n   if (exists(`#post_${postNumber} button.show-more-actions`)) {\n@@ -27,7 +26,6 @@ acceptance(\"Bookmarking\", function (needs) {\n   let steps = [];\n \n   needs.hooks.beforeEach(function () {\n-    KeyboardShortcutInitializer.initialize(getApplication());\n     steps = [];\n   });\n "
    },
    {
      "sha": "b2831ec7d00843d44e9299ef225c3a845d6ba85d",
      "filename": "app/assets/javascripts/discourse/tests/acceptance/plugin-keyboard-shortcut-test.js",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/discourse/discourse/blob/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/tests/acceptance/plugin-keyboard-shortcut-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/tests/acceptance/plugin-keyboard-shortcut-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/acceptance/plugin-keyboard-shortcut-test.js?ref=f0b2e77abb932f118878951fa75911db2d3a3013",
      "patch": "@@ -1,5 +1,4 @@\n-import { getApplication, triggerKeyEvent, visit } from \"@ember/test-helpers\";\n-import KeyboardShortcutInitializer from \"discourse/initializers/keyboard-shortcuts\";\n+import { triggerKeyEvent, visit } from \"@ember/test-helpers\";\n import KeyboardShortcuts from \"discourse/lib/keyboard-shortcuts\";\n import { acceptance } from \"discourse/tests/helpers/qunit-helpers\";\n import sinon from \"sinon\";\n@@ -8,10 +7,11 @@ import { withPluginApi } from \"discourse/lib/plugin-api\";\n \n acceptance(\"Plugin Keyboard Shortcuts - Logged In\", function (needs) {\n   needs.user();\n-  needs.hooks.beforeEach(function () {\n-    KeyboardShortcutInitializer.initialize(getApplication());\n-  });\n+\n   test(\"a plugin can add a keyboard shortcut\", async function (assert) {\n+    // Initialize the app (required in the legacy testing env)\n+    await visit(\"/\");\n+\n     withPluginApi(\"0.8.38\", (api) => {\n       api.addKeyboardShortcut(\"]\", () => {\n         $(\"#qunit-fixture\").html(\n@@ -30,11 +30,11 @@ acceptance(\"Plugin Keyboard Shortcuts - Logged In\", function (needs) {\n   });\n });\n \n-acceptance(\"Plugin Keyboard Shortcuts - Anonymous\", function (needs) {\n-  needs.hooks.beforeEach(function () {\n-    KeyboardShortcutInitializer.initialize(getApplication());\n-  });\n+acceptance(\"Plugin Keyboard Shortcuts - Anonymous\", function () {\n   test(\"a plugin can add a keyboard shortcut with an option\", async function (assert) {\n+    // Initialize the app (required in the legacy testing env)\n+    await visit(\"/\");\n+\n     let spy = sinon.spy(KeyboardShortcuts, \"_bindToPath\");\n     withPluginApi(\"0.8.38\", (api) => {\n       api.addKeyboardShortcut(\"]\", () => {}, {"
    },
    {
      "sha": "b7ac8761a124fdb26a8a88b55279abf54650cd00",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/bookmark-test.js",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/discourse/discourse/blob/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/tests/integration/components/bookmark-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/f0b2e77abb932f118878951fa75911db2d3a3013/app/assets/javascripts/discourse/tests/integration/components/bookmark-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/bookmark-test.js?ref=f0b2e77abb932f118878951fa75911db2d3a3013",
      "patch": "@@ -6,8 +6,6 @@ import {\n   fakeTime,\n   query,\n } from \"discourse/tests/helpers/qunit-helpers\";\n-import KeyboardShortcutInitializer from \"discourse/initializers/keyboard-shortcuts\";\n-import { getApplication } from \"@ember/test-helpers\";\n import sinon from \"sinon\";\n \n let clock = null;\n@@ -23,7 +21,6 @@ discourseModule(\"Integration | Component | bookmark\", function (hooks) {\n     '{{bookmark model=model afterSave=afterSave afterDelete=afterDelete onCloseWithoutSaving=onCloseWithoutSaving registerOnCloseHandler=(action \"registerOnCloseHandler\") closeModal=(action \"closeModal\")}}';\n \n   hooks.beforeEach(function () {\n-    KeyboardShortcutInitializer.initialize(getApplication());\n     this.actions.registerOnCloseHandler = () => {};\n     this.actions.closeModal = () => {};\n     this.setProperties({"
    }
  ]
}
