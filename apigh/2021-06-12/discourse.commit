{
  "sha": "178b294a629cb7fa6970c45be07c71d5305910a9",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODoxNzhiMjk0YTYyOWNiN2ZhNjk3MGM0NWJlMDdjNzFkNTMwNTkxMGE5",
  "commit": {
    "author": {
      "name": "Andrei Prigorshnev",
      "email": "a.prigorshnev@gmail.com",
      "date": "2021-06-11T09:51:27Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-06-11T09:51:27Z"
    },
    "message": "FIX: flaky javascript tests with fake timers (#13235)\n\nThe problem was happening in component integration tests on the rendering stage, sometimes the rendering would never finish.\r\n\r\nUsing time moments in the future when faking time solves the problem. Unfortunately, I don't know why exactly it helps. It was just a lucky guess after some hours I spent trying to figure out what's going on. But I've done a lot of testings, so looks like it really works. I'll be monitoring builds for some time after merging this anyway.\r\n\r\nUnit tests seem to work alright with moments in the past. And we don't fake time in acceptance tests at the moment but I guess they would very likely be flaky with time moments from the past since they also do rendering.\r\n\r\nI'm actually thinking of moving all fake time moments to the future (including moments in unit tests) to decrease the chances of flakiness. But I don't want to do everything in one PR, because I can accidentally introduce new flakiness.\r\n\r\nA pretty easy way of picking time moments in the future for tests is to use the 2100 year. It has the same calendar as 2021. If a day is Monday in 2021 it's Monday in 2100 too.",
    "tree": {
      "sha": "d75b75db3eb559c283f8dc6e22a4a413dc513a05",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/d75b75db3eb559c283f8dc6e22a4a413dc513a05"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/178b294a629cb7fa6970c45be07c71d5305910a9",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwzIfCRBK7hj4Ov3rIwAAyVgIADYqfn5OoIHLfQLmbdzHekdz\now6eaO4penw5+TfA5cQZ3sy6fQzLhZebaUIMTGEw+7gwFLGb2GpzOhevSKGpLfyQ\n6MSqB9S3+vbPCartOqTWEGB5QVBU5P1Wh+bA3/fq/VjcDu053tmzb2/nQileYZVb\nT24QS1XwNzpWnH1TTyFtNThN0nWmAue0CHzulA3oTIOLH3w2SFePg9KjV62QR73q\nCZeo6BINt6RVDiUwoY2QcKWReHWRYLo1wNEkvvX7UogyX0Sx1OYjJSwwshxjr3BP\nl9bcydA4gNgw57yqzyW4etPpXt2pOgOB0j6khujYIsWXmIFL/IToJve8vjT9iqE=\n=TAu3\n-----END PGP SIGNATURE-----\n",
      "payload": "tree d75b75db3eb559c283f8dc6e22a4a413dc513a05\nparent cd6ab7bdd78d1709f55d9fd0938d59c4660e1767\nauthor Andrei Prigorshnev <a.prigorshnev@gmail.com> 1623405087 +0400\ncommitter GitHub <noreply@github.com> 1623405087 +0400\n\nFIX: flaky javascript tests with fake timers (#13235)\n\nThe problem was happening in component integration tests on the rendering stage, sometimes the rendering would never finish.\r\n\r\nUsing time moments in the future when faking time solves the problem. Unfortunately, I don't know why exactly it helps. It was just a lucky guess after some hours I spent trying to figure out what's going on. But I've done a lot of testings, so looks like it really works. I'll be monitoring builds for some time after merging this anyway.\r\n\r\nUnit tests seem to work alright with moments in the past. And we don't fake time in acceptance tests at the moment but I guess they would very likely be flaky with time moments from the past since they also do rendering.\r\n\r\nI'm actually thinking of moving all fake time moments to the future (including moments in unit tests) to decrease the chances of flakiness. But I don't want to do everything in one PR, because I can accidentally introduce new flakiness.\r\n\r\nA pretty easy way of picking time moments in the future for tests is to use the 2100 year. It has the same calendar as 2021. If a day is Monday in 2021 it's Monday in 2100 too."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/178b294a629cb7fa6970c45be07c71d5305910a9",
  "html_url": "https://github.com/discourse/discourse/commit/178b294a629cb7fa6970c45be07c71d5305910a9",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/178b294a629cb7fa6970c45be07c71d5305910a9/comments",
  "author": {
    "login": "AndrewPrigorshnev",
    "id": 1274517,
    "node_id": "MDQ6VXNlcjEyNzQ1MTc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1274517?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AndrewPrigorshnev",
    "html_url": "https://github.com/AndrewPrigorshnev",
    "followers_url": "https://api.github.com/users/AndrewPrigorshnev/followers",
    "following_url": "https://api.github.com/users/AndrewPrigorshnev/following{/other_user}",
    "gists_url": "https://api.github.com/users/AndrewPrigorshnev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AndrewPrigorshnev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AndrewPrigorshnev/subscriptions",
    "organizations_url": "https://api.github.com/users/AndrewPrigorshnev/orgs",
    "repos_url": "https://api.github.com/users/AndrewPrigorshnev/repos",
    "events_url": "https://api.github.com/users/AndrewPrigorshnev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AndrewPrigorshnev/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cd6ab7bdd78d1709f55d9fd0938d59c4660e1767",
      "url": "https://api.github.com/repos/discourse/discourse/commits/cd6ab7bdd78d1709f55d9fd0938d59c4660e1767",
      "html_url": "https://github.com/discourse/discourse/commit/cd6ab7bdd78d1709f55d9fd0938d59c4660e1767"
    }
  ],
  "stats": {
    "total": 191,
    "additions": 100,
    "deletions": 91
  },
  "files": [
    {
      "sha": "6c7ae49050ecf3a85787f8ab885a7e28ee5603d6",
      "filename": "app/assets/javascripts/discourse/tests/helpers/qunit-helpers.js",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/178b294a629cb7fa6970c45be07c71d5305910a9/app/assets/javascripts/discourse/tests/helpers/qunit-helpers.js",
      "raw_url": "https://github.com/discourse/discourse/raw/178b294a629cb7fa6970c45be07c71d5305910a9/app/assets/javascripts/discourse/tests/helpers/qunit-helpers.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/helpers/qunit-helpers.js?ref=178b294a629cb7fa6970c45be07c71d5305910a9",
      "patch": "@@ -76,6 +76,15 @@ export function fakeTime(timeString, timezone = null, advanceTime = false) {\n   });\n }\n \n+export function withFrozenTime(timeString, timezone, callback) {\n+  const clock = fakeTime(timeString, timezone, false);\n+  try {\n+    callback();\n+  } finally {\n+    clock.restore();\n+  }\n+}\n+\n let _pretenderCallbacks = {};\n \n export function resetSite(siteSettings, extras) {"
    },
    {
      "sha": "ba6d71d3435ac5cca8950847e9300e35fa56fa7b",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/bookmark-test.js",
      "status": "modified",
      "additions": 26,
      "deletions": 24,
      "changes": 50,
      "blob_url": "https://github.com/discourse/discourse/blob/178b294a629cb7fa6970c45be07c71d5305910a9/app/assets/javascripts/discourse/tests/integration/components/bookmark-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/178b294a629cb7fa6970c45be07c71d5305910a9/app/assets/javascripts/discourse/tests/integration/components/bookmark-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/bookmark-test.js?ref=178b294a629cb7fa6970c45be07c71d5305910a9",
      "patch": "@@ -6,13 +6,6 @@ import {\n   fakeTime,\n   query,\n } from \"discourse/tests/helpers/qunit-helpers\";\n-import sinon from \"sinon\";\n-\n-let clock = null;\n-\n-function mockMomentTz(dateString, timezone) {\n-  clock = fakeTime(dateString, timezone, true);\n-}\n \n discourseModule(\"Integration | Component | bookmark\", function (hooks) {\n   setupRenderingTest(hooks);\n@@ -32,18 +25,17 @@ discourseModule(\"Integration | Component | bookmark\", function (hooks) {\n   });\n \n   hooks.afterEach(function () {\n-    if (clock) {\n-      clock.restore();\n+    if (this.clock) {\n+      this.clock.restore();\n     }\n-    sinon.restore();\n   });\n \n   componentTest(\"show later this week option if today is < Thursday\", {\n     template,\n-    skip: true,\n \n     beforeEach() {\n-      mockMomentTz(\"2019-12-10T08:00:00\", this.currentUser._timezone);\n+      const monday = \"2100-06-07T08:00:00\";\n+      this.clock = fakeTime(monday, this.currentUser._timezone, true);\n     },\n \n     test(assert) {\n@@ -55,10 +47,10 @@ discourseModule(\"Integration | Component | bookmark\", function (hooks) {\n     \"does not show later this week option if today is >= Thursday\",\n     {\n       template,\n-      skip: true,\n \n       beforeEach() {\n-        mockMomentTz(\"2019-12-13T08:00:00\", this.currentUser._timezone);\n+        const thursday = \"2100-06-10T08:00:00\";\n+        this.clock = fakeTime(thursday, this.currentUser._timezone, true);\n       },\n \n       test(assert) {\n@@ -72,10 +64,13 @@ discourseModule(\"Integration | Component | bookmark\", function (hooks) {\n \n   componentTest(\"later today does not show if later today is tomorrow\", {\n     template,\n-    skip: true,\n \n     beforeEach() {\n-      mockMomentTz(\"2019-12-11T22:00:00\", this.currentUser._timezone);\n+      this.clock = fakeTime(\n+        \"2100-12-11T22:00:00\",\n+        this.currentUser._timezone,\n+        true\n+      );\n     },\n \n     test(assert) {\n@@ -88,10 +83,13 @@ discourseModule(\"Integration | Component | bookmark\", function (hooks) {\n \n   componentTest(\"later today shows if it is after 5pm but before 6pm\", {\n     template,\n-    skip: true,\n \n     beforeEach() {\n-      mockMomentTz(\"2019-12-11T14:30:00\", this.currentUser._timezone);\n+      this.clock = fakeTime(\n+        \"2100-12-11T14:30:00\",\n+        this.currentUser._timezone,\n+        true\n+      );\n     },\n \n     test(assert) {\n@@ -101,10 +99,13 @@ discourseModule(\"Integration | Component | bookmark\", function (hooks) {\n \n   componentTest(\"later today does not show if it is after 5pm\", {\n     template,\n-    skip: true,\n \n     beforeEach() {\n-      mockMomentTz(\"2019-12-11T17:00:00\", this.currentUser._timezone);\n+      this.clock = fakeTime(\n+        \"2100-12-11T17:00:00\",\n+        this.currentUser._timezone,\n+        true\n+      );\n     },\n \n     test(assert) {\n@@ -117,10 +118,13 @@ discourseModule(\"Integration | Component | bookmark\", function (hooks) {\n \n   componentTest(\"later today does show if it is before the end of the day\", {\n     template,\n-    skip: true,\n \n     beforeEach() {\n-      mockMomentTz(\"2019-12-11T13:00:00\", this.currentUser._timezone);\n+      this.clock = fakeTime(\n+        \"2100-12-11T13:00:00\",\n+        this.currentUser._timezone,\n+        true\n+      );\n     },\n \n     test(assert) {\n@@ -130,7 +134,6 @@ discourseModule(\"Integration | Component | bookmark\", function (hooks) {\n \n   componentTest(\"prefills the custom reminder type date and time\", {\n     template,\n-    skip: true,\n \n     beforeEach() {\n       let name = \"test\";\n@@ -147,7 +150,6 @@ discourseModule(\"Integration | Component | bookmark\", function (hooks) {\n \n   componentTest(\"defaults to 08:00 for custom time\", {\n     template,\n-    skip: true,\n \n     async test(assert) {\n       await click(\"#tap_tile_custom\");"
    },
    {
      "sha": "344463e9308a96b3ec2a1a74cda44fc3f311bb53",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/select-kit/future-date-input-selector-test.js",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/discourse/discourse/blob/178b294a629cb7fa6970c45be07c71d5305910a9/app/assets/javascripts/discourse/tests/integration/components/select-kit/future-date-input-selector-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/178b294a629cb7fa6970c45be07c71d5305910a9/app/assets/javascripts/discourse/tests/integration/components/select-kit/future-date-input-selector-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/select-kit/future-date-input-selector-test.js?ref=178b294a629cb7fa6970c45be07c71d5305910a9",
      "patch": "@@ -17,17 +17,20 @@ discourseModule(\n \n     hooks.beforeEach(function () {\n       this.set(\"subject\", selectKit());\n-      this.clock = fakeTime(\"2021-05-03T08:00:00\", \"UTC\", true); // Monday\n     });\n \n     hooks.afterEach(function () {\n       this.clock.restore();\n     });\n \n     componentTest(\"shows default options\", {\n-      skip: true,\n       template: hbs`{{future-date-input-selector}}`,\n \n+      beforeEach() {\n+        const monday = fakeTime(\"2100-06-07T08:00:00\", \"UTC\", true);\n+        this.clock = monday;\n+      },\n+\n       async test(assert) {\n         await this.subject.expand();\n \n@@ -48,11 +51,11 @@ discourseModule(\n     });\n \n     componentTest(\"doesn't show 'Next Week' on Sundays\", {\n-      skip: true,\n       template: hbs`{{future-date-input-selector}}`,\n \n       beforeEach() {\n-        this.clock = fakeTime(\"2021-05-02T08:00:00\", \"UTC\", true); // Sunday\n+        const sunday = fakeTime(\"2100-06-13T08:00:00\", \"UTC\", true);\n+        this.clock = sunday;\n       },\n \n       async test(assert) {"
    },
    {
      "sha": "68c83e398a124bbddbdfb7a90ea18a334c811e2d",
      "filename": "app/assets/javascripts/discourse/tests/unit/lib/bookmark-test.js",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/178b294a629cb7fa6970c45be07c71d5305910a9/app/assets/javascripts/discourse/tests/unit/lib/bookmark-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/178b294a629cb7fa6970c45be07c71d5305910a9/app/assets/javascripts/discourse/tests/unit/lib/bookmark-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/lib/bookmark-test.js?ref=178b294a629cb7fa6970c45be07c71d5305910a9",
      "patch": "@@ -1,15 +1,14 @@\n import { module, test } from \"qunit\";\n import { fakeTime } from \"discourse/tests/helpers/qunit-helpers\";\n import { formattedReminderTime } from \"discourse/lib/bookmark\";\n-import sinon from \"sinon\";\n \n module(\"Unit | Utility | bookmark\", function (hooks) {\n   hooks.beforeEach(function () {\n-    fakeTime(\"2020-04-11 08:00:00\", \"Australia/Brisbane\");\n+    this.clock = fakeTime(\"2020-04-11 08:00:00\", \"Australia/Brisbane\");\n   });\n \n   hooks.afterEach(function () {\n-    sinon.restore();\n+    this.clock.restore();\n   });\n \n   test(\"formattedReminderTime works when the reminder time is tomorrow\", function (assert) {"
    },
    {
      "sha": "6cfca1c0439f6b3937171c517f0a1e89f62a781e",
      "filename": "app/assets/javascripts/discourse/tests/unit/lib/time-utils-test.js",
      "status": "modified",
      "additions": 56,
      "deletions": 60,
      "changes": 116,
      "blob_url": "https://github.com/discourse/discourse/blob/178b294a629cb7fa6970c45be07c71d5305910a9/app/assets/javascripts/discourse/tests/unit/lib/time-utils-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/178b294a629cb7fa6970c45be07c71d5305910a9/app/assets/javascripts/discourse/tests/unit/lib/time-utils-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/lib/time-utils-test.js?ref=178b294a629cb7fa6970c45be07c71d5305910a9",
      "patch": "@@ -1,6 +1,6 @@\n import {\n   discourseModule,\n-  fakeTime,\n+  withFrozenTime,\n } from \"discourse/tests/helpers/qunit-helpers\";\n \n import {\n@@ -15,33 +15,29 @@ import { test } from \"qunit\";\n \n const timezone = \"Australia/Brisbane\";\n \n-function mockMomentTz(dateString) {\n-  fakeTime(dateString, timezone);\n-}\n-\n discourseModule(\"Unit | lib | timeUtils\", function () {\n   test(\"nextWeek gets next week correctly\", function (assert) {\n-    mockMomentTz(\"2019-12-11T08:00:00\");\n-\n-    assert.equal(nextWeek(timezone).format(\"YYYY-MM-DD\"), \"2019-12-18\");\n+    withFrozenTime(\"2019-12-11T08:00:00\", timezone, () => {\n+      assert.equal(nextWeek(timezone).format(\"YYYY-MM-DD\"), \"2019-12-18\");\n+    });\n   });\n \n   test(\"nextMonth gets next month correctly\", function (assert) {\n-    mockMomentTz(\"2019-12-11T08:00:00\");\n-\n-    assert.equal(nextMonth(timezone).format(\"YYYY-MM-DD\"), \"2020-01-11\");\n+    withFrozenTime(\"2019-12-11T08:00:00\", timezone, () => {\n+      assert.equal(nextMonth(timezone).format(\"YYYY-MM-DD\"), \"2020-01-11\");\n+    });\n   });\n \n   test(\"laterThisWeek gets 2 days from now\", function (assert) {\n-    mockMomentTz(\"2019-12-10T08:00:00\");\n-\n-    assert.equal(laterThisWeek(timezone).format(\"YYYY-MM-DD\"), \"2019-12-12\");\n+    withFrozenTime(\"2019-12-10T08:00:00\", timezone, () => {\n+      assert.equal(laterThisWeek(timezone).format(\"YYYY-MM-DD\"), \"2019-12-12\");\n+    });\n   });\n \n   test(\"tomorrow gets tomorrow correctly\", function (assert) {\n-    mockMomentTz(\"2019-12-11T08:00:00\");\n-\n-    assert.equal(tomorrow(timezone).format(\"YYYY-MM-DD\"), \"2019-12-12\");\n+    withFrozenTime(\"2019-12-11T08:00:00\", timezone, () => {\n+      assert.equal(tomorrow(timezone).format(\"YYYY-MM-DD\"), \"2019-12-12\");\n+    });\n   });\n \n   test(\"startOfDay changes the time of the provided date to 8:00am correctly\", function (assert) {\n@@ -54,54 +50,54 @@ discourseModule(\"Unit | lib | timeUtils\", function () {\n   });\n \n   test(\"laterToday gets 3 hours from now and if before half-past, it rounds down\", function (assert) {\n-    mockMomentTz(\"2019-12-11T08:13:00\");\n-\n-    assert.equal(\n-      laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n-      \"2019-12-11 11:00:00\"\n-    );\n+    withFrozenTime(\"2019-12-11T08:13:00\", timezone, () => {\n+      assert.equal(\n+        laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n+        \"2019-12-11 11:00:00\"\n+      );\n+    });\n   });\n \n   test(\"laterToday gets 3 hours from now and if after half-past, it rounds up to the next hour\", function (assert) {\n-    mockMomentTz(\"2019-12-11T08:43:00\");\n-\n-    assert.equal(\n-      laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n-      \"2019-12-11 12:00:00\"\n-    );\n+    withFrozenTime(\"2019-12-11T08:43:00\", timezone, () => {\n+      assert.equal(\n+        laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n+        \"2019-12-11 12:00:00\"\n+      );\n+    });\n   });\n \n   test(\"laterToday is capped to 6pm. later today at 3pm = 6pm, 3:30pm = 6pm, 4pm = 6pm, 4:59pm = 6pm\", function (assert) {\n-    mockMomentTz(\"2019-12-11T15:00:00\");\n-\n-    assert.equal(\n-      laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n-      \"2019-12-11 18:00:00\",\n-      \"3pm should max to 6pm\"\n-    );\n-\n-    mockMomentTz(\"2019-12-11T15:31:00\");\n-\n-    assert.equal(\n-      laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n-      \"2019-12-11 18:00:00\",\n-      \"3:30pm should max to 6pm\"\n-    );\n-\n-    mockMomentTz(\"2019-12-11T16:00:00\");\n-\n-    assert.equal(\n-      laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n-      \"2019-12-11 18:00:00\",\n-      \"4pm should max to 6pm\"\n-    );\n-\n-    mockMomentTz(\"2019-12-11T16:59:00\");\n-\n-    assert.equal(\n-      laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n-      \"2019-12-11 18:00:00\",\n-      \"4:59pm should max to 6pm\"\n-    );\n+    withFrozenTime(\"2019-12-11T15:00:00\", timezone, () => {\n+      assert.equal(\n+        laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n+        \"2019-12-11 18:00:00\",\n+        \"3pm should max to 6pm\"\n+      );\n+    });\n+\n+    withFrozenTime(\"2019-12-11T15:31:00\", timezone, () => {\n+      assert.equal(\n+        laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n+        \"2019-12-11 18:00:00\",\n+        \"3:30pm should max to 6pm\"\n+      );\n+    });\n+\n+    withFrozenTime(\"2019-12-11T16:00:00\", timezone, () => {\n+      assert.equal(\n+        laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n+        \"2019-12-11 18:00:00\",\n+        \"4pm should max to 6pm\"\n+      );\n+    });\n+\n+    withFrozenTime(\"2019-12-11T16:59:00\", timezone, () => {\n+      assert.equal(\n+        laterToday(timezone).format(\"YYYY-MM-DD HH:mm:ss\"),\n+        \"2019-12-11 18:00:00\",\n+        \"4:59pm should max to 6pm\"\n+      );\n+    });\n   });\n });"
    }
  ]
}
