{
  "sha": "c62efc0f0fc08335bfe96350c91366426563f695",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpjNjJlZmMwZjBmYzA4MzM1YmZlOTYzNTBjOTEzNjY0MjY1NjNmNjk1",
  "commit": {
    "author": {
      "name": "Andrei Prigorshnev",
      "email": "a.prigorshnev@gmail.com",
      "date": "2021-05-24T09:05:24Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-05-24T09:05:24Z"
    },
    "message": "FIX: Ignore max excerpt length for div excerpts too (#13058)\n\nWe support two types of custom excerpts. It can be <div class=\"excerpt\"> or <span class=\"excerpt\">: https://github.com/discourse/discourse/blob/b21f74060e865d809ba466cb52e6cb95c7b0cf1f/lib/excerpt_parser.rb#L120\r\n\r\nWe also ignore max excerpt length for custom excerpts. But we forgot to process div when ignoring max length.",
    "tree": {
      "sha": "352c719aeb45f7b6af284c624dba15174727ca07",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/352c719aeb45f7b6af284c624dba15174727ca07"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/c62efc0f0fc08335bfe96350c91366426563f695",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgq2xUCRBK7hj4Ov3rIwAArQMIAFl7ZyJZZLQCmUgwFkq4V5Yv\nt88zuAo5KXVp/Btdi7Eldx/YcY2Jh5xD8olYksFLMKLb2Zc+QgeR3+m9qpzQudzv\nCW2jAzt9v1irnozb/FiGtmj1SLDMnk22HCqV8rrRQGQFUuyG0stSkz6+r3prDKif\nc9BDyUqQEz0Bru9gwTqDk08Zpn4YrlV2HPKW0GKzCo8HlyCN72HOhqLGWcyiIKQb\n0qge4w49jjnCA1MsOn0xfGMYwAAN1VXankpum2X5F/g+0QrZOBwCaT/pcPW5Fdca\nXQ7hun1xvgMIKAdwgTc+3FAvliIOzKcvO14x9fTx0Mst8Nw0nD0m2WJhiXEQcfM=\n=jYJ0\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 352c719aeb45f7b6af284c624dba15174727ca07\nparent 332ae975556018a6a84cde5f741b3632b3bf84db\nauthor Andrei Prigorshnev <a.prigorshnev@gmail.com> 1621847124 +0400\ncommitter GitHub <noreply@github.com> 1621847124 +0400\n\nFIX: Ignore max excerpt length for div excerpts too (#13058)\n\nWe support two types of custom excerpts. It can be <div class=\"excerpt\"> or <span class=\"excerpt\">: https://github.com/discourse/discourse/blob/b21f74060e865d809ba466cb52e6cb95c7b0cf1f/lib/excerpt_parser.rb#L120\r\n\r\nWe also ignore max excerpt length for custom excerpts. But we forgot to process div when ignoring max length."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/c62efc0f0fc08335bfe96350c91366426563f695",
  "html_url": "https://github.com/discourse/discourse/commit/c62efc0f0fc08335bfe96350c91366426563f695",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/c62efc0f0fc08335bfe96350c91366426563f695/comments",
  "author": {
    "login": "AndrewPrigorshnev",
    "id": 1274517,
    "node_id": "MDQ6VXNlcjEyNzQ1MTc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1274517?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AndrewPrigorshnev",
    "html_url": "https://github.com/AndrewPrigorshnev",
    "followers_url": "https://api.github.com/users/AndrewPrigorshnev/followers",
    "following_url": "https://api.github.com/users/AndrewPrigorshnev/following{/other_user}",
    "gists_url": "https://api.github.com/users/AndrewPrigorshnev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AndrewPrigorshnev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AndrewPrigorshnev/subscriptions",
    "organizations_url": "https://api.github.com/users/AndrewPrigorshnev/orgs",
    "repos_url": "https://api.github.com/users/AndrewPrigorshnev/repos",
    "events_url": "https://api.github.com/users/AndrewPrigorshnev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AndrewPrigorshnev/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "332ae975556018a6a84cde5f741b3632b3bf84db",
      "url": "https://api.github.com/repos/discourse/discourse/commits/332ae975556018a6a84cde5f741b3632b3bf84db",
      "html_url": "https://github.com/discourse/discourse/commit/332ae975556018a6a84cde5f741b3632b3bf84db"
    }
  ],
  "stats": {
    "total": 18,
    "additions": 12,
    "deletions": 6
  },
  "files": [
    {
      "sha": "d2708935de9be6a02faa9d410ef49ab1b88b4ac5",
      "filename": "lib/excerpt_parser.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c62efc0f0fc08335bfe96350c91366426563f695/lib/excerpt_parser.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c62efc0f0fc08335bfe96350c91366426563f695/lib/excerpt_parser.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/excerpt_parser.rb?ref=c62efc0f0fc08335bfe96350c91366426563f695",
      "patch": "@@ -4,7 +4,7 @@ class ExcerptParser < Nokogiri::XML::SAX::Document\n \n   attr_reader :excerpt\n \n-  SPAN_REGEX = /<\\s*span[^>]*class\\s*=\\s*['|\"]excerpt['|\"][^>]*>/\n+  CUSTOM_EXCERPT_REGEX = /<\\s*(span|div)[^>]*class\\s*=\\s*['\"]excerpt['\"][^>]*>/\n \n   def initialize(length, options = nil)\n     @length = length\n@@ -29,7 +29,7 @@ def initialize(length, options = nil)\n \n   def self.get_excerpt(html, length, options)\n     html ||= ''\n-    length = html.length if html.include?('excerpt') && SPAN_REGEX === html\n+    length = html.length if html.include?('excerpt') && CUSTOM_EXCERPT_REGEX === html\n     me = self.new(length, options)\n     parser = Nokogiri::HTML::SAX::Parser.new(me)\n     catch(:done) do"
    },
    {
      "sha": "0436849fe1a65bf9f1b68759f28b1aa55d5ac08b",
      "filename": "spec/components/pretty_text_spec.rb",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/c62efc0f0fc08335bfe96350c91366426563f695/spec/components/pretty_text_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c62efc0f0fc08335bfe96350c91366426563f695/spec/components/pretty_text_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/pretty_text_spec.rb?ref=c62efc0f0fc08335bfe96350c91366426563f695",
      "patch": "@@ -798,18 +798,24 @@ def extract_urls(text)\n       expect(post.excerpt).to eq(\"hello <a href=\\\"https://site.com\\\" rel=\\\"noopener nofollow ugc\\\">site</a>\")\n     end\n \n+    it \"handles div excerpt at the beginning of a post\" do\n+      expect(PrettyText.excerpt(\"<div class='excerpt'>hi</div> test\", 100)).to eq('hi')\n+    end\n+\n     it \"handles span excerpt at the beginning of a post\" do\n       expect(PrettyText.excerpt(\"<span class='excerpt'>hi</span> test\", 100)).to eq('hi')\n-      post = Fabricate(:post, raw: \"<span class='excerpt'>hi</span> test\")\n-      expect(post.excerpt).to eq(\"hi\")\n+    end\n+\n+    it \"ignores max excerpt length if a div excerpt is specified\" do\n+      two_hundred = \"123456789 \" * 20 + \".\"\n+      text = two_hundred + \"<div class='excerpt'>#{two_hundred}</div>\" + two_hundred\n+      expect(PrettyText.excerpt(text, 100)).to eq(two_hundred)\n     end\n \n     it \"ignores max excerpt length if a span excerpt is specified\" do\n       two_hundred = \"123456789 \" * 20 + \".\"\n       text = two_hundred + \"<span class='excerpt'>#{two_hundred}</span>\" + two_hundred\n       expect(PrettyText.excerpt(text, 100)).to eq(two_hundred)\n-      post = Fabricate(:post, raw: text)\n-      expect(post.excerpt).to eq(two_hundred)\n     end\n \n     it \"unescapes html entities when we want text entities\" do"
    }
  ]
}
