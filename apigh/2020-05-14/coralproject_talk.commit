{
  "sha": "ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6Y2ViOTZkYmE3NTNiZjVkN2U2MzgzY2RhNDc5ZDZmNWQyNjU5YjlkMA==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2020-05-13T22:39:22Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-05-13T22:39:22Z"
    },
    "message": "[CORL-1048] Cookie Deprecation (#2944)\n\n* feat: dropped cookie support due to ITP issues\r\n\r\n* feat: added improved accessToken handling\r\n\r\n* fix: linting\r\n\r\n* fix: removed variadic part of JWT\r\n\r\n* fix: bump long-settimeout version\r\n\r\n* review: removed management classes\r\n\r\n* fix: updated snaps\r\n\r\n* review: renamed based on review\r\n\r\n* review: removed guard clauses around errors surrounding auth",
    "tree": {
      "sha": "ee7731ad6280b87fe64165d14ebf81f81b1bc920",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/ee7731ad6280b87fe64165d14ebf81f81b1bc920"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevHcaCRBK7hj4Ov3rIwAAdHIIAI9FBPuzsptLpwyEDzVshlNw\nMTPtznxj1ieK3PJ4Eex6kd9X3GOOKEqNuGOF0kIy6MG/GCp0Be0dzqg/BdqMprZz\nKQGWQdWpYUmO6JoDo/8gQQoDYlQoueA84sjTbcvduU2H7vd4P+Q88UL79TKBcP39\nhVVXjO6IDNV251TAQ2OqjjqJap5FLaGtTFYtcimdlLF4bxOgotqZhgomBhRRSMfe\nlVD9nwo6nUyGje9ukWCTJSihlfZi04DnswDyRV8Sl4MvIds/qRjKa/o5N5CZmvJ9\n2dbuzoexwD2yXnygbtqC/4myzMjpyJfSizIAxsel/IUWobs1yh1qnqi3il1+rNk=\n=Moid\n-----END PGP SIGNATURE-----\n",
      "payload": "tree ee7731ad6280b87fe64165d14ebf81f81b1bc920\nparent f73597d7d19ecd000e46723906c0757796fa52f5\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1589409562 +0000\ncommitter GitHub <noreply@github.com> 1589409562 +0000\n\n[CORL-1048] Cookie Deprecation (#2944)\n\n* feat: dropped cookie support due to ITP issues\r\n\r\n* feat: added improved accessToken handling\r\n\r\n* fix: linting\r\n\r\n* fix: removed variadic part of JWT\r\n\r\n* fix: bump long-settimeout version\r\n\r\n* review: removed management classes\r\n\r\n* fix: updated snaps\r\n\r\n* review: renamed based on review\r\n\r\n* review: removed guard clauses around errors surrounding auth"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
  "html_url": "https://github.com/coralproject/talk/commit/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f73597d7d19ecd000e46723906c0757796fa52f5",
      "url": "https://api.github.com/repos/coralproject/talk/commits/f73597d7d19ecd000e46723906c0757796fa52f5",
      "html_url": "https://github.com/coralproject/talk/commit/f73597d7d19ecd000e46723906c0757796fa52f5"
    }
  ],
  "stats": {
    "total": 756,
    "additions": 431,
    "deletions": 325
  },
  "files": [
    {
      "sha": "e2aa10d634cf690e145e277570d8295ffe768db8",
      "filename": "package-lock.json",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/package-lock.json",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/package-lock.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package-lock.json?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -31743,6 +31743,11 @@\n       \"resolved\": \"https://registry.npmjs.org/long/-/long-4.0.0.tgz\",\n       \"integrity\": \"sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA==\"\n     },\n+    \"long-settimeout\": {\n+      \"version\": \"1.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/long-settimeout/-/long-settimeout-1.0.1.tgz\",\n+      \"integrity\": \"sha512-+Riw1FKJ5Aotk2WatDq2U3HCZEUxKRAeC0TOEbj4mnR+m3zhleQ5BuWsKu+Vb6kHoDQqq+jLKIcCqOODC7CIyg==\"\n+    },\n     \"longest-streak\": {\n       \"version\": \"1.0.0\",\n       \"resolved\": \"https://registry.npmjs.org/longest-streak/-/longest-streak-1.0.0.tgz\","
    },
    {
      "sha": "4965462c5ef00978492ab9fa6bef7b8deaa360c1",
      "filename": "package.json",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/package.json",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/package.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package.json?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -108,6 +108,7 @@\n     \"jwks-rsa\": \"^1.7.0\",\n     \"linkifyjs\": \"^2.1.9\",\n     \"lodash\": \"^4.17.15\",\n+    \"long-settimeout\": \"^1.0.1\",\n     \"lru-cache\": \"^5.1.1\",\n     \"luxon\": \"^1.22.2\",\n     \"metascraper-author\": \"^5.11.6\","
    },
    {
      "sha": "aba8b459acf88721150e14e482056bbb26ec2ea7",
      "filename": "src/core/client/account/local/initLocalState.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/account/local/initLocalState.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/account/local/initLocalState.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/account/local/initLocalState.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,5 +1,6 @@\n import { Environment } from \"relay-runtime\";\n \n+import { AuthState } from \"coral-framework/lib/auth\";\n import { CoralContext } from \"coral-framework/lib/bootstrap\";\n import { initLocalBaseState } from \"coral-framework/lib/relay\";\n \n@@ -8,7 +9,8 @@ import { initLocalBaseState } from \"coral-framework/lib/relay\";\n  */\n export default async function initLocalState(\n   environment: Environment,\n-  context: CoralContext\n+  context: CoralContext,\n+  auth?: AuthState\n ) {\n-  await initLocalBaseState(environment, context);\n+  initLocalBaseState(environment, context, auth);\n }"
    },
    {
      "sha": "917be9cc4bc6259dc82b302909bf6d7ecf8b0553",
      "filename": "src/core/client/admin/constants.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/constants.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/constants.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/constants.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,5 +1,4 @@\n export const REDIRECT_PATH_KEY = \"coral:adminRedirectPath\";\n-export const ACCESS_TOKEN_KEY = \"coral:accessToken\";\n export const HOTKEYS = {\n   NEXT: \"j\",\n   PREV: \"k\","
    },
    {
      "sha": "b60535cd695586b229a888274f7194599e0e2ad5",
      "filename": "src/core/client/admin/local/__snapshots__/initLocalState.spec.ts.snap",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/local/__snapshots__/initLocalState.spec.ts.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/local/__snapshots__/initLocalState.spec.ts.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/local/__snapshots__/initLocalState.spec.ts.snap?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -4,8 +4,7 @@ exports[`get access token from url 1`] = `\n \"{\n   \\\\\"__id\\\\\": \\\\\"client:root.local\\\\\",\n   \\\\\"__typename\\\\\": \\\\\"Local\\\\\",\n-  \\\\\"accessToken\\\\\": \\\\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIzMWIyNjU5MS00ZTlhLTQzODgtYTdmZi1lMWJkYzVkOTdjY2UifQ==\\\\\",\n-  \\\\\"accessTokenExp\\\\\": null,\n+  \\\\\"accessToken\\\\\": \\\\\"eyJraWQiOiI5NmM4MDY2YS1kOTg3LTQyODItODNmOS1kYTUxNjc5N2Y5ZmMiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzMWIyNjU5MS00ZTlhLTQzODgtYTdmZi1lMWJkYzVkOTdjY2UifQ==.\\\\\",\n   \\\\\"accessTokenJTI\\\\\": \\\\\"31b26591-4e9a-4388-a7ff-e1bdc5d97cce\\\\\",\n   \\\\\"redirectPath\\\\\": null,\n   \\\\\"authView\\\\\": \\\\\"SIGN_IN\\\\\",\n@@ -25,9 +24,6 @@ exports[`init local state 1`] = `\n   \\\\\"client:root.local\\\\\": {\n     \\\\\"__id\\\\\": \\\\\"client:root.local\\\\\",\n     \\\\\"__typename\\\\\": \\\\\"Local\\\\\",\n-    \\\\\"accessToken\\\\\": \\\\\"\\\\\",\n-    \\\\\"accessTokenExp\\\\\": null,\n-    \\\\\"accessTokenJTI\\\\\": null,\n     \\\\\"redirectPath\\\\\": null,\n     \\\\\"authView\\\\\": \\\\\"SIGN_IN\\\\\",\n     \\\\\"authError\\\\\": null"
    },
    {
      "sha": "a9eeac42d0417c4da719ef921b7e88da2096df17",
      "filename": "src/core/client/admin/local/initLocalState.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 23,
      "changes": 30,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/local/initLocalState.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/local/initLocalState.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/local/initLocalState.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,21 +1,19 @@\n import { commitLocalUpdate, Environment } from \"relay-runtime\";\n \n-import { ACCESS_TOKEN_KEY, REDIRECT_PATH_KEY } from \"coral-admin/constants\";\n+import { REDIRECT_PATH_KEY } from \"coral-admin/constants\";\n import { clearHash, getParamsFromHash } from \"coral-framework/helpers\";\n+import { AuthState, storeAccessToken } from \"coral-framework/lib/auth\";\n import { CoralContext } from \"coral-framework/lib/bootstrap\";\n-import { parseJWT } from \"coral-framework/lib/jwt\";\n import { initLocalBaseState, LOCAL_ID } from \"coral-framework/lib/relay\";\n \n /**\n  * Initializes the local state, before we start the App.\n  */\n export default async function initLocalState(\n   environment: Environment,\n-  context: CoralContext\n+  context: CoralContext,\n+  auth?: AuthState\n ) {\n-  // Get the access token from the session storage.\n-  let accessToken = await context.sessionStorage.getItem(ACCESS_TOKEN_KEY);\n-\n   // Initialize the redirect path in case we don't need to redirect somewhere.\n   let redirectPath: string | null = null;\n   let error: string | null = null;\n@@ -31,11 +29,9 @@ export default async function initLocalState(\n       error = params.error;\n     }\n \n-    // If there was an access token, store it and replace the one that was in\n-    // the session storage before.\n+    // If there was an access token, store it.\n     if (params.accessToken) {\n-      accessToken = params.accessToken;\n-      await context.sessionStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n+      auth = storeAccessToken(params.accessToken);\n     }\n \n     // As we are in the middle of an auth flow (given that there was something\n@@ -48,19 +44,7 @@ export default async function initLocalState(\n     await context.localStorage.setItem(REDIRECT_PATH_KEY, \"\");\n   }\n \n-  if (accessToken) {\n-    // As there's a token on the request, decode it, and check to see if it's\n-    // expired already. If it is, this will send them back to the error page.\n-    const { payload } = parseJWT(accessToken);\n-    if (payload && payload.exp) {\n-      if (payload.exp - Date.now() / 1000 <= 0) {\n-        accessToken = null;\n-        await context.sessionStorage.removeItem(ACCESS_TOKEN_KEY);\n-      }\n-    }\n-  }\n-\n-  await initLocalBaseState(environment, context, accessToken);\n+  initLocalBaseState(environment, context, auth);\n \n   commitLocalUpdate(environment, (s) => {\n     const localRecord = s.get(LOCAL_ID)!;"
    },
    {
      "sha": "c1b5c8f94484e0fdbbc2da406b4860ae56c4288e",
      "filename": "src/core/client/admin/routes/Invite/InviteCompleteForm.tsx",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/routes/Invite/InviteCompleteForm.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/routes/Invite/InviteCompleteForm.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Invite/InviteCompleteForm.tsx?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -3,8 +3,8 @@ import { FORM_ERROR } from \"final-form\";\n import React, { useCallback, useMemo } from \"react\";\n import { Form } from \"react-final-form\";\n \n+import { parseAccessTokenClaims } from \"coral-framework/lib/auth/helpers\";\n import { InvalidRequestError } from \"coral-framework/lib/errors\";\n-import { parseJWT } from \"coral-framework/lib/jwt\";\n import { useMutation } from \"coral-framework/lib/relay\";\n import {\n   Button,\n@@ -52,7 +52,14 @@ const InviteCompleteForm: React.FunctionComponent<Props> = ({\n     },\n     [token]\n   );\n-  const email = useMemo(() => parseJWT(token).payload.email, [token]);\n+  const email = useMemo(() => {\n+    const claims = parseAccessTokenClaims<{ email?: string }>(token);\n+    if (!claims) {\n+      return null;\n+    }\n+\n+    return claims.email;\n+  }, [token]);\n \n   return (\n     <div data-testid=\"invite-complete-form\">"
    },
    {
      "sha": "7138af3229b9f51c6b986909fa5ab62d9a8f5297",
      "filename": "src/core/client/admin/routes/Invite/Success.tsx",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/routes/Invite/Success.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/routes/Invite/Success.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Invite/Success.tsx?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -2,8 +2,8 @@ import { Localized } from \"@fluent/react/compat\";\n import { Link } from \"found\";\n import React, { useMemo } from \"react\";\n \n+import { parseAccessTokenClaims } from \"coral-framework/lib/auth/helpers\";\n import { ExternalLink } from \"coral-framework/lib/i18n/components\";\n-import { parseJWT } from \"coral-framework/lib/jwt\";\n import { HorizontalGutter, Typography } from \"coral-ui/components\";\n \n import styles from \"./Success.css\";\n@@ -19,7 +19,14 @@ const Success: React.FunctionComponent<Props> = ({\n   organizationName,\n   organizationURL,\n }) => {\n-  const email = useMemo(() => parseJWT(token).payload.email, [token]);\n+  const email = useMemo(() => {\n+    const claims = parseAccessTokenClaims<{ email?: string }>(token);\n+    if (!claims) {\n+      return null;\n+    }\n+\n+    return claims.email;\n+  }, [token]);\n \n   return (\n     <HorizontalGutter"
    },
    {
      "sha": "b9ef8f03f0fc7290ee00f3cfc407bbce5b44f29f",
      "filename": "src/core/client/auth/local/__snapshots__/initLocalState.spec.ts.snap",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/auth/local/__snapshots__/initLocalState.spec.ts.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/auth/local/__snapshots__/initLocalState.spec.ts.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/auth/local/__snapshots__/initLocalState.spec.ts.snap?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -4,8 +4,7 @@ exports[`get access token from url 1`] = `\n \"{\n   \\\\\"__id\\\\\": \\\\\"client:root.local\\\\\",\n   \\\\\"__typename\\\\\": \\\\\"Local\\\\\",\n-  \\\\\"accessToken\\\\\": \\\\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIzMWIyNjU5MS00ZTlhLTQzODgtYTdmZi1lMWJkYzVkOTdjY2UifQ==\\\\\",\n-  \\\\\"accessTokenExp\\\\\": null,\n+  \\\\\"accessToken\\\\\": \\\\\"eyJraWQiOiI5NmM4MDY2YS1kOTg3LTQyODItODNmOS1kYTUxNjc5N2Y5ZmMiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzMWIyNjU5MS00ZTlhLTQzODgtYTdmZi1lMWJkYzVkOTdjY2UifQ==.\\\\\",\n   \\\\\"accessTokenJTI\\\\\": \\\\\"31b26591-4e9a-4388-a7ff-e1bdc5d97cce\\\\\",\n   \\\\\"view\\\\\": \\\\\"SIGN_IN\\\\\",\n   \\\\\"error\\\\\": null\n@@ -24,9 +23,6 @@ exports[`init local state 1`] = `\n   \\\\\"client:root.local\\\\\": {\n     \\\\\"__id\\\\\": \\\\\"client:root.local\\\\\",\n     \\\\\"__typename\\\\\": \\\\\"Local\\\\\",\n-    \\\\\"accessToken\\\\\": \\\\\"\\\\\",\n-    \\\\\"accessTokenExp\\\\\": null,\n-    \\\\\"accessTokenJTI\\\\\": null,\n     \\\\\"view\\\\\": \\\\\"SIGN_IN\\\\\",\n     \\\\\"error\\\\\": null\n   }"
    },
    {
      "sha": "648f461d7b15ff250c77bbdf86e1ade154cf42f2",
      "filename": "src/core/client/auth/local/initLocalState.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/auth/local/initLocalState.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/auth/local/initLocalState.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/auth/local/initLocalState.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,8 +1,8 @@\n-/* eslint-disable prettier/prettier */\n import { commitLocalUpdate, Environment } from \"relay-runtime\";\n \n import { parseQuery } from \"coral-common/utils\";\n import { getParamsFromHashAndClearIt } from \"coral-framework/helpers\";\n+import { AuthState, storeAccessToken } from \"coral-framework/lib/auth\";\n import { CoralContext } from \"coral-framework/lib/bootstrap\";\n import { initLocalBaseState, LOCAL_ID } from \"coral-framework/lib/relay\";\n \n@@ -11,16 +11,18 @@ import { initLocalBaseState, LOCAL_ID } from \"coral-framework/lib/relay\";\n  */\n export default async function initLocalState(\n   environment: Environment,\n-  context: CoralContext\n+  context: CoralContext,\n+  auth?: AuthState\n ) {\n-  const {\n-    error = null,\n-    accessToken = null,\n-  } = getParamsFromHashAndClearIt();\n+  const { error = null, accessToken = null } = getParamsFromHashAndClearIt();\n \n-  await initLocalBaseState(environment, context, accessToken);\n+  if (accessToken) {\n+    auth = storeAccessToken(accessToken);\n+  }\n \n-  commitLocalUpdate(environment, s => {\n+  initLocalBaseState(environment, context, auth);\n+\n+  commitLocalUpdate(environment, (s) => {\n     const localRecord = s.get(LOCAL_ID)!;\n \n     // Parse query params"
    },
    {
      "sha": "58425081147ac8b460af4d9a13b33888622242e7",
      "filename": "src/core/client/framework/lib/auth/auth.ts",
      "status": "added",
      "additions": 90,
      "deletions": 0,
      "changes": 90,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/auth/auth.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/auth/auth.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/auth/auth.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -0,0 +1,90 @@\n+import { Claims, computeExpiresIn, parseAccessTokenClaims } from \"./helpers\";\n+\n+/**\n+ * ACCESS_TOKEN_KEY is the key in storage where the accessToken is stored.\n+ */\n+const ACCESS_TOKEN_KEY = \"coral:v1:accessToken\";\n+\n+/**\n+ * storage is the Storage used to retrieve/update/delete access tokens on.\n+ */\n+const storage = localStorage;\n+\n+export interface AuthState {\n+  /**\n+   * accessToken is the access token issued by the server.\n+   */\n+  accessToken: string;\n+\n+  /**\n+   * claims are the parsed claims from the access token.\n+   */\n+  claims: Claims;\n+}\n+\n+export type AccessTokenProvider = () => string | undefined;\n+\n+function parseAccessToken(accessToken: string) {\n+  // Try to parse the access token claims.\n+  const claims = parseAccessTokenClaims(accessToken);\n+  if (!claims) {\n+    // Claims couldn't be parsed.\n+    return;\n+  }\n+\n+  if (claims.exp) {\n+    const expiresIn = computeExpiresIn(claims.exp);\n+    if (!expiresIn) {\n+      // Looks like the access token has expired.\n+      return;\n+    }\n+  }\n+\n+  return { accessToken, claims };\n+}\n+\n+export function retrieveAccessToken() {\n+  try {\n+    // Get the access token from storage.\n+    const accessToken = storage.getItem(ACCESS_TOKEN_KEY);\n+    if (!accessToken) {\n+      // Looks like the access token wasn't in storage.\n+      return;\n+    }\n+\n+    // Return the parsed access token.\n+    return parseAccessToken(accessToken);\n+  } catch (err) {\n+    // TODO: (wyattjoh) add error reporting around this error\n+    // eslint-disable-next-line no-console\n+    console.error(\"could not get access token from storage\", err);\n+\n+    return;\n+  }\n+}\n+\n+export function storeAccessToken(accessToken: string) {\n+  try {\n+    // Update the access token in storage.\n+    storage.setItem(ACCESS_TOKEN_KEY, accessToken);\n+  } catch (err) {\n+    // TODO: (wyattjoh) add error reporting around this error\n+    // eslint-disable-next-line no-console\n+    console.error(\"could not set access token in storage\", err);\n+  }\n+\n+  // Return the parsed access token.\n+  return parseAccessToken(accessToken);\n+}\n+\n+export function deleteAccessToken() {\n+  try {\n+    storage.removeItem(ACCESS_TOKEN_KEY);\n+  } catch (err) {\n+    // TODO: (wyattjoh) add error reporting around this error\n+    // eslint-disable-next-line no-console\n+    console.error(\"could not remove access token from storage\", err);\n+  }\n+\n+  return undefined;\n+}"
    },
    {
      "sha": "c755c31ecf45bed27397c52c31a284a2e0a3d70c",
      "filename": "src/core/client/framework/lib/auth/helpers.ts",
      "status": "added",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/auth/helpers.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/auth/helpers.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/auth/helpers.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -0,0 +1,56 @@\n+const SKEW_TOLERANCE = 300;\n+\n+export interface Claims {\n+  jti?: string;\n+  exp?: number;\n+}\n+\n+export function parseAccessTokenClaims<T = {}>(\n+  accessToken: string\n+): (Claims & T) | null {\n+  const parts = accessToken.split(\".\");\n+  if (parts.length !== 3) {\n+    // TODO: (wyattjoh) add error reporting around this error\n+    // eslint-disable-next-line no-console\n+    console.warn(\"access token does not have the right number of parts\");\n+\n+    return null;\n+  }\n+\n+  try {\n+    const claims = JSON.parse(atob(parts[1]));\n+\n+    // Validate `jti` claim.\n+    if (!claims.jti || typeof claims.jti !== \"string\") {\n+      delete claims.jti;\n+    }\n+\n+    // Validate `exp` claim.\n+    if (!claims.exp || typeof claims.exp !== \"number\") {\n+      delete claims.exp;\n+    }\n+\n+    return claims;\n+  } catch (err) {\n+    // TODO: (wyattjoh) add error reporting around this error\n+    // eslint-disable-next-line no-console\n+    console.error(\"access token can not be parsed:\", err);\n+\n+    return null;\n+  }\n+}\n+\n+/**\n+ * computeExpiresIn will return null if we are already expired, or the time in\n+ * milliseconds from now that we are expired.\n+ *\n+ * @param expiredAt the epoch timestamp that we're considered expired\n+ */\n+export function computeExpiresIn(expiredAt: number) {\n+  const expiresIn = expiredAt * 1000 - Date.now();\n+  if (expiresIn + SKEW_TOLERANCE <= 0) {\n+    return null;\n+  }\n+\n+  return expiresIn;\n+}"
    },
    {
      "sha": "97ccf76494a326d4aed89438fcfde20fa913c74d",
      "filename": "src/core/client/framework/lib/auth/index.ts",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/auth/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/auth/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/auth/index.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -0,0 +1 @@\n+export * from \"./auth\";"
    },
    {
      "sha": "3aff6596a609c1196de308c5911c32491a23f02c",
      "filename": "src/core/client/framework/lib/bootstrap/createManaged.tsx",
      "status": "modified",
      "additions": 65,
      "deletions": 61,
      "changes": 126,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/bootstrap/createManaged.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/bootstrap/createManaged.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/bootstrap/createManaged.tsx?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -9,11 +9,6 @@ import { v1 as uuid } from \"uuid\";\n \n import { LanguageCode } from \"coral-common/helpers/i18n\";\n import { getBrowserInfo } from \"coral-framework/lib/browserInfo\";\n-import {\n-  commitLocalUpdatePromisified,\n-  LOCAL_ID,\n-  setAccessTokenInLocalState,\n-} from \"coral-framework/lib/relay\";\n import { RestClient } from \"coral-framework/lib/rest\";\n import {\n   createLocalStorage,\n@@ -24,20 +19,28 @@ import {\n } from \"coral-framework/lib/storage\";\n import { ClickFarAwayRegister } from \"coral-ui/components/ClickOutside\";\n \n+import {\n+  AccessTokenProvider,\n+  AuthState,\n+  deleteAccessToken,\n+  retrieveAccessToken,\n+  storeAccessToken,\n+} from \"../auth\";\n import { generateBundles, LocalesData } from \"../i18n\";\n import {\n   createManagedSubscriptionClient,\n   createNetwork,\n   ManagedSubscriptionClient,\n-  TokenGetter,\n } from \"../network\";\n import { PostMessageService } from \"../postMessage\";\n+import { LOCAL_ID } from \"../relay\";\n import { CoralContext, CoralContextProvider } from \"./CoralContext\";\n import SendPymReady from \"./SendPymReady\";\n \n export type InitLocalState = (\n   environment: Environment,\n-  context: CoralContext\n+  context: CoralContext,\n+  auth?: AuthState\n ) => void | Promise<void>;\n \n interface CreateContextArguments {\n@@ -47,6 +50,9 @@ interface CreateContextArguments {\n   /** Init will be called after the context has been created. */\n   initLocalState?: InitLocalState;\n \n+  /** Access token that should be used instead of what's currently in storage */\n+  accessToken?: string;\n+\n   /** A pym child that interacts with the pym parent. */\n   pym?: PymChild;\n \n@@ -100,25 +106,31 @@ function areWeInIframe() {\n \n function createRelayEnvironment(\n   subscriptionClient: ManagedSubscriptionClient,\n-  clientID: string\n+  clientID: string,\n+  accessToken?: string\n ) {\n   const source = new RecordSource();\n-  const tokenGetter: TokenGetter = () => {\n-    const localState = source.get(LOCAL_ID);\n-    if (localState) {\n-      return (localState.accessToken as string) || \"\";\n+  const accessTokenProvider: AccessTokenProvider = () => {\n+    const local = source.get(LOCAL_ID);\n+    if (!local) {\n+      return;\n     }\n-    return \"\";\n+\n+    return local.accessToken as string | undefined;\n   };\n   const environment = new Environment({\n-    network: createNetwork(subscriptionClient, tokenGetter, clientID),\n+    network: createNetwork(subscriptionClient, clientID, accessTokenProvider),\n     store: new Store(source),\n   });\n-  return { environment, tokenGetter, subscriptionClient };\n+\n+  return { environment, accessTokenProvider };\n }\n \n-function createRestClient(tokenGetter: () => string, clientID: string) {\n-  return new RestClient(\"/api\", tokenGetter, clientID);\n+function createRestClient(\n+  clientID: string,\n+  accessTokenProvider: AccessTokenProvider\n+) {\n+  return new RestClient(\"/api\", clientID, accessTokenProvider);\n }\n \n /**\n@@ -148,51 +160,43 @@ function createManagedCoralContextProvider(\n     }\n \n     // This is called every time a user session starts or ends.\n-    private clearSession = async (nextAccessToken?: string | null) => {\n+    private clearSession = async (nextAccessToken?: string) => {\n       // Clear session storage.\n       this.state.context.sessionStorage.clear();\n \n       // Pause subscriptions.\n       subscriptionClient.pause();\n \n-      // Create a new context with a new Relay Environment.\n-      const {\n-        environment: newEnvironment,\n-        tokenGetter: newTokenGetter,\n-      } = createRelayEnvironment(subscriptionClient, clientID);\n+      // Parse the claims/token and update storage.\n+      const auth = nextAccessToken\n+        ? storeAccessToken(nextAccessToken)\n+        : deleteAccessToken();\n \n-      const newContext = {\n+      // Create the new environment.\n+      const { environment, accessTokenProvider } = createRelayEnvironment(\n+        subscriptionClient,\n+        clientID,\n+        auth?.accessToken\n+      );\n+\n+      // Create the new context.\n+      const newContext: CoralContext = {\n         ...this.state.context,\n-        relayEnvironment: newEnvironment,\n-        rest: createRestClient(newTokenGetter, clientID),\n+        relayEnvironment: environment,\n+        rest: createRestClient(clientID, accessTokenProvider),\n       };\n \n       // Initialize local state.\n-      await initLocalState(newContext.relayEnvironment, newContext);\n-\n-      // Set new token for the websocket connection.\n-      // TODO: (cvle) dynamically reset when token changes.\n-      // ^ only necessary when we can prolong existing session using\n-      // a new token.\n-      subscriptionClient.setAccessToken(newTokenGetter());\n-\n-      // Set next access token.\n-      if (nextAccessToken) {\n-        await commitLocalUpdatePromisified(newEnvironment, async (store) => {\n-          setAccessTokenInLocalState(nextAccessToken, store);\n-        });\n-      }\n+      await initLocalState(newContext.relayEnvironment, newContext, auth);\n+\n+      // Update the subscription client access token.\n+      subscriptionClient.setAccessToken(accessTokenProvider());\n \n       // Propagate new context.\n-      this.setState(\n-        {\n-          context: newContext,\n-        },\n-        () => {\n-          // Resume subscriptions after context has changed.\n-          subscriptionClient.resume();\n-        }\n-      );\n+      this.setState({ context: newContext }, () => {\n+        // Resume subscriptions after context has changed.\n+        subscriptionClient.resume();\n+      });\n     };\n \n     // This is called when the locale should change.\n@@ -300,8 +304,8 @@ export default async function createManaged({\n \n   const localeBundles = await generateBundles(locales, localesData);\n \n-  const localStorage = resolveLocalStorage(pym);\n-  const sessionStorage = resolveSessionStorage(pym);\n+  // Get the access token from storage.\n+  const auth = retrieveAccessToken();\n \n   /** clientID is sent to the server with every request */\n   const clientID = uuid();\n@@ -311,9 +315,10 @@ export default async function createManaged({\n     clientID\n   );\n \n-  const { environment, tokenGetter } = createRelayEnvironment(\n+  const { environment, accessTokenProvider } = createRelayEnvironment(\n     subscriptionClient,\n-    clientID\n+    clientID,\n+    auth?.accessToken\n   );\n \n   // Assemble context.\n@@ -325,10 +330,10 @@ export default async function createManaged({\n     pym,\n     eventEmitter,\n     registerClickFarAway,\n-    rest: createRestClient(tokenGetter, clientID),\n+    rest: createRestClient(clientID, accessTokenProvider),\n     postMessage: new PostMessageService(),\n-    localStorage,\n-    sessionStorage,\n+    localStorage: resolveLocalStorage(pym),\n+    sessionStorage: resolveSessionStorage(pym),\n     browserInfo: getBrowserInfo(),\n     uuidGenerator: uuid,\n     // Noop, this is later replaced by the\n@@ -340,13 +345,12 @@ export default async function createManaged({\n   };\n \n   // Initialize local state.\n-  await initLocalState(context.relayEnvironment, context);\n+  await initLocalState(context.relayEnvironment, context, auth);\n \n-  // Set current token for the websocket connection.\n+  // Set new token for the websocket connection.\n   // TODO: (cvle) dynamically reset when token changes.\n-  // ^ only necessary when we can prolong existing session using\n-  // a new token.\n-  subscriptionClient.setAccessToken(tokenGetter());\n+  // ^ only necessary when we can prolong existing session using a new token.\n+  subscriptionClient.setAccessToken(accessTokenProvider());\n \n   // Returns a managed CoralContextProvider, that includes the above\n   // context and handles context changes, e.g. when a user session changes."
    },
    {
      "sha": "6e09a172b14ddd29134cfd930bcde78239ddc0c2",
      "filename": "src/core/client/framework/lib/jwt.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/coralproject/talk/blob/f73597d7d19ecd000e46723906c0757796fa52f5/src/core/client/framework/lib/jwt.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/f73597d7d19ecd000e46723906c0757796fa52f5/src/core/client/framework/lib/jwt.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/jwt.ts?ref=f73597d7d19ecd000e46723906c0757796fa52f5",
      "patch": "@@ -1,31 +0,0 @@\n-export interface JWT {\n-  header: {\n-    alg: string;\n-    typ: string;\n-  };\n-  payload: {\n-    [_: string]: any;\n-    iat?: number;\n-    exp?: number;\n-    iss?: string;\n-    sub?: string;\n-    jti?: string;\n-  };\n-  expired: boolean;\n-}\n-\n-export function parseJWT(token: string, skewTolerance = 300): JWT {\n-  const [headerBase64, payloadBase64] = token.split(\".\");\n-  if (!headerBase64 && !payloadBase64) {\n-    throw new Error(\"invalid jwt token\");\n-  }\n-  const header = JSON.parse(atob(headerBase64));\n-  const payload = JSON.parse(atob(payloadBase64));\n-  return {\n-    header,\n-    payload,\n-    get expired() {\n-      return Date.now() / 1000 + skewTolerance >= payload.exp;\n-    },\n-  };\n-}"
    },
    {
      "sha": "06d57ba784ce259417e84d17b1dcf2301bb59e1b",
      "filename": "src/core/client/framework/lib/network/createManagedSubscriptionClient.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 13,
      "changes": 22,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/network/createManagedSubscriptionClient.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/network/createManagedSubscriptionClient.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/network/createManagedSubscriptionClient.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -26,14 +26,14 @@ export interface SubscriptionRequest {\n }\n \n /**\n- * ManagedSubscriptionClient builts on top of `SubscriptionClient`\n+ * ManagedSubscriptionClient builds on top of `SubscriptionClient`\n  * and manages the websocket connection economically. A connection is\n- * only establish when there is at least 1 active susbcription and closes\n+ * only establish when there is at least 1 active subscription and closes\n  * when there is no more active subscriptions.\n  */\n export interface ManagedSubscriptionClient {\n   /**\n-   * Susbcribe to a GraphQL subscription, this is usually called from\n+   * Subscribe to a GraphQL subscription, this is usually called from\n    * the SubscriptionFunction provided to Relay.\n    */\n   subscribe(\n@@ -47,7 +47,7 @@ export interface ManagedSubscriptionClient {\n   /** Resume all subscriptions eventually causing websocket to start with new connection parameters */\n   resume(): void;\n   /** Sets access token and restarts the websocket connection */\n-  setAccessToken(accessToken: string): void;\n+  setAccessToken(accessToken?: string): void;\n }\n \n /**\n@@ -63,7 +63,7 @@ export default function createManagedSubscriptionClient(\n   const requests: SubscriptionRequest[] = [];\n   let subscriptionClient: SubscriptionClient | null = null;\n   let paused = false;\n-  let accessToken = \"\";\n+  let accessToken: string | undefined;\n \n   const closeClient = () => {\n     if (subscriptionClient) {\n@@ -143,7 +143,7 @@ export default function createManagedSubscriptionClient(\n     // Register the request.\n     requests.push(request as SubscriptionRequest);\n \n-    // Start susbcription if we are not paused.\n+    // Start subscription if we are not paused.\n     if (!paused) {\n       request.subscribe();\n     }\n@@ -179,7 +179,7 @@ export default function createManagedSubscriptionClient(\n         r.unsubscribe = null;\n       }\n     }\n-    // Close websocket conncetion.\n+    // Close websocket connection.\n     closeClient();\n   };\n \n@@ -193,12 +193,8 @@ export default function createManagedSubscriptionClient(\n     paused = false;\n   };\n \n-  const setAccessToken = (t: string) => {\n-    accessToken = t;\n-    if (!paused) {\n-      pause();\n-      resume();\n-    }\n+  const setAccessToken = (nextAccessToken?: string) => {\n+    accessToken = nextAccessToken;\n   };\n \n   return Object.freeze({"
    },
    {
      "sha": "f85f82fa9b784cc212e71741ed4083bbd71a502a",
      "filename": "src/core/client/framework/lib/network/createNetwork.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/network/createNetwork.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/network/createNetwork.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/network/createNetwork.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -10,13 +10,12 @@ import { GraphQLResponse, Observable, SubscribeFunction } from \"relay-runtime\";\n import TIME from \"coral-common/time\";\n import getLocationOrigin from \"coral-framework/utils/getLocationOrigin\";\n \n+import { AccessTokenProvider } from \"../auth\";\n import clientIDMiddleware from \"./clientIDMiddleware\";\n import { ManagedSubscriptionClient } from \"./createManagedSubscriptionClient\";\n import customErrorMiddleware from \"./customErrorMiddleware\";\n import persistedQueriesGetMethodMiddleware from \"./persistedQueriesGetMethodMiddleware\";\n \n-export type TokenGetter = () => string;\n-\n const graphqlURL = `${getLocationOrigin()}/api/graphql`;\n \n function createSubscriptionFunction(\n@@ -44,8 +43,8 @@ function createSubscriptionFunction(\n \n export default function createNetwork(\n   subscriptionClient: ManagedSubscriptionClient,\n-  tokenGetter: TokenGetter,\n-  clientID: string\n+  clientID: string,\n+  accessTokenProvider: AccessTokenProvider\n ) {\n   return new RelayNetworkLayer(\n     [\n@@ -70,7 +69,9 @@ export default function createNetwork(\n         },\n       }),\n       authMiddleware({\n-        token: tokenGetter,\n+        token: () => {\n+          return accessTokenProvider() || \"\";\n+        },\n       }),\n       clientIDMiddleware(clientID),\n       persistedQueriesGetMethodMiddleware,"
    },
    {
      "sha": "ad90a4978aa62b4c23b8ec7930d484aade2f3232",
      "filename": "src/core/client/framework/lib/network/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/network/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/network/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/network/index.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,4 +1,4 @@\n-export { default as createNetwork, TokenGetter } from \"./createNetwork\";\n+export { default as createNetwork } from \"./createNetwork\";\n export { default as extractGraphQLError } from \"./extractGraphQLError\";\n export { default as extractError } from \"./extractError\";\n export {"
    },
    {
      "sha": "b4d4628fe9e987daaa816382bbbd47ed9fcbea9d",
      "filename": "src/core/client/framework/lib/relay/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/relay/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/relay/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/relay/index.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -22,12 +22,7 @@ export {\n   commitMutationPromiseNormalized,\n } from \"./commitMutationPromise\";\n export { default as commitLocalUpdatePromisified } from \"./commitLocalUpdatePromisified\";\n-export {\n-  initLocalBaseState,\n-  setAccessTokenInLocalState,\n-  LOCAL_ID,\n-  LOCAL_TYPE,\n-} from \"./localState\";\n+export { initLocalBaseState, LOCAL_ID, LOCAL_TYPE } from \"./localState\";\n export {\n   fetchQuery,\n   createFetch,"
    },
    {
      "sha": "295e058588e2cb2054eea392451ad0d7ecce0d24",
      "filename": "src/core/client/framework/lib/relay/localState.ts",
      "status": "modified",
      "additions": 27,
      "deletions": 45,
      "changes": 72,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/relay/localState.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/relay/localState.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/relay/localState.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,13 +1,10 @@\n-import {\n-  commitLocalUpdate,\n-  Environment,\n-  RecordSourceProxy,\n-} from \"relay-runtime\";\n+import { commitLocalUpdate, Environment } from \"relay-runtime\";\n \n-import { CoralContext } from \"coral-framework/lib/bootstrap\";\n-import { parseJWT } from \"coral-framework/lib/jwt\";\n import { createAndRetain } from \"coral-framework/lib/relay\";\n \n+import { AuthState } from \"../auth\";\n+import { CoralContext } from \"../bootstrap\";\n+\n /**\n  * The Root Record of Client-Side Schema Extension must be of this type.\n  */\n@@ -18,48 +15,33 @@ export const LOCAL_TYPE = \"Local\";\n  */\n export const LOCAL_ID = \"client:root.local\";\n \n-export function setAccessTokenInLocalState(\n-  accessToken: string | null,\n-  source: RecordSourceProxy\n-) {\n-  const localRecord = source.get(LOCAL_ID)!;\n-  localRecord.setValue(accessToken || \"\", \"accessToken\");\n-  if (accessToken) {\n-    const { payload } = parseJWT(accessToken);\n-    // TODO: (cvle) maybe a timer to detect when accessToken has expired?\n-\n-    // Set the exp if it's valid.\n-    if (typeof payload.exp === \"number\") {\n-      localRecord.setValue(payload.exp, \"accessTokenExp\");\n-    } else {\n-      localRecord.setValue(null, \"accessTokenExp\");\n-    }\n-\n-    // Set the jti if it's valid.\n-    if (typeof payload.jti === \"string\" && payload.jti.length > 0) {\n-      localRecord.setValue(payload.jti, \"accessTokenJTI\");\n-    } else {\n-      localRecord.setValue(null, \"accessTokenJTI\");\n-    }\n-  } else {\n-    localRecord.setValue(null, \"accessTokenExp\");\n-    localRecord.setValue(null, \"accessTokenJTI\");\n-  }\n-}\n-\n-export async function initLocalBaseState(\n+/**\n+ * initLocalBaseState will initialize the local base relay state. If as a part\n+ * of your target you need to change the auth state, you can do so by passing a\n+ * new auth state object into this function when committing.\n+ *\n+ * @param environment the initialized relay environment\n+ * @param context application context\n+ * @param auth application auth state\n+ */\n+export function initLocalBaseState(\n   environment: Environment,\n-  { localStorage }: CoralContext,\n-  accessToken?: string | null\n+  context: CoralContext,\n+  auth?: AuthState\n ) {\n-  commitLocalUpdate(environment, (s) => {\n-    const root = s.getRoot();\n+  commitLocalUpdate(environment, (source) => {\n+    const root = source.getRoot();\n \n     // Create the Local Record which is the Root for the client states.\n-    const localRecord = createAndRetain(environment, s, LOCAL_ID, LOCAL_TYPE);\n-    root.setLinkedRecord(localRecord, \"local\");\n+    const local = createAndRetain(environment, source, LOCAL_ID, LOCAL_TYPE);\n+\n+    root.setLinkedRecord(local, \"local\");\n+\n+    // Update the access token properties.\n+    local.setValue(auth?.accessToken, \"accessToken\");\n \n-    // Set access token\n-    setAccessTokenInLocalState(accessToken || null, s);\n+    // Update the claims.\n+    local.setValue(auth?.claims.exp, \"accessTokenExp\");\n+    local.setValue(auth?.claims.jti, \"accessTokenJTI\");\n   });\n }"
    },
    {
      "sha": "96fbed9d86e886fb0c932bae3802cf3c8d71838f",
      "filename": "src/core/client/framework/lib/rest.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/rest.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/lib/rest.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/rest.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -3,6 +3,7 @@ import { merge } from \"lodash\";\n import { CLIENT_ID_HEADER } from \"coral-common/constants\";\n import { Overwrite } from \"coral-framework/types\";\n \n+import { AccessTokenProvider } from \"./auth\";\n import { extractError } from \"./network\";\n \n const buildOptions = (inputOptions: RequestInit = {}) => {\n@@ -53,36 +54,44 @@ type PartialRequestInit = Overwrite<Partial<RequestInit>, { body?: any }> & {\n \n export class RestClient {\n   public readonly uri: string;\n-  private tokenGetter?: () => string;\n   private clientID?: string;\n+  private accessTokenProvider?: AccessTokenProvider;\n \n-  constructor(uri: string, tokenGetter?: () => string, clientID?: string) {\n+  constructor(\n+    uri: string,\n+    clientID?: string,\n+    accessTokenProvider?: AccessTokenProvider\n+  ) {\n     this.uri = uri;\n-    this.tokenGetter = tokenGetter;\n     this.clientID = clientID;\n+    this.accessTokenProvider = accessTokenProvider;\n   }\n \n   public async fetch<T = {}>(\n     path: string,\n     options: PartialRequestInit\n   ): Promise<T> {\n     let opts = options;\n-    const token = options.token || (this.tokenGetter && this.tokenGetter());\n+    const token =\n+      options.token || (this.accessTokenProvider && this.accessTokenProvider());\n     if (token) {\n       opts = merge({}, options, {\n         headers: {\n           Authorization: `Bearer ${token}`,\n         },\n       });\n     }\n+\n     if (this.clientID) {\n       opts = merge({}, opts, {\n         headers: {\n           [CLIENT_ID_HEADER]: this.clientID,\n         },\n       });\n     }\n+\n     const response = await fetch(`${this.uri}${path}`, buildOptions(opts));\n+\n     return handleResp(response);\n   }\n }"
    },
    {
      "sha": "83278d22e2eb6eece605ece4bff372f32ff15829",
      "filename": "src/core/client/framework/testHelpers/createAccessToken.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/testHelpers/createAccessToken.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/testHelpers/createAccessToken.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/testHelpers/createAccessToken.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,13 +1,15 @@\n+const TOKEN_JTI = \"31b26591-4e9a-4388-a7ff-e1bdc5d97cce\";\n+\n+function encodePart(obj: object): string {\n+  return btoa(JSON.stringify(obj));\n+}\n+\n export default function createAccessToken(payload = {}) {\n-  return `${btoa(\n-    JSON.stringify({\n-      alg: \"HS256\",\n-      typ: \"JWT\",\n-    })\n-  )}.${btoa(\n-    JSON.stringify({\n-      jti: \"31b26591-4e9a-4388-a7ff-e1bdc5d97cce\",\n-      ...payload,\n-    })\n-  )}`;\n+  return [\n+    { kid: \"96c8066a-d987-4282-83f9-da516797f9fc\", alg: \"HS256\" },\n+    { jti: TOKEN_JTI, ...payload },\n+    null,\n+  ]\n+    .map((obj) => (obj ? encodePart(obj) : obj))\n+    .join(\".\");\n }"
    },
    {
      "sha": "e7a0d2b9e5afda30e24d3d0bd7ca9e8c41b3722f",
      "filename": "src/core/client/framework/testHelpers/createTestRenderer.tsx",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/testHelpers/createTestRenderer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/framework/testHelpers/createTestRenderer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/testHelpers/createTestRenderer.tsx?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -114,6 +114,7 @@ export default function createTestRenderer<\n       history: [],\n     },\n   };\n+\n   let testRenderer: ReactTestRenderer;\n   TestRenderer.act(() => {\n     testRenderer = TestRenderer.create("
    },
    {
      "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "filename": "src/core/client/install/constants.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/install/constants.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/install/constants.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/install/constants.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1 +0,0 @@\n-export const INSTALL_ACCESS_TOKEN_KEY = \"coral:install:accessToken\";"
    },
    {
      "sha": "68fb81a8a25b3922c4b8ad4cdf9ad5d9347a8ac0",
      "filename": "src/core/client/install/local/initLocalState.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 12,
      "changes": 18,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/install/local/initLocalState.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/install/local/initLocalState.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/install/local/initLocalState.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,33 +1,27 @@\n import { Environment } from \"relay-runtime\";\n \n import { clearHash, getParamsFromHash } from \"coral-framework/helpers\";\n+import { AuthState, storeAccessToken } from \"coral-framework/lib/auth\";\n import { CoralContext } from \"coral-framework/lib/bootstrap\";\n import { initLocalBaseState } from \"coral-framework/lib/relay\";\n \n-import { INSTALL_ACCESS_TOKEN_KEY } from \"../constants\";\n-\n /**\n  * Initializes the local state, before we start the App.\n  */\n export default async function initLocalState(\n   environment: Environment,\n-  context: CoralContext\n+  context: CoralContext,\n+  auth?: AuthState\n ) {\n-  // Get the access token from the session storage.\n-  let accessToken = await context.sessionStorage.getItem(\n-    INSTALL_ACCESS_TOKEN_KEY\n-  );\n-\n   // Get all the parameters from the hash.\n   const params = getParamsFromHash();\n   if (params && params.accessToken) {\n     // As there's an access token in the hash, let's clear it.\n     clearHash();\n \n-    // Save the token in session storage to override what we found.\n-    accessToken = params.accessToken;\n-    await context.sessionStorage.setItem(INSTALL_ACCESS_TOKEN_KEY, accessToken);\n+    // Save the token in storage.\n+    auth = storeAccessToken(params.accessToken);\n   }\n \n-  await initLocalBaseState(environment, context, accessToken);\n+  initLocalBaseState(environment, context, auth);\n }"
    },
    {
      "sha": "c49db3c3565ad246a40f1806b892aafe9aab011c",
      "filename": "src/core/client/stream/local/__snapshots__/initLocalState.spec.ts.snap",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/stream/local/__snapshots__/initLocalState.spec.ts.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/stream/local/__snapshots__/initLocalState.spec.ts.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/stream/local/__snapshots__/initLocalState.spec.ts.snap?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -12,9 +12,6 @@ exports[`init local state 1`] = `\n   \\\\\"client:root.local\\\\\": {\n     \\\\\"__id\\\\\": \\\\\"client:root.local\\\\\",\n     \\\\\"__typename\\\\\": \\\\\"Local\\\\\",\n-    \\\\\"accessToken\\\\\": \\\\\"\\\\\",\n-    \\\\\"accessTokenExp\\\\\": null,\n-    \\\\\"accessTokenJTI\\\\\": null,\n     \\\\\"commentsOrderBy\\\\\": \\\\\"CREATED_AT_DESC\\\\\",\n     \\\\\"authPopup\\\\\": {\n       \\\\\"__ref\\\\\": \\\\\"client:root.local.authPopup\\\\\""
    },
    {
      "sha": "5100b3ef196430f549f992d2c75a5b92973395f6",
      "filename": "src/core/client/stream/local/initLocalState.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/stream/local/initLocalState.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/stream/local/initLocalState.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/stream/local/initLocalState.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,6 +1,7 @@\n import { commitLocalUpdate, Environment } from \"relay-runtime\";\n \n import { parseQuery } from \"coral-common/utils\";\n+import { AuthState, storeAccessToken } from \"coral-framework/lib/auth\";\n import { CoralContext } from \"coral-framework/lib/bootstrap\";\n import { getExternalConfig } from \"coral-framework/lib/externalConfig\";\n import { createAndRetain, initLocalBaseState } from \"coral-framework/lib/relay\";\n@@ -13,14 +14,15 @@ import { AUTH_POPUP_ID, AUTH_POPUP_TYPE } from \"./constants\";\n  */\n export default async function initLocalState(\n   environment: Environment,\n-  context: CoralContext\n+  context: CoralContext,\n+  auth?: AuthState\n ) {\n   const config = await getExternalConfig(context.pym);\n-  await initLocalBaseState(\n-    environment,\n-    context,\n-    config ? config.accessToken : undefined\n-  );\n+  if (config && config.accessToken) {\n+    auth = storeAccessToken(config.accessToken);\n+  }\n+\n+  initLocalBaseState(environment, context, auth);\n \n   const commentsOrderBy =\n     (await context.localStorage.getItem(COMMENTS_ORDER_BY)) ||\n@@ -44,6 +46,7 @@ export default async function initLocalState(\n     if (query.commentID) {\n       localRecord.setValue(query.commentID, \"commentID\");\n     }\n+\n     // Set sort\n     localRecord.setValue(commentsOrderBy, \"commentsOrderBy\");\n \n@@ -63,7 +66,7 @@ export default async function initLocalState(\n     localRecord.setValue(\"COMMENTS\", \"activeTab\");\n     localRecord.setValue(\"MY_COMMENTS\", \"profileTab\");\n \n-    // Initilzie the comments tab to NONE for now, it will be initialized to an\n+    // Initialize the comments tab to NONE for now, it will be initialized to an\n     // actual tab when we find out how many feature comments there are.\n     localRecord.setValue(\"NONE\", \"commentsTab\");\n   });"
    },
    {
      "sha": "1978aa485a9a829ec27a41396e303baf066ae7cd",
      "filename": "src/core/common/utils/timeout.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/common/utils/timeout.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/common/utils/timeout.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/common/utils/timeout.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,4 +1,6 @@\n+import { setLongTimeout } from \"long-settimeout\";\n+\n /** A promisified timeout. */\n export default function timeout(ms = 0) {\n-  return new Promise((resolve) => setTimeout(resolve, ms));\n+  return new Promise((resolve) => setLongTimeout(resolve, ms));\n }"
    },
    {
      "sha": "f42917601391c1d2ae18a5fcd7faf685a046f82a",
      "filename": "src/core/server/app/middleware/passport/index.ts",
      "status": "modified",
      "additions": 43,
      "deletions": 39,
      "changes": 82,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/server/app/middleware/passport/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/server/app/middleware/passport/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/index.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,8 +1,7 @@\n import Joi from \"@hapi/joi\";\n-import { CookieOptions, NextFunction, RequestHandler, Response } from \"express\";\n+import { NextFunction, RequestHandler, Response } from \"express\";\n import { Redis } from \"ioredis\";\n import jwt from \"jsonwebtoken\";\n-import { DateTime } from \"luxon\";\n import passport, { Authenticator } from \"passport\";\n \n import { stringifyQuery } from \"coral-common/utils\";\n@@ -16,7 +15,6 @@ import { validate } from \"coral-server/app/request/body\";\n import { AuthenticationError } from \"coral-server/errors\";\n import { User } from \"coral-server/models/user\";\n import {\n-  COOKIE_NAME,\n   extractTokenFromRequest,\n   JWTSigningConfig,\n   revokeJWT,\n@@ -95,8 +93,9 @@ export async function handleLogout(redis: Redis, req: Request, res: Response) {\n     await revokeJWT(redis, jti, exp, now);\n   }\n \n-  // Clear the cookie.\n-  res.clearCookie(COOKIE_NAME, generateCookieOptions(req, new Date(0)));\n+  // NOTE: disabled cookie support due to ITP/First Party Cookie bugs\n+  // // Clear the cookie.\n+  // res.clearCookie(COOKIE_NAME, generateCookieOptions(req, new Date(0)));\n \n   return res.sendStatus(204);\n }\n@@ -115,11 +114,6 @@ export async function handleSuccessfulLogin(\n     // Tenant is guaranteed at this point.\n     const tenant = coral.tenant!;\n \n-    // Compute the expiry date.\n-    const expiresIn = DateTime.fromJSDate(coral.now).plus({\n-      seconds: tenant.auth.sessionDuration,\n-    });\n-\n     // Grab the token.\n     const token = await signTokenString(\n       signingConfig,\n@@ -133,11 +127,18 @@ export async function handleSuccessfulLogin(\n     res.header(\"Cache-Control\", \"private, no-cache, no-store, must-revalidate\");\n     res.header(\"Expires\", \"-1\");\n     res.header(\"Pragma\", \"no-cache\");\n-    res.cookie(\n-      COOKIE_NAME,\n-      token,\n-      generateCookieOptions(req, expiresIn.toJSDate())\n-    );\n+\n+    // NOTE: disabled cookie support due to ITP/First Party Cookie bugs\n+    // // Compute the expiry date.\n+    // const expiresIn = DateTime.fromJSDate(coral.now).plus({\n+    //   seconds: tenant.auth.sessionDuration,\n+    // });\n+    //\n+    // res.cookie(\n+    //   COOKIE_NAME,\n+    //   token,\n+    //   generateCookieOptions(req, expiresIn.toJSDate())\n+    // );\n \n     // Send back the details!\n     res.json({ token });\n@@ -146,20 +147,21 @@ export async function handleSuccessfulLogin(\n   }\n }\n \n-const generateCookieOptions = (\n-  req: Request,\n-  expiresIn: Date\n-): CookieOptions => ({\n-  path: \"/api\",\n-  httpOnly: true,\n-  secure: req.secure,\n-  // Chrome will ignore `SameSite: None` when not used in a secure context\n-  // anyways, so don't bother setting `None` when we're not secure. The only\n-  // time we aren't behind HTTPS is when we're testing/in development where the\n-  // the setting for `SameSite: Lax` would be OK.\n-  sameSite: req.secure ? \"none\" : \"lax\",\n-  expires: expiresIn,\n-});\n+// NOTE: disabled cookie support due to ITP/First Party Cookie bugs\n+// const generateCookieOptions = (\n+//   req: Request,\n+//   expiresIn: Date\n+// ): CookieOptions => ({\n+//   path: \"/api\",\n+//   httpOnly: true,\n+//   secure: req.secure,\n+//   // Chrome will ignore `SameSite: None` when not used in a secure context\n+//   // anyways, so don't bother setting `None` when we're not secure. The only\n+//   // time we aren't behind HTTPS is when we're testing/in development where the\n+//   // the setting for `SameSite: Lax` would be OK.\n+//   sameSite: req.secure ? \"none\" : \"lax\",\n+//   expires: expiresIn,\n+// });\n \n function redirectWithHash(\n   res: Response,\n@@ -191,11 +193,6 @@ export async function handleOAuth2Callback(\n     const coral = req.coral!;\n     const tenant = coral.tenant!;\n \n-    // Compute the expiry date.\n-    const expiresIn = DateTime.fromJSDate(coral.now).plus({\n-      seconds: tenant.auth.sessionDuration,\n-    });\n-\n     // Grab the token.\n     const accessToken = await signTokenString(\n       signingConfig,\n@@ -204,11 +201,18 @@ export async function handleOAuth2Callback(\n       {},\n       coral.now\n     );\n-    res.cookie(\n-      COOKIE_NAME,\n-      accessToken,\n-      generateCookieOptions(req, expiresIn.toJSDate())\n-    );\n+\n+    // NOTE: disabled cookie support due to ITP/First Party Cookie bugs\n+    // // Compute the expiry date.\n+    // const expiresIn = DateTime.fromJSDate(coral.now).plus({\n+    //   seconds: tenant.auth.sessionDuration,\n+    // });\n+    //\n+    // res.cookie(\n+    //   COOKIE_NAME,\n+    //   accessToken,\n+    //   generateCookieOptions(req, expiresIn.toJSDate())\n+    // );\n \n     // Send back the details!\n     return redirectWithHash(res, path, { accessToken });"
    },
    {
      "sha": "687598baeae075ecd0257b9d30b4261e4d0b9337",
      "filename": "src/core/server/app/router/index.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/server/app/router/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/server/app/router/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/router/index.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,4 +1,3 @@\n-import cookies from \"cookie-parser\";\n import express, { Router } from \"express\";\n \n import { LanguageCode } from \"coral-common/helpers/i18n/locales\";\n@@ -16,7 +15,10 @@ export function createRouter(app: AppOptions, options: RouterOptions) {\n   const router = express.Router();\n \n   // Attach the API router.\n-  router.use(\"/api\", cookies(), createAPIRouter(app, options));\n+\n+  // NOTE: disabled cookie support due to ITP/First Party Cookie bugs\n+  // router.use(\"/api\", cookies(), createAPIRouter(app, options));\n+  router.use(\"/api\", createAPIRouter(app, options));\n \n   // Attach the GraphiQL if enabled.\n   if (app.config.get(\"enable_graphiql\")) {"
    },
    {
      "sha": "23874e59d6b1618186daca8af334b84c3c4a28fb",
      "filename": "src/core/server/services/jwt/index.ts",
      "status": "modified",
      "additions": 35,
      "deletions": 35,
      "changes": 70,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/server/services/jwt/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/server/services/jwt/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/jwt/index.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,5 +1,4 @@\n import Joi from \"@hapi/joi\";\n-import cookie from \"cookie\";\n import { IncomingMessage } from \"http\";\n import { Redis } from \"ioredis\";\n import jwt, { KeyFunction, SignOptions, VerifyOptions } from \"jsonwebtoken\";\n@@ -293,10 +292,11 @@ export async function signString<T extends {}>(\n   return jwt.sign(payload, secret, { ...options, algorithm });\n }\n \n-/**\n- * COOKIE_NAME is the name of the authorization cookie used by Coral.\n- */\n-export const COOKIE_NAME = \"authorization\";\n+// NOTE: disabled cookie support due to ITP/First Party Cookie bugs\n+// /**\n+//  * COOKIE_NAME is the name of the authorization cookie used by Coral.\n+//  */\n+// export const COOKIE_NAME = \"authorization\";\n \n /**\n  * isExpressRequest will check to see if this is a Request or an\n@@ -315,31 +315,32 @@ export function isExpressRequest(\n   return true;\n }\n \n-/**\n- * extractJWTFromRequestCookie will parse the cookies off of the request if it\n- * can.\n- *\n- * @param req the incoming request possibly containing a cookie\n- */\n-function extractJWTFromRequestCookie(\n-  req: Request | IncomingMessage\n-): string | null {\n-  if (!isExpressRequest(req)) {\n-    // Grab the cookie header.\n-    const header = req.headers.cookie;\n-    if (typeof header !== \"string\" || header.length === 0) {\n-      return null;\n-    }\n-\n-    // Parse the cookies from that header.\n-    const cookies = cookie.parse(header);\n-    return cookies[COOKIE_NAME] || null;\n-  }\n-\n-  return req.cookies && req.cookies[COOKIE_NAME]\n-    ? req.cookies[COOKIE_NAME]\n-    : null;\n-}\n+// NOTE: disabled cookie support due to ITP/First Party Cookie bugs\n+// /**\n+//  * extractJWTFromRequestCookie will parse the cookies off of the request if it\n+//  * can.\n+//  *\n+//  * @param req the incoming request possibly containing a cookie\n+//  */\n+// function extractJWTFromRequestCookie(\n+//   req: Request | IncomingMessage\n+// ): string | null {\n+//   if (!isExpressRequest(req)) {\n+//     // Grab the cookie header.\n+//     const header = req.headers.cookie;\n+//     if (typeof header !== \"string\" || header.length === 0) {\n+//       return null;\n+//     }\n+\n+//     // Parse the cookies from that header.\n+//     const cookies = cookie.parse(header);\n+//     return cookies[COOKIE_NAME] || null;\n+//   }\n+\n+//   return req.cookies && req.cookies[COOKIE_NAME]\n+//     ? req.cookies[COOKIE_NAME]\n+//     : null;\n+// }\n \n /**\n  *\n@@ -365,7 +366,7 @@ function extractJWTFromRequestHeaders(\n \n /**\n  * extractJWTFromRequest will extract the token from the request if it can find\n- * it. It first tries to get the token from the headers, then from the cookie.\n+ * it. It will try to extract the token from the headers.\n  *\n  * @param req the request to extract the JWT from\n  * @param excludeQuery when true, does not pull from the query params\n@@ -374,10 +375,9 @@ export function extractTokenFromRequest(\n   req: Request | IncomingMessage,\n   excludeQuery = false\n ): string | null {\n-  return (\n-    extractJWTFromRequestHeaders(req, excludeQuery) ||\n-    extractJWTFromRequestCookie(req)\n-  );\n+  // NOTE: disabled cookie support due to ITP/First Party Cookie bugs\n+  // return extractJWTFromRequestHeaders(req, excludeQuery)|| extractJWTFromRequestCookie(req)\n+  return extractJWTFromRequestHeaders(req, excludeQuery);\n }\n \n function generateJTIRevokedKey(jti: string) {"
    }
  ]
}
