{
  "sha": "0b13e8a8d2774b3c24d947beac61e0cd195008e7",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjBiMTNlOGE4ZDI3NzRiM2MyNGQ5NDdiZWFjNjFlMGNkMTk1MDA4ZTc=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-03-29T21:24:59Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-03-29T21:24:59Z"
    },
    "message": "update backend deps from go-pkgz (#935)",
    "tree": {
      "sha": "a9f306058f864912cbe727f3dc892a35c13cdb0c",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/a9f306058f864912cbe727f3dc892a35c13cdb0c"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/0b13e8a8d2774b3c24d947beac61e0cd195008e7",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgYkWrCRBK7hj4Ov3rIwAAdHIIAJ+aQMyEuQ18lnuuQHjQFXiB\npCtvExukNncI1PHoKzIr/fWuioIEF6qrk2TP8dUCTWtR/Vy2FeCxWGJuyL87kC8L\nIfQ3pe01EoWNq0xLIXJPmGT35NtNnmSy4rsgdeku5KxmpgqbU9L5ASYSs9QnI8kd\nsmeo9H9H5wpW51KsaSzrqD9Jy6sv+tVw+2AUgH3V7ISRK6r+pA1FV7ITgMggofIM\npuyI3KOryC/e15axEr5svnMu+eEfZftoB85F8gWIVWD+7tkurmw4vQI1NfmdJGmN\nnWAdfcxcGVS7q0GJQNN+2FOtYhJgPD846AEtQkUDJURJkyzh22g6cFA6TYvmDWI=\n=3bFF\n-----END PGP SIGNATURE-----\n",
      "payload": "tree a9f306058f864912cbe727f3dc892a35c13cdb0c\nparent 5fabbe33d9b44163c732edde83bcbefeb45cfbd3\nauthor Umputun <umputun@gmail.com> 1617053099 -0500\ncommitter GitHub <noreply@github.com> 1617053099 -0500\n\nupdate backend deps from go-pkgz (#935)\n\n"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/0b13e8a8d2774b3c24d947beac61e0cd195008e7",
  "html_url": "https://github.com/umputun/remark42/commit/0b13e8a8d2774b3c24d947beac61e0cd195008e7",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/0b13e8a8d2774b3c24d947beac61e0cd195008e7/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5fabbe33d9b44163c732edde83bcbefeb45cfbd3",
      "url": "https://api.github.com/repos/umputun/remark42/commits/5fabbe33d9b44163c732edde83bcbefeb45cfbd3",
      "html_url": "https://github.com/umputun/remark42/commit/5fabbe33d9b44163c732edde83bcbefeb45cfbd3"
    }
  ],
  "stats": {
    "total": 226,
    "additions": 130,
    "deletions": 96
  },
  "files": [
    {
      "sha": "ebdfbf7ab9f20426be4c2512de06c456bc81d1fe",
      "filename": "backend/go.mod",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/go.mod?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -1,6 +1,6 @@\n module github.com/umputun/remark42/backend\n \n-go 1.14\n+go 1.15\n \n require (\n \tgithub.com/Depado/bfchroma v1.2.0\n@@ -12,12 +12,12 @@ require (\n \tgithub.com/go-chi/chi v4.1.1+incompatible\n \tgithub.com/go-chi/cors v1.1.1\n \tgithub.com/go-chi/render v1.0.1\n-\tgithub.com/go-pkgz/auth v1.14.0\n+\tgithub.com/go-pkgz/auth v1.15.0\n \tgithub.com/go-pkgz/jrpc v0.2.0\n \tgithub.com/go-pkgz/lcw v0.8.1\n \tgithub.com/go-pkgz/lgr v0.10.4\n \tgithub.com/go-pkgz/repeater v1.1.3\n-\tgithub.com/go-pkgz/rest v1.5.0\n+\tgithub.com/go-pkgz/rest v1.7.0\n \tgithub.com/go-pkgz/syncs v1.1.1\n \tgithub.com/google/uuid v1.1.2\n \tgithub.com/gorilla/feeds v1.1.1"
    },
    {
      "sha": "3b63b47248883b227ff11714d5529f62c75d9d63",
      "filename": "backend/go.sum",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/go.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/go.sum?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -64,8 +64,8 @@ github.com/go-chi/cors v1.1.1 h1:eHuqxsIw89iXcWnWUN8R72JMibABJTN/4IOYI5WERvw=\n github.com/go-chi/cors v1.1.1/go.mod h1:K2Yje0VW/SJzxiyMYu6iPQYa7hMjQX2i/F491VChg1I=\n github.com/go-chi/render v1.0.1 h1:4/5tis2cKaNdnv9zFLfXzcquC9HbeZgCnxGnKrltBS8=\n github.com/go-chi/render v1.0.1/go.mod h1:pq4Rr7HbnsdaeHagklXub+p6Wd16Af5l9koip1OvJns=\n-github.com/go-pkgz/auth v1.14.0 h1:fVNEcn9ry8v45sclcXo2wzrFaXtWX+Q5Th2qm7FRGX4=\n-github.com/go-pkgz/auth v1.14.0/go.mod h1:1GVd61pXZcuJ0ZnOUdCTY08V8SreO7MJtsvEd5/WEWA=\n+github.com/go-pkgz/auth v1.15.0 h1:77z+YdcxHkRcjJSQc1SBtqIrZbp3p8Zo72ZRR3QKsLk=\n+github.com/go-pkgz/auth v1.15.0/go.mod h1:1HTdNEBMSFRCXoJLLjgCRs8t/gt2TQUaqf6wgYRvsTo=\n github.com/go-pkgz/expirable-cache v0.0.3 h1:rTh6qNPp78z0bQE6HDhXBHUwqnV9i09Vm6dksJLXQDc=\n github.com/go-pkgz/expirable-cache v0.0.3/go.mod h1:+IauqN00R2FqNRLCLA+X5YljQJrwB179PfiAoMPlTlQ=\n github.com/go-pkgz/jrpc v0.2.0 h1:CLy/eZyekjraVrxZV18N2R1mYLMJ/nWrgdfyIOGPY/E=\n@@ -76,8 +76,10 @@ github.com/go-pkgz/lgr v0.10.4 h1:l7qyFjqEZgwRgaQQSEp6tve4A3OU80VrfzpvtEX8ngw=\n github.com/go-pkgz/lgr v0.10.4/go.mod h1:CD0s1z6EFpIUplV067gitF77tn25JItzwHNKAPqeCF0=\n github.com/go-pkgz/repeater v1.1.3 h1:q6+JQF14ESSy28Dd7F+wRelY4F+41HJ0LEy/szNnMiE=\n github.com/go-pkgz/repeater v1.1.3/go.mod h1:hVTavuO5x3Gxnu8zW7d6sQBfAneKV8X2FjU48kGfpKw=\n-github.com/go-pkgz/rest v1.5.0 h1:C8SxXcXza4GiUUAn/95iCkvoIrGbS30qpwK19iqlrWQ=\n github.com/go-pkgz/rest v1.5.0/go.mod h1:nQaM3RhSTUAmbBZWY4hfe4buyeC9VckvhoCktiQXJxI=\n+github.com/go-pkgz/rest v1.6.0/go.mod h1:FKpgK5FgSqREG323OIU/JpIc0xA7dqay9BmK7LZXTQE=\n+github.com/go-pkgz/rest v1.7.0 h1:5KHWmYPZaJfd6+Htx8bCJ2InVSHJ85MGh8kuO72SAjU=\n+github.com/go-pkgz/rest v1.7.0/go.mod h1:FKpgK5FgSqREG323OIU/JpIc0xA7dqay9BmK7LZXTQE=\n github.com/go-pkgz/syncs v1.1.1 h1:jWN+y6FS/Xe+8z4l3QMbSnODGyaxDHGojIS+wyKIjxg=\n github.com/go-pkgz/syncs v1.1.1/go.mod h1:bt9lxWRRJ9vOCMGc8Big8ttjYHLKP88ofj1y38UlaHE=\n github.com/go-redis/redis/v7 v7.4.0 h1:7obg6wUoj05T0EpY0o8B59S9w5yeMWql7sw2kwNW1x4="
    },
    {
      "sha": "b47d4d9955a024856ccb5193d10013564af29fb5",
      "filename": "backend/remark.rest",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/remark.rest",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/remark.rest",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/remark.rest?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -147,3 +147,17 @@ X-JWT: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJyZW1hcmsiLCJleHAiOjE2NTc3\n \n ### ping\n GET {{host}}/ping\n+\n+\n+### create comment with bad locator.url, dev token for secret=12345, not admin\n+POST {{host}}/api/v1/comment\n+Content-Type: application/json\n+X-JWT: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJyZW1hcmsiLCJleHAiOjE2MTY3OTQ2NTMsImp0aSI6ImNjOGVlNzNlNjM4MzQ1Mjc1MmZjN2M3ZmQ0MmE4MDIzZDY3ZWFiMDIiLCJpYXQiOjE2MTY3OTQzNTMsImlzcyI6InJlbWFyazQyIiwidXNlciI6eyJuYW1lIjoic29tZW9uZSIsImlkIjoiYW5vbnltb3VzX2NhMjlmMjkwOTU3NGE3Zjk3YjRkNGU4YmIwOTU1N2IxMDM1ODE4YjAiLCJwaWN0dXJlIjoiaHR0cHM6Ly9kZW1vLnJlbWFyazQyLmNvbS9hcGkvdjEvYXZhdGFyLzZlMTU5OGE5MWM4MWZlZjhmOGU5MzMwODg4ZWJiZjVlMzkzODVkYTkuaW1hZ2UiLCJhdHRycyI6eyJhZG1pbiI6ZmFsc2UsImJsb2NrZWQiOmZhbHNlfX19.TUEr1qN0j9WGx1jlOL-rc14qjuenH56yI-5_xF9FSGY\n+\n+{\n+\t\"text\": \"comment *blah* http://radio-t.com\",\n+\t\"locator\": {\n+\t\t\"url\": \"javascript:alert('XSS1')\",\n+\t\t\"site\": \"{{site}}\"\n+\t}\n+}"
    },
    {
      "sha": "2c09a37228a22cd5b50e58b2747c5b55f793a7b3",
      "filename": "backend/vendor/github.com/go-pkgz/auth/.gitignore",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/.gitignore",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/.gitignore",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/.gitignore?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -11,4 +11,5 @@\n # Output of the go coverage tool, specifically when used with LiteIDE\n *.out\n .vscode\n-*.cov\n\\ No newline at end of file\n+*.cov\n+Dockerfile\n\\ No newline at end of file"
    },
    {
      "sha": "5d875a147863444a88d1b061ef91e177a01457b3",
      "filename": "backend/vendor/github.com/go-pkgz/auth/README.md",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/README.md?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -366,10 +366,10 @@ In order to allow `aud` support the list of allowed audiences should be passed i\n \n ### Dev provider\n \n-Working with oauth2 providers can be a pain, especially during development phase. A special, development-only provider `dev` can make it less painful. This one can be registered directly, i.e. `service.AddProvider(\"dev\", \"\", \"\")` and should be activated like this:\n+Working with oauth2 providers can be a pain, especially during development phase. A special, development-only provider `dev` can make it less painful. This one can be registered directly, i.e. `service.AddProvider(\"dev\", \"\", \"\")` or `service.AddDevProvider(port)` and should be activated like this:\n \n ```go\n-\t// runs dev oauth2 server on :8084\n+\t// runs dev oauth2 server on :8084 by default\n \tgo func() {\n \t\tdevAuthServer, err := service.DevAuth()\n \t\tif err != nil {"
    },
    {
      "sha": "83cde5689f4123e991c9fcb3af03864ae7ac970a",
      "filename": "backend/vendor/github.com/go-pkgz/auth/auth.go",
      "status": "modified",
      "additions": 18,
      "deletions": 5,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/auth.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/auth.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/auth.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -159,15 +159,15 @@ func (s *Service) Handlers() (authHandler, avatarHandler http.Handler) {\n \t\t\tfor _, p := range s.providers {\n \t\t\t\tlist = append(list, p.Name())\n \t\t\t}\n-\t\t\trest.RenderJSON(w, r, list)\n+\t\t\trest.RenderJSON(w, list)\n \t\t\treturn\n \t\t}\n \n \t\t// allow logout without specifying provider\n \t\tif elems[len(elems)-1] == \"logout\" {\n \t\t\tif len(s.providers) == 0 {\n \t\t\t\tw.WriteHeader(http.StatusBadRequest)\n-\t\t\t\trest.RenderJSON(w, r, rest.JSON{\"error\": \"provides not defined\"})\n+\t\t\t\trest.RenderJSON(w, rest.JSON{\"error\": \"provides not defined\"})\n \t\t\t\treturn\n \t\t\t}\n \t\t\ts.providers[0].Handler(w, r)\n@@ -179,10 +179,10 @@ func (s *Service) Handlers() (authHandler, avatarHandler http.Handler) {\n \t\t\tclaims, _, err := s.jwtService.Get(r)\n \t\t\tif err != nil {\n \t\t\t\tw.WriteHeader(http.StatusUnauthorized)\n-\t\t\t\trest.RenderJSON(w, r, rest.JSON{\"error\": err.Error()})\n+\t\t\t\trest.RenderJSON(w, rest.JSON{\"error\": err.Error()})\n \t\t\t\treturn\n \t\t\t}\n-\t\t\trest.RenderJSON(w, r, claims.User)\n+\t\t\trest.RenderJSON(w, claims.User)\n \t\t\treturn\n \t\t}\n \n@@ -191,7 +191,7 @@ func (s *Service) Handlers() (authHandler, avatarHandler http.Handler) {\n \t\tp, err := s.Provider(provName)\n \t\tif err != nil {\n \t\t\tw.WriteHeader(http.StatusBadRequest)\n-\t\t\trest.RenderJSON(w, r, rest.JSON{\"error\": fmt.Sprintf(\"provider %s not supported\", provName)})\n+\t\t\trest.RenderJSON(w, rest.JSON{\"error\": fmt.Sprintf(\"provider %s not supported\", provName)})\n \t\t\treturn\n \t\t}\n \t\tp.Handler(w, r)\n@@ -242,6 +242,19 @@ func (s *Service) AddProvider(name, cid, csecret string) {\n \ts.authMiddleware.Providers = s.providers\n }\n \n+// AddDevProvider with a custom port\n+func (s *Service) AddDevProvider(port int) {\n+\tp := provider.Params{\n+\t\tURL:         s.opts.URL,\n+\t\tJwtService:  s.jwtService,\n+\t\tIssuer:      s.issuer,\n+\t\tAvatarSaver: s.avatarProxy,\n+\t\tL:           s.logger,\n+\t\tPort:        port,\n+\t}\n+\ts.providers = append(s.providers, provider.NewService(provider.NewDev(p)))\n+}\n+\n // AddCustomProvider adds custom provider (e.g. https://gopkg.in/oauth2.v3)\n func (s *Service) AddCustomProvider(name string, client Client, copts provider.CustomHandlerOpt) {\n \tp := provider.Params{"
    },
    {
      "sha": "5c59a81ca8fd2dd718cc2268928183940117cbbb",
      "filename": "backend/vendor/github.com/go-pkgz/auth/go.mod",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/go.mod?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -1,12 +1,12 @@\n module github.com/go-pkgz/auth\n \n-go 1.14\n+go 1.15\n \n require (\n \tgithub.com/dghubble/oauth1 v0.6.0\n \tgithub.com/dgrijalva/jwt-go v3.2.0+incompatible\n \tgithub.com/go-pkgz/repeater v1.1.3\n-\tgithub.com/go-pkgz/rest v1.5.0\n+\tgithub.com/go-pkgz/rest v1.6.0\n \tgithub.com/microcosm-cc/bluemonday v1.0.2\n \tgithub.com/nullrocks/identicon v0.0.0-20180626043057-7875f45b0022\n \tgithub.com/pkg/errors v0.9.1"
    },
    {
      "sha": "8db3c245ba2a698e8d9e304efba4c79d46fb7286",
      "filename": "backend/vendor/github.com/go-pkgz/auth/go.sum",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/go.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/go.sum?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -22,8 +22,8 @@ github.com/gavv/httpexpect v2.0.0+incompatible h1:1X9kcRshkSKEjNJJxX9Y9mQ5BRfbxU\n github.com/gavv/httpexpect v2.0.0+incompatible/go.mod h1:x+9tiU1YnrOvnB725RkpoLv1M62hOWzwo5OXotisrKc=\n github.com/go-pkgz/repeater v1.1.3 h1:q6+JQF14ESSy28Dd7F+wRelY4F+41HJ0LEy/szNnMiE=\n github.com/go-pkgz/repeater v1.1.3/go.mod h1:hVTavuO5x3Gxnu8zW7d6sQBfAneKV8X2FjU48kGfpKw=\n-github.com/go-pkgz/rest v1.5.0 h1:C8SxXcXza4GiUUAn/95iCkvoIrGbS30qpwK19iqlrWQ=\n-github.com/go-pkgz/rest v1.5.0/go.mod h1:nQaM3RhSTUAmbBZWY4hfe4buyeC9VckvhoCktiQXJxI=\n+github.com/go-pkgz/rest v1.6.0 h1:mowpdpVsgofMJsfoqeUFUrF5efXPHpXJkQDoy13OKcA=\n+github.com/go-pkgz/rest v1.6.0/go.mod h1:FKpgK5FgSqREG323OIU/JpIc0xA7dqay9BmK7LZXTQE=\n github.com/go-session/session v3.1.2+incompatible/go.mod h1:8B3iivBQjrz/JtC68Np2T1yBBLxTan3mn/3OM0CyRt0=\n github.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\n github.com/go-stack/stack v1.8.0 h1:5SgMzNM5HxrEjV0ww2lTmX6E2Izsfxas4+YHWRs3Lsk=\n@@ -110,9 +110,7 @@ github.com/onsi/ginkgo v1.10.2/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+\n github.com/onsi/gomega v1.7.0 h1:XPnZz8VVBHjVsy1vzJmRwIcSwiUO+JFfrv/xGiigmME=\n github.com/onsi/gomega v1.7.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\n github.com/pelletier/go-toml v1.7.0/go.mod h1:vwGMzjaWMwyfHwgIBhI2YUM4fB6nL6lVAvS1LBMMhTE=\n-github.com/pkg/errors v0.8.0 h1:WdK/asTD0HN+q6hsWO3/vpuAkAr+tw6aNJNDFFf0+qw=\n github.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\n-github.com/pkg/errors v0.8.1 h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=\n github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\n github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\n github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\n@@ -133,10 +131,8 @@ github.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9\n github.com/spf13/cobra v0.0.3/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=\n github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\n github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\n-github.com/stretchr/objx v0.1.1 h1:2vfRuCMp5sSVIDSqO8oNnWJq7mPa6KVP3iPIwFBuy8A=\n github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\n github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\n-github.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=\n github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\n github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\n github.com/stretchr/testify v1.6.1 h1:hDPOHmpOpP40lSULcqw7IrRb/u7w6RpDC9399XyoNd0=\n@@ -197,20 +193,16 @@ golang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73r\n golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\n golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\n-golang.org/x/net v0.0.0-20190827160401-ba9fcec4b297 h1:k7pJ2yAPLPgbskkFdhRCsA77k2fySZ1zf2zCjvQCiIM=\n golang.org/x/net v0.0.0-20190827160401-ba9fcec4b297/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/net v0.0.0-20200202094626-16171245cfb2 h1:CCH4IOTTfewWjGOlSp+zGcjutRKlBEZQ6wTn8ozI/nI=\n golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n-golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45 h1:SVwTIAaPC2U/AvvLNZ2a7OVsmBpC8L5BlwK1whH3hm0=\n golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\n golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d h1:TzXSXBo42m9gQenoE3b9BGiEpg5IG2JkU5FkPIawgtw=\n golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\n golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n-golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4 h1:YUO/7uOKsKeq9UokNS62b8FYywz3ker1l1vDZRCRefw=\n golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20190412183630-56d357773e84/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n-golang.org/x/sync v0.0.0-20190423024810-112230192c58 h1:8gQV6CLnAEikrhgkHFbMAEhagSSnXWGV915qUMm9mrU=\n golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e h1:vcxGaoTs7kV8m5Np9uUNQin4BrLOthgV7252N8V+FwY=\n golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n@@ -248,9 +240,7 @@ gopkg.in/oauth2.v3 v3.12.0 h1:yOffAPoolH/i2JxwmC+pgtnY3362iPahsDpLXfDFvNg=\n gopkg.in/oauth2.v3 v3.12.0/go.mod h1:XEYgKqWX095YiPT+Aw5y3tCn+7/FMnlTFKrupgSiJ3I=\n gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=\n gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\n-gopkg.in/yaml.v2 v2.2.1 h1:mUhvW9EsL+naU5Q3cakzfE91YhliOondGd6ZrsDBHQE=\n gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n-gopkg.in/yaml.v2 v2.2.2 h1:ZCJp+EgiOT7lHqUV2J862kp8Qj64Jo6az82+3Td9dZw=\n gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n gopkg.in/yaml.v2 v2.2.8 h1:obN1ZagJSUGI0Ek/LBmuj4SNLPfIny3KsKFopxRdj10=\n gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI="
    },
    {
      "sha": "e76ec33bd707075f388e38eb9fbd57a33c5e098a",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/dev_provider.go",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/dev_provider.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/dev_provider.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/dev_provider.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -16,7 +16,7 @@ import (\n \t\"github.com/go-pkgz/auth/token\"\n )\n \n-const devAuthPort = 8084\n+const defDevAuthPort = 8084\n \n // DevAuthServer is a fake oauth server for development\n // it provides stand-alone server running on its own port and pretending to be the real oauth2. It also provides\n@@ -35,8 +35,11 @@ type DevAuthServer struct {\n \n // Run oauth2 dev server on port devAuthPort\n func (d *DevAuthServer) Run(ctx context.Context) { //nolint (gocyclo)\n+\tif d.Provider.Port == 0 {\n+\t\td.Provider.Port = defDevAuthPort\n+\t}\n \td.username = \"dev_user\"\n-\td.Logf(\"[INFO] run local oauth2 dev server on %d, redirect url=%s\", devAuthPort, d.Provider.conf.RedirectURL)\n+\td.Logf(\"[INFO] run local oauth2 dev server on %d, redirect url=%s\", d.Provider.Port, d.Provider.conf.RedirectURL)\n \td.lock.Lock()\n \tvar err error\n \n@@ -47,7 +50,7 @@ func (d *DevAuthServer) Run(ctx context.Context) { //nolint (gocyclo)\n \t}\n \n \td.httpServer = &http.Server{\n-\t\tAddr: fmt.Sprintf(\":%d\", devAuthPort),\n+\t\tAddr: fmt.Sprintf(\":%d\", d.Provider.Port),\n \t\tHandler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\t\td.Logf(\"[DEBUG] dev oauth request %s %s %+v\", r.Method, r.URL, r.Header)\n \t\t\tswitch {\n@@ -91,7 +94,7 @@ func (d *DevAuthServer) Run(ctx context.Context) { //nolint (gocyclo)\n \t\t\t\t}\n \n \t\t\tcase strings.HasPrefix(r.URL.Path, \"/user\"):\n-\t\t\t\tava := fmt.Sprintf(\"http://127.0.0.1:%d/avatar?user=%s\", devAuthPort, d.username)\n+\t\t\t\tava := fmt.Sprintf(\"http://127.0.0.1:%d/avatar?user=%s\", d.Provider.Port, d.username)\n \t\t\t\tres := fmt.Sprintf(`{\n \t\t\t\t\t\"id\": \"%s\",\n \t\t\t\t\t\"name\":\"%s\",\n@@ -150,14 +153,17 @@ func (d *DevAuthServer) Shutdown() {\n \n // NewDev makes dev oauth2 provider for admin user\n func NewDev(p Params) Oauth2Handler {\n+\tif p.Port == 0 {\n+\t\tp.Port = defDevAuthPort\n+\t}\n \toh := initOauth2Handler(p, Oauth2Handler{\n \t\tname: \"dev\",\n \t\tendpoint: oauth2.Endpoint{\n-\t\t\tAuthURL:  fmt.Sprintf(\"http://127.0.0.1:%d/login/oauth/authorize\", devAuthPort),\n-\t\t\tTokenURL: fmt.Sprintf(\"http://127.0.0.1:%d/login/oauth/access_token\", devAuthPort),\n+\t\t\tAuthURL:  fmt.Sprintf(\"http://127.0.0.1:%d/login/oauth/authorize\", p.Port),\n+\t\t\tTokenURL: fmt.Sprintf(\"http://127.0.0.1:%d/login/oauth/access_token\", p.Port),\n \t\t},\n \t\tscopes:  []string{\"user:email\"},\n-\t\tinfoURL: fmt.Sprintf(\"http://127.0.0.1:%d/user\", devAuthPort),\n+\t\tinfoURL: fmt.Sprintf(\"http://127.0.0.1:%d/user\", p.Port),\n \t\tmapUser: func(data UserData, _ []byte) token.User {\n \t\t\tuserInfo := token.User{\n \t\t\t\tID:      data.Value(\"id\"),"
    },
    {
      "sha": "70e22ea219076e0129ff12070dabfce87560fc4e",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/direct.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/direct.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/direct.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/direct.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -121,7 +121,7 @@ func (p DirectHandler) LoginHandler(w http.ResponseWriter, r *http.Request) {\n \t\trest.SendErrorJSON(w, r, p.L, http.StatusInternalServerError, err, \"failed to set token\")\n \t\treturn\n \t}\n-\trest.RenderJSON(w, r, claims.User)\n+\trest.RenderJSON(w, claims.User)\n }\n \n // getCredentials extracts user and password from request"
    },
    {
      "sha": "5d227d0022f0d32a5047c456c0f2073b154bd4b0",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/oauth1.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/oauth1.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/oauth1.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/oauth1.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -160,7 +160,7 @@ func (h Oauth1Handler) AuthHandler(w http.ResponseWriter, r *http.Request) {\n \t\thttp.Redirect(w, r, oauthClaims.Handshake.From, http.StatusTemporaryRedirect)\n \t\treturn\n \t}\n-\trest.RenderJSON(w, r, &u)\n+\trest.RenderJSON(w, &u)\n }\n \n // LogoutHandler - GET /logout"
    },
    {
      "sha": "4d40484992d754e19f6c713b8d4bfc675f6462ed",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/oauth2.go",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/oauth2.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/oauth2.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/oauth2.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -39,6 +39,8 @@ type Params struct {\n \tCsecret     string\n \tIssuer      string\n \tAvatarSaver AvatarSaver\n+\n+\tPort int // relevant for providers supporting port customization, for example dev oauth2\n }\n \n // UserData is type for user information returned from oauth2 providers /info API method\n@@ -211,7 +213,7 @@ func (p Oauth2Handler) AuthHandler(w http.ResponseWriter, r *http.Request) {\n \t\thttp.Redirect(w, r, oauthClaims.Handshake.From, http.StatusTemporaryRedirect)\n \t\treturn\n \t}\n-\trest.RenderJSON(w, r, &u)\n+\trest.RenderJSON(w, &u)\n }\n \n // LogoutHandler - GET /logout"
    },
    {
      "sha": "e689e4e2834d9c401cc6c54a6613f0c204b727db",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/telegram.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/telegram.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/telegram.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/telegram.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -199,7 +199,7 @@ func (th *TelegramHandler) LoginHandler(w http.ResponseWriter, r *http.Request)\n \t\t}\n \t\tth.requests.Unlock()\n \n-\t\trest.RenderJSON(w, r, struct {\n+\t\trest.RenderJSON(w, struct {\n \t\t\tToken string `json:\"token\"`\n \t\t\tBot   string `json:\"bot\"`\n \t\t}{token, th.username})\n@@ -246,7 +246,7 @@ func (th *TelegramHandler) LoginHandler(w http.ResponseWriter, r *http.Request)\n \t\treturn\n \t}\n \n-\trest.RenderJSON(w, r, claims.User)\n+\trest.RenderJSON(w, claims.User)\n \n \t// Delete request\n \tth.requests.Lock()"
    },
    {
      "sha": "9adde3a3c0cd8fde25adaf96c9f4786d4d4c0968",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/verify.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/verify.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/auth/provider/verify.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/verify.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -127,7 +127,7 @@ func (e VerifyHandler) LoginHandler(w http.ResponseWriter, r *http.Request) {\n \t\thttp.Redirect(w, r, confClaims.Handshake.From, http.StatusTemporaryRedirect)\n \t\treturn\n \t}\n-\trest.RenderJSON(w, r, claims.User)\n+\trest.RenderJSON(w, claims.User)\n }\n \n // GET /login?site=site&user=name&address=someone@example.com\n@@ -189,7 +189,7 @@ func (e VerifyHandler) sendConfirmation(w http.ResponseWriter, r *http.Request)\n \t\treturn\n \t}\n \n-\trest.RenderJSON(w, r, rest.JSON{\"user\": user, \"address\": address})\n+\trest.RenderJSON(w, rest.JSON{\"user\": user, \"address\": address})\n }\n \n // AuthHandler doesn't do anything for direct login as it has no callbacks"
    },
    {
      "sha": "831557aca7aed00c44d4c2d93105f13f2e1323ec",
      "filename": "backend/vendor/github.com/go-pkgz/rest/.golangci.yml",
      "status": "modified",
      "additions": 12,
      "deletions": 14,
      "changes": 26,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/.golangci.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/.golangci.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/.golangci.yml?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -2,7 +2,7 @@ linters-settings:\n   govet:\n     check-shadowing: true\n   golint:\n-    min-confidence: 0.8\n+    min-confidence: 0\n   gocyclo:\n     min-complexity: 15\n   maligned:\n@@ -23,11 +23,8 @@ linters-settings:\n       - experimental\n     disabled-checks:\n       - wrapperFunc\n-      - hugeParam\n-      - rangeValCopy\n \n linters:\n-  disable-all: true\n   enable:\n     - megacheck\n     - golint\n@@ -37,6 +34,7 @@ linters:\n     - structcheck\n     - gas\n     - gocyclo\n+    - dupl\n     - misspell\n     - unparam\n     - varcheck\n@@ -46,26 +44,26 @@ linters:\n     - varcheck\n     - stylecheck\n     - gochecknoinits\n-    - golint\n+    - scopelint\n+    - gocritic\n     - nakedret\n     - gosimple\n     - prealloc\n-\n   fast: false\n-\n+  disable-all: true\n \n run:\n-  # modules-download-mode: vendor\n+  output:\n+    format: tab\n   skip-dirs:\n     - vendor\n-  concurrency: 4\n \n issues:\n   exclude-rules:\n-    - text: \"weak cryptographic primitive\"\n+    - text: \"should have a package comment, unless it's in another file for this package\"\n+      linters:\n+        - golint\n+    - path: _test\\.go\n       linters:\n-        - gosec\n+        - dupl\n   exclude-use-default: false\n-\n-service:\n-  golangci-lint-version: 1.24.x"
    },
    {
      "sha": "243df598cb48120dc11ba990a72ff03c61fb669c",
      "filename": "backend/vendor/github.com/go-pkgz/rest/README.md",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/README.md?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -17,9 +17,9 @@ Adds info to every response header:\n \n ### Ping-Pong middleware\n \n-Responds with `pong` on `GET /ping`. Also responds to anything with `/ping` suffix, like `/v2/ping` \n+Responds with `pong` on `GET /ping`. Also, responds to anything with `/ping` suffix, like `/v2/ping`.\n \n-example for both:\n+Example for both:\n \n ```\n > http GET https://remark42.radio-t.com/ping\n@@ -58,7 +58,7 @@ example: `019/03/05 17:26:12.976 [INFO] GET - /api/v1/find?site=remark - 8e228e9\n ### Recoverer middleware\n \n Recoverer is a middleware that recovers from panics, logs the panic (and a backtrace), \n-and returns a HTTP 500 (Internal Server Error) status if possible.\n+and returns an HTTP 500 (Internal Server Error) status if possible.\n \n ### OnlyFrom middleware\n \n@@ -67,7 +67,7 @@ Such IPs can be defined as complete ip (like 192.168.1.12), prefix (129.168.) or\n \n ### Metrics middleware\n \n-Metrics middleware responds to GET /metrics with list of [expvar](https://golang.org/pkg/expvar/). Optionally allows to restrict list of source ips.\n+Metrics middleware responds to GET /metrics with list of [expvar](https://golang.org/pkg/expvar/). Optionally allows restricting list of source ips.\n \n ### BlackWords middleware\n \n@@ -82,12 +82,17 @@ SizeLimit middleware checks if body size is above the limit and returns `StatusR\n It looks for `X-Request-ID` header and makes it as a random id\n  (if not found), then populates it to the result's header\n     and to the request's context.\n+\n+### Deprecation \n+\n+Adds rhe HTTP Deprecation response header, see [draft-dalal-deprecation-header-00](https://tools.ietf.org/id/draft-dalal-deprecation-header-00.html\n+) \n     \n ## Helpers\n \n - `rest.JSON` - map alias, just for convenience `type JSON map[string]interface{}`\n - `rest.RenderJSON` -  renders json response from `interface{}`\n - `rest.RenderJSONFromBytes` - renders json response from `[]byte`\n - `rest.RenderJSONWithHTML` -  renders json response with html tags and forced `charset=utf-8`\n-- `rest.SendErrorJSON` - makes `{error: blah, details: blah}` json body and responds with given error code. Also adds context to logged message\n+- `rest.SendErrorJSON` - makes `{error: blah, details: blah}` json body and responds with given error code. Also, adds context to the logged message\n - `rest.NewErrorLogger(l logger.Backend)` creates a struct providing shorter form of logger call"
    },
    {
      "sha": "08f1c647e9307b3eba7801da7c0e50565d85d929",
      "filename": "backend/vendor/github.com/go-pkgz/rest/blackwords.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/blackwords.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/blackwords.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/blackwords.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -21,7 +21,7 @@ func BlackWords(words ...string) func(http.Handler) http.Handler {\n \t\t\t\t\tfor _, word := range words {\n \t\t\t\t\t\tif strings.Contains(body, strings.ToLower(word)) {\n \t\t\t\t\t\t\tw.WriteHeader(http.StatusForbidden)\n-\t\t\t\t\t\t\tRenderJSON(w, r, JSON{\"error\": \"one of blacklisted words detected\"})\n+\t\t\t\t\t\t\tRenderJSON(w, JSON{\"error\": \"one of blacklisted words detected\"})\n \t\t\t\t\t\t\treturn\n \t\t\t\t\t\t}\n \t\t\t\t\t}"
    },
    {
      "sha": "aab6b51d0d69d45602de2f595aa1e69d2ecb57c2",
      "filename": "backend/vendor/github.com/go-pkgz/rest/go.mod",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/go.mod?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -1,9 +1,8 @@\n module github.com/go-pkgz/rest\n \n-go 1.14\n+go 1.15\n \n require (\n-\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n \tgithub.com/pkg/errors v0.9.1\n-\tgithub.com/stretchr/testify v1.3.0\n+\tgithub.com/stretchr/testify v1.6.1\n )"
    },
    {
      "sha": "7034f5b8bcaa5bcdaf2a79a6bd4fb2705b29e4f9",
      "filename": "backend/vendor/github.com/go-pkgz/rest/go.sum",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/go.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/go.sum?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -1,10 +1,14 @@\n+github.com/davecgh/go-spew v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=\n github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n-github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\n-github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\n github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\n github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\n github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\n+github.com/stretchr/objx v0.1.0 h1:4G4v2dO3VZwixGIRoQ5Lfboy6nUhCyYzaqnIAPPhYs4=\n github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\n-github.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=\n-github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\n+github.com/stretchr/testify v1.6.1 h1:hDPOHmpOpP40lSULcqw7IrRb/u7w6RpDC9399XyoNd0=\n+github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n+gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\n+gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n+gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=\n+gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM="
    },
    {
      "sha": "45bed815fa2fc9fef4409766de3d5a221e15d4d4",
      "filename": "backend/vendor/github.com/go-pkgz/rest/httperrors.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/httperrors.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/httperrors.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/httperrors.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -31,7 +31,7 @@ func (e *ErrorLogger) Log(w http.ResponseWriter, r *http.Request, httpCode int,\n \t\te.l.Logf(\"%s\", errDetailsMsg(r, httpCode, err, m))\n \t}\n \tw.WriteHeader(httpCode)\n-\tRenderJSON(w, r, JSON{\"error\": m})\n+\tRenderJSON(w, JSON{\"error\": m})\n }\n \n // SendErrorJSON sends {error: msg} with error code and logging error and caller\n@@ -40,7 +40,7 @@ func SendErrorJSON(w http.ResponseWriter, r *http.Request, l logger.Backend, cod\n \t\tl.Logf(\"%s\", errDetailsMsg(r, code, err, msg))\n \t}\n \tw.WriteHeader(code)\n-\tRenderJSON(w, r, JSON{\"error\": msg})\n+\tRenderJSON(w, JSON{\"error\": msg})\n }\n \n func errDetailsMsg(r *http.Request, code int, err error, msg string) string {"
    },
    {
      "sha": "0865dc139355e99e7de7cd87e2b7bad1b044ba00",
      "filename": "backend/vendor/github.com/go-pkgz/rest/logger/logger.go",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/logger/logger.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/logger/logger.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/logger/logger.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -59,7 +59,6 @@ func New(options ...Option) *Middleware {\n }\n \n // Handler middleware prints http log\n-//nolint gosec\n func (l *Middleware) Handler(next http.Handler) http.Handler {\n \n \tfn := func(w http.ResponseWriter, r *http.Request) {\n@@ -91,32 +90,32 @@ func (l *Middleware) Handler(next http.Handler) http.Handler {\n \n \t\t\tvar bld strings.Builder\n \t\t\tif l.prefix != \"\" {\n-\t\t\t\tbld.WriteString(l.prefix)\n-\t\t\t\tbld.WriteString(\" \")\n+\t\t\t\t_, _ = bld.WriteString(l.prefix)\n+\t\t\t\t_, _ = bld.WriteString(\" \")\n \t\t\t}\n \n-\t\t\tbld.WriteString(fmt.Sprintf(\"%s - %s - %s - %d (%d) - %v\", r.Method, rawurl, remoteIP, ww.status, ww.size, t2.Sub(t1)))\n+\t\t\t_, _ = bld.WriteString(fmt.Sprintf(\"%s - %s - %s - %d (%d) - %v\", r.Method, rawurl, remoteIP, ww.status, ww.size, t2.Sub(t1)))\n \n \t\t\tif user != \"\" {\n-\t\t\t\tbld.WriteString(\" - \")\n-\t\t\t\tbld.WriteString(user)\n+\t\t\t\t_, _ = bld.WriteString(\" - \")\n+\t\t\t\t_, _ = bld.WriteString(user)\n \t\t\t}\n \n \t\t\tif l.subjFn != nil {\n \t\t\t\tif subj, err := l.subjFn(r); err == nil {\n-\t\t\t\t\tbld.WriteString(\" - \")\n-\t\t\t\t\tbld.WriteString(subj)\n+\t\t\t\t\t_, _ = bld.WriteString(\" - \")\n+\t\t\t\t\t_, _ = bld.WriteString(subj)\n \t\t\t\t}\n \t\t\t}\n \n \t\t\tif traceID := r.Header.Get(\"X-Request-ID\"); traceID != \"\" {\n-\t\t\t\tbld.WriteString(\" - \")\n-\t\t\t\tbld.WriteString(traceID)\n+\t\t\t\t_, _ = bld.WriteString(\" - \")\n+\t\t\t\t_, _ = bld.WriteString(traceID)\n \t\t\t}\n \n \t\t\tif body != \"\" {\n-\t\t\t\tbld.WriteString(\" - \")\n-\t\t\t\tbld.WriteString(body)\n+\t\t\t\t_, _ = bld.WriteString(\" - \")\n+\t\t\t\t_, _ = bld.WriteString(body)\n \t\t\t}\n \n \t\t\tl.log.Logf(\"%s\", bld.String())\n@@ -168,7 +167,8 @@ func peek(r io.Reader, n int64) (reader io.Reader, s string, hasMore bool, err e\n \tbuf := new(bytes.Buffer)\n \t_, err = io.CopyN(buf, r, n+1)\n \tif err == io.EOF {\n-\t\treturn buf, buf.String(), false, nil\n+\t\tstr := buf.String()\n+\t\treturn buf, str, false, nil\n \t}\n \tif err != nil {\n \t\treturn r, \"\", false, err\n@@ -273,5 +273,5 @@ func (c *customResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {\n \tif hj, ok := c.ResponseWriter.(http.Hijacker); ok {\n \t\treturn hj.Hijack()\n \t}\n-\treturn nil, nil, fmt.Errorf(\"ResponseWriter does not implement the Hijacker interface\")\n+\treturn nil, nil, fmt.Errorf(\"ResponseWriter does not implement the Hijacker interface\") //nolint:golint //capital letter is OK here\n }"
    },
    {
      "sha": "13e80808b2f26ac3222e686f7204b26a346f5c1c",
      "filename": "backend/vendor/github.com/go-pkgz/rest/metrics.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/metrics.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/metrics.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/metrics.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -16,7 +16,7 @@ func Metrics(onlyIps ...string) func(http.Handler) http.Handler {\n \t\t\tif r.Method == \"GET\" && strings.HasSuffix(strings.ToLower(r.URL.Path), \"/metrics\") {\n \t\t\t\tif matched, ip := matchSourceIP(r, onlyIps); !matched {\n \t\t\t\t\tw.WriteHeader(http.StatusForbidden)\n-\t\t\t\t\tRenderJSON(w, r, JSON{\"error\": fmt.Sprintf(\"ip %s rejected\", ip)})\n+\t\t\t\t\tRenderJSON(w, JSON{\"error\": fmt.Sprintf(\"ip %s rejected\", ip)})\n \t\t\t\t\treturn\n \t\t\t\t}\n \t\t\t\texpvar.Handler().ServeHTTP(w, r)"
    },
    {
      "sha": "0e695cfd26ccc27f00b53c6a3a20c9ef89aa92d6",
      "filename": "backend/vendor/github.com/go-pkgz/rest/middleware.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/middleware.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/middleware.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/middleware.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -10,7 +10,7 @@ import (\n )\n \n // AppInfo adds custom app-info to the response header\n-func AppInfo(app string, author string, version string) func(http.Handler) http.Handler {\n+func AppInfo(app, author, version string) func(http.Handler) http.Handler {\n \tf := func(h http.Handler) http.Handler {\n \t\tfn := func(w http.ResponseWriter, r *http.Request) {\n \t\t\tw.Header().Set(\"Author\", author)\n@@ -33,7 +33,7 @@ func Ping(next http.Handler) http.Handler {\n \t\tif r.Method == \"GET\" && strings.HasSuffix(strings.ToLower(r.URL.Path), \"/ping\") {\n \t\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n \t\t\tw.WriteHeader(http.StatusOK)\n-\t\t\tw.Write([]byte(\"pong\")) //nolint\n+\t\t\t_, _ = w.Write([]byte(\"pong\"))\n \t\t\treturn\n \t\t}\n \t\tnext.ServeHTTP(w, r)"
    },
    {
      "sha": "eb24befb0137dc9f6b65ee18ee92d8aebd9256b1",
      "filename": "backend/vendor/github.com/go-pkgz/rest/onlyfrom.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/onlyfrom.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/onlyfrom.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/onlyfrom.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -22,14 +22,14 @@ func OnlyFrom(onlyIps ...string) func(http.Handler) http.Handler {\n \t\t\t}\n \n \t\t\tw.WriteHeader(http.StatusForbidden)\n-\t\t\tRenderJSON(w, r, JSON{\"error\": fmt.Sprintf(\"ip %s rejected\", ip)})\n+\t\t\tRenderJSON(w, JSON{\"error\": fmt.Sprintf(\"ip %s rejected\", ip)})\n \t\t}\n \t\treturn http.HandlerFunc(fn)\n \t}\n }\n \n // matchSourceIP returns true if request's ip matches any of ips\n-func matchSourceIP(r *http.Request, ips []string) (bool, string) {\n+func matchSourceIP(r *http.Request, ips []string) (result bool, match string) {\n \n \t// try X-Real-IP first then fail back to X-Forwarded-For and finally to RemoteAddr\n \tip := r.Header.Get(\"X-Real-IP\")"
    },
    {
      "sha": "4a0f7858c5130b3d61f3a5159235f54dd7fffe39",
      "filename": "backend/vendor/github.com/go-pkgz/rest/rest.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/rest.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/rest.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -13,7 +13,7 @@ import (\n type JSON map[string]interface{}\n \n // RenderJSON sends data as json\n-func RenderJSON(w http.ResponseWriter, r *http.Request, data interface{}) {\n+func RenderJSON(w http.ResponseWriter, data interface{}) {\n \tbuf := &bytes.Buffer{}\n \tenc := json.NewEncoder(buf)\n \tenc.SetEscapeHTML(true)\n@@ -22,7 +22,7 @@ func RenderJSON(w http.ResponseWriter, r *http.Request, data interface{}) {\n \t\treturn\n \t}\n \tw.Header().Set(\"Content-Type\", \"application/json; charset=utf-8\")\n-\tw.Write(buf.Bytes()) // nolint: errcheck, gosec\n+\t_, _ = w.Write(buf.Bytes())\n }\n \n // RenderJSONFromBytes sends binary data as json"
    },
    {
      "sha": "77d14474ff745af81122150f1fcc34f7101f23f9",
      "filename": "backend/vendor/github.com/go-pkgz/rest/trace.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/trace.go",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/github.com/go-pkgz/rest/trace.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/trace.go?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -3,7 +3,7 @@ package rest\n import (\n \t\"context\"\n \t\"crypto/rand\"\n-\t\"crypto/sha1\"\n+\t\"crypto/sha1\" //nolint:gosec //not used for cryptography\n \t\"encoding/hex\"\n \t\"fmt\"\n \t\"net/http\"\n@@ -43,6 +43,6 @@ func randToken() string {\n \tif _, err := rand.Read(b); err != nil {\n \t\treturn fmt.Sprintf(\"%x\", time.Now().Nanosecond())\n \t}\n-\tsum := sha1.Sum(b)\n+\tsum := sha1.Sum(b) //nolint:gosec //not used for cryptography\n \treturn hex.EncodeToString(sum[:])\n }"
    },
    {
      "sha": "1150f89279c1f248ade231d33ef4d572e98f741f",
      "filename": "backend/vendor/modules.txt",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/modules.txt",
      "raw_url": "https://github.com/umputun/remark42/raw/0b13e8a8d2774b3c24d947beac61e0cd195008e7/backend/vendor/modules.txt",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/modules.txt?ref=0b13e8a8d2774b3c24d947beac61e0cd195008e7",
      "patch": "@@ -94,7 +94,7 @@ github.com/go-chi/cors\n # github.com/go-chi/render v1.0.1\n ## explicit\n github.com/go-chi/render\n-# github.com/go-pkgz/auth v1.14.0\n+# github.com/go-pkgz/auth v1.15.0\n ## explicit\n github.com/go-pkgz/auth\n github.com/go-pkgz/auth/avatar\n@@ -120,7 +120,7 @@ github.com/go-pkgz/lgr\n ## explicit\n github.com/go-pkgz/repeater\n github.com/go-pkgz/repeater/strategy\n-# github.com/go-pkgz/rest v1.5.0\n+# github.com/go-pkgz/rest v1.7.0\n ## explicit\n github.com/go-pkgz/rest\n github.com/go-pkgz/rest/logger"
    }
  ]
}
