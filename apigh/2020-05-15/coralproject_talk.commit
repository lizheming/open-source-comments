{
  "sha": "ed92f4916db4494e75eee7c5a51f58cd353368e9",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6ZWQ5MmY0OTE2ZGI0NDk0ZTc1ZWVlN2M1YTUxZjU4Y2QzNTMzNjhlOQ==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2020-05-14T19:20:35Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-05-14T19:20:35Z"
    },
    "message": "[CORL-810] Custom Moderation Phases (#2901)\n\n* feat: initial implementation\r\n\r\n* feat: renamed fields from mutations\r\n\r\n* fix: more renaming to streamline {Key,Secret}->SigningSecret\r\n\r\n* feat: introduced WrappedInternalError\r\n\r\n* feat: enhanced extern payload, more fetch options\r\n\r\n- Added tenant.{id,domain} to extern payload\r\n- Added site.id to the extern payload\r\n- Added response size limit to fetch\r\n- Added new SCRAPE_MAX_RESPONSE_SIZE env var for managing the size of\r\n  responses for scraping\r\n\r\n* fix: fixed bug with scrape invocation\r\n\r\n* feat: added more queries + mutations\r\n\r\n- Added Query.externalModerationPhase\r\n- Added Mutation.createExternalModerationPhase\r\n- Added Mutation.updateExternalModerationPhase\r\n- Added Mutation.enableExternalModerationPhase\r\n- Added Mutation.disableExternalModerationPhase\r\n- Added Mutation.deleteExternalModerationPhase\r\n- Added Mutation.rotateExternalModerationPhaseSigningSecret\r\n\r\n* feat: added secret management\r\n\r\n* fix: linting\r\n\r\n* fix: merge conflict fix\r\n\r\n* feat: added UI\r\n\r\n* fix: linting\r\n\r\n* fix: linting\r\n\r\n* fix: updated snapshots\r\n\r\n* fix: improved docs\r\n\r\n* fix: improved docs\r\n\r\n* fix: added locales\r\n\r\n* review: improve naming\r\n\r\n* review: some review changes\r\n\r\n- Switched /moderation/phase to /moderation/phases\r\n- Fixed scrolling\r\n- Fixed redirection\r\n\r\n* fix: added scroll timeout for webhooks",
    "tree": {
      "sha": "3f7c0b6f34f76c351c63667c9b7041eaeb709af6",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/3f7c0b6f34f76c351c63667c9b7041eaeb709af6"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/ed92f4916db4494e75eee7c5a51f58cd353368e9",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevZoDCRBK7hj4Ov3rIwAAdHIIAAd44tf2j9/eJ9xhZl9xCviF\nMODW/xu6+AFoGInA/UX20Bid/tUgs5shQCr0hXLDd7zm4trDDv8GGpNiJSmX7FXo\ngf8C9hdfKgeZ1Yp1NEsBrZW6OFCz5ko5EQjV5zoq72Kt8uqO0SlCBwc/OuuS8kH9\n9V8olnhx3c+txtjRDAdv3mzwprv6QtqANhFK5PYbFzypV6TkL8rto04ZbjuvNR+L\nT7yuMJ4/txD9n3Ns0PDHuPQpzRmtcR6TyYbLWosXvisHzWGE82PzDrcf3D+u5yYo\nfyTjlvmFUY2aeMrz63416TptVcBfWvKNVxqyIlEXoBLSljpUebBV/SKy0lMkHsg=\n=OHbV\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 3f7c0b6f34f76c351c63667c9b7041eaeb709af6\nparent ceb96dba753bf5d7e6383cda479d6f5d2659b9d0\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1589484035 +0000\ncommitter GitHub <noreply@github.com> 1589484035 +0000\n\n[CORL-810] Custom Moderation Phases (#2901)\n\n* feat: initial implementation\r\n\r\n* feat: renamed fields from mutations\r\n\r\n* fix: more renaming to streamline {Key,Secret}->SigningSecret\r\n\r\n* feat: introduced WrappedInternalError\r\n\r\n* feat: enhanced extern payload, more fetch options\r\n\r\n- Added tenant.{id,domain} to extern payload\r\n- Added site.id to the extern payload\r\n- Added response size limit to fetch\r\n- Added new SCRAPE_MAX_RESPONSE_SIZE env var for managing the size of\r\n  responses for scraping\r\n\r\n* fix: fixed bug with scrape invocation\r\n\r\n* feat: added more queries + mutations\r\n\r\n- Added Query.externalModerationPhase\r\n- Added Mutation.createExternalModerationPhase\r\n- Added Mutation.updateExternalModerationPhase\r\n- Added Mutation.enableExternalModerationPhase\r\n- Added Mutation.disableExternalModerationPhase\r\n- Added Mutation.deleteExternalModerationPhase\r\n- Added Mutation.rotateExternalModerationPhaseSigningSecret\r\n\r\n* feat: added secret management\r\n\r\n* fix: linting\r\n\r\n* fix: merge conflict fix\r\n\r\n* feat: added UI\r\n\r\n* fix: linting\r\n\r\n* fix: linting\r\n\r\n* fix: updated snapshots\r\n\r\n* fix: improved docs\r\n\r\n* fix: improved docs\r\n\r\n* fix: added locales\r\n\r\n* review: improve naming\r\n\r\n* review: some review changes\r\n\r\n- Switched /moderation/phase to /moderation/phases\r\n- Fixed scrolling\r\n- Fixed redirection\r\n\r\n* fix: added scroll timeout for webhooks"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/ed92f4916db4494e75eee7c5a51f58cd353368e9",
  "html_url": "https://github.com/coralproject/talk/commit/ed92f4916db4494e75eee7c5a51f58cd353368e9",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/ed92f4916db4494e75eee7c5a51f58cd353368e9/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "url": "https://api.github.com/repos/coralproject/talk/commits/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "html_url": "https://github.com/coralproject/talk/commit/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0"
    }
  ],
  "stats": {
    "total": 7131,
    "additions": 5441,
    "deletions": 1690
  },
  "files": [
    {
      "sha": "b29d4070c0db1301a38c84d22ec42a252a2e7036",
      "filename": "EXTERNAL_MODERATION_PHASES.md",
      "status": "added",
      "additions": 240,
      "deletions": 0,
      "changes": 240,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/EXTERNAL_MODERATION_PHASES.md",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/EXTERNAL_MODERATION_PHASES.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/EXTERNAL_MODERATION_PHASES.md?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,240 @@\n+# External Moderation Phases Guide\n+\n+This document is in reference to external moderation phases emitted by Coral.\n+You can configure external moderation phases on your installation of Coral by\n+visiting `/admin/configure/moderation/phases`.\n+\n+Once you've configured a external moderation phase in Coral, you will start to\n+receive moderation requests in the form of a\n+[External Moderation Requests](#external-moderation-request) at the provided\n+callback URL. These will be in the form of `POST` requests with a `JSON`\n+payload.\n+\n+When a comment is created or edited, it will be processed by moderation phases in\n+a predefined order. Any external moderation phase is run last, and only if all\n+other moderation phases before it do not return a status. The current set of\n+moderation phases is listed in order [here](https://github.com/coralproject/talk/blob/master/src/core/server/services/comments/pipeline/phases/index.ts).\n+\n+Once you have received a moderation request, you must respond within the\n+provided timeout else the phase will be skipped and it will continue. It is\n+strongly recommended to [verify the request signature](#request-signing).\n+\n+The external moderation phase must respond with one of the following:\n+\n+1. Do not moderate the comment, and return a 204 without a body.\n+2. Perform a moderation action and return a 200 with a [External Moderation Response](#external-moderation-response)\n+   as a `JSON` encoded body containing the operations you want to perform on the\n+   comment.\n+\n+<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n+<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n+## Table of Contents\n+\n+- [Request Signing](#request-signing)\n+- [Schema](#schema)\n+  - [External Moderation Request](#external-moderation-request)\n+  - [External Moderation Response](#external-moderation-response)\n+\n+<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n+\n+## Request Signing\n+\n+Requests sent by Coral for external moderation phases use the same process as\n+those used by webhooks. Refer to the [webhooks documentation](WEBHOOKS.md#webhook-signing)\n+for instructions on how to verify signatures sent by Coral.\n+\n+## Schema\n+\n+### External Moderation Request\n+\n+```ts\n+interface ExternalModerationRequest {\n+  /**\n+   * action refers to the specific operation being performed. If `NEW`, this\n+   * is referring to a new comment being created. If `EDIT`, then this refers to\n+   * an operation involving an edit operation on an existing Comment.\n+   */\n+  action: \"NEW\" | \"EDIT\";\n+\n+  /**\n+   * comment refers to the actual Comment data for the Comment being\n+   * created/edited.\n+   */\n+  comment: {\n+    /**\n+     * body refers to the actual body text of the Comment being created/edited.\n+     */\n+    body: string;\n+\n+    /**\n+     * parentID is the identifier for the parent comment (if this Comment is a\n+     * reply, null otherwise).\n+     */\n+    parentID: string | null;\n+  };\n+\n+  /**\n+   * author refers to the User that is creating/editing the Comment.\n+   */\n+  author: {\n+    /**\n+     * id is the identifier for this User.\n+     */\n+    id: string;\n+\n+    /**\n+     * role refers to the role of this User.\n+     */\n+    role: \"COMMENTER\" | \"STAFF\" | \"MODERATOR\" | \"ADMIN\";\n+  };\n+\n+  /**\n+   * story refers to the Story being commented on.\n+   */\n+  story: {\n+    /**\n+     * id is the identifier for this Story.\n+     */\n+    id: string;\n+\n+    /**\n+     * url is the URL for this Story.\n+     */\n+    url: string;\n+  };\n+\n+  /**\n+   * site refers to the Site that the story being commented on belongs to.\n+   */\n+  site: {\n+    /**\n+     * id is the identifier for this Site.\n+     */\n+    id: string;\n+  };\n+\n+  /**\n+   * tenantID is the identifer of the Tenant that this Comment is being\n+   * created/edited on.\n+   */\n+  tenantID: string;\n+\n+  /**\n+   * tenantDomain is the domain that is associated with this Tenant that this\n+   * Comment is being created/edited on.\n+   */\n+  tenantDomain: string;\n+}\n+```\n+\n+#### Example\n+\n+New comment on a story:\n+\n+```json\n+{\n+  \"action\": \"NEW\",\n+  \"comment\": {\n+    \"body\": \"Here's a comment!\",\n+    \"parentID\": null\n+  },\n+  \"author\": {\n+    \"id\": \"baf4e943-3594-4fcc-b2ba-3e8de7a76352\",\n+    \"role\": \"COMMENTER\"\n+  },\n+  \"story\": {\n+    \"id\": \"245b3856-b0a0-4d2f-a6bb-58c71f18d6a6\",\n+    \"url\": \"http://localhost:1313/posts/a-story-url/\"\n+  },\n+  \"site\": {\n+    \"id\": \"a4bede88-2d2c-4424-bc18-4322a9e285a6\"\n+  },\n+  \"tenantID\": \"19ba5794-7eeb-4d46-a81b-c00c61672501\",\n+  \"tenantDomain\": \"localhost\"\n+}\n+```\n+\n+New reply on a comment on a story:\n+\n+```json\n+{\n+  \"action\": \"NEW\",\n+  \"comment\": {\n+    \"body\": \"Here's a reply!\",\n+    \"parentID\": \"d79b787f-f406-49a0-a179-72e3652e54be\"\n+  },\n+  \"author\": {\n+    \"id\": \"baf4e943-3594-4fcc-b2ba-3e8de7a76352\",\n+    \"role\": \"COMMENTER\"\n+  },\n+  \"story\": {\n+    \"id\": \"245b3856-b0a0-4d2f-a6bb-58c71f18d6a6\",\n+    \"url\": \"http://localhost:1313/posts/a-story-url/\"\n+  },\n+  \"site\": {\n+    \"id\": \"a4bede88-2d2c-4424-bc18-4322a9e285a6\"\n+  },\n+  \"tenantID\": \"19ba5794-7eeb-4d46-a81b-c00c61672501\",\n+  \"tenantDomain\": \"localhost\"\n+}\n+```\n+\n+### External Moderation Response\n+\n+```ts\n+interface ExternalModerationResponse {\n+  /**\n+   * actions is an optional list of any flags to be added to this Comment.\n+   */\n+  actions?: Array<{\n+    actionType: \"FLAG\";\n+    reason: \"COMMENT_DETECTED_TOXIC\" | \"COMMENT_DETECTED_SPAM\";\n+  }>;\n+\n+  /**\n+   * tags are any listed tags that should be added to the comment.\n+   */\n+  tags?: Array<\"FEATURED\" | \"STAFF\">;\n+\n+  /**\n+   * status when provided decides and terminates the moderation process by\n+   * setting the status of the comment.\n+   */\n+  status?: \"NONE\" | \"APPROVED\" | \"REJECTED\" | \"PREMOD\" | \"SYSTEM_WITHHELD\";\n+}\n+```\n+\n+#### Examples\n+\n+Add a flag to a comment and do not set a status:\n+\n+```json\n+{\n+  \"actions\": [{ \"actionType\": \"FLAG\", \"reason\": \"COMMENT_DETECTED_TOXIC\" }]\n+}\n+```\n+\n+Reject a comment:\n+\n+```json\n+{\n+  \"status\": \"REJECTED\"\n+}\n+```\n+\n+Feature a comment and do not set a status:\n+\n+```json\n+{\n+  \"tags\": [\"FEATURED\"]\n+}\n+```\n+\n+Approve a comment and mark it as featured:\n+\n+```json\n+{\n+  \"status\": \"APPROVED\",\n+  \"tags\": [\"FEATURED\"]\n+}\n+```"
    },
    {
      "sha": "50eddcc871901ff5f2f5692cf9d9d6c477dd4074",
      "filename": "LICENSE",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/LICENSE",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/LICENSE",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/LICENSE?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,4 +1,4 @@\n-Copyright 2019 Vox Media, Inc\n+Copyright 2020 Vox Media, Inc\n \n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License."
    },
    {
      "sha": "d43f9f9fe88c4e76dabc5aec52e349ddc2da82a5",
      "filename": "package.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/package.json",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/package.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package.json?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -27,7 +27,7 @@\n     \"build:server\": \"gulp server\",\n     \"migration:create\": \"ts-node --transpile-only ./scripts/migration/create.ts\",\n     \"docs:events\": \"ts-node ./scripts/generateEventDocs.ts ./src/core/client/stream/events.ts ./CLIENT_EVENTS.md\",\n-    \"doctoc\": \"doctoc --maxlevel=3 --title '## Table of Contents' README.md CLIENT_EVENTS.md CONTRIBUTING.md WEBHOOKS.md\",\n+    \"doctoc\": \"doctoc --maxlevel=3 --title '## Table of Contents' README.md CLIENT_EVENTS.md CONTRIBUTING.md WEBHOOKS.md EXTERNAL_MODERATION_PHASES.md\",\n     \"generate\": \"npm-run-all generate:css-types generate:schema generate:relay\",\n     \"generate-persist\": \"npm-run-all generate:css-types generate:schema generate:relay-persist\",\n     \"generate:css-types\": \"tcm src/core/client/\",\n@@ -413,7 +413,7 @@\n     \"{src/core/client/stream/events.ts,scripts/generateEventDocs.ts,CLIENT_EVENTS.md}\": [\n       \"npm run docs:events -- --verify\"\n     ],\n-    \"{README,CLIENT_EVENTS,CONTRIBUTING,WEBHOOKS}.md\": [\n+    \"{README,CLIENT_EVENTS,CONTRIBUTING,WEBHOOKS,EXTERNAL_MODERATION_PHASES}.md\": [\n       \"npm run doctoc\"\n     ]\n   },"
    },
    {
      "sha": "a251235cd8fc8f3b70fcefd6a6dd7708013ba3ae",
      "filename": "src/core/client/admin/helpers/getExternalModerationPhaseLink.ts",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/helpers/getExternalModerationPhaseLink.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/helpers/getExternalModerationPhaseLink.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/helpers/getExternalModerationPhaseLink.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,5 @@\n+import { urls } from \"coral-framework/helpers\";\n+\n+export default function getExternalModerationPhaseLink(phaseID: string) {\n+  return `${urls.admin.configureExternalModerationPhase}/${phaseID}`;\n+}"
    },
    {
      "sha": "a3d198b120ec2ecc636dfed0dbcd4bb257f034bd",
      "filename": "src/core/client/admin/routeConfig.tsx",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routeConfig.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routeConfig.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routeConfig.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -9,18 +9,22 @@ import { createAuthCheckRoute } from \"./routes/AuthCheck\";\n import CommunityRoute from \"./routes/Community\";\n import ConfigureRoute from \"./routes/Configure\";\n import {\n+  AddExternalModerationPhaseRoute,\n   AddWebhookEndpointRoute,\n   AdvancedConfigRoute,\n   AuthConfigRoute,\n+  ConfigureExternalModerationPhaseRoute,\n   ConfigureWebhookEndpointRoute,\n   EmailConfigRoute,\n   GeneralConfigRoute,\n   ModerationConfigRoute,\n+  ModerationPhasesConfigRoute,\n   OrganizationConfigRoute,\n   SlackConfigRoute,\n   WebhookEndpointsConfigRoute,\n   WordListConfigRoute,\n } from \"./routes/Configure/sections\";\n+import ModerationPhasesLayout from \"./routes/Configure/sections/ModerationPhases/ModerationPhasesLayout\";\n import { Sites } from \"./routes/Configure/sections/Sites\";\n import AddSiteRoute from \"./routes/Configure/sections/Sites/AddSiteRoute\";\n import SiteRoute from \"./routes/Configure/sections/Sites/SiteRoute\";\n@@ -120,13 +124,28 @@ export default makeRouteConfig(\n               path=\"organization\"\n               {...OrganizationConfigRoute.routeConfig}\n             />\n-            <Route path=\"moderation\" {...ModerationConfigRoute.routeConfig} />\n+            <Route\n+              exact\n+              path=\"moderation\"\n+              {...ModerationConfigRoute.routeConfig}\n+            />\n             <Route path=\"wordList\" {...WordListConfigRoute.routeConfig} />\n             <Route path=\"auth\" {...AuthConfigRoute.routeConfig} />\n             <Route path=\"advanced\" {...AdvancedConfigRoute.routeConfig} />\n             <Route path=\"email\" {...EmailConfigRoute.routeConfig} />\n             <Route path=\"slack\" {...SlackConfigRoute.routeConfig} />\n           </Route>\n+          <Route\n+            path=\"configure/moderation/phases\"\n+            Component={ModerationPhasesLayout}\n+          >\n+            <Route path=\"/\" {...ModerationPhasesConfigRoute.routeConfig} />\n+            <Route path=\"add\" Component={AddExternalModerationPhaseRoute} />\n+            <Route\n+              path=\":phaseID\"\n+              {...ConfigureExternalModerationPhaseRoute.routeConfig}\n+            />\n+          </Route>\n           <Route path=\"configure/webhooks\" Component={WebhookEndpointsLayout}>\n             <Route path=\"/\" {...WebhookEndpointsConfigRoute.routeConfig} />\n             <Route path=\"add\" {...AddWebhookEndpointRoute.routeConfig} />"
    },
    {
      "sha": "bb06ac8eda933b64e39d1bf92752c3f91f7da338",
      "filename": "src/core/client/admin/routes/Configure/ConfigureLinks.tsx",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/ConfigureLinks.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/ConfigureLinks.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/ConfigureLinks.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -14,7 +14,12 @@ const ConfigureLinks: FunctionComponent<{}> = () => {\n         <Link to=\"/admin/configure/organization\">Organization</Link>\n       </Localized>\n       <Localized id=\"configure-sideBarNavigation-moderation\">\n-        <Link to=\"/admin/configure/moderation\">Moderation</Link>\n+        <Link exact to=\"/admin/configure/moderation\">\n+          Moderation\n+        </Link>\n+      </Localized>\n+      <Localized id=\"configure-sideBarNavigation-moderationPhases\">\n+        <Link to=\"/admin/configure/moderation/phases\">Moderation Phases</Link>\n       </Localized>\n       <Localized id=\"configure-sideBarNavigation-bannedAndSuspectWords\">\n         <Link to=\"/admin/configure/wordList\">Banned and Suspect Words</Link>"
    },
    {
      "sha": "e8ea9be0d9637f59c9c6d665d6e9dc7a925882d6",
      "filename": "src/core/client/admin/routes/Configure/Link.tsx",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/Link.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/Link.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/Link.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -7,6 +7,7 @@ interface Props {\n   className?: string;\n   children: React.ReactNode;\n   to: string | LocationDescriptor;\n+  exact?: boolean;\n }\n \n const Link: FunctionComponent<Props> = (props) => (\n@@ -15,6 +16,7 @@ const Link: FunctionComponent<Props> = (props) => (\n       to={props.to}\n       className={styles.link}\n       activeClassName={styles.linkActive}\n+      exact={props.exact}\n     >\n       {props.children}\n     </FoundLink>"
    },
    {
      "sha": "b729ddb3830658fe4cc48edc018a11f6811774c7",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/RegenerateSSOKeyMutation.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 42,
      "changes": 42,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/routes/Configure/sections/Auth/RegenerateSSOKeyMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/client/admin/routes/Configure/sections/Auth/RegenerateSSOKeyMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/RegenerateSSOKeyMutation.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,42 +0,0 @@\n-import { graphql } from \"react-relay\";\n-import { Environment } from \"relay-runtime\";\n-\n-import {\n-  commitMutationPromiseNormalized,\n-  createMutation,\n-} from \"coral-framework/lib/relay\";\n-\n-import { RegenerateSSOKeyMutation as MutationTypes } from \"coral-admin/__generated__/RegenerateSSOKeyMutation.graphql\";\n-\n-let clientMutationId = 0;\n-\n-const RegenerateSSOKeyMutation = createMutation(\n-  \"regenerateSSOKey\",\n-  (environment: Environment) =>\n-    commitMutationPromiseNormalized<MutationTypes>(environment, {\n-      mutation: graphql`\n-        mutation RegenerateSSOKeyMutation($input: RegenerateSSOKeyInput!) {\n-          regenerateSSOKey(input: $input) {\n-            settings {\n-              auth {\n-                integrations {\n-                  sso {\n-                    key\n-                    keyGeneratedAt\n-                  }\n-                }\n-              }\n-            }\n-            clientMutationId\n-          }\n-        }\n-      `,\n-      variables: {\n-        input: {\n-          clientMutationId: (clientMutationId++).toString(),\n-        },\n-      },\n-    })\n-);\n-\n-export default RegenerateSSOKeyMutation;"
    },
    {
      "sha": "40526850564433637e1a12165bb1a04b8cb856a7",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOConfig.tsx",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOConfig.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOConfig.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOConfig.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -8,7 +8,7 @@ import { FormFieldDescription } from \"coral-ui/components/v2\";\n import Header from \"../../Header\";\n import ConfigBoxWithToggleField from \"./ConfigBoxWithToggleField\";\n import RegistrationField from \"./RegistrationField\";\n-import SSOKeyRotationQuery from \"./SSOKeyRotation/SSOKeyRotationQuery\";\n+import SSOSigningSecretRotationQuery from \"./SSOSigningSecretRotation/SSOSigningSecretRotationQuery\";\n import TargetFilterField from \"./TargetFilterField\";\n \n // eslint-disable-next-line no-unused-expressions\n@@ -60,7 +60,9 @@ const SSOConfig: FunctionComponent<Props> = ({ disabled }) => (\n             for additional information on single sign on.\n           </FormFieldDescription>\n         </Localized>\n-        <SSOKeyRotationQuery disabled={disabledInside}></SSOKeyRotationQuery>\n+        <SSOSigningSecretRotationQuery\n+          disabled={disabledInside}\n+        ></SSOSigningSecretRotationQuery>\n         <TargetFilterField\n           label={\n             <Localized id=\"configure-auth-sso-useLoginOn\">"
    },
    {
      "sha": "dee544d71c37e9ccb781dc285c79f787da2aff71",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DateField.css",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DateField.css",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DateField.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DateField.css?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/DateField.css"
    },
    {
      "sha": "6dd0d9869c87cae15db93c5aab8abe204cf922f4",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DateField.tsx",
      "status": "renamed",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DateField.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DateField.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DateField.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -3,25 +3,25 @@ import React, { FunctionComponent } from \"react\";\n \n import { Flex, Label } from \"coral-ui/components/v2\";\n \n-import { SSOKeyStatus } from \"./StatusField\";\n+import { SSOSigningSecretStatus } from \"./StatusField\";\n \n import styles from \"./DateField.css\";\n \n-export interface SSOKeyDates {\n+export interface SSOSigningSecretDates {\n   readonly createdAt: string;\n   readonly lastUsedAt: string | null;\n   readonly rotatedAt: string | null;\n   readonly inactiveAt: string | null;\n }\n \n interface Props {\n-  status: SSOKeyStatus;\n-  dates: SSOKeyDates;\n+  status: SSOSigningSecretStatus;\n+  dates: SSOSigningSecretDates;\n }\n \n const DateField: FunctionComponent<Props> = ({ status, dates }) => {\n   switch (status) {\n-    case SSOKeyStatus.ACTIVE:\n+    case SSOSigningSecretStatus.ACTIVE:\n       return (\n         <>\n           <div className={styles.label}>\n@@ -37,7 +37,7 @@ const DateField: FunctionComponent<Props> = ({ status, dates }) => {\n           </Localized>\n         </>\n       );\n-    case SSOKeyStatus.EXPIRING:\n+    case SSOSigningSecretStatus.EXPIRING:\n       return (\n         <>\n           <div className={styles.label}>\n@@ -63,7 +63,7 @@ const DateField: FunctionComponent<Props> = ({ status, dates }) => {\n           </Flex>\n         </>\n       );\n-    case SSOKeyStatus.EXPIRED:\n+    case SSOSigningSecretStatus.EXPIRED:\n       return (\n         <>\n           <div className={styles.label}>",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/DateField.tsx"
    },
    {
      "sha": "77c83e4306d93792d5b9948ce9672fd8f0eb951e",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DeactivateSSOSigningSecretMutation.ts",
      "status": "renamed",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DeactivateSSOSigningSecretMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DeactivateSSOSigningSecretMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DeactivateSSOSigningSecretMutation.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -7,23 +7,25 @@ import {\n   MutationInput,\n } from \"coral-framework/lib/relay\";\n \n-import { DeactivateSSOKeyMutation as MutationTypes } from \"coral-admin/__generated__/DeactivateSSOKeyMutation.graphql\";\n+import { DeactivateSSOSigningSecretMutation as MutationTypes } from \"coral-admin/__generated__/DeactivateSSOSigningSecretMutation.graphql\";\n \n const clientMutationId = 0;\n \n-const DeactivateSSOKeyMutation = createMutation(\n-  \"deactivateSSOKey\",\n+const DeactivateSSOSigningSecretMutation = createMutation(\n+  \"deactivateSSOSigningSecret\",\n   (environment: Environment, input: MutationInput<MutationTypes>) => {\n     return commitMutationPromiseNormalized<MutationTypes>(environment, {\n       mutation: graphql`\n-        mutation DeactivateSSOKeyMutation($input: DeactivateSSOKeyInput!) {\n-          deactivateSSOKey(input: $input) {\n+        mutation DeactivateSSOSigningSecretMutation(\n+          $input: DeactivateSSOSigningSecretInput!\n+        ) {\n+          deactivateSSOSigningSecret(input: $input) {\n             settings {\n               auth {\n                 integrations {\n                   sso {\n                     enabled\n-                    keys {\n+                    signingSecrets {\n                       kid\n                       secret\n                       createdAt\n@@ -49,4 +51,4 @@ const DeactivateSSOKeyMutation = createMutation(\n   }\n );\n \n-export default DeactivateSSOKeyMutation;\n+export default DeactivateSSOSigningSecretMutation;",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/DeactivateSSOKeyMutation.ts"
    },
    {
      "sha": "996fa88c89798861ab29691a1bb44b784fa988bf",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DeleteSSOSigningSecretMutation.ts",
      "status": "renamed",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DeleteSSOSigningSecretMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DeleteSSOSigningSecretMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/DeleteSSOSigningSecretMutation.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -7,23 +7,25 @@ import {\n   MutationInput,\n } from \"coral-framework/lib/relay\";\n \n-import { DeleteSSOKeyMutation as MutationTypes } from \"coral-admin/__generated__/DeleteSSOKeyMutation.graphql\";\n+import { DeleteSSOSigningSecretMutation as MutationTypes } from \"coral-admin/__generated__/DeleteSSOSigningSecretMutation.graphql\";\n \n const clientMutationId = 0;\n \n-const DeleteSSOKeyMutation = createMutation(\n-  \"deleteSSOKey\",\n+const DeleteSSOSigningSecretMutation = createMutation(\n+  \"deleteSSOSigningSecret\",\n   (environment: Environment, input: MutationInput<MutationTypes>) => {\n     return commitMutationPromiseNormalized<MutationTypes>(environment, {\n       mutation: graphql`\n-        mutation DeleteSSOKeyMutation($input: DeleteSSOKeyInput!) {\n-          deleteSSOKey(input: $input) {\n+        mutation DeleteSSOSigningSecretMutation(\n+          $input: DeleteSSOSigningSecretInput!\n+        ) {\n+          deleteSSOSigningSecret(input: $input) {\n             settings {\n               auth {\n                 integrations {\n                   sso {\n                     enabled\n-                    keys {\n+                    signingSecrets {\n                       kid\n                       secret\n                       createdAt\n@@ -49,4 +51,4 @@ const DeleteSSOKeyMutation = createMutation(\n   }\n );\n \n-export default DeleteSSOKeyMutation;\n+export default DeleteSSOSigningSecretMutation;",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/DeleteSSOKeyMutation.ts"
    },
    {
      "sha": "58365d68125a827fb7e2cb8c670fb9c21d93b062",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotateSSOSigningSecretMutation.ts",
      "status": "renamed",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotateSSOSigningSecretMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotateSSOSigningSecretMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotateSSOSigningSecretMutation.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -7,23 +7,25 @@ import {\n   MutationInput,\n } from \"coral-framework/lib/relay\";\n \n-import { RotateSSOKeyMutation as MutationTypes } from \"coral-admin/__generated__/RotateSSOKeyMutation.graphql\";\n+import { RotateSSOSigningSecretMutation as MutationTypes } from \"coral-admin/__generated__/RotateSSOSigningSecretMutation.graphql\";\n \n const clientMutationId = 0;\n \n-const RotateSSOKeyMutation = createMutation(\n-  \"rotateSSOKey\",\n+const RotateSSOSigningSecretMutation = createMutation(\n+  \"rotateSSOSigningSecret\",\n   (environment: Environment, input: MutationInput<MutationTypes>) => {\n     return commitMutationPromiseNormalized<MutationTypes>(environment, {\n       mutation: graphql`\n-        mutation RotateSSOKeyMutation($input: RotateSSOKeyInput!) {\n-          rotateSSOKey(input: $input) {\n+        mutation RotateSSOSigningSecretMutation(\n+          $input: RotateSSOSigningSecretInput!\n+        ) {\n+          rotateSSOSigningSecret(input: $input) {\n             settings {\n               auth {\n                 integrations {\n                   sso {\n                     enabled\n-                    keys {\n+                    signingSecrets {\n                       kid\n                       secret\n                       createdAt\n@@ -49,4 +51,4 @@ const RotateSSOKeyMutation = createMutation(\n   }\n );\n \n-export default RotateSSOKeyMutation;\n+export default RotateSSOSigningSecretMutation;",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/RotateSSOKeyMutation.ts"
    },
    {
      "sha": "5f3824668ee6b594684ac7c003b6c880c0664db1",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationDropdown.css",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationDropdown.css",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationDropdown.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationDropdown.css?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/RotationDropdown.css"
    },
    {
      "sha": "f3eea1458d06f4e360cd9bae460b921d2e587217",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationDropdown.tsx",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationDropdown.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationDropdown.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationDropdown.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/RotationDropdown.tsx"
    },
    {
      "sha": "e0a02cbb59471fbf4069fd37c92a628f441b8120",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationOption.tsx",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationOption.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationOption.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/RotationOption.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/RotationOption.tsx"
    },
    {
      "sha": "2b4e295fe0276ecae3e2bb11c675193fa5216745",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretCard.css",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretCard.css",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretCard.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretCard.css?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/SSOKeyCard.css"
    },
    {
      "sha": "09523466483e3788f3d65e9084b7d14795c48fc2",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretCard.tsx",
      "status": "renamed",
      "additions": 29,
      "deletions": 27,
      "changes": 56,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretCard.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretCard.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretCard.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -15,16 +15,16 @@ import {\n } from \"coral-ui/components/v2\";\n \n import DateField from \"./DateField\";\n-import DeactivateSSOKeyMutation from \"./DeactivateSSOKeyMutation\";\n-import DeleteSSOKeyMutation from \"./DeleteSSOKeyMutation\";\n-import RotateSSOKeyMutation from \"./RotateSSOKeyMutation\";\n+import DeactivateSSOSigningSecretMutation from \"./DeactivateSSOSigningSecretMutation\";\n+import DeleteSSOSigningSecretMutation from \"./DeleteSSOSigningSecretMutation\";\n+import RotateSSOSigningSecretMutation from \"./RotateSSOSigningSecretMutation\";\n import RotationDropDown from \"./RotationDropdown\";\n import { RotateOptions } from \"./RotationOption\";\n-import StatusField, { SSOKeyStatus } from \"./StatusField\";\n+import StatusField, { SSOSigningSecretStatus } from \"./StatusField\";\n \n-import styles from \"./SSOKeyCard.css\";\n+import styles from \"./SSOSigningSecretCard.css\";\n \n-export interface SSOKeyDates {\n+export interface SSOSigningSecretDates {\n   readonly createdAt: string;\n   readonly lastUsedAt: string | null;\n   readonly rotatedAt: string | null;\n@@ -34,30 +34,30 @@ export interface SSOKeyDates {\n interface Props {\n   id: string;\n   secret: string;\n-  status: SSOKeyStatus;\n-  dates: SSOKeyDates;\n+  status: SSOSigningSecretStatus;\n+  dates: SSOSigningSecretDates;\n   disabled?: boolean;\n }\n \n function createActionButton(\n-  status: SSOKeyStatus,\n+  status: SSOSigningSecretStatus,\n   onRotateKey: (rotation: string) => void,\n   onDeactivateKey: () => void,\n   onDelete: () => void,\n   disabled?: boolean\n ) {\n   switch (status) {\n-    case SSOKeyStatus.ACTIVE:\n+    case SSOSigningSecretStatus.ACTIVE:\n       return <RotationDropDown onRotateKey={onRotateKey} disabled={disabled} />;\n-    case SSOKeyStatus.EXPIRING:\n+    case SSOSigningSecretStatus.EXPIRING:\n       return (\n         <Localized id=\"configure-auth-sso-rotate-deactivateNow\">\n           <Button color=\"alert\" onClick={onDeactivateKey} disabled={disabled}>\n             Deactivate Now\n           </Button>\n         </Localized>\n       );\n-    case SSOKeyStatus.EXPIRED:\n+    case SSOSigningSecretStatus.EXPIRED:\n       return (\n         <Localized id=\"configure-auth-sso-rotate-delete\">\n           <Button color=\"alert\" onClick={onDelete} disabled={disabled}>\n@@ -70,48 +70,50 @@ function createActionButton(\n   }\n }\n \n-const SSOKeyCard: FunctionComponent<Props> = ({\n+const SSOSigningSecretCard: FunctionComponent<Props> = ({\n   id,\n   secret,\n   status,\n   dates,\n   disabled,\n }) => {\n-  const rotateSSOKey = useMutation(RotateSSOKeyMutation);\n-  const deactivateSSOKey = useMutation(DeactivateSSOKeyMutation);\n-  const deleteSSOKey = useMutation(DeleteSSOKeyMutation);\n+  const rotateSSOSigningSecret = useMutation(RotateSSOSigningSecretMutation);\n+  const deactivateSSOSigningSecret = useMutation(\n+    DeactivateSSOSigningSecretMutation\n+  );\n+  const deleteSSOSigningSecret = useMutation(DeleteSSOSigningSecretMutation);\n \n   const onRotate = useCallback(\n     (rotation: string) => {\n       switch (rotation) {\n         case RotateOptions.NOW:\n-          rotateSSOKey({ inactiveIn: 0 });\n+          rotateSSOSigningSecret({ inactiveIn: 0 });\n           break;\n         case RotateOptions.IN1DAY:\n-          rotateSSOKey({ inactiveIn: 24 * 60 * 60 });\n+          rotateSSOSigningSecret({ inactiveIn: 24 * 60 * 60 });\n           break;\n         case RotateOptions.IN1WEEK:\n-          rotateSSOKey({ inactiveIn: 7 * 24 * 60 * 60 });\n+          rotateSSOSigningSecret({ inactiveIn: 7 * 24 * 60 * 60 });\n           break;\n         case RotateOptions.IN30DAYS:\n-          rotateSSOKey({ inactiveIn: 30 * 24 * 60 * 60 });\n+          rotateSSOSigningSecret({ inactiveIn: 30 * 24 * 60 * 60 });\n           break;\n         default:\n-          rotateSSOKey({ inactiveIn: 0 });\n+          rotateSSOSigningSecret({ inactiveIn: 0 });\n       }\n     },\n-    [rotateSSOKey]\n+    [rotateSSOSigningSecret]\n   );\n   const onDeactivate = useCallback(() => {\n-    deactivateSSOKey({\n+    deactivateSSOSigningSecret({\n       kid: id,\n     });\n-  }, [deactivateSSOKey, id]);\n+  }, [deactivateSSOSigningSecret, id]);\n   const onDelete = useCallback(() => {\n-    deleteSSOKey({\n+    deleteSSOSigningSecret({\n       kid: id,\n     });\n-  }, [deleteSSOKey, id]);\n+  }, [deleteSSOSigningSecret, id]);\n \n   return (\n     <Card>\n@@ -184,4 +186,4 @@ const SSOKeyCard: FunctionComponent<Props> = ({\n   );\n };\n \n-export default SSOKeyCard;\n+export default SSOSigningSecretCard;",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/SSOKeyCard.tsx"
    },
    {
      "sha": "2eb98d3daf793e062e6abce2f1ba4236fdff928d",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretRotationContainer.tsx",
      "status": "renamed",
      "additions": 21,
      "deletions": 28,
      "changes": 49,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretRotationContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretRotationContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretRotationContainer.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -5,59 +5,52 @@ import { graphql } from \"react-relay\";\n import { withFragmentContainer } from \"coral-framework/lib/relay\";\n import { Label } from \"coral-ui/components/v2\";\n \n-import { SSOKeyRotationContainer_settings } from \"coral-admin/__generated__/SSOKeyRotationContainer_settings.graphql\";\n+import { SSOSigningSecretRotationContainer_settings } from \"coral-admin/__generated__/SSOSigningSecretRotationContainer_settings.graphql\";\n \n-import SSOKeyCard, { SSOKeyDates } from \"./SSOKeyCard\";\n-import { SSOKeyStatus } from \"./StatusField\";\n+import SSOSigningSecretCard, {\n+  SSOSigningSecretDates,\n+} from \"./SSOSigningSecretCard\";\n+import { SSOSigningSecretStatus } from \"./StatusField\";\n \n interface Props {\n-  settings: SSOKeyRotationContainer_settings;\n+  settings: SSOSigningSecretRotationContainer_settings;\n   disabled?: boolean;\n }\n \n-interface Key {\n-  readonly kid: string;\n-  readonly secret: string;\n-  readonly createdAt: string;\n-  readonly lastUsedAt: string | null;\n-  readonly rotatedAt: string | null;\n-  readonly inactiveAt: string | null;\n-}\n-\n-function getStatus(dates: SSOKeyDates) {\n+function getStatus(dates: SSOSigningSecretDates) {\n   if (\n     dates.inactiveAt &&\n     dates.rotatedAt &&\n     new Date(dates.inactiveAt) > new Date()\n   ) {\n-    return SSOKeyStatus.EXPIRING;\n+    return SSOSigningSecretStatus.EXPIRING;\n   }\n \n   if (dates.inactiveAt && new Date(dates.inactiveAt) <= new Date()) {\n-    return SSOKeyStatus.EXPIRED;\n+    return SSOSigningSecretStatus.EXPIRED;\n   }\n \n-  return SSOKeyStatus.ACTIVE;\n+  return SSOSigningSecretStatus.ACTIVE;\n }\n \n-const SSOKeyRotationContainer: FunctionComponent<Props> = ({\n+const SSOSigningSecretRotationContainer: FunctionComponent<Props> = ({\n   disabled,\n   settings,\n }) => {\n   const {\n     auth: {\n       integrations: {\n-        sso: { keys },\n+        sso: { signingSecrets },\n       },\n     },\n   } = settings;\n \n-  const sortedKeys = useMemo(\n+  const sortedSigningSecrets = useMemo(\n     () =>\n-      keys\n+      signingSecrets\n         // Copy this map because we don't want to modify the underlying copy.\n         .map((key) => key)\n-        .sort((a: Key, b: Key) => {\n+        .sort((a, b) => {\n           // Both active, sort on createdAt date.\n           if (!a.inactiveAt && !b.inactiveAt) {\n             return (\n@@ -84,16 +77,16 @@ const SSOKeyRotationContainer: FunctionComponent<Props> = ({\n \n           return bDate.getTime() - aDate.getTime();\n         }),\n-    [keys]\n+    [signingSecrets]\n   );\n \n   return (\n     <>\n       <Localized id=\"configure-auth-sso-rotate-keys\">\n         <Label htmlFor=\"configure-auth-sso-rotate-keys\">Keys</Label>\n       </Localized>\n-      {sortedKeys.map((key) => (\n-        <SSOKeyCard\n+      {sortedSigningSecrets.map((key) => (\n+        <SSOSigningSecretCard\n           key={key.kid}\n           id={key.kid}\n           secret={key.secret}\n@@ -108,12 +101,12 @@ const SSOKeyRotationContainer: FunctionComponent<Props> = ({\n \n const enhanced = withFragmentContainer<Props>({\n   settings: graphql`\n-    fragment SSOKeyRotationContainer_settings on Settings {\n+    fragment SSOSigningSecretRotationContainer_settings on Settings {\n       auth {\n         integrations {\n           sso {\n             enabled\n-            keys {\n+            signingSecrets {\n               kid\n               secret\n               createdAt\n@@ -126,6 +119,6 @@ const enhanced = withFragmentContainer<Props>({\n       }\n     }\n   `,\n-})(SSOKeyRotationContainer);\n+})(SSOSigningSecretRotationContainer);\n \n export default enhanced;",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/SSOKeyRotationContainer.tsx"
    },
    {
      "sha": "2bd6bd40e8578dbc49c5687ff8bb3ad1f2844625",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretRotationQuery.tsx",
      "status": "renamed",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretRotationQuery.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretRotationQuery.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/SSOSigningSecretRotationQuery.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -4,21 +4,23 @@ import { graphql } from \"react-relay\";\n import { QueryRenderData, QueryRenderer } from \"coral-framework/lib/relay\";\n import { CallOut, Spinner } from \"coral-ui/components/v2\";\n \n-import { SSOKeyRotationQuery as QueryTypes } from \"coral-admin/__generated__/SSOKeyRotationQuery.graphql\";\n+import { SSOSigningSecretRotationQuery as QueryTypes } from \"coral-admin/__generated__/SSOSigningSecretRotationQuery.graphql\";\n \n-import SSOKeyRotationContainer from \"./SSOKeyRotationContainer\";\n+import SSOSigningSecretRotationContainer from \"./SSOSigningSecretRotationContainer\";\n \n interface Props {\n   disabled?: boolean;\n }\n \n-const SSOKeyRotationQuery: FunctionComponent<Props> = ({ disabled }) => {\n+const SSOSigningSecretRotationQuery: FunctionComponent<Props> = ({\n+  disabled,\n+}) => {\n   return (\n     <QueryRenderer<QueryTypes>\n       query={graphql`\n-        query SSOKeyRotationQuery {\n+        query SSOSigningSecretRotationQuery {\n           settings {\n-            ...SSOKeyRotationContainer_settings\n+            ...SSOSigningSecretRotationContainer_settings\n           }\n         }\n       `}\n@@ -38,7 +40,7 @@ const SSOKeyRotationQuery: FunctionComponent<Props> = ({ disabled }) => {\n         }\n \n         return (\n-          <SSOKeyRotationContainer\n+          <SSOSigningSecretRotationContainer\n             settings={props.settings}\n             disabled={disabled}\n           />\n@@ -48,4 +50,4 @@ const SSOKeyRotationQuery: FunctionComponent<Props> = ({ disabled }) => {\n   );\n };\n \n-export default SSOKeyRotationQuery;\n+export default SSOSigningSecretRotationQuery;",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/SSOKeyRotationQuery.tsx"
    },
    {
      "sha": "9c8630cd480aa705913d8d7546212ab21d6a83f0",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/StatusField.css",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/StatusField.css",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/StatusField.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/StatusField.css?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/StatusField.css"
    },
    {
      "sha": "ec5a9ca92ce22f9888165eee99fafaffdabf521f",
      "filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/StatusField.tsx",
      "status": "renamed",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/StatusField.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/StatusField.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Auth/SSOSigningSecretRotation/StatusField.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -6,19 +6,19 @@ import { Flex, Icon, Tooltip, TooltipButton } from \"coral-ui/components/v2\";\n \n import styles from \"./StatusField.css\";\n \n-export enum SSOKeyStatus {\n+export enum SSOSigningSecretStatus {\n   EXPIRED,\n   EXPIRING,\n   ACTIVE,\n }\n \n interface Props {\n-  status: SSOKeyStatus;\n+  status: SSOSigningSecretStatus;\n }\n \n const StatusField: FunctionComponent<Props> = ({ status }) => {\n   switch (status) {\n-    case SSOKeyStatus.ACTIVE:\n+    case SSOSigningSecretStatus.ACTIVE:\n       return (\n         <Localized id=\"configure-auth-sso-rotate-statusActive\">\n           <span\n@@ -29,7 +29,7 @@ const StatusField: FunctionComponent<Props> = ({ status }) => {\n           </span>\n         </Localized>\n       );\n-    case SSOKeyStatus.EXPIRING:\n+    case SSOSigningSecretStatus.EXPIRING:\n       return (\n         <Flex alignItems=\"center\" justifyContent=\"center\">\n           <Flex\n@@ -68,7 +68,7 @@ const StatusField: FunctionComponent<Props> = ({ status }) => {\n           />\n         </Flex>\n       );\n-    case SSOKeyStatus.EXPIRED:\n+    case SSOSigningSecretStatus.EXPIRED:\n       return (\n         <Flex alignItems=\"center\" justifyContent=\"center\">\n           <Localized id=\"configure-auth-sso-rotate-statusExpired\">",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/Auth/SSOKeyRotation/StatusField.tsx"
    },
    {
      "sha": "0c80b6b8cc755eb9893c7dba1b603d3cbd4127ff",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/AddExternalModerationPhaseContainer.tsx",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/AddExternalModerationPhaseContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/AddExternalModerationPhaseContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/AddExternalModerationPhaseContainer.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,46 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import { Match, Router, withRouter } from \"found\";\n+import React, { FunctionComponent, useCallback } from \"react\";\n+\n+import ConfigBox from \"coral-admin/routes/Configure/ConfigBox\";\n+import Header from \"coral-admin/routes/Configure/Header\";\n+import { urls } from \"coral-framework/helpers\";\n+import { HorizontalGutter } from \"coral-ui/components/v2\";\n+\n+import { ConfigureExternalModerationPhaseForm } from \"../ConfigureExternalModerationPhaseForm\";\n+import ExperimentalExternalModerationPhaseCallOut from \"../ExperimentalExternalModerationPhaseCallOut\";\n+\n+interface Props {\n+  router: Router;\n+  match: Match;\n+}\n+\n+const AddExternalModerationPhaseContainer: FunctionComponent<Props> = ({\n+  router,\n+}) => {\n+  const onCancel = useCallback(() => {\n+    router.push(urls.admin.moderationPhases);\n+  }, [router]);\n+\n+  return (\n+    <HorizontalGutter size=\"double\">\n+      <ExperimentalExternalModerationPhaseCallOut />\n+      <ConfigBox\n+        title={\n+          <Localized id=\"configure-moderationPhases-addExternalModerationPhase\">\n+            <Header>Add external moderation phase</Header>\n+          </Localized>\n+        }\n+      >\n+        <ConfigureExternalModerationPhaseForm\n+          phase={null}\n+          onCancel={onCancel}\n+        />\n+      </ConfigBox>\n+    </HorizontalGutter>\n+  );\n+};\n+\n+const enhanced = withRouter(AddExternalModerationPhaseContainer);\n+\n+export default enhanced;"
    },
    {
      "sha": "5b5f60d82f7411345da865b4b3cf19ddaa5d7635",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/AddExternalModerationPhaseRoute.tsx",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/AddExternalModerationPhaseRoute.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/AddExternalModerationPhaseRoute.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/AddExternalModerationPhaseRoute.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,9 @@\n+import React, { FunctionComponent } from \"react\";\n+\n+import AddExternalModerationPhaseContainer from \"./AddExternalModerationPhaseContainer\";\n+\n+const AddExternalModerationPhaseRoute: FunctionComponent = () => (\n+  <AddExternalModerationPhaseContainer />\n+);\n+\n+export default AddExternalModerationPhaseRoute;"
    },
    {
      "sha": "eac90c9a7dd7a67983984fe6cb447bde61b69540",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/index.ts",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/AddExternalModerationPhase/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,4 @@\n+export {\n+  default,\n+  default as AddExternalModerationPhaseRoute,\n+} from \"./AddExternalModerationPhaseRoute\";"
    },
    {
      "sha": "0fca1d6ca739936e61455f54c81443f0f25e8f1e",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ConfigureExternalModerationPhaseContainer.tsx",
      "status": "added",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ConfigureExternalModerationPhaseContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ConfigureExternalModerationPhaseContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ConfigureExternalModerationPhaseContainer.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,57 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+import { graphql } from \"react-relay\";\n+\n+import ConfigBox from \"coral-admin/routes/Configure/ConfigBox\";\n+import Header from \"coral-admin/routes/Configure/Header\";\n+import { withFragmentContainer } from \"coral-framework/lib/relay\";\n+import { HorizontalGutter } from \"coral-ui/components/v2\";\n+\n+import { ConfigureExternalModerationPhaseContainer_phase } from \"coral-admin/__generated__/ConfigureExternalModerationPhaseContainer_phase.graphql\";\n+\n+import ExperimentalExternalModerationPhaseCallOut from \"../ExperimentalExternalModerationPhaseCallOut\";\n+import ExternalModerationPhaseDangerZone from \"./ExternalModerationPhaseDangerZone\";\n+import ExternalModerationPhaseDetails from \"./ExternalModerationPhaseDetails\";\n+import ExternalModerationPhaseStatus from \"./ExternalModerationPhaseStatus\";\n+\n+interface Props {\n+  phase: ConfigureExternalModerationPhaseContainer_phase;\n+}\n+\n+const ConfigureExternalModerationPhaseContainer: FunctionComponent<Props> = ({\n+  phase,\n+}) => {\n+  return (\n+    <HorizontalGutter\n+      size=\"double\"\n+      data-testid=\"external-moderation-phases-container\"\n+    >\n+      <ExperimentalExternalModerationPhaseCallOut />\n+      <ConfigBox\n+        title={\n+          <Localized id=\"configure-moderationPhases-configureExternalModerationPhase\">\n+            <Header htmlFor=\"configure-moderationPhases-header.title\">\n+              Configure external moderation phase\n+            </Header>\n+          </Localized>\n+        }\n+      >\n+        <ExternalModerationPhaseDetails phase={phase} />\n+        <ExternalModerationPhaseStatus phase={phase} />\n+        <ExternalModerationPhaseDangerZone phase={phase} />\n+      </ConfigBox>\n+    </HorizontalGutter>\n+  );\n+};\n+\n+const enhanced = withFragmentContainer<Props>({\n+  phase: graphql`\n+    fragment ConfigureExternalModerationPhaseContainer_phase on ExternalModerationPhase {\n+      ...ExternalModerationPhaseDetails_phase\n+      ...ExternalModerationPhaseDangerZone_phase\n+      ...ExternalModerationPhaseStatus_phase\n+    }\n+  `,\n+})(ConfigureExternalModerationPhaseContainer);\n+\n+export default enhanced;"
    },
    {
      "sha": "2084c20a900cae4b95ab280680110cec8206e717",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ConfigureExternalModerationPhaseRoute.tsx",
      "status": "added",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ConfigureExternalModerationPhaseRoute.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ConfigureExternalModerationPhaseRoute.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ConfigureExternalModerationPhaseRoute.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,60 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+import { graphql } from \"react-relay\";\n+\n+import { withRouteConfig } from \"coral-framework/lib/router\";\n+import { CallOut, Delay, Spinner } from \"coral-ui/components/v2\";\n+\n+import { ConfigureExternalModerationPhaseRouteQueryResponse } from \"coral-admin/__generated__/ConfigureExternalModerationPhaseRouteQuery.graphql\";\n+\n+import ConfigureExternalModerationPhaseContainer from \"./ConfigureExternalModerationPhaseContainer\";\n+\n+interface Props {\n+  data: ConfigureExternalModerationPhaseRouteQueryResponse | null;\n+}\n+\n+const ConfigureExternalModerationPhaseRoute: FunctionComponent<Props> = ({\n+  data,\n+}) => {\n+  if (!data) {\n+    return (\n+      <Delay>\n+        <Spinner />\n+      </Delay>\n+    );\n+  }\n+\n+  if (!data.externalModerationPhase) {\n+    return (\n+      <Localized id=\"configure-moderationPhases-phaseNotFound\">\n+        <CallOut color=\"error\" fullWidth>\n+          External moderation phase not found\n+        </CallOut>\n+      </Localized>\n+    );\n+  }\n+\n+  return (\n+    <ConfigureExternalModerationPhaseContainer\n+      phase={data.externalModerationPhase}\n+    />\n+  );\n+};\n+\n+const enhanced = withRouteConfig<Props>({\n+  query: graphql`\n+    query ConfigureExternalModerationPhaseRouteQuery($phaseID: ID!) {\n+      externalModerationPhase(id: $phaseID) {\n+        ...ConfigureExternalModerationPhaseContainer_phase\n+      }\n+    }\n+  `,\n+  cacheConfig: { force: true },\n+  prepareVariables: (params, match) => {\n+    return {\n+      phaseID: match.params.phaseID,\n+    };\n+  },\n+})(ConfigureExternalModerationPhaseRoute);\n+\n+export default enhanced;"
    },
    {
      "sha": "073a99ba98b5d5400b5a0803c83c0f386ddefbfd",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/DeleteExternalModerationPhaseMutation.ts",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/DeleteExternalModerationPhaseMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/DeleteExternalModerationPhaseMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/DeleteExternalModerationPhaseMutation.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,38 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { DeleteExternalModerationPhaseMutation as MutationTypes } from \"coral-admin/__generated__/DeleteExternalModerationPhaseMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const DeleteExternalModerationPhaseMutation = createMutation(\n+  \"deleteExternalModerationPhase\",\n+  (environment: Environment, { id }: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation DeleteExternalModerationPhaseMutation(\n+          $input: DeleteExternalModerationPhaseInput!\n+        ) {\n+          deleteExternalModerationPhase(input: $input) {\n+            phase {\n+              id\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          id,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default DeleteExternalModerationPhaseMutation;"
    },
    {
      "sha": "28a6c0ef10b5c4b09f68d365d8a62b009f2efef9",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/DisableExternalModerationPhaseMutation.ts",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/DisableExternalModerationPhaseMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/DisableExternalModerationPhaseMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/DisableExternalModerationPhaseMutation.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,38 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { DisableExternalModerationPhaseMutation as MutationTypes } from \"coral-admin/__generated__/DisableExternalModerationPhaseMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const DisableExternalModerationPhaseMutation = createMutation(\n+  \"disableExternalModerationPhase\",\n+  (environment: Environment, input: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation DisableExternalModerationPhaseMutation(\n+          $input: DisableExternalModerationPhaseInput!\n+        ) {\n+          disableExternalModerationPhase(input: $input) {\n+            phase {\n+              ...ConfigureExternalModerationPhaseContainer_phase\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          ...input,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default DisableExternalModerationPhaseMutation;"
    },
    {
      "sha": "60b05b961101e77e8edb17f4df92c728cd98cb88",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/EnableExternalModerationPhaseMutation.ts",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/EnableExternalModerationPhaseMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/EnableExternalModerationPhaseMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/EnableExternalModerationPhaseMutation.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,38 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { EnableExternalModerationPhaseMutation as MutationTypes } from \"coral-admin/__generated__/EnableExternalModerationPhaseMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const EnableExternalModerationPhaseMutation = createMutation(\n+  \"enableExternalModerationPhase\",\n+  (environment: Environment, input: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation EnableExternalModerationPhaseMutation(\n+          $input: EnableExternalModerationPhaseInput!\n+        ) {\n+          enableExternalModerationPhase(input: $input) {\n+            phase {\n+              ...ConfigureExternalModerationPhaseContainer_phase\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          ...input,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default EnableExternalModerationPhaseMutation;"
    },
    {
      "sha": "1ba74dae64816f1db7025c24d6273f20a26e31e4",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseDangerZone.tsx",
      "status": "added",
      "additions": 185,
      "deletions": 0,
      "changes": 185,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseDangerZone.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseDangerZone.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseDangerZone.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,185 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import { Match, Router, withRouter } from \"found\";\n+import React, { FunctionComponent, useCallback, useState } from \"react\";\n+import { graphql } from \"react-relay\";\n+\n+import Subheader from \"coral-admin/routes/Configure/Subheader\";\n+import { urls } from \"coral-framework/helpers\";\n+import { useCoralContext } from \"coral-framework/lib/bootstrap\";\n+import { getMessage } from \"coral-framework/lib/i18n\";\n+import { useMutation, withFragmentContainer } from \"coral-framework/lib/relay\";\n+import {\n+  Button,\n+  FormField,\n+  FormFieldDescription,\n+  Label,\n+} from \"coral-ui/components/v2\";\n+\n+import { ExternalModerationPhaseDangerZone_phase } from \"coral-admin/__generated__/ExternalModerationPhaseDangerZone_phase.graphql\";\n+\n+import DeleteExternalModerationPhaseMutation from \"./DeleteExternalModerationPhaseMutation\";\n+import DisableExternalModerationPhaseMutation from \"./DisableExternalModerationPhaseMutation\";\n+import EnableExternalModerationPhaseMutation from \"./EnableExternalModerationPhaseMutation\";\n+import RotateSigningSecretModal from \"./RotateSigningSecretModal\";\n+\n+interface Props {\n+  phase: ExternalModerationPhaseDangerZone_phase;\n+  router: Router;\n+  match: Match;\n+}\n+\n+const ExternalModerationPhaseDangerZone: FunctionComponent<Props> = ({\n+  phase,\n+  router,\n+}) => {\n+  const { localeBundles } = useCoralContext();\n+  const enableExternalModerationPhase = useMutation(\n+    EnableExternalModerationPhaseMutation\n+  );\n+  const disableExternalModerationPhase = useMutation(\n+    DisableExternalModerationPhaseMutation\n+  );\n+  const deleteExternalModerationPhase = useMutation(\n+    DeleteExternalModerationPhaseMutation\n+  );\n+\n+  const [rotateSecretOpen, setRotateSecretOpen] = useState<boolean>(false);\n+  const onRotateSecret = useCallback(async () => {\n+    setRotateSecretOpen(true);\n+  }, []);\n+  const onHideRotateSecret = useCallback(async () => {\n+    setRotateSecretOpen(false);\n+  }, [setRotateSecretOpen]);\n+\n+  const onEnable = useCallback(async () => {\n+    const message = getMessage(\n+      localeBundles,\n+      \"configure-moderationPhases-confirmEnable\",\n+      \"Enabling the external moderation phase will start to send moderation queries to this URL. Are you sure you want to continue?\"\n+    );\n+\n+    if (window.confirm(message)) {\n+      await enableExternalModerationPhase({ id: phase.id });\n+    }\n+  }, [phase, enableExternalModerationPhase]);\n+  const onDisable = useCallback(async () => {\n+    const message = getMessage(\n+      localeBundles,\n+      \"configure-moderationPhases-confirmDisable\",\n+      \"Disabling this external moderation phase will stop any new moderation queries from being sent to this URL. Are you sure you want to continue?\"\n+    );\n+\n+    if (window.confirm(message)) {\n+      await disableExternalModerationPhase({ id: phase.id });\n+    }\n+  }, [phase, disableExternalModerationPhase]);\n+\n+  const onDelete = useCallback(async () => {\n+    const message = getMessage(\n+      localeBundles,\n+      \"configure-moderationPhases-confirmDelete\",\n+      \"Deleting this external moderation phase will stop any new moderation queries from being sent to this URL and will remove all the associated settings. Are you sure you want to continue?\"\n+    );\n+\n+    if (window.confirm(message)) {\n+      await deleteExternalModerationPhase({ id: phase.id });\n+\n+      // Send the user back to the webhook endpoints listing.\n+      router.push(urls.admin.moderationPhases);\n+    }\n+  }, [phase, disableExternalModerationPhase, router]);\n+\n+  return (\n+    <>\n+      <Localized id=\"configure-moderationPhases-dangerZone\">\n+        <Subheader>Danger Zone</Subheader>\n+      </Localized>\n+      <FormField>\n+        <Localized id=\"configure-moderationPhases-rotateSigningSecret\">\n+          <Label>Rotate signing secret</Label>\n+        </Localized>\n+        <Localized id=\"configure-moderationPhases-rotateSigningSecretDescription\">\n+          <FormFieldDescription>\n+            Rotating the signing secret will allow to you to safely replace a\n+            signing secret used in production with a delay.\n+          </FormFieldDescription>\n+        </Localized>\n+        <Localized id=\"configure-moderationPhases-rotateSigningSecretButton\">\n+          <Button color=\"alert\" onClick={onRotateSecret}>\n+            Rotate signing secret\n+          </Button>\n+        </Localized>\n+      </FormField>\n+      <RotateSigningSecretModal\n+        phaseID={phase.id}\n+        onHide={onHideRotateSecret}\n+        open={rotateSecretOpen}\n+      />\n+      {phase.enabled ? (\n+        <FormField>\n+          <Localized id=\"configure-moderationPhases-disableExternalModerationPhase\">\n+            <Label>Disable external moderation phase</Label>\n+          </Localized>\n+          <Localized id=\"configure-moderationPhases-disableExternalModerationPhaseDescription\">\n+            <FormFieldDescription>\n+              This external moderation phase is current enabled. By disabling,\n+              no new moderation queries will be sent to the URL provided.\n+            </FormFieldDescription>\n+          </Localized>\n+          <Localized id=\"configure-moderationPhases-disableExternalModerationPhaseButton\">\n+            <Button color=\"alert\" onClick={onDisable}>\n+              Disable phase\n+            </Button>\n+          </Localized>\n+        </FormField>\n+      ) : (\n+        <FormField>\n+          <Localized id=\"configure-moderationPhases-enableExternalModerationPhase\">\n+            <Label>Enable external moderation phase</Label>\n+          </Localized>\n+          <Localized id=\"configure-moderationPhases-enableExternalModerationPhaseDescription\">\n+            <FormFieldDescription>\n+              This external moderation phase is currently disabled. By enabling,\n+              new moderation queries will be sent to the URL provided.\n+            </FormFieldDescription>\n+          </Localized>\n+          <Localized id=\"configure-moderationPhases-enableExternalModerationPhaseButton\">\n+            <Button color=\"regular\" onClick={onEnable}>\n+              Enable phase\n+            </Button>\n+          </Localized>\n+        </FormField>\n+      )}\n+      <FormField>\n+        <Localized id=\"configure-moderationPhases-deleteExternalModerationPhase\">\n+          <Label>Delete external moderation phase</Label>\n+        </Localized>\n+        <Localized id=\"configure-moderationPhases-deleteExternalModerationPhaseDescription\">\n+          <FormFieldDescription>\n+            Deleting this external moderation phase will stop any new moderation\n+            queries from being sent to this URL and will remove all the\n+            associated settings.\n+          </FormFieldDescription>\n+        </Localized>\n+        <Localized id=\"configure-moderationPhases-deleteExternalModerationPhaseButton\">\n+          <Button color=\"alert\" onClick={onDelete}>\n+            Delete phase\n+          </Button>\n+        </Localized>\n+      </FormField>\n+    </>\n+  );\n+};\n+\n+const enhanced = withRouter(\n+  withFragmentContainer<Props>({\n+    phase: graphql`\n+      fragment ExternalModerationPhaseDangerZone_phase on ExternalModerationPhase {\n+        id\n+        enabled\n+      }\n+    `,\n+  })(ExternalModerationPhaseDangerZone)\n+);\n+\n+export default enhanced;"
    },
    {
      "sha": "2e86058cb95dce63a781a4725ed3b3695736c8c5",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseDetails.tsx",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseDetails.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseDetails.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseDetails.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,35 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+import { graphql } from \"react-relay\";\n+\n+import Subheader from \"coral-admin/routes/Configure/Subheader\";\n+import { withFragmentContainer } from \"coral-framework/lib/relay\";\n+\n+import { ExternalModerationPhaseDetails_phase } from \"coral-admin/__generated__/ExternalModerationPhaseDetails_phase.graphql\";\n+\n+import ConfigureExternalModerationPhaseForm from \"../ConfigureExternalModerationPhaseForm\";\n+\n+interface Props {\n+  phase: ExternalModerationPhaseDetails_phase;\n+}\n+\n+const ExternalModerationPhaseDetails: FunctionComponent<Props> = ({\n+  phase,\n+}) => (\n+  <>\n+    <Localized id=\"configure-moderationPhases-phaseDetails\">\n+      <Subheader>Phase details</Subheader>\n+    </Localized>\n+    <ConfigureExternalModerationPhaseForm phase={phase} />\n+  </>\n+);\n+\n+const enhanced = withFragmentContainer<Props>({\n+  phase: graphql`\n+    fragment ExternalModerationPhaseDetails_phase on ExternalModerationPhase {\n+      ...ConfigureExternalModerationPhaseForm_phase\n+    }\n+  `,\n+})(ExternalModerationPhaseDetails);\n+\n+export default enhanced;"
    },
    {
      "sha": "97340b80f06ac08cf3221b567825513ff6c37eec",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseStatus.tsx",
      "status": "added",
      "additions": 91,
      "deletions": 0,
      "changes": 91,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseStatus.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseStatus.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/ExternalModerationPhaseStatus.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,91 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+import { graphql } from \"react-relay\";\n+\n+import Subheader from \"coral-admin/routes/Configure/Subheader\";\n+import { CopyButton } from \"coral-framework/components\";\n+import { ExternalLink } from \"coral-framework/lib/i18n/components\";\n+import { withFragmentContainer } from \"coral-framework/lib/relay\";\n+import {\n+  Flex,\n+  FormField,\n+  FormFieldDescription,\n+  HelperText,\n+  Label,\n+  PasswordField,\n+} from \"coral-ui/components/v2\";\n+\n+import { ExternalModerationPhaseStatus_phase } from \"coral-admin/__generated__/ExternalModerationPhaseStatus_phase.graphql\";\n+\n+import StatusMarker from \"../StatusMarker\";\n+\n+interface Props {\n+  phase: ExternalModerationPhaseStatus_phase;\n+}\n+\n+const ExternalModerationPhaseStatus: FunctionComponent<Props> = ({ phase }) => {\n+  return (\n+    <>\n+      <Localized id=\"configure-moderationPhases-phaseStatus\">\n+        <Subheader>Phase status</Subheader>\n+      </Localized>\n+      <FormField>\n+        <Localized id=\"configure-moderationPhases-status\">\n+          <Label>Status</Label>\n+        </Localized>\n+        <StatusMarker enabled={phase.enabled} />\n+      </FormField>\n+      <FormField>\n+        <Localized id=\"configure-moderationPhases-signingSecret\">\n+          <Label>Signing secret</Label>\n+        </Localized>\n+        <Localized\n+          id=\"configure-moderationPhases-signingSecretDescription\"\n+          externalLink={\n+            <ExternalLink href=\"https://github.com/coralproject/talk/blob/master/EXTERNAL_MODERATION_PHASES.md#request-signing\" />\n+          }\n+        >\n+          <FormFieldDescription>\n+            The following signing secret is used to sign request payloads sent\n+            to the URL. To learn more about webhook signing, visit our{\" \"}\n+            <ExternalLink href=\"https://github.com/coralproject/talk/blob/master/EXTERNAL_MODERATION_PHASES.md#request-signing\">\n+              docs\n+            </ExternalLink>\n+            .\n+          </FormFieldDescription>\n+        </Localized>\n+        <Flex direction=\"row\" itemGutter=\"half\" alignItems=\"center\">\n+          <PasswordField\n+            value={phase.signingSecret.secret}\n+            fullWidth\n+            readOnly\n+          />\n+          <CopyButton text={phase.signingSecret.secret} />\n+        </Flex>\n+        <Localized\n+          id=\"configure-moderationPhases-generatedAt\"\n+          $date={new Date(phase.signingSecret.createdAt)}\n+        >\n+          <HelperText>\n+            KEY GENERATED AT: {phase.signingSecret.createdAt}\n+          </HelperText>\n+        </Localized>\n+      </FormField>\n+    </>\n+  );\n+};\n+\n+const enhanced = withFragmentContainer<Props>({\n+  phase: graphql`\n+    fragment ExternalModerationPhaseStatus_phase on ExternalModerationPhase {\n+      id\n+      enabled\n+      signingSecret {\n+        secret\n+        createdAt\n+      }\n+    }\n+  `,\n+})(ExternalModerationPhaseStatus);\n+\n+export default enhanced;"
    },
    {
      "sha": "c5122f26a1946c694e2f993e700f0354444ec610",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateExternalModerationPhaseSigningSecretMutation.ts",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateExternalModerationPhaseSigningSecretMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateExternalModerationPhaseSigningSecretMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateExternalModerationPhaseSigningSecretMutation.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,38 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { RotateExternalModerationPhaseSigningSecretMutation as MutationTypes } from \"coral-admin/__generated__/RotateExternalModerationPhaseSigningSecretMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const RotateExternalModerationPhaseSigningSecretMutation = createMutation(\n+  \"rotateExternalModerationPhaseSigningSecret\",\n+  (environment: Environment, input: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation RotateExternalModerationPhaseSigningSecretMutation(\n+          $input: RotateExternalModerationPhaseSigningSecretInput!\n+        ) {\n+          rotateExternalModerationPhaseSigningSecret(input: $input) {\n+            phase {\n+              ...ConfigureExternalModerationPhaseContainer_phase\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          ...input,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default RotateExternalModerationPhaseSigningSecretMutation;"
    },
    {
      "sha": "09aae758ae27d1b8780feed5f86cc2173bd32e0a",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateSigningSecretModal.css",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateSigningSecretModal.css",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateSigningSecretModal.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateSigningSecretModal.css?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,10 @@\n+.root {\n+  width: 500px;\n+}\n+\n+.title {\n+  font-size: var(--v2-font-size-5);\n+  font-family: var(--v2-font-family-primary);\n+  font-weight: var(--v2-font-weight-primary-semi-bold);\n+  line-height: var(--v2-line-height-title);\n+}"
    },
    {
      "sha": "0923eeeaa7bcb1c45b906b817b0e0c0076c68a47",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateSigningSecretModal.tsx",
      "status": "added",
      "additions": 170,
      "deletions": 0,
      "changes": 170,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateSigningSecretModal.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateSigningSecretModal.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/RotateSigningSecretModal.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,170 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import { FORM_ERROR } from \"final-form\";\n+import React, { FunctionComponent, useCallback } from \"react\";\n+import { Field, Form } from \"react-final-form\";\n+\n+import { useNotification } from \"coral-admin/App/GlobalNotification\";\n+import { InvalidRequestError } from \"coral-framework/lib/errors\";\n+import { useMutation } from \"coral-framework/lib/relay\";\n+import {\n+  Button,\n+  CallOut,\n+  Card,\n+  CardCloseButton,\n+  Flex,\n+  FormField,\n+  HelperText,\n+  HorizontalGutter,\n+  Label,\n+  Modal,\n+  Option,\n+  SelectField,\n+} from \"coral-ui/components/v2\";\n+import AppNotification from \"coral-ui/components/v2/AppNotification\";\n+\n+import RotateExternalModerationPhaseSigningSecretMutation from \"./RotateExternalModerationPhaseSigningSecretMutation\";\n+\n+import styles from \"./RotateSigningSecretModal.css\";\n+\n+interface Props {\n+  phaseID: string;\n+  onHide: () => void;\n+  open: boolean;\n+}\n+\n+const RotateWebhookEndpointSigningSecretModal: FunctionComponent<Props> = ({\n+  onHide,\n+  open,\n+  phaseID,\n+}) => {\n+  const rotateExternalModerationPhaseSigningSecret = useMutation(\n+    RotateExternalModerationPhaseSigningSecretMutation\n+  );\n+  const { setMessage, clearMessage } = useNotification();\n+  const onRotateSecret = useCallback(\n+    async ({ inactiveIn: inactiveInString }) => {\n+      try {\n+        const inactiveIn = parseInt(inactiveInString, 10);\n+        await rotateExternalModerationPhaseSigningSecret({\n+          id: phaseID,\n+          inactiveIn,\n+        });\n+\n+        // Post a notification about the successful change.\n+        setMessage(\n+          <Localized id=\"configure-moderationPhases-rotateSigningSecretSuccessUseNewSecret\">\n+            <AppNotification icon=\"check_circle_outline\" onClose={clearMessage}>\n+              External moderation phase signing secret has been rotated. Please\n+              ensure you update your integrations to use the new secret below.\n+            </AppNotification>\n+          </Localized>\n+        );\n+\n+        // Scroll after a zero timeout because chrome won't scroll otherwise.\n+        setTimeout(() => window.scroll(0, 0), 0);\n+      } catch (err) {\n+        if (err instanceof InvalidRequestError) {\n+          return err.invalidArgs;\n+        }\n+        return { [FORM_ERROR]: err.message };\n+      }\n+\n+      // Dismiss the modal.\n+      onHide();\n+\n+      return;\n+    },\n+    [phaseID, rotateExternalModerationPhaseSigningSecret]\n+  );\n+\n+  return (\n+    <Modal open={open}>\n+      {({ firstFocusableRef, lastFocusableRef }) => (\n+        <Card className={styles.root}>\n+          <Flex justifyContent=\"flex-end\">\n+            <CardCloseButton onClick={onHide} ref={firstFocusableRef} />\n+          </Flex>\n+          <Form onSubmit={onRotateSecret} initialValues={{ inactiveIn: 0 }}>\n+            {({ handleSubmit, submitting, submitError }) => (\n+              <form onSubmit={handleSubmit}>\n+                <HorizontalGutter size=\"double\">\n+                  <Localized id=\"configure-moderationPhases-rotateSigningSecret\">\n+                    <h2 className={styles.title}>Rotate signing secret</h2>\n+                  </Localized>\n+                  {submitError && (\n+                    <CallOut color=\"error\" fullWidth>\n+                      {submitError}\n+                    </CallOut>\n+                  )}\n+                  <Localized id=\"configure-moderationPhases-rotateSigningSecretHelper\">\n+                    <HelperText>\n+                      After it expires, signatures will no longer be generated\n+                      with the old secret.\n+                    </HelperText>\n+                  </Localized>\n+                  <Field name=\"inactiveIn\">\n+                    {({ input }) => (\n+                      <FormField>\n+                        <Localized id=\"configure-moderationPhases-expiresOldSecret\">\n+                          <Label>Expire the old secret</Label>\n+                        </Localized>\n+                        <SelectField {...input} fullWidth>\n+                          <Localized id=\"configure-moderationPhases-expiresOldSecretImmediately\">\n+                            <Option value=\"0\">Immediately</Option>\n+                          </Localized>\n+                          <Localized\n+                            id=\"configure-moderationPhases-expiresOldSecretHoursFromNow\"\n+                            $hours={1}\n+                          >\n+                            <Option value=\"3600\">1 hour from now</Option>\n+                          </Localized>\n+                          <Localized\n+                            id=\"configure-moderationPhases-expiresOldSecretHoursFromNow\"\n+                            $hours={2}\n+                          >\n+                            <Option value=\"7200\">2 hours from now</Option>\n+                          </Localized>\n+                          <Localized\n+                            id=\"configure-moderationPhases-expiresOldSecretHoursFromNow\"\n+                            $hours={12}\n+                          >\n+                            <Option value=\"43200\">12 hours from now</Option>\n+                          </Localized>\n+                          <Localized\n+                            id=\"configure-moderationPhases-expiresOldSecretHoursFromNow\"\n+                            $hours={24}\n+                          >\n+                            <Option value=\"86400\">24 hours from now</Option>\n+                          </Localized>\n+                        </SelectField>\n+                      </FormField>\n+                    )}\n+                  </Field>\n+                  <Flex direction=\"row\" justifyContent=\"flex-end\" itemGutter>\n+                    <Localized id=\"configure-moderationPhases-cancelButton\">\n+                      <Button color=\"regular\" onClick={onHide}>\n+                        Cancel\n+                      </Button>\n+                    </Localized>\n+                    <Localized id=\"configure-moderationPhases-rotateSigningSecretButton\">\n+                      <Button\n+                        type=\"submit\"\n+                        color=\"alert\"\n+                        disabled={submitting}\n+                        ref={lastFocusableRef}\n+                      >\n+                        Rotate signing secret\n+                      </Button>\n+                    </Localized>\n+                  </Flex>\n+                </HorizontalGutter>\n+              </form>\n+            )}\n+          </Form>\n+        </Card>\n+      )}\n+    </Modal>\n+  );\n+};\n+\n+export default RotateWebhookEndpointSigningSecretModal;"
    },
    {
      "sha": "927d090996fdc7c9504d66be130e0d26b0c4b27b",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/index.ts",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhase/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,4 @@\n+export {\n+  default,\n+  default as ConfigureWebhookEndpointRoute,\n+} from \"./ConfigureExternalModerationPhaseRoute\";"
    },
    {
      "sha": "467ed45dca7a92eed7b7a1d7ca178579692722a3",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/ConfigureExternalModerationPhaseForm.tsx",
      "status": "added",
      "additions": 240,
      "deletions": 0,
      "changes": 240,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/ConfigureExternalModerationPhaseForm.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/ConfigureExternalModerationPhaseForm.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/ConfigureExternalModerationPhaseForm.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,240 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import { FORM_ERROR } from \"final-form\";\n+import { Match, Router, withRouter } from \"found\";\n+import React, { FunctionComponent, useCallback } from \"react\";\n+import { Field, Form } from \"react-final-form\";\n+import { graphql } from \"react-relay\";\n+\n+import getExternalModerationPhaseLink from \"coral-admin/helpers/getExternalModerationPhaseLink\";\n+import { InvalidRequestError } from \"coral-framework/lib/errors\";\n+import {\n+  colorFromMeta,\n+  parseInteger,\n+  ValidationMessage,\n+} from \"coral-framework/lib/form\";\n+import { useMutation, withFragmentContainer } from \"coral-framework/lib/relay\";\n+import {\n+  composeValidators,\n+  required,\n+  validateURL,\n+  validateWholeNumberBetween,\n+} from \"coral-framework/lib/validation\";\n+import { GQLCOMMENT_BODY_FORMAT } from \"coral-framework/schema\";\n+import {\n+  Button,\n+  CallOut,\n+  Flex,\n+  FormField,\n+  HelperText,\n+  HorizontalGutter,\n+  Label,\n+  Option,\n+  SelectField,\n+  TextField,\n+} from \"coral-ui/components/v2\";\n+\n+import { ConfigureExternalModerationPhaseForm_phase } from \"coral-admin/__generated__/ConfigureExternalModerationPhaseForm_phase.graphql\";\n+\n+import CreateExternalModerationPhaseMutation from \"./CreateExternalModerationPhaseMutation\";\n+import UpdateExternalModerationPhaseMutation from \"./UpdateExternalModerationPhaseMutation\";\n+\n+interface Props {\n+  onCancel?: () => void;\n+  router: Router;\n+  match: Match;\n+  phase: ConfigureExternalModerationPhaseForm_phase | null;\n+}\n+\n+const initialValues = (phase?: any) =>\n+  phase\n+    ? phase\n+    : {\n+        name: \"\",\n+        url: \"\",\n+        timeout: 200,\n+        format: \"HTML\",\n+      };\n+\n+const ConfigureExternalModerationPhaseForm: FunctionComponent<Props> = ({\n+  onCancel,\n+  phase,\n+  router,\n+}) => {\n+  const create = useMutation(CreateExternalModerationPhaseMutation);\n+  const update = useMutation(UpdateExternalModerationPhaseMutation);\n+  const onSubmit = useCallback(\n+    async (values) => {\n+      try {\n+        if (phase) {\n+          // The external moderation phase was defined, update it.\n+          await update(values);\n+        } else {\n+          // The external moderation phase wasn't defined, create it.\n+          const result = await create(values);\n+\n+          // Redirect the user to the new external moderation phase page.\n+          router.push(getExternalModerationPhaseLink(result.phase.id));\n+\n+          // We don't need to close this modal because we are navigating...\n+        }\n+\n+        return;\n+      } catch (err) {\n+        if (err instanceof InvalidRequestError) {\n+          return err.invalidArgs;\n+        }\n+        return { [FORM_ERROR]: err.message };\n+      }\n+    },\n+    [phase, create, update, router]\n+  );\n+\n+  return (\n+    <Form onSubmit={onSubmit} initialValues={initialValues(phase)}>\n+      {({ handleSubmit, submitting, submitError, pristine }) => (\n+        <form autoComplete=\"off\" onSubmit={handleSubmit}>\n+          <HorizontalGutter size=\"double\">\n+            {submitError && (\n+              <CallOut color=\"error\" fullWidth>\n+                {submitError}\n+              </CallOut>\n+            )}\n+            <Field name=\"name\" validate={composeValidators(required)}>\n+              {({ input, meta }) => (\n+                <FormField>\n+                  <Localized id=\"configure-moderationPhases-name\">\n+                    <Label>Name</Label>\n+                  </Localized>\n+                  <TextField {...input} color={colorFromMeta(meta)} fullWidth />\n+                  <ValidationMessage meta={meta} fullWidth />\n+                </FormField>\n+              )}\n+            </Field>\n+            <Field\n+              name=\"url\"\n+              validate={composeValidators(required, validateURL)}\n+            >\n+              {({ input, meta }) => (\n+                <FormField>\n+                  <Localized id=\"configure-moderationPhases-endpointURL\">\n+                    <Label>Callback URL</Label>\n+                  </Localized>\n+                  <Localized id=\"configure-moderationPhases-endpointURL-details\">\n+                    <HelperText>\n+                      The URL that Coral moderation requests will be POST'ed to.\n+                      The provided URL must respond within the designated\n+                      timeout or the decision of the moderation action will be\n+                      skipped.\n+                    </HelperText>\n+                  </Localized>\n+                  <TextField\n+                    {...input}\n+                    placeholder=\"https://\"\n+                    color={colorFromMeta(meta)}\n+                    fullWidth\n+                  />\n+                  <ValidationMessage meta={meta} fullWidth />\n+                </FormField>\n+              )}\n+            </Field>\n+            <Field\n+              name=\"timeout\"\n+              parse={parseInteger}\n+              validate={composeValidators(\n+                required,\n+                validateWholeNumberBetween(100, 10000)\n+              )}\n+            >\n+              {({ input, meta }) => (\n+                <FormField>\n+                  <Localized id=\"configure-moderationPhases-timeout\">\n+                    <Label>Timeout</Label>\n+                  </Localized>\n+                  <Localized id=\"configure-moderationPhases-timeout-details\">\n+                    <HelperText>\n+                      The time that Coral will wait for your moderation response\n+                      in milliseconds.\n+                    </HelperText>\n+                  </Localized>\n+                  <TextField\n+                    {...input}\n+                    type=\"number\"\n+                    color={colorFromMeta(meta)}\n+                    fullWidth\n+                  />\n+                  <ValidationMessage meta={meta} fullWidth />\n+                </FormField>\n+              )}\n+            </Field>\n+            <Field name=\"format\" validate={composeValidators(required)}>\n+              {({ input, meta }) => (\n+                <FormField>\n+                  <Localized id=\"configure-moderationPhases-format\">\n+                    <Label>Comment Body Format</Label>\n+                  </Localized>\n+                  <Localized id=\"configure-moderationPhases-format-details\">\n+                    <HelperText>\n+                      The format that Coral will send the comment body in. By\n+                      default, Coral will send the comment in the original HTML\n+                      encoded format. If \"Plain Text\" is selected, then the HTML\n+                      stripped version will be sent instead.\n+                    </HelperText>\n+                  </Localized>\n+                  <SelectField {...input} fullWidth>\n+                    <Localized id=\"configure-moderationPhases-format-html\">\n+                      <Option value={GQLCOMMENT_BODY_FORMAT.HTML}>HTML</Option>\n+                    </Localized>\n+                    <Localized id=\"configure-moderationPhases-format-plain\">\n+                      <Option value={GQLCOMMENT_BODY_FORMAT.PLAIN_TEXT}>\n+                        Plain Text\n+                      </Option>\n+                    </Localized>\n+                  </SelectField>\n+                  <ValidationMessage meta={meta} fullWidth />\n+                </FormField>\n+              )}\n+            </Field>\n+            <Flex direction=\"row\" justifyContent=\"flex-end\" itemGutter>\n+              {onCancel && (\n+                <Localized id=\"configure-moderationPhases-cancelButton\">\n+                  <Button type=\"button\" color=\"mono\" onClick={onCancel}>\n+                    Cancel\n+                  </Button>\n+                </Localized>\n+              )}\n+              {phase ? (\n+                <Localized id=\"configure-moderationPhases-updateExternalModerationPhaseButton\">\n+                  <Button type=\"submit\" disabled={submitting || pristine}>\n+                    Update details\n+                  </Button>\n+                </Localized>\n+              ) : (\n+                <Localized id=\"configure-moderationPhases-addExternalModerationPhase\">\n+                  <Button type=\"submit\" disabled={submitting}>\n+                    Add external moderation phase\n+                  </Button>\n+                </Localized>\n+              )}\n+            </Flex>\n+          </HorizontalGutter>\n+        </form>\n+      )}\n+    </Form>\n+  );\n+};\n+\n+const enhanced = withRouter(\n+  withFragmentContainer<Props>({\n+    phase: graphql`\n+      fragment ConfigureExternalModerationPhaseForm_phase on ExternalModerationPhase {\n+        id\n+        name\n+        url\n+        timeout\n+        format\n+      }\n+    `,\n+  })(ConfigureExternalModerationPhaseForm)\n+);\n+\n+export default enhanced;"
    },
    {
      "sha": "0fc44e5060c09346bd2af458afd5d26dff2412be",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/CreateExternalModerationPhaseMutation.ts",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/CreateExternalModerationPhaseMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/CreateExternalModerationPhaseMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/CreateExternalModerationPhaseMutation.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,41 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { CreateExternalModerationPhaseMutation as MutationTypes } from \"coral-admin/__generated__/CreateExternalModerationPhaseMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const CreateExternalModerationPhaseMutation = createMutation(\n+  \"createExternalModerationPhase\",\n+  (environment: Environment, input: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation CreateExternalModerationPhaseMutation(\n+          $input: CreateExternalModerationPhaseInput!\n+        ) {\n+          createExternalModerationPhase(input: $input) {\n+            phase {\n+              id\n+            }\n+            settings {\n+              ...ModerationPhasesConfigContainer_settings\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          ...input,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default CreateExternalModerationPhaseMutation;"
    },
    {
      "sha": "cea5fe2d5b5d009936a09ab9d8ebd7d63732145e",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/UpdateExternalModerationPhaseMutation.ts",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/UpdateExternalModerationPhaseMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/UpdateExternalModerationPhaseMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/UpdateExternalModerationPhaseMutation.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,38 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { UpdateExternalModerationPhaseMutation as MutationTypes } from \"coral-admin/__generated__/UpdateExternalModerationPhaseMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const UpdateExternalModerationPhaseMutation = createMutation(\n+  \"updateExternalModerationPhase\",\n+  (environment: Environment, input: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation UpdateExternalModerationPhaseMutation(\n+          $input: UpdateExternalModerationPhaseInput!\n+        ) {\n+          updateExternalModerationPhase(input: $input) {\n+            phase {\n+              ...ConfigureExternalModerationPhaseContainer_phase\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          ...input,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default UpdateExternalModerationPhaseMutation;"
    },
    {
      "sha": "06e590bd5f06e3617888abab5ecb0327047b2030",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/index.ts",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ConfigureExternalModerationPhaseForm/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,4 @@\n+export {\n+  default,\n+  default as ConfigureExternalModerationPhaseForm,\n+} from \"./ConfigureExternalModerationPhaseForm\";"
    },
    {
      "sha": "c9d7fca4d3ccb537689fc9da7eaa95fa564afae0",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ExperimentalExternalModerationPhaseCallOut.tsx",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ExperimentalExternalModerationPhaseCallOut.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ExperimentalExternalModerationPhaseCallOut.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ExperimentalExternalModerationPhaseCallOut.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,23 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+\n+import ExperimentalCallOut from \"coral-admin/components/ExperimentalCallOut\";\n+import { ExternalLink } from \"coral-framework/lib/i18n/components\";\n+\n+const ExperimentalExternalModerationPhaseCallOut: FunctionComponent = () => (\n+  <Localized\n+    id=\"configure-moderationPhases-experimentalFeature\"\n+    ContactUsLink={<ExternalLink href=\"https://coralproject.net/contact/\" />}\n+  >\n+    <ExperimentalCallOut>\n+      The custom moderation phases feature is currently in active development.\n+      Please{\" \"}\n+      <ExternalLink href=\"https://coralproject.net/contact/\">\n+        contact us with any feedback or requests\n+      </ExternalLink>\n+      .\n+    </ExperimentalCallOut>\n+  </Localized>\n+);\n+\n+export default ExperimentalExternalModerationPhaseCallOut;"
    },
    {
      "sha": "1b5b25d5a6c08b8adbce85d8b54530d113cc1f30",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ExternalModerationPhaseRow.css",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ExternalModerationPhaseRow.css",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ExternalModerationPhaseRow.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ExternalModerationPhaseRow.css?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,10 @@\n+.urlColumn {\n+  width: 100%;\n+}\n+\n+.detailsButton {\n+  font-family: var(--v2-font-family-primary);\n+  font-weight: var(--v2-font-weight-primary-semi-bold);\n+  line-height: var(--v2-line-height-reset);\n+  font-size: var(--v2-font-size-2);\n+}"
    },
    {
      "sha": "492f73b7169b033f21684d3f58626897781710fd",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ExternalModerationPhaseRow.tsx",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ExternalModerationPhaseRow.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ExternalModerationPhaseRow.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ExternalModerationPhaseRow.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,61 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+import { graphql } from \"react-relay\";\n+\n+import getExternalModerationPhaseLink from \"coral-admin/helpers/getExternalModerationPhaseLink\";\n+import { withFragmentContainer } from \"coral-framework/lib/relay\";\n+import {\n+  Button,\n+  Flex,\n+  Icon,\n+  TableCell,\n+  TableRow,\n+} from \"coral-ui/components/v2\";\n+\n+import { ExternalModerationPhaseRow_phase } from \"coral-admin/__generated__/ExternalModerationPhaseRow_phase.graphql\";\n+\n+import StatusMarker from \"./StatusMarker\";\n+\n+import styles from \"./ExternalModerationPhaseRow.css\";\n+\n+interface Props {\n+  phase: ExternalModerationPhaseRow_phase;\n+}\n+\n+const ExternalModerationPhaseRow: FunctionComponent<Props> = ({ phase }) => (\n+  <TableRow data-testid={`moderation-phase-${phase.id}`}>\n+    <TableCell className={styles.urlColumn}>{phase.name}</TableCell>\n+    <TableCell>\n+      <StatusMarker enabled={phase.enabled} />\n+    </TableCell>\n+    <TableCell>\n+      <Flex justifyContent=\"flex-end\">\n+        <Localized\n+          id=\"configure-moderationPhases-detailsButton\"\n+          icon={<Icon>keyboard_arrow_right</Icon>}\n+        >\n+          <Button\n+            variant=\"text\"\n+            to={getExternalModerationPhaseLink(phase.id)}\n+            iconRight\n+          >\n+            Details\n+            <Icon>keyboard_arrow_right</Icon>\n+          </Button>\n+        </Localized>\n+      </Flex>\n+    </TableCell>\n+  </TableRow>\n+);\n+\n+const enhanced = withFragmentContainer<Props>({\n+  phase: graphql`\n+    fragment ExternalModerationPhaseRow_phase on ExternalModerationPhase {\n+      id\n+      name\n+      enabled\n+    }\n+  `,\n+})(ExternalModerationPhaseRow);\n+\n+export default enhanced;"
    },
    {
      "sha": "5359a46e1a69ae110fa9f8672727ab6a1476bde8",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesConfigContainer.tsx",
      "status": "added",
      "additions": 123,
      "deletions": 0,
      "changes": 123,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesConfigContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesConfigContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesConfigContainer.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,123 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+import { graphql } from \"react-relay\";\n+\n+import { urls } from \"coral-framework/helpers\";\n+import { ExternalLink } from \"coral-framework/lib/i18n/components\";\n+import { withFragmentContainer } from \"coral-framework/lib/relay\";\n+import {\n+  Button,\n+  CallOut,\n+  FormFieldDescription,\n+  HorizontalGutter,\n+  Icon,\n+  Table,\n+  TableBody,\n+  TableCell,\n+  TableHead,\n+  TableRow,\n+} from \"coral-ui/components/v2\";\n+\n+import { ModerationPhasesConfigContainer_settings } from \"coral-admin/__generated__/ModerationPhasesConfigContainer_settings.graphql\";\n+\n+import ConfigBox from \"../../ConfigBox\";\n+import Header from \"../../Header\";\n+import Subheader from \"../../Subheader\";\n+import ExperimentalExternalModerationPhaseCallOut from \"./ExperimentalExternalModerationPhaseCallOut\";\n+import ExternalModerationPhaseRow from \"./ExternalModerationPhaseRow\";\n+\n+interface Props {\n+  settings: ModerationPhasesConfigContainer_settings;\n+}\n+\n+const ModerationPhasesConfigContainer: FunctionComponent<Props> = ({\n+  settings,\n+}) => {\n+  return (\n+    <HorizontalGutter size=\"double\" data-testid=\"moderation-phases-container\">\n+      <ExperimentalExternalModerationPhaseCallOut />\n+      <ConfigBox\n+        title={\n+          <Localized id=\"configure-moderationPhases-header-title\">\n+            <Header htmlFor=\"configure-moderationPhases-header.title\">\n+              Moderation Phases\n+            </Header>\n+          </Localized>\n+        }\n+      >\n+        <Localized\n+          id=\"configure-moderationPhases-description\"\n+          externalLink={\n+            <ExternalLink href=\"https://github.com/coralproject/talk/blob/master/EXTERNAL_MODERATION_PHASES.md#request-signing\" />\n+          }\n+        >\n+          <FormFieldDescription>\n+            Configure a external moderation phase to automate some moderation\n+            actions. Moderation requests will be JSON encoded and signed. To\n+            learn more about moderation requests, visit our{\" \"}\n+            <ExternalLink href=\"https://github.com/coralproject/talk/blob/master/EXTERNAL_MODERATION_PHASES.md#request-signing\">\n+              docs\n+            </ExternalLink>\n+            .\n+          </FormFieldDescription>\n+        </Localized>\n+        <Button\n+          to={urls.admin.addExternalModerationPhase}\n+          iconLeft\n+          data-testid=\"add-external-moderation-phase\"\n+        >\n+          <Icon size=\"md\">add</Icon>\n+          <Localized id=\"configure-moderationPhases-addExternalModerationPhaseButton\">\n+            Add external moderation phase\n+          </Localized>\n+        </Button>\n+        <Localized id=\"configure-moderationPhases-moderationPhases\">\n+          <Subheader>Moderation Phases</Subheader>\n+        </Localized>\n+        {settings.integrations.external &&\n+        settings.integrations.external.phases.length > 0 ? (\n+          <Table fullWidth>\n+            <TableHead>\n+              <TableRow>\n+                <Localized id=\"configure-moderationPhases-name\">\n+                  <TableCell>Name</TableCell>\n+                </Localized>\n+                <Localized id=\"configure-moderationPhases-status\">\n+                  <TableCell>Status</TableCell>\n+                </Localized>\n+                <TableCell />\n+              </TableRow>\n+            </TableHead>\n+            <TableBody>\n+              {settings.integrations.external.phases.map((phase, idx) => (\n+                <ExternalModerationPhaseRow key={idx} phase={phase} />\n+              ))}\n+            </TableBody>\n+          </Table>\n+        ) : (\n+          <Localized id=\"configure-moderationPhases-noExternalModerationPhases\">\n+            <CallOut color=\"regular\" fullWidth>\n+              There are no external moderation phases configured, add one above.\n+            </CallOut>\n+          </Localized>\n+        )}\n+      </ConfigBox>\n+    </HorizontalGutter>\n+  );\n+};\n+\n+const enhanced = withFragmentContainer<Props>({\n+  settings: graphql`\n+    fragment ModerationPhasesConfigContainer_settings on Settings {\n+      integrations {\n+        external {\n+          phases {\n+            ...ExternalModerationPhaseRow_phase\n+          }\n+        }\n+      }\n+    }\n+  `,\n+})(ModerationPhasesConfigContainer);\n+\n+export default enhanced;"
    },
    {
      "sha": "146ffc00261a10ec8247a33b3ed43e2cde105883",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesConfigRoute.tsx",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesConfigRoute.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesConfigRoute.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesConfigRoute.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,37 @@\n+import React, { FunctionComponent } from \"react\";\n+import { graphql } from \"react-relay\";\n+\n+import { withRouteConfig } from \"coral-framework/lib/router\";\n+import { Delay, Spinner } from \"coral-ui/components/v2\";\n+\n+import { ModerationPhasesConfigRouteQueryResponse } from \"coral-admin/__generated__/ModerationPhasesConfigRouteQuery.graphql\";\n+\n+import ModerationPhasesConfigContainer from \"./ModerationPhasesConfigContainer\";\n+\n+interface Props {\n+  data: ModerationPhasesConfigRouteQueryResponse | null;\n+}\n+\n+const ModerationPhasesConfigRoute: FunctionComponent<Props> = ({ data }) => {\n+  if (!data) {\n+    return (\n+      <Delay>\n+        <Spinner />\n+      </Delay>\n+    );\n+  }\n+\n+  return <ModerationPhasesConfigContainer settings={data.settings} />;\n+};\n+\n+const enhanced = withRouteConfig<Props>({\n+  query: graphql`\n+    query ModerationPhasesConfigRouteQuery {\n+      settings {\n+        ...ModerationPhasesConfigContainer_settings\n+      }\n+    }\n+  `,\n+})(ModerationPhasesConfigRoute);\n+\n+export default enhanced;"
    },
    {
      "sha": "ad766b9a4fad46138cded0169837e5d12fb3d18e",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesLayout.tsx",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesLayout.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesLayout.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/ModerationPhasesLayout.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,27 @@\n+import React, { FunctionComponent } from \"react\";\n+\n+import MainLayout from \"coral-admin/components/MainLayout\";\n+\n+import ConfigureLinks from \"../../ConfigureLinks\";\n+import Layout from \"../../Layout\";\n+import Main from \"../../Main\";\n+import SideBar from \"../../SideBar\";\n+\n+interface Props {\n+  children: React.ReactElement;\n+}\n+\n+const ModerationPhasesLayout: FunctionComponent<Props> = (props) => {\n+  return (\n+    <MainLayout>\n+      <Layout>\n+        <SideBar>\n+          <ConfigureLinks />\n+        </SideBar>\n+        <Main>{props.children}</Main>\n+      </Layout>\n+    </MainLayout>\n+  );\n+};\n+\n+export default ModerationPhasesLayout;"
    },
    {
      "sha": "3d54c73b6bc4d365623c83df468fef12da200609",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/StatusMarker.css",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/StatusMarker.css",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/StatusMarker.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/StatusMarker.css?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,12 @@\n+.success {\n+  background-color: var(--v2-palette-success-main);\n+  border-color: var(--v2-palette-success-main);\n+  color: var(--v2-colors-pure-white);\n+}\n+\n+.error {\n+  background-color: var(--v2-palette-error-darkest);\n+  border-color: var(--v2-palette-error-darkest);\n+  color: var(--v2-colors-pure-white);\n+  font-weight: var(--v2-font-weight-primary-semi-bold);\n+}"
    },
    {
      "sha": "7eabcafc7db3af44a72ded1fa3529af8872eba3e",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/StatusMarker.tsx",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/StatusMarker.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/StatusMarker.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/StatusMarker.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,23 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+\n+import { Marker } from \"coral-ui/components/v2\";\n+\n+import styles from \"./StatusMarker.css\";\n+\n+interface Props {\n+  enabled: boolean;\n+}\n+\n+const StatusMarker: FunctionComponent<Props> = ({ enabled }) =>\n+  enabled ? (\n+    <Localized id=\"configure-moderationPhases-enabledModerationPhase\">\n+      <Marker className={styles.success}>Enabled</Marker>\n+    </Localized>\n+  ) : (\n+    <Localized id=\"configure-moderationPhases-disableModerationPhase\">\n+      <Marker className={styles.error}>Disabled</Marker>\n+    </Localized>\n+  );\n+\n+export default StatusMarker;"
    },
    {
      "sha": "708e7d93c480d32e2eefa7d1b7075042f807ee15",
      "filename": "src/core/client/admin/routes/Configure/sections/ModerationPhases/index.ts",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/ModerationPhases/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/ModerationPhases/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,6 @@\n+export {\n+  default,\n+  default as ModerationPhasesConfigRoute,\n+} from \"./ModerationPhasesConfigRoute\";\n+export { default as AddExternalModerationPhaseRoute } from \"./AddExternalModerationPhase\";\n+export { default as ConfigureExternalModerationPhaseRoute } from \"./ConfigureExternalModerationPhase\";"
    },
    {
      "sha": "97b219f82775830d01aeaf8e96ddeca52f4b679f",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDetails.tsx",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDetails.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDetails.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDetails.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,3 +1,4 @@\n+import { Localized } from \"@fluent/react/compat\";\n import React, { FunctionComponent } from \"react\";\n import { graphql } from \"react-relay\";\n \n@@ -19,7 +20,9 @@ const EndpointDetails: FunctionComponent<Props> = ({\n   settings,\n }) => (\n   <>\n-    <Subheader>Endpoint details</Subheader>\n+    <Localized id=\"configure-webhooks-endpointDetails\">\n+      <Subheader>Endpoint details</Subheader>\n+    </Localized>\n     <ConfigureWebhookEndpointForm\n       settings={settings}\n       webhookEndpoint={webhookEndpoint}"
    },
    {
      "sha": "dcc35f0c918e01429632a76297e1f5cec95ebe40",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointStatus.tsx",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointStatus.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointStatus.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointStatus.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -62,9 +62,14 @@ const EndpointStatus: FunctionComponent<Props> = ({ webhookEndpoint }) => {\n           />\n           <CopyButton text={webhookEndpoint.signingSecret.secret} />\n         </Flex>\n-        <HelperText>\n-          KEY GENERATED AT: {webhookEndpoint.signingSecret.createdAt}\n-        </HelperText>\n+        <Localized\n+          id=\"configure-webhooks-generatedAt\"\n+          $date={new Date(webhookEndpoint.signingSecret.createdAt)}\n+        >\n+          <HelperText>\n+            KEY GENERATED AT: {webhookEndpoint.signingSecret.createdAt}\n+          </HelperText>\n+        </Localized>\n       </FormField>\n     </>\n   );"
    },
    {
      "sha": "81bc9c2f9dc0127c93448872bab8cb79328d27e1",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.tsx",
      "status": "modified",
      "additions": 13,
      "deletions": 8,
      "changes": 21,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -22,7 +22,7 @@ import {\n } from \"coral-ui/components/v2\";\n import AppNotification from \"coral-ui/components/v2/AppNotification\";\n \n-import RotateWebhookEndpointSecretMutation from \"./RotateWebhookEndpointSecretMutation\";\n+import RotateWebhookEndpointSigningSecretMutation from \"./RotateWebhookEndpointSigningSecretMutation\";\n \n import styles from \"./RotateSigningSecretModal.css\";\n \n@@ -32,20 +32,23 @@ interface Props {\n   open: boolean;\n }\n \n-const RotateWebhookEndpointSecretModal: FunctionComponent<Props> = ({\n+const RotateWebhookEndpointSigningSecretModal: FunctionComponent<Props> = ({\n   onHide,\n   open,\n   endpointID,\n }) => {\n-  const rotateWebhookEndpointSecret = useMutation(\n-    RotateWebhookEndpointSecretMutation\n+  const rotateWebhookEndpointSigningSecret = useMutation(\n+    RotateWebhookEndpointSigningSecretMutation\n   );\n   const { setMessage, clearMessage } = useNotification();\n   const onRotateSecret = useCallback(\n     async ({ inactiveIn: inactiveInString }) => {\n       try {\n         const inactiveIn = parseInt(inactiveInString, 10);\n-        await rotateWebhookEndpointSecret({ id: endpointID, inactiveIn });\n+        await rotateWebhookEndpointSigningSecret({\n+          id: endpointID,\n+          inactiveIn,\n+        });\n \n         // Post a notification about the successful change.\n         setMessage(\n@@ -56,7 +59,9 @@ const RotateWebhookEndpointSecretModal: FunctionComponent<Props> = ({\n             </AppNotification>\n           </Localized>\n         );\n-        window.scroll(0, 0);\n+\n+        // Scroll after a zero timeout because chrome won't scroll otherwise.\n+        setTimeout(() => window.scroll(0, 0), 0);\n       } catch (err) {\n         if (err instanceof InvalidRequestError) {\n           return err.invalidArgs;\n@@ -69,7 +74,7 @@ const RotateWebhookEndpointSecretModal: FunctionComponent<Props> = ({\n \n       return;\n     },\n-    [endpointID, rotateWebhookEndpointSecret]\n+    [endpointID, rotateWebhookEndpointSigningSecret]\n   );\n \n   return (\n@@ -162,4 +167,4 @@ const RotateWebhookEndpointSecretModal: FunctionComponent<Props> = ({\n   );\n };\n \n-export default RotateWebhookEndpointSecretModal;\n+export default RotateWebhookEndpointSigningSecretModal;"
    },
    {
      "sha": "68a39d25bbe21bffab5e67f13ddc9cabcb6a84bd",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateWebhookEndpointSigningSecretMutation.ts",
      "status": "renamed",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateWebhookEndpointSigningSecretMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateWebhookEndpointSigningSecretMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateWebhookEndpointSigningSecretMutation.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -7,19 +7,19 @@ import {\n   MutationInput,\n } from \"coral-framework/lib/relay\";\n \n-import { RotateWebhookEndpointSecretMutation as MutationTypes } from \"coral-admin/__generated__/RotateWebhookEndpointSecretMutation.graphql\";\n+import { RotateWebhookEndpointSigningSecretMutation as MutationTypes } from \"coral-admin/__generated__/RotateWebhookEndpointSigningSecretMutation.graphql\";\n \n let clientMutationId = 0;\n \n-const RotateWebhookEndpointSecretMutation = createMutation(\n-  \"rotateWebhookEndpointSecret\",\n+const RotateWebhookEndpointSigningSecretMutation = createMutation(\n+  \"rotateWebhookEndpointSigningSecret\",\n   (environment: Environment, input: MutationInput<MutationTypes>) =>\n     commitMutationPromiseNormalized<MutationTypes>(environment, {\n       mutation: graphql`\n-        mutation RotateWebhookEndpointSecretMutation(\n-          $input: RotateWebhookEndpointSecretInput!\n+        mutation RotateWebhookEndpointSigningSecretMutation(\n+          $input: RotateWebhookEndpointSigningSecretInput!\n         ) {\n-          rotateWebhookEndpointSecret(input: $input) {\n+          rotateWebhookEndpointSigningSecret(input: $input) {\n             endpoint {\n               ...ConfigureWebhookEndpointContainer_webhookEndpoint\n             }\n@@ -35,4 +35,4 @@ const RotateWebhookEndpointSecretMutation = createMutation(\n     })\n );\n \n-export default RotateWebhookEndpointSecretMutation;\n+export default RotateWebhookEndpointSigningSecretMutation;",
      "previous_filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateWebhookEndpointSecretMutation.ts"
    },
    {
      "sha": "bdbf16dddd2b13debb9d887cd95e8b17a68024af",
      "filename": "src/core/client/admin/routes/Configure/sections/index.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/routes/Configure/sections/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -11,3 +11,8 @@ export {\n   ConfigureWebhookEndpointRoute,\n   AddWebhookEndpointRoute,\n } from \"./WebhookEndpoints\";\n+export {\n+  ModerationPhasesConfigRoute,\n+  ConfigureExternalModerationPhaseRoute,\n+  AddExternalModerationPhaseRoute,\n+} from \"./ModerationPhases\";"
    },
    {
      "sha": "5b86791b09de59220102a87266e90b00eb0bc290",
      "filename": "src/core/client/admin/test/configure/__snapshots__/advanced.spec.tsx.snap",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/advanced.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/advanced.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/advanced.spec.tsx.snap?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -52,6 +52,15 @@ exports[`renders configure advanced 1`] = `\n                   Moderation\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/moderation/phases\"\n+                  onClick={[Function]}\n+                >\n+                  Moderation Phases\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link\""
    },
    {
      "sha": "e6251b394e8aee5f78a61ae227cf5a812b38de11",
      "filename": "src/core/client/admin/test/configure/__snapshots__/auth.spec.tsx.snap",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/auth.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/auth.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/auth.spec.tsx.snap?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -52,6 +52,15 @@ exports[`renders configure auth 1`] = `\n                   Moderation\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/moderation/phases\"\n+                  onClick={[Function]}\n+                >\n+                  Moderation Phases\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link\"\n@@ -1284,10 +1293,10 @@ more about creating a JWT Token with\n                         className=\"Box-root Flex-root Flex-flex Flex-justifySpaceBetween Flex-alignCenter\"\n                       >\n                         <div\n-                          className=\"SSOKeyCard-keySection\"\n+                          className=\"SSOSigningSecretCard-keySection\"\n                         >\n                           <div\n-                            className=\"SSOKeyCard-label\"\n+                            className=\"SSOSigningSecretCard-label\"\n                           >\n                             <label\n                               className=\"Label-root\"\n@@ -1309,10 +1318,10 @@ more about creating a JWT Token with\n                           </div>\n                         </div>\n                         <div\n-                          className=\"SSOKeyCard-secretSection\"\n+                          className=\"SSOSigningSecretCard-secretSection\"\n                         >\n                           <div\n-                            className=\"SSOKeyCard-label\"\n+                            className=\"SSOSigningSecretCard-label\"\n                           >\n                             <label\n                               className=\"Label-root\"\n@@ -1390,10 +1399,10 @@ more about creating a JWT Token with\n                           className=\"Box-root Flex-root Flex-flex Flex-justifyFlexStart Flex-alignCenter\"\n                         >\n                           <div\n-                            className=\"SSOKeyCard-statusSection\"\n+                            className=\"SSOSigningSecretCard-statusSection\"\n                           >\n                             <div\n-                              className=\"SSOKeyCard-label\"\n+                              className=\"SSOSigningSecretCard-label\"\n                             >\n                               <label\n                                 className=\"Label-root\""
    },
    {
      "sha": "f0fad11715b967528b009ccfdccbd8af36cb6101",
      "filename": "src/core/client/admin/test/configure/__snapshots__/general.spec.tsx.snap",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/general.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/general.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/general.spec.tsx.snap?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -52,6 +52,15 @@ exports[`renders configure general 1`] = `\n                   Moderation\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/moderation/phases\"\n+                  onClick={[Function]}\n+                >\n+                  Moderation Phases\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link\""
    },
    {
      "sha": "555177120751f3f46731da9912c454b04d035def",
      "filename": "src/core/client/admin/test/configure/__snapshots__/moderation.spec.tsx.snap",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/moderation.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/moderation.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/moderation.spec.tsx.snap?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -52,6 +52,15 @@ exports[`renders configure moderation 1`] = `\n                   Moderation\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/moderation/phases\"\n+                  onClick={[Function]}\n+                >\n+                  Moderation Phases\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link\""
    },
    {
      "sha": "694fc333bb03166520b346a03aba4f17a23eea32",
      "filename": "src/core/client/admin/test/configure/__snapshots__/organization.spec.tsx.snap",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/organization.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/organization.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/organization.spec.tsx.snap?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -52,6 +52,15 @@ exports[`renders configure organization 1`] = `\n                   Moderation\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/moderation/phases\"\n+                  onClick={[Function]}\n+                >\n+                  Moderation Phases\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link\""
    },
    {
      "sha": "3af2832e10cf9990d3c5c71d8a534e0ef848fb87",
      "filename": "src/core/client/admin/test/configure/__snapshots__/wordList.spec.tsx.snap",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/wordList.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/__snapshots__/wordList.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/wordList.spec.tsx.snap?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -52,6 +52,15 @@ exports[`renders configure wordList 1`] = `\n                   Moderation\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/moderation/phases\"\n+                  onClick={[Function]}\n+                >\n+                  Moderation Phases\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link Link-linkActive\""
    },
    {
      "sha": "ab1806f8198e4b8c0a37dd8af1e3968ae06065ae",
      "filename": "src/core/client/admin/test/configure/auth.spec.tsx",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/auth.spec.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/configure/auth.spec.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/auth.spec.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -62,7 +62,7 @@ it(\"rotate sso key\", async () => {\n   const { testRenderer } = await createTestRenderer({\n     resolvers: createResolversStub<GQLResolver>({\n       Mutation: {\n-        rotateSSOKey: () => {\n+        rotateSSOSigningSecret: () => {\n           return {\n             settings: pureMerge<typeof settingsWithEmptyAuth>(\n               settingsWithEmptyAuth,\n@@ -71,7 +71,7 @@ it(\"rotate sso key\", async () => {\n                   integrations: {\n                     sso: {\n                       enabled: true,\n-                      keys: [\n+                      signingSecrets: [\n                         {\n                           kid: \"kid-01\",\n                           secret: \"secret\","
    },
    {
      "sha": "de8b931d66a0858f1a67114914319ed15083fd38",
      "filename": "src/core/client/admin/test/fixtures.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/fixtures.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/admin/test/fixtures.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/fixtures.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -114,7 +114,7 @@ export const settings = createFixture<GQLSettings>({\n           admin: true,\n           stream: true,\n         },\n-        keys: [\n+        signingSecrets: [\n           {\n             kid: \"kid-01\",\n             secret: \"secret\",\n@@ -212,7 +212,7 @@ export const settingsWithEmptyAuth = createFixture<GQLSettings>(\n             stream: true,\n           },\n           key: \"\",\n-          keys: [\n+          signingSecrets: [\n             {\n               kid: \"kid-01\",\n               secret: \"secret\","
    },
    {
      "sha": "0f829623edc2f0d5b168a4fed7863ca7a3d416ff",
      "filename": "src/core/client/framework/helpers/urls.tsx",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/framework/helpers/urls.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/framework/helpers/urls.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/helpers/urls.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,7 +1,9 @@\n export default {\n   admin: {\n     moderate: \"/admin/moderate\",\n-    configureWebhooks: \"/admin/configure/webhooks\",\n+    moderationPhases: \"/admin/configure/moderation/phases\",\n+    addExternalModerationPhase: \"/admin/configure/moderation/phases/add\",\n+    configureExternalModerationPhase: \"/admin/configure/moderation/phases\",\n     webhooks: \"/admin/configure/webhooks\",\n     addWebhookEndpoint: \"/admin/configure/webhooks/add\",\n     configureWebhookEndpoint: \"/admin/configure/webhooks/endpoint\","
    },
    {
      "sha": "e27058f74022e2ba178ba95bb9749f6eccd5ade0",
      "filename": "src/core/client/framework/lib/messages.tsx",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/framework/lib/messages.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/framework/lib/messages.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/messages.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -92,13 +92,13 @@ export const NOT_A_WHOLE_NUMBER = () => (\n \n export const NOT_A_WHOLE_NUMBER_GREATER_THAN = (x: number) => (\n   <Localized id=\"framework-validation-notAWholeNumberGreaterThan\" $x={x}>\n-    <span>Please enter a valid whole number greater than $x</span>\n+    <span>Please enter a valid whole number greater than {x}</span>\n   </Localized>\n );\n \n export const NOT_A_WHOLE_NUMBER_GREATER_THAN_OR_EQUAL = (x: number) => (\n   <Localized id=\"framework-validation-notAWholeNumberGreaterThanOrEqual\" $x={x}>\n-    <span>Please enter a valid whole number greater than or equal to $x</span>\n+    <span>Please enter a valid whole number greater than or equal to {x}</span>\n   </Localized>\n );\n "
    },
    {
      "sha": "946fd202f68338b8b6618db53cbf49d1053bd190",
      "filename": "src/core/client/framework/lib/validation.tsx",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/framework/lib/validation.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/client/framework/lib/validation.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/validation.tsx?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,7 +1,5 @@\n import { ReactNode } from \"react\";\n \n-import startsWith from \"coral-common/utils/startsWith\";\n-\n import {\n   EMAIL_REGEX,\n   PASSWORD_MIN_LENGTH,\n@@ -10,6 +8,7 @@ import {\n   USERNAME_MIN_LENGTH,\n   USERNAME_REGEX,\n } from \"coral-common/helpers/validate\";\n+import startsWith from \"coral-common/utils/startsWith\";\n \n import {\n   DELETE_CONFIRMATION_INVALID,"
    },
    {
      "sha": "3659a654514e1ca793dfd174a45b88b6fd5c1b06",
      "filename": "src/core/server/app/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -35,7 +35,7 @@ import { Metrics } from \"coral-server/services/metrics\";\n import { MigrationManager } from \"coral-server/services/migrate\";\n import { PersistedQueryCache } from \"coral-server/services/queries\";\n import { AugmentedRedis } from \"coral-server/services/redis\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n import { healthHandler, versionHandler } from \"./handlers\";\n import { compileTrust } from \"./helpers\";"
    },
    {
      "sha": "7b5b1047a5007ab1e795b77e56a38e4aee2a6e04",
      "filename": "src/core/server/app/middleware/error.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/error.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/error.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/error.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,6 +1,6 @@\n import { FluentBundle } from \"@fluent/bundle/compat\";\n \n-import { CoralError, InternalError } from \"coral-server/errors\";\n+import { CoralError, WrappedInternalError } from \"coral-server/errors\";\n import { I18n } from \"coral-server/services/i18n\";\n import { ErrorRequestHandler, Request } from \"coral-server/types/express\";\n \n@@ -12,7 +12,7 @@ import { ErrorRequestHandler, Request } from \"coral-server/types/express\";\n const wrapError = (err: Error) =>\n   err instanceof CoralError\n     ? err\n-    : new InternalError(err, \"wrapped internal error\");\n+    : new WrappedInternalError(err, \"wrapped internal error\");\n \n /**\n  * serializeError will return a serialized error that can be returned via the"
    },
    {
      "sha": "535d85c62c5671e17067017291388c048d7be77e",
      "filename": "src/core/server/app/middleware/passport/strategies/oauth2.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/passport/strategies/oauth2.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/passport/strategies/oauth2.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/strategies/oauth2.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -7,8 +7,10 @@ import { IntegrationDisabled } from \"coral-server/errors\";\n import { AuthIntegrations } from \"coral-server/models/settings\";\n import { Tenant } from \"coral-server/models/tenant\";\n import { User } from \"coral-server/models/user\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n-import { TenantCacheAdapter } from \"coral-server/services/tenant/cache/adapter\";\n+import {\n+  TenantCache,\n+  TenantCacheAdapter,\n+} from \"coral-server/services/tenant/cache\";\n import { Request } from \"coral-server/types/express\";\n import { Profile } from \"passport\";\n import { VerifyCallback } from \"passport-oauth2\";"
    },
    {
      "sha": "1540301a32408af49637dee2a9302139f349b1af",
      "filename": "src/core/server/app/middleware/passport/strategies/oidc/index.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/passport/strategies/oidc/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/passport/strategies/oidc/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/strategies/oidc/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -23,8 +23,10 @@ import {\n   User,\n } from \"coral-server/models/user\";\n import { AsymmetricSigningAlgorithm } from \"coral-server/services/jwt\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n-import { TenantCacheAdapter } from \"coral-server/services/tenant/cache/adapter\";\n+import {\n+  TenantCache,\n+  TenantCacheAdapter,\n+} from \"coral-server/services/tenant/cache\";\n import { findOrCreate } from \"coral-server/services/users\";\n import { validateUsername } from \"coral-server/services/users/helpers\";\n import { Request } from \"coral-server/types/express\";"
    },
    {
      "sha": "9827acdf85c582962e47bacaa767132d1519bdba",
      "filename": "src/core/server/app/middleware/passport/strategies/verifiers/oidc.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/passport/strategies/verifiers/oidc.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/passport/strategies/verifiers/oidc.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/strategies/verifiers/oidc.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -2,10 +2,10 @@ import jwks, { JwksClient } from \"jwks-rsa\";\n import { Db } from \"mongodb\";\n \n import { AppOptions } from \"coral-server/app\";\n+import logger from \"coral-server/logger\";\n import { Tenant } from \"coral-server/models/tenant\";\n-import { TenantCacheAdapter } from \"coral-server/services/tenant/cache/adapter\";\n+import { TenantCacheAdapter } from \"coral-server/services/tenant/cache\";\n \n-import logger from \"coral-server/logger\";\n import { Verifier } from \"../jwt\";\n import {\n   findOrCreateOIDCUserWithToken,"
    },
    {
      "sha": "988580baca7a204804c793b8de981e5b675a2fff",
      "filename": "src/core/server/app/middleware/passport/strategies/verifiers/sso.ts",
      "status": "modified",
      "additions": 19,
      "deletions": 21,
      "changes": 40,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/passport/strategies/verifiers/sso.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/passport/strategies/verifiers/sso.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/strategies/verifiers/sso.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -7,10 +7,14 @@ import { Db } from \"mongodb\";\n import { validate } from \"coral-server/app/request/body\";\n import { IntegrationDisabled, TokenInvalidError } from \"coral-server/errors\";\n import logger from \"coral-server/logger\";\n-import { Secret, SSOAuthIntegration } from \"coral-server/models/settings\";\n+import {\n+  filterActiveSigningSecrets,\n+  SigningSecret,\n+  SSOAuthIntegration,\n+} from \"coral-server/models/settings\";\n import {\n   Tenant,\n-  updateLastUsedAtTenantSSOKey,\n+  updateLastUsedAtTenantSSOSigningSecret,\n } from \"coral-server/models/tenant\";\n import {\n   retrieveUserWithProfile,\n@@ -167,7 +171,7 @@ export async function findOrCreateSSOUser(\n const updateLastUsedAtKID = throttle(\n   async (redis: Redis, tenantID: string, kid: string, now: Date) => {\n     try {\n-      await updateLastUsedAtTenantSSOKey(redis, tenantID, kid, now);\n+      await updateLastUsedAtTenantSSOSigningSecret(redis, tenantID, kid, now);\n       logger.trace({ tenantID, kid }, \"updated last used tenant sso key\");\n     } catch (err) {\n       logger.error(\n@@ -185,23 +189,18 @@ export interface SSOVerifierOptions {\n   redis: AugmentedRedis;\n }\n \n-export function getRelevantSSOKeys(\n+export function getRelevantSSOSigningSecrets(\n   integration: SSOAuthIntegration,\n   tokenString: string,\n   now: Date,\n   kid?: string\n-): Secret[] {\n+): SigningSecret[] {\n   // Collect all the current valid keys.\n-  const keys = integration.keys.filter((k) => {\n-    if (k.inactiveAt && now >= k.inactiveAt) {\n-      return false;\n-    }\n-\n-    return k;\n-  });\n-\n-  // If there is only one key, that's all we can use!\n+  const keys = integration.signingSecrets.filter(\n+    filterActiveSigningSecrets(now)\n+  );\n   if (keys.length === 1) {\n+    // There is only one key, that's all we can use!\n     return keys;\n   }\n \n@@ -259,14 +258,13 @@ export class SSOVerifier implements Verifier<SSOToken> {\n       throw new IntegrationDisabled(\"sso\");\n     }\n \n-    // check to see if there is at least one key associated with this\n-    // integration.\n-    if (integration.keys.length === 0) {\n-      throw new Error(\"integration key does not exist\");\n-    }\n-\n     // Get the valid configurations for the given token and integration pair.\n-    const keys = getRelevantSSOKeys(integration, tokenString, now, kid);\n+    const keys = getRelevantSSOSigningSecrets(\n+      integration,\n+      tokenString,\n+      now,\n+      kid\n+    );\n     if (keys.length === 0) {\n       throw new TokenInvalidError(\n         tokenString,"
    },
    {
      "sha": "ac6423fe86716433e4f9df9f879072338f41f495",
      "filename": "src/core/server/app/middleware/tenant.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/tenant.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/middleware/tenant.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/tenant.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -2,7 +2,7 @@ import { v1 as uuid } from \"uuid\";\n \n import { TenantNotFoundError } from \"coral-server/errors\";\n import logger from \"coral-server/logger\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n import { RequestHandler } from \"coral-server/types/express\";\n \n export interface MiddlewareOptions {"
    },
    {
      "sha": "8fd725758f69d4a7cc927e64cacb1c90e766e922",
      "filename": "src/core/server/app/router/client.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/router/client.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/app/router/client.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/router/client.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -9,7 +9,7 @@ import { cspSiteMiddleware } from \"coral-server/app/middleware/csp/tenant\";\n import { installedMiddleware } from \"coral-server/app/middleware/installed\";\n import { tenantMiddleware } from \"coral-server/app/middleware/tenant\";\n import logger from \"coral-server/logger\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n import { RequestHandler } from \"coral-server/types/express\";\n \n import Entrypoints, { Entrypoint } from \"../helpers/entrypoints\";"
    },
    {
      "sha": "1723950cfb8e8f5e8fc722e036eabb48708cd106",
      "filename": "src/core/server/config.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/config.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/config.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/config.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -7,15 +7,15 @@ import os from \"os\";\n import { LOCALES } from \"coral-common/helpers/i18n/locales\";\n import { ensureEndSlash } from \"coral-common/utils\";\n \n-import { InternalError } from \"./errors\";\n+import { WrappedInternalError } from \"./errors\";\n \n // Add custom format for the mongo uri scheme.\n convict.addFormat({\n   name: \"mongo-uri\",\n   validate: (url: string) => {\n     parseConnectionString(url, (err) => {\n       if (err) {\n-        throw new InternalError(err, \"invalid mongo-uri\");\n+        throw new WrappedInternalError(err, \"invalid mongo-uri\");\n       }\n     });\n   },\n@@ -237,6 +237,13 @@ const config = convict({\n     default: false,\n     env: \"DISABLE_RATE_LIMITERS\",\n   },\n+  scrape_max_response_size: {\n+    doc: \"The maximum size (in bytes) to allow for scraping responses.\",\n+    format: Number,\n+    default: 10e6,\n+    env: \"SCRAPE_MAX_RESPONSE_SIZE\",\n+    arg: \"scrapeMaxResponseSize\",\n+  },\n   scrape_timeout: {\n     doc: \"The request timeout (in ms) for scraping operations.\",\n     format: \"ms\","
    },
    {
      "sha": "b8fd5479ece706d670bfae55f2112610a3d966ab",
      "filename": "src/core/server/cron/accountDeletion.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/cron/accountDeletion.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/cron/accountDeletion.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/cron/accountDeletion.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -2,7 +2,7 @@ import { Db } from \"mongodb\";\n \n import { retrieveUserScheduledForDeletion } from \"coral-server/models/user\";\n import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n import { deleteUser } from \"coral-server/services/users/delete\";\n \n import {"
    },
    {
      "sha": "161a2b8d83ed6986df8293aa5932daa10ca445b7",
      "filename": "src/core/server/cron/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/cron/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/cron/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/cron/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -3,7 +3,7 @@ import { Db } from \"mongodb\";\n import { Config } from \"coral-server/config\";\n import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n import { registerAccountDeletion } from \"./accountDeletion\";\n import { registerNotificationDigesting } from \"./notificationDigesting\";"
    },
    {
      "sha": "f8f921dfd5e25312b85915893edf917882d0cadf",
      "filename": "src/core/server/cron/notificationDigesting.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/cron/notificationDigesting.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/cron/notificationDigesting.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/cron/notificationDigesting.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -7,7 +7,7 @@ import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n import { DigestibleTemplate } from \"coral-server/queue/tasks/mailer/templates\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n import NotificationContext from \"coral-server/services/notifications/context\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n import {\n   ScheduledJob,"
    },
    {
      "sha": "4f9eb267dc9c1da83465923df0dab321d125806d",
      "filename": "src/core/server/errors/index.spec.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/errors/index.spec.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/errors/index.spec.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/errors/index.spec.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,6 +1,6 @@\n import { VError } from \"verror\";\n \n-import { CoralError, DuplicateUserError, InternalError } from \".\";\n+import { CoralError, DuplicateUserError, WrappedInternalError } from \".\";\n \n it(\"has the right inheritance chain\", () => {\n   const err = new DuplicateUserError();\n@@ -14,12 +14,12 @@ it(\"has the right inheritance chain\", () => {\n });\n \n it(\"provides an accurate stack\", () => {\n-  const err = new InternalError(\n+  const err = new WrappedInternalError(\n     new Error(\"this is a test\"),\n     \"this is the reason\"\n   );\n \n-  expect(err).toBeInstanceOf(InternalError);\n+  expect(err).toBeInstanceOf(WrappedInternalError);\n   expect(err).toBeInstanceOf(CoralError);\n   expect(err).toBeInstanceOf(VError);\n   expect(err).toBeInstanceOf(Error);"
    },
    {
      "sha": "eb4dd9fd6ce7131e462bc38b28c0247be5c57d6e",
      "filename": "src/core/server/errors/index.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/errors/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/errors/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/errors/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -465,7 +465,7 @@ export class IntegrationDisabled extends CoralError {\n   }\n }\n \n-export class InternalError extends CoralError {\n+export class WrappedInternalError extends CoralError {\n   constructor(cause: Error, reason: string) {\n     super({\n       code: ERROR_CODES.INTERNAL_ERROR,\n@@ -476,6 +476,16 @@ export class InternalError extends CoralError {\n   }\n }\n \n+export class InternalError extends CoralError {\n+  constructor(reason: string, context?: Record<string, any>) {\n+    super({\n+      code: ERROR_CODES.INTERNAL_ERROR,\n+      context: { pvt: { reason, ...context } },\n+      status: 500,\n+    });\n+  }\n+}\n+\n export class InternalDevelopmentError extends CoralError {\n   constructor(cause: Error, reason: string) {\n     super({"
    },
    {
      "sha": "8145b43e747eeda9fd845c78254f8c393b95587f",
      "filename": "src/core/server/graph/context.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/context.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/context.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/context.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -19,7 +19,7 @@ import { WebhookQueue } from \"coral-server/queue/tasks/webhook\";\n import { I18n } from \"coral-server/services/i18n\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n import { AugmentedRedis } from \"coral-server/services/redis\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n import { Request } from \"coral-server/types/express\";\n \n import loaders from \"./loaders\";"
    },
    {
      "sha": "0969cf870d03f449937a12235da4da4f4cdd38de",
      "filename": "src/core/server/graph/extensions/ErrorWrappingExtension.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/extensions/ErrorWrappingExtension.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/extensions/ErrorWrappingExtension.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/extensions/ErrorWrappingExtension.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -6,7 +6,7 @@ import { merge } from \"lodash\";\n import {\n   CoralError,\n   InternalDevelopmentError,\n-  InternalError,\n+  WrappedInternalError,\n } from \"coral-server/errors\";\n import GraphContext from \"coral-server/graph/context\";\n import { getOriginalError } from \"./helpers\";\n@@ -71,7 +71,7 @@ function getWrappedOriginalError(\n     );\n   }\n \n-  return new InternalError(originalError, \"wrapped internal error\");\n+  return new WrappedInternalError(originalError, \"wrapped internal error\");\n }\n \n /**"
    },
    {
      "sha": "2b7205de76c422960a7199cfaf3b207dd4ab4ef3",
      "filename": "src/core/server/graph/loaders/Auth.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/loaders/Auth.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/loaders/Auth.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/loaders/Auth.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,7 +1,7 @@\n import DataLoader from \"dataloader\";\n \n import GraphContext from \"coral-server/graph/context\";\n-import { retrieveLastUsedAtTenantSSOKeys } from \"coral-server/models/tenant\";\n+import { retrieveLastUsedAtTenantSSOSigningSecrets } from \"coral-server/models/tenant\";\n import { discoverOIDCConfiguration } from \"coral-server/services/tenant\";\n \n import { GQLDiscoveredOIDCConfiguration } from \"coral-server/graph/schema/__generated__/types\";\n@@ -19,7 +19,7 @@ export default (ctx: GraphContext) => ({\n       cache: !ctx.disableCaching,\n     }\n   ),\n-  retrieveSSOKeyLastUsedAt: new DataLoader((kids: string[]) =>\n-    retrieveLastUsedAtTenantSSOKeys(ctx.redis, ctx.tenant.id, kids)\n+  retrieveSSOSigningSecretLastUsedAt: new DataLoader((kids: string[]) =>\n+    retrieveLastUsedAtTenantSSOSigningSecrets(ctx.redis, ctx.tenant.id, kids)\n   ),\n });"
    },
    {
      "sha": "28d1a62f192df6c64d9f2f93c1d9b5fdfe355b4d",
      "filename": "src/core/server/graph/loaders/Stories.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/loaders/Stories.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/loaders/Stories.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/loaders/Stories.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -211,12 +211,13 @@ export default (ctx: GraphContext) => ({\n       // This typecast is needed because the custom `ms` format does not return\n       // the desired `number` type even though that's the only type it can\n       // output.\n-      scraper.scrape(\n+      scraper.scrape({\n         url,\n-        (ctx.config.get(\"scrape_timeout\") as unknown) as number,\n-        ctx.tenant.stories.scraping.customUserAgent,\n-        ctx.tenant.stories.scraping.proxyURL\n-      )\n+        timeout: (ctx.config.get(\"scrape_timeout\") as unknown) as number,\n+        size: ctx.config.get(\"scrape_response_max_size\"),\n+        customUserAgent: ctx.tenant.stories.scraping.customUserAgent,\n+        proxyURL: ctx.tenant.stories.scraping.proxyURL,\n+      })\n     ),\n     {\n       // Disable caching for the DataLoader if the Context is designed to be"
    },
    {
      "sha": "6b14d6949616d6ae6fdfe834d4135cb669e3f606",
      "filename": "src/core/server/graph/mutators/Settings.ts",
      "status": "modified",
      "additions": 80,
      "deletions": 18,
      "changes": 98,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/mutators/Settings.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/mutators/Settings.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/mutators/Settings.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -2,34 +2,46 @@ import GraphContext from \"coral-server/graph/context\";\n import { Tenant } from \"coral-server/models/tenant\";\n import {\n   createAnnouncement,\n+  createExternalModerationPhase,\n   createWebhookEndpoint,\n-  deactivateSSOKey,\n+  deactivateSSOSigningSecret,\n   deleteAnnouncement,\n-  deleteSSOKey,\n+  deleteExternalModerationPhase,\n+  deleteSSOSigningSecret,\n   deleteWebhookEndpoint,\n+  disableExternalModerationPhase,\n   disableFeatureFlag,\n   disableWebhookEndpoint,\n+  enableExternalModerationPhase,\n   enableFeatureFlag,\n   enableWebhookEndpoint,\n   regenerateSSOKey,\n-  rotateSSOKey,\n-  rotateWebhookEndpointSecret,\n+  rotateExternalModerationPhaseSigningSecret,\n+  rotateSSOSigningSecret,\n+  rotateWebhookEndpointSigningSecret,\n   sendSMTPTest,\n   update,\n+  updateExternalModerationPhase,\n   updateWebhookEndpoint,\n } from \"coral-server/services/tenant\";\n \n import {\n   GQLCreateAnnouncementInput,\n+  GQLCreateExternalModerationPhaseInput,\n   GQLCreateWebhookEndpointInput,\n-  GQLDeactivateSSOKeyInput,\n-  GQLDeleteSSOKeyInput,\n+  GQLDeactivateSSOSigningSecretInput,\n+  GQLDeleteExternalModerationPhaseInput,\n+  GQLDeleteSSOSigningSecretInput,\n   GQLDeleteWebhookEndpointInput,\n+  GQLDisableExternalModerationPhaseInput,\n   GQLDisableWebhookEndpointInput,\n+  GQLEnableExternalModerationPhaseInput,\n   GQLEnableWebhookEndpointInput,\n   GQLFEATURE_FLAG,\n-  GQLRotateSSOKeyInput,\n-  GQLRotateWebhookEndpointSecretInput,\n+  GQLRotateExternalModerationPhaseSigningSecretInput,\n+  GQLRotateSSOSigningSecretInput,\n+  GQLRotateWebhookEndpointSigningSecretInput,\n+  GQLUpdateExternalModerationPhaseInput,\n   GQLUpdateSettingsInput,\n   GQLUpdateWebhookEndpointInput,\n } from \"coral-server/graph/schema/__generated__/types\";\n@@ -50,20 +62,21 @@ export const Settings = ({\n     input: WithoutMutationID<GQLUpdateSettingsInput>\n   ): Promise<Tenant | null> =>\n     update(mongo, redis, tenantCache, config, tenant, input.settings),\n+  // DEPRECATED: deprecated in favour of `rotateSSOSigningSecret`, remove in 6.2.0.\n   regenerateSSOKey: (): Promise<Tenant | null> =>\n     regenerateSSOKey(mongo, redis, tenantCache, tenant, now),\n-  rotateSSOKey: ({ inactiveIn }: GQLRotateSSOKeyInput) =>\n-    rotateSSOKey(mongo, redis, tenantCache, tenant, inactiveIn, now),\n-  deactivateSSOKey: ({ kid }: GQLDeactivateSSOKeyInput) =>\n-    deactivateSSOKey(mongo, redis, tenantCache, tenant, kid, now),\n-  deleteSSOKey: ({ kid }: GQLDeleteSSOKeyInput) =>\n-    deleteSSOKey(mongo, redis, tenantCache, tenant, kid),\n+  rotateSSOSigningSecret: ({ inactiveIn }: GQLRotateSSOSigningSecretInput) =>\n+    rotateSSOSigningSecret(mongo, redis, tenantCache, tenant, inactiveIn, now),\n+  deleteSSOSigningSecret: ({ kid }: GQLDeleteSSOSigningSecretInput) =>\n+    deleteSSOSigningSecret(mongo, redis, tenantCache, tenant, kid),\n+  deactivateSSOSigningSecret: ({ kid }: GQLDeactivateSSOSigningSecretInput) =>\n+    deactivateSSOSigningSecret(mongo, redis, tenantCache, tenant, kid, now),\n   enableFeatureFlag: (flag: GQLFEATURE_FLAG) =>\n     enableFeatureFlag(mongo, redis, tenantCache, tenant, flag),\n   disableFeatureFlag: (flag: GQLFEATURE_FLAG) =>\n     disableFeatureFlag(mongo, redis, tenantCache, tenant, flag),\n   createAnnouncement: (input: GQLCreateAnnouncementInput) =>\n-    createAnnouncement(mongo, redis, tenantCache, tenant, input, now),\n+    createAnnouncement(mongo, redis, tenantCache, tenant, input),\n   deleteAnnouncement: () =>\n     deleteAnnouncement(mongo, redis, tenantCache, tenant),\n   createWebhookEndpoint: (\n@@ -92,10 +105,59 @@ export const Settings = ({\n   deleteWebhookEndpoint: (\n     input: WithoutMutationID<GQLDeleteWebhookEndpointInput>\n   ) => deleteWebhookEndpoint(mongo, redis, tenantCache, tenant, input.id),\n-  rotateWebhookEndpointSecret: (\n-    input: WithoutMutationID<GQLRotateWebhookEndpointSecretInput>\n+  rotateWebhookEndpointSigningSecret: (\n+    input: WithoutMutationID<GQLRotateWebhookEndpointSigningSecretInput>\n   ) =>\n-    rotateWebhookEndpointSecret(\n+    rotateWebhookEndpointSigningSecret(\n+      mongo,\n+      redis,\n+      tenantCache,\n+      tenant,\n+      input.id,\n+      input.inactiveIn,\n+      now\n+    ),\n+  createExternalModerationPhase: (\n+    input: WithoutMutationID<GQLCreateExternalModerationPhaseInput>\n+  ) =>\n+    createExternalModerationPhase(\n+      mongo,\n+      redis,\n+      config,\n+      tenantCache,\n+      tenant,\n+      input,\n+      now\n+    ),\n+  updateExternalModerationPhase: ({\n+    id,\n+    ...input\n+  }: WithoutMutationID<GQLUpdateExternalModerationPhaseInput>) =>\n+    updateExternalModerationPhase(\n+      mongo,\n+      redis,\n+      config,\n+      tenantCache,\n+      tenant,\n+      id,\n+      input\n+    ),\n+  enableExternalModerationPhase: (\n+    input: WithoutMutationID<GQLEnableExternalModerationPhaseInput>\n+  ) =>\n+    enableExternalModerationPhase(mongo, redis, tenantCache, tenant, input.id),\n+  disableExternalModerationPhase: (\n+    input: WithoutMutationID<GQLDisableExternalModerationPhaseInput>\n+  ) =>\n+    disableExternalModerationPhase(mongo, redis, tenantCache, tenant, input.id),\n+  deleteExternalModerationPhase: (\n+    input: WithoutMutationID<GQLDeleteExternalModerationPhaseInput>\n+  ) =>\n+    deleteExternalModerationPhase(mongo, redis, tenantCache, tenant, input.id),\n+  rotateExternalModerationPhaseSigningSecret: (\n+    input: WithoutMutationID<GQLRotateExternalModerationPhaseSigningSecretInput>\n+  ) =>\n+    rotateExternalModerationPhaseSigningSecret(\n       mongo,\n       redis,\n       tenantCache,"
    },
    {
      "sha": "a1fedd2d27b4b7bb317aa6ace7a3f61e3a006f57",
      "filename": "src/core/server/graph/resolvers/Comment.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/Comment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/Comment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/Comment.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -9,6 +9,7 @@ import {\n } from \"coral-server/models/action/comment\";\n import * as comment from \"coral-server/models/comment\";\n import {\n+  getDepth,\n   getLatestRevision,\n   hasAncestors,\n   hasPublishedStatus,\n@@ -52,9 +53,9 @@ export const Comment: GQLCommentTypeResolver<comment.Comment> = {\n     c.revisions.length > 0\n       ? { revision: getLatestRevision(c), comment: c }\n       : null,\n+  deleted: ({ deletedAt }) => !!deletedAt,\n   revisionHistory: (c) =>\n     c.revisions.map((revision) => ({ revision, comment: c })),\n-  deleted: ({ deletedAt }) => !!deletedAt,\n   editing: ({ revisions, createdAt }, input, ctx) => ({\n     // When there is more than one body history, then the comment has been\n     // edited.\n@@ -98,8 +99,8 @@ export const Comment: GQLCommentTypeResolver<comment.Comment> = {\n     }),\n   viewerActionPresence: (c, input, ctx) =>\n     ctx.user ? ctx.loaders.Comments.retrieveMyActionPresence.load(c.id) : null,\n-  parentCount: (c) => (hasAncestors(c) ? c.ancestorIDs.length : 0),\n-  depth: (c) => (hasAncestors(c) ? c.ancestorIDs.length : 0),\n+  parentCount: (c) => getDepth(c),\n+  depth: (c) => getDepth(c),\n   rootParent: (c, input, ctx, info) =>\n     hasAncestors(c)\n       ? maybeLoadOnlyID(ctx, info, c.ancestorIDs[c.ancestorIDs.length - 1])"
    },
    {
      "sha": "0a8d65c2181eea357e996b599e83c9aabf1ca914",
      "filename": "src/core/server/graph/resolvers/ExternalModerationPhase.ts",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/ExternalModerationPhase.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/ExternalModerationPhase.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/ExternalModerationPhase.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,8 @@\n+import * as settings from \"coral-server/models/settings\";\n+\n+import { GQLExternalModerationPhaseTypeResolver } from \"coral-server/graph/schema/__generated__/types\";\n+\n+export const ExternalModerationPhase: GQLExternalModerationPhaseTypeResolver<settings.ExternalModerationPhase> = {\n+  signingSecret: ({ signingSecrets }) =>\n+    signingSecrets[signingSecrets.length - 1],\n+};"
    },
    {
      "sha": "59ff09cd4bc092b2d7c856c9f399c1b0ef8596bd",
      "filename": "src/core/server/graph/resolvers/Mutation.ts",
      "status": "modified",
      "additions": 61,
      "deletions": 8,
      "changes": 69,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/Mutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/Mutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/Mutation.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -75,20 +75,21 @@ export const Mutation: Required<GQLMutationTypeResolver<void>> = {\n     comment: await ctx.mutators.Comments.unfeature(input),\n     clientMutationId,\n   }),\n+  // DEPRECATED: deprecated in favour of `rotateSSOSigningSecret`, remove in 6.2.0.\n   regenerateSSOKey: async (source, { input }, ctx) => ({\n     settings: await ctx.mutators.Settings.regenerateSSOKey(),\n     clientMutationId: input.clientMutationId,\n   }),\n-  rotateSSOKey: async (source, { input }, ctx) => ({\n-    settings: await ctx.mutators.Settings.rotateSSOKey(input),\n+  rotateSSOSigningSecret: async (source, { input }, ctx) => ({\n+    settings: await ctx.mutators.Settings.rotateSSOSigningSecret(input),\n     clientMutationId: input.clientMutationId,\n   }),\n-  deactivateSSOKey: async (source, { input }, ctx) => ({\n-    settings: await ctx.mutators.Settings.deactivateSSOKey(input),\n+  deactivateSSOSigningSecret: async (source, { input }, ctx) => ({\n+    settings: await ctx.mutators.Settings.deactivateSSOSigningSecret(input),\n     clientMutationId: input.clientMutationId,\n   }),\n-  deleteSSOKey: async (source, { input }, ctx) => ({\n-    settings: await ctx.mutators.Settings.deleteSSOKey(input),\n+  deleteSSOSigningSecret: async (source, { input }, ctx) => ({\n+    settings: await ctx.mutators.Settings.deleteSSOSigningSecret(input),\n     clientMutationId: input.clientMutationId,\n   }),\n   createStory: async (source, { input }, ctx) => ({\n@@ -319,12 +320,64 @@ export const Mutation: Required<GQLMutationTypeResolver<void>> = {\n     endpoint: await ctx.mutators.Settings.deleteWebhookEndpoint(input),\n     clientMutationId,\n   }),\n-  rotateWebhookEndpointSecret: async (\n+  rotateWebhookEndpointSigningSecret: async (\n     source,\n     { input: { clientMutationId, ...input } },\n     ctx\n   ) => ({\n-    endpoint: await ctx.mutators.Settings.rotateWebhookEndpointSecret(input),\n+    endpoint: await ctx.mutators.Settings.rotateWebhookEndpointSigningSecret(\n+      input\n+    ),\n+    clientMutationId,\n+  }),\n+  createExternalModerationPhase: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    ...(await ctx.mutators.Settings.createExternalModerationPhase(input)),\n+    clientMutationId,\n+  }),\n+  updateExternalModerationPhase: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    phase: await ctx.mutators.Settings.updateExternalModerationPhase(input),\n+    clientMutationId,\n+  }),\n+  disableExternalModerationPhase: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    phase: await ctx.mutators.Settings.disableExternalModerationPhase(input),\n+    clientMutationId,\n+  }),\n+  enableExternalModerationPhase: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    phase: await ctx.mutators.Settings.enableExternalModerationPhase(input),\n+    clientMutationId,\n+  }),\n+  deleteExternalModerationPhase: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    phase: await ctx.mutators.Settings.deleteExternalModerationPhase(input),\n+    clientMutationId,\n+  }),\n+  rotateExternalModerationPhaseSigningSecret: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    phase: await ctx.mutators.Settings.rotateExternalModerationPhaseSigningSecret(\n+      input\n+    ),\n     clientMutationId,\n   }),\n   testSMTP: async (source, { input: { clientMutationId } }, ctx) => {"
    },
    {
      "sha": "8bc6ef986d167b1cb73bd39163fb97661f0b98af",
      "filename": "src/core/server/graph/resolvers/Query.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/Query.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/Query.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/Query.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,3 +1,4 @@\n+import { getExternalModerationPhase } from \"coral-server/models/settings\";\n import { getWebhookEndpoint } from \"coral-server/models/tenant\";\n \n import { GQLQueryTypeResolver } from \"coral-server/graph/schema/__generated__/types\";\n@@ -29,4 +30,8 @@ export const Query: Required<GQLQueryTypeResolver<void>> = {\n   site: (source, { id }, ctx) => (id ? ctx.loaders.Sites.site.load(id) : null),\n   webhookEndpoint: (source, { id }, ctx) => getWebhookEndpoint(ctx.tenant, id),\n   queues: () => ({}),\n+  externalModerationPhase: (source, { id }, ctx) =>\n+    ctx.tenant.integrations.external\n+      ? getExternalModerationPhase(ctx.tenant.integrations.external, id)\n+      : null,\n };"
    },
    {
      "sha": "855ac9776c470b62544c3f2325c18959fc7c7688",
      "filename": "src/core/server/graph/resolvers/SSOAuthIntegration.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/SSOAuthIntegration.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/SSOAuthIntegration.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/SSOAuthIntegration.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,25 +1,25 @@\n import * as settings from \"coral-server/models/settings\";\n \n import { GQLSSOAuthIntegrationTypeResolver } from \"coral-server/graph/schema/__generated__/types\";\n+import { filterFreshSigningSecrets } from \"coral-server/models/settings\";\n \n-function getActiveSSOKey(keys: settings.Secret[]) {\n-  // Any key that has been rotated cannot be the active key.\n-  return keys.find((key) => !key.rotatedAt);\n+function getActiveSSOSigningSecret(keys: settings.SigningSecret[]) {\n+  return keys.find(filterFreshSigningSecrets());\n }\n \n export const SSOAuthIntegration: GQLSSOAuthIntegrationTypeResolver<settings.SSOAuthIntegration> = {\n-  key: ({ keys }) => {\n-    const key = getActiveSSOKey(keys);\n-    if (key) {\n-      return key.secret;\n+  key: ({ signingSecrets }) => {\n+    const signingSecret = getActiveSSOSigningSecret(signingSecrets);\n+    if (signingSecret) {\n+      return signingSecret.secret;\n     }\n \n     return null;\n   },\n-  keyGeneratedAt: ({ keys }) => {\n-    const key = getActiveSSOKey(keys);\n-    if (key) {\n-      return key.createdAt;\n+  keyGeneratedAt: ({ signingSecrets }) => {\n+    const signingSecret = getActiveSSOSigningSecret(signingSecrets);\n+    if (signingSecret) {\n+      return signingSecret.createdAt;\n     }\n \n     return null;"
    },
    {
      "sha": "dccbb155adf8de655051129def4490b4c7354911",
      "filename": "src/core/server/graph/resolvers/Secret.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/server/graph/resolvers/Secret.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/server/graph/resolvers/Secret.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/Secret.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,8 +0,0 @@\n-import * as settings from \"coral-server/models/settings\";\n-\n-import { GQLSecretTypeResolver } from \"coral-server/graph/schema/__generated__/types\";\n-\n-export const Secret: GQLSecretTypeResolver<settings.Secret> = {\n-  lastUsedAt: async ({ kid }, args, ctx) =>\n-    ctx.loaders.Auth.retrieveSSOKeyLastUsedAt.load(kid),\n-};"
    },
    {
      "sha": "c16ee195c8c86d9f4f1b8664e0b4826625856644",
      "filename": "src/core/server/graph/resolvers/SigningSecret.ts",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/SigningSecret.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/SigningSecret.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/SigningSecret.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,8 @@\n+import * as settings from \"coral-server/models/settings\";\n+\n+import { GQLSigningSecretTypeResolver } from \"coral-server/graph/schema/__generated__/types\";\n+\n+export const SigningSecret: GQLSigningSecretTypeResolver<settings.SigningSecret> = {\n+  lastUsedAt: async ({ kid }, args, ctx) =>\n+    ctx.loaders.Auth.retrieveSSOSigningSecretLastUsedAt.load(kid),\n+};"
    },
    {
      "sha": "942f1bd81fce80b1ae77e03775019eae59baf17a",
      "filename": "src/core/server/graph/resolvers/index.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/resolvers/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -20,6 +20,7 @@ import { CommentReplyCreatedPayload } from \"./CommentReplyCreatedPayload\";\n import { CommentRevision } from \"./CommentRevision\";\n import { CommentStatusUpdatedPayload } from \"./CommentStatusUpdatedPayload\";\n import { DisableCommenting } from \"./DisableCommenting\";\n+import { ExternalModerationPhase } from \"./ExternalModerationPhase\";\n import { FacebookAuthIntegration } from \"./FacebookAuthIntegration\";\n import { FeatureCommentPayload } from \"./FeatureCommentPayload\";\n import { Flag } from \"./Flag\";\n@@ -39,8 +40,8 @@ import { Queue } from \"./Queue\";\n import { Queues } from \"./Queues\";\n import { RecentCommentHistory } from \"./RecentCommentHistory\";\n import { RejectCommentPayload } from \"./RejectCommentPayload\";\n-import { Secret } from \"./Secret\";\n import { Settings } from \"./Settings\";\n+import { SigningSecret } from \"./SigningSecret\";\n import { SlackConfiguration } from \"./SlackConfiguration\";\n import { SSOAuthIntegration } from \"./SSOAuthIntegration\";\n import { Story } from \"./Story\";\n@@ -73,6 +74,7 @@ const Resolvers: GQLResolver = {\n   CommentStatusUpdatedPayload,\n   Cursor,\n   DisableCommenting,\n+  ExternalModerationPhase,\n   FacebookAuthIntegration,\n   FeatureCommentPayload,\n   Flag,\n@@ -92,7 +94,7 @@ const Resolvers: GQLResolver = {\n   RecentCommentHistory,\n   RejectCommentPayload,\n   SSOAuthIntegration,\n-  Secret,\n+  SigningSecret,\n   Story,\n   StorySettings,\n   Subscription,"
    },
    {
      "sha": "3377cac14c0b836757c1bed1e3e824400e94628c",
      "filename": "src/core/server/graph/schema/schema.graphql",
      "status": "modified",
      "additions": 394,
      "deletions": 46,
      "changes": 440,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/schema/schema.graphql",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/schema/schema.graphql",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/schema/schema.graphql?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -495,7 +495,7 @@ type LocalAuthIntegration {\n ## SSOAuthIntegration\n ##########################\n \n-type Secret {\n+type SigningSecret {\n   \"\"\"\n   kid is the identifier for the key used when verifying tokens issued by the\n   provider.\n@@ -551,23 +551,23 @@ type SSOAuthIntegration {\n   targetFilter: AuthenticationTargetFilter!\n \n   \"\"\"\n-  keys are the different SSOKey's used by this Tenant.\n+  signingSecrets are the different SigningSecret's used by this Tenant.\n   \"\"\"\n-  keys: [Secret!]! @auth(roles: [ADMIN])\n+  signingSecrets: [SigningSecret!]! @auth(roles: [ADMIN])\n \n   \"\"\"\n   key is the secret that is used to sign tokens.\n   \"\"\"\n   key: String\n     @auth(roles: [ADMIN])\n-    @deprecated(reason: \"field is deprecated in favour of `keys`\")\n+    @deprecated(reason: \"field is deprecated in favour of `signingSecrets`\")\n \n   \"\"\"\n   keyGeneratedAt is the Time that the key was effective from.\n   \"\"\"\n   keyGeneratedAt: Time\n     @auth(roles: [ADMIN])\n-    @deprecated(reason: \"field is deprecated in favour of `keys`\")\n+    @deprecated(reason: \"field is deprecated in favour of `signingSecrets`\")\n }\n \n ##########################\n@@ -908,6 +908,73 @@ type PerspectiveExternalIntegration {\n   sendFeedback: Boolean @auth(roles: [ADMIN])\n }\n \n+\"\"\"\n+COMMENT_BODY_FORMAT describes the various formats that a comment body can be\n+provided in.\n+\"\"\"\n+enum COMMENT_BODY_FORMAT {\n+  \"\"\"\n+  HTML describes the format of the comment body using HTML.\n+  \"\"\"\n+  HTML\n+\n+  \"\"\"\n+  PLAIN_TEXT describes the format of the comment body with the HTML stripped.\n+  \"\"\"\n+  PLAIN_TEXT\n+}\n+\n+\"\"\"\n+ExternalModerationPhase describes a phase use in the moderation pipeline that\n+calls out to an external resource as defined by the provided URL.\n+\"\"\"\n+type ExternalModerationPhase {\n+  \"\"\"\n+  id identifies this particular External Moderation Phase.\n+  \"\"\"\n+  id: ID!\n+\n+  \"\"\"\n+  name is the name assigned to this ExternalModerationPhase for identification\n+  purposes.\n+  \"\"\"\n+  name: String!\n+\n+  \"\"\"\n+  enabled when true, will use this phase in the moderation pipeline.\n+  \"\"\"\n+  enabled: Boolean!\n+\n+  \"\"\"\n+  url is the actual URL that should be called.\n+  \"\"\"\n+  url: String!\n+\n+  \"\"\"\n+  format is the format of the comment body sent.\n+  \"\"\"\n+  format: COMMENT_BODY_FORMAT!\n+\n+  \"\"\"\n+  timeout is the number of milliseconds that this moderation is maximum expected\n+  to take before it is skipped.\n+  \"\"\"\n+  timeout: Int!\n+\n+  \"\"\"\n+  signingSecret is the secret used to sign outgoing requests to the url during\n+  the moderation pipeline.\n+  \"\"\"\n+  signingSecret: SigningSecret!\n+}\n+\n+type CustomExternalIntegration {\n+  \"\"\"\n+  phases is all the external moderation phases for this Tenant.\n+  \"\"\"\n+  phases: [ExternalModerationPhase!]!\n+}\n+\n type ExternalIntegrations {\n   \"\"\"\n   akismet provides integration with the Akismet Spam detection service.\n@@ -919,6 +986,12 @@ type ExternalIntegrations {\n   platform.\n   \"\"\"\n   perspective: PerspectiveExternalIntegration!\n+\n+  \"\"\"\n+  external provides integration details for external moderation phases that can be\n+  used in the moderation pipeline.\n+  \"\"\"\n+  external: CustomExternalIntegration\n }\n \n ################################################################################\n@@ -1318,7 +1391,7 @@ type WebhookEndpoint {\n   \"\"\"\n   signingSecret is the current secret used to sign the events sent out.\n   \"\"\"\n-  signingSecret: Secret!\n+  signingSecret: SigningSecret!\n \n   \"\"\"\n   deliveries store the deliveries for each event sent for the last 50 events.\n@@ -3183,6 +3256,13 @@ type Query {\n   queues returns information on queues used in Coral to manage\n   \"\"\"\n   queues: Queues! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  externalModerationPhase will return a specific ExternalModerationPhase if it\n+  exists.\n+  \"\"\"\n+  externalModerationPhase(id: ID!): ExternalModerationPhase\n+    @auth(roles: [ADMIN])\n }\n \n ################################################################################\n@@ -4369,7 +4449,7 @@ input RegenerateSSOKeyInput {\n \n type RegenerateSSOKeyPayload {\n   \"\"\"\n-  settings is the Settings that the SSO key was regenerated on.\n+  settings is the Settings that the SSO secret was regenerated on.\n   \"\"\"\n   settings: Settings\n \n@@ -5158,10 +5238,10 @@ type UpdateWebhookEndpointPayload {\n }\n \n ##################\n-# rotateWebhookEndpointSecret\n+# rotateWebhookEndpointSigningSecret\n ##################\n \n-input RotateWebhookEndpointSecretInput {\n+input RotateWebhookEndpointSigningSecretInput {\n   \"\"\"\n   clientMutationId is required for Relay support.\n   \"\"\"\n@@ -5179,7 +5259,7 @@ input RotateWebhookEndpointSecretInput {\n   inactiveIn: Int!\n }\n \n-type RotateWebhookEndpointSecretPayload {\n+type RotateWebhookEndpointSigningSecretPayload {\n   \"\"\"\n   clientMutationId is required for Relay support.\n   \"\"\"\n@@ -5188,7 +5268,7 @@ type RotateWebhookEndpointSecretPayload {\n   \"\"\"\n   endpoint is the endpoint that we just updated.\n   \"\"\"\n-  endpoint: WebhookEndpoint\n+  endpoint: WebhookEndpoint!\n }\n \n ##################\n@@ -5216,7 +5296,7 @@ type DisableWebhookEndpointPayload {\n   \"\"\"\n   endpoint is the endpoint that we just disabled.\n   \"\"\"\n-  endpoint: WebhookEndpoint\n+  endpoint: WebhookEndpoint!\n }\n \n ##################\n@@ -5244,7 +5324,7 @@ type EnableWebhookEndpointPayload {\n   \"\"\"\n   endpoint is the endpoint that we just enabled.\n   \"\"\"\n-  endpoint: WebhookEndpoint\n+  endpoint: WebhookEndpoint!\n }\n \n ##################\n@@ -5272,7 +5352,225 @@ type DeleteWebhookEndpointPayload {\n   \"\"\"\n   endpoint is the endpoint that we just deleted.\n   \"\"\"\n-  endpoint: WebhookEndpoint\n+  endpoint: WebhookEndpoint!\n+}\n+\n+#################\n+# createExternalModerationPhase\n+##################\n+\n+input CreateExternalModerationPhaseInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  name is the name assigned to this ExternalModerationPhase for identification\n+  purposes.\n+  \"\"\"\n+  name: String!\n+\n+  \"\"\"\n+  url is the URL that Coral will POST moderation queries to.\n+  \"\"\"\n+  url: String!\n+\n+  \"\"\"\n+  format is the format of the comment body sent.\n+  \"\"\"\n+  format: COMMENT_BODY_FORMAT!\n+\n+  \"\"\"\n+  timeout is the number of milliseconds that this moderation is maximum expected\n+  to take before it is skipped.\n+  \"\"\"\n+  timeout: Int!\n+}\n+\n+type CreateExternalModerationPhasePayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  phase is the ExternalModerationPhase that we just created.\n+  \"\"\"\n+  phase: ExternalModerationPhase!\n+\n+  \"\"\"\n+  settings is the updated settings also containing the new phase.\n+  \"\"\"\n+  settings: Settings!\n+}\n+\n+##################\n+# updateExternalModerationPhase\n+##################\n+\n+input UpdateExternalModerationPhaseInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  id is the ID of the ExternalModerationPhase being updated.\n+  \"\"\"\n+  id: ID!\n+\n+  \"\"\"\n+  name is the name assigned to this ExternalModerationPhase for identification\n+  purposes.\n+  \"\"\"\n+  name: String\n+\n+  \"\"\"\n+  url is the URL that Coral will POST moderation queries to.\n+  \"\"\"\n+  url: String\n+\n+  \"\"\"\n+  format is the format of the comment body sent.\n+  \"\"\"\n+  format: COMMENT_BODY_FORMAT\n+\n+  \"\"\"\n+  timeout is the number of milliseconds that this moderation is maximum expected\n+  to take before it is skipped.\n+  \"\"\"\n+  timeout: Int\n+}\n+\n+type UpdateExternalModerationPhasePayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  phase is the ExternalModerationPhase that we just updated.\n+  \"\"\"\n+  phase: ExternalModerationPhase!\n+}\n+\n+##################\n+# deleteExternalModerationPhase\n+##################\n+\n+input DeleteExternalModerationPhaseInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  id is the ID of the ExternalModerationPhase being deleted.\n+  \"\"\"\n+  id: ID!\n+}\n+\n+type DeleteExternalModerationPhasePayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  phase is the ExternalModerationPhase that we just deleted.\n+  \"\"\"\n+  phase: ExternalModerationPhase!\n+}\n+\n+##################\n+# disableExternalModerationPhase\n+##################\n+\n+input DisableExternalModerationPhaseInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  id is the ID of the ExternalModerationPhase being disabled.\n+  \"\"\"\n+  id: ID!\n+}\n+\n+type DisableExternalModerationPhasePayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  phase is the ExternalModerationPhase that we just disabled.\n+  \"\"\"\n+  phase: ExternalModerationPhase!\n+}\n+\n+##################\n+# enableExternalModerationPhase\n+##################\n+\n+input EnableExternalModerationPhaseInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  id is the ID of the ExternalModerationPhase being enabled.\n+  \"\"\"\n+  id: ID!\n+}\n+\n+type EnableExternalModerationPhasePayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  phase is the ExternalModerationPhase that we just enabled.\n+  \"\"\"\n+  phase: ExternalModerationPhase!\n+}\n+\n+##################\n+# rotateExternalModerationPhaseSigningSecret\n+##################\n+\n+input RotateExternalModerationPhaseSigningSecretInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  id is the ID of the ExternalModerationPhase being updated.\n+  \"\"\"\n+  id: ID!\n+\n+  \"\"\"\n+  inactiveIn is the number of seconds that the current active Secret should be\n+  kept active.\n+  \"\"\"\n+  inactiveIn: Int!\n+}\n+\n+type RotateExternalModerationPhaseSigningSecretPayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  phase is the ExternalModerationPhase that we just updated.\n+  \"\"\"\n+  phase: ExternalModerationPhase!\n }\n \n ##################\n@@ -6001,87 +6299,87 @@ type EnableFeatureFlagPayload {\n }\n \n #########################\n-## rotateSSOKey\n+## rotateSSOSigningSecret\n #########################\n \n-input RotateSSOKeyInput {\n+input RotateSSOSigningSecretInput {\n   \"\"\"\n   clientMutationId is required for Relay support.\n   \"\"\"\n   clientMutationId: String!\n \n   \"\"\"\n-  inactiveIn is the number of seconds that the current active SSOKey should be\n-  kept active (allow signed tokens signed with this secret) before rejecting\n-  them.\n+  inactiveIn is the number of seconds that the current active SigningSecret\n+  should be kept active (allow signed tokens signed with this secret) before\n+  rejecting them.\n   \"\"\"\n   inactiveIn: Int!\n }\n \n-type RotateSSOKeyPayload {\n+type RotateSSOSigningSecretPayload {\n   \"\"\"\n   clientMutationId is required for Relay support.\n   \"\"\"\n   clientMutationId: String!\n \n   \"\"\"\n-  settings is the Settings that the SSO key was regenerated on.\n+  settings is the Settings that the SSO secret was regenerated on.\n   \"\"\"\n   settings: Settings\n }\n \n #########################\n-## deactivateSSOKey\n+## deactivateSSOSigningSecret\n #########################\n \n-input DeactivateSSOKeyInput {\n+input DeactivateSSOSigningSecretInput {\n   \"\"\"\n   clientMutationId is required for Relay support.\n   \"\"\"\n   clientMutationId: String!\n \n   \"\"\"\n-  kid is the ID of the SSOKey being deactivated.\n+  kid is the ID of the SigningSecret being deactivated.\n   \"\"\"\n   kid: ID!\n }\n \n-type DeactivateSSOKeyPayload {\n+type DeactivateSSOSigningSecretPayload {\n   \"\"\"\n   clientMutationId is required for Relay support.\n   \"\"\"\n   clientMutationId: String!\n \n   \"\"\"\n-  settings is the Settings that the SSO key was regenerated on.\n+  settings is the Settings that the SSO secret was regenerated on.\n   \"\"\"\n   settings: Settings\n }\n \n #########################\n-## deleteSSOKey\n+## deleteSSOSigningSecret\n #########################\n \n-input DeleteSSOKeyInput {\n+input DeleteSSOSigningSecretInput {\n   \"\"\"\n   clientMutationId is required for Relay support.\n   \"\"\"\n   clientMutationId: String!\n \n   \"\"\"\n-  kid is the ID of the SSOKey being deleted.\n+  kid is the ID of the SigningSecret being deleted.\n   \"\"\"\n   kid: ID!\n }\n \n-type DeleteSSOKeyPayload {\n+type DeleteSSOSigningSecretPayload {\n   \"\"\"\n   clientMutationId is required for Relay support.\n   \"\"\"\n   clientMutationId: String!\n \n   \"\"\"\n-  settings is the Settings that the SSO key was regenerated on.\n+  settings is the Settings that the SSO secret was regenerated on.\n   \"\"\"\n   settings: Settings\n }\n@@ -6349,30 +6647,35 @@ type Mutation {\n     @auth(roles: [ADMIN])\n \n   \"\"\"\n-  regenerateSSOKey will regenerate the SSO key used to sign secrets. This will\n+  regenerateSSOKey will regenerate the SSO secret used to sign secrets. This will\n   invalidate any existing user sessions.\n+\n+  DEPRECATED: deprecated in favour of `rotateSSOSigningSecret`, remove in 6.2.0.\n   \"\"\"\n   regenerateSSOKey(input: RegenerateSSOKeyInput!): RegenerateSSOKeyPayload!\n     @auth(roles: [ADMIN])\n-    @deprecated(reason: \"deprecated in favour of `rotateSSOKey`\")\n+    @deprecated(reason: \"deprecated in favour of `rotateSSOSigningSecret`\")\n \n   \"\"\"\n-  rotateSSOKey can be used to rotate a given active SSOKey.\n+  rotateSSOSigningSecret can be used to rotate a given active SigningSecret.\n   \"\"\"\n-  rotateSSOKey(input: RotateSSOKeyInput!): RotateSSOKeyPayload!\n-    @auth(roles: [ADMIN])\n+  rotateSSOSigningSecret(\n+    input: RotateSSOSigningSecretInput!\n+  ): RotateSSOSigningSecretPayload! @auth(roles: [ADMIN])\n \n   \"\"\"\n-  deactivateSSOKey will deactivate a given deactivated SSOKey.\n+  deactivateSSOSigningSecret will deactivate a given deactivated SigningSecret.\n   \"\"\"\n-  deactivateSSOKey(input: DeactivateSSOKeyInput!): DeactivateSSOKeyPayload!\n-    @auth(roles: [ADMIN])\n+  deactivateSSOSigningSecret(\n+    input: DeactivateSSOSigningSecretInput!\n+  ): DeactivateSSOSigningSecretPayload! @auth(roles: [ADMIN])\n \n   \"\"\"\n-  deleteSSOKey will delete a given inactive SSOKey.\n+  deleteSSOSigningSecret will delete a given inactive SigningSecret.\n   \"\"\"\n-  deleteSSOKey(input: DeleteSSOKeyInput!): DeleteSSOKeyPayload!\n-    @auth(roles: [ADMIN])\n+  deleteSSOSigningSecret(\n+    input: DeleteSSOSigningSecretInput!\n+  ): DeleteSSOSigningSecretPayload! @auth(roles: [ADMIN])\n \n   \"\"\"\n   createCommentReaction will create a Reaction authored by the current logged in\n@@ -6762,11 +7065,56 @@ type Mutation {\n   ): DeleteWebhookEndpointPayload! @auth(roles: [ADMIN])\n \n   \"\"\"\n-  rotateWebhookEndpointSecret will roll the current active secret to a new key.\n+  rotateWebhookEndpointSigningSecret will roll the current active secret to a new key.\n+  \"\"\"\n+  rotateWebhookEndpointSigningSecret(\n+    input: RotateWebhookEndpointSigningSecretInput!\n+  ): RotateWebhookEndpointSigningSecretPayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  createExternalModerationPhase will create a new ExternalModerationPhase.\n+  \"\"\"\n+  createExternalModerationPhase(\n+    input: CreateExternalModerationPhaseInput!\n+  ): CreateExternalModerationPhasePayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  updateExternalModerationPhase will update a ExternalModerationPhase.\n+  \"\"\"\n+  updateExternalModerationPhase(\n+    input: UpdateExternalModerationPhaseInput!\n+  ): UpdateExternalModerationPhasePayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  enableExternalModerationPhase will enable a ExternalModerationPhase to recieve\n+  new comments.\n+  \"\"\"\n+  enableExternalModerationPhase(\n+    input: EnableExternalModerationPhaseInput!\n+  ): EnableExternalModerationPhasePayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  disableExternalModerationPhase will disable a ExternalModerationPhase from\n+  recieving new comments.\n+  \"\"\"\n+  disableExternalModerationPhase(\n+    input: DisableExternalModerationPhaseInput!\n+  ): DisableExternalModerationPhasePayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  deleteExternalModerationPhase will delete a ExternalModerationPhase.\n+  \"\"\"\n+  deleteExternalModerationPhase(\n+    input: DeleteExternalModerationPhaseInput!\n+  ): DeleteExternalModerationPhasePayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  rotateExternalModerationPhaseSigningSecret will roll the current active secret\n+  to a new key.\n   \"\"\"\n-  rotateWebhookEndpointSecret(\n-    input: RotateWebhookEndpointSecretInput!\n-  ): RotateWebhookEndpointSecretPayload! @auth(roles: [ADMIN])\n+  rotateExternalModerationPhaseSigningSecret(\n+    input: RotateExternalModerationPhaseSigningSecretInput!\n+  ): RotateExternalModerationPhaseSigningSecretPayload! @auth(roles: [ADMIN])\n \n   \"\"\"\n   updateStoryMode will set the story mode."
    },
    {
      "sha": "1d9320f663363414c0ecb81504d7273f21391142",
      "filename": "src/core/server/graph/subscriptions/server.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/subscriptions/server.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/graph/subscriptions/server.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/subscriptions/server.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -24,10 +24,10 @@ import {\n } from \"coral-server/app/middleware/passport/strategies/jwt\";\n import {\n   CoralError,\n-  InternalError,\n   LiveUpdatesDisabled,\n   RawQueryNotAuthorized,\n   TenantNotFoundError,\n+  WrappedInternalError,\n } from \"coral-server/errors\";\n import { enrichError, logError, logQuery } from \"coral-server/graph/extensions\";\n import { getOperationMetadata } from \"coral-server/graph/extensions/helpers\";\n@@ -151,7 +151,10 @@ export function onConnect(options: OnConnectOptions): OnConnectFn {\n \n       if (!(err instanceof CoralError)) {\n         // eslint-disable-next-line no-ex-assign\n-        err = new InternalError(err, \"could not setup websocket connection\");\n+        err = new WrappedInternalError(\n+          err,\n+          \"could not setup websocket connection\"\n+        );\n       }\n       const { message } = err.serializeExtensions(\n         options.i18n.getDefaultBundle()"
    },
    {
      "sha": "0c1f72763044e268beb4ccc229d330c8c115d5a6",
      "filename": "src/core/server/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -34,7 +34,7 @@ import {\n   createAugmentedRedisClient,\n   createRedisClient,\n } from \"coral-server/services/redis\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n import {\n   NotifierCoralEventListener,"
    },
    {
      "sha": "fc6fea031d641ad8de4d79f85677e5475992b1fb",
      "filename": "src/core/server/models/comment/helpers.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/comment/helpers.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/comment/helpers.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/comment/helpers.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -57,3 +57,14 @@ export function calculateRejectionRate(counts: CommentStatusCounts): number {\n export function hasTag(comment: Pick<Comment, \"tags\">, tag: GQLTAG) {\n   return comment.tags.some((v) => v.type === tag);\n }\n+\n+/**\n+ * getDepth will return the depth of the comment.\n+ *\n+ * @param comment the comment to check for depth\n+ */\n+export function getDepth(\n+  comment: Pick<Comment, \"ancestorIDs\" | \"parentID\">\n+): number {\n+  return hasAncestors(comment) ? comment.ancestorIDs.length : 0;\n+}"
    },
    {
      "sha": "8e35ca20391c23f3df2fbc88fe6b209d68a776e1",
      "filename": "src/core/server/models/settings/helpers.ts",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/helpers.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/helpers.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/settings/helpers.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,15 @@\n+import {\n+  ExternalModerationExternalIntegration,\n+  ExternalModerationPhase,\n+} from \"./settings\";\n+\n+export function filterActivePhase() {\n+  return (phase: Pick<ExternalModerationPhase, \"enabled\">) => phase.enabled;\n+}\n+\n+export function getExternalModerationPhase(\n+  integration: ExternalModerationExternalIntegration,\n+  phaseID: string\n+) {\n+  return integration.phases.find((p) => p.id === phaseID) || null;\n+}"
    },
    {
      "sha": "4015ea764cfc21eb8a813ed99750366db1ea7aa9",
      "filename": "src/core/server/models/settings/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/settings/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,2 +1,3 @@\n export * from \"./settings\";\n-export * from \"./secret\";\n+export * from \"./helpers\";\n+export * from \"./signingSecret\";"
    },
    {
      "sha": "e23f6abfe46bd8da41729203f70570b3e1b0c055",
      "filename": "src/core/server/models/settings/secret.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 44,
      "changes": 44,
      "blob_url": "https://github.com/coralproject/talk/blob/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/server/models/settings/secret.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ceb96dba753bf5d7e6383cda479d6f5d2659b9d0/src/core/server/models/settings/secret.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/settings/secret.ts?ref=ceb96dba753bf5d7e6383cda479d6f5d2659b9d0",
      "patch": "@@ -1,44 +0,0 @@\n-export interface Secret {\n-  /**\n-   * kid is the identifier for the key used when verifying tokens issued by the\n-   * provider.\n-   */\n-  kid: string;\n-\n-  /**\n-   * secret is the actual underlying secret used to verify the tokens with.\n-   */\n-  secret: string;\n-\n-  /**\n-   * createdAt is the date that the key was created at.\n-   */\n-  createdAt: Date;\n-\n-  /**\n-   * rotatedAt is the time that the token was rotated out.\n-   */\n-  rotatedAt?: Date;\n-\n-  /**\n-   * inactiveAt is the date that the token can no longer be used to validate\n-   * tokens.\n-   */\n-  inactiveAt?: Date;\n-}\n-\n-export function isSecretExpired({ inactiveAt }: Secret, now = new Date()) {\n-  if (inactiveAt && inactiveAt <= now) {\n-    return true;\n-  }\n-\n-  return false;\n-}\n-\n-export function filterExpiredSecrets(now = new Date()) {\n-  return (secret: Secret) => isSecretExpired(secret, now);\n-}\n-\n-export function filterActiveSecrets(now = new Date()) {\n-  return (secret: Secret) => !isSecretExpired(secret, now);\n-}"
    },
    {
      "sha": "744d238c55d326ed59e84cb778199934cc190961",
      "filename": "src/core/server/models/settings/settings.ts",
      "status": "modified",
      "additions": 75,
      "deletions": 4,
      "changes": 79,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/settings.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/settings.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/settings/settings.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,17 +1,20 @@\n import {\n+  GQLAkismetExternalIntegration,\n   GQLAuth,\n   GQLAuthenticationTargetFilter,\n+  GQLCOMMENT_BODY_FORMAT,\n   GQLEmailConfiguration,\n   GQLFacebookAuthIntegration,\n   GQLGoogleAuthIntegration,\n   GQLLiveConfiguration,\n   GQLLocalAuthIntegration,\n   GQLMODERATION_MODE,\n   GQLOIDCAuthIntegration,\n+  GQLPerspectiveExternalIntegration,\n   GQLSettings,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n-import { Secret } from \"./secret\";\n+import { SigningSecretResource } from \"./signingSecret\";\n \n export type LiveConfiguration = Omit<GQLLiveConfiguration, \"configurable\">;\n \n@@ -38,11 +41,10 @@ export type FacebookAuthIntegration = Omit<\n   \"callbackURL\" | \"redirectURL\"\n >;\n \n-export interface SSOAuthIntegration {\n+export interface SSOAuthIntegration extends SigningSecretResource {\n   enabled: boolean;\n   allowRegistration: boolean;\n   targetFilter: GQLAuthenticationTargetFilter;\n-  keys: Secret[];\n }\n \n /**\n@@ -85,6 +87,71 @@ export type Auth = Omit<GQLAuth, \"integrations\"> & {\n   integrations: AuthIntegrations;\n };\n \n+export interface ExternalModerationPhase extends SigningSecretResource {\n+  /**\n+   * id identifies this particular External Moderation Phase.\n+   */\n+  id: string;\n+\n+  /**\n+   * name is the name assigned to this ExternalModerationPhase for\n+   * identification purposes.\n+   */\n+  name: string;\n+\n+  /**\n+   * enabled when true, will use this phase in the moderation pipeline.\n+   */\n+  enabled: boolean;\n+\n+  /**\n+   * url is the actual URL that should be called.\n+   */\n+  url: string;\n+\n+  /**\n+   * format is the format of the comment body sent.\n+   */\n+  format: GQLCOMMENT_BODY_FORMAT;\n+\n+  /**\n+   * timeout is the number of milliseconds that this moderation is maximum\n+   * expected to take before it is skipped.\n+   */\n+  timeout: number;\n+\n+  /**\n+   * createdAt is the date that this External Moderation Phase was created at.\n+   */\n+  createdAt: Date;\n+}\n+\n+export interface ExternalModerationExternalIntegration {\n+  /**\n+   * phases is all the external moderation phases for this Tenant.\n+   */\n+  phases: ExternalModerationPhase[];\n+}\n+\n+export interface ExternalIntegrations {\n+  /**\n+   * akismet provides integration with the Akismet Spam detection service.\n+   */\n+  akismet: GQLAkismetExternalIntegration;\n+\n+  /**\n+   * perspective provides integration with the Perspective API comment analysis\n+   * platform.\n+   */\n+  perspective: GQLPerspectiveExternalIntegration;\n+\n+  /**\n+   * external provides integration details for external moderation phases that can be\n+   * used in the moderation pipeline.\n+   */\n+  external?: ExternalModerationExternalIntegration;\n+}\n+\n /**\n  * CloseCommenting contains settings related to the automatic closing of commenting on\n  * Stories.\n@@ -108,7 +175,6 @@ export type Settings = GlobalModerationSettings &\n     | \"email\"\n     | \"recentCommentHistory\"\n     | \"wordList\"\n-    | \"integrations\"\n     | \"reaction\"\n     | \"staff\"\n     | \"editCommentWindowLength\"\n@@ -146,6 +212,11 @@ export type Settings = GlobalModerationSettings &\n      */\n     accountFeatures: AccountFeatures;\n \n+    /**\n+     * integrations contains all the external integrations that can be enabled.\n+     */\n+    integrations: ExternalIntegrations;\n+\n     /**\n      * newCommenters is the configuration for how new commenters comments are treated.\n      */"
    },
    {
      "sha": "e16ff32b318ad127deaa15568db921704e50bed6",
      "filename": "src/core/server/models/settings/signingSecret/helpers.ts",
      "status": "added",
      "additions": 99,
      "deletions": 0,
      "changes": 99,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/signingSecret/helpers.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/signingSecret/helpers.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/settings/signingSecret/helpers.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,99 @@\n+import crypto from \"crypto\";\n+\n+import { SigningSecret } from \"./signingSecret\";\n+\n+function generateSecureRandomString(size: number, drift = 5) {\n+  return crypto\n+    .randomBytes(size + Math.floor(Math.random() * drift))\n+    .toString(\"hex\");\n+}\n+\n+export function generateSigningSecret(\n+  prefix: string,\n+  createdAt: Date\n+): SigningSecret {\n+  // Generate a new key. We generate a key of minimum length 32 up to 37 bytes,\n+  // as 16 was the minimum length recommended.\n+  //\n+  // Reference: https://security.stackexchange.com/a/96176\n+  const secret = prefix + \"_\" + generateSecureRandomString(32, 5);\n+  const kid = generateSecureRandomString(8, 3);\n+\n+  return { kid, secret, createdAt };\n+}\n+\n+/**\n+ * isSecretExpired is a function that given a secret and the current date will\n+ * return whether the secret has expired.\n+ *\n+ * @param secret the secret to test\n+ * @param now the current date\n+ */\n+function isSigningSecretExpired({ inactiveAt }: SigningSecret, now: Date) {\n+  if (inactiveAt && inactiveAt <= now) {\n+    return true;\n+  }\n+\n+  return false;\n+}\n+\n+/**\n+ * filterExpiredSecrets is a filter function that can be used to filter only\n+ * secrets that are inactive or expired.\n+ *\n+ * @param now the current date\n+ */\n+export function filterExpiredSigningSecrets(now: Date) {\n+  return (secret: SigningSecret) => isSigningSecretExpired(secret, now);\n+}\n+\n+/**\n+ * filterFreshSecrets is a filtering function that can be used to filter for any\n+ * secret that has not been rotated.\n+ */\n+export function filterFreshSigningSecrets() {\n+  return (secret: SigningSecret) => !secret.rotatedAt;\n+}\n+\n+/**\n+ * filterActiveSecrets is a filter function that can be used to filter only\n+ * secrets that are active.\n+ *\n+ * @param now the current date\n+ */\n+export function filterActiveSigningSecrets(now: Date) {\n+  return (secret: SigningSecret) => !isSigningSecretExpired(secret, now);\n+}\n+\n+/**\n+ * generateSignature will generate a signature used to assist clients to\n+ * validate that the request came from Coral.\n+ *\n+ * @param key the secret used to sign the body with\n+ * @param data the data to sign\n+ */\n+function generateSignature(key: string, data: string) {\n+  return crypto.createHmac(\"sha256\", key).update(data).digest().toString(\"hex\");\n+}\n+\n+/**\n+ * generateSignatures will return a header value that can be used to verify the\n+ * integrity and authenticity of a payload sent from Coral.\n+ *\n+ * @param signingSecrets the secrets that should be used to sign the data with\n+ * @param data the data to sign\n+ * @param now the current date\n+ */\n+export function generateSignatures(\n+  signingSecrets: SigningSecret[],\n+  data: string,\n+  now: Date\n+) {\n+  // For each of the signatures, we only want to sign the body with secrets that\n+  // are still active.\n+  return signingSecrets\n+    .filter(filterActiveSigningSecrets(now))\n+    .map(({ secret }) => generateSignature(secret, data))\n+    .map((signature) => `sha256=${signature}`)\n+    .join(\",\");\n+}"
    },
    {
      "sha": "cef795e0f89e6c620bf10848eba5c9c2e7bc1669",
      "filename": "src/core/server/models/settings/signingSecret/index.ts",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/signingSecret/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/signingSecret/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/settings/signingSecret/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,2 @@\n+export * from \"./helpers\";\n+export * from \"./signingSecret\";"
    },
    {
      "sha": "22ff7cc6efc309801e1236a2865612e139823da9",
      "filename": "src/core/server/models/settings/signingSecret/signingSecret.ts",
      "status": "added",
      "additions": 287,
      "deletions": 0,
      "changes": 287,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/signingSecret/signingSecret.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/settings/signingSecret/signingSecret.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/settings/signingSecret/signingSecret.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,287 @@\n+import { get } from \"lodash\";\n+import { Collection, FindOneAndUpdateOption, UpdateQuery } from \"mongodb\";\n+\n+import logger from \"coral-server/logger\";\n+import { FilterQuery } from \"coral-server/models/helpers\";\n+\n+import { filterFreshSigningSecrets, generateSigningSecret } from \"./helpers\";\n+\n+export interface SigningSecret {\n+  /**\n+   * kid is the identifier for the key used when verifying tokens issued by the\n+   * provider.\n+   */\n+  kid: string;\n+\n+  /**\n+   * secret is the actual underlying secret used to verify the tokens with.\n+   */\n+  secret: string;\n+\n+  /**\n+   * createdAt is the date that the key was created at.\n+   */\n+  createdAt: Date;\n+\n+  /**\n+   * rotatedAt is the time that the token was rotated out.\n+   */\n+  rotatedAt?: Date;\n+\n+  /**\n+   * inactiveAt is the date that the token can no longer be used to validate\n+   * tokens.\n+   */\n+  inactiveAt?: Date;\n+}\n+\n+/**\n+ * SigningSecretResource is a resource that contains signing credentials.\n+ */\n+export interface SigningSecretResource {\n+  /**\n+   * signingSecrets are secrets used for signing and verification.\n+   */\n+  signingSecrets: SigningSecret[];\n+}\n+\n+interface SigningSecretResourceNode extends SigningSecretResource {\n+  id: string;\n+}\n+\n+interface RotateSigningSecretOptions<T extends {}> {\n+  /**\n+   * collection is the database collection that the document exists in.\n+   */\n+  collection: Collection<Readonly<T>>;\n+\n+  /**\n+   * filter is the database query used to filter out the specific document that\n+   * contains a SigningResource.\n+   */\n+  filter: FilterQuery<T>;\n+\n+  /**\n+   * path is the dot notation path of the resource that contains the signing\n+   * secrets.\n+   */\n+  path: string;\n+\n+  /**\n+   * prefix is the secret prefix that will be added to the new secret that is\n+   * generated.\n+   */\n+  prefix: string;\n+\n+  /**\n+   * id is the identifier used when querying for the resource identified by the\n+   * `path` parameter above.\n+   */\n+  id?: string;\n+\n+  /**\n+   * inactiveAt is the date that the previous keys should be active for.\n+   */\n+  inactiveAt: Date;\n+\n+  /**\n+   * now is the current date.\n+   */\n+  now: Date;\n+}\n+\n+/**\n+ * getSecretKIDsToDeprecate will return all the keys that should be deprecated\n+ * from the first phase of the rolling process.\n+ *\n+ * @param signingSecrets the keys returned by the query operation\n+ */\n+const getSecretKIDsToDeprecate = (signingSecrets: SigningSecret[]) =>\n+  signingSecrets\n+    // By excluding the last one (the one we just pushed)...\n+    .splice(0, signingSecrets.length - 1)\n+    // And only finding keys that have not been rotated yet.\n+    .filter(filterFreshSigningSecrets())\n+    // And get their kid's.\n+    .map((s) => s.kid);\n+\n+async function pushNewSigningSecret<T extends {}>({\n+  collection,\n+  filter,\n+  path,\n+  prefix,\n+  id,\n+  now,\n+}: RotateSigningSecretOptions<T>) {\n+  // Create the new secret.\n+  const secret = generateSigningSecret(prefix, now);\n+\n+  // Generate the update for the operation.\n+  let update: UpdateQuery<T>;\n+  if (id) {\n+    update = {\n+      $push: {\n+        [`${path}.$[resource].signingSecrets`]: secret,\n+      },\n+    };\n+  } else {\n+    update = {\n+      $push: {\n+        [`${path}.signingSecrets`]: secret,\n+      },\n+    };\n+  }\n+\n+  // Generate the options for the operation.\n+  const options: FindOneAndUpdateOption = {\n+    // False to return the updated document instead of the original\n+    // document.\n+    returnOriginal: false,\n+  };\n+  if (id) {\n+    options.arrayFilters = [\n+      // Select the secret resource under the object.\n+      { \"resource.id\": id },\n+    ];\n+  }\n+\n+  // Update the resource with this new secret.\n+  const result = await collection.findOneAndUpdate(filter, update, options);\n+  if (!result.value) {\n+    return null;\n+  }\n+\n+  return result.value;\n+}\n+\n+function getResourceFromDoc<T extends {}>(\n+  { id, path }: Pick<RotateSigningSecretOptions<T>, \"id\" | \"path\">,\n+  doc: T\n+) {\n+  if (id) {\n+    // The ID was provided, so we need to get the referenced resource by it's\n+    // ID. This also means that the resource indicated exists in an Array, so\n+    // treat it as such.\n+\n+    // Get the resource referenced by the path (should be a path to an array).\n+    const resources: SigningSecretResourceNode[] | undefined = get(doc, path);\n+    if (!resources || !Array.isArray(resources)) {\n+      return null;\n+    }\n+\n+    // Get the specific resource from the array.\n+    const resource = resources.find((r) => r.id === id);\n+    if (!resource) {\n+      return null;\n+    }\n+\n+    return resource;\n+  }\n+\n+  // The ID was not provided, which means that the resource is not in an array.\n+  const resource: SigningSecretResource | undefined = get(doc, path);\n+  if (!resource) {\n+    if (Array.isArray(resource)) {\n+      throw new Error(\"we were not passed an ID but got an array anyways\");\n+    }\n+\n+    return null;\n+  }\n+\n+  return resource;\n+}\n+\n+async function deprecateOldSigningSecrets<T extends {}>(\n+  {\n+    collection,\n+    path,\n+    inactiveAt,\n+    filter,\n+    id,\n+    now,\n+  }: Pick<\n+    RotateSigningSecretOptions<T>,\n+    \"collection\" | \"path\" | \"inactiveAt\" | \"filter\" | \"id\" | \"now\"\n+  >,\n+  doc: Readonly<T>\n+) {\n+  // Get the resource from the value.\n+  const resource = getResourceFromDoc({ id, path }, doc);\n+  if (!resource) {\n+    return null;\n+  }\n+\n+  // Get the secrets we need to deactivate...\n+  const secretKIDsToDeprecate = getSecretKIDsToDeprecate(\n+    resource.signingSecrets\n+  );\n+  if (secretKIDsToDeprecate.length === 0) {\n+    return doc;\n+  }\n+\n+  logger.trace(\n+    { kids: secretKIDsToDeprecate, filter, arrayFilter: { id: id || null } },\n+    \"deprecating old signingSecrets\"\n+  );\n+\n+  // Construct the update operation for rotating the secret.\n+  let update: UpdateQuery<T>;\n+  if (id) {\n+    update = {\n+      $set: {\n+        [`${path}.$[resource].signingSecrets.$[signingSecret].inactiveAt`]: inactiveAt,\n+        [`${path}.$[resource].signingSecrets.$[signingSecret].rotatedAt`]: now,\n+      },\n+    };\n+  } else {\n+    update = {\n+      $set: {\n+        [`${path}.signingSecrets.$[signingSecret].inactiveAt`]: inactiveAt,\n+        [`${path}.signingSecrets.$[signingSecret].rotatedAt`]: now,\n+      },\n+    };\n+  }\n+\n+  // Construct the options for the operation.\n+  const options: FindOneAndUpdateOption = {\n+    // False to return the updated document instead of the original\n+    // document.\n+    returnOriginal: false,\n+    arrayFilters: [\n+      // Select any signing secrets with the given ids.\n+      { \"signingSecret.kid\": { $in: secretKIDsToDeprecate } },\n+    ],\n+  };\n+  if (id) {\n+    options.arrayFilters!.push(\n+      // Select the secret resource under the object.\n+      { \"resource.id\": id }\n+    );\n+  }\n+\n+  // Deactivate the old keys.\n+  const result = await collection.findOneAndUpdate(filter, update, options);\n+  if (!result.value) {\n+    return null;\n+  }\n+\n+  return result.value;\n+}\n+\n+export async function rotateSigningSecret<T extends {}>(\n+  options: RotateSigningSecretOptions<T>\n+) {\n+  // Push the new secret into the resource and return it.\n+  let doc = await pushNewSigningSecret(options);\n+  if (!doc) {\n+    return null;\n+  }\n+\n+  // Deprecate any old secrets on the document.\n+  doc = await deprecateOldSigningSecrets(options, doc);\n+  if (!doc) {\n+    return null;\n+  }\n+\n+  return doc;\n+}"
    },
    {
      "sha": "457622949fb296f278984c2e761f49b862673ae3",
      "filename": "src/core/server/models/tenant/externalModerationPhase.ts",
      "status": "added",
      "additions": 215,
      "deletions": 0,
      "changes": 215,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/externalModerationPhase.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/externalModerationPhase.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/tenant/externalModerationPhase.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,215 @@\n+import { isEmpty } from \"lodash\";\n+import { Db } from \"mongodb\";\n+import uuid from \"uuid/v4\";\n+\n+import { dotize } from \"coral-common/utils/dotize\";\n+import { tenants as collection } from \"coral-server/services/mongodb/collections\";\n+\n+import { GQLCOMMENT_BODY_FORMAT } from \"coral-server/graph/schema/__generated__/types\";\n+\n+import {\n+  ExternalModerationPhase,\n+  generateSigningSecret,\n+  getExternalModerationPhase,\n+  rotateSigningSecret,\n+} from \"../settings\";\n+import { retrieveTenant } from \"./tenant\";\n+\n+export async function rotateTenantExternalModerationPhaseSigningSecret(\n+  mongo: Db,\n+  id: string,\n+  phaseID: string,\n+  inactiveAt: Date,\n+  now: Date\n+) {\n+  return rotateSigningSecret({\n+    collection: collection(mongo),\n+    filter: { id },\n+    path: \"integrations.external.phases\",\n+    id: phaseID,\n+    prefix: \"empsec\",\n+    inactiveAt,\n+    now,\n+  });\n+}\n+\n+export interface CreateTenantExternalModerationPhaseInput {\n+  name: string;\n+  url: string;\n+  format: GQLCOMMENT_BODY_FORMAT;\n+  timeout: number;\n+}\n+\n+export async function createTenantExternalModerationPhase(\n+  mongo: Db,\n+  id: string,\n+  input: CreateTenantExternalModerationPhaseInput,\n+  now: Date\n+) {\n+  // Create the new phase.\n+  const phase: ExternalModerationPhase = {\n+    ...input,\n+    id: uuid(),\n+    enabled: true,\n+    signingSecrets: [generateSigningSecret(\"empsec\", now)],\n+    createdAt: now,\n+  };\n+\n+  // Update the Tenant with this new phase.\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    { $push: { \"integrations.external.phases\": phase } },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+    }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return {\n+        phase: null,\n+        tenant: null,\n+      };\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return {\n+    phase,\n+    tenant: result.value,\n+  };\n+}\n+\n+export interface UpdateTenantExternalModerationPhaseInput {\n+  name?: string;\n+  enabled?: boolean;\n+  url?: string;\n+  format?: GQLCOMMENT_BODY_FORMAT;\n+  timeout?: number;\n+}\n+\n+export async function updateTenantExternalModerationPhase(\n+  mongo: Db,\n+  id: string,\n+  phaseID: string,\n+  update: UpdateTenantExternalModerationPhaseInput\n+) {\n+  const $set = dotize(\n+    { \"integrations.external.phases.$[phase]\": update },\n+    { embedArrays: true }\n+  );\n+\n+  // Check to see if there is any updates that will be made.\n+  if (isEmpty($set)) {\n+    // No updates need to be made, abort here and just return the tenant.\n+    return retrieveTenant(mongo, id);\n+  }\n+\n+  // Perform the actual update operation.\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    { $set },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+      arrayFilters: [{ \"phase.id\": phaseID }],\n+    }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return null;\n+    }\n+\n+    if (!tenant.integrations.external) {\n+      throw new Error(`phase not found with id: ${phaseID} on tenant: ${id}`);\n+    }\n+\n+    const endpoint = getExternalModerationPhase(\n+      tenant.integrations.external,\n+      phaseID\n+    );\n+    if (!endpoint) {\n+      throw new Error(`phase not found with id: ${phaseID} on tenant: ${id}`);\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return result.value;\n+}\n+\n+export async function deleteTenantExternalModerationPhase(\n+  mongo: Db,\n+  id: string,\n+  phaseID: string\n+) {\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    {\n+      $pull: {\n+        \"integrations.external.phases\": { id: phaseID },\n+      },\n+    },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+    }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return null;\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return result.value;\n+}\n+\n+export async function deleteTenantExternalModerationPhaseSigningSecrets(\n+  mongo: Db,\n+  id: string,\n+  phaseID: string,\n+  kids: string[]\n+) {\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    {\n+      $pull: {\n+        \"integrations.external.phases.$[phase].signingSecrets\": {\n+          kid: { $in: kids },\n+        },\n+      },\n+    },\n+    { returnOriginal: false, arrayFilters: [{ \"phase.id\": phaseID }] }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return null;\n+    }\n+\n+    if (!tenant.integrations.external) {\n+      throw new Error(`phase not found with id: ${phaseID} on tenant: ${id}`);\n+    }\n+\n+    const endpoint = getExternalModerationPhase(\n+      tenant.integrations.external,\n+      phaseID\n+    );\n+    if (!endpoint) {\n+      throw new Error(`phase not found with id: ${phaseID} on tenant: ${id}`);\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return result.value;\n+}"
    },
    {
      "sha": "5a1f311882323989d0a4449772dc912fbf751cfe",
      "filename": "src/core/server/models/tenant/helpers.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 19,
      "changes": 19,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/helpers.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/helpers.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/tenant/helpers.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,5 +1,4 @@\n import { FluentBundle } from \"@fluent/bundle/compat\";\n-import crypto from \"crypto\";\n \n import { translate } from \"coral-server/services/i18n\";\n \n@@ -10,7 +9,6 @@ import {\n   GQLStaffConfiguration,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n-import { Secret } from \"../settings\";\n import { Tenant } from \"./tenant\";\n \n export const getDefaultReactionConfiguration = (\n@@ -34,23 +32,6 @@ export const getDefaultStaffConfiguration = (\n   label: translate(bundle, \"Staff\", \"staff-label\"),\n });\n \n-export function generateRandomString(size: number, drift = 5) {\n-  return crypto\n-    .randomBytes(size + Math.floor(Math.random() * drift))\n-    .toString(\"hex\");\n-}\n-\n-export function generateSecret(prefix: string, createdAt: Date): Secret {\n-  // Generate a new key. We generate a key of minimum length 32 up to 37 bytes,\n-  // as 16 was the minimum length recommended.\n-  //\n-  // Reference: https://security.stackexchange.com/a/96176\n-  const secret = prefix + \"_\" + generateRandomString(32, 5);\n-  const kid = generateRandomString(8, 3);\n-\n-  return { kid, secret, createdAt };\n-}\n-\n /**\n  * hasFeatureFlag will check to see if the Tenant has a particular feature flag\n  * enabled."
    },
    {
      "sha": "aa927420164cb048291f7c64ac6645c42a1698ec",
      "filename": "src/core/server/models/tenant/index.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/tenant/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,2 +1,5 @@\n export * from \"./tenant\";\n export * from \"./helpers\";\n+export * from \"./externalModerationPhase\";\n+export * from \"./webhookEndpoint\";\n+export * from \"./sso\";"
    },
    {
      "sha": "9f4d52e331cd8efd872270ac8408a2e902bb4fec",
      "filename": "src/core/server/models/tenant/sso.ts",
      "status": "added",
      "additions": 71,
      "deletions": 0,
      "changes": 71,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/sso.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/sso.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/tenant/sso.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,71 @@\n+import { Db } from \"mongodb\";\n+\n+import { rotateSigningSecret } from \"coral-server/models/settings\";\n+import { tenants as collection } from \"coral-server/services/mongodb/collections\";\n+\n+export async function rotateTenantSSOSigningSecret(\n+  mongo: Db,\n+  id: string,\n+  inactiveAt: Date,\n+  now: Date\n+) {\n+  return rotateSigningSecret({\n+    collection: collection(mongo),\n+    filter: { id },\n+    path: \"auth.integrations.sso\",\n+    prefix: \"ssosec\",\n+    inactiveAt,\n+    now,\n+  });\n+}\n+\n+export async function deactivateTenantSSOSigningSecret(\n+  mongo: Db,\n+  id: string,\n+  kid: string,\n+  inactiveAt: Date,\n+  now: Date\n+) {\n+  // Update the tenant.\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    {\n+      $set: {\n+        \"auth.integrations.sso.keys.$[keys].inactiveAt\": inactiveAt,\n+        \"auth.integrations.sso.keys.$[keys].rotatedAt\": now,\n+      },\n+    },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+      // Add an ArrayFilter to only update one of the keys.\n+      arrayFilters: [{ \"keys.kid\": kid }],\n+    }\n+  );\n+\n+  return result.value || null;\n+}\n+\n+export async function deleteTenantSSOSigningSecret(\n+  mongo: Db,\n+  id: string,\n+  kid: string\n+) {\n+  // Update the tenant.\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    {\n+      $pull: {\n+        \"auth.integrations.sso.keys\": { kid },\n+      },\n+    },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+    }\n+  );\n+\n+  return result.value || null;\n+}"
    },
    {
      "sha": "07d3b61b4ca8077ccf83948feb6fb797510dd4a1",
      "filename": "src/core/server/models/tenant/tenant.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 386,
      "changes": 393,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/tenant.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/tenant.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/tenant/tenant.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,4 +1,3 @@\n-import { Redis } from \"ioredis\";\n import { isEmpty } from \"lodash\";\n import { DateTime } from \"luxon\";\n import { Db } from \"mongodb\";\n@@ -10,7 +9,11 @@ import TIME from \"coral-common/time\";\n import { DeepPartial, Sub } from \"coral-common/types\";\n import { isBeforeDate } from \"coral-common/utils\";\n import { dotize } from \"coral-common/utils/dotize\";\n-import logger from \"coral-server/logger\";\n+import {\n+  generateSigningSecret,\n+  Settings,\n+  SigningSecretResource,\n+} from \"coral-server/models/settings\";\n import { I18n } from \"coral-server/services/i18n\";\n import { tenants as collection } from \"coral-server/services/mongodb/collections\";\n \n@@ -22,12 +25,9 @@ import {\n   GQLWEBHOOK_EVENT_NAME,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n-import { Secret, Settings } from \"../settings\";\n import {\n-  generateSecret,\n   getDefaultReactionConfiguration,\n   getDefaultStaffConfiguration,\n-  getWebhookEndpoint,\n } from \"./helpers\";\n \n /**\n@@ -42,7 +42,7 @@ export interface TenantResource {\n   readonly tenantID: string;\n }\n \n-export interface Endpoint {\n+export interface Endpoint extends SigningSecretResource {\n   /**\n    * id is the unique identifier for this specific endpoint.\n    */\n@@ -58,11 +58,6 @@ export interface Endpoint {\n    */\n   url: string;\n \n-  /**\n-   * signingSecret is the secret used to sign the events sent out.\n-   */\n-  signingSecrets: Secret[];\n-\n   /**\n    * all when true indicates that all events should trigger.\n    */\n@@ -198,7 +193,7 @@ export async function createTenant(\n             stream: true,\n           },\n           // TODO: [CORL-754] (wyattjoh) remove this in favor of generating this when needed\n-          keys: [generateSecret(\"ssosec\", now)],\n+          signingSecrets: [generateSigningSecret(\"ssosec\", now)],\n         },\n         oidc: {\n           enabled: false,\n@@ -360,59 +355,6 @@ export async function updateTenant(\n   return result.value || null;\n }\n \n-/**\n- * regenerateTenantSSOKey will regenerate the SSO key used for Single Sing-On\n- * for the specified Tenant. All existing user sessions signed with the old\n- * secret will be invalidated.\n- */\n-export async function createTenantSSOKey(mongo: Db, id: string, now: Date) {\n-  // Construct the new key.\n-  const key = generateSecret(\"ssosec\", now);\n-\n-  // Update the Tenant with this new key.\n-  const result = await collection(mongo).findOneAndUpdate(\n-    { id },\n-    {\n-      $push: {\n-        \"auth.integrations.sso.keys\": key,\n-      },\n-    },\n-    // False to return the updated document instead of the original\n-    // document.\n-    { returnOriginal: false }\n-  );\n-\n-  return result.value || null;\n-}\n-\n-export async function deactivateTenantSSOKey(\n-  mongo: Db,\n-  id: string,\n-  kid: string,\n-  inactiveAt: Date,\n-  now: Date\n-) {\n-  // Update the tenant.\n-  const result = await collection(mongo).findOneAndUpdate(\n-    { id },\n-    {\n-      $set: {\n-        \"auth.integrations.sso.keys.$[keys].inactiveAt\": inactiveAt,\n-        \"auth.integrations.sso.keys.$[keys].rotatedAt\": now,\n-      },\n-    },\n-    {\n-      // False to return the updated document instead of the original\n-      // document.\n-      returnOriginal: false,\n-      // Add an ArrayFilter to only update one of the keys.\n-      arrayFilters: [{ \"keys.kid\": kid }],\n-    }\n-  );\n-\n-  return result.value || null;\n-}\n-\n export async function enableTenantFeatureFlag(\n   mongo: Db,\n   id: string,\n@@ -460,24 +402,6 @@ export async function disableTenantFeatureFlag(\n \n   return result.value || null;\n }\n-export async function deleteTenantSSOKey(mongo: Db, id: string, kid: string) {\n-  // Update the tenant.\n-  const result = await collection(mongo).findOneAndUpdate(\n-    { id },\n-    {\n-      $pull: {\n-        \"auth.integrations.sso.keys\": { kid },\n-      },\n-    },\n-    {\n-      // False to return the updated document instead of the original\n-      // document.\n-      returnOriginal: false,\n-    }\n-  );\n-\n-  return result.value || null;\n-}\n \n export interface CreateAnnouncementInput {\n   content: string;\n@@ -542,306 +466,3 @@ export function retrieveAnnouncementIfEnabled(\n   }\n   return null;\n }\n-\n-export async function rollTenantWebhookEndpointSecret(\n-  mongo: Db,\n-  id: string,\n-  endpointID: string,\n-  inactiveAt: Date,\n-  now: Date\n-) {\n-  // Create the new secret.\n-  const secret = generateSecret(\"whsec\", now);\n-\n-  // Update the Tenant with this new secret.\n-  let result = await collection(mongo).findOneAndUpdate(\n-    { id },\n-    {\n-      $push: { \"webhooks.endpoints.$[endpoint].signingSecrets\": secret },\n-    },\n-    {\n-      // False to return the updated document instead of the original\n-      // document.\n-      returnOriginal: false,\n-      arrayFilters: [\n-        // Select the endpoint we're updating.\n-        { \"endpoint.id\": endpointID },\n-      ],\n-    }\n-  );\n-  if (!result.value) {\n-    return null;\n-  }\n-\n-  // Grab the endpoint we just modified.\n-  const endpoint = getWebhookEndpoint(result.value, endpointID);\n-  if (!endpoint) {\n-    return null;\n-  }\n-\n-  // Get the secrets we need to deactivate...\n-  const secretKIDsToDeprecate = endpoint.signingSecrets\n-    // By excluding the last one (the one we just pushed)...\n-    .splice(0, endpoint.signingSecrets.length - 1)\n-    // And only finding keys that have not been rotated yet.\n-    .filter((s) => !s.rotatedAt)\n-    // And get their kid's.\n-    .map((s) => s.kid);\n-  if (secretKIDsToDeprecate.length > 0) {\n-    logger.trace(\n-      { kids: secretKIDsToDeprecate },\n-      \"deprecating old signingSecrets\"\n-    );\n-\n-    // Deactivate the old keys.\n-    result = await collection(mongo).findOneAndUpdate(\n-      { id },\n-      {\n-        $set: {\n-          \"webhooks.endpoints.$[endpoint].signingSecrets.$[signingSecret].inactiveAt\": inactiveAt,\n-          \"webhooks.endpoints.$[endpoint].signingSecrets.$[signingSecret].rotatedAt\": now,\n-        },\n-      },\n-      {\n-        arrayFilters: [\n-          // Select the endpoint we're updating.\n-          { \"endpoint.id\": endpointID },\n-          // Select any signing secrets with the given ids.\n-          { \"signingSecret.kid\": { $in: secretKIDsToDeprecate } },\n-        ],\n-      }\n-    );\n-  }\n-\n-  return result.value;\n-}\n-\n-export interface CreateTenantWebhookEndpointInput {\n-  url: string;\n-  all: boolean;\n-  events: GQLWEBHOOK_EVENT_NAME[];\n-}\n-\n-export async function createTenantWebhookEndpoint(\n-  mongo: Db,\n-  id: string,\n-  input: CreateTenantWebhookEndpointInput,\n-  now: Date\n-) {\n-  // Create the new endpoint.\n-  const endpoint: Endpoint = {\n-    ...input,\n-    id: uuid(),\n-    enabled: true,\n-    signingSecrets: [generateSecret(\"whsec\", now)],\n-    createdAt: now,\n-  };\n-\n-  // Update the Tenant with this new endpoint.\n-  const result = await collection(mongo).findOneAndUpdate(\n-    { id },\n-    { $push: { \"webhooks.endpoints\": endpoint } },\n-    {\n-      // False to return the updated document instead of the original\n-      // document.\n-      returnOriginal: false,\n-    }\n-  );\n-  if (!result.value) {\n-    const tenant = await retrieveTenant(mongo, id);\n-    if (!tenant) {\n-      return {\n-        endpoint: null,\n-        tenant: null,\n-      };\n-    }\n-\n-    throw new Error(\"update failed for an unexpected reason\");\n-  }\n-\n-  return {\n-    endpoint,\n-    tenant: result.value,\n-  };\n-}\n-\n-export interface UpdateTenantWebhookEndpointInput {\n-  enabled?: boolean;\n-  url?: string;\n-  all?: boolean;\n-  events?: GQLWEBHOOK_EVENT_NAME[];\n-}\n-\n-export async function updateTenantWebhookEndpoint(\n-  mongo: Db,\n-  id: string,\n-  endpointID: string,\n-  update: UpdateTenantWebhookEndpointInput\n-) {\n-  const $set = dotize(\n-    { \"webhooks.endpoints.$[endpoint]\": update },\n-    { embedArrays: true }\n-  );\n-\n-  // Check to see if there is any updates that will be made.\n-  if (isEmpty($set)) {\n-    // No updates need to be made, abort here and just return the tenant.\n-    return retrieveTenant(mongo, id);\n-  }\n-\n-  // Perform the actual update operation.\n-  const result = await collection(mongo).findOneAndUpdate(\n-    { id },\n-    { $set },\n-    {\n-      // False to return the updated document instead of the original\n-      // document.\n-      returnOriginal: false,\n-      arrayFilters: [{ \"endpoint.id\": endpointID }],\n-    }\n-  );\n-  if (!result.value) {\n-    const tenant = await retrieveTenant(mongo, id);\n-    if (!tenant) {\n-      return null;\n-    }\n-\n-    const endpoint = getWebhookEndpoint(tenant, endpointID);\n-    if (!endpoint) {\n-      throw new Error(\n-        `endpoint not found with id: ${endpointID} on tenant: ${id}`\n-      );\n-    }\n-\n-    throw new Error(\"update failed for an unexpected reason\");\n-  }\n-\n-  return result.value;\n-}\n-\n-export async function deleteEndpointSecrets(\n-  mongo: Db,\n-  id: string,\n-  endpointID: string,\n-  kids: string[]\n-) {\n-  const result = await collection(mongo).findOneAndUpdate(\n-    { id },\n-    {\n-      $pull: {\n-        \"webhooks.endpoints.$[endpoint].signingSecrets\": { kid: { $in: kids } },\n-      },\n-    },\n-    { returnOriginal: false, arrayFilters: [{ \"endpoint.id\": endpointID }] }\n-  );\n-  if (!result.value) {\n-    const tenant = await retrieveTenant(mongo, id);\n-    if (!tenant) {\n-      return null;\n-    }\n-\n-    const endpoint = getWebhookEndpoint(tenant, endpointID);\n-    if (!endpoint) {\n-      throw new Error(\n-        `endpoint not found with id: ${endpointID} on tenant: ${id}`\n-      );\n-    }\n-\n-    throw new Error(\"update failed for an unexpected reason\");\n-  }\n-\n-  return result.value;\n-}\n-\n-export async function deleteTenantWebhookEndpoint(\n-  mongo: Db,\n-  id: string,\n-  endpointID: string\n-) {\n-  const result = await collection(mongo).findOneAndUpdate(\n-    { id },\n-    {\n-      $pull: {\n-        \"webhooks.endpoints\": { id: endpointID },\n-      },\n-    },\n-    {\n-      // False to return the updated document instead of the original\n-      // document.\n-      returnOriginal: false,\n-    }\n-  );\n-  if (!result.value) {\n-    const tenant = await retrieveTenant(mongo, id);\n-    if (!tenant) {\n-      return null;\n-    }\n-\n-    throw new Error(\"update failed for an unexpected reason\");\n-  }\n-\n-  return result.value;\n-}\n-\n-function lastUsedAtTenantSSOKey(id: string): string {\n-  return `${id}:lastUsedSSOKey`;\n-}\n-\n-/**\n- * updateLastUsedAtTenantSSOKey will update the time stamp that the SSO key was\n- * last used at.\n- *\n- * @param redis the Redis connection to use to update the timestamp on\n- * @param id the ID of the Tenant\n- * @param kid the kid of the token that was used\n- * @param when the date that the token was last used at\n- */\n-export async function updateLastUsedAtTenantSSOKey(\n-  redis: Redis,\n-  id: string,\n-  kid: string,\n-  when: Date\n-) {\n-  await redis.hset(lastUsedAtTenantSSOKey(id), kid, when.toISOString());\n-}\n-\n-/**\n- *\n- * @param redis the Redis connection to use to remove the last used on.\n- * @param id the ID of the Tenant\n- * @param kid the kid of the token that is being deleted\n- */\n-export async function deleteLastUsedAtTenantSSOKey(\n-  redis: Redis,\n-  id: string,\n-  kid: string\n-) {\n-  await redis.hdel(lastUsedAtTenantSSOKey(id), kid);\n-}\n-\n-/**\n- * retrieveLastUsedAtTenantSSOKeys will get the dates that the requested sso\n- * keys were last used on.\n- *\n- * @param redis the Redis connection to use to update the timestamp on\n- * @param id the ID of the Tenant\n- * @param kids the kids of the tokens that we want to know when they were last used\n- */\n-export async function retrieveLastUsedAtTenantSSOKeys(\n-  redis: Redis,\n-  id: string,\n-  kids: string[]\n-) {\n-  const results: Array<string | null> = await redis.hmget(\n-    lastUsedAtTenantSSOKey(id),\n-    ...kids\n-  );\n-\n-  return results.map((lastUsedAt) => {\n-    if (!lastUsedAt) {\n-      return null;\n-    }\n-\n-    return new Date(lastUsedAt);\n-  });\n-}"
    },
    {
      "sha": "127260f1e22a82d3cec11ba16ee396d242cf21b0",
      "filename": "src/core/server/models/tenant/webhookEndpoint.ts",
      "status": "added",
      "additions": 265,
      "deletions": 0,
      "changes": 265,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/webhookEndpoint.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/models/tenant/webhookEndpoint.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/tenant/webhookEndpoint.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,265 @@\n+import { Redis } from \"ioredis\";\n+import { isEmpty } from \"lodash\";\n+import { Db } from \"mongodb\";\n+import uuid from \"uuid/v4\";\n+\n+import { dotize } from \"coral-common/utils/dotize\";\n+import { tenants as collection } from \"coral-server/services/mongodb/collections\";\n+\n+import { GQLWEBHOOK_EVENT_NAME } from \"coral-server/graph/schema/__generated__/types\";\n+\n+import { generateSigningSecret, rotateSigningSecret } from \"../settings\";\n+import { getWebhookEndpoint } from \"./helpers\";\n+import { Endpoint, retrieveTenant } from \"./tenant\";\n+\n+export async function rotateTenantWebhookEndpointSigningSecret(\n+  mongo: Db,\n+  id: string,\n+  endpointID: string,\n+  inactiveAt: Date,\n+  now: Date\n+) {\n+  return rotateSigningSecret({\n+    collection: collection(mongo),\n+    filter: { id },\n+    path: \"webhooks.endpoints\",\n+    prefix: \"whsec\",\n+    id: endpointID,\n+    inactiveAt,\n+    now,\n+  });\n+}\n+\n+export interface CreateTenantWebhookEndpointInput {\n+  url: string;\n+  all: boolean;\n+  events: GQLWEBHOOK_EVENT_NAME[];\n+}\n+\n+export async function createTenantWebhookEndpoint(\n+  mongo: Db,\n+  id: string,\n+  input: CreateTenantWebhookEndpointInput,\n+  now: Date\n+) {\n+  // Create the new endpoint.\n+  const endpoint: Endpoint = {\n+    ...input,\n+    id: uuid(),\n+    enabled: true,\n+    signingSecrets: [generateSigningSecret(\"whsec\", now)],\n+    createdAt: now,\n+  };\n+\n+  // Update the Tenant with this new endpoint.\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    { $push: { \"webhooks.endpoints\": endpoint } },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+    }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return {\n+        endpoint: null,\n+        tenant: null,\n+      };\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return {\n+    endpoint,\n+    tenant: result.value,\n+  };\n+}\n+\n+export interface UpdateTenantWebhookEndpointInput {\n+  enabled?: boolean;\n+  url?: string;\n+  all?: boolean;\n+  events?: GQLWEBHOOK_EVENT_NAME[];\n+}\n+\n+export async function updateTenantWebhookEndpoint(\n+  mongo: Db,\n+  id: string,\n+  endpointID: string,\n+  update: UpdateTenantWebhookEndpointInput\n+) {\n+  const $set = dotize(\n+    { \"webhooks.endpoints.$[endpoint]\": update },\n+    { embedArrays: true }\n+  );\n+\n+  // Check to see if there is any updates that will be made.\n+  if (isEmpty($set)) {\n+    // No updates need to be made, abort here and just return the tenant.\n+    return retrieveTenant(mongo, id);\n+  }\n+\n+  // Perform the actual update operation.\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    { $set },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+      arrayFilters: [{ \"endpoint.id\": endpointID }],\n+    }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return null;\n+    }\n+\n+    const endpoint = getWebhookEndpoint(tenant, endpointID);\n+    if (!endpoint) {\n+      throw new Error(\n+        `endpoint not found with id: ${endpointID} on tenant: ${id}`\n+      );\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return result.value;\n+}\n+\n+export async function deleteTenantWebhookEndpointSigningSecrets(\n+  mongo: Db,\n+  id: string,\n+  endpointID: string,\n+  kids: string[]\n+) {\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    {\n+      $pull: {\n+        \"webhooks.endpoints.$[endpoint].signingSecrets\": { kid: { $in: kids } },\n+      },\n+    },\n+    { returnOriginal: false, arrayFilters: [{ \"endpoint.id\": endpointID }] }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return null;\n+    }\n+\n+    const endpoint = getWebhookEndpoint(tenant, endpointID);\n+    if (!endpoint) {\n+      throw new Error(\n+        `endpoint not found with id: ${endpointID} on tenant: ${id}`\n+      );\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return result.value;\n+}\n+\n+export async function deleteTenantWebhookEndpoint(\n+  mongo: Db,\n+  id: string,\n+  endpointID: string\n+) {\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    {\n+      $pull: {\n+        \"webhooks.endpoints\": { id: endpointID },\n+      },\n+    },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+    }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return null;\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return result.value;\n+}\n+\n+function lastUsedAtTenantSSOSigningSecret(id: string): string {\n+  return `${id}:lastUsedSSOSigningSecret`;\n+}\n+\n+/**\n+ * updateLastUsedAtTenantSSOSigningSecret will update the time stamp that the\n+ * SSO key was last used at.\n+ *\n+ * @param redis the Redis connection to use to update the timestamp on\n+ * @param id the ID of the Tenant\n+ * @param kid the kid of the token that was used\n+ * @param when the date that the token was last used at\n+ */\n+export async function updateLastUsedAtTenantSSOSigningSecret(\n+  redis: Redis,\n+  id: string,\n+  kid: string,\n+  when: Date\n+) {\n+  await redis.hset(\n+    lastUsedAtTenantSSOSigningSecret(id),\n+    kid,\n+    when.toISOString()\n+  );\n+}\n+\n+/**\n+ *\n+ * @param redis the Redis connection to use to remove the last used on.\n+ * @param id the ID of the Tenant\n+ * @param kid the kid of the token that is being deleted\n+ */\n+export async function deleteLastUsedAtTenantSSOSigningSecret(\n+  redis: Redis,\n+  id: string,\n+  kid: string\n+) {\n+  await redis.hdel(lastUsedAtTenantSSOSigningSecret(id), kid);\n+}\n+\n+/**\n+ * retrieveLastUsedAtTenantSSOSigningSecrets will get the dates that the\n+ * requested sso keys were last used on.\n+ *\n+ * @param redis the Redis connection to use to update the timestamp on\n+ * @param id the ID of the Tenant\n+ * @param kids the kids of the tokens that we want to know when they were last used\n+ */\n+export async function retrieveLastUsedAtTenantSSOSigningSecrets(\n+  redis: Redis,\n+  id: string,\n+  kids: string[]\n+) {\n+  const results: Array<string | null> = await redis.hmget(\n+    lastUsedAtTenantSSOSigningSecret(id),\n+    ...kids\n+  );\n+\n+  return results.map((lastUsedAt) => {\n+    if (!lastUsedAt) {\n+      return null;\n+    }\n+\n+    return new Date(lastUsedAt);\n+  });\n+}"
    },
    {
      "sha": "1d25966302d0b5a8ba30d5dbe1b5847ec4081acd",
      "filename": "src/core/server/queue/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -5,7 +5,7 @@ import { Config } from \"coral-server/config\";\n import { I18n } from \"coral-server/services/i18n\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n import { AugmentedRedis, createRedisClient } from \"coral-server/services/redis\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n import { createMailerTask, MailerQueue } from \"./tasks/mailer\";\n import { createNotifierTask, NotifierQueue } from \"./tasks/notifier\";"
    },
    {
      "sha": "67803f8757974e0369ffde5e5a846179b7f65711",
      "filename": "src/core/server/queue/tasks/mailer/content.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/mailer/content.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/mailer/content.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/mailer/content.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -3,8 +3,10 @@ import nunjucks, { Environment, ILoader } from \"nunjucks\";\n import path from \"path\";\n \n import { Config } from \"coral-server/config\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n-import { TenantCacheAdapter } from \"coral-server/services/tenant/cache/adapter\";\n+import {\n+  TenantCache,\n+  TenantCacheAdapter,\n+} from \"coral-server/services/tenant/cache\";\n \n import { Tenant } from \"coral-server/models/tenant\";\n import { EmailTemplate } from \"./templates\";"
    },
    {
      "sha": "069602e438b3ea5b8fe46b2c5b4f185d30fd138b",
      "filename": "src/core/server/queue/tasks/mailer/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/mailer/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/mailer/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/mailer/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -4,7 +4,7 @@ import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import Task from \"coral-server/queue/Task\";\n import MailerContent from \"coral-server/queue/tasks/mailer/content\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n import {\n   createJobProcessor,"
    },
    {
      "sha": "bb822cf4fb647f3346191b50202889430b39c984",
      "filename": "src/core/server/queue/tasks/mailer/processor.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/mailer/processor.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/mailer/processor.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/mailer/processor.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -12,15 +12,17 @@ import { Db } from \"mongodb\";\n import { createTransport } from \"nodemailer\";\n import { Options } from \"nodemailer/lib/smtp-connection\";\n \n-import { LanguageCode } from \"coral-common/helpers/i18n/locales\";\n+import { LanguageCode } from \"coral-common/helpers\";\n import { Config } from \"coral-server/config\";\n-import { InternalError } from \"coral-server/errors\";\n+import { WrappedInternalError } from \"coral-server/errors\";\n import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import { Tenant } from \"coral-server/models/tenant\";\n import { I18n, translate } from \"coral-server/services/i18n\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n-import { TenantCacheAdapter } from \"coral-server/services/tenant/cache/adapter\";\n+import {\n+  TenantCache,\n+  TenantCacheAdapter,\n+} from \"coral-server/services/tenant/cache\";\n \n export const JOB_NAME = \"mailer\";\n \n@@ -254,7 +256,7 @@ export const createJobProcessor = (options: MailProcessorOptions) => {\n         data\n       );\n     } catch (e) {\n-      throw new InternalError(e, \"could not translate the message\");\n+      throw new WrappedInternalError(e, \"could not translate the message\");\n     }\n \n     log.trace(\n@@ -284,7 +286,7 @@ export const createJobProcessor = (options: MailProcessorOptions) => {\n         // Create the transport based on the smtp uri.\n         transport = createTransport(opts);\n       } catch (e) {\n-        throw new InternalError(e, \"could not create email transport\");\n+        throw new WrappedInternalError(e, \"could not create email transport\");\n       }\n \n       // Set the transport back into the cache.\n@@ -303,7 +305,7 @@ export const createJobProcessor = (options: MailProcessorOptions) => {\n       // Send the mail message.\n       await transport.sendMail(message);\n     } catch (e) {\n-      throw new InternalError(e, \"could not send email\");\n+      throw new WrappedInternalError(e, \"could not send email\");\n     }\n \n     log.debug({ responseTime: messageSendTimer() }, \"sent the email\");"
    },
    {
      "sha": "f6308a9e391bdf98728ca133f5ef7212e3d66f9f",
      "filename": "src/core/server/queue/tasks/notifier/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/notifier/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/notifier/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/notifier/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -10,7 +10,7 @@ import {\n   categories,\n   NotificationCategory,\n } from \"coral-server/services/notifications/categories\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n import { createJobProcessor, JOB_NAME, NotifierData } from \"./processor\";\n "
    },
    {
      "sha": "43b6412189969df9d6deeca01e99d85609820bb0",
      "filename": "src/core/server/queue/tasks/notifier/processor.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/notifier/processor.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/notifier/processor.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/notifier/processor.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -10,7 +10,7 @@ import { JWTSigningConfig } from \"coral-server/services/jwt\";\n import { NotificationCategory } from \"coral-server/services/notifications/categories\";\n import NotificationContext from \"coral-server/services/notifications/context\";\n import { Notification } from \"coral-server/services/notifications/notification\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n import {\n   filterSuperseded,"
    },
    {
      "sha": "98474cbbe38c1ecfc35c9e0fa7cacbd353d404f8",
      "filename": "src/core/server/queue/tasks/rejector.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/rejector.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/rejector.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/rejector.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -11,7 +11,7 @@ import {\n import { Connection } from \"coral-server/models/helpers\";\n import Task from \"coral-server/queue/Task\";\n import { AugmentedRedis } from \"coral-server/services/redis\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n import { rejectComment } from \"coral-server/stacks\";\n \n import { GQLCOMMENT_SORT } from \"coral-server/graph/schema/__generated__/types\";"
    },
    {
      "sha": "3f99d285e0a6af884abef8008ed6dc40c8267316",
      "filename": "src/core/server/queue/tasks/webhook/processor.ts",
      "status": "modified",
      "additions": 28,
      "deletions": 76,
      "changes": 104,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/webhook/processor.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/queue/tasks/webhook/processor.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/webhook/processor.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,24 +1,19 @@\n-import crypto from \"crypto\";\n import { Redis } from \"ioredis\";\n import { Db } from \"mongodb\";\n \n import { Config } from \"coral-server/config\";\n import { CoralEventPayload } from \"coral-server/events/event\";\n import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n+import { filterExpiredSigningSecrets } from \"coral-server/models/settings\";\n import {\n-  filterActiveSecrets,\n-  filterExpiredSecrets,\n-} from \"coral-server/models/settings\";\n-import {\n-  deleteEndpointSecrets,\n-  Endpoint,\n+  deleteTenantWebhookEndpointSigningSecrets,\n   getWebhookEndpoint,\n } from \"coral-server/models/tenant\";\n import { JobProcessor } from \"coral-server/queue/Task\";\n-import { createFetch, FetchOptions } from \"coral-server/services/fetch\";\n+import { createFetch, generateFetchOptions } from \"coral-server/services/fetch\";\n import { disableWebhookEndpoint } from \"coral-server/services/tenant\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n export const JOB_NAME = \"webhook\";\n \n@@ -53,36 +48,7 @@ export interface WebhookDelivery {\n   createdAt: Date;\n }\n \n-/**\n- * generateSignature will generate a signature used to assist clients to\n- * validate that the request came from Coral.\n- *\n- * @param secret the secret used to sign the body with\n- * @param body the body to use when signing\n- */\n-export function generateSignature(secret: string, body: string) {\n-  return crypto\n-    .createHmac(\"sha256\", secret)\n-    .update(body)\n-    .digest()\n-    .toString(\"hex\");\n-}\n-\n-export function generateSignatures(\n-  endpoint: Pick<Endpoint, \"signingSecrets\">,\n-  body: string,\n-  now: Date\n-) {\n-  // For each of the signatures, we only want to sign the body with secrets that\n-  // are still active.\n-  return endpoint.signingSecrets\n-    .filter(filterActiveSecrets(now))\n-    .map(({ secret }) => generateSignature(secret, body))\n-    .map((signature) => `sha256=${signature}`)\n-    .join(\",\");\n-}\n-\n-type CoralWebhookEventPayload = CoralEventPayload & {\n+interface CoralWebhookEventPayload extends CoralEventPayload {\n   /**\n    * tenantID is the ID of the Tenant that this event originated at.\n    */\n@@ -92,28 +58,6 @@ type CoralWebhookEventPayload = CoralEventPayload & {\n    * tenantDomain is the domain that is associated with this Tenant that this event originated at.\n    */\n   readonly tenantDomain: string;\n-};\n-\n-export function generateFetchOptions(\n-  endpoint: Pick<Endpoint, \"signingSecrets\">,\n-  data: CoralWebhookEventPayload,\n-  now: Date\n-): FetchOptions {\n-  // Serialize the body and signature to include in the request.\n-  const body = JSON.stringify(data, null, 2);\n-  const signature = generateSignatures(endpoint, body, now);\n-\n-  const headers: Record<string, any> = {\n-    \"Content-Type\": \"application/json\",\n-    \"X-Coral-Event\": data.type,\n-    \"X-Coral-Signature\": signature,\n-  };\n-\n-  return {\n-    method: \"POST\",\n-    headers,\n-    body,\n-  };\n }\n \n export function createJobProcessor({\n@@ -162,12 +106,21 @@ export function createJobProcessor({\n     // Get the current date.\n     const now = new Date();\n \n+    // Generate the payload.\n+    const payload: CoralWebhookEventPayload = {\n+      ...event,\n+      tenantID,\n+      tenantDomain: tenant.domain,\n+    };\n+\n     // Get the fetch options.\n-    const options = generateFetchOptions(\n-      endpoint,\n-      { ...event, tenantID, tenantDomain: tenant.domain },\n-      now\n-    );\n+    const options = generateFetchOptions(endpoint.signingSecrets, payload, now);\n+\n+    // Add the X-Coral-Event header.\n+    options.headers = {\n+      ...options.headers,\n+      \"X-Coral-Event\": event.type,\n+    };\n \n     // Send the request.\n     const timer = createTimer();\n@@ -240,35 +193,34 @@ export function createJobProcessor({\n           tenant,\n           endpointID\n         );\n-      } else {\n-        // TODO: (wyattjoh) maybe schedule a retry?\n       }\n+      // TODO: (wyattjoh) maybe schedule a retry?\n     }\n \n     // Remove the expired secrets in the next tick so that it does not affect\n     // the sending performance of this job, and errors do not impact the\n     // sending.\n-    const expiredSigningSecrets = endpoint.signingSecrets.filter(\n-      filterExpiredSecrets(now)\n-    );\n-    if (expiredSigningSecrets.length > 0) {\n+    const expiredSigningSecretKIDs = endpoint.signingSecrets\n+      .filter(filterExpiredSigningSecrets(now))\n+      .map((s) => s.kid);\n+    if (expiredSigningSecretKIDs.length > 0) {\n       process.nextTick(() => {\n-        deleteEndpointSecrets(\n+        deleteTenantWebhookEndpointSigningSecrets(\n           mongo,\n           tenantID,\n           endpoint.id,\n-          expiredSigningSecrets.map((s) => s.kid)\n+          expiredSigningSecretKIDs\n         )\n           .then(() => {\n             log.info(\n-              { secrets: expiredSigningSecrets.length },\n+              { endpointID: endpoint.id, kids: expiredSigningSecretKIDs },\n               \"removed expired secrets from endpoint\"\n             );\n           })\n           .catch((err) => {\n             log.error(\n               { err },\n-              \"an error occurred when trying to remove expired secrets\"\n+              \"an error occurred when trying to remove expired endpoint secrets\"\n             );\n           });\n       });"
    },
    {
      "sha": "98871af87fd8ae9bcdd273fc7590f96f62f82c13",
      "filename": "src/core/server/services/comments/pipeline/helpers.ts",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/helpers.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/helpers.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/helpers.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,43 @@\n+import { PhaseResult } from \"./pipeline\";\n+\n+export function mergePhaseResult(\n+  result: Partial<PhaseResult>,\n+  final: Partial<PhaseResult>\n+) {\n+  const { actions = [], tags = [], metadata = {} } = final;\n+\n+  // If this result contained actions, then we should push it into the\n+  // other actions.\n+  if (result.actions) {\n+    final.actions = [...actions, ...result.actions];\n+  }\n+\n+  // If this result contained metadata, then we should merge it into the\n+  // other metadata.\n+  if (result.metadata) {\n+    final.metadata = { ...metadata, ...result.metadata };\n+  }\n+\n+  // If the result modified the comment body, we should replace it.\n+  if (result.body) {\n+    final.body = result.body;\n+  }\n+\n+  // If the result added any tags, we should push it into the existing tags.\n+  if (result.tags && result.tags.length > 0) {\n+    final.tags = [\n+      ...tags,\n+      // Only push in tags that we haven't already added.\n+      ...result.tags.filter((tag) => !tags.includes(tag)),\n+    ];\n+  }\n+\n+  // If this result contained a status, then we've finished resolving\n+  // phases!\n+  if (result.status) {\n+    final.status = result.status;\n+    return true;\n+  }\n+\n+  return false;\n+}"
    },
    {
      "sha": "107a80927645827fd6458b7f032279b38bc44b36",
      "filename": "src/core/server/services/comments/pipeline/phases/approve.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/approve.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/approve.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/approve.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -20,9 +20,7 @@ export const approve: IntermediateModerationPhase = ({\n   //   automatically approved. We will only see EXPERT\n   //   tags assigned when we are in Q&A mode, so we can\n   //   trust this simple tag type check.\n-  if (\n-    tags.some((tag) => tag.type === GQLTAG.STAFF || tag.type === GQLTAG.EXPERT)\n-  ) {\n+  if (tags.includes(GQLTAG.STAFF) || tags.includes(GQLTAG.EXPERT)) {\n     return {\n       status: GQLCOMMENT_STATUS.APPROVED,\n     };"
    },
    {
      "sha": "eb8bd2b3e46f137fbe9fa520de166dd8a6952c28",
      "filename": "src/core/server/services/comments/pipeline/phases/detectLinks.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/detectLinks.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/detectLinks.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/detectLinks.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -32,7 +32,6 @@ export const detectLinks: IntermediateModerationPhase = ({\n       status: GQLCOMMENT_STATUS.SYSTEM_WITHHELD,\n       actions: [\n         {\n-          userID: null,\n           actionType: ACTION_TYPE.FLAG,\n           reason: GQLCOMMENT_FLAG_REASON.COMMENT_DETECTED_LINKS,\n         },"
    },
    {
      "sha": "d9b6e8039a4225154f30867aa8a0b326bcd99a51",
      "filename": "src/core/server/services/comments/pipeline/phases/external.spec.ts",
      "status": "added",
      "additions": 82,
      "deletions": 0,
      "changes": 82,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/external.spec.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/external.spec.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/external.spec.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,82 @@\n+import { validateResponse } from \"./external\";\n+\n+describe(\"validateResponse\", () => {\n+  it(\"allows an empty response\", () => {\n+    expect(validateResponse({})).toEqual({});\n+  });\n+  it(\"allows a valid status response\", () => {\n+    expect(validateResponse({ status: \"NONE\" })).toEqual({ status: \"NONE\" });\n+    expect(validateResponse({ status: \"APPROVED\" })).toEqual({\n+      status: \"APPROVED\",\n+    });\n+    expect(validateResponse({ status: \"REJECTED\" })).toEqual({\n+      status: \"REJECTED\",\n+    });\n+    expect(validateResponse({ status: \"SYSTEM_WITHHELD\" })).toEqual({\n+      status: \"SYSTEM_WITHHELD\",\n+    });\n+  });\n+  it(\"allows a valid tag response\", () => {\n+    expect(validateResponse({ tags: [\"FEATURED\"] })).toEqual({\n+      tags: [\"FEATURED\"],\n+    });\n+    expect(validateResponse({ tags: [\"STAFF\"] })).toEqual({\n+      tags: [\"STAFF\"],\n+    });\n+  });\n+  it(\"allows and strips unknown fields from the response\", () => {\n+    expect(validateResponse({ willFail: false })).toEqual({});\n+  });\n+  it(\"allows a valid action response\", () => {\n+    expect(\n+      validateResponse({\n+        actions: [{ actionType: \"FLAG\", reason: \"COMMENT_DETECTED_SPAM\" }],\n+      })\n+    ).toEqual({\n+      actions: [{ actionType: \"FLAG\", reason: \"COMMENT_DETECTED_SPAM\" }],\n+    });\n+  });\n+  it(\"allows a valid action response and filters undefined fields\", () => {\n+    expect(\n+      validateResponse({\n+        actions: [\n+          {\n+            actionType: \"FLAG\",\n+            reason: \"COMMENT_DETECTED_TOXIC\",\n+            additionalDetails: \"This is additional details\",\n+            metadata: { this: { is: { a: { deep: \"object\" } } } },\n+          },\n+        ],\n+      })\n+    ).toEqual({\n+      actions: [\n+        {\n+          actionType: \"FLAG\",\n+          reason: \"COMMENT_DETECTED_TOXIC\",\n+        },\n+      ],\n+    });\n+  });\n+  it(\"disallows incorrect reasons in the actions from the response\", () => {\n+    expect(() =>\n+      validateResponse({\n+        actions: [{ actionType: \"FLAG\", reason: \"COMMENT_DETECTED_NOT_REAL\" }],\n+      })\n+    ).toThrow();\n+    expect(() =>\n+      validateResponse({\n+        actions: [\n+          { actionType: \"ALSO_NOT_REAL\", reason: \"COMMENT_DETECTED_NOT_REAL\" },\n+        ],\n+      })\n+    ).toThrow();\n+  });\n+  it(\"disallows incorrect tag types in the tags from the response\", () => {\n+    expect(() => validateResponse({ tags: [\"NOT_REAL\"] })).toThrow();\n+    expect(() => validateResponse({ tags: [\"\"] })).toThrow();\n+  });\n+  it(\"disallows incorrect values in the status response\", () => {\n+    expect(() => validateResponse({ status: \"fail\" })).toThrow();\n+    expect(() => validateResponse({ status: \"approved\" })).toThrow();\n+  });\n+});"
    },
    {
      "sha": "a9fcbb2fea8f4384bc43f29eaf975e41e4ba87d3",
      "filename": "src/core/server/services/comments/pipeline/phases/external.ts",
      "status": "added",
      "additions": 316,
      "deletions": 0,
      "changes": 316,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/external.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/external.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/external.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,316 @@\n+import Joi from \"@hapi/joi\";\n+\n+import { ACTION_TYPE } from \"coral-server/models/action/comment\";\n+import {\n+  ExternalModerationPhase,\n+  filterActivePhase,\n+  filterExpiredSigningSecrets,\n+} from \"coral-server/models/settings\";\n+import { deleteTenantExternalModerationPhaseSigningSecrets } from \"coral-server/models/tenant\";\n+import {\n+  IntermediateModerationPhase,\n+  PhaseResult,\n+} from \"coral-server/services/comments/pipeline\";\n+import { createFetch, generateFetchOptions } from \"coral-server/services/fetch\";\n+\n+import {\n+  GQLCOMMENT_BODY_FORMAT,\n+  GQLCOMMENT_FLAG_DETECTED_REASON,\n+  GQLCOMMENT_STATUS,\n+  GQLTAG,\n+  GQLUSER_ROLE,\n+} from \"coral-server/graph/schema/__generated__/types\";\n+\n+import { mergePhaseResult } from \"../helpers\";\n+import { IntermediateModerationPhaseContext } from \"../pipeline\";\n+\n+export interface ExternalModerationRequest {\n+  /**\n+   * action refers to the specific operation being performed. If `NEW`, this\n+   * is referring to a new comment being created. If `EDIT`, then this refers to\n+   * an operation involving an edit operation on an existing Comment.\n+   */\n+  action: \"NEW\" | \"EDIT\";\n+\n+  /**\n+   * comment refers to the actual Comment data for the Comment being\n+   * created/edited.\n+   */\n+  comment: {\n+    /**\n+     * body refers to the actual body text of the Comment being created/edited.\n+     */\n+    body: string;\n+\n+    /**\n+     * parentID is the identifier for the parent comment (if this Comment is a\n+     * reply, null otherwise).\n+     */\n+    parentID: string | null;\n+  };\n+\n+  /**\n+   * author refers to the User that is creating/editing the Comment.\n+   */\n+  author: {\n+    /**\n+     * id is the identifier for this User.\n+     */\n+    id: string;\n+\n+    /**\n+     * role refers to the role of this User.\n+     */\n+    role: GQLUSER_ROLE;\n+  };\n+\n+  /**\n+   * story refers to the Story being commented on.\n+   */\n+  story: {\n+    /**\n+     * id is the identifier for this Story.\n+     */\n+    id: string;\n+\n+    /**\n+     * url is the URL for this Story.\n+     */\n+    url: string;\n+  };\n+\n+  /**\n+   * site refers to the Site that the story being commented on belongs to.\n+   */\n+  site: {\n+    /**\n+     * id is the identifier for this Site.\n+     */\n+    id: string;\n+  };\n+\n+  /**\n+   * tenantID is the identifer of the Tenant that this Comment is being\n+   * created/edited on.\n+   */\n+  tenantID: string;\n+\n+  /**\n+   * tenantDomain is the domain that is associated with this Tenant that this\n+   * Comment is being created/edited on.\n+   */\n+  tenantDomain: string;\n+}\n+\n+export type ExternalModerationResponse = Partial<\n+  Pick<PhaseResult, \"actions\" | \"status\" | \"tags\">\n+>;\n+\n+const ExternalModerationResponseSchema = Joi.object().keys({\n+  actions: Joi.array().items(\n+    Joi.object().keys({\n+      actionType: Joi.string().only().allow(ACTION_TYPE.FLAG).required(),\n+      reason: Joi.string()\n+        .only()\n+        .allow(\n+          GQLCOMMENT_FLAG_DETECTED_REASON.COMMENT_DETECTED_TOXIC,\n+          GQLCOMMENT_FLAG_DETECTED_REASON.COMMENT_DETECTED_SPAM\n+        )\n+        .required(),\n+    })\n+  ),\n+  status: Joi.string()\n+    .only()\n+    .allow(...Object.keys(GQLCOMMENT_STATUS)),\n+  tags: Joi.array().items(\n+    Joi.string().only().allow(GQLTAG.FEATURED, GQLTAG.STAFF).required()\n+  ),\n+});\n+\n+/**\n+ * validate will validate the `ExternalModerationResponse`.\n+ *\n+ * @param body the input body that is being coerced into an `ExternalModerationResponse`.\n+ */\n+export function validateResponse(body: object): ExternalModerationResponse {\n+  const { value, error: err } = ExternalModerationResponseSchema.validate(\n+    body,\n+    {\n+      stripUnknown: true,\n+      presence: \"optional\",\n+      abortEarly: false,\n+    }\n+  );\n+\n+  if (err) {\n+    throw err;\n+  }\n+\n+  return value;\n+}\n+\n+const fetch = createFetch({ name: \"Moderation\" });\n+\n+/**\n+ * processPhase will execute the request for moderation for this particular\n+ * phase.\n+ *\n+ * @param ctx the context for the moderation request.\n+ * @param phase the current phase associated with this request.\n+ */\n+async function processPhase(\n+  {\n+    mongo,\n+    action,\n+    comment,\n+    htmlStripped,\n+    author,\n+    tenant,\n+    story,\n+    now,\n+    log,\n+  }: IntermediateModerationPhaseContext,\n+  phase: ExternalModerationPhase\n+) {\n+  // Create the crafted input payload to be used.\n+  const request: ExternalModerationRequest = {\n+    action,\n+    comment: {\n+      body:\n+        // Depending on the selected format, the comment body could be in an\n+        // HTML or HTML stripped format.\n+        phase.format === GQLCOMMENT_BODY_FORMAT.HTML\n+          ? comment.body\n+          : htmlStripped,\n+      // We're casting this to a `string | null` here because it's more\n+      // actionable to get a `null` rather than an undefined value in a\n+      // request.\n+      parentID: comment.parentID || null,\n+    },\n+    author: {\n+      id: author.id,\n+      role: author.role,\n+    },\n+    story: {\n+      id: story.id,\n+      url: story.url,\n+    },\n+    site: {\n+      id: story.siteID,\n+    },\n+    tenantID: tenant.id,\n+    tenantDomain: tenant.domain,\n+  };\n+\n+  // Craft the request options now to use.\n+  const options = generateFetchOptions(phase.signingSecrets, request, now);\n+\n+  // Send off the request, with the correct timeout.\n+  const res = await fetch(phase.url, {\n+    ...options,\n+    timeout: phase.timeout,\n+  });\n+  if (!res.ok) {\n+    // The phase did not respond correctly, continue.\n+    log.warn(\n+      { status: res.status, phaseID: phase.id },\n+      \"failed to get moderation response\"\n+    );\n+    return;\n+  }\n+\n+  // Try to parse the response.\n+  const text = await res.text();\n+\n+  // If the moderation phase responded 204, or there was no response from\n+  // the request, just continue.\n+  if (res.status === 204 || text === \"\" || text === \"{}\") {\n+    log.debug(\n+      { status: res.status, phaseID: phase.id },\n+      \"empty response received\"\n+    );\n+    return;\n+  }\n+\n+  // Try to parse the response as JSON.\n+  const body = JSON.parse(text);\n+\n+  // Remove the expired secrets in the next tick so that it does not affect\n+  // the sending performance of this job, and errors do not impact the\n+  // sending.\n+  const expiredSigningSecretKIDs = phase.signingSecrets\n+    .filter(filterExpiredSigningSecrets(now))\n+    .map((s) => s.kid);\n+  if (expiredSigningSecretKIDs.length > 0) {\n+    process.nextTick(() => {\n+      deleteTenantExternalModerationPhaseSigningSecrets(\n+        mongo,\n+        tenant.id,\n+        phase.id,\n+        expiredSigningSecretKIDs\n+      )\n+        .then(() => {\n+          log.info(\n+            { phaseID: phase.id, kids: expiredSigningSecretKIDs },\n+            \"removed expired secrets from phase\"\n+          );\n+        })\n+        .catch((err) => {\n+          log.error(\n+            { err },\n+            \"an error occurred when trying to remove expired phase secrets\"\n+          );\n+        });\n+    });\n+  }\n+\n+  // Validate will throw an error if the body does not conform to the\n+  // specification.\n+  return validateResponse(body);\n+}\n+\n+export const external: IntermediateModerationPhase = async (ctx) => {\n+  // Check to see if any custom moderation phases have been defined, if there is\n+  // none, exit now.\n+  if (\n+    !ctx.tenant.integrations.external ||\n+    ctx.tenant.integrations.external.phases.length === 0\n+  ) {\n+    return;\n+  }\n+\n+  // Get the enabled phases.\n+  const phases = ctx.tenant.integrations.external.phases.filter(\n+    filterActivePhase()\n+  );\n+  if (phases.length === 0) {\n+    return;\n+  }\n+\n+  // Collect the response we're going to make into this partial object.\n+  const result: Partial<PhaseResult> = {};\n+\n+  // Send the input to each of the phases.\n+  for (const phase of phases) {\n+    try {\n+      // Get the response from the phase.\n+      const response = await processPhase(ctx, phase);\n+      if (!response) {\n+        continue;\n+      }\n+\n+      // Merge the results in. If we're finished, return now!\n+      const finished = mergePhaseResult(response, result);\n+      if (finished) {\n+        return result;\n+      }\n+    } catch (err) {\n+      ctx.log.error(\n+        { err, phaseID: phase.id },\n+        \"failed to process custom moderation phase\"\n+      );\n+    }\n+  }\n+\n+  return result;\n+};"
    },
    {
      "sha": "588bde861eb4ea7bef3759700b6952e6ebd9682c",
      "filename": "src/core/server/services/comments/pipeline/phases/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -4,6 +4,7 @@ import { approve } from \"./approve\";\n import { commentingDisabled } from \"./commentingDisabled\";\n import { commentLength } from \"./commentLength\";\n import { detectLinks } from \"./detectLinks\";\n+import { external } from \"./external\";\n import { linkify } from \"./linkify\";\n import { preModerate } from \"./preModerate\";\n import { premodUser } from \"./preModerateUser\";\n@@ -41,4 +42,5 @@ export const moderationPhases: IntermediateModerationPhase[] = [\n   preModerate,\n   premodUser,\n   premodNewCommenter,\n+  external,\n ];"
    },
    {
      "sha": "5c468ea3cbf4ca9c825ae328c089b40821a2a853",
      "filename": "src/core/server/services/comments/pipeline/phases/premodNewCommenter.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/premodNewCommenter.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/premodNewCommenter.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/premodNewCommenter.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -30,7 +30,6 @@ export const premodNewCommenter = async ({\n       status: GQLCOMMENT_STATUS.SYSTEM_WITHHELD,\n       actions: [\n         {\n-          userID: null,\n           actionType: ACTION_TYPE.FLAG,\n           reason: GQLCOMMENT_FLAG_REASON.COMMENT_DETECTED_NEW_COMMENTER,\n           metadata: {"
    },
    {
      "sha": "b7bc97891027788148f109f46a4b696d3123264d",
      "filename": "src/core/server/services/comments/pipeline/phases/recentCommentHistory.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/recentCommentHistory.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/recentCommentHistory.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/recentCommentHistory.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -48,7 +48,6 @@ export const recentCommentHistory = async ({\n       status: GQLCOMMENT_STATUS.SYSTEM_WITHHELD,\n       actions: [\n         {\n-          userID: null,\n           actionType: ACTION_TYPE.FLAG,\n           reason: GQLCOMMENT_FLAG_REASON.COMMENT_DETECTED_RECENT_HISTORY,\n           metadata: {"
    },
    {
      "sha": "aed8493916ca8cf72c70cd212fdf2485e51c7674",
      "filename": "src/core/server/services/comments/pipeline/phases/repeatPost.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/repeatPost.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/repeatPost.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/repeatPost.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -63,7 +63,6 @@ export const repeatPost: IntermediateModerationPhase = async ({\n         status: GQLCOMMENT_STATUS.SYSTEM_WITHHELD,\n         actions: [\n           {\n-            userID: null,\n             actionType: ACTION_TYPE.FLAG,\n             reason: GQLCOMMENT_FLAG_REASON.COMMENT_DETECTED_REPEAT_POST,\n           },"
    },
    {
      "sha": "787929b2a419a9fcab829857cb2832082f909a92",
      "filename": "src/core/server/services/comments/pipeline/phases/spam.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/spam.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/spam.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/spam.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -105,7 +105,6 @@ export const spam: IntermediateModerationPhase = async ({\n         status: GQLCOMMENT_STATUS.SYSTEM_WITHHELD,\n         actions: [\n           {\n-            userID: null,\n             actionType: ACTION_TYPE.FLAG,\n             reason: GQLCOMMENT_FLAG_REASON.COMMENT_DETECTED_SPAM,\n           },"
    },
    {
      "sha": "62ecceb2957ebb781c8eba83e0676d472c783b35",
      "filename": "src/core/server/services/comments/pipeline/phases/staff.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/staff.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/staff.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/staff.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -9,16 +9,10 @@ import { GQLTAG } from \"coral-server/graph/schema/__generated__/types\";\n // If a given user is a staff member, always approve their comment.\n export const staff: IntermediateModerationPhase = ({\n   author,\n-  now,\n }): IntermediatePhaseResult | void => {\n   if (hasStaffRole(author)) {\n     return {\n-      tags: [\n-        {\n-          type: GQLTAG.STAFF,\n-          createdAt: now,\n-        },\n-      ],\n+      tags: [GQLTAG.STAFF],\n     };\n   }\n };"
    },
    {
      "sha": "7426c5929fb4794a3fc1bec6bd99430983993f03",
      "filename": "src/core/server/services/comments/pipeline/phases/tagExpertAnswers.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 13,
      "changes": 17,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/tagExpertAnswers.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/tagExpertAnswers.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/tagExpertAnswers.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,4 +1,4 @@\n-import { CommentTag } from \"coral-server/models/comment/tag\";\n+import { getDepth } from \"coral-server/models/comment\";\n import {\n   IntermediateModerationPhase,\n   IntermediatePhaseResult,\n@@ -11,7 +11,6 @@ import {\n \n export const tagExpertAnswers: IntermediateModerationPhase = ({\n   author,\n-  now,\n   story,\n   comment,\n }): IntermediatePhaseResult | void => {\n@@ -24,20 +23,12 @@ export const tagExpertAnswers: IntermediateModerationPhase = ({\n     story.settings.expertIDs.some((id) => id === author.id)\n   ) {\n     // Assign this comment an expert tag!\n-    const tags: CommentTag[] = [\n-      {\n-        type: GQLTAG.EXPERT,\n-        createdAt: now,\n-      },\n-    ];\n+    const tags: GQLTAG[] = [GQLTAG.EXPERT];\n \n     // If this comment is the first reply in a thread (depth of 1)...\n-    if (comment.ancestorIDs.length === 1) {\n+    if (getDepth(comment) === 1) {\n       // Add the featured tag!\n-      tags.push({\n-        type: GQLTAG.FEATURED,\n-        createdAt: now,\n-      });\n+      tags.push(GQLTAG.FEATURED);\n     }\n \n     return { tags };"
    },
    {
      "sha": "9789bf32bff069817a6da9cf3a2f774895c2b4f8",
      "filename": "src/core/server/services/comments/pipeline/phases/tagUnansweredQuestions.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/tagUnansweredQuestions.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/tagUnansweredQuestions.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/tagUnansweredQuestions.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -31,12 +31,7 @@ export const tagUnansweredQuestions: IntermediateModerationPhase = ({\n     story.settings.expertIDs.every((id) => id !== comment.authorID)\n   ) {\n     return {\n-      tags: [\n-        {\n-          type: GQLTAG.UNANSWERED,\n-          createdAt: now,\n-        },\n-      ],\n+      tags: [GQLTAG.UNANSWERED],\n     };\n   }\n };"
    },
    {
      "sha": "06370cee2cee52fea909ad0cb316a434c29d4910",
      "filename": "src/core/server/services/comments/pipeline/phases/toxic.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/toxic.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/toxic.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/toxic.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -131,7 +131,6 @@ export const toxic: IntermediateModerationPhase = async ({\n         status: GQLCOMMENT_STATUS.SYSTEM_WITHHELD,\n         actions: [\n           {\n-            userID: null,\n             actionType: ACTION_TYPE.FLAG,\n             reason: GQLCOMMENT_FLAG_REASON.COMMENT_DETECTED_TOXIC,\n           },"
    },
    {
      "sha": "ee226da4c119ccf54b33b6cfd43dbfb274513a46",
      "filename": "src/core/server/services/comments/pipeline/phases/wordList.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/wordList.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/phases/wordList.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/wordList.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -35,7 +35,6 @@ export const wordList: IntermediateModerationPhase = ({\n       status: GQLCOMMENT_STATUS.REJECTED,\n       actions: [\n         {\n-          userID: null,\n           actionType: ACTION_TYPE.FLAG,\n           reason: GQLCOMMENT_FLAG_REASON.COMMENT_DETECTED_BANNED_WORD,\n         },\n@@ -53,7 +52,6 @@ export const wordList: IntermediateModerationPhase = ({\n     return {\n       actions: [\n         {\n-          userID: null,\n           actionType: ACTION_TYPE.FLAG,\n           reason: GQLCOMMENT_FLAG_REASON.COMMENT_DETECTED_SUSPECT_WORD,\n         },"
    },
    {
      "sha": "6ac3e1a1c78bbbc8dc906677b091937329d4094d",
      "filename": "src/core/server/services/comments/pipeline/pipeline.ts",
      "status": "modified",
      "additions": 33,
      "deletions": 45,
      "changes": 78,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/pipeline.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/comments/pipeline/pipeline.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/pipeline.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -9,28 +9,52 @@ import {\n   CreateCommentInput,\n   RevisionMetadata,\n } from \"coral-server/models/comment\";\n-import { CommentTag } from \"coral-server/models/comment/tag\";\n import { Story } from \"coral-server/models/story\";\n import { Tenant } from \"coral-server/models/tenant\";\n import { User } from \"coral-server/models/user\";\n import { AugmentedRedis } from \"coral-server/services/redis\";\n import { Request } from \"coral-server/types/express\";\n \n-import { GQLCOMMENT_STATUS } from \"coral-server/graph/schema/__generated__/types\";\n+import {\n+  GQLCOMMENT_STATUS,\n+  GQLTAG,\n+} from \"coral-server/graph/schema/__generated__/types\";\n \n+import { mergePhaseResult } from \"./helpers\";\n import { moderationPhases } from \"./phases\";\n \n export type ModerationAction = Omit<\n   CreateActionInput,\n-  \"commentID\" | \"commentRevisionID\" | \"storyID\" | \"siteID\"\n+  \"commentID\" | \"commentRevisionID\" | \"storyID\" | \"siteID\" | \"userID\"\n >;\n \n export interface PhaseResult {\n+  /**\n+   * actions are moderation actions that are added to the comment revision.\n+   */\n   actions: ModerationAction[];\n+\n+  /**\n+   * status when provided decides and terminates the moderation process by\n+   * setting the status of the comment.\n+   */\n   status: GQLCOMMENT_STATUS;\n+\n+  /**\n+   * metadata should be added to the comment revision when it is created/edited.\n+   */\n   metadata: RevisionMetadata;\n+\n+  /**\n+   * body when returned should replace the comment body as it is currently.\n+   */\n   body: string;\n-  tags: CommentTag[];\n+\n+  /**\n+   * tags should be added to the comment when it is created. Tags are not added\n+   * when a comment is edited.\n+   */\n+  tags: GQLTAG[];\n }\n \n export interface ModerationPhaseContextInput {\n@@ -64,7 +88,7 @@ export type IntermediatePhaseResult = Partial<PhaseResult> | void;\n export interface IntermediateModerationPhaseContext\n   extends ModerationPhaseContext {\n   metadata: RevisionMetadata;\n-  tags: CommentTag[];\n+  tags: GQLTAG[];\n }\n \n export type IntermediateModerationPhase = (\n@@ -109,46 +133,10 @@ export const compose = (\n       metadata: final.metadata,\n     });\n     if (result) {\n-      // If this result contained actions, then we should push it into the\n-      // other actions.\n-      const { actions } = result;\n-      if (actions) {\n-        final.actions.push(...actions);\n-      }\n-\n-      // If this result contained metadata, then we should merge it into the\n-      // other metadata.\n-      const { metadata } = result;\n-      if (metadata) {\n-        final.metadata = {\n-          ...final.metadata,\n-          ...metadata,\n-        };\n-      }\n-\n-      // If the result modified the comment body, we should replace it.\n-      const { body } = result;\n-      if (body) {\n-        final.body = body;\n-      }\n-\n-      // If the result added any tags, we should push it into the existing tags.\n-      const { tags } = result;\n-      if (tags && tags.length > 0) {\n-        final.tags.push(\n-          // Only push in tags that we haven't already added.\n-          ...tags.filter(\n-            ({ type }) => !final.tags.some((tag) => tag.type === type)\n-          )\n-        );\n-      }\n-\n-      // If this result contained a status, then we've finished resolving\n-      // phases!\n-      const { status } = result;\n-      if (status) {\n-        final.status = status;\n-        break;\n+      // Merge the results in. If we're finished, break now!\n+      const finished = mergePhaseResult(result, final);\n+      if (finished) {\n+        return final;\n       }\n     }\n   }"
    },
    {
      "sha": "d547d1b8160d2c6438ccb5fb887b91544f5e75b6",
      "filename": "src/core/server/services/events/comments.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/events/comments.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/events/comments.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/events/comments.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -11,6 +11,7 @@ import { CoralEventPublisherBroker } from \"coral-server/events/publisher\";\n import {\n   Comment,\n   CommentModerationQueueCounts,\n+  getDepth,\n   hasPublishedStatus,\n } from \"coral-server/models/comment\";\n \n@@ -42,7 +43,7 @@ export async function publishCommentReplyCreated(\n   broker: CoralEventPublisherBroker,\n   comment: Pick<Comment, \"id\" | \"status\" | \"ancestorIDs\">\n ) {\n-  if (comment.ancestorIDs.length > 0 && hasPublishedStatus(comment)) {\n+  if (getDepth(comment) > 0 && hasPublishedStatus(comment)) {\n     await CommentReplyCreatedCoralEvent.publish(broker, {\n       ancestorIDs: comment.ancestorIDs,\n       commentID: comment.id,"
    },
    {
      "sha": "6137d965f133c608237bbd05bae8bdc75796a7e0",
      "filename": "src/core/server/services/fetch/fetch.ts",
      "status": "modified",
      "additions": 48,
      "deletions": 7,
      "changes": 55,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/fetch/fetch.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/fetch/fetch.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/fetch/fetch.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -5,29 +5,62 @@ import fetch, { RequestInit, Response } from \"node-fetch\";\n import { URL } from \"url\";\n \n import { version } from \"coral-common/version\";\n+import {\n+  generateSignatures,\n+  SigningSecret,\n+} from \"coral-server/models/settings\";\n \n import abortAfter from \"./abortAfter\";\n \n export type Fetch = (url: string, options?: FetchOptions) => Promise<Response>;\n \n+export type FetchOptions = RequestInit & {\n+  /**\n+   * timeout is the number of seconds that the request will wait for a response\n+   * before timing out.\n+   */\n+  timeout?: number;\n+};\n+\n export interface CreateFetchOptions {\n   /**\n    * name is the string that is attached to the `User-Agent` header as:\n    *\n    *  `Coral ${name}/${version}`\n    */\n   name: string;\n-}\n \n-export type FetchOptions = RequestInit & {\n   /**\n-   * timeout is the number of seconds that the request will wait for a response\n-   * before timing out.\n+   * options to provide defaults for requests made using this fetcher.\n    */\n-  timeout?: number;\n-};\n+  options?: Omit<FetchOptions, \"agent\" | \"body\" | \"signal\">;\n+}\n+\n+export function generateFetchOptions(\n+  signingSecrets: SigningSecret[],\n+  data: object,\n+  now: Date\n+): FetchOptions {\n+  // Serialize the body and signature to include in the request.\n+  const body = JSON.stringify(data, null, 2);\n+  const signature = generateSignatures(signingSecrets, body, now);\n+\n+  const headers: Record<string, any> = {\n+    \"Content-Type\": \"application/json\",\n+    \"X-Coral-Signature\": signature,\n+  };\n+\n+  return {\n+    method: \"POST\",\n+    headers,\n+    body,\n+  };\n+}\n \n-export const createFetch = ({ name }: CreateFetchOptions): Fetch => {\n+export const createFetch = ({\n+  name,\n+  options: { headers: defaultBaseHeaders = {}, ...defaultOptions } = {},\n+}: CreateFetchOptions): Fetch => {\n   // Create HTTP agents to improve connection performance.\n   const agents = {\n     https: new https.Agent({\n@@ -46,6 +79,7 @@ export const createFetch = ({ name }: CreateFetchOptions): Fetch => {\n   // overridden).\n   const defaultHeaders = {\n     \"User-Agent\": `Coral ${capitalize(name)}/${version}`,\n+    ...defaultBaseHeaders,\n   };\n \n   // Return the actual fetcher that just uses fetch under the hood.\n@@ -69,10 +103,17 @@ export const createFetch = ({ name }: CreateFetchOptions): Fetch => {\n           ...defaultHeaders,\n           ...headers,\n         },\n+        // Limit response sizes to 2MB of response data. 1e6B is 1MB.\n+        size: 2e6,\n+        // Do not follow redirects automatically, and do not error if we\n+        // encounter one. We'll treat the response from the request as the\n+        // endpoints final response.\n+        redirect: \"manual\",\n         // Attach the controller signal to abort the request after the timeout\n         // is reached.\n         signal: abort.controller.signal,\n         // Merge in the passed options.\n+        ...defaultOptions,\n         ...options,\n       });\n "
    },
    {
      "sha": "8fdff7f174738a9ac60deb555d9258f4718243aa",
      "filename": "src/core/server/services/migrate/manager.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/migrate/manager.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/migrate/manager.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/manager.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -14,7 +14,7 @@ import {\n   startMigration,\n } from \"coral-server/models/migration\";\n import { I18n } from \"coral-server/services/i18n\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n import {\n   FailedMigrationDetectedError,"
    },
    {
      "sha": "8e61be6a9da19341e3f970dcf8a5ba5455abfd3e",
      "filename": "src/core/server/services/migrate/migrations/1582929716101_sso_secrets.ts",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/migrate/migrations/1582929716101_sso_secrets.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/migrate/migrations/1582929716101_sso_secrets.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/migrations/1582929716101_sso_secrets.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,17 @@\n+import { Db } from \"mongodb\";\n+\n+import Migration from \"coral-server/services/migrate/migration\";\n+import collections from \"coral-server/services/mongodb/collections\";\n+\n+export default class extends Migration {\n+  public async up(mongo: Db, tenantID: string) {\n+    await collections.tenants(mongo).updateOne(\n+      { id: tenantID },\n+      {\n+        $rename: {\n+          \"auth.integrations.sso.keys\": \"auth.integrations.sso.signingSecrets\",\n+        },\n+      }\n+    );\n+  }\n+}"
    },
    {
      "sha": "19356f6a7762aacfa0a1829388e16cdacfccdfa7",
      "filename": "src/core/server/services/mongodb/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/mongodb/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/mongodb/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/mongodb/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,7 +1,7 @@\n import { Db, MongoClient } from \"mongodb\";\n \n import { Config } from \"coral-server/config\";\n-import { InternalError } from \"coral-server/errors\";\n+import { WrappedInternalError } from \"coral-server/errors\";\n \n export async function createMongoClient(config: Config): Promise<MongoClient> {\n   try {\n@@ -10,7 +10,7 @@ export async function createMongoClient(config: Config): Promise<MongoClient> {\n       ignoreUndefined: true,\n     });\n   } catch (err) {\n-    throw new InternalError(err, \"could not connect to mongodb\");\n+    throw new WrappedInternalError(err, \"could not connect to mongodb\");\n   }\n }\n "
    },
    {
      "sha": "76df946fece3334840f950f4ad70f8297ce18775",
      "filename": "src/core/server/services/redis/index.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/redis/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/redis/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/redis/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,7 +1,7 @@\n import RedisClient, { Pipeline, Redis } from \"ioredis\";\n \n import { Config } from \"coral-server/config\";\n-import { InternalError } from \"coral-server/errors\";\n+import { WrappedInternalError } from \"coral-server/errors\";\n import logger from \"coral-server/logger\";\n \n export interface AugmentedRedisCommands {\n@@ -52,7 +52,7 @@ export function createRedisClient(config: Config, lazyConnect = false): Redis {\n \n     return redis;\n   } catch (err) {\n-    throw new InternalError(err, \"could not connect to redis\");\n+    throw new WrappedInternalError(err, \"could not connect to redis\");\n   }\n }\n \n@@ -73,6 +73,6 @@ export async function createAugmentedRedisClient(\n \n     return redis;\n   } catch (err) {\n-    throw new InternalError(err, \"could not connect to redis\");\n+    throw new WrappedInternalError(err, \"could not connect to redis\");\n   }\n }"
    },
    {
      "sha": "e921037ee13794d9b3f822f660d034a9278d8945",
      "filename": "src/core/server/services/stories/scraper/scraper.ts",
      "status": "modified",
      "additions": 28,
      "deletions": 29,
      "changes": 57,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/stories/scraper/scraper.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/stories/scraper/scraper.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/stories/scraper/scraper.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,4 +1,3 @@\n-import Logger from \"bunyan\";\n import cheerio from \"cheerio\";\n import authorScraper from \"metascraper-author\";\n import descriptionScraper from \"metascraper-description\";\n@@ -12,7 +11,7 @@ import { ScrapeFailed } from \"coral-server/errors\";\n import logger from \"coral-server/logger\";\n import { retrieveStory, updateStory } from \"coral-server/models/story\";\n import { retrieveTenant } from \"coral-server/models/tenant\";\n-import { createFetch, Fetch, FetchOptions } from \"coral-server/services/fetch\";\n+import { createFetch, FetchOptions } from \"coral-server/services/fetch\";\n \n import { GQLStoryMetadata } from \"coral-server/graph/schema/__generated__/types\";\n \n@@ -27,15 +26,21 @@ export type Rule = Record<\n   >\n >;\n \n+interface ScrapeOptions {\n+  url: string;\n+  timeout: number;\n+  size: number;\n+  customUserAgent?: string;\n+  proxyURL?: string;\n+}\n+\n class Scraper {\n   private readonly rules: Rule[];\n-  private readonly log: Logger;\n-  private readonly fetch: Fetch;\n+  private readonly log = logger.child({ taskName: \"scraper\" }, true);\n+  private readonly fetch = createFetch({ name: \"Scraper\" });\n \n   constructor(rules: Rule[]) {\n-    this.fetch = createFetch({ name: \"Scraper\" });\n     this.rules = rules;\n-    this.log = logger.child({ taskName: \"scraper\" }, true);\n   }\n \n   public parse(url: string, html: string): GQLStoryMetadata {\n@@ -83,15 +88,15 @@ class Scraper {\n     };\n   }\n \n-  public async download(\n-    url: string,\n-    timeout: number,\n-    customUserAgent?: string,\n-    proxyURL?: string\n-  ) {\n+  public async download({\n+    url,\n+    timeout,\n+    customUserAgent,\n+    proxyURL,\n+  }: ScrapeOptions) {\n     const log = this.log.child({ storyURL: url }, true);\n \n-    const options: FetchOptions = { timeout };\n+    const options: FetchOptions = { method: \"GET\", timeout };\n     if (customUserAgent) {\n       options.headers = {\n         ...options.headers,\n@@ -131,22 +136,14 @@ class Scraper {\n   }\n \n   public async scrape(\n-    url: string,\n-    abortAfterMilliseconds: number,\n-    customUserAgent?: string,\n-    proxyURL?: string\n+    options: ScrapeOptions\n   ): Promise<GQLStoryMetadata | null> {\n-    const html = await this.download(\n-      url,\n-      abortAfterMilliseconds,\n-      customUserAgent,\n-      proxyURL\n-    );\n+    const html = await this.download(options);\n     if (!html) {\n       return null;\n     }\n \n-    return this.parse(url, html);\n+    return this.parse(options.url, html);\n   }\n }\n \n@@ -195,14 +192,16 @@ export async function scrape(\n   // This typecast is needed because the custom `ms` format does not return the\n   // desired `number` type even though that's the only type it can output.\n   const timeout = (config.get(\"scrape_timeout\") as unknown) as number;\n+  const size = config.get(\"scrape_max_response_size\");\n \n   // Get the metadata from the scraped html.\n-  const metadata = await scraper.scrape(\n-    storyURL,\n+  const metadata = await scraper.scrape({\n+    url: storyURL,\n     timeout,\n-    tenant.stories.scraping.customUserAgent,\n-    tenant.stories.scraping.proxyURL\n-  );\n+    size,\n+    customUserAgent: tenant.stories.scraping.customUserAgent,\n+    proxyURL: tenant.stories.scraping.proxyURL,\n+  });\n   if (!metadata) {\n     throw new Error(\"story at specified url not found\");\n   }"
    },
    {
      "sha": "1955386bf0670343ad9b23bf04071077e14db096",
      "filename": "src/core/server/services/tenant/cache/adapter.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/cache/adapter.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/cache/adapter.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/cache/adapter.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,4 +1,4 @@\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import TenantCache from \"./cache\";\n \n export type DeconstructionFn<T> = (tenantID: string, value: T) => Promise<void>;\n \n@@ -8,7 +8,7 @@ export type DeconstructionFn<T> = (tenantID: string, value: T) => Promise<void>;\n  * tenants are enabled, this acts as a map to store entries, and will\n  * automatically invalidate tenants that have been updated.\n  */\n-export class TenantCacheAdapter<T> {\n+export default class TenantCacheAdapter<T> {\n   private readonly cache = new Map<string, T>();\n   private readonly tenantCache: TenantCache;\n "
    },
    {
      "sha": "771ac6daf4b53d466f0e0e33890f2d9dada63011",
      "filename": "src/core/server/services/tenant/cache/cache.ts",
      "status": "added",
      "additions": 376,
      "deletions": 0,
      "changes": 376,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/cache/cache.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/cache/cache.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/cache/cache.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,376 @@\n+import DataLoader from \"dataloader\";\n+import { EventEmitter } from \"events\";\n+import { Redis } from \"ioredis\";\n+import { Db } from \"mongodb\";\n+import { v4 as uuid } from \"uuid\";\n+\n+import { Config } from \"coral-server/config\";\n+import logger from \"coral-server/logger\";\n+import {\n+  countTenants,\n+  retrieveAllTenants,\n+  retrieveManyTenants,\n+  retrieveManyTenantsByDomain,\n+  Tenant,\n+} from \"coral-server/models/tenant\";\n+\n+const TENANT_CACHE_CHANNEL = \"TENANT_CACHE_CHANNEL\";\n+\n+enum EVENTS {\n+  UPDATE = \"UPDATE\",\n+  DELETE = \"DELETE\",\n+}\n+\n+type UpdateSubscribeCallback = (tenant: Tenant) => void;\n+type DeleteSubscribeCallback = (tenantID: string, tenantDomain: string) => void;\n+\n+type Message = UpdateMessage | DeleteMessage;\n+\n+interface DeleteMessage {\n+  event: EVENTS.DELETE;\n+  tenantID: string;\n+  tenantDomain: string;\n+  clientApplicationID: string;\n+}\n+\n+interface UpdateMessage {\n+  event: EVENTS.UPDATE;\n+  tenant: Tenant;\n+  clientApplicationID: string;\n+}\n+\n+/**\n+ * MessageData is a type that is used to select only the data parts of the\n+ * message.\n+ */\n+type MessageData<T extends Message> = Omit<T, \"clientApplicationID\" | \"event\">;\n+\n+// TenantCache provides an interface for retrieving tenant stored in local\n+// memory rather than grabbing it from the database every single call.\n+export default class TenantCache {\n+  /**\n+   * tenantsByID reference the tenants that have been cached/retrieved by ID.\n+   */\n+  private readonly tenantsByID: DataLoader<string, Readonly<Tenant> | null>;\n+\n+  /**\n+   * tenantsByDomain reference the tenants that have been cached/retrieved by\n+   * Domain.\n+   */\n+  private readonly tenantsByDomain: DataLoader<string, Readonly<Tenant> | null>;\n+\n+  /**\n+   * tenantCountCache stores all the id's of all the Tenant's that have crossed\n+   * it.\n+   */\n+  private readonly tenantCountCache = new Set<string>();\n+\n+  /**\n+   * primed is true when the cache has already been fully primed.\n+   */\n+  private primed = false;\n+\n+  /**\n+   * Create a new client application ID. This prevents duplicated messages\n+   * generated by this application from being handled as external messages\n+   * as we should have already processed it.\n+   */\n+  private readonly clientApplicationID = uuid();\n+\n+  private readonly mongo: Db;\n+  private readonly emitter = new EventEmitter();\n+\n+  /**\n+   * cachingEnabled is true when tenant caching has been enabled.\n+   */\n+  public readonly cachingEnabled: boolean;\n+\n+  constructor(mongo: Db, subscriber: Redis, config: Config) {\n+    this.cachingEnabled = !config.get(\"disable_tenant_caching\");\n+    if (!this.cachingEnabled) {\n+      logger.warn(\"tenant caching is disabled\");\n+    } else {\n+      logger.debug(\"tenant caching is enabled\");\n+    }\n+\n+    // Save the Db reference.\n+    this.mongo = mongo;\n+\n+    // Configure the data loaders.\n+    this.tenantsByID = new DataLoader(\n+      async (ids) => {\n+        logger.debug({ ids: ids.length }, \"now loading tenants\");\n+        const tenants = await retrieveManyTenants(this.mongo, ids);\n+        logger.debug(\n+          { tenants: tenants.filter((t) => t !== null).length },\n+          \"loaded tenants\"\n+        );\n+\n+        tenants\n+          .filter((t) => t !== null)\n+          .forEach((t: Readonly<Tenant>) => this.tenantCountCache.add(t.id));\n+\n+        return tenants;\n+      },\n+      {\n+        cache: this.cachingEnabled,\n+      }\n+    );\n+\n+    this.tenantsByDomain = new DataLoader(\n+      async (domains) => {\n+        logger.debug({ domains: domains.length }, \"now loading tenants\");\n+        const tenants = await retrieveManyTenantsByDomain(this.mongo, domains);\n+        logger.debug(\n+          { tenants: tenants.filter((t) => t !== null).length },\n+          \"loaded tenants\"\n+        );\n+\n+        tenants\n+          .filter((t) => t !== null)\n+          .forEach((t: Readonly<Tenant>) => this.tenantCountCache.add(t.id));\n+\n+        return tenants;\n+      },\n+      {\n+        cache: this.cachingEnabled,\n+      }\n+    );\n+\n+    // We don't need updates if we aren't synced to tenant updates.\n+    if (this.cachingEnabled) {\n+      // Attach to messages on this connection so we can receive updates when\n+      // the tenant are changed.\n+      subscriber.on(\"message\", this.onMessage);\n+\n+      // Subscribe to tenant notifications.\n+      subscriber.subscribe(TENANT_CACHE_CHANNEL);\n+    }\n+  }\n+\n+  /**\n+   * count will return the number of Tenant's.\n+   */\n+  public async count(): Promise<number> {\n+    if (!this.cachingEnabled) {\n+      return countTenants(this.mongo);\n+    }\n+\n+    if (!this.primed) {\n+      await this.primeAll();\n+    }\n+\n+    return this.tenantCountCache.size;\n+  }\n+\n+  /**\n+   * primeAll will load all the tenants into the cache on startup.\n+   */\n+  public async primeAll() {\n+    if (!this.cachingEnabled) {\n+      logger.debug(\"tenants not primed, caching disabled\");\n+      return;\n+    }\n+\n+    // Grab all the tenants for this node.\n+    const tenants = await retrieveAllTenants(this.mongo);\n+\n+    // Clear out all the items in the cache.\n+    this.tenantsByID.clearAll();\n+    this.tenantsByDomain.clearAll();\n+    this.tenantCountCache.clear();\n+\n+    // Prime the cache with each of these tenants.\n+    tenants.forEach((tenant) => {\n+      this.tenantsByID.prime(tenant.id, tenant);\n+      this.tenantsByDomain.prime(tenant.domain, tenant);\n+      this.tenantCountCache.add(tenant.id);\n+    });\n+\n+    logger.debug({ tenants: tenants.length }, \"primed all tenants\");\n+    this.primed = true;\n+  }\n+\n+  /**\n+   * Symbol.asyncIterator implements the asyncIterator interface for the\n+   * TenantCache. This allows you to use the TenantCache as a asyncIterator with\n+   * a `for await (const tenant of tenants) {}` pattern to iterate over all the\n+   * tenant's on the cache. If the cache is cacheable, and not primed, the cache\n+   * will be primed at the first async iteration process. If caching is\n+   * disabled, then the tenants will bne loaded on demand and not persisted\n+   * after the iteration.\n+   */\n+  public async *[Symbol.asyncIterator]() {\n+    // If the cache isn't primed, and caching is enabled, then prime the cache\n+    // now, as this will increase performance dramatically.\n+    if (!this.primed && this.cachingEnabled) {\n+      await this.primeAll();\n+    }\n+\n+    // Copy the tenant count cache to prevent race conditions related to\n+    // clearing during iteration.\n+    const cache = new Set(this.tenantCountCache);\n+\n+    // If the tenant's are primed in the cache, then just use the count cache as\n+    // the iteration source.\n+    if (this.primed) {\n+      for (const tenantID of cache) {\n+        const tenant = await this.tenantsByID.load(tenantID);\n+        if (!tenant) {\n+          continue;\n+        }\n+\n+        yield tenant;\n+      }\n+\n+      return;\n+    }\n+\n+    // Caching must be disabled, so just grab all the tenants for this node and\n+    // iterate through each of them as we handle it.\n+    const tenants = await retrieveAllTenants(this.mongo);\n+    for (const tenant of tenants) {\n+      yield tenant;\n+    }\n+  }\n+\n+  private onUpdateMessage({ tenant }: MessageData<UpdateMessage>) {\n+    // Update the tenant cache.\n+    this.tenantsByID.clear(tenant.id).prime(tenant.id, tenant);\n+    this.tenantsByDomain.clear(tenant.domain).prime(tenant.domain, tenant);\n+    this.tenantCountCache.add(tenant.id);\n+\n+    // Publish the event for the connected listeners.\n+    this.emitter.emit(EVENTS.UPDATE, tenant);\n+  }\n+\n+  private onDeleteMessage({\n+    tenantID,\n+    tenantDomain,\n+  }: MessageData<DeleteMessage>) {\n+    // Delete the tenant in the local cache.\n+    this.tenantsByID.clear(tenantID);\n+    this.tenantsByDomain.clear(tenantDomain);\n+    this.tenantCountCache.delete(tenantID);\n+\n+    // Publish the event for the connected listeners.\n+    this.emitter.emit(EVENTS.DELETE, tenantID, tenantDomain);\n+  }\n+\n+  /**\n+   *  onMessage is fired every time the client gets a subscription event.\n+   */\n+  private onMessage = async (channel: string, data: string): Promise<void> => {\n+    // Only do things when the message is for tenant.\n+    if (channel !== TENANT_CACHE_CHANNEL) {\n+      return;\n+    }\n+\n+    try {\n+      // Parse the message (which is JSON).\n+      const message: Message = JSON.parse(data);\n+\n+      // Extract some known parameters.\n+      const { clientApplicationID } = message;\n+\n+      // Check to see if this was the update issued by this instance.\n+      if (clientApplicationID === this.clientApplicationID) {\n+        // It was, so just return here, we already updated/handled it.\n+        return;\n+      }\n+\n+      const log = logger.child({ eventName: message.event }, true);\n+      log.debug(\"received tenant message\");\n+\n+      // Send the message to the correct handler.\n+      switch (message.event) {\n+        case EVENTS.UPDATE:\n+          return this.onUpdateMessage(message);\n+        case EVENTS.DELETE:\n+          return this.onDeleteMessage(message);\n+        default:\n+          log.warn(\"received unknown event\");\n+          return;\n+      }\n+    } catch (err) {\n+      logger.error(\n+        { err },\n+        \"an error occurred while trying to handle a message\"\n+      );\n+    }\n+  };\n+\n+  public async retrieveByID(id: string): Promise<Readonly<Tenant> | null> {\n+    return this.tenantsByID.load(id);\n+  }\n+\n+  public async retrieveByDomain(\n+    domain: string\n+  ): Promise<Readonly<Tenant> | null> {\n+    return this.tenantsByDomain.load(domain);\n+  }\n+\n+  /**\n+   * This allows you to subscribe to new Tenant updates. This will also return\n+   * a function that when called, unsubscribes you from updates.\n+   *\n+   * @param updateCallback the function to be called when there is an updated Tenant.\n+   * @param deleteCallback the function to be called when a tenant needs to be purged\n+   */\n+  public subscribe(\n+    updateCallback: UpdateSubscribeCallback,\n+    deleteCallback: DeleteSubscribeCallback\n+  ) {\n+    this.emitter.on(EVENTS.UPDATE, updateCallback);\n+    this.emitter.on(EVENTS.DELETE, deleteCallback);\n+\n+    // Return the unsubscribe function.\n+    return () => {\n+      this.emitter.removeListener(EVENTS.UPDATE, updateCallback);\n+      this.emitter.removeListener(EVENTS.DELETE, deleteCallback);\n+    };\n+  }\n+\n+  private async publish(tenantID: string, conn: Redis, message: Message) {\n+    const subscribers = await conn.publish(\n+      TENANT_CACHE_CHANNEL,\n+      JSON.stringify(message)\n+    );\n+    logger.debug(\n+      { tenantID, subscribers, eventName: message.event },\n+      \"updated tenant in cache\"\n+    );\n+  }\n+\n+  /**\n+   * update will update the value for Tenant in the local cache and publish\n+   * a change notification that will be used to keep the other nodes in sync.\n+   *\n+   * @param conn a redis connection used to publish the change notification\n+   * @param tenant the updated Tenant object\n+   */\n+  public async update(conn: Redis, tenant: Tenant): Promise<void> {\n+    // Process the tenant update on this node.\n+    this.onUpdateMessage({ tenant });\n+\n+    // Notify the other nodes about the tenant change.\n+    await this.publish(tenant.id, conn, {\n+      event: EVENTS.UPDATE,\n+      tenant,\n+      clientApplicationID: this.clientApplicationID,\n+    });\n+  }\n+\n+  public async delete(conn: Redis, tenantID: string, tenantDomain: string) {\n+    // Process the tenant update on this node.\n+    this.onDeleteMessage({ tenantID, tenantDomain });\n+\n+    // Notify the other nodes about the tenant change.\n+    await this.publish(tenantID, conn, {\n+      event: EVENTS.DELETE,\n+      tenantID,\n+      tenantDomain,\n+      clientApplicationID: this.clientApplicationID,\n+    });\n+  }\n+}"
    },
    {
      "sha": "2f2a604a5e6fc746de52b11d6ad95247dd0324cd",
      "filename": "src/core/server/services/tenant/cache/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 376,
      "changes": 378,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/cache/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/cache/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/cache/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,376 +1,2 @@\n-import DataLoader from \"dataloader\";\n-import { EventEmitter } from \"events\";\n-import { Redis } from \"ioredis\";\n-import { Db } from \"mongodb\";\n-import { v4 as uuid } from \"uuid\";\n-\n-import { Config } from \"coral-server/config\";\n-import logger from \"coral-server/logger\";\n-import {\n-  countTenants,\n-  retrieveAllTenants,\n-  retrieveManyTenants,\n-  retrieveManyTenantsByDomain,\n-  Tenant,\n-} from \"coral-server/models/tenant\";\n-\n-const TENANT_CACHE_CHANNEL = \"TENANT_CACHE_CHANNEL\";\n-\n-enum EVENTS {\n-  UPDATE = \"UPDATE\",\n-  DELETE = \"DELETE\",\n-}\n-\n-type UpdateSubscribeCallback = (tenant: Tenant) => void;\n-type DeleteSubscribeCallback = (tenantID: string, tenantDomain: string) => void;\n-\n-type Message = UpdateMessage | DeleteMessage;\n-\n-interface DeleteMessage {\n-  event: EVENTS.DELETE;\n-  tenantID: string;\n-  tenantDomain: string;\n-  clientApplicationID: string;\n-}\n-\n-interface UpdateMessage {\n-  event: EVENTS.UPDATE;\n-  tenant: Tenant;\n-  clientApplicationID: string;\n-}\n-\n-/**\n- * MessageData is a type that is used to select only the data parts of the\n- * message.\n- */\n-type MessageData<T extends Message> = Omit<T, \"clientApplicationID\" | \"event\">;\n-\n-// TenantCache provides an interface for retrieving tenant stored in local\n-// memory rather than grabbing it from the database every single call.\n-export default class TenantCache {\n-  /**\n-   * tenantsByID reference the tenants that have been cached/retrieved by ID.\n-   */\n-  private readonly tenantsByID: DataLoader<string, Readonly<Tenant> | null>;\n-\n-  /**\n-   * tenantsByDomain reference the tenants that have been cached/retrieved by\n-   * Domain.\n-   */\n-  private readonly tenantsByDomain: DataLoader<string, Readonly<Tenant> | null>;\n-\n-  /**\n-   * tenantCountCache stores all the id's of all the Tenant's that have crossed\n-   * it.\n-   */\n-  private readonly tenantCountCache = new Set<string>();\n-\n-  /**\n-   * primed is true when the cache has already been fully primed.\n-   */\n-  private primed = false;\n-\n-  /**\n-   * Create a new client application ID. This prevents duplicated messages\n-   * generated by this application from being handled as external messages\n-   * as we should have already processed it.\n-   */\n-  private readonly clientApplicationID = uuid();\n-\n-  private readonly mongo: Db;\n-  private readonly emitter = new EventEmitter();\n-\n-  /**\n-   * cachingEnabled is true when tenant caching has been enabled.\n-   */\n-  public readonly cachingEnabled: boolean;\n-\n-  constructor(mongo: Db, subscriber: Redis, config: Config) {\n-    this.cachingEnabled = !config.get(\"disable_tenant_caching\");\n-    if (!this.cachingEnabled) {\n-      logger.warn(\"tenant caching is disabled\");\n-    } else {\n-      logger.debug(\"tenant caching is enabled\");\n-    }\n-\n-    // Save the Db reference.\n-    this.mongo = mongo;\n-\n-    // Configure the data loaders.\n-    this.tenantsByID = new DataLoader(\n-      async (ids) => {\n-        logger.debug({ ids: ids.length }, \"now loading tenants\");\n-        const tenants = await retrieveManyTenants(this.mongo, ids);\n-        logger.debug(\n-          { tenants: tenants.filter((t) => t !== null).length },\n-          \"loaded tenants\"\n-        );\n-\n-        tenants\n-          .filter((t) => t !== null)\n-          .forEach((t: Readonly<Tenant>) => this.tenantCountCache.add(t.id));\n-\n-        return tenants;\n-      },\n-      {\n-        cache: this.cachingEnabled,\n-      }\n-    );\n-\n-    this.tenantsByDomain = new DataLoader(\n-      async (domains) => {\n-        logger.debug({ domains: domains.length }, \"now loading tenants\");\n-        const tenants = await retrieveManyTenantsByDomain(this.mongo, domains);\n-        logger.debug(\n-          { tenants: tenants.filter((t) => t !== null).length },\n-          \"loaded tenants\"\n-        );\n-\n-        tenants\n-          .filter((t) => t !== null)\n-          .forEach((t: Readonly<Tenant>) => this.tenantCountCache.add(t.id));\n-\n-        return tenants;\n-      },\n-      {\n-        cache: this.cachingEnabled,\n-      }\n-    );\n-\n-    // We don't need updates if we aren't synced to tenant updates.\n-    if (this.cachingEnabled) {\n-      // Attach to messages on this connection so we can receive updates when\n-      // the tenant are changed.\n-      subscriber.on(\"message\", this.onMessage);\n-\n-      // Subscribe to tenant notifications.\n-      subscriber.subscribe(TENANT_CACHE_CHANNEL);\n-    }\n-  }\n-\n-  /**\n-   * count will return the number of Tenant's.\n-   */\n-  public async count(): Promise<number> {\n-    if (!this.cachingEnabled) {\n-      return countTenants(this.mongo);\n-    }\n-\n-    if (!this.primed) {\n-      await this.primeAll();\n-    }\n-\n-    return this.tenantCountCache.size;\n-  }\n-\n-  /**\n-   * primeAll will load all the tenants into the cache on startup.\n-   */\n-  public async primeAll() {\n-    if (!this.cachingEnabled) {\n-      logger.debug(\"tenants not primed, caching disabled\");\n-      return;\n-    }\n-\n-    // Grab all the tenants for this node.\n-    const tenants = await retrieveAllTenants(this.mongo);\n-\n-    // Clear out all the items in the cache.\n-    this.tenantsByID.clearAll();\n-    this.tenantsByDomain.clearAll();\n-    this.tenantCountCache.clear();\n-\n-    // Prime the cache with each of these tenants.\n-    tenants.forEach((tenant) => {\n-      this.tenantsByID.prime(tenant.id, tenant);\n-      this.tenantsByDomain.prime(tenant.domain, tenant);\n-      this.tenantCountCache.add(tenant.id);\n-    });\n-\n-    logger.debug({ tenants: tenants.length }, \"primed all tenants\");\n-    this.primed = true;\n-  }\n-\n-  /**\n-   * Symbol.asyncIterator implements the asyncIterator interface for the\n-   * TenantCache. This allows you to use the TenantCache as a asyncIterator with\n-   * a `for await (const tenant of tenants) {}` pattern to iterate over all the\n-   * tenant's on the cache. If the cache is cacheable, and not primed, the cache\n-   * will be primed at the first async iteration process. If caching is\n-   * disabled, then the tenants will bne loaded on demand and not persisted\n-   * after the iteration.\n-   */\n-  public async *[Symbol.asyncIterator]() {\n-    // If the cache isn't primed, and caching is enabled, then prime the cache\n-    // now, as this will increase performance dramatically.\n-    if (!this.primed && this.cachingEnabled) {\n-      await this.primeAll();\n-    }\n-\n-    // Copy the tenant count cache to prevent race conditions related to\n-    // clearing during iteration.\n-    const cache = new Set(this.tenantCountCache);\n-\n-    // If the tenant's are primed in the cache, then just use the count cache as\n-    // the iteration source.\n-    if (this.primed) {\n-      for (const tenantID of cache) {\n-        const tenant = await this.tenantsByID.load(tenantID);\n-        if (!tenant) {\n-          continue;\n-        }\n-\n-        yield tenant;\n-      }\n-\n-      return;\n-    }\n-\n-    // Caching must be disabled, so just grab all the tenants for this node and\n-    // iterate through each of them as we handle it.\n-    const tenants = await retrieveAllTenants(this.mongo);\n-    for (const tenant of tenants) {\n-      yield tenant;\n-    }\n-  }\n-\n-  private onUpdateMessage({ tenant }: MessageData<UpdateMessage>) {\n-    // Update the tenant cache.\n-    this.tenantsByID.clear(tenant.id).prime(tenant.id, tenant);\n-    this.tenantsByDomain.clear(tenant.domain).prime(tenant.domain, tenant);\n-    this.tenantCountCache.add(tenant.id);\n-\n-    // Publish the event for the connected listeners.\n-    this.emitter.emit(EVENTS.UPDATE, tenant);\n-  }\n-\n-  private onDeleteMessage({\n-    tenantID,\n-    tenantDomain,\n-  }: MessageData<DeleteMessage>) {\n-    // Delete the tenant in the local cache.\n-    this.tenantsByID.clear(tenantID);\n-    this.tenantsByDomain.clear(tenantDomain);\n-    this.tenantCountCache.delete(tenantID);\n-\n-    // Publish the event for the connected listeners.\n-    this.emitter.emit(EVENTS.DELETE, tenantID, tenantDomain);\n-  }\n-\n-  /**\n-   *  onMessage is fired every time the client gets a subscription event.\n-   */\n-  private onMessage = async (channel: string, data: string): Promise<void> => {\n-    // Only do things when the message is for tenant.\n-    if (channel !== TENANT_CACHE_CHANNEL) {\n-      return;\n-    }\n-\n-    try {\n-      // Parse the message (which is JSON).\n-      const message: Message = JSON.parse(data);\n-\n-      // Extract some known parameters.\n-      const { clientApplicationID } = message;\n-\n-      // Check to see if this was the update issued by this instance.\n-      if (clientApplicationID === this.clientApplicationID) {\n-        // It was, so just return here, we already updated/handled it.\n-        return;\n-      }\n-\n-      const log = logger.child({ eventName: message.event }, true);\n-      log.debug(\"received tenant message\");\n-\n-      // Send the message to the correct handler.\n-      switch (message.event) {\n-        case EVENTS.UPDATE:\n-          return this.onUpdateMessage(message);\n-        case EVENTS.DELETE:\n-          return this.onDeleteMessage(message);\n-        default:\n-          log.warn(\"received unknown event\");\n-          return;\n-      }\n-    } catch (err) {\n-      logger.error(\n-        { err },\n-        \"an error occurred while trying to handle a message\"\n-      );\n-    }\n-  };\n-\n-  public async retrieveByID(id: string): Promise<Readonly<Tenant> | null> {\n-    return this.tenantsByID.load(id);\n-  }\n-\n-  public async retrieveByDomain(\n-    domain: string\n-  ): Promise<Readonly<Tenant> | null> {\n-    return this.tenantsByDomain.load(domain);\n-  }\n-\n-  /**\n-   * This allows you to subscribe to new Tenant updates. This will also return\n-   * a function that when called, unsubscribes you from updates.\n-   *\n-   * @param updateCallback the function to be called when there is an updated Tenant.\n-   * @param deleteCallback the function to be called when a tenant needs to be purged\n-   */\n-  public subscribe(\n-    updateCallback: UpdateSubscribeCallback,\n-    deleteCallback: DeleteSubscribeCallback\n-  ) {\n-    this.emitter.on(EVENTS.UPDATE, updateCallback);\n-    this.emitter.on(EVENTS.DELETE, deleteCallback);\n-\n-    // Return the unsubscribe function.\n-    return () => {\n-      this.emitter.removeListener(EVENTS.UPDATE, updateCallback);\n-      this.emitter.removeListener(EVENTS.DELETE, deleteCallback);\n-    };\n-  }\n-\n-  private async publish(tenantID: string, conn: Redis, message: Message) {\n-    const subscribers = await conn.publish(\n-      TENANT_CACHE_CHANNEL,\n-      JSON.stringify(message)\n-    );\n-    logger.debug(\n-      { tenantID, subscribers, eventName: message.event },\n-      \"updated tenant in cache\"\n-    );\n-  }\n-\n-  /**\n-   * update will update the value for Tenant in the local cache and publish\n-   * a change notification that will be used to keep the other nodes in sync.\n-   *\n-   * @param conn a redis connection used to publish the change notification\n-   * @param tenant the updated Tenant object\n-   */\n-  public async update(conn: Redis, tenant: Tenant): Promise<void> {\n-    // Process the tenant update on this node.\n-    this.onUpdateMessage({ tenant });\n-\n-    // Notify the other nodes about the tenant change.\n-    await this.publish(tenant.id, conn, {\n-      event: EVENTS.UPDATE,\n-      tenant,\n-      clientApplicationID: this.clientApplicationID,\n-    });\n-  }\n-\n-  public async delete(conn: Redis, tenantID: string, tenantDomain: string) {\n-    // Process the tenant update on this node.\n-    this.onDeleteMessage({ tenantID, tenantDomain });\n-\n-    // Notify the other nodes about the tenant change.\n-    await this.publish(tenantID, conn, {\n-      event: EVENTS.DELETE,\n-      tenantID,\n-      tenantDomain,\n-      clientApplicationID: this.clientApplicationID,\n-    });\n-  }\n-}\n+export { default as TenantCache } from \"./cache\";\n+export { default as TenantCacheAdapter } from \"./adapter\";"
    },
    {
      "sha": "0b6e298bf3b05212601612698a01f0d440f27be6",
      "filename": "src/core/server/services/tenant/externalModerationPhases.ts",
      "status": "added",
      "additions": 322,
      "deletions": 0,
      "changes": 322,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/externalModerationPhases.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/externalModerationPhases.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/externalModerationPhases.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,322 @@\n+import { Redis } from \"ioredis\";\n+import { DateTime } from \"luxon\";\n+import { Db } from \"mongodb\";\n+\n+import { Config } from \"coral-server/config\";\n+import { getExternalModerationPhase } from \"coral-server/models/settings\";\n+import {\n+  createTenantExternalModerationPhase,\n+  CreateTenantExternalModerationPhaseInput,\n+  deleteTenantExternalModerationPhase,\n+  rotateTenantExternalModerationPhaseSigningSecret,\n+  Tenant,\n+  updateTenantExternalModerationPhase,\n+  UpdateTenantExternalModerationPhaseInput,\n+} from \"coral-server/models/tenant\";\n+\n+import { TenantCache } from \"./cache\";\n+\n+interface ExternalModerationPhaseInput {\n+  url: string;\n+  timeout: number;\n+}\n+\n+export function validateExternalModerationPhaseInput(\n+  config: Config,\n+  input: ExternalModerationPhaseInput\n+) {\n+  // Check to see that this URL is valid and has a https:// scheme if in\n+  // production mode.\n+  const url = new URL(input.url);\n+  if (config.get(\"env\") === \"production\" && url.protocol !== \"https:\") {\n+    throw new Error(`invalid scheme provided in production: ${url.protocol}`);\n+  }\n+\n+  // Check to see if the timeout value is within range.\n+  if (input.timeout < 100) {\n+    throw new Error(\"timeout value too low\");\n+  } else if (input.timeout > 10000) {\n+    throw new Error(\"timeout value too high\");\n+  }\n+}\n+\n+export async function createExternalModerationPhase(\n+  mongo: Db,\n+  redis: Redis,\n+  config: Config,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  input: CreateTenantExternalModerationPhaseInput,\n+  now: Date\n+) {\n+  // Validate the input.\n+  validateExternalModerationPhaseInput(config, input);\n+\n+  // Looks good in create this, send it off to be created.\n+  const result = await createTenantExternalModerationPhase(\n+    mongo,\n+    tenant.id,\n+    input,\n+    now\n+  );\n+  if (!result.tenant) {\n+    throw new Error(\"could not create the tenant phase, tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, result.tenant);\n+\n+  return {\n+    phase: result.phase,\n+    settings: result.tenant,\n+  };\n+}\n+\n+export async function updateExternalModerationPhase(\n+  mongo: Db,\n+  redis: Redis,\n+  config: Config,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  phaseID: string,\n+  input: UpdateTenantExternalModerationPhaseInput\n+) {\n+  // Find the phase.\n+  if (!tenant.integrations.external) {\n+    throw new Error(\n+      \"referenced phase was not found on tenant, none configured\"\n+    );\n+  }\n+\n+  let phase = getExternalModerationPhase(tenant.integrations.external, phaseID);\n+  if (!phase) {\n+    throw new Error(\"referenced phase was not found on tenant\");\n+  }\n+\n+  // Extract the input.\n+  const { url = phase.url, timeout = phase.timeout } = input;\n+\n+  // Validate the input.\n+  validateExternalModerationPhaseInput(config, {\n+    url,\n+    timeout,\n+  });\n+\n+  const updatedTenant = await updateTenantExternalModerationPhase(\n+    mongo,\n+    tenant.id,\n+    phaseID,\n+    input\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated phase.\n+  phase = getExternalModerationPhase(\n+    // We know that `external` is provided because we already verified it earlier.\n+    updatedTenant.integrations.external!,\n+    phaseID\n+  );\n+  if (!phase) {\n+    throw new Error(\"referenced phase was not found on tenant\");\n+  }\n+\n+  return phase;\n+}\n+\n+export async function deleteExternalModerationPhase(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  phaseID: string\n+) {\n+  // Find the phase.\n+  if (!tenant.integrations.external) {\n+    throw new Error(\n+      \"referenced phase was not found on tenant, none configured\"\n+    );\n+  }\n+  const phase = getExternalModerationPhase(\n+    tenant.integrations.external,\n+    phaseID\n+  );\n+  if (!phase) {\n+    throw new Error(\"referenced phase was not found on tenant\");\n+  }\n+\n+  const updatedTenant = await deleteTenantExternalModerationPhase(\n+    mongo,\n+    tenant.id,\n+    phaseID\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  return phase;\n+}\n+\n+export async function enableExternalModerationPhase(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  phaseID: string\n+) {\n+  // Find the phase.\n+  if (!tenant.integrations.external) {\n+    throw new Error(\n+      \"referenced phase was not found on tenant, none configured\"\n+    );\n+  }\n+\n+  let phase = getExternalModerationPhase(tenant.integrations.external, phaseID);\n+  if (!phase) {\n+    throw new Error(\"referenced phase was not found on tenant\");\n+  }\n+\n+  // Phase is already enabled.\n+  if (phase.enabled === true) {\n+    return phase;\n+  }\n+\n+  const updatedTenant = await updateTenantExternalModerationPhase(\n+    mongo,\n+    tenant.id,\n+    phaseID,\n+    { enabled: true }\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated phase.\n+  phase = getExternalModerationPhase(\n+    // We know that `external` is provided because we already verified it earlier.\n+    updatedTenant.integrations.external!,\n+    phaseID\n+  );\n+  if (!phase) {\n+    throw new Error(\"referenced phase was not found on tenant\");\n+  }\n+\n+  return phase;\n+}\n+\n+export async function disableExternalModerationPhase(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  phaseID: string\n+) {\n+  // Find the phase.\n+  if (!tenant.integrations.external) {\n+    throw new Error(\n+      \"referenced phase was not found on tenant, none configured\"\n+    );\n+  }\n+  let phase = getExternalModerationPhase(tenant.integrations.external, phaseID);\n+  if (!phase) {\n+    throw new Error(\"referenced phase was not found on tenant\");\n+  }\n+\n+  // Phase is already disabled.\n+  if (phase.enabled === false) {\n+    return phase;\n+  }\n+\n+  const updatedTenant = await updateTenantExternalModerationPhase(\n+    mongo,\n+    tenant.id,\n+    phaseID,\n+    { enabled: false }\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated phase.\n+  phase = getExternalModerationPhase(\n+    // We know that `external` is provided because we already verified it earlier.\n+    updatedTenant.integrations.external!,\n+    phaseID\n+  );\n+  if (!phase) {\n+    throw new Error(\"referenced phase was not found on tenant\");\n+  }\n+\n+  return phase;\n+}\n+\n+export async function rotateExternalModerationPhaseSigningSecret(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  phaseID: string,\n+  inactiveIn: number,\n+  now: Date\n+) {\n+  // Find the phase.\n+  if (!tenant.integrations.external) {\n+    throw new Error(\n+      \"referenced phase was not found on tenant, none configured\"\n+    );\n+  }\n+  let phase = getExternalModerationPhase(tenant.integrations.external, phaseID);\n+  if (!phase) {\n+    throw new Error(\"referenced phase was not found on tenant\");\n+  }\n+\n+  if (inactiveIn < 0 || inactiveIn > 86400) {\n+    throw new Error(`invalid inactiveIn passed: ${inactiveIn}`);\n+  }\n+\n+  // Compute the inactiveAt dates for the current active secrets.\n+  const inactiveAt =\n+    inactiveIn === 0\n+      ? now\n+      : DateTime.fromJSDate(now).plus({ seconds: inactiveIn }).toJSDate();\n+\n+  // Rotate the secrets.\n+  const updatedTenant = await rotateTenantExternalModerationPhaseSigningSecret(\n+    mongo,\n+    tenant.id,\n+    phaseID,\n+    inactiveAt,\n+    now\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated endpoint.\n+  phase = getExternalModerationPhase(\n+    // We know that `external` is provided because we already verified it earlier.\n+    updatedTenant.integrations.external!,\n+    phaseID\n+  );\n+  if (!phase) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  return phase;\n+}"
    },
    {
      "sha": "f85e6ffc663d6dd7f394b7820843117d500de39e",
      "filename": "src/core/server/services/tenant/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/index.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,2 +1,4 @@\n export * from \"./tenant\";\n export * from \"./sso\";\n+export * from \"./externalModerationPhases\";\n+export * from \"./webhookEndpoints\";"
    },
    {
      "sha": "3532e13eaa7b32643475dfbb1a075b846e29bb7c",
      "filename": "src/core/server/services/tenant/sso.ts",
      "status": "modified",
      "additions": 40,
      "deletions": 42,
      "changes": 82,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/sso.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/sso.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/sso.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -3,18 +3,20 @@ import { DateTime } from \"luxon\";\n import { Db } from \"mongodb\";\n \n import {\n-  createTenantSSOKey,\n-  deactivateTenantSSOKey,\n-  deleteLastUsedAtTenantSSOKey,\n-  deleteTenantSSOKey,\n+  deactivateTenantSSOSigningSecret,\n+  deleteLastUsedAtTenantSSOSigningSecret,\n+  deleteTenantSSOSigningSecret,\n+  rotateTenantSSOSigningSecret,\n   Tenant,\n } from \"coral-server/models/tenant\";\n \n-import TenantCache from \"./cache\";\n+import { TenantCache } from \"./cache\";\n \n /**\n  * regenerateSSOKey will regenerate the Single Sign-On key for the specified\n  * Tenant and notify all other Tenant's connected that the Tenant was updated.\n+ *\n+ * DEPRECATED: deprecated in favour of `rotateSSOSigningSecret`, remove in 6.2.0.\n  */\n export async function regenerateSSOKey(\n   mongo: Db,\n@@ -24,46 +26,34 @@ export async function regenerateSSOKey(\n   now: Date\n ) {\n   // Regeneration is the same as rotating but with a specific 30 day window.\n-  return rotateSSOKey(mongo, redis, cache, tenant, 30 * 24 * 60 * 60, now);\n+  return rotateSSOSigningSecret(\n+    mongo,\n+    redis,\n+    cache,\n+    tenant,\n+    30 * 24 * 60 * 60,\n+    now\n+  );\n }\n \n-export async function rotateSSOKey(\n+export async function rotateSSOSigningSecret(\n   mongo: Db,\n   redis: Redis,\n   cache: TenantCache,\n   tenant: Tenant,\n   inactiveIn: number,\n   now: Date\n ) {\n-  // Deprecate the old Tenant SSO key if it exists.\n-  if (tenant.auth.integrations.sso.keys.length > 0) {\n-    // Get the old keys that are not deprecated.\n-    const keysToDeprecate = tenant.auth.integrations.sso.keys.filter((key) => {\n-      return !key.rotatedAt;\n-    });\n-\n-    // Check to see if there are keys to deprecate.\n-    if (keysToDeprecate.length > 0) {\n-      const deprecateAt = DateTime.fromJSDate(now)\n-        .plus({ seconds: inactiveIn })\n-        .toJSDate();\n-\n-      // Deprecate all the keys that are associated on the tenant that haven't\n-      // been done.\n-      for (const key of keysToDeprecate) {\n-        await deactivateTenantSSOKey(\n-          mongo,\n-          tenant.id,\n-          key.kid,\n-          deprecateAt,\n-          now\n-        );\n-      }\n-    }\n-  }\n+  const inactiveAt = DateTime.fromJSDate(now)\n+    .plus({ seconds: inactiveIn })\n+    .toJSDate();\n \n-  // Create the new SSOKey.\n-  const updatedTenant = await createTenantSSOKey(mongo, tenant.id, now);\n+  const updatedTenant = await rotateTenantSSOSigningSecret(\n+    mongo,\n+    tenant.id,\n+    inactiveAt,\n+    now\n+  );\n   if (!updatedTenant) {\n     return null;\n   }\n@@ -74,21 +64,23 @@ export async function rotateSSOKey(\n   return updatedTenant;\n }\n \n-export async function deactivateSSOKey(\n+export async function deactivateSSOSigningSecret(\n   mongo: Db,\n   redis: Redis,\n   cache: TenantCache,\n   tenant: Tenant,\n   kid: string,\n   now: Date\n ) {\n-  const key = tenant.auth.integrations.sso.keys.find((k) => k.kid === kid);\n+  const key = tenant.auth.integrations.sso.signingSecrets.find(\n+    (k) => k.kid === kid\n+  );\n   if (!key) {\n     throw new Error(\"specified kid not found on tenant\");\n   }\n \n   // Deactivate the sso key now.\n-  const updatedTenant = await deactivateTenantSSOKey(\n+  const updatedTenant = await deactivateTenantSSOSigningSecret(\n     mongo,\n     tenant.id,\n     kid,\n@@ -105,26 +97,32 @@ export async function deactivateSSOKey(\n   return updatedTenant;\n }\n \n-export async function deleteSSOKey(\n+export async function deleteSSOSigningSecret(\n   mongo: Db,\n   redis: Redis,\n   cache: TenantCache,\n   tenant: Tenant,\n   kid: string\n ) {\n-  const key = tenant.auth.integrations.sso.keys.find((k) => k.kid === kid);\n+  const key = tenant.auth.integrations.sso.signingSecrets.find(\n+    (k) => k.kid === kid\n+  );\n   if (!key) {\n     throw new Error(\"specified kid not found on tenant\");\n   }\n \n   // Deactivate the sso key now.\n-  const updatedTenant = await deleteTenantSSOKey(mongo, tenant.id, kid);\n+  const updatedTenant = await deleteTenantSSOSigningSecret(\n+    mongo,\n+    tenant.id,\n+    kid\n+  );\n   if (!updatedTenant) {\n     return null;\n   }\n \n   // Remove the last used date entry from the Redis hash.\n-  await deleteLastUsedAtTenantSSOKey(redis, tenant.id, kid);\n+  await deleteLastUsedAtTenantSSOSigningSecret(redis, tenant.id, kid);\n \n   // Update the tenant cache.\n   await cache.update(redis, updatedTenant);"
    },
    {
      "sha": "673b14881b962c9a76fc009303f4ebd0f4080180",
      "filename": "src/core/server/services/tenant/tenant.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 262,
      "changes": 264,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/tenant.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/tenant.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/tenant.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -1,6 +1,5 @@\n import { Redis } from \"ioredis\";\n import { isUndefined, lowerCase, uniqBy } from \"lodash\";\n-import { DateTime } from \"luxon\";\n import { Db } from \"mongodb\";\n import { URL } from \"url\";\n \n@@ -13,18 +12,11 @@ import {\n   createTenant,\n   createTenantAnnouncement,\n   CreateTenantInput,\n-  createTenantWebhookEndpoint,\n-  CreateTenantWebhookEndpointInput,\n   deleteTenantAnnouncement,\n-  deleteTenantWebhookEndpoint,\n   disableTenantFeatureFlag,\n   enableTenantFeatureFlag,\n-  getWebhookEndpoint,\n-  rollTenantWebhookEndpointSecret,\n   Tenant,\n   updateTenant,\n-  updateTenantWebhookEndpoint,\n-  UpdateTenantWebhookEndpointInput,\n } from \"coral-server/models/tenant\";\n import { User } from \"coral-server/models/user\";\n import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n@@ -34,10 +26,9 @@ import {\n   GQLFEATURE_FLAG,\n   GQLSettingsInput,\n   GQLSettingsWordListInput,\n-  GQLWEBHOOK_EVENT_NAME,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n-import TenantCache from \"./cache\";\n+import TenantCache from \"./cache/cache\";\n \n export type UpdateTenant = GQLSettingsInput;\n \n@@ -165,258 +156,6 @@ export async function discoverOIDCConfiguration(issuerString: string) {\n   return discover(issuer);\n }\n \n-interface WebhookEndpointInput {\n-  url: string;\n-  all: boolean;\n-  events: GQLWEBHOOK_EVENT_NAME[];\n-}\n-\n-export function validateWebhookEndpointInput(\n-  config: Config,\n-  input: WebhookEndpointInput\n-) {\n-  // Check to see that this URL is valid and has a https:// scheme if in\n-  // production mode.\n-  const url = new URL(input.url);\n-  if (config.get(\"env\") === \"production\" && url.protocol !== \"https:\") {\n-    throw new Error(`invalid scheme provided in production: ${url.protocol}`);\n-  }\n-\n-  // Ensure that either the \"all\" or \"events\" is provided but not both.\n-  if (input.all && input.events.length > 0) {\n-    throw new Error(\"both all events and specific events were requested\");\n-  }\n-}\n-\n-export async function createWebhookEndpoint(\n-  mongo: Db,\n-  redis: Redis,\n-  config: Config,\n-  cache: TenantCache,\n-  tenant: Tenant,\n-  input: CreateTenantWebhookEndpointInput,\n-  now: Date\n-) {\n-  // Validate the input.\n-  validateWebhookEndpointInput(config, input);\n-\n-  // Looks good in create this, send it off to be created.\n-  const result = await createTenantWebhookEndpoint(\n-    mongo,\n-    tenant.id,\n-    input,\n-    now\n-  );\n-  if (!result.tenant) {\n-    throw new Error(\"could not create the tenant endpoint, tenant not found\");\n-  }\n-\n-  // Update the tenant cache.\n-  await cache.update(redis, result.tenant);\n-\n-  return {\n-    endpoint: result.endpoint,\n-    settings: result.tenant,\n-  };\n-}\n-\n-export async function updateWebhookEndpoint(\n-  mongo: Db,\n-  redis: Redis,\n-  config: Config,\n-  cache: TenantCache,\n-  tenant: Tenant,\n-  endpointID: string,\n-  input: UpdateTenantWebhookEndpointInput\n-) {\n-  // Find the endpoint.\n-  let endpoint = getWebhookEndpoint(tenant, endpointID);\n-  if (!endpoint) {\n-    throw new Error(\"referenced endpoint was not found on tenant\");\n-  }\n-\n-  // Extract the input.\n-  const {\n-    url = endpoint.url,\n-    all = endpoint.all,\n-    events = endpoint.events,\n-  } = input;\n-\n-  // Validate the input.\n-  validateWebhookEndpointInput(config, {\n-    url,\n-    all,\n-    events,\n-  });\n-\n-  const updatedTenant = await updateTenantWebhookEndpoint(\n-    mongo,\n-    tenant.id,\n-    endpointID,\n-    input\n-  );\n-  if (!updatedTenant) {\n-    throw new Error(\"tenant not found\");\n-  }\n-\n-  // Update the tenant cache.\n-  await cache.update(redis, updatedTenant);\n-\n-  // Find the updated endpoint.\n-  endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n-  if (!endpoint) {\n-    throw new Error(\"referenced endpoint was not found on tenant\");\n-  }\n-\n-  return endpoint;\n-}\n-\n-export async function enableWebhookEndpoint(\n-  mongo: Db,\n-  redis: Redis,\n-  cache: TenantCache,\n-  tenant: Tenant,\n-  endpointID: string\n-) {\n-  // Find the endpoint.\n-  let endpoint = getWebhookEndpoint(tenant, endpointID);\n-  if (!endpoint) {\n-    throw new Error(\"referenced endpoint was not found on tenant\");\n-  }\n-\n-  // Endpoint is already enabled.\n-  if (endpoint.enabled === true) {\n-    return endpoint;\n-  }\n-\n-  const updatedTenant = await updateTenantWebhookEndpoint(\n-    mongo,\n-    tenant.id,\n-    endpointID,\n-    { enabled: true }\n-  );\n-  if (!updatedTenant) {\n-    throw new Error(\"tenant not found\");\n-  }\n-\n-  // Update the tenant cache.\n-  await cache.update(redis, updatedTenant);\n-\n-  // Find the updated endpoint.\n-  endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n-  if (!endpoint) {\n-    throw new Error(\"referenced endpoint was not found on tenant\");\n-  }\n-\n-  return endpoint;\n-}\n-\n-export async function disableWebhookEndpoint(\n-  mongo: Db,\n-  redis: Redis,\n-  cache: TenantCache,\n-  tenant: Tenant,\n-  endpointID: string\n-) {\n-  // Find the endpoint.\n-  let endpoint = getWebhookEndpoint(tenant, endpointID);\n-  if (!endpoint) {\n-    throw new Error(\"referenced endpoint was not found on tenant\");\n-  }\n-\n-  // Endpoint is already disabled.\n-  if (endpoint.enabled === false) {\n-    return endpoint;\n-  }\n-\n-  const updatedTenant = await updateTenantWebhookEndpoint(\n-    mongo,\n-    tenant.id,\n-    endpointID,\n-    { enabled: false }\n-  );\n-  if (!updatedTenant) {\n-    throw new Error(\"tenant not found\");\n-  }\n-\n-  // Update the tenant cache.\n-  await cache.update(redis, updatedTenant);\n-\n-  // Find the updated endpoint.\n-  endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n-  if (!endpoint) {\n-    throw new Error(\"referenced endpoint was not found on tenant\");\n-  }\n-\n-  return endpoint;\n-}\n-\n-export async function deleteWebhookEndpoint(\n-  mongo: Db,\n-  redis: Redis,\n-  cache: TenantCache,\n-  tenant: Tenant,\n-  endpointID: string\n-) {\n-  // Find the endpoint.\n-  const endpoint = getWebhookEndpoint(tenant, endpointID);\n-  if (!endpoint) {\n-    throw new Error(\"referenced endpoint was not found on tenant\");\n-  }\n-\n-  const updatedTenant = await deleteTenantWebhookEndpoint(\n-    mongo,\n-    tenant.id,\n-    endpointID\n-  );\n-  if (!updatedTenant) {\n-    throw new Error(\"tenant not found\");\n-  }\n-\n-  // Update the tenant cache.\n-  await cache.update(redis, updatedTenant);\n-\n-  return endpoint;\n-}\n-\n-export async function rotateWebhookEndpointSecret(\n-  mongo: Db,\n-  redis: Redis,\n-  cache: TenantCache,\n-  tenant: Tenant,\n-  endpointID: string,\n-  inactiveIn: number,\n-  now: Date\n-) {\n-  // Compute the inactiveAt dates for the current active secrets.\n-  const inactiveAt = DateTime.fromJSDate(now)\n-    .plus({ seconds: inactiveIn })\n-    .toJSDate();\n-\n-  // Rotate the secrets.\n-  const updatedTenant = await rollTenantWebhookEndpointSecret(\n-    mongo,\n-    tenant.id,\n-    endpointID,\n-    inactiveAt,\n-    now\n-  );\n-  if (!updatedTenant) {\n-    throw new Error(\"tenant not found\");\n-  }\n-\n-  // Update the tenant cache.\n-  await cache.update(redis, updatedTenant);\n-\n-  // Find the updated endpoint.\n-  const endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n-  if (!endpoint) {\n-    throw new Error(\"referenced endpoint was not found on tenant\");\n-  }\n-\n-  return endpoint;\n-}\n-\n export async function enableFeatureFlag(\n   mongo: Db,\n   redis: Redis,\n@@ -484,6 +223,7 @@ export async function createAnnouncement(\n     throw new Error(\"tenant not found\");\n   }\n   await cache.update(redis, updated);\n+\n   return updated;\n }\n "
    },
    {
      "sha": "4aad8e25b94f83ffa5731b769b39075646f29dbc",
      "filename": "src/core/server/services/tenant/webhookEndpoints.ts",
      "status": "added",
      "additions": 281,
      "deletions": 0,
      "changes": 281,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/webhookEndpoints.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/services/tenant/webhookEndpoints.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/webhookEndpoints.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -0,0 +1,281 @@\n+import { Redis } from \"ioredis\";\n+import { DateTime } from \"luxon\";\n+import { Db } from \"mongodb\";\n+\n+import { Config } from \"coral-server/config\";\n+import {\n+  createTenantWebhookEndpoint,\n+  CreateTenantWebhookEndpointInput,\n+  deleteTenantWebhookEndpoint,\n+  getWebhookEndpoint,\n+  rotateTenantWebhookEndpointSigningSecret,\n+  Tenant,\n+  updateTenantWebhookEndpoint,\n+  UpdateTenantWebhookEndpointInput,\n+} from \"coral-server/models/tenant\";\n+\n+import { GQLWEBHOOK_EVENT_NAME } from \"coral-server/graph/schema/__generated__/types\";\n+\n+import { TenantCache } from \"./cache\";\n+\n+interface WebhookEndpointInput {\n+  url: string;\n+  all: boolean;\n+  events: GQLWEBHOOK_EVENT_NAME[];\n+}\n+\n+export function validateWebhookEndpointInput(\n+  config: Config,\n+  input: WebhookEndpointInput\n+) {\n+  // Check to see that this URL is valid and has a https:// scheme if in\n+  // production mode.\n+  const url = new URL(input.url);\n+  if (config.get(\"env\") === \"production\" && url.protocol !== \"https:\") {\n+    throw new Error(`invalid scheme provided in production: ${url.protocol}`);\n+  }\n+\n+  // Ensure that either the \"all\" or \"events\" is provided but not both.\n+  if (input.all && input.events.length > 0) {\n+    throw new Error(\"both all events and specific events were requested\");\n+  }\n+}\n+\n+export async function createWebhookEndpoint(\n+  mongo: Db,\n+  redis: Redis,\n+  config: Config,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  input: CreateTenantWebhookEndpointInput,\n+  now: Date\n+) {\n+  // Validate the input.\n+  validateWebhookEndpointInput(config, input);\n+\n+  // Looks good in create this, send it off to be created.\n+  const result = await createTenantWebhookEndpoint(\n+    mongo,\n+    tenant.id,\n+    input,\n+    now\n+  );\n+  if (!result.tenant) {\n+    throw new Error(\"could not create the tenant endpoint, tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, result.tenant);\n+\n+  return {\n+    endpoint: result.endpoint,\n+    settings: result.tenant,\n+  };\n+}\n+\n+export async function updateWebhookEndpoint(\n+  mongo: Db,\n+  redis: Redis,\n+  config: Config,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  endpointID: string,\n+  input: UpdateTenantWebhookEndpointInput\n+) {\n+  // Find the endpoint.\n+  let endpoint = getWebhookEndpoint(tenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  // Extract the input.\n+  const {\n+    url = endpoint.url,\n+    all = endpoint.all,\n+    events = endpoint.events,\n+  } = input;\n+\n+  // Validate the input.\n+  validateWebhookEndpointInput(config, {\n+    url,\n+    all,\n+    events,\n+  });\n+\n+  const updatedTenant = await updateTenantWebhookEndpoint(\n+    mongo,\n+    tenant.id,\n+    endpointID,\n+    input\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated endpoint.\n+  endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  return endpoint;\n+}\n+\n+export async function enableWebhookEndpoint(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  endpointID: string\n+) {\n+  // Find the endpoint.\n+  let endpoint = getWebhookEndpoint(tenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  // Endpoint is already enabled.\n+  if (endpoint.enabled === true) {\n+    return endpoint;\n+  }\n+\n+  const updatedTenant = await updateTenantWebhookEndpoint(\n+    mongo,\n+    tenant.id,\n+    endpointID,\n+    { enabled: true }\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated endpoint.\n+  endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  return endpoint;\n+}\n+\n+export async function disableWebhookEndpoint(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  endpointID: string\n+) {\n+  // Find the endpoint.\n+  let endpoint = getWebhookEndpoint(tenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  // Endpoint is already disabled.\n+  if (endpoint.enabled === false) {\n+    return endpoint;\n+  }\n+\n+  const updatedTenant = await updateTenantWebhookEndpoint(\n+    mongo,\n+    tenant.id,\n+    endpointID,\n+    { enabled: false }\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated endpoint.\n+  endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  return endpoint;\n+}\n+\n+export async function deleteWebhookEndpoint(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  endpointID: string\n+) {\n+  // Find the endpoint.\n+  const endpoint = getWebhookEndpoint(tenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  const updatedTenant = await deleteTenantWebhookEndpoint(\n+    mongo,\n+    tenant.id,\n+    endpointID\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  return endpoint;\n+}\n+\n+export async function rotateWebhookEndpointSigningSecret(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  endpointID: string,\n+  inactiveIn: number,\n+  now: Date\n+) {\n+  // Find the endpoint.\n+  let endpoint = getWebhookEndpoint(tenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+  if (inactiveIn < 0 || inactiveIn > 86400) {\n+    throw new Error(`invalid inactiveIn passed: ${inactiveIn}`);\n+  }\n+\n+  // Compute the inactiveAt dates for the current active secrets.\n+  const inactiveAt =\n+    inactiveIn === 0\n+      ? now\n+      : DateTime.fromJSDate(now).plus({ seconds: inactiveIn }).toJSDate();\n+\n+  // Rotate the secrets.\n+  const updatedTenant = await rotateTenantWebhookEndpointSigningSecret(\n+    mongo,\n+    tenant.id,\n+    endpointID,\n+    inactiveAt,\n+    now\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated endpoint.\n+  endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  return endpoint;\n+}"
    },
    {
      "sha": "a7b82a626b8091443db4803d6dd3d061fc917c03",
      "filename": "src/core/server/stacks/createComment.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/stacks/createComment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/stacks/createComment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/stacks/createComment.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -23,6 +23,7 @@ import {\n   retrieveComment,\n } from \"coral-server/models/comment\";\n import {\n+  getDepth,\n   hasAncestors,\n   hasPublishedStatus,\n } from \"coral-server/models/comment/helpers\";\n@@ -91,7 +92,7 @@ const markCommentAsAnswered = async (\n     // If we are the export on this story...\n     story.settings.expertIDs.some((id) => id === author.id) &&\n     // And this is the first reply (depth of 1)...\n-    comment.ancestorIDs.length === 1\n+    getDepth(comment) === 1\n   ) {\n     // We need to mark the parent question as answered.\n     // - Remove the unanswered tag.\n@@ -170,14 +171,14 @@ export default async function create(\n   try {\n     // Run the comment through the moderation phases.\n     result = await processForModeration({\n-      action: \"NEW\",\n       log,\n       mongo,\n       redis,\n       config,\n-      nudge,\n-      story,\n+      action: \"NEW\",\n       tenant,\n+      story,\n+      nudge,\n       comment: { ...input, ancestorIDs },\n       author,\n       req,\n@@ -221,7 +222,8 @@ export default async function create(\n     {\n       ...input,\n       siteID: story.siteID,\n-      tags,\n+      // Remap the tags to include the createdAt.\n+      tags: tags.map((tag) => ({ type: tag, createdAt: now })),\n       body,\n       status,\n       ancestorIDs,\n@@ -277,10 +279,11 @@ export default async function create(\n           ...action,\n           commentID: comment.id,\n           commentRevisionID: revision.id,\n-\n-          // Store the Story ID on the action.\n           storyID: story.id,\n           siteID: story.siteID,\n+\n+          // All these actions are created by the system.\n+          userID: null,\n         })\n       ),\n       now"
    },
    {
      "sha": "e4829856f0e55ee685f2b5e2e2f1446a4351350a",
      "filename": "src/core/server/stacks/editComment.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/stacks/editComment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/stacks/editComment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/stacks/editComment.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -103,13 +103,13 @@ export default async function edit(\n \n   // Run the comment through the moderation phases.\n   const { body, status, metadata, actions } = await processForModeration({\n-    action: \"EDIT\",\n     log,\n     mongo,\n     redis,\n     config,\n-    story,\n+    action: \"EDIT\",\n     tenant,\n+    story,\n     comment: {\n       ...originalStaleComment,\n       ...input,\n@@ -161,6 +161,9 @@ export default async function edit(\n           commentRevisionID: result.revision.id,\n           storyID: story.id,\n           siteID: story.siteID,\n+\n+          // All these actions are created by the system.\n+          userID: null,\n         })\n       ),\n       now"
    },
    {
      "sha": "879d2ec2ea103f44c27d490ce2d9d73f5bd0580f",
      "filename": "src/core/server/types/express.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/types/express.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/core/server/types/express.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/types/express.ts?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -4,7 +4,7 @@ import { Logger } from \"coral-server/logger\";\n import { PersistedQuery } from \"coral-server/models/queries\";\n import { Tenant } from \"coral-server/models/tenant\";\n import { User } from \"coral-server/models/user\";\n-import TenantCache from \"coral-server/services/tenant/cache\";\n+import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n export interface CoralRequest {\n   id: string;"
    },
    {
      "sha": "eefe05f1536d18d1fef54218d2d5ea7d5ee66daa",
      "filename": "src/locales/en-US/admin.ftl",
      "status": "modified",
      "additions": 110,
      "deletions": 0,
      "changes": 110,
      "blob_url": "https://github.com/coralproject/talk/blob/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/locales/en-US/admin.ftl",
      "raw_url": "https://github.com/coralproject/talk/raw/ed92f4916db4494e75eee7c5a51f58cd353368e9/src/locales/en-US/admin.ftl",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/locales/en-US/admin.ftl?ref=ed92f4916db4494e75eee7c5a51f58cd353368e9",
      "patch": "@@ -145,6 +145,7 @@ configure-sideBarNavigation-general = General\n configure-sideBarNavigation-authentication = Authentication\n configure-sideBarNavigation-moderation = Moderation\n configure-sideBarNavigation-organization = Organization\n+configure-sideBarNavigation-moderationPhases = Moderation Phases\n configure-sideBarNavigation-advanced = Advanced\n configure-sideBarNavigation-email = Email\n configure-sideBarNavigation-bannedAndSuspectWords = Banned and Suspect Words\n@@ -158,7 +159,116 @@ configure-onOffField-off = Off\n configure-radioButton-allow = Allow\n configure-radioButton-dontAllow = Don't allow\n \n+### Moderation Phases\n+\n+configure-moderationPhases-generatedAt = KEY GENERATED AT:\n+  { DATETIME($date, year: \"numeric\", month: \"numeric\", day: \"numeric\", hour: \"numeric\", minute: \"numeric\") }\n+configure-moderationPhases-phaseNotFound = External moderation phase not found\n+configure-moderationPhases-experimentalFeature =\n+  The custom moderation phases feature is currently in active development.\n+  Please <ContactUsLink>contact us with any feedback or requests</ContactUsLink>.\n+configure-moderationPhases-header-title = Moderation Phases\n+configure-moderationPhases-description =\n+  Configure a external moderation phase to automate some moderation\n+  actions. Moderation requests will be JSON encoded and signed. To\n+  learn more about moderation requests, visit our <externalLink>docs</externalLink>.\n+configure-moderationPhases-addExternalModerationPhaseButton =\n+  Add external moderation phase\n+configure-moderationPhases-moderationPhases = Moderation Phases\n+configure-moderationPhases-name = Name\n+configure-moderationPhases-status = Status\n+configure-moderationPhases-noExternalModerationPhases =\n+  There are no external moderation phases configured, add one above.\n+configure-moderationPhases-enabledModerationPhase = Enabled\n+configure-moderationPhases-disableModerationPhase = Disabled\n+configure-moderationPhases-detailsButton = Details <icon>keyboard_arrow_right</icon>\n+configure-moderationPhases-addExternalModerationPhase = Add external moderation phase\n+configure-moderationPhases-updateExternalModerationPhaseButton = Update details\n+configure-moderationPhases-cancelButton = Cancel\n+configure-moderationPhases-format = Comment Body Format\n+configure-moderationPhases-endpointURL = Callback URL\n+configure-moderationPhases-timeout = Timeout\n+configure-moderationPhases-timeout-details =\n+  The time that Coral will wait for your moderation response in milliseconds.\n+configure-moderationPhases-format-details =\n+  The format that Coral will send the comment body in. By default, Coral will\n+  send the comment in the original HTML encoded format. If \"Plain Text\" is\n+  selected, then the HTML stripped version will be sent instead.\n+configure-moderationPhases-format-html = HTML\n+configure-moderationPhases-format-plain = Plain Text\n+configure-moderationPhases-endpointURL-details =\n+  The URL that Coral moderation requests will be POST'ed to. The provided URL\n+  must respond within the designated timeout or the decision of the moderation\n+  action will be skipped.\n+configure-moderationPhases-configureExternalModerationPhase =\n+  Configure external moderation phase\n+configure-moderationPhases-phaseDetails = Phase details\n+onfigure-moderationPhases-status = Status\n+configure-moderationPhases-signingSecret = Signing secret\n+configure-moderationPhases-signingSecretDescription =\n+  The following signing secret is used to sign request payloads sent\n+  to the URL. To learn more about webhook signing, visit our <externalLink>docs</externalLink>.\n+configure-moderationPhases-phaseStatus = Phase status\n+configure-moderationPhases-status = Status\n+configure-moderationPhases-signingSecret = Signing secret\n+configure-moderationPhases-signingSecretDescription =\n+  The following signing secret is used to sign request payloads sent to the URL.\n+  To learn more about webhook signing, visit our <externalLink>docs</externalLink>.\n+configure-moderationPhases-dangerZone = Danger Zone\n+configure-moderationPhases-rotateSigningSecret = Rotate signing secret\n+configure-moderationPhases-rotateSigningSecretDescription =\n+  Rotating the signing secret will allow to you to safely replace a signing\n+  secret used in production with a delay.\n+configure-moderationPhases-rotateSigningSecretButton = Rotate signing secret\n+\n+configure-moderationPhases-disableExternalModerationPhase =\n+  Disable external moderation phase\n+configure-moderationPhases-disableExternalModerationPhaseDescription =\n+  This external moderation phase is current enabled. By disabling, no new\n+  moderation queries will be sent to the URL provided.\n+configure-moderationPhases-disableExternalModerationPhaseButton = Disable phase\n+configure-moderationPhases-enableExternalModerationPhase =\n+  Enable external moderation phase\n+configure-moderationPhases-enableExternalModerationPhaseDescription =\n+  This external moderation phase is currently disabled. By enabling, new\n+  moderation queries will be sent to the URL provided.\n+configure-moderationPhases-enableExternalModerationPhaseButton = Enable phase\n+configure-moderationPhases-deleteExternalModerationPhase =\n+  Delete external moderation phase\n+configure-moderationPhases-deleteExternalModerationPhaseDescription =\n+  Deleting this external moderation phase will stop any new moderation queries\n+  from being sent to this URL and will remove all the associated settings.\n+configure-moderationPhases-deleteExternalModerationPhaseButton = Delete phase\n+configure-moderationPhases-rotateSigningSecret = Rotate signing secret\n+configure-moderationPhases-rotateSigningSecretHelper =\n+  After it expires, signatures will no longer be generated with the old secret.\n+configure-moderationPhases-expiresOldSecret =\n+  Expire the old secret\n+configure-moderationPhases-expiresOldSecretImmediately =\n+  Immediately\n+configure-moderationPhases-expiresOldSecretHoursFromNow =\n+  { $hours ->\n+    [1] 1 hour\n+    *[other] { $hours } hours\n+  } from now\n+configure-moderationPhases-rotateSigningSecretSuccessUseNewSecret =\n+  External moderation phase signing secret has been rotated. Please ensure you\n+  update your integrations to use the new secret below.\n+configure-moderationPhases-confirmDisable =\n+  Disabling this external moderation phase will stop any new moderation queries\n+  from being sent to this URL. Are you sure you want to continue?\n+configure-moderationPhases-confirmEnable =\n+  Enabling the external moderation phase will start to send moderation queries\n+  to this URL. Are you sure you want to continue?\n+configure-moderationPhases-confirmDelete =\n+  Deleting this external moderation phase will stop any new moderation queries\n+  from being sent to this URL and will remove all the associated settings. Are\n+  you sure you want to continue?\n+\n ### Webhooks\n+\n+configure-webhooks-generatedAt = KEY GENERATED AT:\n+  { DATETIME($date, year: \"numeric\", month: \"numeric\", day: \"numeric\", hour: \"numeric\", minute: \"numeric\") }\n configure-webhooks-experimentalFeature =\n   The webhook feature is currently in active development. Events may be\n   added or removed. Please <ContactUsLink>contact us with any feedback or requests</ContactUsLink>."
    }
  ]
}
