{
  "sha": "42d0c67cb3d7dde750217ab1bb61609900211217",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjQyZDBjNjdjYjNkN2RkZTc1MDIxN2FiMWJiNjE2MDk5MDAyMTEyMTc=",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2020-06-13T23:57:43Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-06-14T00:07:33Z"
    },
    "message": "add context to server errors, properly close datastore in case of errors",
    "tree": {
      "sha": "edab020bf42a7865712c2a77ccbfee1e0f3469bc",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/edab020bf42a7865712c2a77ccbfee1e0f3469bc"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/42d0c67cb3d7dde750217ab1bb61609900211217",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/42d0c67cb3d7dde750217ab1bb61609900211217",
  "html_url": "https://github.com/umputun/remark42/commit/42d0c67cb3d7dde750217ab1bb61609900211217",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/42d0c67cb3d7dde750217ab1bb61609900211217/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "46f3ced83d5084f80c4d6ab8594bb8f6f1360143",
      "url": "https://api.github.com/repos/umputun/remark42/commits/46f3ced83d5084f80c4d6ab8594bb8f6f1360143",
      "html_url": "https://github.com/umputun/remark42/commit/46f3ced83d5084f80c4d6ab8594bb8f6f1360143"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 13,
    "deletions": 8
  },
  "files": [
    {
      "sha": "f6f14b1c632676ea73e96c50b3f7cba99f41f746",
      "filename": "backend/app/cmd/avatar.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/42d0c67cb3d7dde750217ab1bb61609900211217/backend/app/cmd/avatar.go",
      "raw_url": "https://github.com/umputun/remark42/raw/42d0c67cb3d7dde750217ab1bb61609900211217/backend/app/cmd/avatar.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/avatar.go?ref=42d0c67cb3d7dde750217ab1bb61609900211217",
      "patch": "@@ -72,12 +72,12 @@ func (ac *AvatarCommand) makeAvatarStore(gr AvatarGroup) (avatar.Store, error) {\n \tswitch gr.Type {\n \tcase \"fs\":\n \t\tif err := makeDirs(gr.FS.Path); err != nil {\n-\t\t\treturn nil, err\n+\t\t\treturn nil, errors.Wrap(err, \"failed to create avatar store\")\n \t\t}\n \t\treturn avatar.NewLocalFS(gr.FS.Path), nil\n \tcase \"bolt\":\n \t\tif err := makeDirs(path.Dir(gr.Bolt.File)); err != nil {\n-\t\t\treturn nil, err\n+\t\t\treturn nil, errors.Wrap(err, \"failed to create avatar store\")\n \t\t}\n \t\treturn avatar.NewBoltDB(gr.Bolt.File, bolt.Options{})\n \t}"
    },
    {
      "sha": "b03b7612c207e3a0c9e07490c7c3e30041f9286b",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/42d0c67cb3d7dde750217ab1bb61609900211217/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark42/raw/42d0c67cb3d7dde750217ab1bb61609900211217/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server.go?ref=42d0c67cb3d7dde750217ab1bb61609900211217",
      "patch": "@@ -322,7 +322,7 @@ func (s *ServerCommand) HandleDeprecatedFlags() (result []DeprecatedFlag) {\n func (s *ServerCommand) newServerApp() (*serverApp, error) {\n \n \tif err := makeDirs(s.BackupLocation); err != nil {\n-\t\treturn nil, err\n+\t\treturn nil, errors.Wrap(err, \"failed to create backup store\")\n \t}\n \n \tif !strings.HasPrefix(s.RemarkURL, \"http://\") && !strings.HasPrefix(s.RemarkURL, \"https://\") {\n@@ -362,16 +362,19 @@ func (s *ServerCommand) newServerApp() (*serverApp, error) {\n \n \tloadingCache, err := s.makeCache()\n \tif err != nil {\n+\t\t_ = dataService.Close()\n \t\treturn nil, errors.Wrap(err, \"failed to make cache\")\n \t}\n \n \tavatarStore, err := s.makeAvatarStore()\n \tif err != nil {\n+\t\t_ = dataService.Close()\n \t\treturn nil, errors.Wrap(err, \"failed to make avatar store\")\n \t}\n \tauthRefreshCache := newAuthRefreshCache()\n \tauthenticator, err := s.makeAuthenticator(dataService, avatarStore, adminStore, authRefreshCache)\n \tif err != nil {\n+\t\t_ = dataService.Close()\n \t\treturn nil, errors.Wrap(err, \"failed to make authenticator\")\n \t}\n \n@@ -418,6 +421,7 @@ func (s *ServerCommand) newServerApp() (*serverApp, error) {\n \n \tsslConfig, err := s.makeSSLConfig()\n \tif err != nil {\n+\t\t_ = dataService.Close()\n \t\treturn nil, errors.Wrap(err, \"failed to make config of ssl server params\")\n \t}\n \n@@ -459,13 +463,14 @@ func (s *ServerCommand) newServerApp() (*serverApp, error) {\n \tif s.Auth.Dev {\n \t\tda, errDevAuth := authenticator.DevAuth()\n \t\tif errDevAuth != nil {\n+\t\t\t_ = dataService.Close()\n \t\t\treturn nil, errors.Wrap(errDevAuth, \"can't make dev oauth2 server\")\n \t\t}\n \t\tdevAuth = da\n \t}\n \n \treturn &serverApp{\n-\t\tServerCommand: s,\n+\t\tServerCommand:    s,\n \t\trestSrv:          srv,\n \t\tmigratorSrv:      migr,\n \t\texporter:         exporter,\n@@ -586,12 +591,12 @@ func (s *ServerCommand) makeAvatarStore() (avatar.Store, error) {\n \tswitch s.Avatar.Type {\n \tcase \"fs\":\n \t\tif err := makeDirs(s.Avatar.FS.Path); err != nil {\n-\t\t\treturn nil, err\n+\t\t\treturn nil, errors.Wrap(err, \"failed to create avatar store\")\n \t\t}\n \t\treturn avatar.NewLocalFS(s.Avatar.FS.Path), nil\n \tcase \"bolt\":\n \t\tif err := makeDirs(path.Dir(s.Avatar.Bolt.File)); err != nil {\n-\t\t\treturn nil, err\n+\t\t\treturn nil, errors.Wrap(err, \"failed to create avatar store\")\n \t\t}\n \t\treturn avatar.NewBoltDB(s.Avatar.Bolt.File, bolt.Options{})\n \tcase \"uri\":\n@@ -618,7 +623,7 @@ func (s *ServerCommand) makePicturesStore() (*image.Service, error) {\n \t\treturn image.NewService(boltImageStore, imageServiceParams), nil\n \tcase \"fs\":\n \t\tif err := makeDirs(s.Image.FS.Path); err != nil {\n-\t\t\treturn nil, err\n+\t\t\treturn nil, errors.Wrap(err, \"failed to create pictures store\")\n \t\t}\n \t\treturn image.NewService(&image.FileSystem{\n \t\t\tLocation:   s.Image.FS.Path,"
    },
    {
      "sha": "c2efd2752a841e407dee936054a730b45177e2a8",
      "filename": "backend/app/cmd/server_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/42d0c67cb3d7dde750217ab1bb61609900211217/backend/app/cmd/server_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/42d0c67cb3d7dde750217ab1bb61609900211217/backend/app/cmd/server_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server_test.go?ref=42d0c67cb3d7dde750217ab1bb61609900211217",
      "patch": "@@ -306,7 +306,7 @@ func TestServerApp_Failed(t *testing.T) {\n \t_, err = p.ParseArgs([]string{\"--store.bolt.path=/tmp\", \"--backup=/dev/null/not-writable\"})\n \tassert.NoError(t, err)\n \t_, err = opts.newServerApp()\n-\tassert.EqualError(t, err, \"can't make directory /dev/null/not-writable: mkdir /dev/null: not a directory\")\n+\tassert.EqualError(t, err, \"failed to create backup store: can't make directory /dev/null/not-writable: mkdir /dev/null: not a directory\")\n \tt.Log(err)\n \n \t// invalid url"
    }
  ]
}
