{
  "sha": "64ba5b1d21f9c5c24a3799a5615dd321c6f2e778",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo2NGJhNWIxZDIxZjljNWMyNGEzNzk5YTU2MTVkZDMyMWM2ZjJlNzc4",
  "commit": {
    "author": {
      "name": "Martin Brennan",
      "email": "mjrbrennan@gmail.com",
      "date": "2021-01-05T05:32:04Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-01-05T05:32:04Z"
    },
    "message": "FIX: Group SMTP email improvements (#11633)\n\nFixes a rare race condition causing the `Imap::Sync` class to create an incoming email and associated post/topic, which then kicks off the PostAlerter to notify others in the PM about a reply in the topic, but for the OP which is not necessary (because the person emailing the IMAP inbox already knows about the OP). Basically, we should never be sending the group SMTP email for the first post in a topic.\r\n\r\nAlso in this PR:\r\n\r\n* Custom attribute accessors for the to/from/cc addresses on `IncomingEmail`, to parse them from an array to a joined string so the logic for this is only in one place.\r\n* Store extra detail against the `IncomingEmail` created in `GroupSmtpMailer`\r\n* regex test Mail header Reply-To as string instead of Field, which fixes `warning: deprecated Object#=~ is called on Mail::Field; it always returns nil`\r\n* Add DEBUG_IMAP to log all IMAP logs as warnings for easier debugging\r\n* Changed the Rails logging to `ImapSyncLog` in the `GroupSmtpMailer`",
    "tree": {
      "sha": "a587fbc6d17a2b844e5cd4574d610d38a9093611",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/a587fbc6d17a2b844e5cd4574d610d38a9093611"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf8/nUCRBK7hj4Ov3rIwAAdHIIAKkHO+1UP4UOCDLoF2+onCSg\nOD2VPaGF8vDi3e8XJeDp9Dvv8Ijr/QB+5KmMAn/5+fFd0cvxsmjsCuJHDDzbKelj\nTrbysEMhGhnMrEHGMvbWgOK5wblIK3rQMA1mR/HhGuPI6BuGmlySUSK3Hep19rhu\nnHEtNrJOaNn+cheHBHSFJTp7ZjWLrlwKMUkYJzud5TJiYMFa17h+s1ppYlBa8y7K\n7630HB3ndWEbPNaQvIGaRzCrIEoYUjfjJoyv0wQGIQmzejaiK9loGB/j4pnqTmDZ\nNoCzHGRp+cmR/vYtsUebK7RK+wReGUJQev9ASBi0qp1ZMmikWvnzj1LYSHQZCDw=\n=DbQZ\n-----END PGP SIGNATURE-----\n",
      "payload": "tree a587fbc6d17a2b844e5cd4574d610d38a9093611\nparent 4f72830eb02ec063866a2cd882b5c2dd0ede5800\nauthor Martin Brennan <mjrbrennan@gmail.com> 1609824724 +1000\ncommitter GitHub <noreply@github.com> 1609824724 +1000\n\nFIX: Group SMTP email improvements (#11633)\n\nFixes a rare race condition causing the `Imap::Sync` class to create an incoming email and associated post/topic, which then kicks off the PostAlerter to notify others in the PM about a reply in the topic, but for the OP which is not necessary (because the person emailing the IMAP inbox already knows about the OP). Basically, we should never be sending the group SMTP email for the first post in a topic.\r\n\r\nAlso in this PR:\r\n\r\n* Custom attribute accessors for the to/from/cc addresses on `IncomingEmail`, to parse them from an array to a joined string so the logic for this is only in one place.\r\n* Store extra detail against the `IncomingEmail` created in `GroupSmtpMailer`\r\n* regex test Mail header Reply-To as string instead of Field, which fixes `warning: deprecated Object#=~ is called on Mail::Field; it always returns nil`\r\n* Add DEBUG_IMAP to log all IMAP logs as warnings for easier debugging\r\n* Changed the Rails logging to `ImapSyncLog` in the `GroupSmtpMailer`"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778",
  "html_url": "https://github.com/discourse/discourse/commit/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/comments",
  "author": {
    "login": "martin-brennan",
    "id": 920448,
    "node_id": "MDQ6VXNlcjkyMDQ0OA==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/920448?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/martin-brennan",
    "html_url": "https://github.com/martin-brennan",
    "followers_url": "https://api.github.com/users/martin-brennan/followers",
    "following_url": "https://api.github.com/users/martin-brennan/following{/other_user}",
    "gists_url": "https://api.github.com/users/martin-brennan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/martin-brennan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/martin-brennan/subscriptions",
    "organizations_url": "https://api.github.com/users/martin-brennan/orgs",
    "repos_url": "https://api.github.com/users/martin-brennan/repos",
    "events_url": "https://api.github.com/users/martin-brennan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/martin-brennan/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4f72830eb02ec063866a2cd882b5c2dd0ede5800",
      "url": "https://api.github.com/repos/discourse/discourse/commits/4f72830eb02ec063866a2cd882b5c2dd0ede5800",
      "html_url": "https://github.com/discourse/discourse/commit/4f72830eb02ec063866a2cd882b5c2dd0ede5800"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 75,
    "deletions": 12
  },
  "files": [
    {
      "sha": "2e31d5d548b8231a6886ccba986ca7b6e0811868",
      "filename": "app/jobs/regular/group_smtp_email.rb",
      "status": "modified",
      "additions": 21,
      "deletions": 3,
      "changes": 24,
      "blob_url": "https://github.com/discourse/discourse/blob/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/app/jobs/regular/group_smtp_email.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/app/jobs/regular/group_smtp_email.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/group_smtp_email.rb?ref=64ba5b1d21f9c5c24a3799a5615dd321c6f2e778",
      "patch": "@@ -10,9 +10,23 @@ def execute(args)\n       group = Group.find_by(id: args[:group_id])\n       post = Post.find_by(id: args[:post_id])\n       email = args[:email]\n-      recipient_user = ::UserEmail.find_by(email: email, primary: true)&.user\n \n-      Rails.logger.debug(\"[IMAP] Sending email for group #{group.name} and post #{post.id}\")\n+      # There is a rare race condition causing the Imap::Sync class to create\n+      # an incoming email and associated post/topic, which then kicks off\n+      # the PostAlerter to notify others in the PM about a reply in the topic,\n+      # but for the OP which is not necessary (because the person emailing the\n+      # IMAP inbox already knows about the OP)\n+      #\n+      # Basically, we should never be sending this notification for the first\n+      # post in a topic.\n+      if post.is_first_post?\n+        ImapSyncLog.warn(\"Aborting SMTP email for post #{post.id} in topic #{post.topic_id} to #{email}, the post is the OP and should not send an email.\", group)\n+        return\n+      end\n+\n+      ImapSyncLog.debug(\"Sending SMTP email for post #{post.id} in topic #{post.topic_id} to #{email}.\", group)\n+\n+      recipient_user = ::UserEmail.find_by(email: email, primary: true)&.user\n       message = GroupSmtpMailer.send_mail(group, email, post)\n       Email::Sender.new(message, :group_smtp, recipient_user).send\n \n@@ -23,7 +37,11 @@ def execute(args)\n         topic_id: post.topic_id,\n         post_id: post.id,\n         raw: message.to_s,\n-        message_id: message.message_id\n+        subject: message.subject,\n+        message_id: message.message_id,\n+        to_addresses: message.to,\n+        cc_addresses: message.cc,\n+        from_address: message.from\n       )\n     end\n   end"
    },
    {
      "sha": "4d3809bebe97609393c3b7984c7b2b0332542377",
      "filename": "app/models/imap_sync_log.rb",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/app/models/imap_sync_log.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/app/models/imap_sync_log.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/imap_sync_log.rb?ref=64ba5b1d21f9c5c24a3799a5615dd321c6f2e778",
      "patch": "@@ -12,7 +12,11 @@ def self.levels\n   def self.log(message, level, group_id = nil)\n     now = Time.now.strftime(\"%Y-%m-%d %H:%M:%S.%L\")\n     new_log = create(message: message, level: ImapSyncLog.levels[level], group_id: group_id)\n-    Rails.logger.send(level, \"#{level[0].upcase}, [#{now}] [IMAP] (group_id #{group_id}) #{message}\")\n+    if ENV[\"DEBUG_IMAP\"]\n+      Rails.logger.send(:warn, \"#{level[0].upcase}, [#{now}] [IMAP] (group_id #{group_id}) #{message}\")\n+    else\n+      Rails.logger.send(level, \"#{level[0].upcase}, [#{now}] [IMAP] (group_id #{group_id}) #{message}\")\n+    end\n     new_log\n   end\n "
    },
    {
      "sha": "08eb42a74776d152974116edcdf731b9a1caf569",
      "filename": "app/models/incoming_email.rb",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/discourse/discourse/blob/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/app/models/incoming_email.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/app/models/incoming_email.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/incoming_email.rb?ref=64ba5b1d21f9c5c24a3799a5615dd321c6f2e778",
      "patch": "@@ -28,6 +28,27 @@ class IncomingEmail < ActiveRecord::Base\n       )\n     SQL\n   end\n+\n+  def to_addresses=(to)\n+    if to&.is_a?(Array)\n+      to = to.map(&:downcase).join(\";\")\n+    end\n+    super(to)\n+  end\n+\n+  def cc_addresses=(cc)\n+    if cc&.is_a?(Array)\n+      cc = cc.map(&:downcase).join(\";\")\n+    end\n+    super(cc)\n+  end\n+\n+  def from_address=(from)\n+    if from&.is_a?(Array)\n+      from = from.first\n+    end\n+    super(from)\n+  end\n end\n \n # == Schema Information"
    },
    {
      "sha": "50fbb219ca7a29cb13db84c83f7e129d418efe3d",
      "filename": "lib/email/receiver.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/lib/email/receiver.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/lib/email/receiver.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/email/receiver.rb?ref=64ba5b1d21f9c5c24a3799a5615dd321c6f2e778",
      "patch": "@@ -147,8 +147,8 @@ def create_incoming_email\n         raw: Email::Cleaner.new(@raw_email).execute,\n         subject: subject,\n         from_address: @from_email,\n-        to_addresses: @mail.to&.map(&:downcase)&.join(\";\"),\n-        cc_addresses: @mail.cc&.map(&:downcase)&.join(\";\"),\n+        to_addresses: @mail.to,\n+        cc_addresses: @mail.cc,\n         imap_uid_validity: @opts[:imap_uid_validity],\n         imap_uid: @opts[:imap_uid],\n         imap_group_id: @opts[:imap_group_id],"
    },
    {
      "sha": "ffd9707d3288605db8efecc82acfd76a3e5949f5",
      "filename": "lib/email/sender.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/lib/email/sender.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/lib/email/sender.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/email/sender.rb?ref=64ba5b1d21f9c5c24a3799a5615dd321c6f2e778",
      "patch": "@@ -173,7 +173,7 @@ def send\n         end\n       end\n \n-      if reply_key.present? && @message.header['Reply-To'] =~ /\\<([^\\>]+)\\>/\n+      if reply_key.present? && @message.header['Reply-To'].to_s =~ /\\<([^\\>]+)\\>/\n         email = Regexp.last_match[1]\n         @message.header['List-Post'] = \"<mailto:#{email}>\"\n       end"
    },
    {
      "sha": "a67f56dbf3dbe260925a2446cac26bb513d9ca9b",
      "filename": "spec/jobs/regular/group_smtp_email_spec.rb",
      "status": "modified",
      "additions": 25,
      "deletions": 5,
      "changes": 30,
      "blob_url": "https://github.com/discourse/discourse/blob/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/spec/jobs/regular/group_smtp_email_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/64ba5b1d21f9c5c24a3799a5615dd321c6f2e778/spec/jobs/regular/group_smtp_email_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/jobs/regular/group_smtp_email_spec.rb?ref=64ba5b1d21f9c5c24a3799a5615dd321c6f2e778",
      "patch": "@@ -3,13 +3,18 @@\n require 'rails_helper'\n \n RSpec.describe Jobs::GroupSmtpEmail do\n-  let(:post) { Fabricate(:post) }\n-  let(:group) { Fabricate(:imap_group) }\n-  let!(:recipient_user) { Fabricate(:user, email: \"test@test.com\") }\n+  fab!(:post) do\n+    topic = Fabricate(:topic)\n+    Fabricate(:post, topic: topic)\n+    Fabricate(:post, topic: topic)\n+  end\n+  fab!(:group) { Fabricate(:imap_group) }\n+  fab!(:recipient_user) { Fabricate(:user, email: \"test@test.com\") }\n+  let(:post_id) { post.id }\n   let(:args) do\n     {\n       group_id: group.id,\n-      post_id: post.id,\n+      post_id: post_id,\n       email: \"test@test.com\"\n     }\n   end\n@@ -32,7 +37,7 @@\n     subject.execute(args)\n     incoming = IncomingEmail.find_by(post_id: post.id, user_id: post.user_id, topic_id: post.topic_id)\n     expect(incoming).not_to eq(nil)\n-    expect(incoming.message_id).to eq(\"topic/#{post.topic_id}@test.localhost\")\n+    expect(incoming.message_id).to eq(\"topic/#{post.topic_id}/#{post.id}@test.localhost\")\n   end\n \n   it \"creates a PostReplyKey and correctly uses it for the email reply_key substitution\" do\n@@ -42,4 +47,19 @@\n     expect(post_reply_key).not_to eq(nil)\n     expect(incoming.raw).to include(\"Reply-To: Discourse <test+#{post_reply_key.reply_key}@incoming.com>\")\n   end\n+\n+  it \"has the from_address and the to_addresses and subject filled in correctly\" do\n+    subject.execute(args)\n+    incoming = IncomingEmail.find_by(post_id: post.id, user_id: post.user_id, topic_id: post.topic_id)\n+    expect(incoming.to_addresses).to eq(\"test@test.com\")\n+    expect(incoming.subject).to include(\"Re: This is a test topic\")\n+    expect(incoming.from_address).to eq(\"discourseteam@ponyexpress.com\")\n+  end\n+\n+  context \"when the post in the argument is the OP\" do\n+    let(:post_id) { post.topic.posts.first.id }\n+    it \"aborts and does not send a group SMTP email; the OP is the one that sent the email in the first place\" do\n+      expect { subject.execute(args) }.not_to(change { IncomingEmail.count })\n+    end\n+  end\n end"
    }
  ]
}
