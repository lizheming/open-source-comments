{
  "sha": "e9dc88a7b672dc9938b8f5f59058f501302870c2",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODplOWRjODhhN2I2NzJkYzk5MzhiOGY1ZjU5MDU4ZjUwMTMwMjg3MGMy",
  "commit": {
    "author": {
      "name": "Martin Brennan",
      "email": "mjrbrennan@gmail.com",
      "date": "2021-06-10T05:28:50Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-06-10T05:28:50Z"
    },
    "message": "FIX: Link up reply to post correctly when emailing group (#13339)\n\nWhen replying to a user_private_message email originating from\r\na group PM that does _not_ have a reply key (e.g. when replying\r\ndirectly to the group's SMTP address), we were mistakenly linking\r\nthe new post created from the reply to the OP and the user who\r\ncreated the topic, based on the first IncomingEmail message ID in\r\nthe topic, rather than using the correct reply to user and post number\r\nthat the user actually replied to.\r\n\r\nWe now use the In-Reply-To header to look up the corresponding EmailLog\r\nrecord when the user who replied was sent a user_private_message email,\r\nand use the post from that as the reply_to_user/post.\r\n\r\nThis also removes superfluous filtering of incoming_email records. After\r\nalready filtering by message_id and then addressed_to_user (which only\r\nreturns incoming emails where the to, from, or cc address includes any\r\nof the user's emails), we were filtering again but in the ruby code for\r\nthe exact same conditions. After removing this all existing tests still\r\npass.",
    "tree": {
      "sha": "4aeb433f4ffb221853a1e92b20678a5e6dc69280",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/4aeb433f4ffb221853a1e92b20678a5e6dc69280"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/e9dc88a7b672dc9938b8f5f59058f501302870c2",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwaMSCRBK7hj4Ov3rIwAAgfUIAHV+lLo/n/XmaowtMOMeb7qV\nataAOgjv4P3sp4dk8RbNC0pVRGiFb9orII1Zs+bVsanl3W+2bm5IoyApKHr5qjqn\n327fLorRYe+OjXFrBfGiA7HxsWghCl4KFmvArw9lRkLiOXwzXdbZ8eSFtbM7stbH\nihBX9csNvXKHwSKK2EWuDtmAYJC50shMolpL9Sa/MU/k7XDKGunb8GxMYiJwWfQT\nidx/bQefDRmluABdc41QzxVQsh9eHZz4WtIIOsan/dL8zkdbpoiCae0qDiFwmavN\nTlCd55DDx9PRsVorwMv9J3mmXOTlpriCTmIWJ1kQk+AlAUyRuK/c61nBSg9OJZw=\n=fYg4\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 4aeb433f4ffb221853a1e92b20678a5e6dc69280\nparent 3fefdb19733c9915475d6fc715666c396b123631\nauthor Martin Brennan <mjrbrennan@gmail.com> 1623302930 +1000\ncommitter GitHub <noreply@github.com> 1623302930 +1000\n\nFIX: Link up reply to post correctly when emailing group (#13339)\n\nWhen replying to a user_private_message email originating from\r\na group PM that does _not_ have a reply key (e.g. when replying\r\ndirectly to the group's SMTP address), we were mistakenly linking\r\nthe new post created from the reply to the OP and the user who\r\ncreated the topic, based on the first IncomingEmail message ID in\r\nthe topic, rather than using the correct reply to user and post number\r\nthat the user actually replied to.\r\n\r\nWe now use the In-Reply-To header to look up the corresponding EmailLog\r\nrecord when the user who replied was sent a user_private_message email,\r\nand use the post from that as the reply_to_user/post.\r\n\r\nThis also removes superfluous filtering of incoming_email records. After\r\nalready filtering by message_id and then addressed_to_user (which only\r\nreturns incoming emails where the to, from, or cc address includes any\r\nof the user's emails), we were filtering again but in the ruby code for\r\nthe exact same conditions. After removing this all existing tests still\r\npass.\r\n"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/e9dc88a7b672dc9938b8f5f59058f501302870c2",
  "html_url": "https://github.com/discourse/discourse/commit/e9dc88a7b672dc9938b8f5f59058f501302870c2",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/e9dc88a7b672dc9938b8f5f59058f501302870c2/comments",
  "author": {
    "login": "martin-brennan",
    "id": 920448,
    "node_id": "MDQ6VXNlcjkyMDQ0OA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/920448?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/martin-brennan",
    "html_url": "https://github.com/martin-brennan",
    "followers_url": "https://api.github.com/users/martin-brennan/followers",
    "following_url": "https://api.github.com/users/martin-brennan/following{/other_user}",
    "gists_url": "https://api.github.com/users/martin-brennan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/martin-brennan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/martin-brennan/subscriptions",
    "organizations_url": "https://api.github.com/users/martin-brennan/orgs",
    "repos_url": "https://api.github.com/users/martin-brennan/repos",
    "events_url": "https://api.github.com/users/martin-brennan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/martin-brennan/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3fefdb19733c9915475d6fc715666c396b123631",
      "url": "https://api.github.com/repos/discourse/discourse/commits/3fefdb19733c9915475d6fc715666c396b123631",
      "html_url": "https://github.com/discourse/discourse/commit/3fefdb19733c9915475d6fc715666c396b123631"
    }
  ],
  "stats": {
    "total": 175,
    "additions": 159,
    "deletions": 16
  },
  "files": [
    {
      "sha": "33c8ea12e733d0c7962eee660d40d827ffd5f974",
      "filename": "app/models/email_log.rb",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/discourse/discourse/blob/e9dc88a7b672dc9938b8f5f59058f501302870c2/app/models/email_log.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e9dc88a7b672dc9938b8f5f59058f501302870c2/app/models/email_log.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/email_log.rb?ref=e9dc88a7b672dc9938b8f5f59058f501302870c2",
      "patch": "@@ -22,6 +22,17 @@ class EmailLog < ActiveRecord::Base\n \n   scope :bounced, -> { where(bounced: true) }\n \n+  scope :addressed_to_user, ->(user) do\n+    where(<<~SQL, user_id: user.id)\n+      EXISTS(\n+        SELECT 1\n+        FROM user_emails\n+        WHERE user_emails.user_id = :user_id AND\n+        email_logs.to_address = user_emails.email\n+      )\n+    SQL\n+  end\n+\n   after_create do\n     # Update last_emailed_at if the user_id is present and email was sent\n     User.where(id: user_id).update_all(\"last_emailed_at = CURRENT_TIMESTAMP\") if user_id.present?"
    },
    {
      "sha": "da699c08bcd0c44a068f7a19c4d2d5ae807516d9",
      "filename": "lib/email/receiver.rb",
      "status": "modified",
      "additions": 20,
      "deletions": 16,
      "changes": 36,
      "blob_url": "https://github.com/discourse/discourse/blob/e9dc88a7b672dc9938b8f5f59058f501302870c2/lib/email/receiver.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e9dc88a7b672dc9938b8f5f59058f501302870c2/lib/email/receiver.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/email/receiver.rb?ref=e9dc88a7b672dc9938b8f5f59058f501302870c2",
      "patch": "@@ -109,7 +109,7 @@ def find_existing_and_update_imap\n       # server (e.g. a message_id generated by Gmail) and does not need to\n       # be updated, because message_ids from the IMAP server are not guaranteed\n       # to be unique.\n-      return unless discourse_generated_message_id?\n+      return unless discourse_generated_message_id?(@message_id)\n \n       incoming_email.update(\n         imap_uid_validity: @opts[:imap_uid_validity],\n@@ -745,23 +745,27 @@ def process_destination(destination, user, body, elided)\n \n     def create_group_post(group, user, body, elided)\n       message_ids = Email::Receiver.extract_reply_message_ids(@mail, max_message_id_count: 5)\n-      post_ids = []\n \n+      # incoming emails with matching message ids, and then cross references\n+      # these with any email addresses for the user vs to/from/cc of the\n+      # incoming emails. in effect, any incoming email record for these\n+      # message ids where the user is involved in any way will be returned\n       incoming_emails = IncomingEmail.where(message_id: message_ids)\n       if !group.allow_unknown_sender_topic_replies\n         incoming_emails = incoming_emails.addressed_to_user(user)\n       end\n-\n-      incoming_emails = incoming_emails.pluck(:post_id, :from_address, :to_addresses, :cc_addresses)\n-\n-      incoming_emails.each do |post_id, from_address, to_addresses, cc_addresses|\n-        if group.allow_unknown_sender_topic_replies\n-          post_ids << post_id\n-        else\n-          post_ids << post_id if contains_email_address_of_user?(from_address, user) ||\n-            contains_email_address_of_user?(to_addresses, user) ||\n-            contains_email_address_of_user?(cc_addresses, user)\n-        end\n+      post_ids = incoming_emails.pluck(:post_id) || []\n+\n+      # if the user is directly replying to an email send to them from discourse,\n+      # there will be a corresponding EmailLog record, so we can use that as the\n+      # reply post if it exists\n+      if discourse_generated_message_id?(mail.in_reply_to)\n+        post_id_from_email_log = EmailLog.where(message_id: mail.in_reply_to)\n+          .addressed_to_user(user)\n+          .order(created_at: :desc)\n+          .limit(1)\n+          .pluck(:post_id).last\n+        post_ids << post_id_from_email_log\n       end\n \n       if post_ids.any? && post = Post.where(id: post_ids).order(:created_at).last\n@@ -989,9 +993,9 @@ def host\n       @host ||= Email::Sender.host_for(Discourse.base_url)\n     end\n \n-    def discourse_generated_message_id?\n-      !!(@message_id =~ message_id_post_id_regexp) ||\n-        !!(@message_id =~ message_id_topic_id_regexp)\n+    def discourse_generated_message_id?(message_id)\n+      !!(message_id =~ message_id_post_id_regexp) ||\n+        !!(message_id =~ message_id_topic_id_regexp)\n     end\n \n     def message_id_post_id_regexp"
    },
    {
      "sha": "11a87b4e63234ee0a649d87bace27f40d9d4c73e",
      "filename": "spec/components/email/receiver_spec.rb",
      "status": "modified",
      "additions": 89,
      "deletions": 0,
      "changes": 89,
      "blob_url": "https://github.com/discourse/discourse/blob/e9dc88a7b672dc9938b8f5f59058f501302870c2/spec/components/email/receiver_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e9dc88a7b672dc9938b8f5f59058f501302870c2/spec/components/email/receiver_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/email/receiver_spec.rb?ref=e9dc88a7b672dc9938b8f5f59058f501302870c2",
      "patch": "@@ -985,6 +985,95 @@ def create_post_reply_key(value)\n       end\n     end\n \n+    context \"emailing a group by email_username and following reply flow\" do\n+      let!(:topic) do\n+        group.update!(email_username: \"team@somesmtpaddress.com\")\n+        process(:email_to_group_email_username_1)\n+        Topic.last\n+      end\n+      fab!(:user_in_group) do\n+        u = Fabricate(:user)\n+        Fabricate(:group_user, user: u, group: group)\n+        u\n+      end\n+\n+      before do\n+        NotificationEmailer.enable\n+        Jobs.run_immediately!\n+      end\n+\n+      def reply_as_group_user\n+        group_post = PostCreator.create(\n+          user_in_group,\n+          raw: \"Thanks for your request. Please try to restart.\",\n+          topic_id: topic.id\n+        )\n+        email_log = EmailLog.last\n+        [email_log, group_post]\n+      end\n+\n+      it \"the inbound processed email creates an incoming email and topic record correctly, and adds the group to the topic\" do\n+        incoming = IncomingEmail.find_by(topic: topic)\n+        user = User.find_by_email(\"two@foo.com\")\n+        expect(topic.topic_allowed_users.first.user_id).to eq(user.id)\n+        expect(topic.topic_allowed_groups.first.group_id).to eq(group.id)\n+        expect(incoming.to_addresses).to eq(\"team@somesmtpaddress.com\")\n+        expect(incoming.from_address).to eq(\"two@foo.com\")\n+        expect(incoming.message_id).to eq(\"u4w8c9r4y984yh98r3h69873@foo.bar.mail\")\n+      end\n+\n+      it \"creates an EmailLog when someone from the group replies, and does not create an IncomingEmail record for the reply\" do\n+        email_log, group_post = reply_as_group_user\n+        expect(email_log.message_id).to eq(\"topic/#{topic.id}/#{group_post.id}@test.localhost\")\n+        expect(email_log.to_address).to eq(\"two@foo.com\")\n+        expect(email_log.email_type).to eq(\"user_private_message\")\n+        expect(email_log.post_id).to eq(group_post.id)\n+        expect(IncomingEmail.exists?(post_id: group_post.id)).to eq(false)\n+      end\n+\n+      it \"processes a reply from the OP user to the group SMTP username, linking the reply_to_post_number correctly by\n+      matching in_reply_to to the email log\" do\n+        email_log, group_post = reply_as_group_user\n+\n+        reply_email = email(:email_to_group_email_username_2)\n+        reply_email.gsub!(\"MESSAGE_ID_REPLY_TO\", email_log.message_id)\n+        expect do\n+          Email::Receiver.new(reply_email).process!\n+        end.to change { Topic.count }.by(0).and change { Post.count }.by(1)\n+\n+        reply_post = Post.last\n+        expect(reply_post.reply_to_user).to eq(user_in_group)\n+        expect(reply_post.reply_to_post_number).to eq(group_post.post_number)\n+      end\n+\n+      it \"processes the reply from the user as a brand new topic if they have replied from a different address (e.g. auto forward) and allow_unknown_sender_topic_replies is disabled\" do\n+        email_log, group_post = reply_as_group_user\n+\n+        reply_email = email(:email_to_group_email_username_2_as_unknown_sender)\n+        reply_email.gsub!(\"MESSAGE_ID_REPLY_TO\", email_log.message_id)\n+        expect do\n+          Email::Receiver.new(reply_email).process!\n+        end.to change { Topic.count }.by(1).and change { Post.count }.by(1)\n+\n+        reply_post = Post.last\n+        expect(reply_post.topic_id).not_to eq(topic.id)\n+      end\n+\n+      it \"processes the reply from the user as a reply if they have replied from a different address (e.g. auto forward) and allow_unknown_sender_topic_replies is enabled\" do\n+        group.update!(allow_unknown_sender_topic_replies: true)\n+        email_log, group_post = reply_as_group_user\n+\n+        reply_email = email(:email_to_group_email_username_2_as_unknown_sender)\n+        reply_email.gsub!(\"MESSAGE_ID_REPLY_TO\", email_log.message_id)\n+        expect do\n+          Email::Receiver.new(reply_email).process!\n+        end.to change { Topic.count }.by(0).and change { Post.count }.by(1)\n+\n+        reply_post = Post.last\n+        expect(reply_post.topic_id).to eq(topic.id)\n+      end\n+    end\n+\n     context \"when message sent to a group has no key and find_related_post_with_key is enabled\" do\n       let!(:topic) do\n         process(:email_reply_1)"
    },
    {
      "sha": "5a7a0aee6b3bbf202293a470fe7a6f2f0f4a377b",
      "filename": "spec/fixtures/emails/email_to_group_email_username_1.eml",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/discourse/discourse/blob/e9dc88a7b672dc9938b8f5f59058f501302870c2/spec/fixtures/emails/email_to_group_email_username_1.eml",
      "raw_url": "https://github.com/discourse/discourse/raw/e9dc88a7b672dc9938b8f5f59058f501302870c2/spec/fixtures/emails/email_to_group_email_username_1.eml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/fixtures/emails/email_to_group_email_username_1.eml?ref=e9dc88a7b672dc9938b8f5f59058f501302870c2",
      "patch": "@@ -0,0 +1,11 @@\n+Return-Path: <two@foo.com>\n+From: Two <two@foo.com>\n+To: team@somesmtpaddress.com\n+Subject: Full email group username flow\n+Date: Fri, 15 Jan 2016 00:12:43 +0100\n+Message-ID: <u4w8c9r4y984yh98r3h69873@foo.bar.mail>\n+Mime-Version: 1.0\n+Content-Type: text/plain\n+Content-Transfer-Encoding: 7bit\n+\n+This is the first email."
    },
    {
      "sha": "df9bd7c2027a3ac48343c55dc57aaa3b48ef12f9",
      "filename": "spec/fixtures/emails/email_to_group_email_username_2.eml",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/e9dc88a7b672dc9938b8f5f59058f501302870c2/spec/fixtures/emails/email_to_group_email_username_2.eml",
      "raw_url": "https://github.com/discourse/discourse/raw/e9dc88a7b672dc9938b8f5f59058f501302870c2/spec/fixtures/emails/email_to_group_email_username_2.eml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/fixtures/emails/email_to_group_email_username_2.eml?ref=e9dc88a7b672dc9938b8f5f59058f501302870c2",
      "patch": "@@ -0,0 +1,14 @@\n+Return-Path: <two@foo.com>\n+From: Two <two@foo.com>\n+To: team@somesmtpaddress.com\n+Subject: Full email group username flow\n+Date: Saturday, 16 Jan 2016 00:12:43 +0100\n+Message-ID: <348ct38794nyt9338dsfsd@foo.bar.mail>\n+In-Reply-To: <MESSAGE_ID_REPLY_TO>\n+References: <u4w8c9r4y984yh98r3h69873@foo.bar.mail>\n+  <MESSAGE_ID_REPLY_TO>\n+Mime-Version: 1.0\n+Content-Type: text/plain\n+Content-Transfer-Encoding: 7bit\n+\n+Hey thanks for the suggestion, it didn't work."
    },
    {
      "sha": "ddb591ddd1be38f108735964c50770a14e954ae6",
      "filename": "spec/fixtures/emails/email_to_group_email_username_2_as_unknown_sender.eml",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/e9dc88a7b672dc9938b8f5f59058f501302870c2/spec/fixtures/emails/email_to_group_email_username_2_as_unknown_sender.eml",
      "raw_url": "https://github.com/discourse/discourse/raw/e9dc88a7b672dc9938b8f5f59058f501302870c2/spec/fixtures/emails/email_to_group_email_username_2_as_unknown_sender.eml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/fixtures/emails/email_to_group_email_username_2_as_unknown_sender.eml?ref=e9dc88a7b672dc9938b8f5f59058f501302870c2",
      "patch": "@@ -0,0 +1,14 @@\n+Return-Path: <unknownsender@bar.com>\n+From: Mysterio <unknownsender@bar.com>\n+To: team@somesmtpaddress.com\n+Subject: Full email group username flow\n+Date: Saturday, 16 Jan 2016 00:12:43 +0100\n+Message-ID: <348ct38794nyt9338dsfsd@foo.bar.mail>\n+In-Reply-To: <MESSAGE_ID_REPLY_TO>\n+References: <u4w8c9r4y984yh98r3h69873@foo.bar.mail>\n+  <MESSAGE_ID_REPLY_TO>\n+Mime-Version: 1.0\n+Content-Type: text/plain\n+Content-Transfer-Encoding: 7bit\n+\n+No I don't think that did it."
    }
  ]
}
