{
  "sha": "97934e23f9c5a04e05207aaf457146ce979b5567",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjk3OTM0ZTIzZjljNWEwNGUwNTIwN2FhZjQ1NzE0NmNlOTc5YjU1Njc=",
  "commit": {
    "author": {
      "name": "Pavel Mineev",
      "email": "pavel@mineev.me",
      "date": "2021-05-26T12:38:23Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-05-30T17:50:37Z"
    },
    "message": "fix tests",
    "tree": {
      "sha": "e309ba03e09564f8e2a1b1ef1ba430fe37fb2788",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/e309ba03e09564f8e2a1b1ef1ba430fe37fb2788"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/97934e23f9c5a04e05207aaf457146ce979b5567",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/97934e23f9c5a04e05207aaf457146ce979b5567",
  "html_url": "https://github.com/umputun/remark42/commit/97934e23f9c5a04e05207aaf457146ce979b5567",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/97934e23f9c5a04e05207aaf457146ce979b5567/comments",
  "author": {
    "login": "akellbl4",
    "id": 2330682,
    "node_id": "MDQ6VXNlcjIzMzA2ODI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2330682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/akellbl4",
    "html_url": "https://github.com/akellbl4",
    "followers_url": "https://api.github.com/users/akellbl4/followers",
    "following_url": "https://api.github.com/users/akellbl4/following{/other_user}",
    "gists_url": "https://api.github.com/users/akellbl4/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/akellbl4/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/akellbl4/subscriptions",
    "organizations_url": "https://api.github.com/users/akellbl4/orgs",
    "repos_url": "https://api.github.com/users/akellbl4/repos",
    "events_url": "https://api.github.com/users/akellbl4/events{/privacy}",
    "received_events_url": "https://api.github.com/users/akellbl4/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "79eab8ccde4074ab0adaa8daee09416f4f8671b6",
      "url": "https://api.github.com/repos/umputun/remark42/commits/79eab8ccde4074ab0adaa8daee09416f4f8671b6",
      "html_url": "https://github.com/umputun/remark42/commit/79eab8ccde4074ab0adaa8daee09416f4f8671b6"
    }
  ],
  "stats": {
    "total": 155,
    "additions": 64,
    "deletions": 91
  },
  "files": [
    {
      "sha": "d0a29b432f26fa76c7bba5e27b3811e20eff320c",
      "filename": "frontend/app/components/comment/comment.test.tsx",
      "status": "modified",
      "additions": 64,
      "deletions": 91,
      "changes": 155,
      "blob_url": "https://github.com/umputun/remark42/blob/97934e23f9c5a04e05207aaf457146ce979b5567/frontend/app/components/comment/comment.test.tsx",
      "raw_url": "https://github.com/umputun/remark42/raw/97934e23f9c5a04e05207aaf457146ce979b5567/frontend/app/components/comment/comment.test.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend/app/components/comment/comment.test.tsx?ref=97934e23f9c5a04e05207aaf457146ce979b5567",
      "patch": "@@ -1,6 +1,6 @@\n import { h } from 'preact';\n-import { mount as enzymeMount } from 'enzyme';\n-import { IntlProvider, IntlShape } from 'react-intl';\n+import { mount } from 'enzyme';\n+import { useIntl, IntlProvider } from 'react-intl';\n \n import enMessages from 'locales/en.json';\n import type { User, Comment as CommentType, PostInfo } from 'common/types';\n@@ -9,18 +9,19 @@ import { sleep } from 'utils/sleep';\n \n import { Comment, CommentProps } from './comment';\n \n-const mount = <T extends JSX.Element>(component: T) =>\n-  enzymeMount(\n-    <IntlProvider locale=\"en\" messages={enMessages}>\n-      {component}\n-    </IntlProvider>\n-  );\n+function mountComment(props: CommentProps) {\n+  function Wrapper(updateProps: Partial<CommentProps> = {}) {\n+    const intl = useIntl();\n \n-const intl = {\n-  formatMessage(message: { defaultMessage: string }) {\n-    return message.defaultMessage || '';\n-  },\n-} as IntlShape;\n+    return (\n+      <IntlProvider locale=\"en\" messages={enMessages}>\n+        <Comment {...props} {...updateProps} intl={intl} />\n+      </IntlProvider>\n+    );\n+  }\n+\n+  return mount(<Wrapper />);\n+}\n \n const DefaultProps: Partial<CommentProps> = {\n   CommentForm: null,\n@@ -46,14 +47,12 @@ const DefaultProps: Partial<CommentProps> = {\n     id: 'testuser',\n     picture: 'somepicture-url',\n   } as User,\n-  intl,\n-};\n+} as CommentProps;\n \n describe('<Comment />', () => {\n   describe('voting', () => {\n     it('should be disabled for an anonymous user', () => {\n-      const props = { ...DefaultProps, user: { id: 'anonymous_1' } } as CommentProps;\n-      const wrapper = mount(<Comment {...props} />);\n+      const wrapper = mountComment({ ...DefaultProps, user: { id: 'anonymous_1' } } as CommentProps);\n       const voteButtons = wrapper.find('.comment__vote');\n \n       expect(voteButtons.length).toEqual(2);\n@@ -67,8 +66,7 @@ describe('<Comment />', () => {\n     it('should be enabled for an anonymous user when it was allowed from server', () => {\n       StaticStore.config.anon_vote = true;\n \n-      const props = { ...DefaultProps, user: { id: 'anonymous_1' } } as CommentProps;\n-      const wrapper = mount(<Comment {...props} />);\n+      const wrapper = mountComment({ ...DefaultProps, user: { id: 'anonymous_1' } } as CommentProps);\n       const voteButtons = wrapper.find('.comment__vote');\n \n       expect(voteButtons.length).toEqual(2);\n@@ -79,7 +77,7 @@ describe('<Comment />', () => {\n     });\n \n     it('disabled on user info widget', () => {\n-      const element = mount(<Comment {...({ ...DefaultProps, view: 'user' } as CommentProps)} />);\n+      const element = mountComment({ ...DefaultProps, view: 'user' } as CommentProps);\n \n       const voteButtons = element.find('.comment__vote');\n       expect(voteButtons.length).toStrictEqual(2);\n@@ -91,11 +89,10 @@ describe('<Comment />', () => {\n     });\n \n     it('disabled on read only post', () => {\n-      const element = mount(\n-        <Comment\n-          {...({ ...DefaultProps, post_info: { ...DefaultProps.post_info, read_only: true } } as CommentProps)}\n-        />\n-      );\n+      const element = mountComment({\n+        ...DefaultProps,\n+        post_info: { ...DefaultProps.post_info, read_only: true },\n+      } as CommentProps);\n \n       const voteButtons = element.find('.comment__vote');\n       expect(voteButtons.length).toStrictEqual(2);\n@@ -107,10 +104,7 @@ describe('<Comment />', () => {\n     });\n \n     it('disabled for deleted comment', () => {\n-      const element = mount(\n-        // ahem\n-        <Comment {...({ ...DefaultProps, data: { ...DefaultProps.data, delete: true } } as CommentProps)} />\n-      );\n+      const element = mountComment({ ...DefaultProps, data: { ...DefaultProps.data, delete: true } } as CommentProps);\n \n       const voteButtons = element.find('.comment__vote');\n       expect(voteButtons.length).toStrictEqual(2);\n@@ -122,17 +116,13 @@ describe('<Comment />', () => {\n     });\n \n     it('disabled for guest', () => {\n-      const element = mount(\n-        <Comment\n-          {...({\n-            ...DefaultProps,\n-            user: {\n-              id: 'someone',\n-              picture: 'somepicture-url',\n-            },\n-          } as CommentProps)}\n-        />\n-      );\n+      const element = mountComment({\n+        ...DefaultProps,\n+        user: {\n+          id: 'someone',\n+          picture: 'somepicture-url',\n+        },\n+      } as CommentProps);\n \n       const voteButtons = element.find('.comment__vote');\n       expect(voteButtons.length).toStrictEqual(2);\n@@ -144,7 +134,7 @@ describe('<Comment />', () => {\n     });\n \n     it('disabled for own comment', () => {\n-      const element = mount(<Comment {...({ ...DefaultProps, user: null } as CommentProps)} />);\n+      const element = mountComment({ ...DefaultProps, user: null } as CommentProps);\n \n       const voteButtons = element.find('.comment__vote');\n       expect(voteButtons.length).toStrictEqual(2);\n@@ -157,13 +147,11 @@ describe('<Comment />', () => {\n \n     it('disabled for already upvoted comment', async () => {\n       const voteSpy = jest.fn(async () => undefined);\n-      const element = mount(\n-        <Comment\n-          {...(DefaultProps as CommentProps)}\n-          data={{ ...DefaultProps.data, vote: +1 } as CommentProps['data']}\n-          putCommentVote={voteSpy}\n-        />\n-      );\n+      const element = mountComment({\n+        ...DefaultProps,\n+        data: { ...DefaultProps.data, vote: +1 } as CommentProps['data'],\n+        putCommentVote: voteSpy,\n+      } as CommentProps);\n \n       const voteButtons = element.find('.comment__vote');\n       expect(voteButtons.length).toStrictEqual(2);\n@@ -181,13 +169,14 @@ describe('<Comment />', () => {\n \n     it('disabled for already downvoted comment', async () => {\n       const voteSpy = jest.fn(async () => undefined);\n-      const element = mount(\n-        <Comment\n-          {...(DefaultProps as CommentProps)}\n-          data={{ ...DefaultProps.data, vote: -1 } as CommentProps['data']}\n-          putCommentVote={voteSpy}\n-        />\n-      );\n+      const element = mountComment({\n+        ...DefaultProps,\n+        data: {\n+          ...DefaultProps.data,\n+          vote: -1,\n+        },\n+        putCommentVote: voteSpy,\n+      } as CommentProps);\n \n       const voteButtons = element.find('.comment__vote');\n       expect(voteButtons.length).toStrictEqual(2);\n@@ -206,9 +195,7 @@ describe('<Comment />', () => {\n \n   describe('admin controls', () => {\n     it('for admin if shows admin controls', () => {\n-      const element = mount(\n-        <Comment {...({ ...DefaultProps, user: { ...DefaultProps.user, admin: true } } as CommentProps)} />\n-      );\n+      const element = mountComment({ ...DefaultProps, user: { ...DefaultProps.user, admin: true } } as CommentProps);\n \n       const controls = element.find('.comment__controls').children();\n \n@@ -221,42 +208,36 @@ describe('<Comment />', () => {\n     });\n \n     it('for regular user it shows only \"hide\"', () => {\n-      const element = mount(\n-        <Comment {...({ ...DefaultProps, user: { ...DefaultProps.user, admin: false } } as CommentProps)} />\n-      );\n+      const element = mountComment({ ...DefaultProps, user: { ...DefaultProps.user, admin: false } } as CommentProps);\n \n       const controls = element.find('.comment__controls').children();\n       expect(controls.length).toBe(1);\n       expect(controls.at(0).text()).toEqual('Hide');\n     });\n \n     it('verification badge clickable for admin', () => {\n-      const element = mount(\n-        <Comment {...({ ...DefaultProps, user: { ...DefaultProps.user, admin: true } } as CommentProps)} />\n-      );\n+      const element = mountComment({ ...DefaultProps, user: { ...DefaultProps.user, admin: true } } as CommentProps);\n \n       const controls = element.find('.comment__verification').first();\n       expect(controls.hasClass('comment__verification_clickable')).toEqual(true);\n     });\n \n     it('verification badge not clickable for regular user', () => {\n-      const element = mount(\n-        <Comment\n-          {...({\n-            ...DefaultProps,\n-            data: { ...DefaultProps.data, user: { ...DefaultProps.data!.user, verified: true } },\n-          } as CommentProps)}\n-        />\n-      );\n+      const element = mountComment({\n+        ...DefaultProps,\n+        data: { ...DefaultProps.data, user: { ...DefaultProps.data!.user, verified: true } },\n+      } as CommentProps);\n \n       const controls = element.find('.comment__verification').first();\n       expect(controls.hasClass('comment__verification_clickable')).toEqual(false);\n     });\n \n     it('should be editable', () => {\n+      StaticStore.config.edit_duration = 300;\n+\n       const initTime = new Date().toString();\n       const changedTime = new Date(Date.now() + 10 * 1000).toString();\n-      const props: Partial<CommentProps> = {\n+      const props = {\n         ...DefaultProps,\n         user: DefaultProps.user as User,\n         data: {\n@@ -269,30 +250,25 @@ describe('<Comment />', () => {\n           orig: 'test',\n         } as CommentType,\n         repliesCount: 0,\n-      };\n-      StaticStore.config.edit_duration = 300;\n-      const WrappedComponent = (props: CommentProps) => (\n-        <IntlProvider locale=\"en\" messages={enMessages}>\n-          <Comment {...props} />\n-        </IntlProvider>\n-      );\n-      const component = enzymeMount(<WrappedComponent {...(props as CommentProps)} />);\n+      } as CommentProps;\n+      const component = mountComment(props);\n+      const comment = component.find(Comment);\n \n-      expect((component.find(`Comment`).state('editDeadline') as Date).getTime()).toBe(\n+      expect((comment.state('editDeadline') as Date).getTime()).toBe(\n         new Date(new Date(initTime).getTime() + 300 * 1000).getTime()\n       );\n \n-      component.setProps({\n-        data: { ...props.data, time: changedTime },\n-      });\n+      component.setProps({ data: { ...props.data, time: changedTime } });\n \n-      expect((component.find(`Comment`).state('editDeadline') as Date).getTime()).toBe(\n+      expect((comment.state('editDeadline') as Date).getTime()).toBe(\n         new Date(new Date(changedTime).getTime() + 300 * 1000).getTime()\n       );\n     });\n \n     it('shoud not be editable', () => {\n-      const props: Partial<CommentProps> = {\n+      StaticStore.config.edit_duration = 300;\n+\n+      const component = mountComment({\n         ...DefaultProps,\n         user: DefaultProps.user as User,\n         data: {\n@@ -303,10 +279,7 @@ describe('<Comment />', () => {\n           time: new Date(new Date().getDate() - 300).toString(),\n           orig: 'test',\n         } as CommentType,\n-      };\n-      StaticStore.config.edit_duration = 300;\n-\n-      const component = mount(<Comment {...(props as CommentProps)} />);\n+      } as CommentProps);\n \n       expect(component.find('Comment').state('editDeadline')).toBe(null);\n     });"
    }
  ]
}
