{
  "sha": "90e537358d58a6adbe9ef63b4e030c72ae7edc62",
  "node_id": "C_kwDOBtgov9oAKDkwZTUzNzM1OGQ1OGE2YWRiZTllZjYzYjRlMDMwYzcyYWU3ZWRjNjI",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2021-11-23T19:49:19Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-11-23T21:00:40Z"
    },
    "message": "update golangci-lint to 1.43.0, fix found issues",
    "tree": {
      "sha": "0183c03d68e6f9db0e6590deb1f1707afeeb10ba",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/0183c03d68e6f9db0e6590deb1f1707afeeb10ba"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/90e537358d58a6adbe9ef63b4e030c72ae7edc62",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/90e537358d58a6adbe9ef63b4e030c72ae7edc62",
  "html_url": "https://github.com/umputun/remark42/commit/90e537358d58a6adbe9ef63b4e030c72ae7edc62",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/90e537358d58a6adbe9ef63b4e030c72ae7edc62/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8e77acd908884f6b8a48a6ac4c0d402229e11809",
      "url": "https://api.github.com/repos/umputun/remark42/commits/8e77acd908884f6b8a48a6ac4c0d402229e11809",
      "html_url": "https://github.com/umputun/remark42/commit/8e77acd908884f6b8a48a6ac4c0d402229e11809"
    }
  ],
  "stats": {
    "total": 597,
    "additions": 290,
    "deletions": 307
  },
  "files": [
    {
      "sha": "0e2350ff96a08fc05778ed2d4d21f8e3411804b5",
      "filename": ".github/workflows/ci-test-backend.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/.github/workflows/ci-test-backend.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/.github/workflows/ci-test-backend.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/.github/workflows/ci-test-backend.yml?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -34,7 +34,7 @@ jobs:\n \n       - name: install golangci-lint and goveralls\n         run: |\n-          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $GITHUB_WORKSPACE v1.39.0\n+          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $GITHUB_WORKSPACE v1.43.0\n           go get -u github.com/mattn/goveralls\n \n       - name: test and lint backend"
    },
    {
      "sha": "5467f7fc96656fe44ea31512a53ef98be881bda2",
      "filename": "backend/.golangci.yml",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/.golangci.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/.golangci.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/.golangci.yml?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -29,8 +29,6 @@ linters-settings:\n # TODO: feel free to remove these excludes and fix the code\n       - hugeParam\n       - rangeValCopy\n-      - singleCaseSwitch\n-      - ifElseChain\n \n linters:\n   enable:\n@@ -74,6 +72,3 @@ issues:\n         - gosec\n         - dupl\n   exclude-use-default: false\n-\n-service:\n-  golangci-lint-version: 1.41.x"
    },
    {
      "sha": "179bf0aff68763681cb30f88f8efc759b5c038c2",
      "filename": "backend/_example/memory_store/accessor/data.go",
      "status": "modified",
      "additions": 23,
      "deletions": 23,
      "changes": 46,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/_example/memory_store/accessor/data.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/_example/memory_store/accessor/data.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/_example/memory_store/accessor/data.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -25,7 +25,7 @@ type MemData struct {\n \tposts     map[string][]store.Comment // key is siteID\n \tmetaUsers map[string]metaUser        // key is userID\n \tmetaPosts map[store.Locator]metaPost // key is post's locator\n-\tsync.RWMutex\n+\tmu        sync.RWMutex\n }\n \n type metaPost struct {\n@@ -61,8 +61,8 @@ func (m *MemData) Create(comment store.Comment) (commentID string, err error) {\n \t\treturn \"\", errors.Errorf(\"post %s is read-only\", comment.Locator.URL)\n \t}\n \n-\tm.Lock()\n-\tdefer m.Unlock()\n+\tm.mu.Lock()\n+\tdefer m.mu.Unlock()\n \tcomments := m.posts[comment.Locator.SiteID]\n \tfor _, c := range comments { // don't allow duplicated IDs\n \t\tif c.ID == comment.ID {\n@@ -76,8 +76,8 @@ func (m *MemData) Create(comment store.Comment) (commentID string, err error) {\n \n // Find returns all comments for post and sorts results\n func (m *MemData) Find(req engine.FindRequest) (comments []store.Comment, err error) {\n-\tm.RLock()\n-\tdefer m.RUnlock()\n+\tm.mu.RLock()\n+\tdefer m.mu.RUnlock()\n \n \tcomments = []store.Comment{}\n \n@@ -132,22 +132,22 @@ func (m *MemData) Find(req engine.FindRequest) (comments []store.Comment, err er\n \n // Get returns comment for locator.URL and commentID string\n func (m *MemData) Get(req engine.GetRequest) (comment store.Comment, err error) {\n-\tm.RLock()\n-\tdefer m.RUnlock()\n+\tm.mu.RLock()\n+\tdefer m.mu.RUnlock()\n \treturn m.get(req.Locator, req.CommentID)\n }\n \n // Update updates comment for locator.URL with mutable part of comment\n func (m *MemData) Update(comment store.Comment) error {\n-\tm.Lock()\n-\tdefer m.Unlock()\n+\tm.mu.Lock()\n+\tdefer m.mu.Unlock()\n \treturn m.updateComment(comment)\n }\n \n // Count returns number of comments for post or user\n func (m *MemData) Count(req engine.FindRequest) (count int, err error) {\n-\tm.RLock()\n-\tdefer m.RUnlock()\n+\tm.mu.RLock()\n+\tdefer m.mu.RUnlock()\n \n \tswitch {\n \tcase req.Locator.URL != \"\": // comment's count for post\n@@ -167,8 +167,8 @@ func (m *MemData) Count(req engine.FindRequest) (count int, err error) {\n \n // Info get post(s) meta info\n func (m *MemData) Info(req engine.InfoRequest) (res []store.PostInfo, err error) {\n-\tm.RLock()\n-\tdefer m.RUnlock()\n+\tm.mu.RLock()\n+\tdefer m.mu.RUnlock()\n \tres = []store.PostInfo{}\n \n \tif req.Locator.URL != \"\" { // post info\n@@ -240,8 +240,8 @@ func (m *MemData) Info(req engine.InfoRequest) (res []store.PostInfo, err error)\n \n // Flag sets and gets flag values\n func (m *MemData) Flag(req engine.FlagRequest) (val bool, err error) {\n-\tm.Lock()\n-\tdefer m.Unlock()\n+\tm.mu.Lock()\n+\tdefer m.mu.Unlock()\n \n \tif req.Update == engine.FlagNonSet { // read flag value, no update requested\n \t\treturn m.checkFlag(req), nil\n@@ -253,8 +253,8 @@ func (m *MemData) Flag(req engine.FlagRequest) (val bool, err error) {\n // ListFlags get list of flagged keys, like blocked & verified user\n // works for full locator (post flags) or with userID\n func (m *MemData) ListFlags(req engine.FlagRequest) (res []interface{}, err error) {\n-\tm.RLock()\n-\tdefer m.RUnlock()\n+\tm.mu.RLock()\n+\tdefer m.mu.RUnlock()\n \n \tres = []interface{}{}\n \n@@ -290,8 +290,8 @@ func (m *MemData) UserDetail(req engine.UserDetailRequest) ([]engine.UserDetailE\n \t\t\treturn nil, errors.New(\"userid cannot be empty in request for single detail\")\n \t\t}\n \n-\t\tm.Lock()\n-\t\tdefer m.Unlock()\n+\t\tm.mu.Lock()\n+\t\tdefer m.mu.Unlock()\n \n \t\tif req.Update == \"\" { // read detail value, no update requested\n \t\t\treturn m.getUserDetail(req)\n@@ -302,8 +302,8 @@ func (m *MemData) UserDetail(req engine.UserDetailRequest) ([]engine.UserDetailE\n \t\t// list of all details returned in case request is a read request\n \t\t// (Update is not set) and does not have UserID or Detail set\n \t\tif req.Update == \"\" && req.UserID == \"\" { // read list of all details\n-\t\t\tm.Lock()\n-\t\t\tdefer m.Unlock()\n+\t\t\tm.mu.Lock()\n+\t\t\tdefer m.mu.Unlock()\n \t\t\treturn m.listDetails(req.Locator)\n \t\t}\n \t\treturn nil, errors.New(\"unsupported request with userdetail all\")\n@@ -315,8 +315,8 @@ func (m *MemData) UserDetail(req engine.UserDetailRequest) ([]engine.UserDetailE\n // Delete post(s), user, comment, user details, or everything\n func (m *MemData) Delete(req engine.DeleteRequest) error {\n \n-\tm.Lock()\n-\tdefer m.Unlock()\n+\tm.mu.Lock()\n+\tdefer m.mu.Unlock()\n \n \tswitch {\n \tcase req.UserDetail != \"\": // delete user detail"
    },
    {
      "sha": "dfe8dc57d6a3f8135c3f9aafcfdceda8fdc0e665",
      "filename": "backend/_example/memory_store/accessor/image.go",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/_example/memory_store/accessor/image.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/_example/memory_store/accessor/image.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/_example/memory_store/accessor/image.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -22,7 +22,7 @@ type MemImage struct {\n \timagesStaging map[string][]byte\n \timages        map[string][]byte\n \tinsertTime    map[string]time.Time\n-\tsync.RWMutex\n+\tmu            sync.RWMutex\n }\n \n // NewMemImageStore makes admin Store in memory.\n@@ -37,18 +37,18 @@ func NewMemImageStore() *MemImage {\n \n // Save stores image with passed id to staging\n func (m *MemImage) Save(id string, img []byte) error {\n-\tm.Lock()\n+\tm.mu.Lock()\n \tm.imagesStaging[id] = img\n \tm.insertTime[id] = time.Now()\n-\tm.Unlock()\n+\tm.mu.Unlock()\n \n \treturn nil\n }\n \n // ResetCleanupTimer resets cleanup timer for the image\n func (m *MemImage) ResetCleanupTimer(id string) error {\n-\tm.Lock()\n-\tdefer m.Unlock()\n+\tm.mu.Lock()\n+\tdefer m.mu.Unlock()\n \tif _, ok := m.insertTime[id]; ok {\n \t\tm.insertTime[id] = time.Now()\n \t\treturn nil\n@@ -58,12 +58,12 @@ func (m *MemImage) ResetCleanupTimer(id string) error {\n \n // Load image by ID\n func (m *MemImage) Load(id string) ([]byte, error) {\n-\tm.RLock()\n+\tm.mu.RLock()\n \timg, ok := m.images[id]\n \tif !ok {\n \t\timg, ok = m.imagesStaging[id]\n \t}\n-\tm.RUnlock()\n+\tm.mu.RUnlock()\n \tif !ok {\n \t\treturn nil, errors.Errorf(\"image %s not found\", id)\n \t}\n@@ -72,16 +72,16 @@ func (m *MemImage) Load(id string) ([]byte, error) {\n \n // Commit moves image from staging to permanent\n func (m *MemImage) Commit(id string) error {\n-\tm.RLock()\n+\tm.mu.RLock()\n \timg, ok := m.imagesStaging[id]\n-\tm.RUnlock()\n+\tm.mu.RUnlock()\n \tif !ok {\n \t\treturn errors.Errorf(\"failed to commit %s, not found in staging\", id)\n \t}\n \n-\tm.Lock()\n+\tm.mu.Lock()\n \tm.images[id] = img\n-\tm.Unlock()\n+\tm.mu.Unlock()\n \n \treturn nil\n }\n@@ -90,35 +90,35 @@ func (m *MemImage) Commit(id string) error {\n func (m *MemImage) Cleanup(_ context.Context, ttl time.Duration) error {\n \tvar idsToRemove []string\n \n-\tm.RLock()\n+\tm.mu.RLock()\n \tfor id, t := range m.insertTime {\n \t\tage := time.Since(t)\n \t\tif age > ttl {\n \t\t\tlog.Printf(\"[INFO] remove staging image %s, age %v\", id, age)\n \t\t\tidsToRemove = append(idsToRemove, id)\n \t\t}\n \t}\n-\tm.RUnlock()\n+\tm.mu.RUnlock()\n \n-\tm.Lock()\n+\tm.mu.Lock()\n \tfor _, id := range idsToRemove {\n \t\tdelete(m.insertTime, id)\n \t\tdelete(m.imagesStaging, id)\n \t}\n-\tm.Unlock()\n+\tm.mu.Unlock()\n \treturn nil\n }\n \n // Info returns meta information about storage\n func (m *MemImage) Info() (image.StoreInfo, error) {\n \tvar ts time.Time\n-\tm.RLock()\n+\tm.mu.RLock()\n \tfor _, t := range m.insertTime {\n \t\tif ts.IsZero() || t.Before(ts) {\n \t\t\tts = t\n \t\t}\n \t}\n-\tm.RUnlock()\n+\tm.mu.RUnlock()\n \n \treturn image.StoreInfo{FirstStagingImageTS: ts}, nil\n }"
    },
    {
      "sha": "427227546c592375df25618d20bbe9504c97bfa3",
      "filename": "backend/_example/memory_store/accessor/image_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/_example/memory_store/accessor/image_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/_example/memory_store/accessor/image_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/_example/memory_store/accessor/image_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -10,7 +10,6 @@ import (\n \t\"context\"\n \t\"encoding/base64\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"strings\"\n \t\"testing\"\n \t\"time\"\n@@ -43,7 +42,7 @@ func gopherPNG() io.Reader { return base64.NewDecoder(base64.StdEncoding, string\n \n func TestMemImage_LoadAfterSave(t *testing.T) {\n \tsvc := NewMemImageStore()\n-\tgopher, err := ioutil.ReadAll(gopherPNG())\n+\tgopher, err := io.ReadAll(gopherPNG())\n \tassert.NoError(t, err)\n \n \timg, err := svc.Load(\"test_id\")\n@@ -85,7 +84,7 @@ func TestMemImage_Cleanup(t *testing.T) {\n \n func TestMemImage_Info(t *testing.T) {\n \tsvc := NewMemImageStore()\n-\tgopher, err := ioutil.ReadAll(gopherPNG())\n+\tgopher, err := io.ReadAll(gopherPNG())\n \tassert.NoError(t, err)\n \n \t// get info on empty storage, should be zero"
    },
    {
      "sha": "0f70fd0b86c44619408127ab6c5a54bd8567c383",
      "filename": "backend/_example/memory_store/server/image_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/_example/memory_store/server/image_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/_example/memory_store/server/image_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/_example/memory_store/server/image_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -11,7 +11,6 @@ import (\n \t\"encoding/base64\"\n \t\"fmt\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"net/http\"\n \t\"strings\"\n \t\"testing\"\n@@ -46,7 +45,7 @@ const gopher = \"iVBORw0KGgoAAAANSUhEUgAAAEsAAAA8CAAAAAALAhhPAAAFfUlEQVRYw62XeWwU\n \n func gopherPNG() io.Reader { return base64.NewDecoder(base64.StdEncoding, strings.NewReader(gopher)) }\n func gopherPNGBytes() []byte {\n-\timg, _ := ioutil.ReadAll(gopherPNG())\n+\timg, _ := io.ReadAll(gopherPNG())\n \treturn img\n }\n "
    },
    {
      "sha": "76aa77ac23b42fa95981bde30a0a26a3e2222daa",
      "filename": "backend/app/cmd/backup.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/backup.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/backup.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/backup.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -41,7 +41,7 @@ func (ec *BackupCommand) Execute(_ []string) error {\n \tctx, cancel := context.WithTimeout(context.Background(), ec.Timeout)\n \tdefer cancel()\n \texportURL := fmt.Sprintf(\"%s/api/v1/admin/export?mode=file&site=%s\", ec.RemarkURL, ec.Site)\n-\treq, err := http.NewRequest(http.MethodGet, exportURL, nil)\n+\treq, err := http.NewRequest(http.MethodGet, exportURL, http.NoBody)\n \tif err != nil {\n \t\treturn errors.Wrapf(err, \"can't make export request for %s\", exportURL)\n \t}\n@@ -66,7 +66,7 @@ func (ec *BackupCommand) Execute(_ []string) error {\n \tif err != nil {\n \t\treturn errors.Wrapf(err, \"can't create backup file %s\", fname)\n \t}\n-\tdefer func() {\n+\tdefer func() { //nolint:gosec // false positive on defer without error check when it's checked here\n \t\tif err = fh.Close(); err != nil {\n \t\t\tlog.Printf(\"[WARN] failed to close file %s, %s\", fh.Name(), err)\n \t\t}"
    },
    {
      "sha": "755e0db50fb26aca6c36a53146086ad9f75f5ce3",
      "filename": "backend/app/cmd/backup_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/backup_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/backup_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/backup_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -2,7 +2,6 @@ package cmd\n \n import (\n \t\"fmt\"\n-\t\"io/ioutil\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"os\"\n@@ -31,7 +30,7 @@ func TestBackup_Execute(t *testing.T) {\n \tassert.NoError(t, err)\n \tdefer os.Remove(\"/tmp/remark-test.export\")\n \n-\tdata, err := ioutil.ReadFile(\"/tmp/remark-test.export\")\n+\tdata, err := os.ReadFile(\"/tmp/remark-test.export\")\n \trequire.NoError(t, err)\n \tassert.Equal(t, \"blah\\nblah2\\n12345678\\n\", string(data))\n }"
    },
    {
      "sha": "a368f65fa12946f68bbbb7da5fd068b789e9abc4",
      "filename": "backend/app/cmd/cleanup.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/cleanup.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/cleanup.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/cleanup.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -193,7 +193,7 @@ func (cc *CleanupCommand) listComments(postURL string) ([]store.Comment, error)\n func (cc *CleanupCommand) deleteComment(c store.Comment) error {\n \n \tdeleteURL := fmt.Sprintf(\"%s/api/v1/admin/comment/%s?site=%s&url=%s&format=plain\", cc.RemarkURL, c.ID, cc.Site, c.Locator.URL)\n-\treq, err := http.NewRequest(\"DELETE\", deleteURL, nil)\n+\treq, err := http.NewRequest(\"DELETE\", deleteURL, http.NoBody)\n \tif err != nil {\n \t\treturn errors.Wrapf(err, \"failed to make delete request for comment %s, %s\", c.ID, c.Locator.URL)\n \t}\n@@ -215,7 +215,7 @@ func (cc *CleanupCommand) deleteComment(c store.Comment) error {\n func (cc *CleanupCommand) setTitle(c store.Comment) error {\n \n \ttitleURL := fmt.Sprintf(\"%s/api/v1/admin/title/%s?site=%s&url=%s&format=plain\", cc.RemarkURL, c.ID, cc.Site, c.Locator.URL)\n-\treq, err := http.NewRequest(\"PUT\", titleURL, nil)\n+\treq, err := http.NewRequest(\"PUT\", titleURL, http.NoBody)\n \tif err != nil {\n \t\treturn errors.Wrapf(err, \"failed to make title request for comment %s, %s\", c.ID, c.Locator.URL)\n \t}"
    },
    {
      "sha": "4d257192947c24329b537edb98b0f84b07dcd9b4",
      "filename": "backend/app/cmd/cmd.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/cmd.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/cmd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/cmd.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -4,7 +4,7 @@ package cmd\n \n import (\n \t\"bytes\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"os\"\n \t\"path/filepath\"\n@@ -103,7 +103,7 @@ func resetEnv(envs ...string) {\n \n // responseError returns error with status and response body\n func responseError(resp *http.Response) error {\n-\tbody, e := ioutil.ReadAll(resp.Body)\n+\tbody, e := io.ReadAll(resp.Body)\n \tif e != nil {\n \t\tbody = []byte(\"\")\n \t}\n@@ -113,7 +113,7 @@ func responseError(resp *http.Response) error {\n // mkdir -p for all dirs\n func makeDirs(dirs ...string) error {\n \tfor _, dir := range dirs {\n-\t\tif err := os.MkdirAll(dir, 0700); err != nil { // If path is already a directory, MkdirAll does nothing\n+\t\tif err := os.MkdirAll(dir, 0o700); err != nil { // If path is already a directory, MkdirAll does nothing\n \t\t\treturn errors.Wrapf(err, \"can't make directory %s\", dir)\n \t\t}\n \t}"
    },
    {
      "sha": "d0b64bda8508ef7bf10e2edf3cfdc7771e1fc349",
      "filename": "backend/app/cmd/import.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/import.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/import.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/import.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -5,7 +5,6 @@ import (\n \t\"context\"\n \t\"fmt\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"net/http\"\n \t\"os\"\n \t\"strings\"\n@@ -58,7 +57,7 @@ func (ic *ImportCommand) Execute(_ []string) error {\n \t\treturn responseError(resp)\n \t}\n \n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tif err != nil {\n \t\treturn errors.Wrap(err, \"can't get response from importer\")\n \t}"
    },
    {
      "sha": "b92337a3d60ee7f53d0c2e5ee88892efc11ebe1a",
      "filename": "backend/app/cmd/import_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/import_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/import_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/import_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -2,7 +2,7 @@ package cmd\n \n import (\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"testing\"\n@@ -20,7 +20,7 @@ func TestImport_Execute(t *testing.T) {\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tassert.Equal(t, r.URL.Path, \"/api/v1/admin/import\")\n \t\tassert.Equal(t, \"POST\", r.Method)\n-\t\tbody, err := ioutil.ReadAll(r.Body)\n+\t\tbody, err := io.ReadAll(r.Body)\n \t\tassert.NoError(t, err)\n \t\tassert.Equal(t, \"blah\\nblah2\\n12345678\\n\", string(body))\n \n@@ -97,7 +97,7 @@ func TestImport_ExecuteTimeout(t *testing.T) {\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tassert.Equal(t, r.URL.Path, \"/api/v1/admin/import\")\n \t\tassert.Equal(t, \"POST\", r.Method)\n-\t\tbody, err := ioutil.ReadAll(r.Body)\n+\t\tbody, err := io.ReadAll(r.Body)\n \t\tassert.NoError(t, err)\n \t\tassert.Equal(t, \"blah\\nblah2\\n12345678\\n\", string(body))\n \t\ttime.Sleep(500 * time.Millisecond)"
    },
    {
      "sha": "f5022592eba187be82ba5e7f1e188854adbe4342",
      "filename": "backend/app/cmd/remap.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/remap.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/remap.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/remap.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -3,7 +3,7 @@ package cmd\n import (\n \t\"context\"\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"os\"\n \t\"time\"\n@@ -55,7 +55,7 @@ func (rc *RemapCommand) Execute(_ []string) error {\n \t\treturn responseError(resp)\n \t}\n \n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tif err != nil {\n \t\treturn errors.Wrap(err, \"can't get response\")\n \t}"
    },
    {
      "sha": "0f71043fb083d4ad896e48ebb0922ee5ba94967f",
      "filename": "backend/app/cmd/remap_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/remap_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/remap_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/remap_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -1,7 +1,7 @@\n package cmd\n \n import (\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"testing\"\n@@ -18,7 +18,7 @@ func TestRemap_Execute(t *testing.T) {\n \t\tassert.Equal(t, r.URL.Path, \"/api/v1/admin/remap\")\n \t\tassert.Equal(t, \"POST\", r.Method)\n \t\tassert.Equal(t, \"remark\", r.URL.Query().Get(\"site\"))\n-\t\tbody, err := ioutil.ReadAll(r.Body)\n+\t\tbody, err := io.ReadAll(r.Body)\n \t\tassert.NoError(t, err)\n \t\tassert.Equal(t, \"http://oldsite.com* https://newsite.com*\\nhttp://oldsite.com/from-old-page/1 https://newsite.com/to-new-page/1\", string(body))\n "
    },
    {
      "sha": "f526b902d5e99a1f9946d5d0a5d563ae69a2e87c",
      "filename": "backend/app/cmd/restore_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/restore_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/restore_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/restore_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -2,7 +2,7 @@ package cmd\n \n import (\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"testing\"\n@@ -19,7 +19,7 @@ func TestRestore_Execute(t *testing.T) {\n \t\tassert.Equal(t, r.URL.Path, \"/api/v1/admin/import\")\n \t\tassert.Equal(t, \"POST\", r.Method)\n \t\tassert.Equal(t, \"native\", r.URL.Query().Get(\"provider\"))\n-\t\tbody, err := ioutil.ReadAll(r.Body)\n+\t\tbody, err := io.ReadAll(r.Body)\n \t\tassert.NoError(t, err)\n \t\tassert.Equal(t, \"blah\\nblah2\\n12345678\\n\", string(body))\n "
    },
    {
      "sha": "60b540d2643952aa16a6f44840c180188b2f0c53",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -3,7 +3,6 @@ package cmd\n import (\n \t\"context\"\n \t\"fmt\"\n-\t\"io/ioutil\"\n \t\"net/http\"\n \t\"net/url\"\n \t\"os\"\n@@ -878,7 +877,7 @@ func (s *ServerCommand) loadEmailTemplate() (string, error) {\n \t\tfile, err = fs.ReadFile(s.Auth.Email.MsgTemplate)\n \t} else {\n \t\t// deprecated loading from an external file, should be removed before v1.9.0\n-\t\tfile, err = ioutil.ReadFile(s.Auth.Email.MsgTemplate)\n+\t\tfile, err = os.ReadFile(s.Auth.Email.MsgTemplate)\n \t\tlog.Printf(\"[INFO] template %s will be read from disk\", s.Auth.Email.MsgTemplate)\n \t}\n "
    },
    {
      "sha": "542e1b4c902bf1ab9dabf09006488e3cc81e965d",
      "filename": "backend/app/cmd/server_test.go",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/server_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/cmd/server_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -4,7 +4,7 @@ import (\n \t\"context\"\n \t\"crypto/tls\"\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"math/rand\"\n \t\"net\"\n \t\"net/http\"\n@@ -39,7 +39,7 @@ func TestServerApp(t *testing.T) {\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n \tassert.Equal(t, 200, resp.StatusCode)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n \n@@ -54,7 +54,7 @@ func TestServerApp(t *testing.T) {\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n \tassert.Equal(t, http.StatusCreated, resp.StatusCode)\n-\tbody, _ = ioutil.ReadAll(resp.Body)\n+\tbody, _ = io.ReadAll(resp.Body)\n \tt.Log(string(body))\n \n \temail, err := app.dataService.AdminStore.Email(\"\")\n@@ -84,7 +84,7 @@ func TestServerApp_DevMode(t *testing.T) {\n \tresp, err := http.Get(fmt.Sprintf(\"http://localhost:%d/api/v1/ping\", port))\n \trequire.NoError(t, err)\n \tassert.Equal(t, 200, resp.StatusCode)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tassert.Equal(t, \"pong\", string(body))\n@@ -113,7 +113,7 @@ func TestServerApp_AnonMode(t *testing.T) {\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n \tassert.Equal(t, http.StatusOK, resp.StatusCode)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n \n@@ -259,7 +259,7 @@ func TestServerApp_WithSSL(t *testing.T) {\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n \tassert.Equal(t, 200, resp.StatusCode)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n \n@@ -295,7 +295,7 @@ func TestServerApp_WithRemote(t *testing.T) {\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n \tassert.Equal(t, 200, resp.StatusCode)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n \n@@ -547,20 +547,20 @@ func TestServerAuthHooks(t *testing.T) {\n \treq.Header.Set(\"X-JWT\", tkNoAud)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode, \"user without aud claim rejected, \\n\"+tkNoAud+\"\\n\"+string(body))\n \n \t// block user dev as admin\n \treq, err = http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"http://localhost:%d/api/v1/admin/user/dev?site=remark&block=1&ttl=10d\", port), nil)\n+\t\tfmt.Sprintf(\"http://localhost:%d/api/v1/admin/user/dev?site=remark&block=1&ttl=10d\", port), http.NoBody)\n \tassert.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n \tassert.Equal(t, http.StatusOK, resp.StatusCode, \"user dev blocked\")\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \tt.Log(string(b))\n@@ -572,7 +572,7 @@ func TestServerAuthHooks(t *testing.T) {\n \treq.Header.Set(\"X-JWT\", tk)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \tassert.True(t, resp.StatusCode == http.StatusForbidden || resp.StatusCode == http.StatusUnauthorized,"
    },
    {
      "sha": "e0388b7d55800f9d20fb433c46e42a57bde9864e",
      "filename": "backend/app/main.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/main.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/main.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/main.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -90,7 +90,7 @@ func getDump() string {\n // nolint:gochecknoinits // can't avoid it in this place\n func init() {\n \t// catch SIGQUIT and print stack traces\n-\tsigChan := make(chan os.Signal)\n+\tsigChan := make(chan os.Signal, 1)\n \tgo func() {\n \t\tfor range sigChan {\n \t\t\tlog.Printf(\"[INFO] SIGQUIT detected, dump:\\n%s\", getDump())"
    },
    {
      "sha": "d535a61fb7861c49907f2ade0c2f1e9cc227e6d2",
      "filename": "backend/app/main_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/main_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/main_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/main_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -2,6 +2,7 @@ package main\n \n import (\n \t\"fmt\"\n+\t\"io\"\n \t\"io/ioutil\"\n \t\"math/rand\"\n \t\"net\"\n@@ -54,7 +55,7 @@ func Test_Main(t *testing.T) {\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n \tassert.Equal(t, 200, resp.StatusCode)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n }\n@@ -69,7 +70,7 @@ func TestMain_WithWebhook(t *testing.T) {\n \t\tatomic.StoreInt32(&webhookSent, 1)\n \t\tassert.Equal(t, \"application/json\", r.Header.Get(\"Content-Type\"))\n \n-\t\tb, e := ioutil.ReadAll(r.Body)\n+\t\tb, e := io.ReadAll(r.Body)\n \t\tdefer r.Body.Close()\n \n \t\tassert.Nil(t, e)"
    },
    {
      "sha": "421eff23483bd1c8c4df665ebea43d36cadf153a",
      "filename": "backend/app/migrator/backup.go",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/backup.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/backup.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/migrator/backup.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -4,7 +4,6 @@ import (\n \t\"compress/gzip\"\n \t\"context\"\n \t\"fmt\"\n-\t\"io/ioutil\"\n \t\"os\"\n \t\"sort\"\n \t\"strings\"\n@@ -69,15 +68,20 @@ func (ab AutoBackup) makeBackup() (string, error) {\n }\n \n func (ab AutoBackup) removeOldBackupFiles() {\n-\tfiles, err := ioutil.ReadDir(ab.BackupLocation)\n+\tfiles, err := os.ReadDir(ab.BackupLocation)\n \tif err != nil {\n \t\tlog.Printf(\"[WARN] can't read files in backup directory %s, %s\", ab.BackupLocation, err)\n \t\treturn\n \t}\n \tbackFiles := []os.FileInfo{}\n \tfor _, file := range files {\n+\t\tinfo, e := file.Info()\n+\t\tif e != nil {\n+\t\t\tlog.Printf(\"[WARN] can't read info for directory %s, %s\", file.Name(), e)\n+\t\t\treturn\n+\t\t}\n \t\tif strings.HasPrefix(file.Name(), \"backup-\"+ab.SiteID) {\n-\t\t\tbackFiles = append(backFiles, file)\n+\t\t\tbackFiles = append(backFiles, info)\n \t\t}\n \t}\n \tsort.Slice(backFiles, func(i int, j int) bool { return backFiles[i].Name() < backFiles[j].Name() })"
    },
    {
      "sha": "7917db41de8f8b9465b644499e9c343b9b197282",
      "filename": "backend/app/migrator/backup_test.go",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/backup_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/backup_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/migrator/backup_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -4,7 +4,6 @@ import (\n \t\"context\"\n \t\"fmt\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"os\"\n \t\"testing\"\n \t\"time\"\n@@ -17,20 +16,20 @@ func TestBackup_RemoveOldBackupFiles(t *testing.T) {\n \tloc := \"/tmp/remark-backups.test\"\n \tdefer os.RemoveAll(loc)\n \n-\tassert.NoError(t, os.MkdirAll(loc, 0700))\n+\tassert.NoError(t, os.MkdirAll(loc, 0o700))\n \n \tfor i := 1; i <= 10; i++ {\n \t\tfname := fmt.Sprintf(\"%s/backup-site1-201712%02d.gz\", loc, i)\n-\t\terr := ioutil.WriteFile(fname, []byte(\"blah\"), 0600)\n+\t\terr := os.WriteFile(fname, []byte(\"blah\"), 0o600)\n \t\tassert.NoError(t, err)\n \t}\n \tfname := fmt.Sprintf(\"%s/backup-site2-20171210.gz\", loc)\n-\terr := ioutil.WriteFile(fname, []byte(\"blah\"), 0600)\n+\terr := os.WriteFile(fname, []byte(\"blah\"), 0o600)\n \tassert.NoError(t, err)\n \n \tbk := AutoBackup{BackupLocation: loc, SiteID: \"site1\", KeepMax: 3}\n \tbk.removeOldBackupFiles()\n-\tff, err := ioutil.ReadDir(loc)\n+\tff, err := os.ReadDir(loc)\n \tassert.NoError(t, err)\n \trequire.Equal(t, 4, len(ff), \"should keep 4 files - 3 kept for sit1, and one for site2\")\n \tassert.Equal(t, \"backup-site1-20171208.gz\", ff[0].Name())\n@@ -42,7 +41,7 @@ func TestBackup_RemoveOldBackupFiles(t *testing.T) {\n func TestBackup_MakeBackup(t *testing.T) {\n \tloc := \"/tmp/remark-backups.test\"\n \tdefer os.RemoveAll(loc)\n-\tassert.NoError(t, os.MkdirAll(loc, 0700))\n+\tassert.NoError(t, os.MkdirAll(loc, 0o700))\n \n \tbk := AutoBackup{BackupLocation: loc, SiteID: \"site1\", KeepMax: 3, Exporter: &mockExporter{}}\n \tfname, err := bk.makeBackup()\n@@ -58,7 +57,7 @@ func TestBackup_MakeBackup(t *testing.T) {\n func TestBackup_Do(t *testing.T) {\n \tloc := \"/tmp/remark-backups.test\"\n \tdefer os.RemoveAll(loc)\n-\tassert.NoError(t, os.MkdirAll(loc, 0700))\n+\tassert.NoError(t, os.MkdirAll(loc, 0o700))\n \n \tctx, cancel := context.WithCancel(context.Background())\n \tgo func() {"
    },
    {
      "sha": "fc510347ad713e9904d02d1f695a9b4c9e7ceac9",
      "filename": "backend/app/migrator/disqus.go",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/disqus.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/disqus.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/migrator/disqus.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -101,9 +101,7 @@ func (d *Disqus) convert(r io.Reader, siteID string) (ch chan store.Comment) {\n \t\t\t\tbreak\n \t\t\t}\n \n-\t\t\tswitch se := t.(type) {\n-\t\t\tcase xml.StartElement:\n-\n+\t\t\tif se, ok := t.(xml.StartElement); ok {\n \t\t\t\tif se.Name.Local == \"thread\" {\n \t\t\t\t\tstats.inpThreads++\n \t\t\t\t\tthread := disqusThread{}"
    },
    {
      "sha": "901b3e2867c1d526e81e037ed3bce524f52689cd",
      "filename": "backend/app/migrator/mapper.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/mapper.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/mapper.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/migrator/mapper.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -3,7 +3,6 @@ package migrator\n import (\n \t\"errors\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"strings\"\n )\n \n@@ -30,7 +29,7 @@ func NewURLMapper(reader io.Reader) (Mapper, error) {\n // https://www.myblog.com/blog/1/ https://myblog.com/blog/1/\n // https://www.myblog.com/* https://myblog.com/*\n func (u *URLMapper) loadRules(reader io.Reader) error {\n-\tdata, err := ioutil.ReadAll(reader)\n+\tdata, err := io.ReadAll(reader)\n \tif err != nil {\n \t\treturn err\n \t}"
    },
    {
      "sha": "d7671f927ba990af58e55e627757c5432f2a886e",
      "filename": "backend/app/migrator/migrator.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/migrator.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/migrator.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/migrator/migrator.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -77,7 +77,7 @@ func ImportComments(p ImportParams) (int, error) {\n \t\treturn 0, errors.Wrapf(err, \"can't open import file %s\", p.InputFile)\n \t}\n \n-\tdefer func() {\n+\tdefer func() { //nolint:gosec // false positive on defer without error check when it's checked here\n \t\tif err = fh.Close(); err != nil {\n \t\t\tlog.Printf(\"[WARN] can't close %s, %s\", p.InputFile, err)\n \t\t}"
    },
    {
      "sha": "fe066409cdb3e94f41d94666ae04dfd4a79b5cef",
      "filename": "backend/app/migrator/migrator_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/migrator_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/migrator_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/migrator/migrator_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -1,7 +1,6 @@\n package migrator\n \n import (\n-\t\"io/ioutil\"\n \t\"os\"\n \t\"testing\"\n \t\"time\"\n@@ -43,7 +42,7 @@ func TestMigrator_ImportWordPress(t *testing.T) {\n \t\tos.Remove(\"/tmp/wordpress-test.xml\")\n \t}()\n \n-\terr := ioutil.WriteFile(\"/tmp/wordpress-test.xml\", []byte(xmlTestWP), 0600)\n+\terr := os.WriteFile(\"/tmp/wordpress-test.xml\", []byte(xmlTestWP), 0o600)\n \trequire.NoError(t, err)\n \n \tb, err := engine.NewBoltDB(bolt.Options{}, engine.BoltSite{FileName: \"/tmp/remark-test.db\", SiteID: \"test\"})\n@@ -94,7 +93,7 @@ func TestMigrator_ImportNative(t *testing.T) {\n \tdata := `{\"version\":1} {\"id\":\"efbc17f177ee1a1c0ee6e1e025749966ec071adc\",\"pid\":\"\",\"text\":\"some text, <a href=\\\"http://radio-t.com\\\" rel=\\\"nofollow\\\">link</a>\",\"user\":{\"name\":\"user name\",\"id\":\"user1\",\"picture\":\"\",\"profile\":\"\",\"admin\":false},\"locator\":{\"site\":\"radio-t\",\"url\":\"https://radio-t.com\"},\"score\":0,\"votes\":{},\"time\":\"2017-12-20T15:18:22-06:00\"}` + \"\\n\" +\n \t\t`{\"id\":\"afbc17f177ee1a1c0ee6e1e025749966ec071adc\",\"pid\":\"efbc17f177ee1a1c0ee6e1e025749966ec071adc\",\"text\":\"some text2, <a href=\\\"http://radio-t.com\\\" rel=\\\"nofollow\\\">link</a>\",\"user\":{\"name\":\"user name\",\"id\":\"user1\",\"picture\":\"\",\"profile\":\"\",\"admin\":false},\"locator\":{\"site\":\"radio-t\",\"url\":\"https://radio-t.com\"},\"score\":0,\"votes\":{},\"time\":\"2017-12-20T15:18:23-06:00\"}` + \"\\n\"\n \n-\terr := ioutil.WriteFile(\"/tmp/disqus-test.r42\", []byte(data), 0600)\n+\terr := os.WriteFile(\"/tmp/disqus-test.r42\", []byte(data), 0o600)\n \trequire.NoError(t, err)\n \n \tb, err := engine.NewBoltDB(bolt.Options{}, engine.BoltSite{FileName: \"/tmp/remark-test.db\", SiteID: \"radio-t\"})"
    },
    {
      "sha": "2c66ddda82fc49c8f2a5a0996c4e04e625d4b048",
      "filename": "backend/app/migrator/wordpress.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/wordpress.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/migrator/wordpress.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/migrator/wordpress.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -107,8 +107,7 @@ func (w *WordPress) convert(r io.Reader, siteID string) chan store.Comment {\n \t\t\t\tbreak\n \t\t\t}\n \n-\t\t\tswitch el := t.(type) {\n-\t\t\tcase xml.StartElement:\n+\t\t\tif el, ok := t.(xml.StartElement); ok {\n \t\t\t\tif el.Name.Local == \"item\" {\n \t\t\t\t\tstats.inpItems++\n \t\t\t\t\titem := wpItem{}"
    },
    {
      "sha": "2d9c15274a71ebd8f57447b0216e8f231b31fad2",
      "filename": "backend/app/notify/telegram.go",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/notify/telegram.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/notify/telegram.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/telegram.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -144,10 +144,10 @@ func (t *Telegram) sendMessage(ctx context.Context, b []byte, chatID string) err\n func buildMessage(req Request) ([]byte, error) {\n \tcommentURLPrefix := req.Comment.Locator.URL + uiNav\n \n-\tmsg := fmt.Sprintf(`<a href=\"%s\">%s</a>`, commentURLPrefix+req.Comment.ID, escapeTelegramText(req.Comment.User.Name))\n+\tmsg := fmt.Sprintf(`<a href=%q>%s</a>`, commentURLPrefix+req.Comment.ID, escapeTelegramText(req.Comment.User.Name))\n \n \tif req.Comment.ParentID != \"\" {\n-\t\tmsg += fmt.Sprintf(\" -> <a href=\\\"%s\\\">%s</a>\", commentURLPrefix+req.parent.ID, escapeTelegramText(req.parent.User.Name))\n+\t\tmsg += fmt.Sprintf(\" -> <a href=%q>%s</a>\", commentURLPrefix+req.parent.ID, escapeTelegramText(req.parent.User.Name))\n \t}\n \n \tmsg += fmt.Sprintf(\"\\n\\n%s\", telegramSupportedHTML(req.Comment.Text))\n@@ -157,7 +157,7 @@ func buildMessage(req Request) ([]byte, error) {\n \t}\n \n \tif req.Comment.PostTitle != \"\" {\n-\t\tmsg += fmt.Sprintf(\"\\n\\n↦  <a href=\\\"%s\\\">%s</a>\", req.Comment.Locator.URL, escapeTelegramText(req.Comment.PostTitle))\n+\t\tmsg += fmt.Sprintf(\"\\n\\n↦  <a href=%q>%s</a>\", req.Comment.Locator.URL, escapeTelegramText(req.Comment.PostTitle))\n \t}\n \n \tbody := telegramMsg{Text: msg, ParseMode: \"HTML\"}\n@@ -421,7 +421,7 @@ func (t *Telegram) Request(ctx context.Context, method string, b []byte, data in\n \t\tvar req *http.Request\n \t\tvar err error\n \t\tif b == nil {\n-\t\t\treq, err = http.NewRequestWithContext(ctx, \"GET\", url, nil)\n+\t\t\treq, err = http.NewRequestWithContext(ctx, \"GET\", url, http.NoBody)\n \t\t} else {\n \t\t\treq, err = http.NewRequestWithContext(ctx, \"POST\", url, bytes.NewReader(b))\n \t\t\treq.Header.Set(\"Content-Type\", \"application/json; charset=utf-8\")"
    },
    {
      "sha": "8f8313f4114962023aa3dbc88acd29199f4ab55d",
      "filename": "backend/app/notify/webhook.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/notify/webhook.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/notify/webhook.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/webhook.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -4,7 +4,7 @@ import (\n \t\"bytes\"\n \t\"context\"\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"strings\"\n \t\"text/template\"\n@@ -90,7 +90,7 @@ func (t *Webhook) Send(ctx context.Context, req Request) error {\n \n \tif resp.StatusCode != http.StatusOK {\n \t\terrMsg := fmt.Sprintf(\"webhook request failed with non-OK status code: %d\", resp.StatusCode)\n-\t\trespBody, e := ioutil.ReadAll(resp.Body)\n+\t\trespBody, e := io.ReadAll(resp.Body)\n \t\tif e != nil {\n \t\t\treturn fmt.Errorf(errMsg)\n \t\t}"
    },
    {
      "sha": "38a3efad7282f9c7e47e72896a32535123e3a7f5",
      "filename": "backend/app/notify/webhook_test.go",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/notify/webhook_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/notify/webhook_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/webhook_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -4,7 +4,7 @@ import (\n \t\"bytes\"\n \t\"context\"\n \t\"errors\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"testing\"\n \n@@ -23,7 +23,7 @@ func (c funcWebhookClient) Do(r *http.Request) (*http.Response, error) {\n var okWebhookClient = funcWebhookClient(func(*http.Request) (*http.Response, error) {\n \treturn &http.Response{\n \t\tStatusCode: http.StatusOK,\n-\t\tBody:       ioutil.NopCloser(bytes.NewBufferString(\"ok\")),\n+\t\tBody:       io.NopCloser(bytes.NewBufferString(\"ok\")),\n \t}, nil\n })\n \n@@ -75,7 +75,7 @@ func TestWebhook_Send(t *testing.T) {\n \n \t\treturn &http.Response{\n \t\t\tStatusCode: http.StatusOK,\n-\t\t\tBody:       ioutil.NopCloser(bytes.NewBufferString(\"\")),\n+\t\t\tBody:       io.NopCloser(bytes.NewBufferString(\"\")),\n \t\t}, nil\n \t}), WebhookParams{\n \t\tWebhookURL: \"https://example.org/webhook\",\n@@ -116,7 +116,7 @@ func TestWebhook_Send(t *testing.T) {\n \twh, err = NewWebhook(funcWebhookClient(func(*http.Request) (*http.Response, error) {\n \t\treturn &http.Response{\n \t\t\tStatusCode: http.StatusNotFound,\n-\t\t\tBody:       ioutil.NopCloser(bytes.NewBufferString(\"not found\")),\n+\t\t\tBody:       io.NopCloser(bytes.NewBufferString(\"not found\")),\n \t\t}, nil\n \t}), WebhookParams{\n \t\tWebhookURL: \"http:/example.org/invalid-url\",\n@@ -129,7 +129,7 @@ func TestWebhook_Send(t *testing.T) {\n \twh, err = NewWebhook(funcWebhookClient(func(*http.Request) (*http.Response, error) {\n \t\treturn &http.Response{\n \t\t\tStatusCode: http.StatusNotFound,\n-\t\t\tBody:       ioutil.NopCloser(errReader{}),\n+\t\t\tBody:       io.NopCloser(errReader{}),\n \t\t}, nil\n \t}), WebhookParams{\n \t\tWebhookURL: \"http:/example.org/invalid-url\","
    },
    {
      "sha": "23d842505c744d896a95c041a27929ad8044f4d8",
      "filename": "backend/app/rest/api/admin_test.go",
      "status": "modified",
      "additions": 31,
      "deletions": 31,
      "changes": 62,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/admin_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/admin_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/admin_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -5,7 +5,7 @@ import (\n \t\"compress/gzip\"\n \t\"encoding/json\"\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"os\"\n@@ -48,7 +48,7 @@ func TestAdmin_Delete(t *testing.T) {\n \tresp, err := post(t, ts.URL+\"/api/v1/counts?site=remark42\", `[\"https://radio-t.com/blah\",\"https://radio-t.com/blah2\"]`)\n \trequire.NoError(t, err)\n \tassert.Equal(t, http.StatusOK, resp.StatusCode)\n-\tbb, err := ioutil.ReadAll(resp.Body)\n+\tbb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, resp.Body.Close())\n \tassert.NoError(t, err)\n \tj := []store.PostInfo{}\n@@ -59,7 +59,7 @@ func TestAdmin_Delete(t *testing.T) {\n \n \t// delete a comment\n \treq, err := http.NewRequest(http.MethodDelete,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/comment/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/comment/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1), http.NoBody)\n \trequire.NoError(t, err)\n \trequireAdminOnly(t, req)\n \tresp, err = sendReq(t, req, adminUmputunToken)\n@@ -97,7 +97,7 @@ func TestAdmin_Delete(t *testing.T) {\n \tresp, err = post(t, ts.URL+\"/api/v1/counts?site=remark42\", `[\"https://radio-t.com/blah\",\"https://radio-t.com/blah2\"]`)\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusOK, resp.StatusCode)\n-\tbb, err = ioutil.ReadAll(resp.Body)\n+\tbb, err = io.ReadAll(resp.Body)\n \tassert.NoError(t, resp.Body.Close())\n \tassert.NoError(t, err)\n \tj = []store.PostInfo{}\n@@ -136,7 +136,7 @@ func TestAdmin_Title(t *testing.T) {\n \taddComment(t, c2, ts)\n \n \treq, err := http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/title/%s?site=remark42&url=%s/post1\", ts.URL, id1, tss.URL), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/title/%s?site=remark42&url=%s/post1\", ts.URL, id1, tss.URL), http.NoBody)\n \tassert.NoError(t, err)\n \trequireAdminOnly(t, req)\n \tresp, err := sendReq(t, req, adminUmputunToken)\n@@ -171,7 +171,7 @@ func TestAdmin_DeleteUser(t *testing.T) {\n \t_, err = srv.DataService.Create(c3)\n \tassert.NoError(t, err)\n \n-\treq, err := http.NewRequest(http.MethodDelete, fmt.Sprintf(\"%s/api/v1/admin/user/%s?site=remark42\", ts.URL, \"id2\"), nil)\n+\treq, err := http.NewRequest(http.MethodDelete, fmt.Sprintf(\"%s/api/v1/admin/user/%s?site=remark42\", ts.URL, \"id2\"), http.NoBody)\n \tassert.NoError(t, err)\n \trequireAdminOnly(t, req)\n \tresp, err := sendReq(t, req, adminUmputunToken)\n@@ -220,7 +220,7 @@ func TestAdmin_Pin(t *testing.T) {\n \tpin := func(val int) int {\n \t\tclient := http.Client{}\n \t\treq, err := http.NewRequest(http.MethodPut,\n-\t\t\tfmt.Sprintf(\"%s/api/v1/admin/pin/%s?site=remark42&url=https://radio-t.com/blah&pin=%d\", ts.URL, id1, val), nil)\n+\t\t\tfmt.Sprintf(\"%s/api/v1/admin/pin/%s?site=remark42&url=https://radio-t.com/blah&pin=%d\", ts.URL, id1, val), http.NoBody)\n \t\tassert.NoError(t, err)\n \t\trequireAdminOnly(t, req)\n \t\treq.SetBasicAuth(\"admin\", \"password\")\n@@ -271,12 +271,12 @@ func TestAdmin_Block(t *testing.T) {\n \t\tif ttl != \"\" {\n \t\t\turl = url + \"&ttl=\" + ttl\n \t\t}\n-\t\treq, err := http.NewRequest(http.MethodPut, url, nil)\n+\t\treq, err := http.NewRequest(http.MethodPut, url, http.NoBody)\n \t\tassert.NoError(t, err)\n \t\trequireAdminOnly(t, req)\n \t\tresp, err := sendReq(t, req, adminUmputunToken)\n \t\trequire.NoError(t, err)\n-\t\tbody, err = ioutil.ReadAll(resp.Body)\n+\t\tbody, err = io.ReadAll(resp.Body)\n \t\tassert.NoError(t, err)\n \t\trequire.NoError(t, resp.Body.Close())\n \t\treturn resp.StatusCode, body\n@@ -308,7 +308,7 @@ func TestAdmin_Block(t *testing.T) {\n \tresp, err := post(t, ts.URL+\"/api/v1/counts?site=remark42\", `[\"https://radio-t.com/blah\"]`)\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusOK, resp.StatusCode)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tpi = []store.PostInfo{}\n@@ -380,7 +380,7 @@ func TestAdmin_BlockedList(t *testing.T) {\n \n \t// block user1\n \treq, err := http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/user/%s?site=remark42&block=%d\", ts.URL, \"user1\", 1), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/user/%s?site=remark42&block=%d\", ts.URL, \"user1\", 1), http.NoBody)\n \tassert.NoError(t, err)\n \tres, err := sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n@@ -389,14 +389,14 @@ func TestAdmin_BlockedList(t *testing.T) {\n \n \t// block user2\n \treq, err = http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/user/%s?site=remark42&block=%d&ttl=150ms\", ts.URL, \"user2\", 1), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/user/%s?site=remark42&block=%d&ttl=150ms\", ts.URL, \"user2\", 1), http.NoBody)\n \tassert.NoError(t, err)\n \tres, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n \trequire.NoError(t, res.Body.Close())\n \tassert.Equal(t, 200, res.StatusCode)\n \n-\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/blocked?site=remark42\", nil)\n+\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/blocked?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \tres, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n@@ -413,7 +413,7 @@ func TestAdmin_BlockedList(t *testing.T) {\n \tt.Logf(\"%+v\", users)\n \ttime.Sleep(150 * time.Millisecond)\n \n-\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/blocked?site=remark42\", nil)\n+\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/blocked?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \tres, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n@@ -445,7 +445,7 @@ func TestAdmin_ReadOnly(t *testing.T) {\n \n \t// set post to read-only\n \treq, err := http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah&ro=1\", ts.URL), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah&ro=1\", ts.URL), http.NoBody)\n \tassert.NoError(t, err)\n \tresp, err := sendReq(t, req, \"\") // non-admin user\n \trequire.NoError(t, err)\n@@ -473,7 +473,7 @@ func TestAdmin_ReadOnly(t *testing.T) {\n \n \t// reset post's read-only\n \treq, err = http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah&ro=0\", ts.URL), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah&ro=0\", ts.URL), http.NoBody)\n \tassert.NoError(t, err)\n \tresp, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n@@ -502,7 +502,7 @@ func TestAdmin_ReadOnlyNoComments(t *testing.T) {\n \n \t// set post to read-only\n \treq, err := http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah&ro=1\", ts.URL), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah&ro=1\", ts.URL), http.NoBody)\n \tassert.NoError(t, err)\n \trequireAdminOnly(t, req)\n \tresp, err := sendReq(t, req, adminUmputunToken)\n@@ -538,7 +538,7 @@ func TestAdmin_ReadOnlyWithAge(t *testing.T) {\n \n \t// set post to read-only\n \treq, err := http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah&ro=1\", ts.URL), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah&ro=1\", ts.URL), http.NoBody)\n \tassert.NoError(t, err)\n \trequireAdminOnly(t, req)\n \tresp, err := sendReq(t, req, adminUmputunToken)\n@@ -551,7 +551,7 @@ func TestAdmin_ReadOnlyWithAge(t *testing.T) {\n \n \t// reset post's read-only\n \treq, err = http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah&ro=0\", ts.URL), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah&ro=0\", ts.URL), http.NoBody)\n \tassert.NoError(t, err)\n \tresp, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n@@ -580,7 +580,7 @@ func TestAdmin_Verify(t *testing.T) {\n \tassert.False(t, verified)\n \n \treq, err := http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/verify/user1?site=remark42&verified=1\", ts.URL), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/verify/user1?site=remark42&verified=1\", ts.URL), http.NoBody)\n \tassert.NoError(t, err)\n \trequireAdminOnly(t, req)\n \tresp, err := sendReq(t, req, adminUmputunToken)\n@@ -600,7 +600,7 @@ func TestAdmin_Verify(t *testing.T) {\n \tassert.True(t, comments.Comments[0].User.Verified)\n \n \treq, err = http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/verify/user1?site=remark42&verified=0\", ts.URL), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/verify/user1?site=remark42&verified=0\", ts.URL), http.NoBody)\n \tassert.NoError(t, err)\n \tresp, err = sendReq(t, req, adminUmputunToken)\n \trequire.NoError(t, err)\n@@ -650,7 +650,7 @@ func TestAdmin_ExportFile(t *testing.T) {\n \taddComment(t, c1, ts)\n \taddComment(t, c2, ts)\n \n-\treq, err := http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/export?site=remark42&mode=file\", nil)\n+\treq, err := http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/export?site=remark42&mode=file\", http.NoBody)\n \trequire.NoError(t, err)\n \trequireAdminOnly(t, req)\n \tresp, err := sendReq(t, req, adminUmputunToken)\n@@ -662,7 +662,7 @@ func TestAdmin_ExportFile(t *testing.T) {\n \tungzReader, err := gzip.NewReader(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n-\tungzBody, err := ioutil.ReadAll(ungzReader)\n+\tungzBody, err := io.ReadAll(ungzReader)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 3, strings.Count(string(ungzBody), \"\\n\"))\n \tassert.Equal(t, 2, strings.Count(string(ungzBody), \"\\\"text\\\"\"))\n@@ -713,14 +713,14 @@ func TestAdmin_DeleteMeRequest(t *testing.T) {\n \t\t},\n \t}\n \n-\trequire.NoError(t, os.MkdirAll(os.TempDir()+\"/ava-remark42/42\", 0700))\n-\trequire.NoError(t, ioutil.WriteFile(os.TempDir()+\"/ava-remark42/42/pic.image\", []byte(\"some image data\"), 0600))\n+\trequire.NoError(t, os.MkdirAll(os.TempDir()+\"/ava-remark42/42\", 0o700))\n+\trequire.NoError(t, os.WriteFile(os.TempDir()+\"/ava-remark42/42/pic.image\", []byte(\"some image data\"), 0o600))\n \n \ttkn, err := srv.Authenticator.TokenService().Token(claims)\n \tassert.NoError(t, err)\n \n \tclient := http.Client{}\n-\treq, err := http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, tkn), nil)\n+\treq, err := http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, tkn), http.NoBody)\n \tassert.NoError(t, err)\n \n \treq.SetBasicAuth(\"admin\", \"password\")\n@@ -754,7 +754,7 @@ func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n \n \t// try with bad token\n \tclient := http.Client{}\n-\treq, err := http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, \"bad token\"), nil)\n+\treq, err := http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, \"bad token\"), http.NoBody)\n \tassert.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err := client.Do(req)\n@@ -782,7 +782,7 @@ func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n \n \ttkn, err := srv.Authenticator.TokenService().Token(claims)\n \tassert.NoError(t, err)\n-\treq, err = http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, tkn), nil)\n+\treq, err = http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, tkn), http.NoBody)\n \tassert.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"bad-password\")\n \tresp, err = client.Do(req)\n@@ -795,7 +795,7 @@ func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n \tbadClaims.User.ID = \"no-such-id\"\n \ttkn, err = srv.Authenticator.TokenService().Token(badClaims)\n \tassert.NoError(t, err)\n-\treq, err = http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, tkn), nil)\n+\treq, err = http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, tkn), http.NoBody)\n \tassert.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err = client.Do(req)\n@@ -808,13 +808,13 @@ func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n \tbadClaims2.User.SetBoolAttr(\"delete_me\", false)\n \ttkn, err = srv.Authenticator.TokenService().Token(badClaims2)\n \tassert.NoError(t, err)\n-\treq, err = http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, tkn), nil)\n+\treq, err = http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, tkn), http.NoBody)\n \tassert.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 403, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tassert.True(t, strings.Contains(string(b), \"can't use provided token\"))"
    },
    {
      "sha": "af6183d457ea01cb75f3bc1f878446d1d34c9596",
      "filename": "backend/app/rest/api/migrator_test.go",
      "status": "modified",
      "additions": 12,
      "deletions": 13,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/migrator_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/migrator_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/migrator_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -6,7 +6,6 @@ import (\n \t\"encoding/json\"\n \t\"fmt\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"mime/multipart\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n@@ -43,7 +42,7 @@ func TestMigrator_Import(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusAccepted, resp.StatusCode)\n \n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"{\\\"status\\\":\\\"import request accepted\\\"}\\n\", string(b))\n \tassert.NoError(t, resp.Body.Close())\n@@ -78,7 +77,7 @@ func TestMigrator_ImportForm(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusAccepted, resp.StatusCode)\n \n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"{\\\"status\\\":\\\"import request accepted\\\"}\\n\", string(b))\n \tassert.NoError(t, resp.Body.Close())\n@@ -101,7 +100,7 @@ func TestMigrator_ImportFromWP(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusAccepted, resp.StatusCode)\n \n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"{\\\"status\\\":\\\"import request accepted\\\"}\\n\", string(b))\n \tassert.NoError(t, resp.Body.Close())\n@@ -129,7 +128,7 @@ func TestMigrator_ImportFromCommento(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusAccepted, resp.StatusCode)\n \n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"{\\\"status\\\":\\\"import request accepted\\\"}\\n\", string(b))\n \tassert.NoError(t, resp.Body.Close())\n@@ -219,7 +218,7 @@ func TestMigrator_ImportWaitExpired(t *testing.T) {\n \tassert.Equal(t, http.StatusAccepted, resp.StatusCode)\n \n \tclient = &http.Client{Timeout: 5 * time.Second}\n-\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/wait?site=remark42&timeout=5ms\", nil)\n+\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/wait?site=remark42&timeout=5ms\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tassert.NoError(t, err)\n@@ -256,7 +255,7 @@ func TestMigrator_Export(t *testing.T) {\n \twaitForMigrationCompletion(t, ts)\n \n \t// check file mode\n-\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/export?mode=file&site=remark42\", nil)\n+\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/export?mode=file&site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err = client.Do(req)\n@@ -266,30 +265,30 @@ func TestMigrator_Export(t *testing.T) {\n \n \tungzReader, err := gzip.NewReader(resp.Body)\n \tassert.NoError(t, err)\n-\tungzBody, err := ioutil.ReadAll(ungzReader)\n+\tungzBody, err := io.ReadAll(ungzReader)\n \tassert.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \tassert.Equal(t, 3, strings.Count(string(ungzBody), \"\\n\"))\n \tassert.Equal(t, 2, strings.Count(string(ungzBody), \"\\\"text\\\"\"))\n \tt.Logf(\"%s\", string(ungzBody))\n \n \t// check stream mode\n-\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/export?mode=stream&site=remark42\", nil)\n+\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/export?mode=stream&site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n \trequire.Equal(t, 200, resp.StatusCode)\n \trequire.Equal(t, \"text/plain; charset=utf-8\", resp.Header.Get(\"Content-Type\"))\n \n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \tassert.Equal(t, 3, strings.Count(string(body), \"\\n\"))\n \tassert.Equal(t, 2, strings.Count(string(body), \"\\\"text\\\"\"))\n \tt.Logf(\"%s\", string(body))\n \n-\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/export?site=remark42\", nil)\n+\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/export?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n@@ -399,13 +398,13 @@ func TestMigrator_RemapReject(t *testing.T) {\n \n func waitForMigrationCompletion(t *testing.T, ts *httptest.Server) {\n \tclient := &http.Client{Timeout: 10 * time.Second}\n-\treq, err := http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/wait?site=remark42\", nil)\n+\treq, err := http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/wait?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err := client.Do(req)\n \trequire.NoError(t, err)\n \tassert.Equal(t, 200, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n \tassert.Equal(t, \"{\\\"site_id\\\":\\\"remark42\\\",\\\"status\\\":\\\"completed\\\"}\\n\", string(b))"
    },
    {
      "sha": "3580a2ee8dbce4e05650bdf0dc3d8e5a025c7acb",
      "filename": "backend/app/rest/api/rest_private_test.go",
      "status": "modified",
      "additions": 67,
      "deletions": 68,
      "changes": 135,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/rest_private_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/rest_private_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_private_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -9,7 +9,6 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"mime/multipart\"\n \t\"net/http\"\n \t\"os\"\n@@ -42,7 +41,7 @@ func TestRest_Create(t *testing.T) {\n \tresp, err := post(t, ts.URL+\"/api/v1/comment\",\n \t\t`{\"text\": \"test 123\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"remark42\"}}`)\n \tassert.NoError(t, err)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode, string(b))\n \tassert.NoError(t, resp.Body.Close())\n@@ -100,7 +99,7 @@ func TestRest_CreateTooBig(t *testing.T) {\n \tresp, err := post(t, ts.URL+\"/api/v1/comment\", longComment)\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tc := R.JSON{}\n@@ -113,7 +112,7 @@ func TestRest_CreateTooBig(t *testing.T) {\n \tresp, err = post(t, ts.URL+\"/api/v1/comment\", veryLongComment)\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n-\tb, err = ioutil.ReadAll(resp.Body)\n+\tb, err = io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tc = R.JSON{}\n@@ -133,7 +132,7 @@ func TestRest_CreateWithRestrictedWord(t *testing.T) {\n \tresp, err := post(t, ts.URL+\"/api/v1/comment\", badComment)\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tc := R.JSON{}\n@@ -174,7 +173,7 @@ func TestRest_CreateWithWrongImage(t *testing.T) {\n \tresp, err := post(t, ts.URL+\"/api/v1/comment\", fmt.Sprintf(`{\"text\": \"![non-existent.jpg](%s/api/v1/picture/dev_user/bad_picture)\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"radio-t\"}}`, srv.RemarkURL))\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tassert.Contains(t,\n@@ -196,7 +195,7 @@ func TestRest_CreateWithLazyImage(t *testing.T) {\n \tresp, err := post(t, ts.URL+\"/api/v1/comment\", body)\n \trequire.NoError(t, err)\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tc := store.Comment{}\n@@ -214,7 +213,7 @@ func TestRest_CreateAndGet(t *testing.T) {\n \t\t`{\"text\": \"**test** *123*\\n\\n http://radio-t.com\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"remark42\"}}`)\n \trequire.NoError(t, err)\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tc := R.JSON{}\n@@ -259,7 +258,7 @@ func TestRest_Update(t *testing.T) {\n \treq.Header.Add(\"X-JWT\", devToken)\n \tb, err := client.Do(req)\n \tassert.NoError(t, err)\n-\tbody, err := ioutil.ReadAll(b.Body)\n+\tbody, err := io.ReadAll(b.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 200, b.StatusCode, string(body))\n \tassert.NoError(t, b.Body.Close())\n@@ -295,7 +294,7 @@ func TestRest_UpdateDelete(t *testing.T) {\n \tresp, err := post(t, ts.URL+\"/api/v1/counts?site=remark42\", `[\"https://radio-t.com/blah1\",\"https://radio-t.com/blah2\"]`)\n \trequire.NoError(t, err)\n \tassert.Equal(t, http.StatusOK, resp.StatusCode)\n-\tbb, err := ioutil.ReadAll(resp.Body)\n+\tbb, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tj := []store.PostInfo{}\n@@ -312,7 +311,7 @@ func TestRest_UpdateDelete(t *testing.T) {\n \treq.Header.Add(\"X-JWT\", devToken)\n \tb, err := client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err := ioutil.ReadAll(b.Body)\n+\tbody, err := io.ReadAll(b.Body)\n \trequire.NoError(t, err)\n \tassert.Equal(t, 200, b.StatusCode, string(body))\n \tassert.NoError(t, b.Body.Close())\n@@ -338,7 +337,7 @@ func TestRest_UpdateDelete(t *testing.T) {\n \tresp, err = post(t, ts.URL+\"/api/v1/counts?site=remark42\", `[\"https://radio-t.com/blah1\",\"https://radio-t.com/blah2\"]`)\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusOK, resp.StatusCode)\n-\tbb, err = ioutil.ReadAll(resp.Body)\n+\tbb, err = io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tj = []store.PostInfo{}\n@@ -364,7 +363,7 @@ func TestRest_UpdateNotOwner(t *testing.T) {\n \treq.Header.Add(\"X-JWT\", devToken)\n \tb, err := client.Do(req)\n \tassert.NoError(t, err)\n-\tbody, err := ioutil.ReadAll(b.Body)\n+\tbody, err := io.ReadAll(b.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, b.Body.Close())\n \tassert.Equal(t, 403, b.StatusCode, string(body), \"update from non-owner\")\n@@ -415,7 +414,7 @@ func TestRest_UpdateWithRestrictedWords(t *testing.T) {\n \treq.Header.Add(\"X-JWT\", devToken)\n \tb, err := client.Do(req)\n \tassert.NoError(t, err)\n-\tbody, err := ioutil.ReadAll(b.Body)\n+\tbody, err := io.ReadAll(b.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, b.Body.Close())\n \tc := R.JSON{}\n@@ -441,7 +440,7 @@ func TestRest_Vote(t *testing.T) {\n \tvote := func(val int) int {\n \t\tclient := http.Client{}\n \t\treq, err := http.NewRequest(http.MethodPut,\n-\t\t\tfmt.Sprintf(\"%s/api/v1/vote/%s?site=remark42&url=https://radio-t.com/blah&vote=%d\", ts.URL, id1, val), nil)\n+\t\t\tfmt.Sprintf(\"%s/api/v1/vote/%s?site=remark42&url=https://radio-t.com/blah&vote=%d\", ts.URL, id1, val), http.NoBody)\n \t\tassert.NoError(t, err)\n \t\treq.Header.Add(\"X-JWT\", devToken)\n \t\tresp, err := client.Do(req)\n@@ -500,7 +499,7 @@ func TestRest_Vote(t *testing.T) {\n \tassert.Equal(t, map[string]store.VotedIPInfo(nil), cr.VotedIPs, \"hidden\")\n \n \treq, err := http.NewRequest(\"GET\",\n-\t\tfmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/id/%s?site=remark42&url=https://radio-t.com/blah\", ts.URL, id1), http.NoBody)\n \tassert.NoError(t, err)\n \tresp, err := sendReq(t, req, adminUmputunToken)\n \tassert.NoError(t, err)\n@@ -530,7 +529,7 @@ func TestRest_AnonVote(t *testing.T) {\n \tvote := func(val int) int {\n \t\tclient := http.Client{}\n \t\treq, err := http.NewRequest(http.MethodPut,\n-\t\t\tfmt.Sprintf(\"%s/api/v1/vote/%s?site=remark42&url=https://radio-t.com/blah&vote=%d\", ts.URL, id1, val), nil)\n+\t\t\tfmt.Sprintf(\"%s/api/v1/vote/%s?site=remark42&url=https://radio-t.com/blah&vote=%d\", ts.URL, id1, val), http.NoBody)\n \t\tassert.NoError(t, err)\n \t\treq.Header.Add(\"X-JWT\", anonToken)\n \t\tresp, err := client.Do(req)\n@@ -541,13 +540,13 @@ func TestRest_AnonVote(t *testing.T) {\n \n \tgetWithAnonAuth := func(url string) (body string, code int) {\n \t\tclient := &http.Client{Timeout: 5 * time.Second}\n-\t\treq, err := http.NewRequest(\"GET\", url, nil)\n+\t\treq, err := http.NewRequest(\"GET\", url, http.NoBody)\n \t\trequire.NoError(t, err)\n \t\treq.Header.Add(\"X-JWT\", anonToken)\n \t\tr, err := client.Do(req)\n \t\trequire.NoError(t, err)\n \t\tdefer r.Body.Close()\n-\t\tb, err := ioutil.ReadAll(r.Body)\n+\t\tb, err := io.ReadAll(r.Body)\n \t\tassert.NoError(t, err)\n \t\treturn string(b), r.StatusCode\n \t}\n@@ -634,14 +633,14 @@ func TestRest_EmailAndTelegram(t *testing.T) {\n \tfor _, x := range testData {\n \t\tx := x\n \t\tt.Run(x.description, func(t *testing.T) {\n-\t\t\treq, err := http.NewRequest(x.method, ts.URL+x.url, nil)\n+\t\t\treq, err := http.NewRequest(x.method, ts.URL+x.url, http.NoBody)\n \t\t\trequire.NoError(t, err)\n \t\t\tif !x.noAuth {\n \t\t\t\treq.Header.Add(\"X-JWT\", devToken)\n \t\t\t}\n \t\t\tresp, err := client.Do(req)\n \t\t\trequire.NoError(t, err)\n-\t\t\tbody, err := ioutil.ReadAll(resp.Body)\n+\t\t\tbody, err := io.ReadAll(resp.Body)\n \t\t\trequire.NoError(t, err)\n \t\t\tassert.NoError(t, resp.Body.Close())\n \t\t\t// read User.Email from the token in the cookie\n@@ -677,7 +676,7 @@ func TestRest_EmailNotification(t *testing.T) {\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err := client.Do(req)\n \tassert.NoError(t, err)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode, string(body))\n@@ -691,15 +690,15 @@ func TestRest_EmailNotification(t *testing.T) {\n \t// create child comment from another user, email notification only to admin expected\n \treq, err = http.NewRequest(\"POST\", ts.URL+\"/api/v1/comment\", strings.NewReader(fmt.Sprintf(\n \t\t`{\"text\": \"test 456\",\n-\t\"pid\": \"%s\",\n+\t\"pid\": %q,\n \t\"user\": {\"name\": \"other_user\"},\n \t\"locator\":{\"url\": \"https://radio-t.com/blah1\",\n \t\"site\": \"remark42\"}}`, parentComment.ID)))\n \tassert.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", anonToken)\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode, string(body))\n@@ -709,12 +708,12 @@ func TestRest_EmailNotification(t *testing.T) {\n \tassert.Empty(t, mockDestination.Get()[1].Emails)\n \n \t// send confirmation token for email\n-\treq, err = http.NewRequest(http.MethodPost, ts.URL+\"/api/v1/email/subscribe?site=remark42&address=good@example.com\", nil)\n+\treq, err = http.NewRequest(http.MethodPost, ts.URL+\"/api/v1/email/subscribe?site=remark42&address=good@example.com\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusOK, resp.StatusCode, string(body))\n@@ -725,23 +724,23 @@ func TestRest_EmailNotification(t *testing.T) {\n \tverificationToken := mockDestination.GetVerify()[0].Token\n \n \t// verify email\n-\treq, err = http.NewRequest(http.MethodPost, ts.URL+fmt.Sprintf(\"/api/v1/email/confirm?site=remark42&tkn=%s\", verificationToken), nil)\n+\treq, err = http.NewRequest(http.MethodPost, ts.URL+fmt.Sprintf(\"/api/v1/email/confirm?site=remark42&tkn=%s\", verificationToken), http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusOK, resp.StatusCode, string(body))\n \n \t// get user information to verify the subscription\n-\treq, err = http.NewRequest(http.MethodGet, ts.URL+\"/api/v1/user?site=remark42\", nil)\n+\treq, err = http.NewRequest(http.MethodGet, ts.URL+\"/api/v1/user?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusOK, resp.StatusCode, string(body))\n@@ -754,15 +753,15 @@ func TestRest_EmailNotification(t *testing.T) {\n \t// create child comment from another user, email notification expected\n \treq, err = http.NewRequest(\"POST\", ts.URL+\"/api/v1/comment\", strings.NewReader(fmt.Sprintf(\n \t\t`{\"text\": \"test 789\",\n-\t\"pid\": \"%s\",\n+\t\"pid\": %q,\n \t\"user\": {\"name\": \"other_user\"},\n \t\"locator\":{\"url\": \"https://radio-t.com/blah1\",\n \t\"site\": \"remark42\"}}`, parentComment.ID)))\n \tassert.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", anonToken)\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode, string(body))\n@@ -772,12 +771,12 @@ func TestRest_EmailNotification(t *testing.T) {\n \tassert.Equal(t, []string{\"good@example.com\"}, mockDestination.Get()[2].Emails)\n \n \t// delete user's email\n-\treq, err = http.NewRequest(http.MethodDelete, ts.URL+\"/api/v1/email?site=remark42\", nil)\n+\treq, err = http.NewRequest(http.MethodDelete, ts.URL+\"/api/v1/email?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \tassert.Equal(t, http.StatusOK, resp.StatusCode, string(body))\n@@ -792,7 +791,7 @@ func TestRest_EmailNotification(t *testing.T) {\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode, string(body))\n@@ -822,7 +821,7 @@ func TestRest_TelegramNotification(t *testing.T) {\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err := client.Do(req)\n \tassert.NoError(t, err)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode, string(body))\n@@ -836,15 +835,15 @@ func TestRest_TelegramNotification(t *testing.T) {\n \t// create child comment from another user, telegram notification only to admin expected\n \treq, err = http.NewRequest(\"POST\", ts.URL+\"/api/v1/comment\", strings.NewReader(fmt.Sprintf(\n \t\t`{\"text\": \"test 456\",\n-\t\"pid\": \"%s\",\n+\t\"pid\": %q,\n \t\"user\": {\"name\": \"other_user\"},\n \t\"locator\":{\"url\": \"https://radio-t.com/blah1\",\n \t\"site\": \"remark42\"}}`, parentComment.ID)))\n \tassert.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", anonToken)\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode, string(body))\n@@ -854,12 +853,12 @@ func TestRest_TelegramNotification(t *testing.T) {\n \tassert.Empty(t, mockDestination.Get()[1].Telegrams)\n \n \t// subscribe to telegram while the telegram destination is absent\n-\treq, err = http.NewRequest(http.MethodGet, ts.URL+\"/api/v1/telegram/subscribe?site=remark42\", nil)\n+\treq, err = http.NewRequest(http.MethodGet, ts.URL+\"/api/v1/telegram/subscribe?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusInternalServerError, resp.StatusCode, string(body))\n@@ -868,12 +867,12 @@ func TestRest_TelegramNotification(t *testing.T) {\n \tmockTlgrm := &mockTelegram{notVerified: true, site: \"unknown_site\"}\n \tsrv.privRest.telegramService = mockTlgrm\n \t// send confirmation token for telegram\n-\treq, err = http.NewRequest(http.MethodGet, ts.URL+\"/api/v1/telegram/subscribe?site=remark42\", nil)\n+\treq, err = http.NewRequest(http.MethodGet, ts.URL+\"/api/v1/telegram/subscribe?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusOK, resp.StatusCode, string(body))\n@@ -886,12 +885,12 @@ func TestRest_TelegramNotification(t *testing.T) {\n \tassert.Equal(t, \"botUsername\", subscribeRequest.Bot)\n \n \t// verify telegram, unsuccessfully because of not verified\n-\treq, err = http.NewRequest(http.MethodGet, ts.URL+fmt.Sprintf(\"/api/v1/telegram/subscribe?site=remark42&tkn=%s\", subscribeRequest.Token), nil)\n+\treq, err = http.NewRequest(http.MethodGet, ts.URL+fmt.Sprintf(\"/api/v1/telegram/subscribe?site=remark42&tkn=%s\", subscribeRequest.Token), http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusInternalServerError, resp.StatusCode, string(body))\n@@ -900,25 +899,25 @@ func TestRest_TelegramNotification(t *testing.T) {\n \tmockTlgrm.notVerified = false\n \n \t// verify telegram, unsuccessfully because of unknown site\n-\treq, err = http.NewRequest(http.MethodGet, ts.URL+fmt.Sprintf(\"/api/v1/telegram/subscribe?site=remark42&tkn=%s\", subscribeRequest.Token), nil)\n+\treq, err = http.NewRequest(http.MethodGet, ts.URL+fmt.Sprintf(\"/api/v1/telegram/subscribe?site=remark42&tkn=%s\", subscribeRequest.Token), http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusBadRequest, resp.StatusCode, string(body))\n \trequire.Equal(t, `{\"code\":0,\"details\":\"can't set telegram for user\",\"error\":\"site \\\"unknown_site\\\" not found\"}`+\"\\n\", string(body))\n \n \tmockTlgrm.site = \"remark42\"\n \t// verify telegram, successfully\n-\treq, err = http.NewRequest(http.MethodGet, ts.URL+fmt.Sprintf(\"/api/v1/telegram/subscribe?site=remark42&tkn=%s\", subscribeRequest.Token), nil)\n+\treq, err = http.NewRequest(http.MethodGet, ts.URL+fmt.Sprintf(\"/api/v1/telegram/subscribe?site=remark42&tkn=%s\", subscribeRequest.Token), http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusOK, resp.StatusCode, string(body))\n@@ -931,12 +930,12 @@ func TestRest_TelegramNotification(t *testing.T) {\n \tassert.True(t, subscribeResult.Updated)\n \n \t// get user information to verify the subscription\n-\treq, err = http.NewRequest(http.MethodGet, ts.URL+\"/api/v1/user?site=remark42\", nil)\n+\treq, err = http.NewRequest(http.MethodGet, ts.URL+\"/api/v1/user?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusOK, resp.StatusCode, string(body))\n@@ -949,15 +948,15 @@ func TestRest_TelegramNotification(t *testing.T) {\n \t// create child comment from another user, telegram notification expected\n \treq, err = http.NewRequest(\"POST\", ts.URL+\"/api/v1/comment\", strings.NewReader(fmt.Sprintf(\n \t\t`{\"text\": \"test 789\",\n-\t\"pid\": \"%s\",\n+\t\"pid\": %q,\n \t\"user\": {\"name\": \"other_user\"},\n \t\"locator\":{\"url\": \"https://radio-t.com/blah1\",\n \t\"site\": \"remark42\"}}`, parentComment.ID)))\n \tassert.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", anonToken)\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode, string(body))\n@@ -967,12 +966,12 @@ func TestRest_TelegramNotification(t *testing.T) {\n \tassert.Equal(t, []string{\"good_telegram\"}, mockDestination.Get()[2].Telegrams)\n \n \t// delete user's telegram\n-\treq, err = http.NewRequest(http.MethodDelete, ts.URL+\"/api/v1/telegram?site=remark42\", nil)\n+\treq, err = http.NewRequest(http.MethodDelete, ts.URL+\"/api/v1/telegram?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \tassert.Equal(t, http.StatusOK, resp.StatusCode, string(body))\n@@ -987,7 +986,7 @@ func TestRest_TelegramNotification(t *testing.T) {\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n-\tbody, err = ioutil.ReadAll(resp.Body)\n+\tbody, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode, string(body))\n@@ -1017,7 +1016,7 @@ func TestRest_UserAllData(t *testing.T) {\n \trequire.NoError(t, err)\n \n \tclient := &http.Client{Timeout: 1 * time.Second}\n-\treq, err := http.NewRequest(\"GET\", ts.URL+\"/api/v1/userdata?site=remark42\", nil)\n+\treq, err := http.NewRequest(\"GET\", ts.URL+\"/api/v1/userdata?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err := client.Do(req)\n@@ -1028,7 +1027,7 @@ func TestRest_UserAllData(t *testing.T) {\n \tungzReader, err := gzip.NewReader(resp.Body)\n \tassert.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n-\tungzBody, err := ioutil.ReadAll(ungzReader)\n+\tungzBody, err := io.ReadAll(ungzReader)\n \tassert.NoError(t, err)\n \tstrUungzBody := string(ungzBody)\n \tassert.True(t, strings.HasPrefix(strUungzBody,\n@@ -1046,7 +1045,7 @@ func TestRest_UserAllData(t *testing.T) {\n \t\tPicture: \"http://example.com/pic.png\", IP: \"127.0.0.1\", SiteID: \"remark42\"}, parsed.Info)\n \tassert.Equal(t, 3, len(parsed.Comments))\n \n-\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/userdata?site=remark42\", nil)\n+\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/userdata?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \tresp, err = client.Do(req)\n \trequire.NoError(t, err)\n@@ -1069,7 +1068,7 @@ func TestRest_UserAllDataManyComments(t *testing.T) {\n \t\trequire.NoError(t, err)\n \t}\n \tclient := &http.Client{Timeout: 1 * time.Second}\n-\treq, err := http.NewRequest(\"GET\", ts.URL+\"/api/v1/userdata?site=remark42\", nil)\n+\treq, err := http.NewRequest(\"GET\", ts.URL+\"/api/v1/userdata?site=remark42\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err := client.Do(req)\n@@ -1080,7 +1079,7 @@ func TestRest_UserAllDataManyComments(t *testing.T) {\n \tungzReader, err := gzip.NewReader(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n-\tungzBody, err := ioutil.ReadAll(ungzReader)\n+\tungzBody, err := io.ReadAll(ungzReader)\n \tassert.NoError(t, err)\n \tstrUngzBody := string(ungzBody)\n \tassert.True(t, strings.HasPrefix(strUngzBody,\n@@ -1093,13 +1092,13 @@ func TestRest_DeleteMe(t *testing.T) {\n \tdefer teardown()\n \n \tclient := http.Client{}\n-\treq, err := http.NewRequest(http.MethodPost, fmt.Sprintf(\"%s/api/v1/deleteme?site=remark42\", ts.URL), nil)\n+\treq, err := http.NewRequest(http.MethodPost, fmt.Sprintf(\"%s/api/v1/deleteme?site=remark42\", ts.URL), http.NoBody)\n \tassert.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tresp, err := client.Do(req)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 200, resp.StatusCode)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, resp.Body.Close())\n \tassert.NoError(t, err)\n \n@@ -1115,7 +1114,7 @@ func TestRest_DeleteMe(t *testing.T) {\n \tassert.Equal(t, \"dev\", claims.User.ID)\n \tassert.Equal(t, \"https://demo.remark42.com/web/deleteme.html?token=\"+tkn, m[\"link\"])\n \n-\treq, err = http.NewRequest(http.MethodPost, fmt.Sprintf(\"%s/api/v1/deleteme?site=remark42\", ts.URL), nil)\n+\treq, err = http.NewRequest(http.MethodPost, fmt.Sprintf(\"%s/api/v1/deleteme?site=remark42\", ts.URL), http.NoBody)\n \tassert.NoError(t, err)\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n@@ -1146,7 +1145,7 @@ func TestRest_SavePictureCtrl(t *testing.T) {\n \t\tresp, err := client.Do(req)\n \t\tassert.NoError(t, err)\n \t\tassert.Equal(t, 200, resp.StatusCode)\n-\t\tbody, err := ioutil.ReadAll(resp.Body)\n+\t\tbody, err := io.ReadAll(resp.Body)\n \t\trequire.NoError(t, err)\n \t\trequire.NoError(t, resp.Body.Close())\n \n@@ -1161,7 +1160,7 @@ func TestRest_SavePictureCtrl(t *testing.T) {\n \tresp, err := http.Get(fmt.Sprintf(\"%s/api/v1/picture/%s\", ts.URL, id))\n \trequire.NoError(t, err)\n \tassert.Equal(t, 200, resp.StatusCode)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, resp.Body.Close())\n \tassert.Equal(t, 1462, len(body))\n@@ -1238,7 +1237,7 @@ func TestRest_CreateWithPictures(t *testing.T) {\n \t\tassert.NoError(t, err)\n \t\tassert.Equal(t, 200, resp.StatusCode)\n \n-\t\tbody, err := ioutil.ReadAll(resp.Body)\n+\t\tbody, err := io.ReadAll(resp.Body)\n \t\trequire.NoError(t, err)\n \t\tassert.NoError(t, resp.Body.Close())\n \t\tm := map[string]string{}\n@@ -1254,11 +1253,11 @@ func TestRest_CreateWithPictures(t *testing.T) {\n \t}\n \n \ttext := fmt.Sprintf(`text 123  ![](%s/api/v1/picture/%s) *xxx* ![](%s/api/v1/picture/%s) ![](%s/api/v1/picture/%s)`, svc.RemarkURL, ids[0], svc.RemarkURL, ids[1], svc.RemarkURL, ids[2])\n-\tbody := fmt.Sprintf(`{\"text\": \"%s\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"remark42\"}}`, text)\n+\tbody := fmt.Sprintf(`{\"text\": %q, \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"remark42\"}}`, text)\n \n \tresp, err := post(t, ts.URL+\"/api/v1/comment\", body)\n \tassert.NoError(t, err)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode, string(b))"
    },
    {
      "sha": "4c70ab806acb1b1243655bfc0b7b949fe7673dca",
      "filename": "backend/app/rest/api/rest_public.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/rest_public.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/rest_public.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_public.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -5,8 +5,8 @@ import (\n \t\"crypto/sha1\" // nolint\n \t\"encoding/base64\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"net/http\"\n+\t\"os\"\n \t\"path\"\n \t\"strconv\"\n \t\"strings\"\n@@ -346,7 +346,7 @@ func (s *public) loadPictureCtrl(w http.ResponseWriter, r *http.Request) {\n \n // GET /index.html - respond to /index.html with the content of getstarted.html under /web root\n func (s *public) getStartedCtrl(w http.ResponseWriter, r *http.Request) {\n-\tdata, err := ioutil.ReadFile(path.Join(s.webRoot, \"getstarted.html\"))\n+\tdata, err := os.ReadFile(path.Join(s.webRoot, \"getstarted.html\"))\n \tif err != nil {\n \t\tw.WriteHeader(http.StatusNotFound)\n \t\treturn"
    },
    {
      "sha": "cc445ab2d14738f811ff1ef239ce1d5fae2d8bfa",
      "filename": "backend/app/rest/api/rest_public_test.go",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/rest_public_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/rest_public_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_public_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -3,7 +3,7 @@ package api\n import (\n \t\"encoding/json\"\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"strings\"\n \t\"testing\"\n@@ -34,7 +34,7 @@ func TestRest_Preview(t *testing.T) {\n \tresp, err := post(t, ts.URL+\"/api/v1/preview\", `{\"text\": \"test 123\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"radio-t\"}}`)\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusOK, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tassert.Equal(t, \"<p>test 123</p>\\n\", string(b))\n@@ -47,7 +47,7 @@ func TestRest_Preview(t *testing.T) {\n \tresp, err = post(t, ts.URL+\"/api/v1/preview\", fmt.Sprintf(`{\"text\": \"![non-existent.jpg](%s/api/v1/picture/dev_user/bad_picture)\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"radio-t\"}}`, srv.RemarkURL))\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n-\tb, err = ioutil.ReadAll(resp.Body)\n+\tb, err = io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tassert.Contains(t,\n@@ -69,7 +69,7 @@ func TestRest_PreviewWithWrongImage(t *testing.T) {\n \tresp, err := post(t, ts.URL+\"/api/v1/preview\", fmt.Sprintf(`{\"text\": \"![non-existent.jpg](%s/api/v1/picture/dev_user/bad_picture)\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"radio-t\"}}`, srv.RemarkURL))\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tassert.Contains(t,\n@@ -98,13 +98,13 @@ srv, ts := prep(t)\n BKT\n `\n \ttext = strings.Replace(text, \"BKT\", \"```\", -1)\n-\tj := fmt.Sprintf(`{\"text\": \"%s\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"radio-t\"}}`, text)\n+\tj := fmt.Sprintf(`{\"text\": %q, \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"radio-t\"}}`, text)\n \tj = strings.Replace(j, \"\\n\", \"\\\\n\", -1)\n \n \tresp, err := post(t, ts.URL+\"/api/v1/preview\", j)\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusOK, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t,\n \t\t`<h1>h1</h1>\n@@ -126,13 +126,13 @@ func main(aa string) int {return 0}\n BKT\n `\n \ttext = strings.Replace(text, \"BKT\", \"```\", -1)\n-\tj := fmt.Sprintf(`{\"text\": \"%s\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"radio-t\"}}`, text)\n+\tj := fmt.Sprintf(`{\"text\": %q, \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"radio-t\"}}`, text)\n \tj = strings.Replace(j, \"\\n\", \"\\\\n\", -1)\n \n \tresp, err := post(t, ts.URL+\"/api/v1/preview\", j)\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusOK, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, `<pre class=\"chroma\"><span class=\"kd\">func</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"nx\">aa</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n </pre>`, string(b))\n@@ -247,7 +247,7 @@ func TestRest_FindReadOnly(t *testing.T) {\n \t// set post to read-only\n \tclient := http.Client{}\n \treq, err := http.NewRequest(http.MethodPut,\n-\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah1&ro=1\", ts.URL), nil)\n+\t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=remark42&url=https://radio-t.com/blah1&ro=1\", ts.URL), http.NoBody)\n \tassert.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tresp, err := client.Do(req)\n@@ -517,7 +517,7 @@ func TestRest_Counts(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n "
    },
    {
      "sha": "e6e940e12d19f81b8eded473eaf35550aec0c902",
      "filename": "backend/app/rest/api/rest_test.go",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/rest_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/rest_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -6,7 +6,7 @@ import (\n \t\"encoding/json\"\n \t\"errors\"\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"math/rand\"\n \t\"net\"\n \t\"net/http\"\n@@ -52,7 +52,7 @@ func TestRest_FileServer(t *testing.T) {\n \n \ttestHTMLName := \"test-remark.html\"\n \ttestHTMLFile := os.TempDir() + \"/\" + testHTMLName\n-\terr := ioutil.WriteFile(testHTMLFile, []byte(\"some html\"), 0700)\n+\terr := os.WriteFile(testHTMLFile, []byte(\"some html\"), 0o700)\n \tassert.NoError(t, err)\n \n \tbody, code := get(t, ts.URL+\"/web/\"+testHTMLName)\n@@ -66,7 +66,7 @@ func TestRest_GetStarted(t *testing.T) {\n \tdefer teardown()\n \n \tgetStartedHTML := os.TempDir() + \"/getstarted.html\"\n-\terr := ioutil.WriteFile(getStartedHTML, []byte(\"some html blah\"), 0700)\n+\terr := os.WriteFile(getStartedHTML, []byte(\"some html blah\"), 0o700)\n \tassert.NoError(t, err)\n \n \tbody, code := get(t, ts.URL+\"/index.html\")\n@@ -159,7 +159,7 @@ func TestRest_RunStaticSSLMode(t *testing.T) {\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n \tassert.Equal(t, 200, resp.StatusCode)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n \n@@ -239,7 +239,7 @@ func Test_URLKey(t *testing.T) {\n \tfor i, tt := range tbl {\n \t\ttt := tt\n \t\tt.Run(strconv.Itoa(i), func(t *testing.T) {\n-\t\t\tr, err := http.NewRequest(\"GET\", tt.url, nil)\n+\t\t\tr, err := http.NewRequest(\"GET\", tt.url, http.NoBody)\n \t\t\trequire.NoError(t, err)\n \t\t\tif tt.user.ID != \"\" {\n \t\t\t\tr = rest.SetUserInfo(r, tt.user)\n@@ -265,7 +265,7 @@ func Test_URLKeyWithUser(t *testing.T) {\n \tfor i, tt := range tbl {\n \t\ttt := tt\n \t\tt.Run(strconv.Itoa(i), func(t *testing.T) {\n-\t\t\tr, err := http.NewRequest(\"GET\", tt.url, nil)\n+\t\t\tr, err := http.NewRequest(\"GET\", tt.url, http.NoBody)\n \t\t\trequire.NoError(t, err)\n \t\t\tif tt.user.ID != \"\" {\n \t\t\t\tr = rest.SetUserInfo(r, tt.user)\n@@ -507,7 +507,7 @@ func fakeAuth(next http.Handler) http.Handler {\n func get(t *testing.T, url string) (response string, statusCode int) {\n \tr, err := http.Get(url)\n \trequire.NoError(t, err)\n-\tbody, err := ioutil.ReadAll(r.Body)\n+\tbody, err := io.ReadAll(r.Body)\n \trequire.NoError(t, err)\n \trequire.NoError(t, r.Body.Close())\n \treturn string(body), r.StatusCode\n@@ -523,25 +523,25 @@ func sendReq(_ *testing.T, r *http.Request, tkn string) (*http.Response, error)\n \n func getWithDevAuth(t *testing.T, url string) (body string, code int) {\n \tclient := &http.Client{Timeout: 5 * time.Second}\n-\treq, err := http.NewRequest(\"GET\", url, nil)\n+\treq, err := http.NewRequest(\"GET\", url, http.NoBody)\n \trequire.NoError(t, err)\n \treq.Header.Add(\"X-JWT\", devToken)\n \tr, err := client.Do(req)\n \trequire.NoError(t, err)\n-\tb, err := ioutil.ReadAll(r.Body)\n+\tb, err := io.ReadAll(r.Body)\n \tassert.NoError(t, err)\n \trequire.NoError(t, r.Body.Close())\n \treturn string(b), r.StatusCode\n }\n \n func getWithAdminAuth(t *testing.T, url string) (response string, statusCode int) {\n \tclient := &http.Client{Timeout: 5 * time.Second}\n-\treq, err := http.NewRequest(\"GET\", url, nil)\n+\treq, err := http.NewRequest(\"GET\", url, http.NoBody)\n \trequire.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tr, err := client.Do(req)\n \trequire.NoError(t, err)\n-\tbody, err := ioutil.ReadAll(r.Body)\n+\tbody, err := io.ReadAll(r.Body)\n \tassert.NoError(t, err)\n \trequire.NoError(t, r.Body.Close())\n \treturn string(body), r.StatusCode\n@@ -565,7 +565,7 @@ func addComment(t *testing.T, c store.Comment, ts *httptest.Server) string {\n \tresp, err := client.Do(req)\n \trequire.NoError(t, err)\n \trequire.Equal(t, http.StatusCreated, resp.StatusCode)\n-\tb, err = ioutil.ReadAll(resp.Body)\n+\tb, err = io.ReadAll(resp.Body)\n \trequire.NoError(t, resp.Body.Close())\n \trequire.NoError(t, err)\n "
    },
    {
      "sha": "eeac205debb3b33f3f4b308054058f8110f56e0f",
      "filename": "backend/app/rest/api/ssl_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/ssl_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/api/ssl_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/ssl_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -3,7 +3,7 @@ package api\n import (\n \t\"context\"\n \t\"crypto/tls\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"os\"\n@@ -68,7 +68,7 @@ func TestSSL_ACME_HTTPChallengeRouter(t *testing.T) {\n \tassert.Equal(t, \"https://localhost:443/blah?param=1\", resp.Header.Get(\"Location\"))\n \n \t// check acme http challenge\n-\treq, err := http.NewRequest(\"GET\", ts.URL+\"/.well-known/acme-challenge/token123\", nil)\n+\treq, err := http.NewRequest(\"GET\", ts.URL+\"/.well-known/acme-challenge/token123\", http.NoBody)\n \trequire.NoError(t, err)\n \treq.Host = \"localhost\" // for passing hostPolicy check\n \tresp, err = client.Do(req)\n@@ -83,7 +83,7 @@ func TestSSL_ACME_HTTPChallengeRouter(t *testing.T) {\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n \tassert.Equal(t, 200, resp.StatusCode)\n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \tassert.Equal(t, \"token\", string(body))\n }"
    },
    {
      "sha": "f961cee77734451b13fd8b09d536c1c51aa4ede5",
      "filename": "backend/app/rest/httperrors_test.go",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/httperrors_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/httperrors_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/httperrors_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -3,7 +3,7 @@ package rest\n import (\n \t\"errors\"\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"testing\"\n@@ -31,7 +31,7 @@ func TestSendErrorJSON(t *testing.T) {\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n \n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \tassert.Equal(t, 500, resp.StatusCode)\n \n@@ -61,7 +61,7 @@ func TestSendErrorHTML(t *testing.T) {\n \trequire.NoError(t, err)\n \tdefer resp.Body.Close()\n \n-\tbody, err := ioutil.ReadAll(resp.Body)\n+\tbody, err := io.ReadAll(resp.Body)\n \trequire.NoError(t, err)\n \tassert.Equal(t, 500, resp.StatusCode)\n \n@@ -72,7 +72,7 @@ func TestSendErrorHTML(t *testing.T) {\n \n func TestErrorDetailsMsg(t *testing.T) {\n \tcallerFn := func() {\n-\t\treq, err := http.NewRequest(\"GET\", \"https://example.com/test?k1=v1&k2=v2\", nil)\n+\t\treq, err := http.NewRequest(\"GET\", \"https://example.com/test?k1=v1&k2=v2\", http.NoBody)\n \t\trequire.NoError(t, err)\n \t\treq.RemoteAddr = \"1.2.3.4\"\n \t\tmsg := errDetailsMsg(req, 500, errors.New(\"error 500\"), \"error details 123456\", 123)\n@@ -85,7 +85,7 @@ func TestErrorDetailsMsg(t *testing.T) {\n \n func TestErrorDetailsMsgWithUser(t *testing.T) {\n \tcallerFn := func() {\n-\t\treq, err := http.NewRequest(\"GET\", \"https://example.com/test?k1=v1&k2=v2\", nil)\n+\t\treq, err := http.NewRequest(\"GET\", \"https://example.com/test?k1=v1&k2=v2\", http.NoBody)\n \t\trequire.NoError(t, err)\n \t\treq.RemoteAddr = \"127.0.0.1:1234\"\n \t\treq = SetUserInfo(req, store.User{Name: \"test\", ID: \"id\"})"
    },
    {
      "sha": "77e5ceacd049a6920f7044e14f8d6fe3d1aa1ac6",
      "filename": "backend/app/rest/proxy/image.go",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/proxy/image.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/proxy/image.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/proxy/image.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -5,7 +5,6 @@ import (\n \t\"context\"\n \t\"encoding/base64\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"net/http\"\n \t\"strings\"\n \t\"time\"\n@@ -149,7 +148,7 @@ func (p Image) downloadImage(ctx context.Context, imgURL string) ([]byte, error)\n \tvar resp *http.Response\n \terr := repeater.NewDefault(5, time.Second).Do(ctx, func() error {\n \t\tvar e error\n-\t\treq, e := http.NewRequest(\"GET\", imgURL, nil)\n+\t\treq, e := http.NewRequest(\"GET\", imgURL, http.NoBody)\n \t\tif e != nil {\n \t\t\treturn errors.Wrapf(e, \"failed to make request for %s\", imgURL)\n \t\t}\n@@ -165,7 +164,7 @@ func (p Image) downloadImage(ctx context.Context, imgURL string) ([]byte, error)\n \t\treturn nil, errors.Errorf(\"got unsuccessful response status %d while fetching %s\", resp.StatusCode, imgURL)\n \t}\n \n-\timgData, err := ioutil.ReadAll(resp.Body)\n+\timgData, err := io.ReadAll(resp.Body)\n \tif err != nil {\n \t\treturn nil, errors.Errorf(\"unable to read image body\")\n \t}"
    },
    {
      "sha": "d6da8a73d6eca686658bd96cd6ce5217d4dd7794",
      "filename": "backend/app/rest/proxy/image_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/proxy/image_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/proxy/image_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/proxy/image_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -4,7 +4,6 @@ import (\n \t\"encoding/base64\"\n \t\"fmt\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"strconv\"\n@@ -42,7 +41,7 @@ const gopher = \"iVBORw0KGgoAAAANSUhEUgAAAEsAAAA8CAAAAAALAhhPAAAFfUlEQVRYw62XeWwU\n \n func gopherPNG() io.Reader { return base64.NewDecoder(base64.StdEncoding, strings.NewReader(gopher)) }\n func gopherPNGBytes() []byte {\n-\timg, _ := ioutil.ReadAll(gopherPNG())\n+\timg, _ := io.ReadAll(gopherPNG())\n \treturn img\n }\n \n@@ -246,7 +245,7 @@ func TestImage_RoutesTimedOut(t *testing.T) {\n \tresp, err := http.Get(ts.URL + \"/?src=\" + encodedImgURL)\n \trequire.NoError(t, err)\n \tassert.Equal(t, http.StatusNotFound, resp.StatusCode)\n-\tb, err := ioutil.ReadAll(resp.Body)\n+\tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, resp.Body.Close())\n \trequire.NoError(t, err)\n \tt.Log(string(b))"
    },
    {
      "sha": "084c335c3ecaca20d6b7cb03ec2d340d33a1ec7e",
      "filename": "backend/app/rest/user_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/user_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/rest/user_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/user_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -10,7 +10,7 @@ import (\n )\n \n func TestUser_GetUserInfo(t *testing.T) {\n-\tr, err := http.NewRequest(\"GET\", \"http://blah.com\", nil)\n+\tr, err := http.NewRequest(\"GET\", \"http://blah.com\", http.NoBody)\n \tassert.NoError(t, err)\n \t_, err = GetUserInfo(r)\n \tassert.Error(t, err, \"no user info\")\n@@ -28,7 +28,7 @@ func TestUser_MustGetUserInfo(t *testing.T) {\n \t\t}\n \t}()\n \n-\tr, err := http.NewRequest(\"GET\", \"http://blah.com\", nil)\n+\tr, err := http.NewRequest(\"GET\", \"http://blah.com\", http.NoBody)\n \tassert.NoError(t, err)\n \t_ = MustGetUserInfo(r)\n \tassert.Fail(t, \"should panic\")"
    },
    {
      "sha": "13f6d54a9fdb869298125b32125b70b050a07532",
      "filename": "backend/app/store/admin/remote_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/admin/remote_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/admin/remote_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/admin/remote_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -8,7 +8,7 @@ package admin\n \n import (\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"testing\"\n@@ -92,7 +92,7 @@ func TestRemote_OnEvent(t *testing.T) {\n \n func testServer(t *testing.T, req, resp string) *httptest.Server {\n \treturn httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n-\t\tbody, err := ioutil.ReadAll(r.Body)\n+\t\tbody, err := io.ReadAll(r.Body)\n \t\trequire.NoError(t, err)\n \t\tassert.Equal(t, req, string(body))\n \t\tt.Logf(\"req: %s\", string(body))"
    },
    {
      "sha": "b522149474944e7e55a4c18d924b62b38f9c1973",
      "filename": "backend/app/store/comment.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/comment.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/comment.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/comment.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -159,7 +159,7 @@ var reHref = regexp.MustCompile(`<a\\s+(?:[^>]*?\\s+)?href=\"([^\"]*)\"`)\n // SanitizeAsURL drops dangerous code from a url.\n // It wraps input with href to trigger bluemonday sanitizer and cleans href after sanitizing done\n func (c *Comment) SanitizeAsURL(inp string) string {\n-\th := fmt.Sprintf(`<a href=\"%s\">`, inp)\n+\th := fmt.Sprintf(`<a href=%q>`, inp)\n \tclean := bluemonday.UGCPolicy().Sanitize(h)\n \tif match := reHref.FindStringSubmatch(clean); len(match) > 1 {\n \t\treturn match[1]"
    },
    {
      "sha": "4312cdd3c5ad55c582f7357323f1b0af415db6b4",
      "filename": "backend/app/store/engine/bolt.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/engine/bolt.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/engine/bolt.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/engine/bolt.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -55,7 +55,7 @@ func NewBoltDB(options bolt.Options, sites ...BoltSite) (*BoltDB, error) {\n \tlog.Printf(\"[INFO] bolt store for sites %+v, options %+v\", sites, options)\n \tresult := BoltDB{dbs: make(map[string]*bolt.DB)}\n \tfor _, site := range sites {\n-\t\tdb, err := bolt.Open(site.FileName, 0600, &options) //nolint:gocritic //octalLiteral is OK as FileMode\n+\t\tdb, err := bolt.Open(site.FileName, 0o600, &options) //nolint:gocritic //octalLiteral is OK as FileMode\n \t\tif err != nil {\n \t\t\treturn nil, errors.Wrapf(err, \"failed to make boltdb for %s\", site.FileName)\n \t\t}"
    },
    {
      "sha": "ccfe85b5b1c3d8e5b1eeae55943447d9fbd5bc52",
      "filename": "backend/app/store/engine/remote_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/engine/remote_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/engine/remote_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/engine/remote_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -2,7 +2,7 @@ package engine\n \n import (\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"testing\"\n@@ -74,7 +74,7 @@ func TestRemote_GetWithErrorRemote(t *testing.T) {\n \n func TestRemote_FailedStatus(t *testing.T) {\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n-\t\tbody, err := ioutil.ReadAll(r.Body)\n+\t\tbody, err := io.ReadAll(r.Body)\n \t\trequire.NoError(t, err)\n \t\tt.Logf(\"req: %s\", string(body))\n \t\tw.WriteHeader(400)\n@@ -190,7 +190,7 @@ func TestRemote_Close(t *testing.T) {\n \n func testServer(t *testing.T, req, resp string) *httptest.Server {\n \treturn httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n-\t\tbody, err := ioutil.ReadAll(r.Body)\n+\t\tbody, err := io.ReadAll(r.Body)\n \t\trequire.NoError(t, err)\n \t\tassert.Equal(t, req, string(body))\n \t\tt.Logf(\"req: %s\", string(body))"
    },
    {
      "sha": "7465eac231c2b22d7f2017d81585db87c2472c7c",
      "filename": "backend/app/store/image/bolt_store.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/bolt_store.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/bolt_store.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/image/bolt_store.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -25,7 +25,7 @@ type Bolt struct {\n \n // NewBoltStorage create bolt image store\n func NewBoltStorage(fileName string, options bolt.Options) (*Bolt, error) {\n-\tdb, err := bolt.Open(fileName, 0600, &options) //nolint:gocritic //octalLiteral is OK as FileMode\n+\tdb, err := bolt.Open(fileName, 0o600, &options) //nolint:gocritic //octalLiteral is OK as FileMode\n \tif err != nil {\n \t\treturn nil, errors.Wrapf(err, \"failed to make boltdb for %s\", fileName)\n \t}"
    },
    {
      "sha": "a94db31fb0bdb35a36d6da9390f4bd73d698f086",
      "filename": "backend/app/store/image/fs_store.go",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/fs_store.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/fs_store.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/image/fs_store.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -4,7 +4,7 @@ import (\n \t\"context\"\n \t\"fmt\"\n \t\"hash/crc64\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"math\"\n \t\"os\"\n \t\"path\"\n@@ -37,11 +37,11 @@ type FileSystem struct {\n func (f *FileSystem) Save(id string, img []byte) error {\n \tdst := f.location(f.Staging, id)\n \n-\tif err := os.MkdirAll(path.Dir(dst), 0700); err != nil {\n+\tif err := os.MkdirAll(path.Dir(dst), 0o700); err != nil {\n \t\treturn errors.Wrap(err, \"can't make image directory\")\n \t}\n \n-\tif err := ioutil.WriteFile(dst, img, 0600); err != nil {\n+\tif err := os.WriteFile(dst, img, 0o600); err != nil {\n \t\treturn errors.Wrapf(err, \"can't write image file with id %s\", id)\n \t}\n \n@@ -54,7 +54,7 @@ func (f *FileSystem) Commit(id string) error {\n \tlog.Printf(\"[DEBUG] Commit image %s\", id)\n \tstagingImage, permImage := f.location(f.Staging, id), f.location(f.Location, id)\n \n-\tif err := os.MkdirAll(path.Dir(permImage), 0700); err != nil {\n+\tif err := os.MkdirAll(path.Dir(permImage), 0o700); err != nil {\n \t\treturn errors.Wrap(err, \"can't make image directory\")\n \t}\n \n@@ -99,7 +99,7 @@ func (f *FileSystem) Load(id string) ([]byte, error) {\n \tif err != nil {\n \t\treturn nil, errors.Wrapf(err, \"can't load image %s\", id)\n \t}\n-\treturn ioutil.ReadAll(fh)\n+\treturn io.ReadAll(fh)\n }\n \n // Cleanup runs scan of staging and removes old files based on ttl"
    },
    {
      "sha": "1d2debb367d063b2583acb8e5974178344cd6730",
      "filename": "backend/app/store/image/fs_store_test.go",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/fs_store_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/fs_store_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/image/fs_store_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -40,7 +40,7 @@ const gopher = \"iVBORw0KGgoAAAANSUhEUgAAAEsAAAA8CAAAAAALAhhPAAAFfUlEQVRYw62XeWwU\n \n func gopherPNG() io.Reader { return base64.NewDecoder(base64.StdEncoding, strings.NewReader(gopher)) }\n func gopherPNGBytes() []byte {\n-\timg, _ := ioutil.ReadAll(gopherPNG())\n+\timg, _ := io.ReadAll(gopherPNG())\n \treturn img\n }\n \n@@ -53,7 +53,7 @@ func TestFsStore_Save(t *testing.T) {\n \tassert.NoError(t, err)\n \n \timg := svc.location(svc.Staging, id)\n-\tdata, err := ioutil.ReadFile(img)\n+\tdata, err := os.ReadFile(img)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 1462, len(data))\n }\n@@ -65,15 +65,15 @@ func TestFsStore_SaveNoResizeJpeg(t *testing.T) {\n \tfh, err := os.Open(\"testdata/circles.jpg\")\n \tdefer func() { assert.NoError(t, fh.Close()) }()\n \tassert.NoError(t, err)\n-\timg, err := ioutil.ReadAll(fh)\n+\timg, err := io.ReadAll(fh)\n \tassert.NoError(t, err)\n \tid := \"test_img\"\n \terr = svc.Save(id, img)\n \tassert.NoError(t, err)\n \n \timgPath := svc.location(svc.Staging, id)\n \tt.Log(imgPath)\n-\tdata, err := ioutil.ReadFile(imgPath)\n+\tdata, err := os.ReadFile(imgPath)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 23983, len(data))\n }\n@@ -94,7 +94,7 @@ func TestFsStore_SaveAndCommit(t *testing.T) {\n \n \timg := svc.location(svc.Location, id)\n \tt.Log(img)\n-\tdata, err := ioutil.ReadFile(img)\n+\tdata, err := os.ReadFile(img)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 1462, len(data))\n }\n@@ -188,7 +188,7 @@ func TestFsStore_Cleanup(t *testing.T) {\n \t\terr := svc.Save(id, gopherPNGBytes())\n \t\trequire.NoError(t, err)\n \t\timg := svc.location(svc.Staging, id)\n-\t\tdata, err := ioutil.ReadFile(img)\n+\t\tdata, err := os.ReadFile(img)\n \t\trequire.NoError(t, err)\n \t\tassert.Equal(t, 1462, len(data))\n \t\treturn img"
    },
    {
      "sha": "c3bbb592202b16e8f21052609273278505d54ff8",
      "filename": "backend/app/store/image/image.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/image.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/image.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/image/image.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -17,7 +17,6 @@ import (\n \t_ \"image/jpeg\"\n \t\"image/png\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"net/http\"\n \t\"net/url\"\n \t\"path\"\n@@ -341,7 +340,7 @@ func readAndValidateImage(r io.Reader, maxSize int) ([]byte, error) {\n \t}\n \n \tlr := io.LimitReader(r, int64(maxSize)+1)\n-\tdata, err := ioutil.ReadAll(lr)\n+\tdata, err := io.ReadAll(lr)\n \tif err != nil {\n \t\treturn nil, err\n \t}"
    },
    {
      "sha": "0a3f1bf56eccaa3d86df90b039691338eca3f24f",
      "filename": "backend/app/store/image/image_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/image_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/image_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/image/image_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -7,7 +7,6 @@ import (\n \t\"fmt\"\n \t\"image\"\n \t\"io\"\n-\t\"io/ioutil\"\n \t\"os\"\n \t\"strconv\"\n \t\"strings\"\n@@ -122,7 +121,7 @@ func TestService_Cleanup(t *testing.T) {\n \n \tsvc := NewService(&store, ServiceParams{EditDuration: 20 * time.Millisecond})\n \t// cancel context after 2.1 cleanup TTLs\n-\tctx, cancel := context.WithTimeout(context.Background(), svc.EditDuration / 100 * 15 * 21)\n+\tctx, cancel := context.WithTimeout(context.Background(), svc.EditDuration/100*15*21)\n \tdefer cancel()\n \tsvc.Cleanup(ctx)\n \tstore.AssertNumberOfCalls(t, \"Cleanup\", 2)\n@@ -209,7 +208,7 @@ func TestService_resize(t *testing.T) {\n \t}\n \n \tfor _, c := range cases {\n-\t\timg, err := ioutil.ReadFile(c.file)\n+\t\timg, err := os.ReadFile(c.file)\n \t\trequire.NoError(t, err, \"can't open test file %s\", c.file)\n \n \t\t// no need for resize, image dimensions are smaller than resize limit"
    },
    {
      "sha": "e7cec50ed2fe1c30fc5e42246b113c33f05d9c9a",
      "filename": "backend/app/store/image/remote_store.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/remote_store.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/remote_store.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/image/remote_store.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -4,7 +4,7 @@ import (\n \t\"context\"\n \t\"encoding/base64\"\n \t\"encoding/json\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"strings\"\n \t\"time\"\n \n@@ -38,7 +38,7 @@ func (r *RPC) Load(id string) ([]byte, error) {\n \tif err := json.Unmarshal(*resp.Result, &rawImg); err != nil {\n \t\treturn nil, err\n \t}\n-\treturn ioutil.ReadAll(base64.NewDecoder(base64.StdEncoding, strings.NewReader(rawImg)))\n+\treturn io.ReadAll(base64.NewDecoder(base64.StdEncoding, strings.NewReader(rawImg)))\n }\n \n // Commit file stored in staging location by moving it to permanent location"
    },
    {
      "sha": "8037b8848289597f298cd81ad958391c5461a620",
      "filename": "backend/app/store/image/remote_store_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/remote_store_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/image/remote_store_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/image/remote_store_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -3,7 +3,7 @@ package image\n import (\n \t\"context\"\n \t\"fmt\"\n-\t\"io/ioutil\"\n+\t\"io\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"testing\"\n@@ -15,7 +15,7 @@ import (\n )\n \n func TestRemote_SaveWithID(t *testing.T) {\n-\tts := testServer(t, fmt.Sprintf(`{\"method\":\"image.save_with_id\",\"params\":[\"54321\",\"%s\"],\"id\":1}`, gopher),\n+\tts := testServer(t, fmt.Sprintf(`{\"method\":\"image.save_with_id\",\"params\":[\"54321\",%q],\"id\":1}`, gopher),\n \t\t`{\"id\":1}`)\n \tdefer ts.Close()\n \tc := RPC{Client: jrpc.Client{API: ts.URL, Client: http.Client{}}}\n@@ -93,7 +93,7 @@ func TestRemote_Info(t *testing.T) {\n \n func testServer(t *testing.T, req, resp string) *httptest.Server {\n \treturn httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n-\t\tbody, err := ioutil.ReadAll(r.Body)\n+\t\tbody, err := io.ReadAll(r.Body)\n \t\trequire.NoError(t, err)\n \t\tassert.Equal(t, req, string(body))\n \t\t_, _ = fmt.Fprint(w, resp)"
    },
    {
      "sha": "a5fde5b25cb66b822b45abdc5458720dacb0f99f",
      "filename": "backend/app/store/service/service_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/service/service_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/service/service_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/service/service_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -113,7 +113,7 @@ func TestService_CreateFromPartialWithTitle(t *testing.T) {\n \tpostTitle := \"Post Title 42\"\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tif r.URL.String() == postPath {\n-\t\t\t_, err := w.Write([]byte(fmt.Sprintf(\"<html><title>%s</title><body>...</body></html>\", postTitle)))\n+\t\t\t_, err := fmt.Fprintf(w, \"<html><title>%s</title><body>...</body></html>\", postTitle)\n \t\t\tassert.NoError(t, err)\n \t\t\treturn\n \t\t}"
    },
    {
      "sha": "aa014d2fdca8581e1287c1d49c62780bfe5efa50",
      "filename": "backend/app/store/service/title_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/service/title_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/service/title_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/service/title_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -82,7 +82,7 @@ func TestTitle_GetConcurrent(t *testing.T) {\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tif strings.HasPrefix(r.URL.String(), \"/good\") {\n \t\t\tatomic.AddInt32(&hits, 1)\n-\t\t\t_, err := w.Write([]byte(fmt.Sprintf(\"<html><title>blah 123 %s</title><body>%s</body></html>\", r.URL.String(), body)))\n+\t\t\t_, err := fmt.Fprintf(w, \"<html><title>blah 123 %s</title><body>%s</body></html>\", r.URL.String(), body)\n \t\t\tassert.NoError(t, err)\n \t\t\treturn\n \t\t}"
    },
    {
      "sha": "1248d22f0a1ef7640f5b631beea59a933f35b2c4",
      "filename": "backend/app/store/service/tree_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/service/tree_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/store/service/tree_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/service/tree_test.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -2,7 +2,7 @@ package service\n \n import (\n \t\"encoding/json\"\n-\t\"io/ioutil\"\n+\t\"os\"\n \t\"testing\"\n \t\"time\"\n \n@@ -160,7 +160,7 @@ func TestTreeSortNodes(t *testing.T) {\n \n func BenchmarkTree(b *testing.B) {\n \tcomments := []store.Comment{}\n-\tdata, err := ioutil.ReadFile(\"testdata/tree_bench.json\")\n+\tdata, err := os.ReadFile(\"testdata/tree_bench.json\")\n \tassert.NoError(b, err)\n \terr = json.Unmarshal(data, &comments)\n \tassert.NoError(b, err)\n@@ -173,7 +173,7 @@ func BenchmarkTree(b *testing.B) {\n \n // loadJsonFile read fixtrue file and clear any custom json formatting\n func mustLoadJSONFile(t *testing.T, file string) []byte {\n-\texpJSON, err := ioutil.ReadFile(file)\n+\texpJSON, err := os.ReadFile(file)\n \trequire.NoError(t, err)\n \texpTree := Tree{}\n \terr = json.Unmarshal(expJSON, &expTree)"
    },
    {
      "sha": "712b25e29c98113d8c10f0a3602a0d9168a938c5",
      "filename": "backend/app/templates/templates.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/templates/templates.go",
      "raw_url": "https://github.com/umputun/remark42/raw/90e537358d58a6adbe9ef63b4e030c72ae7edc62/backend/app/templates/templates.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/templates/templates.go?ref=90e537358d58a6adbe9ef63b4e030c72ae7edc62",
      "patch": "@@ -1,8 +1,8 @@\n package templates\n \n import (\n-\t\"io/ioutil\"\n \t\"net/http\"\n+\t\"os\"\n \t\"path/filepath\"\n \n \tlog \"github.com/go-pkgz/lgr\"\n@@ -34,5 +34,5 @@ func (f *FS) ReadFile(path string) ([]byte, error) {\n \tif f.statik != nil {\n \t\treturn fs.ReadFile(f.statik, filepath.Join(\"/\", path)) //nolint:gocritic // root folder is a requirement for statik\n \t}\n-\treturn ioutil.ReadFile(filepath.Clean(path))\n+\treturn os.ReadFile(filepath.Clean(path))\n }"
    }
  ]
}
