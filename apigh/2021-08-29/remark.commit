{
  "sha": "be46e849a4836917053ccfa3dab5ecf15dae8dd7",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmJlNDZlODQ5YTQ4MzY5MTcwNTNjY2ZhM2RhYjVlY2YxNWRhZThkZDc=",
  "commit": {
    "author": {
      "name": "bakurin",
      "email": "backurin@gmail.com",
      "date": "2021-08-08T18:58:03Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-08-28T17:50:36Z"
    },
    "message": "Webhook destination for notifications",
    "tree": {
      "sha": "411244780257be0002131baab553f7afc9becb12",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/411244780257be0002131baab553f7afc9becb12"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/be46e849a4836917053ccfa3dab5ecf15dae8dd7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/be46e849a4836917053ccfa3dab5ecf15dae8dd7",
  "html_url": "https://github.com/umputun/remark42/commit/be46e849a4836917053ccfa3dab5ecf15dae8dd7",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/be46e849a4836917053ccfa3dab5ecf15dae8dd7/comments",
  "author": {
    "login": "bakurin",
    "id": 3139385,
    "node_id": "MDQ6VXNlcjMxMzkzODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3139385?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bakurin",
    "html_url": "https://github.com/bakurin",
    "followers_url": "https://api.github.com/users/bakurin/followers",
    "following_url": "https://api.github.com/users/bakurin/following{/other_user}",
    "gists_url": "https://api.github.com/users/bakurin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bakurin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bakurin/subscriptions",
    "organizations_url": "https://api.github.com/users/bakurin/orgs",
    "repos_url": "https://api.github.com/users/bakurin/repos",
    "events_url": "https://api.github.com/users/bakurin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bakurin/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9f6c76691961c68032c1d5aaccf3883ce1f03587",
      "url": "https://api.github.com/repos/umputun/remark42/commits/9f6c76691961c68032c1d5aaccf3883ce1f03587",
      "html_url": "https://github.com/umputun/remark42/commit/9f6c76691961c68032c1d5aaccf3883ce1f03587"
    }
  ],
  "stats": {
    "total": 439,
    "additions": 435,
    "deletions": 4
  },
  "files": [
    {
      "sha": "b9827f29cfc792e8eaf1b02da6a2401a64c2a86e",
      "filename": "README.md",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/be46e849a4836917053ccfa3dab5ecf15dae8dd7/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/be46e849a4836917053ccfa3dab5ecf15dae8dd7/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/README.md?ref=be46e849a4836917053ccfa3dab5ecf15dae8dd7",
      "patch": "@@ -14,7 +14,7 @@ Remark42 is a self-hosted, lightweight and simple (yet functional) comment engin\n * Images upload with drag-and-drop\n * Extractor for recent comments, cross-post\n * RSS for all comments and each post\n-* Telegram, Slack and email notifications for Admins (get notified for each new comment)\n+* Telegram, Slack, Webhook and email notifications for Admins (get notified for each new comment)\n * Email and Telegram notifications for users (get notified when someone responds to your comment)\n * Export data to JSON with automatic backups\n * No external databases, everything embedded in a single data file\n@@ -161,12 +161,16 @@ _this is the recommended way to run Remark42_\n | auth.email.content-type | AUTH_EMAIL_CONTENT_TYPE | `text/html`              | email content type                              |\n | auth.email.template     | AUTH_EMAIL_TEMPLATE     | none (predefined)        | custom email message template file              |\n | notify.users            | NOTIFY_USERS            | none                     | type of user notifications (Telegram, email)    |\n-| notify.admins           | NOTIFY_ADMINS           | none                     | type of admin notifications (Telegram, Slack and/or email) |\n+| notify.admins           | NOTIFY_ADMINS           | none                     | type of admin notifications (Telegram, Slack, webhook and/or email) |\n | notify.queue            | NOTIFY_QUEUE            | `100`                    | size of notification queue                      |\n | notify.telegram.chan    | NOTIFY_TELEGRAM_CHAN    |                          | Telegram channel                                |\n | notify.slack.token      | NOTIFY_SLACK_TOKEN      |                          | Slack token                                     |\n | notify.slack.chan       | NOTIFY_SLACK_CHAN       | `general`                | Slack channel                                   |\n-| notify.email.fromAddress | NOTIFY_EMAIL_FROM      |                          | from email address                              |\n+| notify.webhook.url      | NOTIFY_WEBHOOK_URL      |                          | Webhook notification URL                        |\n+| notify.webhook.template | NOTIFY_WEBHOOK_TEMPLATE | `{\"text\": \"{{.Text}}\"}`  | Webhook payload template                        |\n+| notify.webhook.headers  | NOTIFY_WEBHOOK_HEADERS  |                          | HTTP header in format Header1:Value1,Header2:Value2,...|\n+| notify.webhook.timeout  | NOTIFY_WEBHOOK_TIMEOUT  | `5s`                     | Webhook connection timeout                      |\n+| notify.email.fromAddress| NOTIFY_EMAIL_FROM       |                          | from email address                              |\n | notify.email.verification_subj | NOTIFY_EMAIL_VERIFICATION_SUBJ | `Email verification` | verification message subject          |\n | telegram.token          | TELEGRAM_TOKEN          |                          | Telegram token (used for auth and Telegram notifications) |\n | telegram.timeout        | TELEGRAM_TIMEOUT        | `5s`                     | Telegram connection timeout                     |"
    },
    {
      "sha": "723459ed7d892137108a4ef940e89a2aba6e653c",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 69,
      "deletions": 1,
      "changes": 70,
      "blob_url": "https://github.com/umputun/remark42/blob/be46e849a4836917053ccfa3dab5ecf15dae8dd7/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark42/raw/be46e849a4836917053ccfa3dab5ecf15dae8dd7/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server.go?ref=be46e849a4836917053ccfa3dab5ecf15dae8dd7",
      "patch": "@@ -213,7 +213,7 @@ type SMTPGroup struct {\n type NotifyGroup struct {\n \tType      []string `long:\"type\" env:\"TYPE\" description:\"[deprecated, use user and admin types instead] types of notifications\" choice:\"none\" choice:\"telegram\" choice:\"email\" choice:\"slack\" default:\"none\" env-delim:\",\"` //nolint\n \tUsers     []string `long:\"users\" env:\"USERS\" description:\"types of user notifications\" choice:\"none\" choice:\"email\" choice:\"telegram\" default:\"none\" env-delim:\",\"`                                                        //nolint\n-\tAdmins    []string `long:\"admins\" env:\"ADMINS\" description:\"types of admin notifications\" choice:\"none\" choice:\"telegram\" choice:\"email\" choice:\"slack\" default:\"none\" env-delim:\",\"`                                      //nolint\n+\tAdmins    []string `long:\"admins\" env:\"ADMINS\" description:\"types of admin notifications\" choice:\"none\" choice:\"telegram\" choice:\"email\" choice:\"slack\" choice:\"webhook\" default:\"none\" env-delim:\",\"`                     //nolint\n \tQueueSize int      `long:\"queue\" env:\"QUEUE\" description:\"size of notification queue\" default:\"100\"`\n \tTelegram  struct {\n \t\tChannel string        `long:\"chan\" env:\"CHAN\" description:\"telegram channel for admin notifications\"`\n@@ -230,6 +230,12 @@ type NotifyGroup struct {\n \t\tToken   string `long:\"token\" env:\"TOKEN\" description:\"slack token\"`\n \t\tChannel string `long:\"chan\" env:\"CHAN\" description:\"slack channel\"`\n \t} `group:\"slack\" namespace:\"slack\" env-namespace:\"SLACK\"`\n+\tWebhook struct {\n+\t\tWebhookURL string        `long:\"url\" env:\"URL\" description:\"webhook notification URL\"`\n+\t\tTemplate   string        `long:\"template\" env:\"TEMPLATE\" description:\"webhook authentication template\" default:\"{\\\"text\\\": \\\"{{.Text}}\\\"}\"`\n+\t\tHeaders    []string      `long:\"headers\" description:\"webhook authentication headers in format --notify.webhook.headers=Header1:Value1,Value2,...\"` // env NOTIFY_WEBHOOK_HEADERS split in code bellow to allow , inside \"\"\n+\t\tTimeout    time.Duration `long:\"timeout\" env:\"TIMEOUT\" description:\"webhook timeout\" default:\"5s\"`\n+\t} `group:\"webhook\" namespace:\"webhook\" env-namespace:\"WEBHOOK\"`\n }\n \n // SSLGroup defines options group for server ssl params\n@@ -903,6 +909,25 @@ func (s *ServerCommand) makeNotify(dataStore *service.DataStore, authenticator *\n \tvar destinations []notify.Destination\n \tvar telegramBotUsername string\n \n+\tif contains(\"webhook\", s.Notify.Admins) {\n+\t\tclient := &http.Client{Timeout: 5 * time.Second}\n+\t\twebhookHeaders := s.Notify.Webhook.Headers\n+\t\tif len(webhookHeaders) == 0 {\n+\t\t\twebhookHeaders = splitAtCommas(os.Getenv(\"NOTIFY_WEBHOOK_HEADERS\")) // env value may have comma inside \"\", parsed separately\n+\t\t}\n+\n+\t\twhParams := notify.WebhookParams{\n+\t\t\tWebhookURL: s.Notify.Webhook.WebhookURL,\n+\t\t\tTemplate:   s.Notify.Webhook.Template,\n+\t\t\tHeaders:    webhookHeaders,\n+\t\t}\n+\t\twebhook, err := notify.NewWebhook(client, whParams)\n+\t\tif err != nil {\n+\t\t\treturn nil, \"\", errors.Wrap(err, \"failed to create webhook notification destination\")\n+\t\t}\n+\t\tdestinations = append(destinations, webhook)\n+\t}\n+\n \tif contains(\"slack\", s.Notify.Admins) {\n \t\tslack, err := notify.NewSlack(s.Notify.Slack.Token, s.Notify.Slack.Channel)\n \t\tif err != nil {\n@@ -1091,6 +1116,49 @@ func (s *ServerCommand) parseSameSite(ss string) http.SameSite {\n \t}\n }\n \n+// splitAtCommas split s at commas, ignoring commas in strings.\n+// Eliminate leading and trailing dbl quotes in each element only if both presented\n+// based on https://stackoverflow.com/a/59318708\n+func splitAtCommas(s string) []string {\n+\n+\tcleanup := func(s string) string {\n+\t\tif s == \"\" {\n+\t\t\treturn s\n+\t\t}\n+\t\tres := strings.TrimSpace(s)\n+\t\tif res[0] == '\"' && res[len(res)-1] == '\"' {\n+\t\t\tres = strings.TrimPrefix(res, `\"`)\n+\t\t\tres = strings.TrimSuffix(res, `\"`)\n+\t\t}\n+\t\treturn res\n+\t}\n+\n+\tvar res []string\n+\tvar beg int\n+\tvar inString bool\n+\n+\tfor i := 0; i < len(s); i++ {\n+\t\tif s[i] == ',' && !inString {\n+\t\t\tres = append(res, cleanup(s[beg:i]))\n+\t\t\tbeg = i + 1\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif s[i] == '\"' {\n+\t\t\tif !inString {\n+\t\t\t\tinString = true\n+\t\t\t} else if i > 0 && s[i-1] != '\\\\' { // also allow \\\"\n+\t\t\t\tinString = false\n+\t\t\t}\n+\t\t}\n+\t}\n+\tres = append(res, cleanup(s[beg:]))\n+\tif len(res) == 1 && res[0] == \"\" {\n+\t\treturn []string{}\n+\t}\n+\treturn res\n+}\n+\n // authRefreshCache used by authenticator to minimize repeatable token refreshes\n type authRefreshCache struct {\n \tcache.LoadingCache"
    },
    {
      "sha": "ea93d78a5f7cdaef10afbcc0aa8a3b4bf116fc19",
      "filename": "backend/app/cmd/server_test.go",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark42/blob/be46e849a4836917053ccfa3dab5ecf15dae8dd7/backend/app/cmd/server_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/be46e849a4836917053ccfa3dab5ecf15dae8dd7/backend/app/cmd/server_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server_test.go?ref=be46e849a4836917053ccfa3dab5ecf15dae8dd7",
      "patch": "@@ -619,6 +619,29 @@ func TestServerCommand_parseSameSite(t *testing.T) {\n \t}\n }\n \n+func Test_splitAtCommas(t *testing.T) {\n+\n+\ttbl := []struct {\n+\t\tinp string\n+\t\tres []string\n+\t}{\n+\t\t{\"a string\", []string{\"a string\"}},\n+\t\t{\"vv1, vv2, vv3\", []string{\"vv1\", \"vv2\", \"vv3\"}},\n+\t\t{`\"vv1, blah\", vv2, vv3`, []string{\"vv1, blah\", \"vv2\", \"vv3\"}},\n+\t\t{\n+\t\t\t`Access-Control-Allow-Headers:\"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",header123:val, foo:\"bar1,bar2\"`,\n+\t\t\t[]string{\"Access-Control-Allow-Headers:\\\"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\\\"\", \"header123:val\", \"foo:\\\"bar1,bar2\\\"\"},\n+\t\t},\n+\t\t{\"\", []string{}},\n+\t}\n+\n+\tfor i, tt := range tbl {\n+\t\tt.Run(strconv.Itoa(i), func(t *testing.T) {\n+\t\t\tassert.Equal(t, tt.res, splitAtCommas(tt.inp))\n+\t\t})\n+\t}\n+}\n+\n func chooseRandomUnusedPort() (port int) {\n \tfor i := 0; i < 10; i++ {\n \t\tport = 40000 + int(rand.Int31n(10000))"
    },
    {
      "sha": "232e101bd961d529c63b8539524a55d086e60cf7",
      "filename": "backend/app/main_test.go",
      "status": "modified",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/umputun/remark42/blob/be46e849a4836917053ccfa3dab5ecf15dae8dd7/backend/app/main_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/be46e849a4836917053ccfa3dab5ecf15dae8dd7/backend/app/main_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/main_test.go?ref=be46e849a4836917053ccfa3dab5ecf15dae8dd7",
      "patch": "@@ -6,9 +6,11 @@ import (\n \t\"math/rand\"\n \t\"net\"\n \t\"net/http\"\n+\t\"net/http/httptest\"\n \t\"os\"\n \t\"strconv\"\n \t\"strings\"\n+\t\"sync/atomic\"\n \t\"syscall\"\n \t\"testing\"\n \t\"time\"\n@@ -57,6 +59,67 @@ func Test_Main(t *testing.T) {\n \tassert.Equal(t, \"pong\", string(body))\n }\n \n+func TestMain_WithWebhook(t *testing.T) {\n+\tdir, err := ioutil.TempDir(os.TempDir(), \"remark42\")\n+\trequire.NoError(t, err)\n+\tdefer os.RemoveAll(dir)\n+\n+\tvar webhookSent int32\n+\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\tatomic.StoreInt32(&webhookSent, 1)\n+\t\tassert.Equal(t, \"application/json\", r.Header.Get(\"Content-Type\"))\n+\n+\t\tb, e := ioutil.ReadAll(r.Body)\n+\t\tdefer r.Body.Close()\n+\n+\t\tassert.Nil(t, e)\n+\t\tassert.Equal(t, \"Comment: env test\", string(b))\n+\t}))\n+\tdefer ts.Close()\n+\n+\tport := chooseRandomUnusedPort()\n+\tos.Args = []string{\"test\", \"server\", \"--secret=123456\", \"--store.bolt.path=\" + dir, \"--backup=/tmp\",\n+\t\t\"--avatar.fs.path=\" + dir, \"--port=\" + strconv.Itoa(port), \"--url=https://demo.remark42.com\", \"--dbg\",\n+\t\t\"--admin-passwd=password\", \"--site=remark\", \"--notify.admins=webhook\"}\n+\n+\terr = os.Setenv(\"NOTIFY_WEBHOOK_URL\", ts.URL)\n+\tassert.NoError(t, err)\n+\terr = os.Setenv(\"NOTIFY_WEBHOOK_TEMPLATE\", \"Comment: {{.Orig}}\")\n+\tassert.NoError(t, err)\n+\terr = os.Setenv(\"NOTIFY_WEBHOOK_HEADERS\", \"Content-Type:application/json\")\n+\tassert.NoError(t, err)\n+\n+\tdone := make(chan struct{})\n+\tgo func() {\n+\t\t<-done\n+\t\te := syscall.Kill(syscall.Getpid(), syscall.SIGTERM)\n+\t\trequire.NoError(t, e)\n+\t}()\n+\n+\tfinished := make(chan struct{})\n+\tgo func() {\n+\t\tmain()\n+\t\tassert.Eventuallyf(t, func() bool {\n+\t\t\treturn atomic.LoadInt32(&webhookSent) == int32(1)\n+\t\t}, time.Second, 100*time.Millisecond, \"webhook was not sent\")\n+\t\tclose(finished)\n+\t}()\n+\n+\t// defer cleanup because require check below can fail\n+\tdefer func() {\n+\t\tclose(done)\n+\t\t<-finished\n+\t}()\n+\n+\twaitForHTTPServerStart(port)\n+\n+\tresp, err := http.Post(fmt.Sprintf(\"http://admin:password@localhost:%d/api/v1/comment\", port), \"\",\n+\t\tstrings.NewReader(`{\"text\": \"env test\", \"locator\":{\"url\": \"https://radio-t.com\", \"site\": \"remark\"}}`))\n+\trequire.NoError(t, err)\n+\tdefer resp.Body.Close()\n+\tassert.Equal(t, 201, resp.StatusCode)\n+}\n+\n func TestGetDump(t *testing.T) {\n \tdump := getDump()\n \tassert.True(t, strings.Contains(dump, \"goroutine\"))"
    },
    {
      "sha": "ce814b5904b0447cee8e56f711be54af730be064",
      "filename": "backend/app/notify/webhook.go",
      "status": "added",
      "additions": 113,
      "deletions": 0,
      "changes": 113,
      "blob_url": "https://github.com/umputun/remark42/blob/be46e849a4836917053ccfa3dab5ecf15dae8dd7/backend/app/notify/webhook.go",
      "raw_url": "https://github.com/umputun/remark42/raw/be46e849a4836917053ccfa3dab5ecf15dae8dd7/backend/app/notify/webhook.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/webhook.go?ref=be46e849a4836917053ccfa3dab5ecf15dae8dd7",
      "patch": "@@ -0,0 +1,113 @@\n+package notify\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"strings\"\n+\t\"text/template\"\n+\n+\tlog \"github.com/go-pkgz/lgr\"\n+\t\"github.com/pkg/errors\"\n+)\n+\n+const (\n+\twebhookDefaultTemplate = `{\"text\": \"{{.Text}}\"}`\n+)\n+\n+// WebhookClient defines an interface of client for webhook\n+type WebhookClient interface {\n+\tDo(*http.Request) (*http.Response, error)\n+}\n+\n+// WebhookParams contain settings for webhook notifications\n+type WebhookParams struct {\n+\tWebhookURL string\n+\tTemplate   string\n+\tHeaders    []string\n+}\n+\n+// Webhook implements notify.Destination for Webhook notifications\n+type Webhook struct {\n+\tWebhookParams\n+\twebhookClient   WebhookClient\n+\twebhookTemplate *template.Template\n+}\n+\n+// NewWebhook makes Webhook\n+func NewWebhook(client WebhookClient, params WebhookParams) (*Webhook, error) {\n+\tres := &Webhook{WebhookParams: params}\n+\tif res.WebhookURL == \"\" {\n+\t\treturn nil, errors.New(\"webhook URL is required for webhook notifications\")\n+\t}\n+\n+\tif res.Template == \"\" {\n+\t\tres.Template = webhookDefaultTemplate\n+\t}\n+\n+\tpayloadTmpl, err := template.New(\"webhook\").Parse(res.Template)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrap(err, \"unable to parse webhook template\")\n+\t}\n+\n+\tres.webhookClient = client\n+\tres.webhookTemplate = payloadTmpl\n+\n+\tlog.Printf(\"[DEBUG] create new webhook notifier for %s\", res.WebhookURL)\n+\n+\treturn res, nil\n+}\n+\n+// Send sends Webhook notification\n+func (t *Webhook) Send(ctx context.Context, req Request) error {\n+\tvar payload bytes.Buffer\n+\terr := t.webhookTemplate.Execute(&payload, req.Comment)\n+\tif err != nil {\n+\t\treturn errors.Wrap(err, \"unable to compile webhook template\")\n+\t}\n+\n+\thttpReq, err := http.NewRequestWithContext(ctx, \"POST\", t.WebhookURL, &payload)\n+\tif err != nil {\n+\t\treturn errors.Wrap(err, \"unable to create webhook request\")\n+\t}\n+\n+\tfor _, h := range t.Headers {\n+\t\telems := strings.Split(h, \":\")\n+\t\tif len(elems) != 2 {\n+\t\t\tcontinue\n+\t\t}\n+\t\thttpReq.Header.Set(strings.TrimSpace(elems[0]), strings.TrimSpace(elems[1]))\n+\t}\n+\n+\tresp, err := t.webhookClient.Do(httpReq)\n+\tif err != nil {\n+\t\treturn errors.Wrap(err, \"webhook request failed\")\n+\t}\n+\n+\tdefer resp.Body.Close()\n+\n+\tif resp.StatusCode != http.StatusOK {\n+\t\terrMsg := fmt.Sprintf(\"webhook request failed with non-OK status code: %d\", resp.StatusCode)\n+\t\trespBody, e := ioutil.ReadAll(resp.Body)\n+\t\tif e != nil {\n+\t\t\treturn fmt.Errorf(errMsg)\n+\t\t}\n+\t\treturn fmt.Errorf(\"%s, body: %s\", errMsg, respBody)\n+\t}\n+\n+\tlog.Printf(\"[DEBUG] send webhook notification, comment id %s\", req.Comment.ID)\n+\n+\treturn nil\n+}\n+\n+// SendVerification is not implemented for Webhook\n+func (t *Webhook) SendVerification(_ context.Context, _ VerificationRequest) error {\n+\treturn nil\n+}\n+\n+// String describes the webhook instance\n+func (t *Webhook) String() string {\n+\treturn fmt.Sprintf(\"webhook notification to %s\", t.WebhookURL)\n+}"
    },
    {
      "sha": "422d7b64bcd6475630f16f7b45c0cd4c19aa5dd8",
      "filename": "backend/app/notify/webhook_test.go",
      "status": "added",
      "additions": 160,
      "deletions": 0,
      "changes": 160,
      "blob_url": "https://github.com/umputun/remark42/blob/be46e849a4836917053ccfa3dab5ecf15dae8dd7/backend/app/notify/webhook_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/be46e849a4836917053ccfa3dab5ecf15dae8dd7/backend/app/notify/webhook_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/webhook_test.go?ref=be46e849a4836917053ccfa3dab5ecf15dae8dd7",
      "patch": "@@ -0,0 +1,160 @@\n+package notify\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"errors\"\n+\t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"testing\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\n+\t\"github.com/umputun/remark42/backend/app/store\"\n+)\n+\n+type funcWebhookClient func(*http.Request) (*http.Response, error)\n+\n+func (c funcWebhookClient) Do(r *http.Request) (*http.Response, error) {\n+\treturn c(r)\n+}\n+\n+var okWebhookClient = funcWebhookClient(func(*http.Request) (*http.Response, error) {\n+\treturn &http.Response{\n+\t\tStatusCode: http.StatusOK,\n+\t\tBody:       ioutil.NopCloser(bytes.NewBufferString(\"ok\")),\n+\t}, nil\n+})\n+\n+type errReader struct {\n+}\n+\n+func (errReader) Read(p []byte) (n int, err error) {\n+\treturn 0, errors.New(\"test error\")\n+}\n+\n+func TestWebhook_NewWebhook(t *testing.T) {\n+\n+\twh, err := NewWebhook(okWebhookClient, WebhookParams{\n+\t\tWebhookURL: \"https://example.org/webhook\",\n+\t\tHeaders:    []string{\"Authorization:Basic AXVubzpwQDU1dzByYM==\"},\n+\t})\n+\tassert.NoError(t, err)\n+\tassert.NotNil(t, wh)\n+\n+\tassert.Equal(t, \"https://example.org/webhook\", wh.WebhookURL)\n+\tassert.Equal(t, []string{\"Authorization:Basic AXVubzpwQDU1dzByYM==\"}, wh.Headers)\n+\tassert.Equal(t, `{\"text\": \"{{.Text}}\"}`, wh.Template)\n+\n+\twh, err = NewWebhook(okWebhookClient, WebhookParams{\n+\t\tWebhookURL: \"https://example.org/webhook\",\n+\t\tHeaders:    []string{\"Authorization:Basic AXVubzpwQDU1dzByYM==\"},\n+\t\tTemplate:   \"{{.Text}}\",\n+\t})\n+\tassert.NoError(t, err)\n+\tassert.NotNil(t, wh)\n+\tassert.Equal(t, \"{{.Text}}\", wh.Template)\n+\n+\twh, err = NewWebhook(okWebhookClient, WebhookParams{})\n+\tassert.Nil(t, wh)\n+\tassert.Error(t, err)\n+\tassert.Equal(t, \"webhook URL is required for webhook notifications\", err.Error())\n+\n+\twh, err = NewWebhook(okWebhookClient, WebhookParams{WebhookURL: \"https://example.org/webhook\", Template: \"{{.Text\"})\n+\tassert.Nil(t, wh)\n+\tassert.Error(t, err)\n+\tassert.Contains(t, err.Error(), \"unable to parse webhook template\")\n+}\n+\n+func TestWebhook_Send(t *testing.T) {\n+\n+\twh, err := NewWebhook(funcWebhookClient(func(r *http.Request) (*http.Response, error) {\n+\t\tassert.Len(t, r.Header, 1)\n+\t\tassert.Equal(t, r.Header.Get(\"Content-Type\"), \"application/json,text/plain\")\n+\n+\t\treturn &http.Response{\n+\t\t\tStatusCode: http.StatusOK,\n+\t\t\tBody:       ioutil.NopCloser(bytes.NewBufferString(\"\")),\n+\t\t}, nil\n+\t}), WebhookParams{\n+\t\tWebhookURL: \"https://example.org/webhook\",\n+\t\tHeaders:    []string{\"Content-Type:application/json,text/plain\", \"\"},\n+\t})\n+\tassert.NoError(t, err)\n+\tassert.NotNil(t, wh)\n+\n+\tc := store.Comment{Text: \"some text\", ParentID: \"1\", ID: \"999\"}\n+\tc.User.Name = \"from\"\n+\n+\terr = wh.Send(context.TODO(), Request{Comment: c})\n+\tassert.NoError(t, err)\n+\n+\twh, err = NewWebhook(okWebhookClient, WebhookParams{\n+\t\tWebhookURL: \"https://example.org/webhook\",\n+\t\tTemplate:   \"{{.InvalidProperty}}\",\n+\t})\n+\tassert.NoError(t, err)\n+\terr = wh.Send(context.TODO(), Request{Comment: c})\n+\trequire.Error(t, err)\n+\tassert.Contains(t, err.Error(), \"webhook template\")\n+\n+\twh, err = NewWebhook(okWebhookClient, WebhookParams{WebhookURL: \"https://example.org/webhook\"})\n+\tassert.NoError(t, err)\n+\terr = wh.Send(nil, Request{Comment: c}) // nolint\n+\trequire.Error(t, err)\n+\tassert.Contains(t, err.Error(), \"unable to create webhook request\")\n+\n+\twh, err = NewWebhook(funcWebhookClient(func(*http.Request) (*http.Response, error) {\n+\t\treturn nil, errors.New(\"request failed\")\n+\t}), WebhookParams{WebhookURL: \"https://not-existing-url.net\"})\n+\tassert.NoError(t, err)\n+\terr = wh.Send(context.TODO(), Request{Comment: c})\n+\trequire.Error(t, err)\n+\tassert.Contains(t, err.Error(), \"webhook request failed\")\n+\n+\twh, err = NewWebhook(funcWebhookClient(func(*http.Request) (*http.Response, error) {\n+\t\treturn &http.Response{\n+\t\t\tStatusCode: http.StatusNotFound,\n+\t\t\tBody:       ioutil.NopCloser(bytes.NewBufferString(\"not found\")),\n+\t\t}, nil\n+\t}), WebhookParams{\n+\t\tWebhookURL: \"http:/example.org/invalid-url\",\n+\t})\n+\tassert.NoError(t, err)\n+\terr = wh.Send(context.TODO(), Request{Comment: c})\n+\trequire.Error(t, err)\n+\tassert.Contains(t, err.Error(), \"non-OK status code: 404, body: not found\")\n+\n+\twh, err = NewWebhook(funcWebhookClient(func(*http.Request) (*http.Response, error) {\n+\t\treturn &http.Response{\n+\t\t\tStatusCode: http.StatusNotFound,\n+\t\t\tBody:       ioutil.NopCloser(errReader{}),\n+\t\t}, nil\n+\t}), WebhookParams{\n+\t\tWebhookURL: \"http:/example.org/invalid-url\",\n+\t})\n+\tassert.NoError(t, err)\n+\terr = wh.Send(context.TODO(), Request{Comment: c})\n+\trequire.Error(t, err)\n+\tassert.Contains(t, err.Error(), \"non-OK status code: 404\")\n+\tassert.NotContains(t, err.Error(), \"body\")\n+}\n+\n+func TestWebhook_SendVerification(t *testing.T) {\n+\twh, err := NewWebhook(okWebhookClient, WebhookParams{WebhookURL: \"https://example.org/webhook\"})\n+\tassert.NoError(t, err)\n+\tassert.NotNil(t, wh)\n+\n+\terr = wh.SendVerification(context.TODO(), VerificationRequest{})\n+\tassert.NoError(t, err)\n+}\n+\n+func TestWebhook_String(t *testing.T) {\n+\twh, err := NewWebhook(okWebhookClient, WebhookParams{WebhookURL: \"https://example.org/webhook\"})\n+\tassert.NoError(t, err)\n+\tassert.NotNil(t, wh)\n+\n+\tstr := wh.String()\n+\tassert.Equal(t, \"webhook notification to https://example.org/webhook\", str)\n+}"
    }
  ]
}
