{
  "sha": "4793a31075dd671b49b475f39482184760fb5727",
  "node_id": "C_kwDOBtgov9oAKDQ3OTNhMzEwNzVkZDY3MWI0OWI0NzVmMzk0ODIxODQ3NjBmYjU3Mjc",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2021-10-16T13:52:23Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-10-16T16:04:03Z"
    },
    "message": "move previewCommentCtrl to private REST struct",
    "tree": {
      "sha": "4b362479afde0b191c581b35db60c25cef77cebe",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/4b362479afde0b191c581b35db60c25cef77cebe"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/4793a31075dd671b49b475f39482184760fb5727",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/4793a31075dd671b49b475f39482184760fb5727",
  "html_url": "https://github.com/umputun/remark42/commit/4793a31075dd671b49b475f39482184760fb5727",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/4793a31075dd671b49b475f39482184760fb5727/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d0d4f06bad54058a95aab0fc5c2180a6e67f81a1",
      "url": "https://api.github.com/repos/umputun/remark42/commits/d0d4f06bad54058a95aab0fc5c2180a6e67f81a1",
      "html_url": "https://github.com/umputun/remark42/commit/d0d4f06bad54058a95aab0fc5c2180a6e67f81a1"
    }
  ],
  "stats": {
    "total": 69,
    "additions": 33,
    "deletions": 36
  },
  "files": [
    {
      "sha": "33b249fe936f7818de4dc38be3dd14965f759ad5",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/4793a31075dd671b49b475f39482184760fb5727/backend/app/rest/api/rest.go",
      "raw_url": "https://github.com/umputun/remark42/raw/4793a31075dd671b49b475f39482184760fb5727/backend/app/rest/api/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest.go?ref=4793a31075dd671b49b475f39482184760fb5727",
      "patch": "@@ -254,7 +254,6 @@ func (s *Rest) routes() chi.Router {\n \t\t\tropen.Get(\"/count\", s.pubRest.countCtrl)\n \t\t\tropen.Post(\"/counts\", s.pubRest.countMultiCtrl)\n \t\t\tropen.Get(\"/list\", s.pubRest.listCtrl)\n-\t\t\tropen.Post(\"/preview\", s.pubRest.previewCommentCtrl)\n \t\t\tropen.Get(\"/info\", s.pubRest.infoCtrl)\n \t\t\tropen.Get(\"/img\", s.ImageProxy.Handler)\n \n@@ -317,6 +316,7 @@ func (s *Rest) routes() chi.Router {\n \t\t\trauth.Use(middleware.NoCache, logInfoWithBody)\n \n \t\t\trauth.Put(\"/comment/{id}\", s.privRest.updateCommentCtrl)\n+\t\t\trauth.Post(\"/preview\", s.privRest.previewCommentCtrl)\n \t\t\trauth.Post(\"/comment\", s.privRest.createCommentCtrl)\n \t\t\trauth.Put(\"/vote/{id}\", s.privRest.voteCtrl)\n \t\t\trauth.With(rejectAnonUser).Post(\"/deleteme\", s.privRest.deleteMeCtrl)"
    },
    {
      "sha": "2c7e67ec8135f90d2f0d8beb457c199499b99d2b",
      "filename": "backend/app/rest/api/rest_private.go",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/umputun/remark42/blob/4793a31075dd671b49b475f39482184760fb5727/backend/app/rest/api/rest_private.go",
      "raw_url": "https://github.com/umputun/remark42/raw/4793a31075dd671b49b475f39482184760fb5727/backend/app/rest/api/rest_private.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_private.go?ref=4793a31075dd671b49b475f39482184760fb5727",
      "patch": "@@ -62,6 +62,38 @@ type privStore interface {\n \tInfo(locator store.Locator, readonlyAge int) (store.PostInfo, error)\n }\n \n+// POST /preview, body is a comment, returns rendered html\n+func (s *private) previewCommentCtrl(w http.ResponseWriter, r *http.Request) {\n+\tuser := rest.MustGetUserInfo(r)\n+\n+\tcomment := store.Comment{}\n+\tif err := render.DecodeJSON(http.MaxBytesReader(w, r.Body, hardBodyLimit), &comment); err != nil {\n+\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't bind comment\", rest.ErrDecode)\n+\t\treturn\n+\t}\n+\n+\tcomment.User = user\n+\tcomment.Orig = comment.Text\n+\tif err := s.dataService.ValidateComment(&comment); err != nil {\n+\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"invalid comment\", rest.ErrCommentValidation)\n+\t\treturn\n+\t}\n+\n+\tcomment = s.commentFormatter.Format(comment)\n+\tcomment.Sanitize()\n+\n+\t// check if images are valid\n+\tfor _, id := range s.imageService.ExtractPictures(comment.Text) {\n+\t\terr := s.imageService.ResetCleanupTimer(id)\n+\t\tif err != nil {\n+\t\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't renew staged picture cleanup timer\", rest.ErrImgNotFound)\n+\t\t\treturn\n+\t\t}\n+\t}\n+\n+\trender.HTML(w, r, comment.Text)\n+}\n+\n // POST /comment - adds comment, resets all immutable fields\n func (s *private) createCommentCtrl(w http.ResponseWriter, r *http.Request) {\n "
    },
    {
      "sha": "99e4f8e288cd02ac8e2d6b252a33544f2514b3b7",
      "filename": "backend/app/rest/api/rest_public.go",
      "status": "modified",
      "additions": 0,
      "deletions": 35,
      "changes": 35,
      "blob_url": "https://github.com/umputun/remark42/blob/4793a31075dd671b49b475f39482184760fb5727/backend/app/rest/api/rest_public.go",
      "raw_url": "https://github.com/umputun/remark42/raw/4793a31075dd671b49b475f39482184760fb5727/backend/app/rest/api/rest_public.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_public.go?ref=4793a31075dd671b49b475f39482184760fb5727",
      "patch": "@@ -110,41 +110,6 @@ func (s *public) findCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \t}\n }\n \n-// POST /preview, body is a comment, returns rendered html\n-func (s *public) previewCommentCtrl(w http.ResponseWriter, r *http.Request) {\n-\tcomment := store.Comment{}\n-\tif err := render.DecodeJSON(http.MaxBytesReader(w, r.Body, hardBodyLimit), &comment); err != nil {\n-\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't bind comment\", rest.ErrDecode)\n-\t\treturn\n-\t}\n-\n-\tuser, err := rest.GetUserInfo(r)\n-\tif err != nil { // this not suppose to happen (handled by Auth), just dbl-check\n-\t\trest.SendErrorJSON(w, r, http.StatusUnauthorized, err, \"can't get user info\", rest.ErrNoAccess)\n-\t\treturn\n-\t}\n-\tcomment.User = user\n-\tcomment.Orig = comment.Text\n-\tif err = s.dataService.ValidateComment(&comment); err != nil {\n-\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"invalid comment\", rest.ErrCommentValidation)\n-\t\treturn\n-\t}\n-\n-\tcomment = s.commentFormatter.Format(comment)\n-\tcomment.Sanitize()\n-\n-\t// check if images are valid\n-\tfor _, id := range s.imageService.ExtractPictures(comment.Text) {\n-\t\terr = s.imageService.ResetCleanupTimer(id)\n-\t\tif err != nil {\n-\t\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't renew staged picture cleanup timer\", rest.ErrImgNotFound)\n-\t\t\treturn\n-\t\t}\n-\t}\n-\n-\trender.HTML(w, r, comment.Text)\n-}\n-\n // GET /info?site=siteID&url=post-url - get info about the post\n func (s *public) infoCtrl(w http.ResponseWriter, r *http.Request) {\n \tlocator := store.Locator{SiteID: r.URL.Query().Get(\"site\"), URL: r.URL.Query().Get(\"url\")}"
    }
  ]
}
