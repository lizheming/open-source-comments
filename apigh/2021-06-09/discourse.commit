{
  "sha": "7ba35e0d71a41a47be5efead91f413f650343b4b",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo3YmEzNWUwZDcxYTQxYTQ3YmU1ZWZlYWQ5MWY0MTNmNjUwMzQzYjRi",
  "commit": {
    "author": {
      "name": "Grayden",
      "email": "38144548+graydenshand@users.noreply.github.com",
      "date": "2021-06-09T10:01:06Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-06-09T10:01:06Z"
    },
    "message": "UX: Improvements for reordering categories (#13013)\n\n* UX: Improvements to reorder categories UX\r\n\r\nBefore, moving a category from, for example, position 25 to position 0 would result in switching the positions of the two categories at those positions.\r\n\r\nCategory A at position 0 would move to position 25, and Category B at position 25 would move to position 0.\r\n\r\nInstead of switching positions, the reorder categories function should retain the order of categories except for the one being moved.\r\n\r\nSo, Category B at position 25 would still move to position 0, but Category A is merely bumped down to position 1.\r\n\r\nThis improves the UX because if a user *really* wants to switch the two categories, it results in one extra step. However in the other (what I think is normal) case, it saves the 24 other switches the user has to make to get Category A back to position 1 (you can imagine the user having to click the up arrow button repeatedly to return Category A to the top of the page). Now, imagine trying to do this with a site with 100s of categories. Yikes!\r\n\r\nThe UX improvement described above is what this commit accomplishes by redesigning the `move()` method of the reorder-categories controller. It adds some overhead to adjust the positions of all categories in between the origin and target positions, but in testing this is not noticible to the user. It's better for the computer to do extra work than the user.\r\n\r\n* UX: Allow decimal input in reorder-categories for more precise positioning.\r\n\r\nA common UX pattern when reordering a list of items is to allow a user to specify a target position as a decimal between two valid integer positions. The user is indicating they want the target list item to move in between the list items at the positions on either side of the target position.\r\n\r\nFor example, say there are three categories Category A at position 0, Category B at position 1, and Category C at position 3.\r\n\r\nTo move Category C in between Categories A and B, a user can now simply update Category C's position to 0.5.",
    "tree": {
      "sha": "03b26c3ed319a72211007d5f905a0c3609b84f08",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/03b26c3ed319a72211007d5f905a0c3609b84f08"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/7ba35e0d71a41a47be5efead91f413f650343b4b",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwJFiCRBK7hj4Ov3rIwAAMvIIACWyoyGxzfGK1uaHp7bwsImD\n5WVXjPtZg8sUzoRq7bzwXDE/JhYDUuru6O4u5eV44be8LP7jbNwZbTjTNZ0y8PjE\nj21J9SmQtpzHXUbnscjW/D4Uzbph1xWle29Zf8TulVEMuf8APdZ+4Xe7Qb6PQZbJ\n66Gpa84T8qyQpmnF2Aer1IVDuWdAGEnRSUufj92FZ6uYdHz0w0drURIWciCAPwyR\n2xHMtlS04zBYZhhJV5A15kyn5gRxkvspnHf7ZhgYon3wymd4Y1JZhcj+kD2g5LgQ\ngw9d1SPjsgCqVhGRQWfdt5YD07rRkIZ7CfCFpIPS09kTr50AycPvJncv6jnzyOE=\n=pIdZ\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 03b26c3ed319a72211007d5f905a0c3609b84f08\nparent 023ff9a2821e9b4a3134349fef8f566f37714b16\nauthor Grayden <38144548+graydenshand@users.noreply.github.com> 1623232866 -0400\ncommitter GitHub <noreply@github.com> 1623232866 +0300\n\nUX: Improvements for reordering categories (#13013)\n\n* UX: Improvements to reorder categories UX\r\n\r\nBefore, moving a category from, for example, position 25 to position 0 would result in switching the positions of the two categories at those positions.\r\n\r\nCategory A at position 0 would move to position 25, and Category B at position 25 would move to position 0.\r\n\r\nInstead of switching positions, the reorder categories function should retain the order of categories except for the one being moved.\r\n\r\nSo, Category B at position 25 would still move to position 0, but Category A is merely bumped down to position 1.\r\n\r\nThis improves the UX because if a user *really* wants to switch the two categories, it results in one extra step. However in the other (what I think is normal) case, it saves the 24 other switches the user has to make to get Category A back to position 1 (you can imagine the user having to click the up arrow button repeatedly to return Category A to the top of the page). Now, imagine trying to do this with a site with 100s of categories. Yikes!\r\n\r\nThe UX improvement described above is what this commit accomplishes by redesigning the `move()` method of the reorder-categories controller. It adds some overhead to adjust the positions of all categories in between the origin and target positions, but in testing this is not noticible to the user. It's better for the computer to do extra work than the user.\r\n\r\n* UX: Allow decimal input in reorder-categories for more precise positioning.\r\n\r\nA common UX pattern when reordering a list of items is to allow a user to specify a target position as a decimal between two valid integer positions. The user is indicating they want the target list item to move in between the list items at the positions on either side of the target position.\r\n\r\nFor example, say there are three categories Category A at position 0, Category B at position 1, and Category C at position 3.\r\n\r\nTo move Category C in between Categories A and B, a user can now simply update Category C's position to 0.5."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/7ba35e0d71a41a47be5efead91f413f650343b4b",
  "html_url": "https://github.com/discourse/discourse/commit/7ba35e0d71a41a47be5efead91f413f650343b4b",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/7ba35e0d71a41a47be5efead91f413f650343b4b/comments",
  "author": {
    "login": "graydenshand",
    "id": 38144548,
    "node_id": "MDQ6VXNlcjM4MTQ0NTQ4",
    "avatar_url": "https://avatars.githubusercontent.com/u/38144548?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/graydenshand",
    "html_url": "https://github.com/graydenshand",
    "followers_url": "https://api.github.com/users/graydenshand/followers",
    "following_url": "https://api.github.com/users/graydenshand/following{/other_user}",
    "gists_url": "https://api.github.com/users/graydenshand/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/graydenshand/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/graydenshand/subscriptions",
    "organizations_url": "https://api.github.com/users/graydenshand/orgs",
    "repos_url": "https://api.github.com/users/graydenshand/repos",
    "events_url": "https://api.github.com/users/graydenshand/events{/privacy}",
    "received_events_url": "https://api.github.com/users/graydenshand/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "023ff9a2821e9b4a3134349fef8f566f37714b16",
      "url": "https://api.github.com/repos/discourse/discourse/commits/023ff9a2821e9b4a3134349fef8f566f37714b16",
      "html_url": "https://github.com/discourse/discourse/commit/023ff9a2821e9b4a3134349fef8f566f37714b16"
    }
  ],
  "stats": {
    "total": 245,
    "additions": 139,
    "deletions": 106
  },
  "files": [
    {
      "sha": "36b2d9d9eb78dd6b21a93bb91660cb328ef53daa",
      "filename": "app/assets/javascripts/discourse/app/controllers/reorder-categories.js",
      "status": "modified",
      "additions": 79,
      "deletions": 38,
      "changes": 117,
      "blob_url": "https://github.com/discourse/discourse/blob/7ba35e0d71a41a47be5efead91f413f650343b4b/app/assets/javascripts/discourse/app/controllers/reorder-categories.js",
      "raw_url": "https://github.com/discourse/discourse/raw/7ba35e0d71a41a47be5efead91f413f650343b4b/app/assets/javascripts/discourse/app/controllers/reorder-categories.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/reorder-categories.js?ref=7ba35e0d71a41a47be5efead91f413f650343b4b",
      "patch": "@@ -60,56 +60,97 @@ export default Controller.extend(ModalFunctionality, Evented, {\n     this.notifyPropertyChange(\"categoriesBuffered\");\n   },\n \n-  move(category, direction) {\n-    let otherCategory;\n+  countDescendants(category) {\n+    return category.get(\"subcategories\")\n+      ? category\n+          .get(\"subcategories\")\n+          .reduce(\n+            (count, subcategory) => count + this.countDescendants(subcategory),\n+            category.get(\"subcategories\").length\n+          )\n+      : 0;\n+  },\n \n-    if (direction === -1) {\n-      // First category above current one\n-      const categoriesOrderedDesc = this.categoriesOrdered.reverse();\n-      otherCategory = categoriesOrderedDesc.find(\n-        (c) =>\n-          category.get(\"parent_category_id\") === c.get(\"parent_category_id\") &&\n-          c.get(\"position\") < category.get(\"position\")\n-      );\n-    } else if (direction === 1) {\n-      // First category under current one\n-      otherCategory = this.categoriesOrdered.find(\n-        (c) =>\n-          category.get(\"parent_category_id\") === c.get(\"parent_category_id\") &&\n-          c.get(\"position\") > category.get(\"position\")\n-      );\n+  move(category, direction) {\n+    let targetPosition = category.get(\"position\") + direction;\n+\n+    // Adjust target position for sub-categories\n+    if (direction > 0) {\n+      // Moving down (position gets larger)\n+      if (category.get(\"isParent\")) {\n+        // This category has subcategories, adjust targetPosition to account for them\n+        let offset = this.countDescendants(category);\n+        if (direction <= offset) {\n+          // Only apply offset if target position is occupied by a subcategory\n+          // Seems weird but fixes a UX quirk\n+          targetPosition += offset;\n+        }\n+      }\n     } else {\n-      // Find category occupying target position\n-      otherCategory = this.categoriesOrdered.find(\n-        (c) => c.get(\"position\") === category.get(\"position\") + direction\n+      // Moving up (position gets smaller)\n+      const otherCategory = this.categoriesOrdered.find(\n+        (c) =>\n+          // find category currently at targetPosition\n+          c.get(\"position\") === targetPosition\n       );\n+      if (otherCategory && otherCategory.get(\"ancestors\")) {\n+        // Target category is a subcategory, adjust targetPosition to account for ancestors\n+        const highestAncestor = otherCategory\n+          .get(\"ancestors\")\n+          .reduce((current, min) =>\n+            current.get(\"position\") < min.get(\"position\") ? current : min\n+          );\n+        targetPosition = highestAncestor.get(\"position\");\n+      }\n     }\n \n-    if (otherCategory) {\n-      // Try to swap positions of the two categories\n-      if (category.get(\"id\") !== otherCategory.get(\"id\")) {\n-        const currentPosition = category.get(\"position\");\n-        category.set(\"position\", otherCategory.get(\"position\"));\n-        otherCategory.set(\"position\", currentPosition);\n-      }\n-    } else if (direction < 0) {\n-      category.set(\"position\", -1);\n-    } else if (direction > 0) {\n-      category.set(\"position\", this.categoriesOrdered.length);\n+    // Adjust target position for range bounds\n+    if (targetPosition >= this.categoriesOrdered.length) {\n+      // Set to max\n+      targetPosition = this.categoriesOrdered.length - 1;\n+    } else if (targetPosition < 0) {\n+      // Set to min\n+      targetPosition = 0;\n     }\n \n+    // Update other categories between current and target position\n+    this.categoriesOrdered.map((c) => {\n+      if (direction < 0) {\n+        // Moving up (position gets smaller)\n+        if (\n+          c.get(\"position\") < category.get(\"position\") &&\n+          c.get(\"position\") >= targetPosition\n+        ) {\n+          const newPosition = c.get(\"position\") + 1;\n+          c.set(\"position\", newPosition);\n+        }\n+      } else {\n+        // Moving down (position gets larger)\n+        if (\n+          c.get(\"position\") > category.get(\"position\") &&\n+          c.get(\"position\") <= targetPosition\n+        ) {\n+          const newPosition = c.get(\"position\") - 1;\n+          c.set(\"position\", newPosition);\n+        }\n+      }\n+    });\n+\n+    // Update this category's position to target position\n+    category.set(\"position\", targetPosition);\n+\n     this.reorder();\n   },\n \n   actions: {\n     change(category, event) {\n-      let newPosition = parseInt(event.target.value, 10);\n-      newPosition = Math.min(\n-        Math.max(newPosition, 0),\n-        this.categoriesOrdered.length - 1\n-      );\n-\n-      this.move(category, newPosition - category.get(\"position\"));\n+      let newPosition = parseFloat(event.target.value);\n+      newPosition =\n+        newPosition < category.get(\"position\")\n+          ? Math.ceil(newPosition)\n+          : Math.floor(newPosition);\n+      const direction = newPosition - category.get(\"position\");\n+      this.move(category, direction);\n     },\n \n     moveUp(category) {"
    },
    {
      "sha": "821b2cbb85cdd84a6ee99ddbcd7b764d3f4ac406",
      "filename": "app/assets/javascripts/discourse/tests/unit/controllers/reorder-categories-test.js",
      "status": "modified",
      "additions": 60,
      "deletions": 68,
      "changes": 128,
      "blob_url": "https://github.com/discourse/discourse/blob/7ba35e0d71a41a47be5efead91f413f650343b4b/app/assets/javascripts/discourse/tests/unit/controllers/reorder-categories-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/7ba35e0d71a41a47be5efead91f413f650343b4b/app/assets/javascripts/discourse/tests/unit/controllers/reorder-categories-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/controllers/reorder-categories-test.js?ref=7ba35e0d71a41a47be5efead91f413f650343b4b",
      "patch": "@@ -11,17 +11,14 @@ discourseModule(\"Unit | Controller | reorder-categories\", function () {\n       categories.push(store.createRecord(\"category\", { id: i, position: 0 }));\n     }\n \n-    const reorderCategoriesController = this.getController(\n-      \"reorder-categories\",\n-      { site: { categories } }\n-    );\n-    reorderCategoriesController.reorder();\n+    const controller = this.getController(\"reorder-categories\", {\n+      site: { categories },\n+    });\n+    controller.reorder();\n \n-    reorderCategoriesController\n-      .get(\"categoriesOrdered\")\n-      .forEach((category, index) => {\n-        assert.equal(category.get(\"position\"), index);\n-      });\n+    controller.get(\"categoriesOrdered\").forEach((category, index) => {\n+      assert.equal(category.get(\"position\"), index);\n+    });\n   });\n \n   test(\"reorder places subcategories after their parent categories, while maintaining the relative order\", function (assert) {\n@@ -51,14 +48,13 @@ discourseModule(\"Unit | Controller | reorder-categories\", function () {\n     });\n \n     const expectedOrderSlugs = [\"parent\", \"child2\", \"child1\", \"other\"];\n-    const reorderCategoriesController = this.getController(\n-      \"reorder-categories\",\n-      { site: { categories: [child2, parent, other, child1] } }\n-    );\n-    reorderCategoriesController.reorder();\n+    const controller = this.getController(\"reorder-categories\", {\n+      site: { categories: [child2, parent, other, child1] },\n+    });\n+    controller.reorder();\n \n     assert.deepEqual(\n-      reorderCategoriesController.get(\"categoriesOrdered\").mapBy(\"slug\"),\n+      controller.get(\"categoriesOrdered\").mapBy(\"slug\"),\n       expectedOrderSlugs\n     );\n   });\n@@ -84,21 +80,18 @@ discourseModule(\"Unit | Controller | reorder-categories\", function () {\n       slug: \"test\",\n     });\n \n-    const reorderCategoriesController = this.getController(\n-      \"reorder-categories\",\n-      { site: { categories: [elem1, elem2, elem3] } }\n-    );\n+    const controller = this.getController(\"reorder-categories\", {\n+      site: { categories: [elem1, elem2, elem3] },\n+    });\n \n-    reorderCategoriesController.actions.change.call(\n-      reorderCategoriesController,\n-      elem1,\n-      { target: { value: \"2\" } }\n-    );\n+    // Move category 'foo' from position 0 to position 2\n+    controller.send(\"change\", elem1, { target: { value: \"2\" } });\n \n-    assert.deepEqual(\n-      reorderCategoriesController.get(\"categoriesOrdered\").mapBy(\"slug\"),\n-      [\"test\", \"bar\", \"foo\"]\n-    );\n+    assert.deepEqual(controller.get(\"categoriesOrdered\").mapBy(\"slug\"), [\n+      \"bar\",\n+      \"test\",\n+      \"foo\",\n+    ]);\n   });\n \n   test(\"changing the position number of a category should place it at given position and respect children\", function (assert) {\n@@ -129,72 +122,71 @@ discourseModule(\"Unit | Controller | reorder-categories\", function () {\n       slug: \"test\",\n     });\n \n-    const reorderCategoriesController = this.getController(\n-      \"reorder-categories\",\n-      { site: { categories: [elem1, child1, elem2, elem3] } }\n-    );\n+    const controller = this.getController(\"reorder-categories\", {\n+      site: { categories: [elem1, child1, elem2, elem3] },\n+    });\n \n-    reorderCategoriesController.actions.change.call(\n-      reorderCategoriesController,\n-      elem1,\n-      { target: { value: 3 } }\n-    );\n+    controller.send(\"change\", elem1, { target: { value: 3 } });\n \n-    assert.deepEqual(\n-      reorderCategoriesController.get(\"categoriesOrdered\").mapBy(\"slug\"),\n-      [\"test\", \"bar\", \"foo\", \"foochild\"]\n-    );\n+    assert.deepEqual(controller.get(\"categoriesOrdered\").mapBy(\"slug\"), [\n+      \"bar\",\n+      \"test\",\n+      \"foo\",\n+      \"foochild\",\n+    ]);\n   });\n \n   test(\"changing the position through click on arrow of a category should place it at given position and respect children\", function (assert) {\n     const store = createStore();\n \n-    const elem1 = store.createRecord(\"category\", {\n-      id: 1,\n-      position: 0,\n-      slug: \"foo\",\n+    const child2 = store.createRecord(\"category\", {\n+      id: 105,\n+      position: 2,\n+      slug: \"foochildchild\",\n+      parent_category_id: 104,\n     });\n \n     const child1 = store.createRecord(\"category\", {\n-      id: 4,\n+      id: 104,\n       position: 1,\n       slug: \"foochild\",\n-      parent_category_id: 1,\n+      parent_category_id: 101,\n+      subcategories: [child2],\n     });\n \n-    const child2 = store.createRecord(\"category\", {\n-      id: 5,\n-      position: 2,\n-      slug: \"foochildchild\",\n-      parent_category_id: 4,\n+    const elem1 = store.createRecord(\"category\", {\n+      id: 101,\n+      position: 0,\n+      slug: \"foo\",\n+      subcategories: [child1],\n     });\n \n     const elem2 = store.createRecord(\"category\", {\n-      id: 2,\n+      id: 102,\n       position: 3,\n       slug: \"bar\",\n     });\n \n     const elem3 = store.createRecord(\"category\", {\n-      id: 3,\n+      id: 103,\n       position: 4,\n       slug: \"test\",\n     });\n \n-    const reorderCategoriesController = this.getController(\n-      \"reorder-categories\",\n-      { site: { categories: [elem1, child1, child2, elem2, elem3] } }\n-    );\n-    reorderCategoriesController.reorder();\n+    const controller = this.getController(\"reorder-categories\", {\n+      site: { categories: [elem1, child1, child2, elem2, elem3] },\n+    });\n \n-    reorderCategoriesController.actions.moveDown.call(\n-      reorderCategoriesController,\n-      elem1\n-    );\n+    controller.reorder();\n \n-    assert.deepEqual(\n-      reorderCategoriesController.get(\"categoriesOrdered\").mapBy(\"slug\"),\n-      [\"bar\", \"foo\", \"foochild\", \"foochildchild\", \"test\"]\n-    );\n+    controller.send(\"moveDown\", elem1);\n+\n+    assert.deepEqual(controller.get(\"categoriesOrdered\").mapBy(\"slug\"), [\n+      \"bar\",\n+      \"foo\",\n+      \"foochild\",\n+      \"foochildchild\",\n+      \"test\",\n+    ]);\n   });\n });"
    }
  ]
}
