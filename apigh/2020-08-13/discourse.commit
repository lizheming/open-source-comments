{
  "sha": "7194b31443c08cf3e50227f27aa59a1bf6b4343b",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo3MTk0YjMxNDQzYzA4Y2YzZTUwMjI3ZjI3YWE1OWExYmY2YjQzNDNi",
  "commit": {
    "author": {
      "name": "Krzysztof Kotlarek",
      "email": "kotlarek.krzysztof@gmail.com",
      "date": "2020-08-13T07:22:34Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-08-13T07:22:34Z"
    },
    "message": "FEATURE: don't notify about changed tags for a private message (#10408)\n\n* FEATURE: don't notify about changed tags for a private message\r\n\r\nOnly staff members observing specific tag should receive a notification\r\n\r\n* FIX: remove other category which is not used\r\n\r\n* FIX: improved specs to ensure that revise was succesful",
    "tree": {
      "sha": "6318d18f799e40f227bc06df1ce2f33e3e6499fd",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/6318d18f799e40f227bc06df1ce2f33e3e6499fd"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/7194b31443c08cf3e50227f27aa59a1bf6b4343b",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNOo6CRBK7hj4Ov3rIwAAdHIIAKAgdU2miALWH0NAg3UPLnNq\n7Gqexodgixl2drAykgrJ35OUkW//6XDufmbQ2hJ3n4KbSSP37lQHBWdwqNY273ub\nF28qqZacjERlMBi45MNqzNvJisuQaY+Hz1diJB/zieCjMZ1gR3yef+NC0Kip2dWQ\n3yOFbRkBfr2gmNzqK0w/cXbHdsLTsinJVOduMciFQc/hsMOzr7t26gY2P7Zrqlg4\nnLssxYkEqX9BH14FoVWzo0iJaIp4aXTZ325ogxGUrN8I/v0uozf6dYtofXnMvTj2\nKLoXYxFDzOJD24/R9t3KQe8jv4Vh20a1DjksMUfvJUygq6/kXEH4H9esVBGERXw=\n=i+oM\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 6318d18f799e40f227bc06df1ce2f33e3e6499fd\nparent 310952fd6a2fb74127175486bb0d6723640a274d\nauthor Krzysztof Kotlarek <kotlarek.krzysztof@gmail.com> 1597303354 +1000\ncommitter GitHub <noreply@github.com> 1597303354 +1000\n\nFEATURE: don't notify about changed tags for a private message (#10408)\n\n* FEATURE: don't notify about changed tags for a private message\r\n\r\nOnly staff members observing specific tag should receive a notification\r\n\r\n* FIX: remove other category which is not used\r\n\r\n* FIX: improved specs to ensure that revise was succesful"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/7194b31443c08cf3e50227f27aa59a1bf6b4343b",
  "html_url": "https://github.com/discourse/discourse/commit/7194b31443c08cf3e50227f27aa59a1bf6b4343b",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/7194b31443c08cf3e50227f27aa59a1bf6b4343b/comments",
  "author": {
    "login": "lis2",
    "id": 72780,
    "node_id": "MDQ6VXNlcjcyNzgw",
    "avatar_url": "https://avatars1.githubusercontent.com/u/72780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lis2",
    "html_url": "https://github.com/lis2",
    "followers_url": "https://api.github.com/users/lis2/followers",
    "following_url": "https://api.github.com/users/lis2/following{/other_user}",
    "gists_url": "https://api.github.com/users/lis2/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lis2/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lis2/subscriptions",
    "organizations_url": "https://api.github.com/users/lis2/orgs",
    "repos_url": "https://api.github.com/users/lis2/repos",
    "events_url": "https://api.github.com/users/lis2/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lis2/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "310952fd6a2fb74127175486bb0d6723640a274d",
      "url": "https://api.github.com/repos/discourse/discourse/commits/310952fd6a2fb74127175486bb0d6723640a274d",
      "html_url": "https://github.com/discourse/discourse/commit/310952fd6a2fb74127175486bb0d6723640a274d"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 51,
    "deletions": 8
  },
  "files": [
    {
      "sha": "16cab8de7b5113ae59aa4fff4283036f5b926ba3",
      "filename": "app/jobs/regular/notify_tag_change.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/7194b31443c08cf3e50227f27aa59a1bf6b4343b/app/jobs/regular/notify_tag_change.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/7194b31443c08cf3e50227f27aa59a1bf6b4343b/app/jobs/regular/notify_tag_change.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/notify_tag_change.rb?ref=7194b31443c08cf3e50227f27aa59a1bf6b4343b",
      "patch": "@@ -7,7 +7,7 @@ def execute(args)\n \n       if post&.topic&.visible?\n         post_alerter = PostAlerter.new\n-        post_alerter.notify_post_users(post, User.where(id: args[:notified_user_ids]), include_category_watchers: false)\n+        post_alerter.notify_post_users(post, User.where(id: args[:notified_user_ids]), include_topic_watchers: !post.topic.private_message?, include_category_watchers: false)\n         post_alerter.notify_first_post_watchers(post, post_alerter.tag_watchers(post.topic))\n       end\n     end"
    },
    {
      "sha": "b7461128817bca3588b29b87dc6f015285c7943d",
      "filename": "app/services/post_alerter.rb",
      "status": "modified",
      "additions": 18,
      "deletions": 7,
      "changes": 25,
      "blob_url": "https://github.com/discourse/discourse/blob/7194b31443c08cf3e50227f27aa59a1bf6b4343b/app/services/post_alerter.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/7194b31443c08cf3e50227f27aa59a1bf6b4343b/app/services/post_alerter.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/services/post_alerter.rb?ref=7194b31443c08cf3e50227f27aa59a1bf6b4343b",
      "patch": "@@ -613,21 +613,28 @@ def notify_pm_users(post, reply_to_user, notified)\n     end\n   end\n \n-  def notify_post_users(post, notified, include_category_watchers: true, include_tag_watchers: true, new_record: false)\n+  def notify_post_users(post, notified, include_topic_watchers: true, include_category_watchers: true, include_tag_watchers: true, new_record: false)\n     return unless post.topic\n \n     warn_if_not_sidekiq\n \n     condition = +<<~SQL\n       id IN (\n+        SELECT id FROM users WHERE false\n+        /*topic*/\n+        /*category*/\n+        /*tags*/\n+      )\n+    SQL\n+    if include_topic_watchers\n+      condition.sub! \"/*topic*/\", <<~SQL\n+        UNION\n         SELECT user_id\n           FROM topic_users\n          WHERE notification_level = :watching\n            AND topic_id = :topic_id\n-         /*category*/\n-         /*tags*/\n-      )\n-    SQL\n+      SQL\n+    end\n \n     if include_category_watchers\n       condition.sub! \"/*category*/\", <<~SQL\n@@ -639,7 +646,7 @@ def notify_post_users(post, notified, include_category_watchers: true, include_t\n                              AND tu.topic_id = :topic_id\n          WHERE cu.notification_level = :watching\n            AND cu.category_id = :category_id\n-           AND tu.user_id IS NULL\n+           AND (tu.user_id IS NULL OR tu.notification_level = :watching)\n       SQL\n     end\n \n@@ -655,7 +662,7 @@ def notify_post_users(post, notified, include_category_watchers: true, include_t\n                              AND tu.topic_id = :topic_id\n          WHERE tag_users.notification_level = :watching\n            AND tag_users.tag_id IN (:tag_ids)\n-           AND tu.user_id IS NULL\n+           AND (tu.user_id IS NULL OR tu.notification_level = :watching)\n       SQL\n     end\n \n@@ -666,6 +673,10 @@ def notify_post_users(post, notified, include_category_watchers: true, include_t\n       tag_ids: tag_ids\n     )\n \n+    if post.topic.private_message?\n+      notify = notify.where(staged: false).staff\n+    end\n+\n     exclude_user_ids = notified.map(&:id)\n     notify = notify.where(\"id NOT IN (?)\", exclude_user_ids) if exclude_user_ids.present?\n "
    },
    {
      "sha": "9a6c6556084c0e83c632ac09c264fe07c4702844",
      "filename": "spec/services/post_alerter_spec.rb",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/discourse/discourse/blob/7194b31443c08cf3e50227f27aa59a1bf6b4343b/spec/services/post_alerter_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/7194b31443c08cf3e50227f27aa59a1bf6b4343b/spec/services/post_alerter_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/services/post_alerter_spec.rb?ref=7194b31443c08cf3e50227f27aa59a1bf6b4343b",
      "patch": "@@ -1098,6 +1098,38 @@ def set_topic_notification_level(user, topic, level_name)\n         expect(user.notifications.where(notification_type: Notification.types[:watching_first_post]).count).to eq(0)\n       end\n     end\n+\n+    context \"private message\" do\n+      fab!(:post) { Fabricate(:private_message_post) }\n+      fab!(:other_tag) { Fabricate(:tag) }\n+      fab!(:other_tag2) { Fabricate(:tag) }\n+      fab!(:other_tag3) { Fabricate(:tag) }\n+      fab!(:user) { Fabricate(:user) }\n+      fab!(:staged) { Fabricate(:staged) }\n+      fab!(:admin) { Fabricate(:admin) }\n+\n+      before do\n+        SiteSetting.tagging_enabled = true\n+        SiteSetting.allow_staff_to_tag_pms = true\n+        Jobs.run_immediately!\n+        TopicUser.change(user.id, post.topic.id, notification_level: TopicUser.notification_levels[:watching])\n+        TopicUser.change(staged.id, post.topic.id, notification_level: TopicUser.notification_levels[:watching])\n+        TopicUser.change(admin.id, post.topic.id, notification_level: TopicUser.notification_levels[:watching])\n+        TagUser.change(staged.id, other_tag.id, TagUser.notification_levels[:watching])\n+        TagUser.change(admin.id, other_tag3.id, TagUser.notification_levels[:watching])\n+        post.topic.allowed_users << user\n+        post.topic.allowed_users << staged\n+      end\n+\n+      it \"only notifes staff watching added tag\" do\n+        expect(PostRevisor.new(post).revise!(Fabricate(:admin), tags: [other_tag.name])).to be true\n+        expect(Notification.where(user_id: staged.id).count).to eq(0)\n+        expect(PostRevisor.new(post).revise!(Fabricate(:admin), tags: [other_tag2.name])).to be true\n+        expect(Notification.where(user_id: admin.id).count).to eq(0)\n+        expect(PostRevisor.new(post).revise!(Fabricate(:admin), tags: [other_tag3.name])).to be true\n+        expect(Notification.where(user_id: admin.id).count).to eq(1)\n+      end\n+    end\n   end\n \n   describe '#extract_linked_users' do"
    }
  ]
}
