{
  "sha": "d6167980f4130892a3690e8397994f92650ef4e5",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmQ2MTY3OTgwZjQxMzA4OTJhMzY5MGU4Mzk3OTk0ZjkyNjUwZWY0ZTU=",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2021-06-12T22:43:25Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-06-13T06:49:15Z"
    },
    "message": "remove ability to set telegram API, clarify params",
    "tree": {
      "sha": "84a015df5a0eec1554b364947588246a0d835034",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/84a015df5a0eec1554b364947588246a0d835034"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/d6167980f4130892a3690e8397994f92650ef4e5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/d6167980f4130892a3690e8397994f92650ef4e5",
  "html_url": "https://github.com/umputun/remark42/commit/d6167980f4130892a3690e8397994f92650ef4e5",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/d6167980f4130892a3690e8397994f92650ef4e5/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ea15b28bf648d68f5290b4cf4d2c101e49643b54",
      "url": "https://api.github.com/repos/umputun/remark42/commits/ea15b28bf648d68f5290b4cf4d2c101e49643b54",
      "html_url": "https://github.com/umputun/remark42/commit/ea15b28bf648d68f5290b4cf4d2c101e49643b54"
    }
  ],
  "stats": {
    "total": 140,
    "additions": 102,
    "deletions": 38
  },
  "files": [
    {
      "sha": "f9b5cfdfd634c28f6fde9a6ac91b2b77f4c7ef11",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/d6167980f4130892a3690e8397994f92650ef4e5/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d6167980f4130892a3690e8397994f92650ef4e5/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server.go?ref=d6167980f4130892a3690e8397994f92650ef4e5",
      "patch": "@@ -216,7 +216,7 @@ type NotifyGroup struct {\n \tQueueSize int      `long:\"queue\" env:\"QUEUE\" description:\"size of notification queue\" default:\"100\"`\n \tTelegram  struct {\n \t\tChannel string        `long:\"chan\" env:\"CHAN\" description:\"telegram channel for admin notifications\"`\n-\t\tAPI     string        `long:\"api\" env:\"API\" default:\"https://api.telegram.org/bot\" description:\"telegram api prefix\"`\n+\t\tAPI     string        `long:\"api\" env:\"API\" default:\"https://api.telegram.org/bot\" description:\"[deprecated, not used] telegram api prefix\"`\n \t\tToken   string        `long:\"token\" env:\"TOKEN\" description:\"[deprecated, use --telegram.token] telegram token\"`\n \t\tTimeout time.Duration `long:\"timeout\" env:\"TIMEOUT\" default:\"5s\" description:\"[deprecated, use --telegram.timeout] telegram timeout\"`\n \t} `group:\"telegram\" namespace:\"telegram\" env-namespace:\"TELEGRAM\"`\n@@ -361,6 +361,9 @@ func (s *ServerCommand) HandleDeprecatedFlags() (result []DeprecatedFlag) {\n \t\ts.Telegram.Token = s.Notify.Telegram.Token\n \t\tresult = append(result, DeprecatedFlag{Old: \"notify.telegram.timeout\", New: \"telegram.timeout\", Version: \"1.9\"})\n \t}\n+\tif s.Notify.Telegram.API != \"https://api.telegram.org/bot\" {\n+\t\tresult = append(result, DeprecatedFlag{Old: \"notify.telegram.api\", Version: \"1.9\"})\n+\t}\n \treturn result\n }\n \n@@ -877,8 +880,12 @@ func (s *ServerCommand) makeNotify(dataStore *service.DataStore, authenticator *\n \t\t\t}\n \t\t\tdestinations = append(destinations, slack)\n \t\tcase \"telegram\":\n-\t\t\ttg, err := notify.NewTelegram(s.Telegram.Token, s.Notify.Telegram.Channel,\n-\t\t\t\ts.Telegram.Timeout, s.Notify.Telegram.API)\n+\t\t\ttelegramParams := notify.TelegramParams{\n+\t\t\t\tAdminChannelID: s.Notify.Telegram.Channel,\n+\t\t\t\tToken:          s.Telegram.Token,\n+\t\t\t\tTimeout:        s.Telegram.Timeout,\n+\t\t\t}\n+\t\t\ttg, err := notify.NewTelegram(telegramParams)\n \t\t\tif err != nil {\n \t\t\t\treturn nil, errors.Wrap(err, \"failed to create telegram notification destination\")\n \t\t\t}"
    },
    {
      "sha": "e3861d89f1996fad8fab02f8d70b3ff8811d3947",
      "filename": "backend/app/main.go",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/d6167980f4130892a3690e8397994f92650ef4e5/backend/app/main.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d6167980f4130892a3690e8397994f92650ef4e5/backend/app/main.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/main.go?ref=d6167980f4130892a3690e8397994f92650ef4e5",
      "patch": "@@ -46,8 +46,11 @@ func main() {\n \t\t\tRevision:     revision,\n \t\t})\n \t\tfor _, entry := range c.HandleDeprecatedFlags() {\n-\t\t\tlog.Printf(\"[WARN] --%s is deprecated since v%s and will be removed in the future, please use --%s instead\",\n-\t\t\t\tentry.Old, entry.Version, entry.New)\n+\t\t\tdeprecationNote := fmt.Sprintf(\"[WARN] --%s is deprecated since v%s and will be removed in the future\", entry.Old, entry.Version)\n+\t\t\tif entry.New != \"\" {\n+\t\t\t\tdeprecationNote += fmt.Sprintf(\", please use --%s instead\", entry.New)\n+\t\t\t}\n+\t\t\tlog.Print(deprecationNote)\n \t\t}\n \t\terr := c.Execute(args)\n \t\tif err != nil {"
    },
    {
      "sha": "46434cebcf4fecdba1cc1360694de190025bbe4c",
      "filename": "backend/app/notify/telegram.go",
      "status": "modified",
      "additions": 26,
      "deletions": 20,
      "changes": 46,
      "blob_url": "https://github.com/umputun/remark42/blob/d6167980f4130892a3690e8397994f92650ef4e5/backend/app/notify/telegram.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d6167980f4130892a3690e8397994f92650ef4e5/backend/app/notify/telegram.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/telegram.go?ref=d6167980f4130892a3690e8397994f92650ef4e5",
      "patch": "@@ -16,38 +16,44 @@ import (\n \t\"github.com/pkg/errors\"\n )\n \n+// TelegramParams contain settings for telegram notifications\n+type TelegramParams struct {\n+\tAdminChannelID string        // unique identifier for the target chat or username of the target channel (in the format @channelusername)\n+\tToken          string        // token for telegram bot API interactions\n+\tTimeout        time.Duration // http client timeout\n+\n+\tapiPrefix string // changed only in tests\n+}\n+\n // Telegram implements notify.Destination for telegram\n type Telegram struct {\n-\tchannelID string // unique identifier for the target chat or username of the target channel (in the format @channelusername)\n-\ttoken     string\n-\tapiPrefix string\n-\ttimeout   time.Duration\n+\tTelegramParams\n }\n \n const telegramTimeOut = 5000 * time.Millisecond\n const telegramAPIPrefix = \"https://api.telegram.org/bot\"\n \n // NewTelegram makes telegram bot for notifications\n-func NewTelegram(token, channelID string, timeout time.Duration, api string) (*Telegram, error) {\n-\tif _, err := strconv.ParseInt(channelID, 10, 64); err != nil {\n-\t\tchannelID = \"@\" + channelID // if channelID not a number enforce @ prefix\n+func NewTelegram(params TelegramParams) (*Telegram, error) {\n+\tres := Telegram{TelegramParams: params}\n+\tif _, err := strconv.ParseInt(res.AdminChannelID, 10, 64); err != nil {\n+\t\tres.AdminChannelID = \"@\" + res.AdminChannelID // if channelID not a number enforce @ prefix\n \t}\n \n-\tres := Telegram{channelID: channelID, token: token, apiPrefix: api, timeout: timeout}\n \tif res.apiPrefix == \"\" {\n \t\tres.apiPrefix = telegramAPIPrefix\n \t}\n-\tif res.timeout == 0 {\n-\t\tres.timeout = telegramTimeOut\n+\tif res.Timeout == 0 {\n+\t\tres.Timeout = telegramTimeOut\n \t}\n-\tlog.Printf(\"[DEBUG] create new telegram notifier for chan %s, timeout=%s, api=%s\", channelID, res.timeout, res.timeout)\n+\tlog.Printf(\"[DEBUG] create new telegram notifier for api=%s, timeout=%s\", res.apiPrefix, res.Timeout)\n \n \tctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n \tdefer cancel()\n \n \terr := repeater.NewDefault(5, time.Millisecond*250).Do(ctx, func() error {\n-\t\tclient := http.Client{Timeout: res.timeout}\n-\t\tresp, err := client.Get(fmt.Sprintf(\"%s%s/getMe\", res.apiPrefix, token))\n+\t\tclient := http.Client{Timeout: res.Timeout}\n+\t\tresp, err := client.Get(fmt.Sprintf(\"%s%s/getMe\", res.apiPrefix, res.Token))\n \t\tif err != nil {\n \t\t\treturn errors.Wrap(err, \"can't initialize telegram notifications\")\n \t\t}\n@@ -88,9 +94,9 @@ func NewTelegram(token, channelID string, timeout time.Duration, api string) (*T\n func (t *Telegram) Send(ctx context.Context, req Request) error {\n \tvar err error\n \n-\tif t.channelID != \"\" {\n+\tif t.AdminChannelID != \"\" {\n \t\terr = t.sendAdminNotification(ctx, req)\n-\t\tif err != nil{\n+\t\tif err != nil {\n \t\t\treturn errors.Wrapf(err, \"problem sending admin telegram notification\")\n \t\t}\n \t}\n@@ -99,14 +105,14 @@ func (t *Telegram) Send(ctx context.Context, req Request) error {\n }\n \n func (t *Telegram) sendAdminNotification(ctx context.Context, req Request) error {\n-\tlog.Printf(\"[DEBUG] send admin telegram notification to %s, comment id %s\", t.channelID, req.Comment.ID)\n+\tlog.Printf(\"[DEBUG] send admin telegram notification to %s, comment id %s\", t.AdminChannelID, req.Comment.ID)\n \n \tmsg, err := buildTelegramMessage(req)\n \tif err != nil {\n \t\treturn errors.Wrap(err, \"failed to make telegram message body\")\n \t}\n \n-\terr = t.sendMessage(ctx, msg, t.channelID)\n+\terr = t.sendMessage(ctx, msg, t.AdminChannelID)\n \tif err != nil {\n \t\treturn errors.Wrapf(err, \"failed to send admin notification about %s\", req.Comment.ID)\n \t}\n@@ -115,14 +121,14 @@ func (t *Telegram) sendAdminNotification(ctx context.Context, req Request) error\n \n func (t *Telegram) sendMessage(ctx context.Context, b []byte, chatID string) error {\n \tu := fmt.Sprintf(\"%s%s/sendMessage?chat_id=%s&parse_mode=Markdown&disable_web_page_preview=true\",\n-\t\tt.apiPrefix, t.token, chatID)\n+\t\tt.apiPrefix, t.Token, chatID)\n \tr, err := http.NewRequest(\"POST\", u, bytes.NewReader(b))\n \tif err != nil {\n \t\treturn errors.Wrap(err, \"failed to make telegram request\")\n \t}\n \tr.Header.Set(\"Content-Type\", \"application/json; charset=utf-8\")\n \n-\tclient := http.Client{Timeout: t.timeout}\n+\tclient := http.Client{Timeout: t.Timeout}\n \tr = r.WithContext(ctx)\n \tresp, err := client.Do(r)\n \tif err != nil {\n@@ -186,5 +192,5 @@ func (t *Telegram) SendVerification(_ context.Context, _ VerificationRequest) er\n }\n \n func (t *Telegram) String() string {\n-\treturn \"telegram: \" + t.channelID\n+\treturn \"telegram: \" + t.AdminChannelID\n }"
    },
    {
      "sha": "97ea58210dae2f85ea61517c6ac9d9da11f7bfb2",
      "filename": "backend/app/notify/telegram_test.go",
      "status": "modified",
      "additions": 61,
      "deletions": 13,
      "changes": 74,
      "blob_url": "https://github.com/umputun/remark42/blob/d6167980f4130892a3690e8397994f92650ef4e5/backend/app/notify/telegram_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d6167980f4130892a3690e8397994f92650ef4e5/backend/app/notify/telegram_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/telegram_test.go?ref=d6167980f4130892a3690e8397994f92650ef4e5",
      "patch": "@@ -20,45 +20,85 @@ func TestTelegram_New(t *testing.T) {\n \tts := mockTelegramServer()\n \tdefer ts.Close()\n \n-\ttb, err := NewTelegram(\"good-token\", \"remark_test\", 2*time.Second, ts.URL+\"/\")\n+\ttb, err := NewTelegram(TelegramParams{\n+\t\tAdminChannelID: \"remark_test\",\n+\t\tToken:          \"good-token\",\n+\t\tapiPrefix:      ts.URL + \"/\",\n+\t})\n \tassert.NoError(t, err)\n \tassert.NotNil(t, tb)\n-\tassert.Equal(t, \"@remark_test\", tb.channelID, \"@ added\")\n+\tassert.Equal(t, tb.Timeout, time.Second*5)\n+\tassert.Equal(t, \"@remark_test\", tb.AdminChannelID, \"@ added\")\n \n \tst := time.Now()\n-\t_, err = NewTelegram(\"bad-resp\", \"remark_test\", 2*time.Second, ts.URL+\"/\")\n+\t_, err = NewTelegram(TelegramParams{\n+\t\tAdminChannelID: \"remark_test\",\n+\t\tToken:          \"bad-resp\",\n+\t\tapiPrefix:      ts.URL + \"/\",\n+\t})\n \tassert.EqualError(t, err, \"unexpected telegram response {OK:false Result:{FirstName:comments_test ID:707381019 IsBot:false UserName:remark42_test_bot}}\")\n \tassert.True(t, time.Since(st) >= 250*5*time.Millisecond)\n \n-\t_, err = NewTelegram(\"non-json-resp\", \"remark_test\", 2*time.Second, ts.URL+\"/\")\n+\t_, err = NewTelegram(TelegramParams{\n+\t\tAdminChannelID: \"remark_test\",\n+\t\tToken:          \"non-json-resp\",\n+\t\tTimeout:        2 * time.Second,\n+\t\tapiPrefix:      ts.URL + \"/\",\n+\t})\n \tassert.Error(t, err)\n \tassert.Contains(t, err.Error(), \"can't decode response:\")\n \n-\t_, err = NewTelegram(\"404\", \"remark_test\", 2*time.Second, ts.URL+\"/\")\n+\t_, err = NewTelegram(TelegramParams{\n+\t\tAdminChannelID: \"remark_test\",\n+\t\tToken:          \"404\",\n+\t\tTimeout:        2 * time.Second,\n+\t\tapiPrefix:      ts.URL + \"/\",\n+\t})\n \tassert.EqualError(t, err, \"unexpected telegram status code 404\")\n \n-\t_, err = NewTelegram(\"no-such-thing\", \"remark_test\", 2*time.Second, \"http://127.0.0.1:4321/\")\n+\t_, err = NewTelegram(TelegramParams{\n+\t\tAdminChannelID: \"remark_test\",\n+\t\tToken:          \"no-such-thing\",\n+\t\tapiPrefix:      \"http://127.0.0.1:4321/\",\n+\t})\n \trequire.Error(t, err)\n \tassert.Contains(t, err.Error(), \"can't initialize telegram notifications\")\n \tassert.Contains(t, err.Error(), \"dial tcp 127.0.0.1:4321: connect: connection refused\")\n \n-\t_, err = NewTelegram(\"good-token\", \"remark_test\", 2*time.Second, \"\")\n+\t_, err = NewTelegram(TelegramParams{\n+\t\tAdminChannelID: \"remark_test\",\n+\t\tToken:          \"no-such-thing\",\n+\t\tapiPrefix:      \"\",\n+\t})\n \tassert.Error(t, err, \"empty api url not allowed\")\n \n-\t_, err = NewTelegram(\"good-token\", \"remark_test\", 0, ts.URL+\"/\")\n+\t_, err = NewTelegram(TelegramParams{\n+\t\tAdminChannelID: \"remark_test\",\n+\t\tToken:          \"good-token\",\n+\t\tTimeout:        2 * time.Second,\n+\t\tapiPrefix:      ts.URL + \"/\",\n+\t})\n \tassert.NoError(t, err, \"0 timeout allowed as default\")\n \n-\ttb, err = NewTelegram(\"good-token\", \"1234567890\", 2*time.Second, ts.URL+\"/\")\n+\ttb, err = NewTelegram(TelegramParams{\n+\t\tAdminChannelID: \"1234567890\",\n+\t\tToken:          \"good-token\",\n+\t\tapiPrefix:      ts.URL + \"/\",\n+\t})\n \tassert.NoError(t, err)\n \tassert.NotNil(t, tb)\n-\tassert.Equal(t, \"1234567890\", tb.channelID, \"no @ prefix\")\n+\tassert.Equal(t, \"1234567890\", tb.AdminChannelID, \"no @ prefix\")\n }\n \n func TestTelegram_Send(t *testing.T) {\n \tts := mockTelegramServer()\n \tdefer ts.Close()\n \n-\ttb, err := NewTelegram(\"good-token\", \"remark_test\", 2*time.Second, ts.URL+\"/\")\n+\ttb, err := NewTelegram(TelegramParams{\n+\t\tAdminChannelID: \"remark_test\",\n+\t\tToken:          \"good-token\",\n+\t\tapiPrefix:      ts.URL + \"/\",\n+\t})\n \tassert.NoError(t, err)\n \tassert.NotNil(t, tb)\n \tc := store.Comment{Text: \"some text\", ParentID: \"1\", ID: \"999\"}\n@@ -78,7 +118,11 @@ func TestTelegram_Send(t *testing.T) {\n \terr = tb.Send(context.TODO(), Request{Comment: c, parent: cp})\n \tassert.NoError(t, err)\n \n-\ttb, err = NewTelegram(\"non-json-resp\", \"remark_test\", 2*time.Second, ts.URL+\"/\")\n+\ttb, err = NewTelegram(TelegramParams{\n+\t\tAdminChannelID: \"remark_test\",\n+\t\tToken:          \"non-json-resp\",\n+\t\tapiPrefix:      ts.URL + \"/\",\n+\t})\n \tassert.Error(t, err, \"should fail\")\n \terr = tb.Send(context.TODO(), Request{Comment: c, parent: cp})\n \trequire.Error(t, err)\n@@ -96,7 +140,11 @@ func TestTelegram_SendVerification(t *testing.T) {\n \tts := mockTelegramServer()\n \tdefer ts.Close()\n \n-\ttb, err := NewTelegram(\"good-token\", \"remark_test\", 2*time.Second, ts.URL+\"/\")\n+\ttb, err := NewTelegram(TelegramParams{\n+\t\tAdminChannelID: \"remark_test\",\n+\t\tToken:          \"good-token\",\n+\t\tapiPrefix:      ts.URL + \"/\",\n+\t})\n \tassert.NoError(t, err)\n \tassert.NotNil(t, tb)\n "
    }
  ]
}
