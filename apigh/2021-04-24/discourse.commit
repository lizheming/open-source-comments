{
  "sha": "60059a7190ff70924d70213bf8970aaf89faeffc",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo2MDA1OWE3MTkwZmY3MDkyNGQ3MDIxM2JmODk3MGFhZjg5ZmFlZmZj",
  "commit": {
    "author": {
      "name": "Roman Rizzi",
      "email": "rizziromanalejandro@gmail.com",
      "date": "2021-04-23T18:34:24Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-04-23T18:34:24Z"
    },
    "message": "FEATURE: A low priority filter for the review queue. (#12822)\n\nThis filter hides reviewables with a score lower than the \"reviewable_low_priority_threshold\" setting. We only use reviewables that already met this threshold to calculate the Medium and High priority filters.",
    "tree": {
      "sha": "e999c7ed34387692a6224aefa86568476ce37e71",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/e999c7ed34387692a6224aefa86568476ce37e71"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/60059a7190ff70924d70213bf8970aaf89faeffc",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJggxMwCRBK7hj4Ov3rIwAAeuAIAFQNlr57N9Vdt9e+YKweVfUi\n7KA8+XwPcR05FjcbAo98bIjV0dDU0WXVxONrZo+nF4FFisjvhglqbphIskWBxJDd\nvvo4hwRD2k84HHO8iNAnDeCJnff90zBFuxRE8Xr78ClgcMs90JDXPrie48jWBuyP\nM7Jv9ormbo9liySgyj5sCzGs2X89X9t73v0l6tU/BgvW3bhC0gAyeTr7/oRfjcDe\nqCMPmjd5dvODwQ+IQyroxYoR/bbvCk4Dl7sWezs7pbuWWZ0D79nTBx4uKU3bL3ZG\ni0nxT+ZC3BYJ/cVkH8v73izKLDjr2NRsX90q29Hjh1njHke7fQ4cQ+CFmVB00Mo=\n=BgPv\n-----END PGP SIGNATURE-----\n",
      "payload": "tree e999c7ed34387692a6224aefa86568476ce37e71\nparent 4ccbecf480e8d2bfd381c8fb003da664a4792f9d\nauthor Roman Rizzi <rizziromanalejandro@gmail.com> 1619202864 -0300\ncommitter GitHub <noreply@github.com> 1619202864 -0300\n\nFEATURE: A low priority filter for the review queue. (#12822)\n\nThis filter hides reviewables with a score lower than the \"reviewable_low_priority_threshold\" setting. We only use reviewables that already met this threshold to calculate the Medium and High priority filters."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/60059a7190ff70924d70213bf8970aaf89faeffc",
  "html_url": "https://github.com/discourse/discourse/commit/60059a7190ff70924d70213bf8970aaf89faeffc",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/60059a7190ff70924d70213bf8970aaf89faeffc/comments",
  "author": {
    "login": "romanrizzi",
    "id": 5025816,
    "node_id": "MDQ6VXNlcjUwMjU4MTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5025816?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/romanrizzi",
    "html_url": "https://github.com/romanrizzi",
    "followers_url": "https://api.github.com/users/romanrizzi/followers",
    "following_url": "https://api.github.com/users/romanrizzi/following{/other_user}",
    "gists_url": "https://api.github.com/users/romanrizzi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/romanrizzi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/romanrizzi/subscriptions",
    "organizations_url": "https://api.github.com/users/romanrizzi/orgs",
    "repos_url": "https://api.github.com/users/romanrizzi/repos",
    "events_url": "https://api.github.com/users/romanrizzi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/romanrizzi/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4ccbecf480e8d2bfd381c8fb003da664a4792f9d",
      "url": "https://api.github.com/repos/discourse/discourse/commits/4ccbecf480e8d2bfd381c8fb003da664a4792f9d",
      "html_url": "https://github.com/discourse/discourse/commit/4ccbecf480e8d2bfd381c8fb003da664a4792f9d"
    }
  ],
  "stats": {
    "total": 110,
    "additions": 87,
    "deletions": 23
  },
  "files": [
    {
      "sha": "73f2c655429ece2fdae0bfe667e5e8d2a5bd5cac",
      "filename": "app/assets/javascripts/discourse/app/controllers/review-index.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/60059a7190ff70924d70213bf8970aaf89faeffc/app/assets/javascripts/discourse/app/controllers/review-index.js",
      "raw_url": "https://github.com/discourse/discourse/raw/60059a7190ff70924d70213bf8970aaf89faeffc/app/assets/javascripts/discourse/app/controllers/review-index.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/review-index.js?ref=60059a7190ff70924d70213bf8970aaf89faeffc",
      "patch": "@@ -49,7 +49,7 @@ export default Controller.extend({\n \n   @discourseComputed\n   priorities() {\n-    return [\"low\", \"medium\", \"high\"].map((priority) => {\n+    return [\"any\", \"low\", \"medium\", \"high\"].map((priority) => {\n       return {\n         id: priority,\n         name: I18n.t(`review.filters.priority.${priority}`),"
    },
    {
      "sha": "cb74ead9cf600d3fb66892588b1c497eb14f83de",
      "filename": "app/jobs/scheduled/reviewable_priorities.rb",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/discourse/discourse/blob/60059a7190ff70924d70213bf8970aaf89faeffc/app/jobs/scheduled/reviewable_priorities.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/60059a7190ff70924d70213bf8970aaf89faeffc/app/jobs/scheduled/reviewable_priorities.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/scheduled/reviewable_priorities.rb?ref=60059a7190ff70924d70213bf8970aaf89faeffc",
      "patch": "@@ -16,13 +16,16 @@ def self.target_count\n   def execute(args)\n     return unless Reviewable.where('score > 0').count >= self.class.min_reviewables\n \n-    res = DB.query_single(<<~SQL, target_count: self.class.target_count)\n+    min_priority_threshold = SiteSetting.reviewable_low_priority_threshold\n+\n+    res = DB.query_single(<<~SQL, target_count: self.class.target_count, min_priority: min_priority_threshold)\n       SELECT COALESCE(PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY score), 0.0) AS medium,\n         COALESCE(PERCENTILE_DISC(0.85) WITHIN GROUP (ORDER BY score), 0.0) AS high\n       FROM (\n         SELECT r.score\n         FROM reviewables AS r\n         INNER JOIN reviewable_scores AS rs ON rs.reviewable_id = r.id\n+        WHERE r.score >= :min_priority\n         GROUP BY r.id\n         HAVING COUNT(*) >= :target_count\n       ) AS x\n@@ -32,6 +35,10 @@ def execute(args)\n \n     medium, high = res\n \n-    Reviewable.set_priorities(medium: medium, high: high)\n+    Reviewable.set_priorities(\n+      low: min_priority_threshold,\n+      medium: medium,\n+      high: high\n+    )\n   end\n end"
    },
    {
      "sha": "9b729bdf8d469f4d879a13bb9d0004f9999b0483",
      "filename": "app/models/reviewable.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/60059a7190ff70924d70213bf8970aaf89faeffc/app/models/reviewable.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/60059a7190ff70924d70213bf8970aaf89faeffc/app/models/reviewable.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/reviewable.rb?ref=60059a7190ff70924d70213bf8970aaf89faeffc",
      "patch": "@@ -444,8 +444,6 @@ def self.list_for(\n     to_date: nil,\n     additional_filters: {}\n   )\n-    min_score = Reviewable.min_score_for_priority(priority)\n-\n     order = case sort_order\n             when 'score_asc'\n               'reviewables.score ASC, reviewables.created_at DESC'\n@@ -488,6 +486,8 @@ def self.list_for(\n       )\n     end\n \n+    min_score = Reviewable.min_score_for_priority(priority)\n+\n     if min_score > 0 && status == :pending\n       result = result.where(\"reviewables.score >= ? OR reviewables.force_review\", min_score)\n     elsif min_score > 0"
    },
    {
      "sha": "1340d1defe955540d8782f0b168667cdbe288d08",
      "filename": "config/initializers/014-track-setting-changes.rb",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/60059a7190ff70924d70213bf8970aaf89faeffc/config/initializers/014-track-setting-changes.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/60059a7190ff70924d70213bf8970aaf89faeffc/config/initializers/014-track-setting-changes.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/initializers/014-track-setting-changes.rb?ref=60059a7190ff70924d70213bf8970aaf89faeffc",
      "patch": "@@ -48,4 +48,9 @@\n   if SiteSetting::WATCHED_SETTINGS.include?(name)\n     SiteSetting.reset_cached_settings!\n   end\n+\n+  # Make sure medium and high priority thresholds were calculated.\n+  if name == :reviewable_low_priority_threshold && Reviewable.min_score_for_priority(:medium) > 0\n+    Reviewable.set_priorities(low: new_value)\n+  end\n end"
    },
    {
      "sha": "40213e184232f4fcf2afa4be71b170bdda1c8f55",
      "filename": "config/locales/client.en.yml",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/discourse/discourse/blob/60059a7190ff70924d70213bf8970aaf89faeffc/config/locales/client.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/60059a7190ff70924d70213bf8970aaf89faeffc/config/locales/client.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/client.en.yml?ref=60059a7190ff70924d70213bf8970aaf89faeffc",
      "patch": "@@ -516,7 +516,8 @@ en:\n \n         priority:\n           title: \"Minimum Priority\"\n-          low: \"(any)\"\n+          any: \"(any)\"\n+          low: \"Low\"\n           medium: \"Medium\"\n           high: \"High\"\n "
    },
    {
      "sha": "66589a878ea556cdfe0c626bff60e76e162bc7b2",
      "filename": "config/locales/server.en.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/60059a7190ff70924d70213bf8970aaf89faeffc/config/locales/server.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/60059a7190ff70924d70213bf8970aaf89faeffc/config/locales/server.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/server.en.yml?ref=60059a7190ff70924d70213bf8970aaf89faeffc",
      "patch": "@@ -1956,6 +1956,7 @@ en:\n     reviewable_claiming: \"Does reviewable content need to be claimed before it can be acted upon?\"\n     reviewable_default_topics: \"Show reviewable content grouped by topic by default\"\n     reviewable_default_visibility: \"Don't show reviewable items unless they meet this priority\"\n+    reviewable_low_priority_threshold: \"The priority filter hides reviewable that doesn't meet this score unless the '(any)' filter is used.\"\n     high_trust_flaggers_auto_hide_posts: \"New user posts are automatically hidden after being flagged as spam by a TL3+ user\"\n     cooldown_hours_until_reflag: \"How much time users will have to wait until they are able to reflag a post\"\n "
    },
    {
      "sha": "beacd3a502268a27f2e9419fd26713866d4c1eee",
      "filename": "config/site_settings.yml",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/60059a7190ff70924d70213bf8970aaf89faeffc/config/site_settings.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/60059a7190ff70924d70213bf8970aaf89faeffc/config/site_settings.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/site_settings.yml?ref=60059a7190ff70924d70213bf8970aaf89faeffc",
      "patch": "@@ -1710,6 +1710,10 @@ spam:\n     type: enum\n     default: low\n     enum: \"ReviewablePrioritySetting\"\n+  reviewable_low_priority_threshold:\n+    default: 1\n+    min: 1\n+\n \n rate_limits:\n   unique_posts_mins: 5"
    },
    {
      "sha": "b6e86c161a0890cb18f8e1262e4b82ab303caaf4",
      "filename": "spec/initializers/track_setting_changes_spec.rb",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/discourse/discourse/blob/60059a7190ff70924d70213bf8970aaf89faeffc/spec/initializers/track_setting_changes_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/60059a7190ff70924d70213bf8970aaf89faeffc/spec/initializers/track_setting_changes_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/initializers/track_setting_changes_spec.rb?ref=60059a7190ff70924d70213bf8970aaf89faeffc",
      "patch": "@@ -22,4 +22,27 @@\n       expect(non_approved_user.reload.approved?).to eq(true)\n     end\n   end\n+\n+  describe '#reviewable_low_priority_threshold' do\n+    let(:new_threshold) { 5 }\n+\n+    it 'sets the low priority value' do\n+      medium_threshold = 10\n+      Reviewable.set_priorities(medium: medium_threshold)\n+\n+      expect(Reviewable.min_score_for_priority(:low)).not_to eq(new_threshold)\n+\n+      SiteSetting.reviewable_low_priority_threshold = new_threshold\n+\n+      expect(Reviewable.min_score_for_priority(:low)).to eq(new_threshold)\n+    end\n+\n+    it \"does nothing if the other thresholds were not calculated\" do\n+      Reviewable.set_priorities(medium: 0.0)\n+\n+      SiteSetting.reviewable_low_priority_threshold = new_threshold\n+\n+      expect(Reviewable.min_score_for_priority(:low)).not_to eq(new_threshold)\n+    end\n+  end\n end"
    },
    {
      "sha": "9a5c96d7332064c543df4b7d9eaa66fe8f65b601",
      "filename": "spec/jobs/reviewable_priorities_spec.rb",
      "status": "modified",
      "additions": 40,
      "deletions": 17,
      "changes": 57,
      "blob_url": "https://github.com/discourse/discourse/blob/60059a7190ff70924d70213bf8970aaf89faeffc/spec/jobs/reviewable_priorities_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/60059a7190ff70924d70213bf8970aaf89faeffc/spec/jobs/reviewable_priorities_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/jobs/reviewable_priorities_spec.rb?ref=60059a7190ff70924d70213bf8970aaf89faeffc",
      "patch": "@@ -6,42 +6,65 @@\n \n   it \"needs returns 0s with no existing reviewables\" do\n     Jobs::ReviewablePriorities.new.execute({})\n-    expect(Reviewable.min_score_for_priority(:low)).to eq(0.0)\n-    expect(Reviewable.min_score_for_priority(:medium)).to eq(0.0)\n-    expect(Reviewable.min_score_for_priority(:high)).to eq(0.0)\n+\n+    expect_min_score(:low, 0.0)\n+    expect_min_score(:medium, 0.0)\n+    expect_min_score(:high, 0.0)\n     expect(Reviewable.score_required_to_hide_post).to eq(8.33)\n   end\n \n-  fab!(:u0) { Fabricate(:user) }\n-  fab!(:u1) { Fabricate(:user) }\n+  fab!(:user_0) { Fabricate(:user) }\n+  fab!(:user_1) { Fabricate(:user) }\n \n   def create_reviewables(count)\n-    (1..count).each do |i|\n-      r = Fabricate(:reviewable_flagged_post)\n-      r.add_score(u0, PostActionType.types[:off_topic])\n-      r.add_score(u1, PostActionType.types[:off_topic])\n-      r.update!(score: i)\n+    (1..count).each { |i| create_with_score(i) }\n+  end\n+\n+  def create_with_score(score)\n+    Fabricate(:reviewable_flagged_post).tap do |reviewable|\n+      reviewable.add_score(user_0, PostActionType.types[:off_topic])\n+      reviewable.add_score(user_1, PostActionType.types[:off_topic])\n+      reviewable.update!(score: score)\n     end\n   end\n \n   it \"needs a minimum amount of reviewables before it calculates anything\" do\n     create_reviewables(5)\n+\n     Jobs::ReviewablePriorities.new.execute({})\n-    expect(Reviewable.min_score_for_priority(:low)).to eq(0.0)\n-    expect(Reviewable.min_score_for_priority(:medium)).to eq(0.0)\n-    expect(Reviewable.min_score_for_priority(:high)).to eq(0.0)\n+\n+    expect_min_score(:low, 0.0)\n+    expect_min_score(:medium, 0.0)\n+    expect_min_score(:high, 0.0)\n     expect(Reviewable.score_required_to_hide_post).to eq(8.33)\n   end\n \n   it \"will set priorities based on the maximum score\" do\n     create_reviewables(Jobs::ReviewablePriorities.min_reviewables)\n+\n+    Jobs::ReviewablePriorities.new.execute({})\n+\n+    expect_min_score(:low, SiteSetting.reviewable_low_priority_threshold)\n+    expect_min_score(:medium, 8.0)\n+    expect_min_score('medium', 8.0)\n+    expect_min_score(:high, 13.0)\n+    expect(Reviewable.score_required_to_hide_post).to eq(8.66)\n+  end\n+\n+  it 'ignore negative scores when calculating priorities' do\n+    create_reviewables(Jobs::ReviewablePriorities.min_reviewables)\n+    negative_score = -9\n+    10.times { create_with_score(negative_score) }\n+\n     Jobs::ReviewablePriorities.new.execute({})\n \n-    expect(Reviewable.min_score_for_priority(:low)).to eq(0.0)\n-    expect(Reviewable.min_score_for_priority(:medium)).to eq(8.0)\n-    expect(Reviewable.min_score_for_priority('medium')).to eq(8.0)\n-    expect(Reviewable.min_score_for_priority(:high)).to eq(13.0)\n+    expect_min_score(:low, SiteSetting.reviewable_low_priority_threshold)\n+    expect_min_score(:medium, 8.0)\n+    expect_min_score(:high, 13.0)\n     expect(Reviewable.score_required_to_hide_post).to eq(8.66)\n   end\n \n+  def expect_min_score(priority, score)\n+    expect(Reviewable.min_score_for_priority(priority)).to eq(score)\n+  end\n end"
    }
  ]
}
