{
  "sha": "35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
  "node_id": "C_kwDOAKEu-toAKDM1ZWMyMDc4ZjFkYjQ4NzAzZWIwYWIwOWZjYWMwMDc3ZjRjYzkwZjM",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2022-01-17T19:54:19Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2022-01-17T19:54:19Z"
    },
    "message": "Merge v0.2022.01 into 'release'.",
    "tree": {
      "sha": "61bb3eea85f51989893bc7dc42c4c71838d5c866",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/61bb3eea85f51989893bc7dc42c4c71838d5c866"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
  "html_url": "https://github.com/debiki/talkyard/commit/35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "831d61484d9458e12883cb13bf804b388ff8c1b8",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/831d61484d9458e12883cb13bf804b388ff8c1b8",
      "html_url": "https://github.com/debiki/talkyard/commit/831d61484d9458e12883cb13bf804b388ff8c1b8"
    },
    {
      "sha": "d63eae69fb073987e71d64f89d3ce73d474af031",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/d63eae69fb073987e71d64f89d3ce73d474af031",
      "html_url": "https://github.com/debiki/talkyard/commit/d63eae69fb073987e71d64f89d3ce73d474af031"
    }
  ],
  "stats": {
    "total": 3391,
    "additions": 2459,
    "deletions": 932
  },
  "files": [
    {
      "sha": "b53c986bdb01b8512634c1e317bdf653e0cdcfa1",
      "filename": "appsv/model/lock.sbt",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/model/lock.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/model/lock.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/lock.sbt?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -25,18 +25,18 @@ Compile / dependencyOverrides ++= {\n       \"commons-codec\" % \"commons-codec\" % \"1.15\",\n       \"commons-collections\" % \"commons-collections\" % \"3.2.2\",\n       \"commons-digester\" % \"commons-digester\" % \"2.1\",\n-      \"commons-io\" % \"commons-io\" % \"2.10.0\",\n+      \"commons-io\" % \"commons-io\" % \"2.11.0\",\n       \"commons-logging\" % \"commons-logging\" % \"1.2\",\n       \"commons-validator\" % \"commons-validator\" % \"1.7\",\n       \"javax.activation\" % \"activation\" % \"1.1\",\n       \"nu.validator.htmlparser\" % \"htmlparser\" % \"1.4\",\n       \"org.apache.commons\" % \"commons-email\" % \"1.5\",\n-      \"org.apache.tika\" % \"tika-core\" % \"1.27\",\n+      \"org.apache.tika\" % \"tika-core\" % \"1.28\",\n       \"org.checkerframework\" % \"checker-qual\" % \"3.12.0\",\n       \"org.owasp.encoder\" % \"encoder\" % \"1.2.3\",\n       \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.10\",\n-      \"org.slf4j\" % \"slf4j-api\" % \"1.7.30\"\n+      \"org.slf4j\" % \"slf4j-api\" % \"1.7.32\"\n     )\n   }\n }\n-// LIBRARY_DEPENDENCIES_HASH c199aa400f8d3476ee7eec6914f6ae981575f183\n+// LIBRARY_DEPENDENCIES_HASH 8db44b671ff2939fe04f6a7b402414a1cc917785"
    },
    {
      "sha": "fda3cc0587d476c3afb4acf0b45a05ba42c8aa28",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Page.scala",
      "status": "modified",
      "additions": 28,
      "deletions": 5,
      "changes": 33,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/model/src/main/scala/com/debiki/core/Page.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/model/src/main/scala/com/debiki/core/Page.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/src/main/scala/com/debiki/core/Page.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -495,13 +495,15 @@ sealed abstract class PageType(\n \n   def isChat: Boolean = false\n \n+  def isOpenChat: Bo = isChat && !isPrivateGroupTalk\n+\n   /** If the topic is a discussion between a closed group of people, and visible only to them.\n     */\n   def isPrivateGroupTalk: Boolean = false\n \n   /** If one needs to join the page before one can say anything.\n     */\n-  def isGroupTalk: Boolean = isChat || isPrivateGroupTalk\n+  def isGroupTalk: Boolean = false\n \n   // Also see [WHENFOLLOW].\n   def shallFollowLinks: Boolean = false\n@@ -609,18 +611,37 @@ object PageType {\n   /** For discussions (non-questions) or announcements or blog posts, for example.  */\n   case object Discussion extends PageType(12, staffOnly = false)\n \n-  /** Any forum member who can see this chat (i.e. can see the category\n-    * it is in), can join (add henself to the chat). It's open to join,\n-    * for anyone who can see it. */\n+  /** Like OpenChat, but one doesn't need to join the chat, to post a message.\n+    * Can make sense for a global quick-questions support chat, where people\n+    * come and go, num individuals who has participated grows ~ linearly with time\n+    * (rather than proportional to the size of a team or group in an organization\n+    * — then, OpenChat would be better, because it's nice to see who in the company\n+    * are following the chat (is it?)).\n+    * Can change page type to StandardChat only.\n+    */\n+  // Rename AnyoneChat — anyone may post, without having joined first\n+  // Search for \"Joinless\" and \"open chat\" everywhere (in Typescript files too).\n+  case object JoinlessChat extends PageType(22, staffOnly = false) {\n+    override def isChat = true\n+    // But not: isGroupTalk, because anyone can chat, no need to have joined the chat \"group\".\n+    assert(!isGroupTalk)\n+  }\n+\n+  /** An OpenChat is open to join for anyone who can see it (i.e. can see the category\n+    * it is in).  Can change page type only to Chat.\n+    */\n+  // RENAME to StandardChat?  skip this:  JoinableChat? — one needs to join the chat channel,\n+  // before posting. Maybe rename  page_isOpenChat (.ts) to .. to what?\n   case object OpenChat extends PageType(18, staffOnly = false) {\n     override def isChat = true\n-    override def mayChangeRole = false\n+    override def isGroupTalk = true\n   }\n \n   /** Users added explicitly.  Only visible to the members of this\n     * specific chat. */\n   case object PrivateChat extends PageType(19, staffOnly = false) {\n     override def isChat = true\n+    override def isGroupTalk = true\n     override def isPrivateGroupTalk = true\n     override def canClose = false // lock them instead\n     override def mayChangeRole = false\n@@ -634,6 +655,7 @@ object PageType {\n     * with the \"correct\" permissions on this category has access to the topic. (Not yet impl.)\n     */\n   case object FormalMessage extends PageType(17, staffOnly = false) {\n+    override def isGroupTalk = true\n     override def isPrivateGroupTalk = true\n     override def canClose = false // lock them instead\n     override def mayChangeRole = false\n@@ -663,6 +685,7 @@ object PageType {\n     case MindMap.IntValue => MindMap\n     case Discussion.IntValue => Discussion\n     case FormalMessage.IntValue => FormalMessage\n+    case JoinlessChat.IntValue => JoinlessChat\n     case OpenChat.IntValue => OpenChat\n     case PrivateChat.IntValue => PrivateChat\n     case Form.IntValue => Form"
    },
    {
      "sha": "65ffd8318124479169aefc621ca538ddbd271c9c",
      "filename": "appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -40,6 +40,7 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n \n   def deferConstraints(): Unit\n \n+  // clearStaleStuffInDatabase(staleStuff)\n \n   def loadSite(): Option[Site]\n   def loadSiteInclDetails(): Option[SiteInclDetails]"
    },
    {
      "sha": "11face15cad8d79180f6e93bfbc8550a379694a0",
      "filename": "appsv/model/src/main/scala/com/debiki/core/user.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/model/src/main/scala/com/debiki/core/user.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/model/src/main/scala/com/debiki/core/user.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/src/main/scala/com/debiki/core/user.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -203,7 +203,13 @@ case class NewPasswordUserData(\n   dieIfBad(Validation.checkEmail(email), \"TyE4WKBJ7Z\", identity)\n   // Password: See security.throwErrorIfPasswordTooWeak, instead.\n \n-  require(ssoId.isDefined != password.isDefined, \"TyE5VAKBR02\")\n+  // If SSO is enabled, then, cannot also have password login.\n+  require(ssoId.isEmpty || password.isEmpty, \"TyE5VAKBR02\")\n+\n+  // If no SSO login and no password, then, an email addr is needed, so pat can get\n+  // a password reset link, via that email addr.\n+  require(ssoId.isDefined || password.isDefined || email.nonEmpty, \"TyE5VAKBR04\")\n+\n   require(!firstSeenAt.exists(_.isBefore(createdAt)), \"TyE2WVKF063\")\n }\n "
    },
    {
      "sha": "d61578aa7811903d1132670ad28fe28a624a4e04",
      "filename": "appsv/rdb/lock.sbt",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/rdb/lock.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/rdb/lock.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/rdb/lock.sbt?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -25,19 +25,19 @@ Compile / dependencyOverrides ++= {\n       \"commons-codec\" % \"commons-codec\" % \"1.15\",\n       \"commons-collections\" % \"commons-collections\" % \"3.2.2\",\n       \"commons-digester\" % \"commons-digester\" % \"2.1\",\n-      \"commons-io\" % \"commons-io\" % \"2.10.0\",\n+      \"commons-io\" % \"commons-io\" % \"2.11.0\",\n       \"commons-logging\" % \"commons-logging\" % \"1.2\",\n       \"commons-validator\" % \"commons-validator\" % \"1.7\",\n       \"javax.activation\" % \"activation\" % \"1.1\",\n       \"nu.validator.htmlparser\" % \"htmlparser\" % \"1.4\",\n       \"org.apache.commons\" % \"commons-email\" % \"1.5\",\n-      \"org.apache.tika\" % \"tika-core\" % \"1.27\",\n+      \"org.apache.tika\" % \"tika-core\" % \"1.28\",\n       \"org.checkerframework\" % \"checker-qual\" % \"3.12.0\",\n       \"org.flywaydb\" % \"flyway-core\" % \"5.0.7\",\n       \"org.owasp.encoder\" % \"encoder\" % \"1.2.3\",\n       \"org.postgresql\" % \"postgresql\" % \"42.2.4\",\n       \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.10\",\n-      \"org.slf4j\" % \"slf4j-api\" % \"1.7.30\"\n+      \"org.slf4j\" % \"slf4j-api\" % \"1.7.32\"\n     )\n   }\n }"
    },
    {
      "sha": "63ab3cf381cc3936d257953d9deb73cead63241e",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PagesSiteDaoMixin.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/rdb/src/main/scala/com/debiki/dao/rdb/PagesSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/rdb/src/main/scala/com/debiki/dao/rdb/PagesSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/rdb/src/main/scala/com/debiki/dao/rdb/PagesSiteDaoMixin.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -39,7 +39,7 @@ trait PagesSiteDaoMixin extends SiteTransaction {\n       select g.page_id, ${_PageMetaSelectListItems}\n       from pages3 g\n       where g.site_id = ?\n-        and g.page_role = ${PageType.OpenChat.toInt}\n+        and g.page_role in (${PageType.JoinlessChat.toInt}, ${PageType.OpenChat.toInt})\n         and g.pin_order is not null\n         and g.pin_where = ${PinPageWhere.Globally.toInt}\n       order by g.pin_order desc"
    },
    {
      "sha": "f7d7e7d458802713d26758079eef4c44a370d1c1",
      "filename": "appsv/server/controllers/AdminController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/AdminController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/AdminController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/AdminController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,9 +21,9 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server._\n-import ed.server.http.{ApiRequest, JsonOrFormDataBody}\n-import ed.server.security.EdSecurity\n+import talkyard.server._\n+import talkyard.server.http.{ApiRequest, JsonOrFormDataBody}\n+import talkyard.server.security.EdSecurity\n import javax.inject.Inject\n import play.api.libs.json.Json\n import play.api.mvc.{Action, ControllerComponents, Result}\n@@ -35,8 +35,8 @@ import talkyard.server.authn.LoginReason\n \n /** Loads the admin app page.\n   */\n-class AdminController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class AdminController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n   import context.security.SecureCookie"
    },
    {
      "sha": "52a3215b7a23e48c7f7b71dbdc7cd8b490911cb6",
      "filename": "appsv/server/controllers/ApiSecretsController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ApiSecretsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ApiSecretsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/ApiSecretsController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,17 +20,17 @@ package controllers\n import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import play.api.libs.json._\n import play.api.mvc._\n import scala.collection.immutable\n import talkyard.server.JsX.JsApiSecret\n \n \n-class ApiSecretsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class ApiSecretsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n \n   def listApiSecrets(): Action[Unit] = AdminGetAction { request: GetRequest =>"
    },
    {
      "sha": "6829ae564f6e8d05af8d3a6be6cd1a678fe93784",
      "filename": "appsv/server/controllers/ApiV0Controller.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ApiV0Controller.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ApiV0Controller.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/ApiV0Controller.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,8 +21,8 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.EdHttp._\n import debiki.RateLimits\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import play.api.libs.json._\n import play.api.mvc._\n@@ -48,9 +48,9 @@ import Utils.OkXml\n //\n \n \n-class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext,\n+class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: TyContext,\n   sitePatchController: talkyard.server.sitepatch.SitePatchController)\n-  extends EdController(cc, edContext) {\n+  extends TyController(cc, edContext) {\n \n   private val logger = talkyard.server.TyLogger(\"ApiV0Controller\")\n "
    },
    {
      "sha": "21b2ab47ae4ec1bac7a5ae24be0e1276179e9360",
      "filename": "appsv/server/controllers/Application.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/Application.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/Application.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/Application.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -18,14 +18,14 @@\n package controllers\n \n import com.debiki.core.Prelude.unimplemented\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.api.mvc._\n \n \n \n-class Application @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class Application @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n \n   def mobileAppWebmanifest(): Action[Unit] = GetActionAllowAnyone { _ =>  // [sw]"
    },
    {
      "sha": "c22278beadc7c8c6949e432379af30bd335d68d0",
      "filename": "appsv/server/controllers/CloseCollapseController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/CloseCollapseController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/CloseCollapseController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/CloseCollapseController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,8 +20,8 @@ package controllers\n import com.debiki.core._\n import debiki._\n import debiki.EdHttp.throwForbidden\n-import ed.server.http._\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.http._\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.api._\n import play.api.libs.json.JsValue\n@@ -30,8 +30,8 @@ import play.api.mvc.{Action, ControllerComponents}\n \n /** Closes and collapses trees and posts.\n   */\n-class CloseCollapseController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class CloseCollapseController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n \n   def hidePost: Action[JsValue] = PostJsonAction(RateLimits.CloseCollapsePost, maxBytes = 100) { apiReq =>"
    },
    {
      "sha": "711d9ff951b653bf7ee434347f7c553aeadc7dac",
      "filename": "appsv/server/controllers/CreateSiteController.scala",
      "status": "modified",
      "additions": 138,
      "deletions": 17,
      "changes": 155,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/CreateSiteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/CreateSiteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/CreateSiteController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,19 +21,19 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import org.owasp.encoder.Encode\n import play.api.libs.json._\n-import play.api.mvc.{Action, ControllerComponents}\n+import play.api.mvc.{Action, ControllerComponents, Result => p_Result}\n import scala.util.Try\n \n \n /** Creates new empty sites, for forums, blogs or embedded comments.\n   */\n-class CreateSiteController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class CreateSiteController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.security._\n   import context.globals\n@@ -88,21 +88,83 @@ class CreateSiteController @Inject()(cc: ControllerComponents, edContext: EdCont\n   }\n \n \n+  def apiV0_createSite: Action[JsValue] = PostJsonAction(RateLimits.CreateSite, maxBytes = 500) {\n+        req =>\n+    createSiteImpl(req, isPubApi = true)\n+  }\n+\n+\n   def createSite: Action[JsValue] = PostJsonAction(RateLimits.CreateSite, maxBytes = 500) {\n         request =>\n-    val isTestSiteOkayToDelete = (request.body \\ \"testSiteOkDelete\").asOpt[Boolean].contains(true)\n+    createSiteImpl(request, isPubApi = false)\n+  }\n+\n+\n+  private def createSiteImpl(request: JsonPostRequest, isPubApi: Bo): p_Result = {\n+    import JsonUtils.{parseBo, parseOptBo, parseOptSt, parseSt, asJsObject}\n+\n+    val isTestSiteOkayToDelete = parseOptBo(request.body, \"testSiteOkDelete\") is true\n     throwIfMayNotCreateSite(request, isTestSiteOkayToDelete)\n \n     // In case we're running end-to-end tests:\n     globals.testResetTime()\n \n-    val acceptTermsAndPrivacy = (request.body \\ \"acceptTermsAndPrivacy\").as[Boolean]\n-    val anyLocalHostname = (request.body \\ \"localHostname\").asOpt[String]\n-    val anyEmbeddingSiteAddress = (request.body \\ \"embeddingSiteAddress\").asOpt[String]\n-    val organizationName = (request.body \\ \"organizationName\").as[String].trim\n+    // Note! These fields are part of Ty's public API. Don't change!\n+    val body: JsObject = asJsObject(request.body, \"The request body\")\n+    val acceptTermsAndPrivacy = parseBo(body, \"acceptTermsAndPrivacy\")\n+    val anyLocalHostname = parseOptSt(body, \"localHostname\").trimNoneIfBlank\n+    val anyEmbeddingSiteAddress = parseOptSt(body, \"embeddingSiteAddress\").trimNoneIfBlank\n+    val organizationName = parseSt(body, \"organizationName\").trim\n     val okForbiddenPassword = hasOkForbiddenPassword(request)\n     val okE2ePassword = hasOkE2eTestPassword(request.request)\n \n+    val (\n+        ownerUsername,\n+        ownerFullName,\n+        ownerEmailAddr,\n+        ownerEmailAddrVerified,\n+        newSiteTitle,\n+        createForum,\n+        createEmbComs) =\n+          if (!isPubApi) (None, None, None, false, None, false, false)\n+          else (\n+            // Ty's public API, don't change!\n+            JsonUtils.parseOptSt(body, \"ownerUsername\").trimNoneIfBlank,\n+            JsonUtils.parseOptSt(body, \"ownerFullName\").trimNoneIfBlank,\n+            JsonUtils.parseOptSt(body, \"ownerEmailAddr\").trimNoneIfBlank,\n+            JsonUtils.parseOptBo(body, \"ownerEmailAddrVerified\") getOrElse false,\n+            JsonUtils.parseOptSt(body, \"newSiteTitle\").trimNoneIfBlank,\n+            JsonUtils.parseOptBo(body, \"createForum\") getOrElse false,\n+            JsonUtils.parseOptBo(body, \"createEmbeddedComments\") getOrElse false)\n+\n+    if (createForum || createEmbComs) {\n+      throwForbiddenIf(createForum && createEmbComs, \"TyE4MWE20R\",\n+            \"Don't specify both createForum and createEmbeddedComments\")\n+\n+      throwForbiddenIf(ownerUsername.isEmpty || ownerEmailAddr.isEmpty,\n+            \"TyE4MWE207\", o\"\"\"Please specify the new site owner's username and email\n+              (fields 'ownerUsername' and 'ownerEmailAddr'),\n+              since createForum or createEmbeddedComments is specified\"\"\")\n+    }\n+    else {\n+      throwForbiddenIf(newSiteTitle.isDefined,\n+            \"TyE3MWE202\", o\"\"\"Don't specify new site title, without setting one of\n+              'createForum' or 'createEmbeddedComments' to true\"\"\")\n+\n+      throwForbiddenIf(ownerUsername.isDefined,\n+            \"TyE8ME24SRM\", \"\"\"Creating an owner account, but no forum or emb comments, has not\n+              been tested, isn't allowed. But you can set 'createForum: true', that'll work\"\"\")\n+    }\n+\n+    throwForbiddenIf(ownerUsername.isEmpty && (\n+              ownerEmailAddr.isDefined || ownerFullName.isDefined),\n+          \"TyE6MRW4MJ6\", o\"\"\"Specify owner username too (field 'ownerUsername'),\n+             not just owner email addr or full name\"\"\")\n+\n+    throwForbiddenIf(ownerEmailAddrVerified && ownerEmailAddr.isEmpty,\n+          \"TyE6MRW4MJ7\", o\"\"\"Owner email address missing (field 'ownerEmailAddr'),\n+            but 'ownerEmailAddrVerified' is true\"\"\")\n+\n     val localHostname = anyLocalHostname getOrElse {\n       val embAddr = anyEmbeddingSiteAddress getOrElse {\n         throwForbidden(\"EdE2FGHS0\", \"No local hostname and no embedding address\")\n@@ -125,7 +187,7 @@ class CreateSiteController @Inject()(cc: ControllerComponents, edContext: EdCont\n       // This \"cannot\" happen — JS makes this impossible. So need not be a user friendly message.\n       throwForbidden(\"DwE2JYK8\", \"The local hostname should be at least six chars\")\n \n-    if (ed.server.security.ReservedNames.isSubdomainReserved(localHostname))\n+    if (talkyard.server.security.ReservedNames.isSubdomainReserved(localHostname))\n       throwForbidden(\"TyE5KWW02\", s\"Subdomain is reserved: '$localHostname'; choose another please\")\n \n     // Test sites have a certain prefix, so I know it's okay to delete them. [7UKPwF2]\n@@ -152,11 +214,13 @@ class CreateSiteController @Inject()(cc: ControllerComponents, edContext: EdCont\n           siteName = localHostname, hostnames = Set(hostname))\n     }\n \n-    val goToUrl: String =\n+    val (goToUrl: St, newSite: SiteInclDetails) =\n       try {\n         COULD_OPTIMIZE // maybe can skip lock?\n-        globals.systemDao.writeTxLockAllSites { sysTx =>\n-          globals.systemDao.createAdditionalSite(\n+        var staleStuff: talkyard.server.dao.StaleStuff = null\n+        var newSiteDao: debiki.dao.SiteDao = null\n+        val newSite: SiteInclDetails = globals.systemDao.writeTxLockAllSites { sysTx =>\n+          val newSite = globals.systemDao.createAdditionalSite(\n             anySiteId = None,\n             pubId = Site.newPubId(),\n             name = localHostname,\n@@ -170,8 +234,56 @@ class CreateSiteController @Inject()(cc: ControllerComponents, edContext: EdCont\n             skipMaxSitesCheck = okE2ePassword || okForbiddenPassword,\n             createdFromSiteId = Some(request.siteId),\n             anySysTx = Some(sysTx))\n+\n+          newSiteDao = request.dao.copyWithNewSiteId(newSite.id)\n+\n+          staleStuff = new talkyard.server.dao.StaleStuff()\n+          val newSiteTx = sysTx.siteTransaction(newSite.id)\n+\n+          ownerEmailAddr map { ownerEmail =>\n+            val ownerUserData = NewPasswordUserData.create(\n+                  name = ownerFullName,\n+                  username = ownerUsername.getOrDie(\"TyE70MWQNT24\"),\n+                  email = ownerEmail,\n+                  emailVerifiedAt = if (ownerEmailAddrVerified) Some(newSiteTx.now) else None,\n+                  password = None,  // must set oneself\n+                  createdAt = newSiteTx.now,\n+                  isAdmin = true,\n+                  isOwner = true).get\n+            newSiteDao.createPasswordUserImpl(ownerUserData, request.theBrowserIdData,\n+                  newSiteTx).briefUser\n+          }\n+\n+          val title = newSiteTitle getOrElse \"Your Site\"\n+          val newSiteWho = Who(SystemUserId, request.theBrowserIdData)\n+          if (createForum) {\n+            val options = debiki.dao.CreateForumOptions(\n+                  isForEmbeddedComments = false,\n+                  title = title,\n+                  folder = \"/\",\n+                  // For now, let's always create these default categories.  [NODEFCATS]\n+                  useCategories = true,\n+                  createSupportCategory = true,\n+                  createIdeasCategory = true,\n+                  createSampleTopics = true,\n+                  topicListStyle = com.debiki.core.TopicListLayout.ExcerptBelowTitle)\n+            newSiteDao.createForum2(options, newSiteWho, Some((newSiteTx, staleStuff)))\n+          }\n+\n+          if (createEmbComs) {\n+            newSiteDao.createForum(title = title, folder = \"/\", isForEmbCmts = true, newSiteWho,\n+                  Some((newSiteTx, staleStuff)))\n+          }\n+\n+          staleStuff.clearStaleStuffInDatabase(newSiteTx)\n+          // Also see: [cache_race_counter] but maybe not important here, since the\n+          // site is completely new, no one can interact with it yet.\n+\n+          sysTx.loadSiteInclDetailsById(newSite.id) getOrDie \"TyE2MSEJG0673\"\n         }\n \n+        staleStuff.clearStaleStuffInMemory(newSiteDao)\n+\n         if (!isTestSiteOkayToDelete) {\n           val now = globals.now()\n           globals.config.superAdmin.emailAddresses foreach { superAdminEmailAddress =>\n@@ -192,7 +304,7 @@ class CreateSiteController @Inject()(cc: ControllerComponents, edContext: EdCont\n           }\n         }\n \n-        newSiteOrigin\n+        (newSiteOrigin, newSite)\n       }\n       catch {\n         case DbDao.SiteAlreadyExistsException(site, details) =>\n@@ -231,7 +343,16 @@ class CreateSiteController @Inject()(cc: ControllerComponents, edContext: EdCont\n           }\n       }\n \n-    OkSafeJson(Json.obj(\"nextUrl\" -> goToUrl))\n+    if (isPubApi) {\n+      dieIf(goToUrl != newSiteOrigin, \"TyE6B03MRE7\")\n+      OkSafeJson(Json.obj(\"newSite\" -> Json.obj(\n+        \"id\" -> newSite.id,\n+        \"origin\" -> goToUrl,\n+        )))\n+    }\n+    else {\n+      OkSafeJson(Json.obj(\"nextUrl\" -> goToUrl))\n+    }\n   }\n \n \n@@ -248,7 +369,7 @@ class CreateSiteController @Inject()(cc: ControllerComponents, edContext: EdCont\n \n \n   private def throwIfMayNotCreateSite(request: DebikiRequest[_], isTest: Boolean): Unit = {\n-    import ed.server.Whatever\n+    import talkyard.server.Whatever\n     if (isTest && (\n         globals.anyCreateTestSiteHostname.contains(Whatever) ||\n         globals.anyCreateTestSiteHostname.contains(request.hostname))) {"
    },
    {
      "sha": "743aea5605d7c203596bc32d17e505112c28254b",
      "filename": "appsv/server/controllers/CustomFormController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/CustomFormController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/CustomFormController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/CustomFormController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,7 +21,7 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server._\n+import talkyard.server._\n import talkyard.server.authz.Authz\n import javax.inject.Inject\n import play.api.libs.json.{JsArray, JsValue, Json}\n@@ -31,8 +31,8 @@ import play.api.mvc._\n /** Saves a {{{<form>}}} as either 1) a new reply, in JSON (for the db) + Yaml (for presentation),\n   * or as 2) a new topic — then in title + human friendly body.\n   */\n-class CustomFormController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class CustomFormController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.security.{throwIndistinguishableNotFound, throwNoUnless}\n "
    },
    {
      "sha": "a63d5d8c9b1a9676264e083e7e15772e984eeaaa",
      "filename": "appsv/server/controllers/DebugTestController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/DebugTestController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/DebugTestController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/DebugTestController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -24,9 +24,9 @@ import debiki.{GetEndToEndTestEmail, Nashorn, NumEndToEndTestEmailsSent, RateLim\n import debiki.dao.PagePartsDao\n import debiki.EdHttp._\n import debiki.JsonUtils.{parseOptInt32, parseOptSt}\n-import ed.server.{EdContext, EdController}\n-import ed.server.pop.PagePopularityCalculator\n-import ed.server.pubsub.WebSocketClient\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.pop.PagePopularityCalculator\n+import talkyard.server.pubsub.WebSocketClient\n import java.lang.management.ManagementFactory\n import java.{io => jio, util => ju}\n import javax.inject.Inject\n@@ -46,8 +46,8 @@ import talkyard.server.authn.MinAuthnStrength\n \n /** Intended for troubleshooting, via the browser, and helps running End-to-End tests.\n   */\n-class DebugTestController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) with TyLogging {\n+class DebugTestController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) with TyLogging {\n \n   import context.globals\n   import context.safeActions.ExceptionAction"
    },
    {
      "sha": "496a59eaa03a3a3d361642db3d2820c3698a5db2",
      "filename": "appsv/server/controllers/DraftsController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/DraftsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/DraftsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/DraftsController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,9 +21,9 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import talkyard.server.authz.Authz\n-import ed.server.http._\n+import talkyard.server.http._\n import javax.inject.Inject\n import play.api.libs.json._\n import play.api.mvc._\n@@ -33,8 +33,8 @@ import talkyard.server.authn.MinAuthnStrength\n \n \n \n-class DraftsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class DraftsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n   import context.security.{throwNoUnless, throwIndistinguishableNotFound}"
    },
    {
      "sha": "5c97307ac6935206c16b090d4a33647ddf705c6b",
      "filename": "appsv/server/controllers/EditController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/EditController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/EditController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/EditController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,8 +22,8 @@ import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n import talkyard.server.linkpreviews.{LinkPreviewRenderer, PreviewResult, LinkPreviewProblem}\n-import ed.server.http._\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.http._\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.api.mvc.{Action, ControllerComponents}\n import play.api.libs.json._\n@@ -37,8 +37,8 @@ import org.scalactic.{Good, Or, Bad}\n \n /** Edits pages and posts.\n   */\n-class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.security.{throwNoUnless, throwIndistinguishableNotFound}\n   def execCtx: ExecutionContext = context.executionContext"
    },
    {
      "sha": "2ce51a066f5fbcf4c2cca293afa07823e6dd9af2",
      "filename": "appsv/server/controllers/EmbeddedTopicsController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/EmbeddedTopicsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/EmbeddedTopicsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/EmbeddedTopicsController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,18 +22,18 @@ import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n import debiki.dao.{NotYetCreatedEmbeddedPage, SiteDao}\n-import ed.server.{EdContext, EdController, RenderedPage}\n-import ed.server.http._\n-import ed.server.security.EdSecurity\n+import talkyard.server.{TyContext, TyController, RenderedPage}\n+import talkyard.server.http._\n+import talkyard.server.security.EdSecurity\n import javax.inject.Inject\n import play.api.libs.json.JsValue\n import play.api.mvc.{Action, ControllerComponents}\n \n \n /** Shows embedded comments.\n   */\n-class EmbeddedTopicsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class EmbeddedTopicsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n   import context.security"
    },
    {
      "sha": "fe462b5d7eddaa7fa00d1549efcb4094b288420d",
      "filename": "appsv/server/controllers/FlagController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/FlagController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/FlagController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/FlagController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,7 +20,7 @@ package controllers\n import com.debiki.core._\n import debiki._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.api.mvc._\n import talkyard.server.authz.Authz\n@@ -31,8 +31,8 @@ import talkyard.server.authn.MinAuthnStrength\n \n // Add  flagUser() fn, so can flag user with offensive username?\n //\n-class FlagController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class FlagController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.security._\n "
    },
    {
      "sha": "1dec9383abdf83b3111a967b13370dd86536d46b",
      "filename": "appsv/server/controllers/ForumController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ForumController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ForumController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/ForumController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,22 +22,22 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server.http._\n+import talkyard.server.http._\n import play.api.libs.json._\n import play.api.mvc._\n import scala.collection.{immutable, mutable}\n import scala.collection.mutable.ArrayBuffer\n import scala.util.Try\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import ForumController._\n import talkyard.server.JsX._\n \n \n /** Handles requests related to forums and forum categories.\n  */\n-class ForumController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class ForumController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n \n   def createForum: Action[JsValue] = AdminPostJsonAction(maxBytes = 500) { request =>\n@@ -67,7 +67,7 @@ class ForumController @Inject()(cc: ControllerComponents, edContext: EdContext)\n       createSampleTopics = createSampleTopics,\n       topicListStyle = topicListStyle)\n \n-    request.dao.createForum(options, request.who)\n+    request.dao.createForum2(options, request.who)\n     Ok\n   }\n "
    },
    {
      "sha": "eea6ec9fcf6fb43977d88cc21d46ce883d929f17",
      "filename": "appsv/server/controllers/GroupTalkController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/GroupTalkController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/GroupTalkController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/GroupTalkController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,8 +21,8 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import play.api.mvc._\n import play.api.libs.json.{JsString, JsValue}\n@@ -33,8 +33,8 @@ import play.api.libs.json.{JsString, JsValue}\n   * Read more about how to build a good message handling system here:\n   *   https://meta.discourse.org/t/discourse-as-a-private-email-support-portal/34444\n   */\n-class GroupTalkController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class GroupTalkController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n \n   def sendMessage: Action[JsValue] = PostJsonAction(RateLimits.PostReply, maxBytes = MaxPostSize) {"
    },
    {
      "sha": "18614fc7ce074f3e4cf7147c1304e13205412f9e",
      "filename": "appsv/server/controllers/ImpersonateController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ImpersonateController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ImpersonateController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/ImpersonateController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,8 +20,8 @@ package controllers\n import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import org.scalactic.{Bad, Good, Or}\n import play.api._\n@@ -37,9 +37,9 @@ import scala.concurrent.duration._\n   * And 2) lets staff view the site, in read-only mode, as strangers, guests, normal members,\n   * or member of some group. Only partly implemented (2017-01).\n   */\n-class ImpersonateController @Inject()(cc: ControllerComponents, edContext: EdContext,\n+class ImpersonateController @Inject()(cc: ControllerComponents, edContext: TyContext,\n     LoginController: LoginController)\n-  extends EdController(cc, edContext) {\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n   import context.security._"
    },
    {
      "sha": "a7a7955b249a5666f27be1e54a60bee97b93af92",
      "filename": "appsv/server/controllers/InviteController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/InviteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/InviteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/InviteController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,8 +22,8 @@ import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n import debiki.dao.SiteDao\n-import ed.server._\n-import ed.server.http.DebikiRequest\n+import talkyard.server._\n+import talkyard.server.http.DebikiRequest\n import javax.inject.Inject\n import org.scalactic.{Bad, ErrorMessage, Good, Or}\n import play.api.libs.json._\n@@ -43,8 +43,8 @@ import talkyard.server.JsX.{DateEpochOrNull, JsNumberOrNull, JsUser}\n   * before logging in the next time. And, if it's a Gmail address, that she can login\n   * via Gmail (not yet implemented, not yet possible, though (May 2015)).\n   */\n-class InviteController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class InviteController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n   import context.security.createSessionIdAndXsrfToken"
    },
    {
      "sha": "c0f84ee435ab92b85b0dabc0bdbb9364297473af",
      "filename": "appsv/server/controllers/LegalController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/LegalController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/LegalController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/LegalController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -19,16 +19,16 @@ package controllers\n \n import com.debiki.core.CSP_MISSING\n import debiki._\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.api.mvc.ControllerComponents\n \n \n \n /** Handles per website terms-of-use and privacy-policy pages.\n   */\n-class LegalController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class LegalController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n \n   /** Is visible to anyone, so people can agree to the terms, before they finish creation"
    },
    {
      "sha": "f88067053232020819448da41f99204d631d2034",
      "filename": "appsv/server/controllers/LoginAsGuestController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/LoginAsGuestController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/LoginAsGuestController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/LoginAsGuestController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,18 +21,18 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server.spam.SpamChecker\n-import ed.server._\n-import ed.server.security.EdSecurity\n+import talkyard.server.spam.SpamChecker\n+import talkyard.server._\n+import talkyard.server.security.EdSecurity\n import javax.inject.Inject\n import play.api.mvc._\n import play.api.libs.json._\n \n \n /** Logs in guest users, creates them first, if needed.\n   */\n-class LoginAsGuestController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class LoginAsGuestController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n   import context.security"
    },
    {
      "sha": "44b219a7e9d990707a679613a1758361047b53b8",
      "filename": "appsv/server/controllers/LoginController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/LoginController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/LoginController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/LoginController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,8 +20,8 @@ package controllers\n import com.debiki.core._\n import debiki.{Globals, RateLimits, SiteTpi}\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import play.api.libs.json.{JsNull, JsString, Json}\n import play.api.mvc._\n@@ -32,8 +32,8 @@ import talkyard.server.JsX\n \n /** Logs in and out.\n   */\n-class LoginController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class LoginController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n   import context.security.DiscardingSessionCookies"
    },
    {
      "sha": "87236555767c2c49a9053d052fb68832e9691e0c",
      "filename": "appsv/server/controllers/LoginWithOpenAuthController.scala",
      "status": "modified",
      "additions": 49,
      "deletions": 25,
      "changes": 74,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/LoginWithOpenAuthController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/LoginWithOpenAuthController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/LoginWithOpenAuthController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -17,6 +17,7 @@\n \n package controllers\n \n+import talkyard.server.authn.OAuth2Settings\n import com.auth0.jwt.{JWT => a0_JWT}\n import com.auth0.jwt.interfaces.{Claim => a0_Claim, DecodedJWT => a0_DecodedJWT}\n import com.auth0.jwt.exceptions.{JWTDecodeException => a0_JWTDecodeException}\n@@ -27,31 +28,33 @@ import com.github.scribejava.core.oauth.{OAuth20Service => sj_OAuth20Service, OA\n import com.github.scribejava.core.builder.api.{DefaultApi20 => sj_DefaultApi20}\n import com.github.scribejava.core.model.{OAuth2AccessToken => sj_OAuth2AccessToken, OAuth2AccessTokenErrorResponse => sj_OAuth2AccessTokenErrorResponse, OAuthAsyncRequestCallback => sj_OAuthAsyncReqCallback, OAuthRequest => sj_OAuthRequest, Response => sj_Response, Verb => sj_Verb}\n import com.github.scribejava.apis.openid.{OpenIdOAuth2AccessToken => sj_OpenIdOAuth2AccessToken}\n+/*\n import com.mohiva.play.silhouette\n import com.mohiva.play.silhouette.api.util.HTTPLayer\n import com.mohiva.play.silhouette.api.LoginInfo\n import com.mohiva.play.silhouette.impl.providers.oauth1.services.PlayOAuth1Service\n import com.mohiva.play.silhouette.impl.providers.oauth1.TwitterProvider\n import com.mohiva.play.silhouette.impl.providers.oauth2._\n import com.mohiva.play.silhouette.impl.providers._\n-import ed.server.spam.SpamChecker\n+ */\n+import talkyard.server.spam.SpamChecker\n import debiki._\n import debiki.dao.SiteDao\n import debiki.EdHttp._\n import debiki.JsonUtils._\n import talkyard.server._\n-import ed.server._\n-import ed.server.http._\n-import ed.server.security.EdSecurity\n+import talkyard.server._\n+import talkyard.server.http._\n+import talkyard.server.security.EdSecurity\n import IdentityProvider.{ProtoNameOidc, ProtoNameOAuth2, ProtoNameOAuth10a}\n import org.scalactic.{Bad, ErrorMessage, Good, Or}\n import play.api.libs.json._\n import play.api.mvc._\n import play.api.Configuration\n import talkyard.server.authn.{parseCustomUserInfo, parseOidcIdToken, parseOidcUserInfo, doAuthnServiceRequest, WellKnownIdps}\n-import talkyard.server.{ProdConfFilePath, TyLogging}\n+import talkyard.server.TyLogging\n \n-import scala.concurrent.{ExecutionContext, Future, Promise}\n+import scala.concurrent.{Future, Promise}\n import scala.concurrent.duration._\n import java.io.{IOException => j_IOException}\n import java.util.concurrent.{ExecutionException => j_ExecutionException}\n@@ -161,8 +164,8 @@ private case class OngoingAuthnState(\n   * by looking at a nonce in the URL.  \"Nonce\" means: a secret\n   * 'N'umber used just 'Once'.)\n   */\n-class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) with TyLogging {\n+class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) with TyLogging {\n \n   REFACTOR // MOVE this file to package talkyard.server.authn\n   RENAME // to  AuthnWithExtIdp\n@@ -1129,10 +1132,15 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n   //   Old, with Silhouette   =============================================\n   // ======================================================================\n \n+  CLEAN_UP // some day remove all out commented Silhouette code.\n+  // Look at commit \"Comment out Silhouette server side, remove dependencies\"\n+  // in Ty v2022.01.\n \n+  /*\n   def startAuthentication(providerName: St, returnToUrl: Opt[St]): Action[U] =\n         AsyncGetActionIsLogin { request =>\n-    startAuthenticationImpl(providerName, returnToUrl.trimNoneIfBlank, request)\n+    //startAuthenticationImpl(providerName, returnToUrl.trimNoneIfBlank, request)\n+    ???\n   }\n \n \n@@ -1170,6 +1178,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     }\n     futureResult\n   }\n+  */\n \n \n   def finishAuthentication(providerName: St): Action[U] = AsyncGetActionIsLogin { request =>\n@@ -1191,11 +1200,13 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n             request)\n     }\n     else {\n-      startOrFinishAuthenticationWithSilhouette(providerName, request)\n+      unimpl(\"Silhouette is gone\")\n+      // startOrFinishAuthenticationWithSilhouette(providerName, request)\n     }\n   }\n \n \n+  /*\n   /** Authenticates a user against e.g. Facebook or Google or Twitter, using OAuth 1 or 2.\n     *\n     * Confusingly enough (?), Silhouette uses the same method both for starting\n@@ -1427,6 +1438,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n \n     result\n   }\n+   */\n \n \n \n@@ -1497,8 +1509,9 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n           // account to any existing account.  Twitter uses OAuth 1.0a which Talkyard\n           // won't support once done migrating from Silhouette to ScribeJava. [0_twitter_aun]\n           // Instead, let's wait for Twitter to start supporting OAuth2.\n-          if (authnState.providerAlias == TwitterProvider.ID) {\n-            throwForbiddenIf(globals.config.featureFlags.contains(\"ffTwitterSignUpOff\"),\n+          if (authnState.providerAlias == \"twitter\") { // TwitterProvider.ID) {\n+            CLEAN_UP // rm feature flag from own servers?\n+            throwForbidden(  // If(globals.config.featureFlags.contains(\"ffTwitterSignUpOff\"),\n                   \"TyE0TWITTERACCTS\", o\"\"\"You cannot sign up via Twitter,\n                   until Twitter supports OAuth2. Might take years, sorry.\"\"\")\n           }\n@@ -2036,7 +2049,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n       }\n     }\n \n-    if (ed.server.security.ReservedNames.isUsernameReserved(username)) // [5LKKWA10]\n+    if ( talkyard.server.security.ReservedNames.isUsernameReserved(username)) // [5LKKWA10]\n       throwForbidden(\"EdE4SWWB9\", s\"Username is reserved: '$username'; choose another username\")\n \n     val spamCheckTask = SpamCheckTask(\n@@ -2153,7 +2166,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     (newXsrfToken, xsrfCookie)\n   }\n \n-\n+  /*\n   /** Redirects to and logs in via anyLoginOrigin; then redirects back to this site, with\n     * a session id and xsrf token included in the GET request.\n     */\n@@ -2190,7 +2203,9 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n         SecureCookie(name = ReturnToSiteOriginTokenCookieName, value = s\"$returnToOrigin$Separator$xsrfToken\",\n           httpOnly = false))\n     }\n+    ???\n   }\n+  */\n \n \n   def checkAuthnXsrfToken(xsrfToken: St, request: GetRequest): U = {\n@@ -2218,7 +2233,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     }\n   }\n \n-\n+  /*\n   def continueAtOriginalSite(oauthDetailsCacheKey: St, xsrfToken: St): Action[U] =\n         GetActionIsLogin { request =>\n \n@@ -2235,7 +2250,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n \n     tryLoginOrShowCreateUserDialog(request, authnState)\n       .discardingCookies(DiscardingSecureCookie(ReturnToThisSiteXsrfTokenCookieName))\n-  }\n+  } */\n \n \n   def getIdentityProvider(authnState: OngoingAuthnState, dao: SiteDao)\n@@ -2300,13 +2315,15 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n                   \"picture.type(small)\" +\n               // Tell Facebook to use HTTPS for pictures — so no mixed contents warnings.\n               \"&return_ssl_resources=1\"\n-        facebookProvider().settings\n+        //facebookProvider().settings\n+        getOrThrowDisabled(globals.socialLogin.facebookOAuthSettings)\n \n       case WellKnownIdpImpl.GitHub =>\n         if (!siteSettings.enableGitHubLogin) return Bad(\"GitHub login not enabled\")\n         // We fetch a verified email addr (if any) in an OAuth2 extra request.\n         trustVerifiedEmailAddr = true // [gmail_verifd]\n-        val s = githubProvider().settings\n+        //val s = githubProvider().settings\n+        val s = getOrThrowDisabled(globals.socialLogin.githubOAuthSettings)\n         var url = s.apiURL getOrElse \"https://api.github.com/user\" // keep configurable\n         url = url.trim()\n         // Old uri param, nowadays Basic Auth header instead.\n@@ -2330,24 +2347,26 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n         // Google's OAuth2 impl returns user info in OIDC format. [goog_oidc]\n         userInfoUrl = \"https://www.googleapis.com/oauth2/v3/userinfo\"\n         trustVerifiedEmailAddr = true // [gmail_verifd]\n-        googleProvider().settings\n+        //googleProvider().settings\n+        getOrThrowDisabled(globals.socialLogin.googleOAuthSettings)\n \n       case WellKnownIdpImpl.LinkedIn =>\n         // ScribeJava + LinkedIn example:\n         // https://github.com/scribejava/scribejava/blob/master/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedIn20Example.java\n         if (!siteSettings.enableLinkedInLogin) return Bad(\"LinkedIn login not enabled\")\n         userInfoUrl = \"https://api.linkedin.com/v2/me\"\n-        linkedinProvider().settings\n+        //linkedinProvider().settings\n+        getOrThrowDisabled(globals.socialLogin.linkedInOAuthSettings)\n \n       case WellKnownIdpImpl.Twitter =>\n-        if (!siteSettings.enableTwitterLogin) return Bad(\"Twitter login not enabled\")\n+        //if (!siteSettings.enableTwitterLogin) return Bad(\"Twitter login not enabled\")\n         return Bad(\"Twitter authn not impl via ScribeJava [TyEAUTTWTSCRJVA]\")\n         // Won't work — Twitter uses OAuth1, but Ty only supports OAuth2 via ScribeJava:\n         // [0_twitter_aun]\n         // twitterProvider().settings\n \n       case _ =>\n-        return Bad(s\"IDP not yet impl with ScribeJava: $protoAlias  [TyEGLOBIDPUNSUP]\")\n+        return Bad(s\"IDP not yet supported: $protoAlias  [TyEGLOBIDPUNSUP]\")\n     }\n \n     // The dummy_TyE... below aren't needed — the correct endpoints are\n@@ -2386,7 +2405,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n   }\n \n \n-\n+  /*\n   private val HttpLayer =\n     new silhouette.api.util.PlayHTTPLayer(globals.wsClient)(globals.executionContext)\n \n@@ -2452,7 +2471,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n   private def instagramProvider(): InstagramProvider with CommonSocialProfileBuilder =\n     new InstagramProvider(HttpLayer, socialStateHandler,\n       getOrThrowDisabled(globals.socialLogin.instagramOAuthSettings))\n-\n+  */\n \n   private def getOrThrowDisabled[A](anySettings: A Or ErrorMessage): A = anySettings match {\n     case Good(settings) => settings\n@@ -2470,6 +2489,8 @@ case class ExternalEmailAddr(\n   isPublic: Boolean)\n \n \n+/*\n+\n sealed abstract class Gender\n object Gender {\n   case object Male extends Gender\n@@ -2681,7 +2702,8 @@ class CustomGitHubProvider(\n   }\n }\n \n-\n+*/\n+/*\n \n // Silhouette doesn't yet support LinkedIn API v2 so using this class,\n // temporarily.\n@@ -2814,3 +2836,5 @@ class LinkedInProfileParserApiV2(\n     })(executionContext)\n   }\n }\n+\n+ */"
    },
    {
      "sha": "91fbbbc0ed75cd58f62f249eb158e5a7481860b3",
      "filename": "appsv/server/controllers/LoginWithPasswordController.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/LoginWithPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/LoginWithPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/LoginWithPasswordController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,15 +21,15 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server.spam.SpamChecker\n+import talkyard.server.spam.SpamChecker\n import debiki.dao.SiteDao\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import org.scalactic.{Bad, Good}\n import play.api.mvc._\n import play.api.libs.json._\n-import ed.server.security.{EdSecurity, SidOk}\n+import talkyard.server.security.{EdSecurity, SidOk}\n import org.owasp.encoder.Encode\n import talkyard.server.TyLogging\n import talkyard.server.authn.LoginWithSecretController\n@@ -38,8 +38,8 @@ import talkyard.server.authn.LoginWithSecretController\n \n /** Logs in users via username and password.\n   */\n-class LoginWithPasswordController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) with TyLogging {\n+class LoginWithPasswordController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) with TyLogging {\n \n   RENAME // to  AuthnWithPassword\n \n@@ -193,7 +193,7 @@ class LoginWithPasswordController @Inject()(cc: ControllerComponents, edContext:\n       }\n     }\n \n-    if (ed.server.security.ReservedNames.isUsernameReserved(username))  // [5LKKWA10]\n+    if ( talkyard.server.security.ReservedNames.isUsernameReserved(username))  // [5LKKWA10]\n       throwForbidden(\"EdE5PKW01\", s\"Username is reserved: '$username'; choose another username\")\n \n     val spamCheckTask = SpamCheckTask("
    },
    {
      "sha": "e8b81f54eb0cf8754faaaa8c3ab49c2aa454fb61",
      "filename": "appsv/server/controllers/ModerationController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ModerationController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ModerationController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/ModerationController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,8 +20,8 @@ package controllers   // MOVE this file to  talkyard.server.modn\n import com.debiki.core._\n import debiki.JsonMaker\n import debiki.EdHttp._\n-import ed.server.http.{ApiRequest, GetRequest}\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.http.{ApiRequest, GetRequest}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.api.libs.json._\n import play.api.mvc\n@@ -40,8 +40,8 @@ import talkyard.server.JsX.{JsEmptyObj, JsPageMetaBrief, JsUser}\n   * for guests, when not allowed. (Logging errors = letting people clutter the log files with\n   * crap.)\n   */\n-class ModerationController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class ModerationController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n "
    },
    {
      "sha": "6f63920fce8680f20101aa8bd3ca7918e5c4875f",
      "filename": "appsv/server/controllers/PageController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/PageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/PageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/PageController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,9 +22,9 @@ import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n import debiki.dao.SiteDao\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import talkyard.server.authz.Authz\n-import ed.server.http._\n+import talkyard.server.http._\n import java.{util => ju}\n import javax.inject.Inject\n import play.api.libs.json.{JsArray, JsString, JsValue, Json}\n@@ -34,8 +34,8 @@ import talkyard.server.JsX.JsLongOrNull\n \n /** Creates pages, toggles is-done, deletes them.\n   */\n-class PageController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class PageController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.security.throwNoUnless\n "
    },
    {
      "sha": "cd82b1871021882adec0cbf598217eb8b2b2deaf",
      "filename": "appsv/server/controllers/PageTitleSettingsController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/PageTitleSettingsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/PageTitleSettingsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/PageTitleSettingsController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -23,8 +23,8 @@ import com.debiki.core.PageParts.MaxTitleLength\n import debiki._\n import debiki.EdHttp._\n import debiki.JsonUtils.parseOptInt32\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import talkyard.server.authz.Authz\n import javax.inject.Inject\n import play.api.libs.json._\n@@ -35,8 +35,8 @@ import talkyard.server.JsX.{JsStringOrNull, JsPageMeta}\n /** Edits the page title and changes settings like forum category, URL path,\n   * which layout to use, <html><head><title> and description.\n   */\n-class PageTitleSettingsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class PageTitleSettingsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.security.{throwNoUnless, throwIndistinguishableNotFound}\n "
    },
    {
      "sha": "2326bddafff244a26676da682bf5b0f7d9375354",
      "filename": "appsv/server/controllers/ReplyController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ReplyController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ReplyController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/ReplyController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,9 +21,9 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import talkyard.server.authz.Authz\n-import ed.server.http._\n+import talkyard.server.http._\n import javax.inject.Inject\n import play.api._\n import play.api.libs.json.{JsObject, JsString, JsValue, Json}\n@@ -34,8 +34,8 @@ import talkyard.server.authn.MinAuthnStrength\n /** Saves replies. Lazily creates pages for embedded discussions\n   * — such pages aren't created until the very first reply is posted.\n   */\n-class ReplyController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.security.{throwNoUnless, throwIndistinguishableNotFound}\n "
    },
    {
      "sha": "b60250bb7ebbf920eb4ebf71a780c47b8c20df20",
      "filename": "appsv/server/controllers/ResetPasswordController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ResetPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ResetPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/ResetPasswordController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,8 +21,8 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import play.api.libs.json.{JsString, JsValue}\n import play.api.mvc.{Action, ControllerComponents}\n@@ -31,8 +31,8 @@ import talkyard.server.TyLogging\n \n /** Resets the password of a PasswordIdentity, in case the user forgot it.\n   */\n-class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) with TyLogging {\n+class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) with TyLogging {\n \n   import context.globals\n   import context.security.createSessionIdAndXsrfToken"
    },
    {
      "sha": "c919b8f4aae944ea30d081d2551324b633a4ee2e",
      "filename": "appsv/server/controllers/SearchController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/SearchController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/SearchController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/SearchController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,12 +20,12 @@ package controllers\n import com.debiki.core._\n import debiki.{RateLimits, SiteTpi}\n import talkyard.server.search._\n-import ed.server.http._\n+import talkyard.server.http._\n import debiki.EdHttp._\n import scala.collection.immutable.Seq\n import Prelude._\n import debiki.dao.{SearchQuery, SiteDao}\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.api.libs.json.{JsObject, JsValue}\n import play.api.mvc.{Action, ControllerComponents, Result}\n@@ -36,8 +36,8 @@ import talkyard.server.api.ThingsFoundJson\n /** Full text search, for a whole site, or for a site section, e.g. a single\n   * forum (including all sub forums and topics), a single blog, or wiki.\n   */\n-class SearchController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class SearchController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import SearchController._\n "
    },
    {
      "sha": "c0e1b2cd2f166e4b615b42c613513d2cdae5e651",
      "filename": "appsv/server/controllers/SettingsController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/SettingsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/SettingsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/SettingsController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,8 +21,8 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import talkyard.server.security.PasetoSec\n import javax.inject.Inject\n import play.api.libs.json._\n@@ -35,8 +35,8 @@ import talkyard.server.sitepatch.SitePatchParser\n /** Loads and saves settings, for the whole website, site sections,\n   * and individual pages. In the future probably also for user roles.\n   */\n-class SettingsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class SettingsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n "
    },
    {
      "sha": "898e1537ac00f9dd35e6dd7065fa7f61fe974fcb",
      "filename": "appsv/server/controllers/SiteAssetBundlesController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/SiteAssetBundlesController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/SiteAssetBundlesController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/SiteAssetBundlesController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -19,8 +19,8 @@ package controllers\n \n import com.debiki.core._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import play.api.mvc.{Action, ControllerComponents}\n import scala.util.matching.Regex\n@@ -35,8 +35,8 @@ import SiteAssetBundlesController._\n  * (So whenever the bundle contents changes, the URL also changes — and\n  * we can ask the browser to cache forever. This is asset versioning.)\n  */\n-class SiteAssetBundlesController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class SiteAssetBundlesController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n "
    },
    {
      "sha": "3761660fe1d4899707f2ae4ffa7c3b52a0d93be6",
      "filename": "appsv/server/controllers/SpecialContentController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/SpecialContentController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/SpecialContentController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/SpecialContentController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,8 +21,8 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import play.api.libs.json.{JsString, JsValue, Json}\n import play.api.mvc.{Action, ControllerComponents}\n@@ -33,8 +33,8 @@ import play.api.mvc.{Action, ControllerComponents}\n   * is automatically included on the terms-of-use page.\n   */\n @deprecated(\"now?\", \"come up with something better instead?\")\n-class SpecialContentController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class SpecialContentController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   /** If the special content has not yet been edited, returns a default text (depending\n     * on the page id). For example, if the forum owner hasn't edited the content license"
    },
    {
      "sha": "d35efe7ceddf1c80889b7707c3823aa065d009f4",
      "filename": "appsv/server/controllers/SuperAdminController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/SuperAdminController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/SuperAdminController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/SuperAdminController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,16 +21,16 @@ import com.debiki.core._\n import debiki.SiteTpi\n import debiki.EdHttp._\n import debiki.JsonUtils._\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.{api => p}\n import play.api.libs.json._\n import play.api.mvc.{Action, ControllerComponents}\n import talkyard.server.JsX._\n \n \n-class SuperAdminController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class SuperAdminController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n "
    },
    {
      "sha": "5ff4e37fc26e18c6f1403ce34a7c8f940fc519bc",
      "filename": "appsv/server/controllers/TagsController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/TagsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/TagsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/TagsController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,15 +21,15 @@ import com.debiki.core._\n import com.debiki.core.Prelude.{IfBadAbortReq, IfBadDie, throwUnimpl}\n import debiki.{JsonMaker, RateLimits, SiteTpi}\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import play.api.libs.json._\n import javax.inject.Inject\n import play.api.mvc.{Action, ControllerComponents}\n import talkyard.server.JsX\n \n \n-class TagsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class TagsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n "
    },
    {
      "sha": "c791894e38f7535b8188b12b5e5ee9f5a458cc83",
      "filename": "appsv/server/controllers/UnsubscriptionController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/UnsubscriptionController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/UnsubscriptionController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/UnsubscriptionController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,7 +22,7 @@ import debiki.EdHttp._\n import play.api._\n import play.api.mvc.{Action, ControllerComponents}\n import Prelude._\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import talkyard.server.emails.out.MaxUnsubEmailAgeDays\n \n@@ -37,8 +37,8 @@ import talkyard.server.emails.out.MaxUnsubEmailAgeDays\n  * web sites, in the Referer header. So only use each email id\n  * for one distinct non-repeatable task?\n  */\n-class UnsubscriptionController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class UnsubscriptionController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n   import context.safeActions.ExceptionAction"
    },
    {
      "sha": "06de99edd063539bd78e4935c9de5cf9fc459db2",
      "filename": "appsv/server/controllers/UploadsController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/UploadsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/UploadsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/UploadsController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,8 +22,8 @@ import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n import debiki.dao.UploadsDao._\n-import ed.server.{EdContext, EdController}\n-import ed.server.http.ApiRequest\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http.ApiRequest\n import java.{io => jio}\n import javax.inject.Inject\n import play.api._\n@@ -34,8 +34,8 @@ import play.api.mvc._\n \n /** Uploads files and serves uploaded files.\n   */\n-class UploadsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class UploadsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.safeActions.ExceptionAction\n   import context.globals.config.uploads.maxBytesLargeFile"
    },
    {
      "sha": "e30f64bf479d6a3952fceb196d8825472de703ce",
      "filename": "appsv/server/controllers/UserController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/UserController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/UserController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/UserController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -24,14 +24,14 @@ import debiki._\n import debiki.JsonUtils._\n import debiki.dao.{LoadPostsResult, ReadMoreResult, SiteDao}\n import debiki.EdHttp._\n-import ed.server.http._\n+import talkyard.server.http._\n import java.{util => ju}\n import play.api.mvc\n import play.api.libs.json._\n import play.api.mvc.{Action, ControllerComponents}\n import scala.util.Try\n import debiki.RateLimits.TrackReadingActivity\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import talkyard.server.authz.Authz\n import javax.inject.Inject\n import org.scalactic.{Bad, Good}\n@@ -43,8 +43,8 @@ import talkyard.server.TyLogging\n \n /** Handles requests related to users.\n  */\n-class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) with TyLogging {\n+class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) with TyLogging {\n \n   import context.security.{throwNoUnless, throwIndistinguishableNotFound}\n   import context.globals\n@@ -1086,7 +1086,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     // Could be used to speed up the trust level transition from New to Basic to Member.\n \n     import request.{siteId, dao, theRequester => requester}\n-    import ed.server.{WhenFormat, OptWhenFormat}\n+    import talkyard.server.{WhenFormat, OptWhenFormat}\n \n     throwForbiddenIf(requester.isGuest, \"EdE8LUHE2\", \"Not tracking guests' reading progress\")\n     throwForbiddenIf(requester.isGroup, \"EdE5QFVB5\", \"Not tracking groups' reading progress\")"
    },
    {
      "sha": "3f42b98751a08061660d0692e661c9bfecd1dc45",
      "filename": "appsv/server/controllers/Utils.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/Utils.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/Utils.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/Utils.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -19,7 +19,7 @@ package controllers\n \n import com.debiki.core._\n import debiki.EdHttp._\n-import ed.server.liftweb\n+import talkyard.server.liftweb\n import java.{lang => jl}\n import play.api._\n import play.api.libs.json.{Json, JsValue, JsArray, JsObject}"
    },
    {
      "sha": "104f6d2ebb2f8b73800003960c0db8571e51c46a",
      "filename": "appsv/server/controllers/ViewPageController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ViewPageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/ViewPageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/ViewPageController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,11 +22,11 @@ import com.debiki.core.Prelude._\n import debiki.RateLimits.NoRateLimits\n import debiki._\n import debiki.EdHttp._\n-import ed.server.http._\n+import talkyard.server.http._\n import play.api.libs.json._\n import play.api.mvc._\n import scala.concurrent.Future\n-import ed.server.{EdContext, EdController, RenderedPage}\n+import talkyard.server.{TyContext, TyController, RenderedPage}\n import javax.inject.Inject\n import ViewPageController._\n import debiki.dao.NoUsersOnlineStuff\n@@ -44,8 +44,8 @@ import talkyard.server.JsX.JsObjOrNull\n   * comments that are pending approval — although such unapproved comments\n   * aren't loaded, when other people view the page.\n   */\n-class ViewPageController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class ViewPageController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.security.throwIndistinguishableNotFound\n   import context.globals"
    },
    {
      "sha": "e75f8b2462a828eec443eec2105b7331b440e618",
      "filename": "appsv/server/controllers/VoteController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/VoteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/controllers/VoteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/VoteController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,9 +22,9 @@ import com.debiki.core.Prelude._\n import collection.immutable\n import debiki._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import talkyard.server.authz.Authz\n-import ed.server.http._\n+import talkyard.server.http._\n import javax.inject.Inject\n import play.api.libs.json._\n import play.api.mvc.{Action, ControllerComponents}\n@@ -35,8 +35,8 @@ import talkyard.server.authn.MinAuthnStrength\n \n /** Handles votes, e.g. \"I like this comment\" or \"this comment is faulty\" votes.\n  */\n-class VoteController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class VoteController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.security.throwNoUnless\n "
    },
    {
      "sha": "91d85ac53ce60c21888c80d346a315cf5ba48d0d",
      "filename": "appsv/server/debiki/DebikiHttp.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/DebikiHttp.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/DebikiHttp.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/DebikiHttp.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,7 +21,7 @@ import akka.actor.ActorSystem\n import akka.stream.ActorMaterializer\n import com.debiki.core._\n import com.debiki.core.Prelude._\n-import ed.server.security.EdSecurity\n+import talkyard.server.security.EdSecurity\n import controllers.{LoginController, routes}\n import java.{net => jn}\n import play.api.libs.json.{JsLookupResult, JsValue, JsObject}"
    },
    {
      "sha": "50ac40f388323335db308274bfe0bfb6a6d2215b",
      "filename": "appsv/server/debiki/Globals.scala",
      "status": "modified",
      "additions": 17,
      "deletions": 11,
      "changes": 28,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/Globals.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/Globals.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/Globals.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -26,14 +26,14 @@ import com.debiki.dao.rdb.{Rdb, RdbDaoFactory}\n import com.github.benmanes.caffeine\n import com.zaxxer.hikari.HikariDataSource\n import debiki.EdHttp._\n-import ed.server.spam.{SpamCheckActor, SpamChecker}\n+import talkyard.server.spam.{SpamCheckActor, SpamChecker}\n import debiki.dao._\n import talkyard.server.migrations.ScalaBasedMigrations\n import talkyard.server.search.SearchEngineIndexer\n-import ed.server.notf.NotifierActor\n+import talkyard.server.notf.NotifierActor\n import java.{lang => jl, net => jn}\n import java.util.concurrent.TimeUnit\n-import ed.server.pubsub.{PubSub, PubSubApi, StrangerCounterApi}\n+import talkyard.server.pubsub.{PubSub, PubSubApi, StrangerCounterApi}\n import org.{elasticsearch => es}\n import org.scalactic._\n import play.{api => p}\n@@ -43,8 +43,8 @@ import scala.collection.immutable\n import scala.concurrent.duration._\n import scala.concurrent.{Await, ExecutionContext, Future, TimeoutException}\n import scala.util.matching.Regex\n-import ed.server.EdContext\n-import ed.server.http.GetRequest\n+import talkyard.server.TyContext\n+import talkyard.server.http.GetRequest\n import talkyard.server.jobs.Janitor\n import play.api.http.{HeaderNames => p_HeaderNames}\n import play.api.mvc.RequestHeader\n@@ -106,7 +106,7 @@ class E2eTestCounters {\n \n \n class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name = appCtx\n-                // But then rename EdContext  to ... what?\n+                // But then rename TyContext  to ... what?\n   private val appLoaderContext: p.ApplicationLoader.Context,\n   val executionContext: scala.concurrent.ExecutionContext,\n   val wsClient: WSClient,\n@@ -117,12 +117,12 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n \n   import Globals._\n \n-  def setEdContext(edContext: EdContext): Unit = {\n+  def setEdContext(edContext: TyContext): Unit = {\n     dieIf(this.edContext ne null, \"EdE7UBR10\")\n     this.edContext = edContext\n   }\n \n-  var edContext: EdContext = _\n+  var edContext: TyContext = _\n \n   val e2eTestCounters = new E2eTestCounters\n \n@@ -397,7 +397,8 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n \n \n   object socialLogin {\n-    import com.mohiva.play.silhouette.impl.providers.{OAuth1Settings, OAuth2Settings}\n+    //import com.mohiva.play.silhouette.impl.providers.{OAuth1Settings, OAuth2Settings}\n+    import talkyard.server.authn.OAuth2Settings\n \n     val googleOAuthSettings: OAuth2Settings Or ErrorMessage = goodOrError {\n       def getGoogle(confValName: String) = getConfValOrThrowDisabled(confValName, \"Google\")\n@@ -421,6 +422,7 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n         scope = getStringNoneIfBlank(\"silhouette.facebook.scope\"))\n     }\n \n+    /*\n     val twitterOAuthSettings: OAuth1Settings Or ErrorMessage = goodOrError {\n       def getTwitter(confValName: String) = getConfValOrThrowDisabled(confValName, \"Twitter\")\n       OAuth1Settings(\n@@ -430,7 +432,7 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n         callbackURL = makeRedirectUrl(\"twitter\").get,\n         consumerKey = getTwitter(\"silhouette.twitter.consumerKey\"),\n         consumerSecret = getTwitter(\"silhouette.twitter.consumerSecret\"))\n-    }\n+    } */\n \n     val githubOAuthSettings: OAuth2Settings Or ErrorMessage = goodOrError {\n       def getGitHub(confValName: String) = getConfValOrThrowDisabled(confValName, \"GitHub\")\n@@ -1268,7 +1270,7 @@ class Config(conf: play.api.Configuration) extends TyLogging {\n \n   CLEAN_UP; REMOVE // this + the routes file entry [2KGLCQ4], use UploadsUrlBasePath instead only.\n   val uploadsUrlPath: String = controllers.routes.UploadsController.servePublicFile(\"\").url\n-  require(uploadsUrlPath == ed.server.UploadsUrlBasePath, \"TyE2UKDU0\")\n+  require(uploadsUrlPath == talkyard.server.UploadsUrlBasePath, \"TyE2UKDU0\")\n \n   val maxGroupMentionNotfs: Int =\n     conf.getOptional[Int](MaxGroupMentionNotfsConfValName) getOrElse 25\n@@ -1281,6 +1283,10 @@ class Config(conf: play.api.Configuration) extends TyLogging {\n   val emailWebhooksApiSecret: Opt[St] =\n     conf.getOptional[St](\"talkyard.emailWebhooksApiSecret\").noneIfBlank\n \n+  // FOR NOW\n+  val createSiteApiSecret: Opt[St] =\n+    conf.getOptional[St](\"talkyard.createSiteApiSecret\").noneIfBlank\n+\n   object uploads {\n     TESTS_MISSING // test that these conf vals work properly, by running UploadsDaoSpec twice,\n     // once with default values, once with 2 x higher values (people typically want to increase,"
    },
    {
      "sha": "766c98e54d76904ecda1295fb021645665a810fa",
      "filename": "appsv/server/debiki/Nashorn.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/Nashorn.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/Nashorn.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/Nashorn.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -235,7 +235,7 @@ class Nashorn(\n     val uploadsUrlPrefix =\n       cdnOrigin.getOrElse(\n         embeddedOriginOrEmpty) +\n-          ed.server.UploadsUrlBasePath + pubSiteId + '/'\n+           talkyard.server.UploadsUrlBasePath + pubSiteId + '/'\n \n     // This link preview renderer fetches previews from the database,\n     // link_previews_t, but makes no external requests — cannot do that from inside"
    },
    {
      "sha": "b653aad381b79e308e115243f8e23aaa68e87a00",
      "filename": "appsv/server/debiki/PageTpi.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/PageTpi.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/PageTpi.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/PageTpi.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,7 +20,7 @@ package debiki\n import com.debiki.core._\n import com.debiki.core.Prelude._\n import controllers.{SiteAssetBundlesController, routes}\n-import ed.server.http.{DebikiRequest, GetRequest, PageRequest}\n+import talkyard.server.http.{DebikiRequest, GetRequest, PageRequest}\n import SiteAssetBundlesController.{StylesheetAssetBundleNameRegex, assetBundleFileName}\n import scala.xml.Unparsed\n \n@@ -359,7 +359,7 @@ class SiteTpi protected (\n     s\"$cdnOrServerOrigin/-/fonts/$fileName\"   // sync w Nginx [NGXSTC]\n \n   def uploadsUrlPrefix: St =\n-    cdnOrServerOrigin + ed.server.UploadsUrlBasePath + pubSiteId + '/'\n+    cdnOrServerOrigin + talkyard.server.UploadsUrlBasePath + pubSiteId + '/'\n \n   def pubSiteIdOrigin: St =\n     globals.siteByPubIdOrigin(pubSiteId)"
    },
    {
      "sha": "66ac7dbb50ec972c0a398baa2ceea77c03e8d219",
      "filename": "appsv/server/debiki/RateLimiter.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/RateLimiter.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/RateLimiter.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/RateLimiter.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -24,7 +24,7 @@ import debiki.EdHttp.throwTooManyRequests\n import java.util.concurrent.atomic.AtomicReference\n import RateLimits._\n import talkyard.server.TyLogger\n-import ed.server.security.EdSecurity\n+import talkyard.server.security.EdSecurity\n \n \n trait SomethingToRateLimit {"
    },
    {
      "sha": "56a23097efeda79d080e5f7d55129d0c4ba63113",
      "filename": "appsv/server/debiki/ReactJson.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/ReactJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/ReactJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/ReactJson.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,8 +22,8 @@ import com.debiki.core.Prelude._\n import controllers.ForumController\n import debiki.dao._\n import talkyard.server.authz.{Authz, ForumAuthzContext}\n-import ed.server.http._\n-import ed.server.security.{SidStatus, SidOk}\n+import talkyard.server.http._\n+import talkyard.server.security.{SidStatus, SidOk}\n import java.{lang => jl, util => ju}\n import org.jsoup.Jsoup\n import org.jsoup.nodes.{Element => jsoup_Element}\n@@ -313,7 +313,13 @@ class JsonMaker(dao: SiteDao) {\n \n     // Topic members (e.g. chat channel members) join/leave infrequently, so better cache them\n     // than to lookup them each request.\n-    val pageMemberIds = transaction.loadMessageMembers(page.id)\n+    // However, if a chat was changed from OpenChat to JoinlessChat, in the database,\n+    // there might already be page members (from when it was OpenChat). Then, don't\n+    // load those members — JoinlessChat:s don't have any members. (But keep in the db,\n+    // in case the page type gets changed back.)\n+    val pageMemberIds: Set[UserId] =\n+          if (!page.pageType.isGroupTalk) Set.empty\n+          else transaction.loadMessageMembers(page.id)\n \n     val userIdsToLoad = mut.Set[UserId]()\n     userIdsToLoad ++= pageMemberIds"
    },
    {
      "sha": "5e01a15554418feab0e0c5028af8bc0acbf7fdc7",
      "filename": "appsv/server/debiki/dao/CategoriesDao.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/CategoriesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/CategoriesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/CategoriesDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -755,8 +755,11 @@ trait CategoriesDao {\n \n     tx.insertCategoryMarkSectionPageStale(category)\n \n+    COULD_OPTIMIZE // get as an arg instead?\n+    val site: Site = tx.loadSite getOrDie \"TyE0MWWNJ25\"\n+\n     val titleSourceAndHtml = newCategoryData.makeAboutTopicTitle()\n-    val bodyTextAndHtml = newCategoryData.makeAboutTopicBody(textAndHtmlMaker)\n+    val bodyTextAndHtml = newCategoryData.makeAboutTopicBody(textAndHtmlMakerNoTx(site))\n \n     val aboutPagePath = createPageImpl(\n         PageType.AboutCategory, PageStatus.Published, anyCategoryId = Some(categoryId),"
    },
    {
      "sha": "6a775e60517f6017cb5cb8360b7af8b559bd4730",
      "filename": "appsv/server/debiki/dao/FeedsDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/FeedsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/FeedsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/FeedsDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,7 +21,7 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.EdHttp.{throwForbiddenIf, throwNotFound}\n import debiki.RateLimits\n-import ed.server.http.ApiRequest\n+import talkyard.server.http.ApiRequest\n \n \n /** Generates and caches Atom feeds for recent comments or recent topics."
    },
    {
      "sha": "64c453ff4622203cfd8df2ccb0f7acf59b5804fd",
      "filename": "appsv/server/debiki/dao/ForumDao.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/ForumDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/ForumDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/ForumDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -49,25 +49,26 @@ trait ForumDao {\n   self: SiteDao =>\n \n \n-  def createForum(title: String, folder: String, isForEmbCmts: Boolean, byWho: Who)\n-        : Option[CreateForumResult] = {\n-    createForum(CreateForumOptions(\n+  def createForum(title: St, folder: String, isForEmbCmts: Bo, byWho: Who,\n+          anyTx: Opt[(SiteTx, StaleStuff)] = None): Opt[CreateForumResult] = {\n+    createForum2(CreateForumOptions(\n       isForEmbeddedComments = isForEmbCmts,\n       title = title,\n       folder = folder,\n       useCategories = !isForEmbCmts,\n       createSupportCategory = !isForEmbCmts,\n       createIdeasCategory = !isForEmbCmts,\n       createSampleTopics = !isForEmbCmts,\n-      topicListStyle = TopicListLayout.TitleExcerptSameLine), byWho)\n+      topicListStyle = TopicListLayout.TitleExcerptSameLine), byWho, anyTx)\n   }\n \n \n-  def createForum(options: CreateForumOptions, byWho: Who): Option[CreateForumResult] = {\n+  def createForum2(options: CreateForumOptions, byWho: Who,\n+          anyTx: Opt[(SiteTx, StaleStuff)] = None): Opt[CreateForumResult] = {\n     val titleSourceAndHtml = TitleSourceAndHtml(options.title)\n     val isForEmbCmts = options.isForEmbeddedComments\n \n-    val result = writeTx { (tx, staleStuff) =>\n+    val result = writeTxTryReuse(anyTx) { (tx, staleStuff) =>\n       val oldForumPagePath = tx.checkPagePath(PagePath(\n         siteId = siteId, folder = options.folder, pageId = None, showId = false, pageSlug = \"\"))\n       if (oldForumPagePath.isDefined) {\n@@ -167,7 +168,7 @@ trait ForumDao {\n     }\n \n     // So settings get refreshed (might have been changed above.)\n-    clearDatabaseCacheAndMemCache()\n+    clearDatabaseCacheAndMemCache(anyTx)\n \n     Some(result)\n   }"
    },
    {
      "sha": "ab439fb3a4d5fa61b1c38e42c92794b4e83dccd1",
      "filename": "appsv/server/debiki/dao/MessagesDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/MessagesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/MessagesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/MessagesDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,7 +20,7 @@ package debiki.dao\n import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.EdHttp.throwForbidden\n-import ed.server.pubsub\n+import talkyard.server.pubsub\n import debiki.{TextAndHtml, TitleSourceAndHtml}\n \n "
    },
    {
      "sha": "c07d4e81db0c2cd45cbe46f69f2b0bc1e5fd02ac",
      "filename": "appsv/server/debiki/dao/PagesDao.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/PagesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/PagesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/PagesDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -25,7 +25,7 @@ import com.debiki.core.Participant.SystemUserId\n import debiki._\n import debiki.EdHttp._\n import talkyard.server.authz.Authz\n-import ed.server.spam.SpamChecker\n+import talkyard.server.spam.SpamChecker\n import java.{util => ju}\n import scala.collection.immutable\n import talkyard.server.dao._\n@@ -93,7 +93,11 @@ trait PagesDao {\n \n     if (pageRole.isPrivateGroupTalk) {\n       throwForbidden(\"EsE5FKE0I2\", \"Use MessagesDao instead\")\n-      // Perhaps OpenChat pages should be created via MessagesDao too? [5KTE02Z]\n+      // Perhaps JoinlessChat/OpenChat pages should be created via MessagesDao too? [5KTE02Z]\n+    }\n+\n+    if (pageRole.isChat && byWho.isGuest) {\n+      throwForbidden(\"TyE7KFWY63\", \"Guests may not create chats\")\n     }\n \n     if (pageRole.isGroupTalk && byWho.isGuest) {\n@@ -171,6 +175,8 @@ trait PagesDao {\n     val authorId = byWho.id\n     val authorAndLevels = loadUserAndLevels(byWho, tx)\n     val author = authorAndLevels.user\n+\n+    val site = tx.loadSite() getOrDie \"TyE8MWNP247\"\n     val categoryPath = tx.loadCategoryPathRootLast(anyCategoryId, inclSelfFirst = true)\n     val groupIds = tx.loadGroupIdsMemberIdFirst(author)\n     val permissions = tx.loadPermsOnPages()\n@@ -271,7 +277,7 @@ trait PagesDao {\n \n     val uploadRefs = body.uploadRefs\n     if (Globals.isDevOrTest) {\n-      val uplRefs2 = findUploadRefsInPost(bodyPost)\n+      val uplRefs2 = findUploadRefsInPost(bodyPost, site = Some(site))\n       dieIf(uploadRefs != uplRefs2, \"TyE7RTEGP04\", s\"uploadRefs: $uploadRefs, 2: $uplRefs2\")\n     }\n "
    },
    {
      "sha": "ba43a4900a0d5c4ffc73bcefebdbfbc9b0373c41",
      "filename": "appsv/server/debiki/dao/PostsDao.scala",
      "status": "modified",
      "additions": 17,
      "deletions": 9,
      "changes": 26,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/PostsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/PostsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/PostsDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -24,14 +24,14 @@ import com.debiki.core.PageParts.FirstReplyNr\n import controllers.EditController\n import debiki._\n import debiki.EdHttp._\n-import ed.server.pubsub.StorePatchMessage\n+import talkyard.server.pubsub.StorePatchMessage\n import play.api.libs.json.{JsObject, JsValue}\n import scala.collection.{immutable, mutable}\n import scala.collection.mutable.ArrayBuffer\n import talkyard.server.dao._\n import PostsDao._\n import talkyard.server.authz.Authz\n-import ed.server.spam.SpamChecker\n+import talkyard.server.spam.SpamChecker\n import org.scalactic.{Bad, Good, One, Or}\n import math.max\n \n@@ -215,7 +215,8 @@ trait PostsDao {\n     // from the new textAndHtml only. [new_upl_refs]\n     val uploadRefs = textAndHtml.uploadRefs\n     if (Globals.isDevOrTest) {\n-      val uplRefs2 = findUploadRefsInPost(newPost)\n+      val site = tx.loadSite getOrDie \"TyE602MREJF\"\n+      val uplRefs2 = findUploadRefsInPost(newPost, Some(site))\n       dieIf(uploadRefs != uplRefs2, \"TyE503SKH5\", s\"uploadRefs: $uploadRefs, 2: $uplRefs2\")\n     }\n \n@@ -392,7 +393,7 @@ trait PostsDao {\n     // COULD add a users3 table status field instead, and update it on write, which says\n     // if the user has too many pending comments / edits. Then could thow that status\n     // client side, withouth having to run the below queries again and again.\n-    // Also, would be simpler to move all this logic to ed.server.auth.Authz.\n+    // Also, would be simpler to move all this logic to talkyard.server.auth.Authz.\n \n     // Don't review, but auto-approve, user-to-user messages. Staff aren't supposed to read\n     // those, unless the receiver reports the message.\n@@ -578,9 +579,14 @@ trait PostsDao {\n       if (!page.pageType.isChat)\n         throwForbidden(\"EsE5F0WJ2\", s\"Page $pageId is not a chat page; cannot insert chat message\")\n \n-      val pageMemberIds = tx.loadMessageMembers(pageId)\n-      if (!pageMemberIds.contains(authorId))\n-        throwForbidden(\"EsE4UGY7\", \"You are not a member of this chat channel\")\n+      if (page.pageType == PageType.JoinlessChat) {\n+        // Noop. No need to have joined the chat channel, to start chatting.\n+      }\n+      else {\n+        val pageMemberIds = tx.loadMessageMembers(pageId)\n+        if (!pageMemberIds.contains(authorId))\n+          throwForbidden(\"EsE4UGY7\", \"You are not a member of this chat channel\")\n+      }\n \n       // Try to append to the last message, instead of creating a new one. That looks\n       // better in the browser (fewer avatars & sent-by info), + we'll save disk and\n@@ -681,7 +687,8 @@ trait PostsDao {\n     // New post, all refs in textAndHtml regardless of if approved or not. [new_upl_refs]\n     val uploadRefs: Set[UploadRef] = textAndHtml.uploadRefs\n     if (Globals.isDevOrTest) {\n-      val uplRefs2: Set[UploadRef] = findUploadRefsInPost(newPost)\n+      val site = tx.loadSite getOrDie \"TyE602MREJ7\"\n+      val uplRefs2: Set[UploadRef] = findUploadRefsInPost(newPost, Some(site))\n       dieIf(uploadRefs != uplRefs2, \"TyE38RDHD4\", s\"uploadRefs: $uploadRefs, 2: $uplRefs2\")\n     }\n \n@@ -1420,7 +1427,8 @@ trait PostsDao {\n         val refs = approvedRefs ++ unapprRefs\n \n         if (Globals.isDevOrTest) {\n-          val r2 = findUploadRefsInPost(editedPost) // [nashorn_in_tx]\n+          val site = tx.loadSite getOrDie \"TyE602MREJ7\"\n+          val r2 = findUploadRefsInPost(editedPost, Some(site)) // [nashorn_in_tx]\n           dieIf(refs != r2, \"TyE306KSM233\", s\"refs: $refs, r2: $r2\")\n         }\n "
    },
    {
      "sha": "e420ee2f4e999cf245557fbaab4bdc2c46da862e",
      "filename": "appsv/server/debiki/dao/RenderedPageHtmlDao.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/RenderedPageHtmlDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/RenderedPageHtmlDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/RenderedPageHtmlDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,9 +21,9 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp.{throwInternalError, throwNotFound}\n-import ed.server.http.PageRequest\n+import talkyard.server.http.PageRequest\n import RenderedPageHtmlDao._\n-import ed.server.RenderedPage\n+import talkyard.server.RenderedPage\n import java.{util => ju}\n \n "
    },
    {
      "sha": "d97876b708e52d29ffeabb6394088eacc707d749",
      "filename": "appsv/server/debiki/dao/SettingsDao.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/SettingsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/SettingsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/SettingsDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -132,15 +132,15 @@ trait SettingsDao {\n         }\n       }\n \n-      import com.mohiva.play.silhouette.impl.providers\n-      if (turnsOff(_.enableGoogleLogin)) throwIfLogsInWith(providers.oauth2.GoogleProvider.ID)\n-      if (turnsOff(_.enableFacebookLogin)) throwIfLogsInWith(providers.oauth2.FacebookProvider.ID)\n-      if (turnsOff(_.enableTwitterLogin)) throwIfLogsInWith(providers.oauth1.TwitterProvider.ID)\n-      if (turnsOff(_.enableGitHubLogin)) throwIfLogsInWith(providers.oauth2.GitHubProvider.ID)\n-      if (turnsOff(_.enableGitLabLogin)) throwIfLogsInWith(providers.oauth2.GitLabProvider.ID)\n-      if (turnsOff(_.enableLinkedInLogin)) throwIfLogsInWith(providers.oauth2.LinkedInProvider.ID)\n-      if (turnsOff(_.enableVkLogin)) throwIfLogsInWith(providers.oauth2.VKProvider.ID)\n-      if (turnsOff(_.enableInstagramLogin)) throwIfLogsInWith(providers.oauth2.InstagramProvider.ID)\n+      //import com.mohiva.play.silhouette.impl.providers\n+      if (turnsOff(_.enableGoogleLogin)) throwIfLogsInWith(\"google\") // providers.oauth2.GoogleProvider.ID)\n+      if (turnsOff(_.enableFacebookLogin)) throwIfLogsInWith(\"facebook\") // providers.oauth2.FacebookProvider.ID)\n+      if (turnsOff(_.enableTwitterLogin)) throwIfLogsInWith(\"twitter\") // providers.oauth1.TwitterProvider.ID)\n+      if (turnsOff(_.enableGitHubLogin)) throwIfLogsInWith(\"github\") // providers.oauth2.GitHubProvider.ID)\n+      if (turnsOff(_.enableGitLabLogin)) throwIfLogsInWith(\"gitlab\") // providers.oauth2.GitLabProvider.ID)\n+      if (turnsOff(_.enableLinkedInLogin)) throwIfLogsInWith(\"linkedin\") // providers.oauth2.LinkedInProvider.ID)\n+      if (turnsOff(_.enableVkLogin)) throwIfLogsInWith(\"vk\") // providers.oauth2.VKProvider.ID)\n+      if (turnsOff(_.enableInstagramLogin)) throwIfLogsInWith(\"instagram\") // providers.oauth2.InstagramProvider.ID)\n \n       // Don't restrict login to only custom OIDC, unless custom IDPs enabled:\n       if (turnsOn(_.useOnlyCustomIdps)) {"
    },
    {
      "sha": "af88c2e089eb89d5b8e77bb5dc59b2a6b9fc99b3",
      "filename": "appsv/server/debiki/dao/SiteDao.scala",
      "status": "modified",
      "additions": 27,
      "deletions": 32,
      "changes": 59,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/SiteDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/SiteDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/SiteDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -28,11 +28,11 @@ import talkyard.server.dao._\n import talkyard.server.{PostRendererSettings, TyLogging}\n import scala.collection.immutable\n import scala.collection.mutable\n-import ed.server.EdContext\n+import talkyard.server.TyContext\n import talkyard.server.authz.MayMaybe\n-import ed.server.notf.NotificationGenerator\n-import ed.server.pop.PagePopularityDao\n-import ed.server.pubsub.{PubSubApi, StrangerCounterApi}\n+import talkyard.server.notf.NotificationGenerator\n+import talkyard.server.pop.PagePopularityDao\n+import talkyard.server.pubsub.{PubSubApi, StrangerCounterApi}\n import talkyard.server.summaryemails.SummaryEmailsDao\n import org.scalactic.{ErrorMessage, Or}\n import java.util.concurrent.TimeUnit\n@@ -62,7 +62,7 @@ case object UseCache extends CacheOrTx { def anyTx: Opt[SiteTx] = None}\n \n \n class SiteDaoFactory (\n-  private val context: EdContext,\n+  private val context: TyContext,\n   private val _dbDaoFactory: DbDaoFactory,\n   private val redisClient: RedisClient,\n   private val cache: DaoMemCache,\n@@ -91,6 +91,7 @@ trait ReadOnlySiteDao {\n   def now(): When\n \n   def nashorn: Nashorn\n+  @deprecated // can create new tx\n   def textAndHtmlMaker: TextAndHtmlMaker\n   def makePostRenderSettings(pageType: PageType): PostRendererSettings\n }\n@@ -111,7 +112,7 @@ trait ReadOnlySiteDao {\n   */\n class SiteDao(\n   val siteId: SiteId,\n-  val context: EdContext,\n+  val context: TyContext,\n   private val dbDaoFactory: DbDaoFactory,\n   private val redisClient: RedisClient,\n   private val cache: DaoMemCache,\n@@ -138,7 +139,7 @@ class SiteDao(\n   with PostsDao\n   with TagsDao\n   with SearchDao\n-  with ed.server.spam.QuickSpamCheckDao\n+  with talkyard.server.spam.QuickSpamCheckDao\n   with UploadsDao\n   with UserDao\n   with MessagesDao\n@@ -158,6 +159,11 @@ class SiteDao(\n \n   protected lazy val searchEngine = new SearchEngine(siteId, elasticSearchClient)\n \n+  def copyWithNewSiteId(siteId: SiteId): SiteDao =\n+    new SiteDao(\n+          siteId = siteId, context, dbDaoFactory, redisClient, cache,\n+          usersOnlineCache, elasticSearchClient, config)\n+\n   def globals: debiki.Globals = context.globals\n   def jsonMaker = new JsonMaker(this)\n \n@@ -173,7 +179,9 @@ class SiteDao(\n   // which automatically knows the right embeddedOriginOrEmpty and followLinks etc,\n   // so won't need to always use makePostRenderSettings() below before\n   // using textAndHtmlMaker?\n+  @deprecated // might create a new tx\n   def textAndHtmlMaker = new TextAndHtmlMaker(theSite(), context.nashorn)\n+  def textAndHtmlMakerNoTx(site: Site) = new TextAndHtmlMaker(site, context.nashorn)\n \n   def makePostRenderSettings(pageType: PageType): PostRendererSettings = {\n     val embeddedOriginOrEmpty =\n@@ -241,51 +249,38 @@ class SiteDao(\n   }\n \n \n-  def writeTx[R](retry: Boolean = false, allowOverQuota: Boolean = false)(\n+  def writeTx[R](retry: Bo = false, allowOverQuota: Bo = false)(\n           // maybe incl  lims = getMaxLimits(UseTx(tx))  too? Always needed, right?\n           // And a class  TxCtx(tx, maxLimits, rateLimits, staleStuff) ?\n           fn: (SiteTransaction, StaleStuff) => R): R = {\n     dieIf(retry, \"TyE403KSDH46\", \"writeTx(retry = true) not yet impl\")\n \n     val staleStuff = new StaleStuff()\n-    val result: R = readWriteTransaction(tx => {\n+\n+    val runFnUpdStaleStuff = (tx: SiteTx) => {\n       val result = fn(tx, staleStuff)\n \n \n       // ----- Refresh database cache\n \n-      if (staleStuff.areAllPagesStale) {\n-        tx.bumpSiteVersion()\n-      }\n-      else {\n-        // Refresh database page cache:\n-        tx.markPagesHtmlStale(staleStuff.stalePageIdsInDb)\n-      }\n+      staleStuff.clearStaleStuffInDatabase(tx)\n \n       // [cache_race_counter] Maybe bump mem cache contents counter here,\n       // just before this tx ends and the mem cache thus becomes stale?\n       // Set it to an odd value — an anything read from the cache,\n       // when the counter was odd, must not be cached.\n \n       result\n-    }, allowOverQuota)\n+    }\n+\n+    val result: R =\n+          readWriteTransaction(runFnUpdStaleStuff, allowOverQuota)\n \n \n     // ----- Refresh in-memory cache   [rm_cache_listeners]\n \n-    if (staleStuff.areAllPagesStale) {\n-      // Currently then need to: (although clears unnecessarily much)\n-      memCache.clearThisSite()\n-    }\n-    else if (staleStuff.nonEmpty) {\n-      staleStuff.staleParticipantIdsInMem foreach { ppId =>\n-        removeUserFromMemCache(ppId)\n-      }\n-      staleStuff.stalePageIdsInMem foreach { pageId =>\n-        refreshPageInMemCache(pageId)\n-      }\n-      uncacheLinks(staleStuff)\n-    }\n+    staleStuff.clearStaleStuffInMemory(this)\n+\n \n     // [cache_race_counter] Maybe somehow \"mark as done\" the bumping of the\n     // mem cache contents counter?\n@@ -344,8 +339,8 @@ class SiteDao(\n     pageIds.foreach(refreshPageInMemCache)\n   }\n \n-  def clearDatabaseCacheAndMemCache(): U = {\n-    readWriteTransaction(_.bumpSiteVersion())\n+  def clearDatabaseCacheAndMemCache(anyTx: Opt[(SiteTx, StaleStuff)] = None): U = {\n+    writeTxTryReuse(anyTx)((tx, _) => tx.bumpSiteVersion())\n     memCache.clearThisSite()\n   }\n "
    },
    {
      "sha": "230dee26ca5277a32daed8128ea3f945a6dce781",
      "filename": "appsv/server/debiki/dao/SystemDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/SystemDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/SystemDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/SystemDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -26,7 +26,7 @@ import scala.collection.{immutable, mutable}\n import SystemDao._\n import debiki.{ForgetEndToEndTestEmails, Globals}\n import debiki.EdHttp.{throwNotFound, throwBadReqIf, throwForbiddenIf}\n-import ed.server.spam.ClearCheckingSpamNowCache\n+import talkyard.server.spam.ClearCheckingSpamNowCache\n import java.util.concurrent.TimeUnit\n import play.api.libs.json.JsObject\n import talkyard.server.JsX"
    },
    {
      "sha": "7bb798e7bedffaabc30deacaa32a5260e0cbf988",
      "filename": "appsv/server/debiki/dao/TagsDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/TagsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/TagsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/TagsDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,7 +20,7 @@ package debiki.dao\n import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.EdHttp.{throwForbidden, throwForbiddenIf}\n-import ed.server.pubsub.StorePatchMessage\n+import talkyard.server.pubsub.StorePatchMessage\n import play.api.libs.json.JsObject\n import TagsDao._\n import scala.util.matching.Regex"
    },
    {
      "sha": "8990e2dd8fa39b5a1e94aa12ae230f1f0cc46795",
      "filename": "appsv/server/debiki/dao/UploadsDao.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/UploadsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/UploadsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/UploadsDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,7 +22,7 @@ import com.debiki.core.Prelude._\n import com.google.{common => guava}\n import debiki.{Globals, ImageUtils, TextAndHtmlMaker}\n import debiki.EdHttp._\n-import ed.server.UploadsUrlBasePath\n+import talkyard.server.UploadsUrlBasePath\n import java.{io => jio, lang => jl, util => ju}\n import java.awt.image.BufferedImage\n import java.nio.{file => jf}\n@@ -224,15 +224,15 @@ trait UploadsDao {\n \n   /** Do as part of  [[debiki.TextAndHtmlMaker.findLinksEtc]]  ? */\n   @deprecated(\"now\")\n-  def findUploadRefsInPost(post: Post): Set[UploadRef] = {\n-    val pubId = thePubSiteId()\n+  def findUploadRefsInPost(post: Post, site: Opt[Site] = None): Set[UploadRef] = {\n+    val pubId = site.map(_.pubId) getOrElse thePubSiteId()\n     val approvedRefs = post.approvedHtmlSanitized.map(\n           h => findUploadRefsInHtml(h, pubId)) getOrElse Set.empty\n     val currentRefs =\n       if (post.nr == PageParts.TitleNr) Nil\n       else {\n         val renderResult = context.nashorn.renderAndSanitizeCommonMark(  // [nashorn_in_tx]\n-              post.currentSource, theSite(),\n+              post.currentSource, site getOrElse theSite(),\n               embeddedOriginOrEmpty = \"\",\n               allowClassIdDataAttrs = false, followLinks = false)\n         findUploadRefsInHtml(renderResult.safeHtml, pubId)"
    },
    {
      "sha": "bf9563f9c3fd081529a40293ab368de2bc6ae838",
      "filename": "appsv/server/debiki/dao/UserDao.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/UserDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/dao/UserDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/UserDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,7 +20,7 @@ package debiki.dao\n import com.debiki.core._\n import debiki.EdHttp._\n import debiki.JsonMaker.NotfsAndCounts\n-import ed.server.security.{BrowserId, ReservedNames, SidStatus}\n+import talkyard.server.security.{BrowserId, ReservedNames, SidStatus}\n import java.{util => ju}\n import play.api.libs.json.{JsArray, JsObject}\n import play.{api => p}\n@@ -635,7 +635,7 @@ trait UserDao {\n   }\n \n \n-  private def createPasswordUserImpl(userData: NewPasswordUserData, browserIdData: BrowserIdData,\n+  def createPasswordUserImpl(userData: NewPasswordUserData, browserIdData: BrowserIdData,\n         tx: SiteTransaction): UserInclDetails = {\n     val now = userData.createdAt\n     val userId = tx.nextMemberId"
    },
    {
      "sha": "2302547e3df44a06f6d24754d83fa350fb0a207a",
      "filename": "appsv/server/debiki/settings.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/settings.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/debiki/settings.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/settings.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -397,7 +397,7 @@ object AllSettings {\n     val allowGuestLogin = false\n     val enableGoogleLogin: Boolean = globals.socialLogin.googleOAuthSettings.isGood\n     val enableFacebookLogin: Boolean = globals.socialLogin.facebookOAuthSettings.isGood\n-    val enableTwitterLogin: Boolean = globals.socialLogin.twitterOAuthSettings.isGood\n+    val enableTwitterLogin: Boolean = false // globals.socialLogin.twitterOAuthSettings.isGood\n     val enableGitHubLogin: Boolean = globals.socialLogin.githubOAuthSettings.isGood\n     val enableGitLabLogin: Boolean = globals.socialLogin.gitlabOAuthSettings.isGood\n     val enableLinkedInLogin: Boolean = globals.socialLogin.linkedInOAuthSettings.isGood"
    },
    {
      "sha": "fe71cde9f06309e8e853796c35b2546ad524e634",
      "filename": "appsv/server/ed/server/http/package.scala",
      "status": "removed",
      "additions": 0,
      "deletions": 70,
      "changes": 70,
      "blob_url": "https://github.com/debiki/talkyard/blob/831d61484d9458e12883cb13bf804b388ff8c1b8/appsv/server/ed/server/http/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/831d61484d9458e12883cb13bf804b388ff8c1b8/appsv/server/ed/server/http/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/ed/server/http/package.scala?ref=831d61484d9458e12883cb13bf804b388ff8c1b8",
      "patch": "@@ -1,70 +0,0 @@\n-/**\n- * Copyright (c) 2013-2015 Kaj Magnus Lindberg\n- *\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as\n- * published by the Free Software Foundation, either version 3 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-\n-package ed.server\n-\n-import com.debiki.core._\n-import debiki.dao.SiteDao\n-import ed.server.security.{BrowserId, SidStatus, XsrfOk}\n-import play.api.libs.json.{JsValue, JsArray, JsObject}\n-import play.api.mvc._\n-\n-\n-package object http {\n-\n-  def OkSafeJson(json: JsObject): Result =\n-    _root_.controllers.Utils.OkApiJson(json)\n-\n-\n-  case class AuthnReqHeaderImpl(\n-    site: SiteBrief,\n-    anyTySession: Opt[TySession],\n-    sid: SidStatus,\n-    xsrfToken: XsrfOk,\n-    browserId: Opt[BrowserId],\n-    user: Opt[Pat],\n-    dao: SiteDao,\n-    request: RequestHeader) extends AuthnReqHeader {\n-  }\n-\n-\n-  case class ApiRequest[A](   // RENAME to AuthnReqImpl\n-    site: SiteBrief,\n-    anyTySession: Opt[TySession],\n-    sid: SidStatus,\n-    xsrfToken: XsrfOk,\n-    browserId: Opt[BrowserId],\n-    user: Opt[Pat],\n-    dao: SiteDao,\n-    request: Request[A]) extends DebikiRequest[A] {\n-  }\n-\n-  /** A request with no post data. */\n-  type GetRequest = ApiRequest[Unit]\n-\n-  type PageGetRequest = PageRequest[Unit]\n-\n-  /** A request with form data.\n-    *\n-    * @deprecated Use ApiRequest[JsonOrFormDataBody] instead — no, use JsonPostRequest.\n-    */\n-  type FormDataPostRequest = ApiRequest[Map[String, Seq[String]]]\n-\n-  type JsonPostRequest = ApiRequest[JsValue]\n-\n-\n-}"
    },
    {
      "sha": "004457d8ecf74b795b1b28eb8852c35263c4733c",
      "filename": "appsv/server/ed/server/package.scala",
      "status": "removed",
      "additions": 0,
      "deletions": 61,
      "changes": 61,
      "blob_url": "https://github.com/debiki/talkyard/blob/831d61484d9458e12883cb13bf804b388ff8c1b8/appsv/server/ed/server/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/831d61484d9458e12883cb13bf804b388ff8c1b8/appsv/server/ed/server/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/ed/server/package.scala?ref=831d61484d9458e12883cb13bf804b388ff8c1b8",
      "patch": "@@ -1,61 +0,0 @@\n-/**\n- * Copyright (c) 2016 Kaj Magnus Lindberg\n- *\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as\n- * published by the Free Software Foundation, either version 3 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-\n-package ed\n-\n-import com.debiki.core._\n-import play.api.libs.json._\n-\n-\n-package object server {\n-\n-  val Whatever = \"*\"\n-\n-  val UploadsUrlBasePath = \"/-/u/\"\n-\n-\n-  /** @param html Html for the whole page.\n-    * @param unapprovedPostAuthorIds Ids of authors who have posted stuff that hasn't yet been\n-    *   approved. If one of these authors views the page, hens unapproved posts should\n-    *   be loaded too, so hen can edit them. (Normally, unapproved posts aren't loaded.)\n-    */\n-  case class RenderedPage(\n-    html: String,\n-    reactStoreJsonString: String,\n-    unapprovedPostAuthorIds: Set[UserId])\n-\n-\n-  implicit object WhenFormat extends Format[When] {\n-    def reads(json: JsValue): JsResult[When] = JsSuccess(When.fromMillis(json.as[Long]))\n-    def writes(when: When): JsValue = JsNumber(when.millis)\n-  }\n-\n-\n-  implicit object OptWhenFormat extends Format[Option[When]] {\n-    def reads(json: JsValue): JsResult[Option[When]] =\n-      if (json == JsNull) JsSuccess(None)\n-      else JsSuccess(Some(When.fromMillis(json.as[Long])))\n-\n-    def writes(when: Option[When]): JsValue = when match {\n-      case None => JsNull\n-      case Some(w) => JsNumber(w.millis)\n-    }\n-  }\n-\n-\n-}\n-"
    },
    {
      "sha": "e9448ebbbf12a8af03fca2ac97e5e4ace0a0886b",
      "filename": "appsv/server/talkyard/server/TyAppLoader.scala",
      "status": "renamed",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/TyAppLoader.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/TyAppLoader.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/TyAppLoader.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -1,9 +1,9 @@\n-package ed.server\n+package talkyard.server\n \n import com.debiki.core._\n import debiki.{Globals, RateLimiter, Nashorn}\n-import ed.server.http.{PlainApiActions, SafeActions}\n-import ed.server.security.EdSecurity\n+import talkyard.server.http.{PlainApiActions, SafeActions}\n+import talkyard.server.security.EdSecurity\n import play.api._\n import play.api.http.FileMimeTypes\n import play.api.libs.ws.ahc.AhcWSComponents\n@@ -13,7 +13,7 @@ import scala.concurrent.{ExecutionContext, Future}\n import talkyard.server.TyLogger\n \n \n-class EdAppLoader extends ApplicationLoader {\n+class TyAppLoader extends ApplicationLoader {\n \n   private val logger = TyLogger(\"TyAppLoader\")\n \n@@ -26,14 +26,14 @@ class EdAppLoader extends ApplicationLoader {\n     Globals.setIsProdForever(isProd)\n \n     logger.info(\"Starting... [TyMHELLO]\")\n-    val app = new EdAppComponents(context).application\n+    val app = new TyAppComponents(context).application\n     logger.info(\"Started. [TyMSTARTED]\")\n     app\n   }\n \n }\n \n-class EdAppComponents(appLoaderContext: ApplicationLoader.Context)\n+class TyAppComponents(appLoaderContext: ApplicationLoader.Context)\n   extends BuiltInComponentsFromContext(appLoaderContext)\n   with AhcWSComponents\n   with _root_.controllers.AssetsComponents {\n@@ -46,7 +46,7 @@ class EdAppComponents(appLoaderContext: ApplicationLoader.Context)\n \n   // Could instead extend HttpFiltersComponents, but it adds a weird localhost-only filter.\n   SECURITY // it adds some maybe-useful security related filters too, investigate if should use them.\n-  override def httpFilters: Seq[EssentialFilter] = Seq(EdFilters.makeGzipFilter(materializer))\n+  override def httpFilters: Seq[EssentialFilter] = Seq(TyFilters.makeGzipFilter(materializer))\n \n   // Jaeger docs: https://github.com/yurishkuro/opentracing-tutorial/tree/master/java\n   val tracer: io.jaegertracing.internal.JaegerTracer = {\n@@ -58,13 +58,13 @@ class EdAppComponents(appLoaderContext: ApplicationLoader.Context)\n   }\n \n   val globals = new Globals(appLoaderContext, executionContext, wsClient, actorSystem, tracer)\n-  val security = new ed.server.security.EdSecurity(globals)\n+  val security = new talkyard.server.security.EdSecurity(globals)\n   val rateLimiter = new RateLimiter(globals, security)\n   val safeActions = new SafeActions(globals, security, controllerComponents.parsers)\n   val plainApiActions = new PlainApiActions(safeActions, globals, security, rateLimiter)\n   val nashorn = new Nashorn(globals)\n \n-  val context = new EdContext(\n+  val context = new TyContext(\n         globals, security, safeActions, plainApiActions, nashorn,\n         materializer, controllerComponents)\n \n@@ -95,7 +95,7 @@ class EdAppComponents(appLoaderContext: ApplicationLoader.Context)\n     new _root_.controllers.LoginWithPasswordController(cc, context),\n     loginWithOpenAuthController,\n     new _root_.controllers.ImpersonateController(cc, context, loginController),\n-    new ed.server.pubsub.SubscriberController(cc, context),\n+    new talkyard.server.pubsub.SubscriberController(cc, context),\n     new _root_.controllers.EmbeddedTopicsController(cc, context),\n     new _root_.controllers.SearchController(cc, context),\n     new _root_.controllers.ResetPasswordController(cc, context),\n@@ -141,7 +141,7 @@ class EdAppComponents(appLoaderContext: ApplicationLoader.Context)\n }\n \n \n-class EdContext(\n+class TyContext(\n   val globals: Globals,\n   val security: EdSecurity,\n   val safeActions: SafeActions,",
      "previous_filename": "appsv/server/ed/server/EdAppLoader.scala"
    },
    {
      "sha": "4ddedcd1a60be1a36fef1bf0ebf94e9e2cee283c",
      "filename": "appsv/server/talkyard/server/TyController.scala",
      "status": "renamed",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/TyController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/TyController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/TyController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -1,10 +1,10 @@\n-package ed.server\n+package talkyard.server\n \n import com.debiki.core.Prelude._\n import com.debiki.core._\n import debiki.RateLimits.NoRateLimits\n import debiki.{RateLimits, TextAndHtmlMaker}\n-import ed.server.http._\n+import talkyard.server.http._\n import play.api._\n import play.api.libs.Files.TemporaryFile\n import play.api.libs.json.JsValue\n@@ -15,7 +15,7 @@ import talkyard.server.authn.MinAuthnStrength\n \n \n \n-class EdController(cc: ControllerComponents, val context: EdContext)\n+class TyController(cc: ControllerComponents, val context: TyContext)\n   extends AbstractController(cc) {\n \n   import context.globals",
      "previous_filename": "appsv/server/ed/server/EdController.scala"
    },
    {
      "sha": "ecbd5ff1f6351454828bdab3c91af3ef6963711f",
      "filename": "appsv/server/talkyard/server/TyFilters.scala",
      "status": "renamed",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/TyFilters.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/TyFilters.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/TyFilters.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server\n+package talkyard.server\n \n import akka.stream.Materializer\n import com.debiki.core._\n@@ -30,7 +30,7 @@ import play.filters.gzip.{GzipFilter, GzipFilterConfig}\n   * doesn't work with compile time dependency injection (with the config copied\n   * from the docs). Instead, seems I need to create my own filter, as done here. (?)\n   */\n-object EdFilters {\n+object TyFilters {\n   def makeGzipFilter(materializer: Materializer) = new GzipFilter (\n     new GzipFilterConfig(\n       shouldGzip = (request, response) => {",
      "previous_filename": "appsv/server/ed/server/EdFilters.scala"
    },
    {
      "sha": "8db2d0b4f6a23cd7e763992cdafbe86b045c9d5a",
      "filename": "appsv/server/talkyard/server/api/GetController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/api/GetController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/api/GetController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/api/GetController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,12 +20,12 @@ package talkyard.server.api\n import com.debiki.core._\n import controllers.OkApiJson\n import debiki.RateLimits\n-import ed.server.http._\n+import talkyard.server.http._\n import talkyard.server.authz.MayMaybe\n import debiki.EdHttp._\n import Prelude._\n import debiki.dao.{LoadPostsResult, PageStuff, SiteDao}\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.api.libs.json.{JsObject, JsValue, JsArray, Json}\n import play.api.mvc.{Action, ControllerComponents, Result}\n@@ -35,8 +35,8 @@ import org.scalactic.{Bad, ErrorMessage, Good, Or}\n \n /** The ListQuery API, see: (project root)/tests/e2e/pub-api.ts\n   */\n-class GetController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class GetController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n \n "
    },
    {
      "sha": "b7788809eb8cf466da18f5869daa706353ae6cf4",
      "filename": "appsv/server/talkyard/server/api/ListController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/api/ListController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/api/ListController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/api/ListController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -19,11 +19,11 @@ package talkyard.server.api\n \n import com.debiki.core._\n import debiki.RateLimits\n-import ed.server.http._\n+import talkyard.server.http._\n import debiki.EdHttp._\n import Prelude._\n import debiki.dao.{LoadPostsResult, PageStuff, SiteDao}\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.api.libs.json.{JsObject, JsValue, Json}\n import play.api.mvc.{Action, ControllerComponents, Result}\n@@ -33,8 +33,8 @@ import debiki.JsonUtils._\n \n /** The ListQuery API, see: (project root)/tests/e2e/pub-api.ts\n   */\n-class ListController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class ListController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n \n "
    },
    {
      "sha": "557355b6322f03108d795e63c19b91cfcf7cd1b8",
      "filename": "appsv/server/talkyard/server/api/PostsListFoundJson.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/api/PostsListFoundJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/api/PostsListFoundJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/api/PostsListFoundJson.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -66,7 +66,7 @@ object PostsListFoundJson {\n     val siteIdsOrigins = dao.theSiteIdsOrigins()\n     val avatarUrlPrefix =\n           siteIdsOrigins.uploadsOrigin +\n-          ed.server.UploadsUrlBasePath + siteIdsOrigins.pubId + '/'\n+           talkyard.server.UploadsUrlBasePath + siteIdsOrigins.pubId + '/'\n \n     // --- The result\n "
    },
    {
      "sha": "d688eee4e3de801ca6f7ac562389002a05aec0fa",
      "filename": "appsv/server/talkyard/server/api/QueryDoController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/api/QueryDoController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/api/QueryDoController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/api/QueryDoController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,21 +20,21 @@ package talkyard.server.api\n import com.debiki.core._\n import controllers.OkApiJson\n import debiki.RateLimits\n-import ed.server.http._\n+import talkyard.server.http._\n import debiki.EdHttp._\n import debiki.JsonUtils._\n import Prelude._\n import debiki.dao.SiteDao\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.api.libs.json._\n import play.api.mvc.{Action, ControllerComponents, Result}\n \n \n /** The Query API, Do API and Query-Do API, see: tests/e2e-wdio7/pub-api.ts\n   */\n-class QueryDoController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class QueryDoController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n \n   def apiV0_query(): Action[JsValue] = ApiSecretPostJsonAction(  // [PUB_API]"
    },
    {
      "sha": "56663893f61028539823d38b5938783963955df7",
      "filename": "appsv/server/talkyard/server/api/ThingsFoundJson.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/api/ThingsFoundJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/api/ThingsFoundJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/api/ThingsFoundJson.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -113,7 +113,7 @@ object ThingsFoundJson {  RENAME // to  PagesFoundJson ?\n     val siteIdsOrigins = dao.theSiteIdsOrigins()\n     val avatarUrlPrefix =\n           siteIdsOrigins.uploadsOrigin +\n-          ed.server.UploadsUrlBasePath + siteIdsOrigins.pubId + '/'\n+           talkyard.server.UploadsUrlBasePath + siteIdsOrigins.pubId + '/'\n \n     // --- The result\n "
    },
    {
      "sha": "210bc1e7eb6a29820bf2eb57a2d85bb25bb6a106",
      "filename": "appsv/server/talkyard/server/authn/OAuth2Provider-from-Silhouette.scala",
      "status": "added",
      "additions": 356,
      "deletions": 0,
      "changes": 356,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/authn/OAuth2Provider-from-Silhouette.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/authn/OAuth2Provider-from-Silhouette.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/authn/OAuth2Provider-from-Silhouette.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -0,0 +1,356 @@\n+// This file is from Silhouette, which Ty no longer uses, but it's simpler for now,\n+// to keep Silhouette's class OAuth2Settings (at the end of this file) rather\n+// than removing all at once.\n+//\n+// This file is, as you can see just below, under a different license (more permissive),\n+// than Talkyard itself.\n+//\n+\n+/**\n+ * Original work: SecureSocial (https://github.com/jaliss/securesocial)\n+ * Copyright 2013 Jorge Aliss (jaliss at gmail dot com) - twitter: @jaliss\n+ *\n+ * Derivative work: Silhouette (https://github.com/mohiva/play-silhouette)\n+ * Modifications Copyright 2015 Mohiva Organisation (license at mohiva dot com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package talkyard.server.authn\n+\n+\n+/*\n+import java.net.URLEncoder._\n+\n+import com.mohiva.play.silhouette.api._\n+import com.mohiva.play.silhouette.api.exceptions._\n+import com.mohiva.play.silhouette.api.util.ExtractableRequest\n+import com.mohiva.play.silhouette.impl.exceptions.{ AccessDeniedException, UnexpectedResponseException }\n+import com.mohiva.play.silhouette.impl.providers.OAuth2Provider._\n+import com.mohiva.play.silhouette.impl.providers.state.UserStateItemHandler\n+import com.mohiva.play.silhouette.ScalaCompat._\n+import play.api.libs.functional.syntax._\n+import play.api.libs.json._\n+import play.api.libs.ws.WSResponse\n+import play.api.mvc._\n+\n+import scala.concurrent.Future\n+import scala.reflect.ClassTag\n+import scala.util.{ Failure, Success, Try }\n+\n+/**\n+ * The OAuth2 info.\n+ *\n+ * @param accessToken  The access token.\n+ * @param tokenType    The token type.\n+ * @param expiresIn    The number of seconds before the token expires.\n+ * @param refreshToken The refresh token.\n+ * @param params       Additional params transported in conjunction with the token.\n+ */\n+case class OAuth2Info(\n+  accessToken: String,\n+  tokenType: Option[String] = None,\n+  expiresIn: Option[Int] = None,\n+  refreshToken: Option[String] = None,\n+  params: Option[Map[String, String]] = None) extends AuthInfo\n+\n+/**\n+ * The Oauth2 info companion object.\n+ */\n+object OAuth2Info extends OAuth2Constants {\n+\n+  /**\n+   * Converts the JSON into a [[com.mohiva.play.silhouette.impl.providers.OAuth2Info]] object.\n+   */\n+  implicit val infoReads = (\n+    (__ \\ AccessToken).read[String] and\n+    (__ \\ TokenType).readNullable[String] and\n+    (__ \\ ExpiresIn).readNullable[Int] and\n+    (__ \\ RefreshToken).readNullable[String]\n+  )((accessToken: String, tokenType: Option[String], expiresIn: Option[Int], refreshToken: Option[String]) =>\n+      new OAuth2Info(accessToken, tokenType, expiresIn, refreshToken)\n+    )\n+}\n+\n+/**\n+ * Base implementation for all OAuth2 providers.\n+ */\n+trait OAuth2Provider extends SocialStateProvider with OAuth2Constants with Logger {\n+\n+  /**\n+   * The type of the auth info.\n+   */\n+  type A = OAuth2Info\n+\n+  /**\n+   * The settings type.\n+   */\n+  type Settings = OAuth2Settings\n+\n+  /**\n+   * The social state handler implementation.\n+   */\n+  protected val stateHandler: SocialStateHandler\n+\n+  /**\n+   * A list with headers to send to the API.\n+   */\n+  protected val headers: Seq[(String, String)] = Seq()\n+\n+  /**\n+   * The default access token response code.\n+   *\n+   * Override this if a specific provider uses another HTTP status code for a successful access token response.\n+   */\n+  protected val accessTokeResponseCode: Int = 200\n+\n+  /**\n+   * The implicit access token reads.\n+   *\n+   * Override this if a specific provider needs another reads.\n+   */\n+  implicit protected val accessTokenReads: Reads[OAuth2Info] = OAuth2Info.infoReads\n+\n+  /**\n+   * Starts the authentication process.\n+   *\n+   * @param request The current request.\n+   * @tparam B The type of the request body.\n+   * @return Either a Result or the auth info from the provider.\n+   */\n+  def authenticate[B]()(implicit request: ExtractableRequest[B]): Future[Either[Result, OAuth2Info]] = {\n+    handleFlow(handleAuthorizationFlow(stateHandler)) { code =>\n+      stateHandler.unserialize(request.extractString(State).getOrElse(\"\")).flatMap { _ =>\n+        getAccessToken(code).map(oauth2Info => oauth2Info)\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Authenticates the user and returns the auth information and the user state.\n+   *\n+   * Returns either a [[StatefulAuthInfo]] if all went OK or a `play.api.mvc.Result` that the controller\n+   * sends to the browser (e.g.: in the case of OAuth where the user needs to be redirected to the service\n+   * provider).\n+   *\n+   * @tparam S The type of the user state.\n+   * @tparam B The type of the request body.\n+   * @param format The JSON format to the transform the user state into JSON.\n+   * @param request The request.\n+   * @param classTag The class tag for the user state item.\n+   * @return Either a `play.api.mvc.Result` or the [[StatefulAuthInfo]] from the provider.\n+   */\n+  def authenticate[S <: SocialStateItem, B](userState: S)(\n+    implicit\n+    format: Format[S],\n+    request: ExtractableRequest[B],\n+    classTag: ClassTag[S]\n+  ): Future[Either[Result, StatefulAuthInfo[A, S]]] = {\n+    val userStateItemHandler = new UserStateItemHandler(userState)\n+    val newStateHandler = stateHandler.withHandler(userStateItemHandler)\n+\n+    handleFlow(handleAuthorizationFlow(newStateHandler)) { code =>\n+      newStateHandler.unserialize(request.extractString(State).getOrElse(\"\")).flatMap { state =>\n+        val maybeUserState: Option[S] = state.items.flatMap(item => userStateItemHandler.canHandle(item)).headOption\n+        maybeUserState match {\n+          case Some(s) => getAccessToken(code).map(oauth2Info => StatefulAuthInfo(oauth2Info, s))\n+          case None    => Future.failed(new UnexpectedResponseException(\"Cannot extract user info from response\"))\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Handles the OAuth2 flow.\n+   *\n+   * The left flow is the authorization flow, which will be processed, if no `code` parameter exists\n+   * in the request. The right flow is the access token flow, which will be executed after a successful\n+   * authorization.\n+   *\n+   * @param left The authorization flow.\n+   * @param right The access token flow.\n+   * @param request The request.\n+   * @tparam L The return type of the left flow.\n+   * @tparam R The return type of the right flow.\n+   * @tparam B The type of the request body.\n+   * @return Either the left or the right flow.\n+   */\n+  def handleFlow[L, R, B](left: => Future[L])(right: String => Future[R])(\n+    implicit\n+    request: ExtractableRequest[B]\n+  ): Future[Either[L, R]] = {\n+    request.extractString(Error).map {\n+      case e @ AccessDenied => new AccessDeniedException(AuthorizationError.format(id, e))\n+      case e                => new UnexpectedResponseException(AuthorizationError.format(id, e))\n+    } match {\n+      case Some(throwable) => Future.failed(throwable)\n+      case None => request.extractString(Code) match {\n+        // We're being redirected back from the authorization server with the access code and the state\n+        case Some(code) => right(code).map(Right.apply)\n+        // There's no code in the request, this is the first step in the OAuth flow\n+        case None       => left.map(Left.apply)\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Handles the authorization step of the OAuth2 flow.\n+   *\n+   * @tparam B The type of the request body.\n+   * @param stateHandler The state handler to use.\n+   * @param request The request.\n+   * @return The redirect to the authorization URL of the OAuth2 provider.\n+   */\n+  protected def handleAuthorizationFlow[B](stateHandler: SocialStateHandler)(\n+    implicit\n+    request: ExtractableRequest[B]\n+  ): Future[Result] = {\n+    stateHandler.state.map { state =>\n+      val serializedState = stateHandler.serialize(state)\n+      val stateParam = if (serializedState.isEmpty) List() else List(State -> serializedState)\n+      val redirectParam = settings.redirectURL match {\n+        case Some(rUri) => List((RedirectURI, resolveCallbackURL(rUri)))\n+        case None       => Nil\n+      }\n+      val params = settings.scope.foldLeft(List(\n+        (ClientID, settings.clientID),\n+        (ResponseType, Code)) ++ stateParam ++ settings.authorizationParams.toList ++ redirectParam) {\n+        case (p, s) => (Scope, s) :: p\n+      }\n+      val encodedParams = params.map { p => encode(p._1, \"UTF-8\") + \"=\" + encode(p._2, \"UTF-8\") }\n+      val url = settings.authorizationURL.getOrElse {\n+        throw new ConfigurationException(AuthorizationURLUndefined.format(id))\n+      } + encodedParams.mkString(\"?\", \"&\", \"\")\n+      val redirect = stateHandler.publish(Results.Redirect(url), state)\n+      logger.debug(\"[Silhouette][%s] Use authorization URL: %s\".format(id, settings.authorizationURL))\n+      logger.debug(\"[Silhouette][%s] Redirecting to: %s\".format(id, url))\n+      redirect\n+    }\n+  }\n+\n+  /**\n+   * Gets the access token.\n+   *\n+   * @param code    The access code.\n+   * @param request The current request.\n+   * @return The info containing the access token.\n+   */\n+  protected def getAccessToken(code: String)(implicit request: RequestHeader): Future[OAuth2Info] = {\n+    val redirectParam = settings.redirectURL match {\n+      case Some(rUri) => List((RedirectURI, resolveCallbackURL(rUri)))\n+      case None       => Nil\n+    }\n+    val params = Map(\n+      ClientID -> Seq(settings.clientID),\n+      ClientSecret -> Seq(settings.clientSecret),\n+      GrantType -> Seq(AuthorizationCode),\n+      Code -> Seq(code)) ++ settings.accessTokenParams.transformValues(Seq(_)) ++ redirectParam.toMap.transformValues(Seq(_))\n+    httpLayer.url(settings.accessTokenURL).withHttpHeaders(headers: _*).post(params).flatMap { response =>\n+      logger.debug(\"[Silhouette][%s] Access token response: [%s]\".format(id, response.body))\n+      Future.fromTry(buildInfo(response))\n+    }\n+  }\n+\n+  /**\n+   * Builds the OAuth2 info from response.\n+   *\n+   * @param response The response from the provider.\n+   * @return The OAuth2 info on success, otherwise a failure.\n+   */\n+  protected def buildInfo(response: WSResponse): Try[OAuth2Info] = {\n+    response.status match {\n+      case status if status == accessTokeResponseCode =>\n+        Try(response.json) match {\n+          case Success(json) => json.validate[OAuth2Info].asEither.fold(\n+            error => Failure(new UnexpectedResponseException(InvalidInfoFormat.format(id, error))),\n+            info => Success(info)\n+          )\n+          case Failure(error) => Failure(\n+            new UnexpectedResponseException(JsonParseError.format(id, response.body, error))\n+          )\n+        }\n+      case status => Failure(\n+        new UnexpectedResponseException(UnexpectedResponse.format(id, response.body, status))\n+      )\n+    }\n+  }\n+}\n+\n+/**\n+ * The OAuth2Provider companion object.\n+ */\n+object OAuth2Provider extends OAuth2Constants {\n+\n+  /**\n+   * The error messages.\n+   */\n+  val AuthorizationURLUndefined = \"[Silhouette][%s] Authorization URL is undefined\"\n+  val AuthorizationError = \"[Silhouette][%s] Authorization server returned error: %s\"\n+  val InvalidInfoFormat = \"[Silhouette][%s] Cannot build OAuth2Info because of invalid response format: %s\"\n+  val JsonParseError = \"[Silhouette][%s] Cannot parse response `%s` to Json; got error: %s\"\n+  val UnexpectedResponse = \"[Silhouette][%s] Got unexpected response `%s`; status code: %s\"\n+}\n+\n+/**\n+ * The OAuth2 constants.\n+ */\n+trait OAuth2Constants {\n+\n+  val ClientID = \"client_id\"\n+  val ClientSecret = \"client_secret\"\n+  val RedirectURI = \"redirect_uri\"\n+  val Scope = \"scope\"\n+  val ResponseType = \"response_type\"\n+  val State = \"state\"\n+  val GrantType = \"grant_type\"\n+  val AuthorizationCode = \"authorization_code\"\n+  val AccessToken = \"access_token\"\n+  val Error = \"error\"\n+  val Code = \"code\"\n+  val TokenType = \"token_type\"\n+  val ExpiresIn = \"expires_in\"\n+  val Expires = \"expires\"\n+  val RefreshToken = \"refresh_token\"\n+  val AccessDenied = \"access_denied\"\n+}\n+\n+*/\n+\n+/**\n+ * The OAuth2 settings.\n+ *\n+ * @param authorizationURL    The authorization URL provided by the OAuth provider.\n+ * @param accessTokenURL      The access token URL provided by the OAuth provider.\n+ * @param redirectURL         The redirect URL to the application after a successful authentication on the OAuth\n+ *                            provider. The URL can be a relative path which will be resolved against the current\n+ *                            request's host.\n+ * @param apiURL              The URL to fetch the profile from the API. Can be used to override the default URL\n+ *                            hardcoded in every provider implementation.\n+ * @param clientID            The client ID provided by the OAuth provider.\n+ * @param clientSecret        The client secret provided by the OAuth provider.\n+ * @param scope               The OAuth2 scope parameter provided by the OAuth provider.\n+ * @param authorizationParams Additional params to add to the authorization request.\n+ * @param accessTokenParams   Additional params to add to the access token request.\n+ * @param customProperties    A map of custom properties for the different providers.\n+ */\n+case class OAuth2Settings(\n+  authorizationURL: Option[String] = None,\n+  accessTokenURL: String,\n+  redirectURL: Option[String] = None,\n+  apiURL: Option[String] = None,\n+  clientID: String, clientSecret: String,\n+  scope: Option[String] = None,\n+  authorizationParams: Map[String, String] = Map.empty,\n+  accessTokenParams: Map[String, String] = Map.empty,\n+  customProperties: Map[String, String] = Map.empty\n+)\n+"
    },
    {
      "sha": "ee71609fe3d34f21bed357d9eba41fb05d9e94a4",
      "filename": "appsv/server/talkyard/server/authn/SsoAuthnController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/authn/SsoAuthnController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/authn/SsoAuthnController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/authn/SsoAuthnController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,8 +22,8 @@ import com.debiki.core.Prelude._\n import controllers.OkApiJson\n import debiki.EdHttp._\n import debiki.RateLimits\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import org.scalactic.{Bad, Good}\n import play.api.libs.json._\n@@ -36,8 +36,8 @@ import dev.paseto.{jpaseto => pas}\n import dev.paseto.jpaseto.{Paseto => pas_Paseto}\n \n \n-class SsoAuthnController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class SsoAuthnController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   private val logger = talkyard.server.TyLogger(\"SsoAuthnController\")\n \n@@ -143,7 +143,7 @@ class SsoAuthnController @Inject()(cc: ControllerComponents, edContext: EdContex\n        \\n\\tat controllers.LoginWithSecretController$.isAllowedRedirectUrl(ApiV0Controller.scala:453)\n        \\n\\tat controllers.ApiV0Controller.$anonfun$getFromApi$8(ApiV0Controller.scala:190)\n        ...\n-       \\n\\tat ed.server.http.PlainApiActions$$anon$1.runBlockIfAuthOk(PlainApiActions.scala:573)\n+       \\n\\tat talkyard.server.http.PlainApiActions$$anon$1.runBlockIfAuthOk(PlainApiActions.scala:573)\n        ...\n        \\n\\tat java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\n        \\n\",\"severity\":\"ERROR\",\"serviceContext\":{\"service\":\"talkyard-app\",\"version\":\"v0.2020.24\"},\"context\":{\"reportLocation\":{\"filePath\":\"SafeActions.scala\",\"lineNumber\":213,\"functionName\":\"ed$server$http$SafeActions$$internalError\",\"className\":\"ed.server.http.SafeActions\"}}}"
    },
    {
      "sha": "5ee15d294c01058007ec5987c14695a972d294cf",
      "filename": "appsv/server/talkyard/server/authn/package.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/authn/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/authn/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/authn/package.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -116,20 +116,22 @@ package object authn {   REFACTOR; MOVE // most of this to an object UserInfoPar\n   val Leave: Remove.type = Remove\n \n   object ServerDefIdpAliases {\n-    import com.mohiva.play.silhouette.impl.providers.{oauth2 => si_oauth2}\n+    //import com.mohiva.play.silhouette.impl.providers.{oauth2 => si_oauth2}\n \n     val Facebook = \"facebook\"\n     val GitHub = \"github\"\n     val Google = \"google\"\n     val LinkedIn = \"linkedin\"\n     //val Twitter = \"twitter\"\n \n+    /*\n     // Should be same ids as Silhouette, so migration to ScribeJava will be simpler:\n     assert(si_oauth2.GoogleProvider.ID == Google)\n     assert(si_oauth2.GitHubProvider.ID == GitHub)\n     assert(si_oauth2.FacebookProvider.ID == Facebook)\n     //assert(si_oauth2.TwitterProvider.ID == Twitter)  not OAuth2 yet?\n     assert(si_oauth2.LinkedInProvider.ID == LinkedIn)\n+    */\n \n   }\n "
    },
    {
      "sha": "62718b35aa16a2b72c34d799830bc84b5140272c",
      "filename": "appsv/server/talkyard/server/authz/Authz.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/authz/Authz.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/authz/Authz.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/authz/Authz.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -257,7 +257,7 @@ object Authz {\n \n \n   def maySeePost(): MayMaybe = {\n-    // Later. For now, can use ed.server.auth.AuthzSiteDaoMixin\n+    // Later. For now, can use talkyard.server.auth.AuthzSiteDaoMixin\n     // maySeePostUseCache.\n     unimpl(\"maySeePost TyE28456rMP\")\n   }"
    },
    {
      "sha": "c217c831b921c897573b09351c5f5fba7bbe522e",
      "filename": "appsv/server/talkyard/server/authz/AuthzSiteDaoMixin.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/authz/AuthzSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/authz/AuthzSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/authz/AuthzSiteDaoMixin.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,7 +21,7 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.dao.{MemCacheKey, SiteDao, CacheOrTx}\n import MayMaybe.{NoMayNot, NoNotFound, Yes}\n-import ed.server.http._\n+import talkyard.server.http._\n import scala.collection.immutable\n import scala.collection.immutable.Seq\n "
    },
    {
      "sha": "784fda24a49094a73363d60e02bb79a7d939e948",
      "filename": "appsv/server/talkyard/server/dao/StaleStuff.scala",
      "status": "added",
      "additions": 229,
      "deletions": 0,
      "changes": 229,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/dao/StaleStuff.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/dao/StaleStuff.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/dao/StaleStuff.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -0,0 +1,229 @@\n+/**\n+ * Copyright (c) 2020 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package talkyard.server.dao\n+\n+import com.debiki.core._\n+import com.debiki.core.Prelude._\n+import debiki.Globals\n+import scala.collection.{mutable => mut}\n+import scala.collection.immutable\n+\n+\n+/**\n+  *\n+  * @param pageId\n+  * @param memCacheOnly\n+  * @param pageModified\n+  * @param backlinksStale — if backlinks on this page, back to other pages,\n+  *   are stale, e.g. one of those other pages got renamed,\n+  *   or moved to a different access restricted category so the\n+  *   backlink should disappear.\n+  * @param ancestorCategoriesStale\n+  * @param bylinesStale\n+  */\n+case class StalePage(\n+  pageId: PageId,\n+  memCacheOnly: Bo,\n+  pageModified: Bo,\n+  backlinksStale: Bo,\n+  ancestorCategoriesStale: Bo,\n+  bylinesStale: Bo)\n+\n+\n+/** Remembers things that got out-of-date and should be uncached, e.g. html\n+  * for a page cached in page_html_t (page_html3).\n+  *\n+  * Since we 1) pass a StaleStuff to \"all\" functions (well, soon, getting started\n+  * now), forgetting it, causes a compilation error.\n+  * And since 2) [[SiteDao.writeTx]] automatically when the transaction ends,\n+  * uncaches all stale stuff, cannot easily forget to uncache stale stuff?\n+  *\n+  * Mutable. Not thread safe.\n+  */\n+class StaleStuff {\n+  private var _allPagesStale = false\n+  private val _stalePages = mut.Map[PageId, StalePage]()\n+  private val _stalePpIdsMemCacheOnly = mut.Set[PatId]()\n+\n+  def nonEmpty: Bo =\n+    _allPagesStale ||\n+    _stalePages.nonEmpty ||\n+    _stalePpIdsMemCacheOnly.nonEmpty\n+\n+\n+  // ----- Participants\n+\n+  def staleParticipantIdsInMem: Set[UserId] =\n+    _stalePpIdsMemCacheOnly.to[immutable.Set]\n+\n+  def addPatIds(patIds: Set[PatId]): U = {\n+    // Only cached in-memory.\n+    patIds foreach _stalePpIdsMemCacheOnly.add\n+  }\n+\n+  def addParticipantId(ppId: UserId, memCacheOnly: Bo): U = {\n+    // Only cached in-memory. Remove memCacheOnly param? It's confusing?\n+    unimplIf(!memCacheOnly, \"TyE036WH7MN24\")\n+    _stalePpIdsMemCacheOnly.add(ppId)\n+  }\n+\n+  def addPatDynData(patId: PatId, memCacheOnly: Bo): U = {\n+    unimplIf(!memCacheOnly, \"TyE036WH7MN25\")\n+    // Noop, currently not cached.\n+  }\n+\n+\n+  // ----- Pages\n+\n+  def stalePages: Iterator[StalePage] = _stalePages.valuesIterator\n+\n+  def stalePageIdsInDb: Set[PageId] =\n+    // WOULD_OPTIMIZE calc toSet just once, remember (forget if new page added)\n+    stalePages.filter(!_.memCacheOnly).map(_.pageId).toSet\n+\n+  def stalePageIdsInMem: Set[PageId] = {\n+    // This includes all stale pages (there's no stale-only-in-database).\n+    val r = stalePages.map(_.pageId).toSet\n+    CLEAN_UP  // just use  _stalePages.keys.toSet  instead?  but .keySet has wrong type.\n+    dieIf(Globals.isDevOrTest && _stalePages.keys.toSet != r, \"TyE056KWTD6\")\n+    r\n+  }\n+\n+  def addPagesWithPostIds(postIds: Set[PostId], tx: SiteTx): U = {\n+    val pagePostNrByPostId = tx.loadPagePostNrsByPostIds(postIds)\n+    val pageIdsDirectlyAffected: Set[PageId] = pagePostNrByPostId.values.map(_.pageId).toSet\n+    addPageIds(pageIdsDirectlyAffected)\n+  }\n+\n+  def addPagesWithVisiblePostsBy(patIds: Set[PatId], tx: SiteTx): U = {\n+    val _200k = 200 * 1000\n+    val pageIds: Set[PageId] = tx.loadPageIdsWithVisiblePostsBy(patIds, limit = _200k)\n+    if (pageIds.size < _200k) {\n+      addPageIds(pageIds, pageModified = false, bylinesStale = true)\n+    }\n+    else {\n+      // This won't happen until after 10+ years? Can any human\n+      // ever write 200 000 posts? Yes maybe: 200e3 / (50 * 365) = 11 years, if\n+      // writing 50 posts every day. Maybe a bot? However, rate limits, and they\n+      // wouldn't create that many new pages? Instead, they'd append to the same page?\n+      // Anyway. Maybe we don't want to load say 1M page ids. Let's update the pages\n+      // directly in the database instead, and clear the mem cache?\n+      // Or, just clear the whole page cache? But that might be a bad idea too? Hmm.\n+      // For now: (doesn't matter until after 10+ years!?)\n+      addAllPages()\n+    }\n+  }\n+\n+  def addAllPages(): U =\n+    _allPagesStale = true\n+\n+  def areAllPagesStale: Bo = _allPagesStale\n+\n+\n+  /** Pages that need to be refreshed, not because they themselves got modified,\n+    * but because something else got modified.\n+    * Example: Page A links to page B. Page A got renamed — so the backlinks\n+    * displayed on page B back to A, should get updated with the new title of\n+    * the linking page A. Here, A was directly modified, and B indirectly.\n+    *\n+    * Hmm, instead, needs a staleBacklinksPageIds?  [sleeping_links_bug]\n+    */\n+  def stalePageIdsInMemIndirectly: Set[PageId] =\n+    stalePages.filter(p => !p.pageModified).map(_.pageId).toSet\n+\n+  def stalePageIdsInMemDirectly: Set[PageId] =\n+    stalePages.filter(p => p.pageModified).map(_.pageId).toSet\n+\n+  /**\n+    * @param memCacheOnly If page_meta_t.version_c (pages3.version) got bumped,\n+    *   that's enough — then it's different from page_html_t.version_c already\n+    *   and the database \"knows\" the cached html is out-of-date.\n+    *   Then, pass memCacheOnly = true here (so won't need to write to the db\n+    *   twice that the cached html is out-of-date).\n+    * @param backlinksStale If backlinks on this page, back to other pages\n+    *   that link to it, needs to be refreshed.\n+    */\n+  def addPageId(pageId: PageId, memCacheOnly: Bo = false,\n+          pageModified: Bo = true, backlinksStale: Bo = false,\n+          bylinesStale: Bo = false): U = {\n+    dieIf(!pageModified && !backlinksStale && !bylinesStale,\n+          \"TyE305KTDT\", \"Nothing happened\")\n+    val oldEntry = _stalePages.get(pageId)\n+    val newEntry = oldEntry.map(o =>\n+          o.copy(\n+            memCacheOnly = o.memCacheOnly && memCacheOnly,\n+            pageModified = o.pageModified || pageModified,\n+            backlinksStale = o.backlinksStale || backlinksStale,\n+            bylinesStale = o.bylinesStale || bylinesStale))\n+        .getOrElse(StalePage(\n+            pageId,\n+            memCacheOnly = memCacheOnly,\n+            pageModified = pageModified,\n+            backlinksStale = backlinksStale,\n+            // Not yet implemented:\n+            ancestorCategoriesStale = false,\n+            bylinesStale = bylinesStale))\n+\n+    if (oldEntry isNot newEntry) {\n+      _stalePages.update(pageId, newEntry)\n+    }\n+  }\n+\n+  def addPageIds(pageIds: Set[PageId], memCacheOnly: Bo = false,\n+          pageModified: Bo = true, backlinksStale: Bo = false,\n+          bylinesStale: Bo = false): U = {\n+    pageIds foreach { pageId =>\n+      addPageId(pageId, memCacheOnly = memCacheOnly, pageModified = pageModified,\n+            backlinksStale = backlinksStale, bylinesStale = bylinesStale)\n+    }\n+  }\n+\n+  def includesPageModified(pageId: PageId): Boolean = {\n+    _stalePages.get(pageId).exists(_.pageModified)\n+  }\n+\n+\n+  def clearStaleStuffInDatabase(tx: SiteTx): U = {\n+    if (areAllPagesStale) {\n+      tx.bumpSiteVersion()\n+    }\n+    else {\n+      // Refresh database page cache:\n+      tx.markPagesHtmlStale(stalePageIdsInDb)\n+    }\n+  }\n+\n+\n+  def clearStaleStuffInMemory(dao: debiki.dao.SiteDao): U = {\n+    if (areAllPagesStale) {\n+      // Currently then need to: (although clears unnecessarily much)\n+      dao.memCache.clearThisSite()\n+    }\n+    else if (nonEmpty) {\n+      staleParticipantIdsInMem foreach { ppId =>\n+        dao.removeUserFromMemCache(ppId)\n+      }\n+      stalePageIdsInMem foreach { pageId =>\n+        dao.refreshPageInMemCache(pageId)\n+      }\n+      dao.uncacheLinks(this)\n+    }\n+  }\n+\n+}\n+"
    },
    {
      "sha": "95752bf027347b63b46329405941061f9eb0df29",
      "filename": "appsv/server/talkyard/server/dao/package.scala",
      "status": "removed",
      "additions": 0,
      "deletions": 206,
      "changes": 206,
      "blob_url": "https://github.com/debiki/talkyard/blob/831d61484d9458e12883cb13bf804b388ff8c1b8/appsv/server/talkyard/server/dao/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/831d61484d9458e12883cb13bf804b388ff8c1b8/appsv/server/talkyard/server/dao/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/dao/package.scala?ref=831d61484d9458e12883cb13bf804b388ff8c1b8",
      "patch": "@@ -1,206 +0,0 @@\n-/**\n- * Copyright (c) 2020 Kaj Magnus Lindberg\n- *\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as\n- * published by the Free Software Foundation, either version 3 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-\n-package talkyard.server\n-\n-import com.debiki.core._\n-import com.debiki.core.Prelude._\n-import debiki.Globals\n-import scala.collection.{mutable => mut}\n-import scala.collection.immutable\n-\n-\n-package object dao {\n-\n-\n-  /**\n-    *\n-    * @param pageId\n-    * @param memCacheOnly\n-    * @param pageModified\n-    * @param backlinksStale — if backlinks on this page, back to other pages,\n-    *   are stale, e.g. one of those other pages got renamed,\n-    *   or moved to a different access restricted category so the\n-    *   backlink should disappear.\n-    * @param ancestorCategoriesStale\n-    * @param bylinesStale\n-    */\n-  case class StalePage(\n-    pageId: PageId,\n-    memCacheOnly: Bo,\n-    pageModified: Bo,\n-    backlinksStale: Bo,\n-    ancestorCategoriesStale: Bo,\n-    bylinesStale: Bo)\n-\n-\n-  /** Remembers things that got out-of-date and should be uncached, e.g. html\n-    * for a page cached in page_html_t (page_html3).\n-    *\n-    * Since we 1) pass a StaleStuff to \"all\" functions (well, soon, getting started\n-    * now), forgetting it, causes a compilation error.\n-    * And since 2) [[SiteDao.writeTx]] automatically when the transaction ends,\n-    * uncaches all stale stuff, cannot easily forget to uncache stale stuff?\n-    *\n-    * Mutable. Not thread safe.\n-    */\n-  class StaleStuff {\n-    private var _allPagesStale = false\n-    private val _stalePages = mut.Map[PageId, StalePage]()\n-    private val _stalePpIdsMemCacheOnly = mut.Set[PatId]()\n-\n-    def nonEmpty: Bo =\n-      _allPagesStale ||\n-      _stalePages.nonEmpty ||\n-      _stalePpIdsMemCacheOnly.nonEmpty\n-\n-\n-    // ----- Participants\n-\n-    def staleParticipantIdsInMem: Set[UserId] =\n-      _stalePpIdsMemCacheOnly.to[immutable.Set]\n-\n-    def addPatIds(patIds: Set[PatId]): U = {\n-      // Only cached in-memory.\n-      patIds foreach _stalePpIdsMemCacheOnly.add\n-    }\n-\n-    def addParticipantId(ppId: UserId, memCacheOnly: Bo): U = {\n-      // Only cached in-memory. Remove memCacheOnly param? It's confusing?\n-      unimplIf(!memCacheOnly, \"TyE036WH7MN24\")\n-      _stalePpIdsMemCacheOnly.add(ppId)\n-    }\n-\n-    def addPatDynData(patId: PatId, memCacheOnly: Bo): U = {\n-      unimplIf(!memCacheOnly, \"TyE036WH7MN25\")\n-      // Noop, currently not cached.\n-    }\n-\n-\n-    // ----- Pages\n-\n-    def stalePages: Iterator[StalePage] = _stalePages.valuesIterator\n-\n-    def stalePageIdsInDb: Set[PageId] =\n-      // WOULD_OPTIMIZE calc toSet just once, remember (forget if new page added)\n-      stalePages.filter(!_.memCacheOnly).map(_.pageId).toSet\n-\n-    def stalePageIdsInMem: Set[PageId] = {\n-      // This includes all stale pages (there's no stale-only-in-database).\n-      val r = stalePages.map(_.pageId).toSet\n-      CLEAN_UP  // just use  _stalePages.keys.toSet  instead?  but .keySet has wrong type.\n-      dieIf(Globals.isDevOrTest && _stalePages.keys.toSet != r, \"TyE056KWTD6\")\n-      r\n-    }\n-\n-    def addPagesWithPostIds(postIds: Set[PostId], tx: SiteTx): U = {\n-      val pagePostNrByPostId = tx.loadPagePostNrsByPostIds(postIds)\n-      val pageIdsDirectlyAffected: Set[PageId] = pagePostNrByPostId.values.map(_.pageId).toSet\n-      addPageIds(pageIdsDirectlyAffected)\n-    }\n-\n-    def addPagesWithVisiblePostsBy(patIds: Set[PatId], tx: SiteTx): U = {\n-      val _200k = 200 * 1000\n-      val pageIds: Set[PageId] = tx.loadPageIdsWithVisiblePostsBy(patIds, limit = _200k)\n-      if (pageIds.size < _200k) {\n-        addPageIds(pageIds, pageModified = false, bylinesStale = true)\n-      }\n-      else {\n-        // This won't happen until after 10+ years? Can any human\n-        // ever write 200 000 posts? Yes maybe: 200e3 / (50 * 365) = 11 years, if\n-        // writing 50 posts every day. Maybe a bot? However, rate limits, and they\n-        // wouldn't create that many new pages? Instead, they'd append to the same page?\n-        // Anyway. Maybe we don't want to load say 1M page ids. Let's update the pages\n-        // directly in the database instead, and clear the mem cache?\n-        // Or, just clear the whole page cache? But that might be a bad idea too? Hmm.\n-        // For now: (doesn't matter until after 10+ years!?)\n-        addAllPages()\n-      }\n-    }\n-\n-    def addAllPages(): U =\n-      _allPagesStale = true\n-\n-    def areAllPagesStale: Bo = _allPagesStale\n-\n-\n-    /** Pages that need to be refreshed, not because they themselves got modified,\n-      * but because something else got modified.\n-      * Example: Page A links to page B. Page A got renamed — so the backlinks\n-      * displayed on page B back to A, should get updated with the new title of\n-      * the linking page A. Here, A was directly modified, and B indirectly.\n-      *\n-      * Hmm, instead, needs a staleBacklinksPageIds?  [sleeping_links_bug]\n-      */\n-    def stalePageIdsInMemIndirectly: Set[PageId] =\n-      stalePages.filter(p => !p.pageModified).map(_.pageId).toSet\n-\n-    def stalePageIdsInMemDirectly: Set[PageId] =\n-      stalePages.filter(p => p.pageModified).map(_.pageId).toSet\n-\n-    /**\n-      * @param memCacheOnly If page_meta_t.version_c (pages3.version) got bumped,\n-      *   that's enough — then it's different from page_html_t.version_c already\n-      *   and the database \"knows\" the cached html is out-of-date.\n-      *   Then, pass memCacheOnly = true here (so won't need to write to the db\n-      *   twice that the cached html is out-of-date).\n-      * @param backlinksStale If backlinks on this page, back to other pages\n-      *   that link to it, needs to be refreshed.\n-      */\n-    def addPageId(pageId: PageId, memCacheOnly: Bo = false,\n-            pageModified: Bo = true, backlinksStale: Bo = false,\n-            bylinesStale: Bo = false): U = {\n-      dieIf(!pageModified && !backlinksStale && !bylinesStale,\n-            \"TyE305KTDT\", \"Nothing happened\")\n-      val oldEntry = _stalePages.get(pageId)\n-      val newEntry = oldEntry.map(o =>\n-            o.copy(\n-              memCacheOnly = o.memCacheOnly && memCacheOnly,\n-              pageModified = o.pageModified || pageModified,\n-              backlinksStale = o.backlinksStale || backlinksStale,\n-              bylinesStale = o.bylinesStale || bylinesStale))\n-          .getOrElse(StalePage(\n-              pageId,\n-              memCacheOnly = memCacheOnly,\n-              pageModified = pageModified,\n-              backlinksStale = backlinksStale,\n-              // Not yet implemented:\n-              ancestorCategoriesStale = false,\n-              bylinesStale = bylinesStale))\n-\n-      if (oldEntry isNot newEntry) {\n-        _stalePages.update(pageId, newEntry)\n-      }\n-    }\n-\n-    def addPageIds(pageIds: Set[PageId], memCacheOnly: Bo = false,\n-            pageModified: Bo = true, backlinksStale: Bo = false,\n-            bylinesStale: Bo = false): U = {\n-      pageIds foreach { pageId =>\n-        addPageId(pageId, memCacheOnly = memCacheOnly, pageModified = pageModified,\n-              backlinksStale = backlinksStale, bylinesStale = bylinesStale)\n-      }\n-    }\n-\n-    def includesPageModified(pageId: PageId): Boolean = {\n-      _stalePages.get(pageId).exists(_.pageModified)\n-    }\n-  }\n-\n-\n-}\n-"
    },
    {
      "sha": "c2d81e6faed8a1bde69a44e3e5cb10b4fb869f47",
      "filename": "appsv/server/talkyard/server/emails/in/EmailsInController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/emails/in/EmailsInController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/emails/in/EmailsInController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/emails/in/EmailsInController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -25,18 +25,18 @@ import debiki.ParseText\n import debiki.RateLimits\n import debiki.dao.SiteDao\n import debiki.Globals.isDevOrTest\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n import play.api.libs.json._\n import play.api.mvc.{Action, ControllerComponents}\n import play.mvc.Http.{HeaderNames => play_HeaderNames}\n import talkyard.server.TyLogging\n import org.scalactic.{Good, Or, Bad}\n-import ed.server.notf.NotfHtmlRenderer\n+import talkyard.server.notf.NotfHtmlRenderer\n \n \n-class EmailsInController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) with TyLogging {\n+class EmailsInController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) with TyLogging {\n \n   import context.safeActions.ExceptionAction\n "
    },
    {
      "sha": "b3f829f813c3be0b16ee127664b6eefea9fcf165",
      "filename": "appsv/server/talkyard/server/http/DebikiRequest.scala",
      "status": "renamed",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/DebikiRequest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/DebikiRequest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/http/DebikiRequest.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.http\n+package talkyard.server.http\n \n import com.debiki.core._\n import com.debiki.core.PageOrderOffset\n@@ -24,11 +24,10 @@ import controllers.Utils.ValidationImplicits._\n import debiki._\n import debiki.dao.{SiteDao, SystemDao}\n import debiki.EdHttp._\n-import ed.server.EdContext\n+import talkyard.server.TyContext\n import talkyard.server.authz.ForumAuthzContext\n-import ed.server.security.{BrowserId, SidOk, SidStatus, XsrfOk}\n+import talkyard.server.security.{BrowserId, SidOk, SidStatus, XsrfOk}\n import java.{util => ju}\n-import play.api.mvc\n import play.api.mvc._\n \n \n@@ -46,7 +45,7 @@ abstract class DebikiRequest[A] extends AuthnReqHeader {\n // Rename RequestHeader to p_RequestHeader and Result to p_Result?\n abstract class AuthnReqHeader extends SomethingToRateLimit {\n \n-  def context: EdContext = dao.context\n+  def context: TyContext = dao.context\n   private def security = dao.context.security\n   private def globals = dao.context.globals\n ",
      "previous_filename": "appsv/server/ed/server/http/DebikiRequest.scala"
    },
    {
      "sha": "988c220e56c6b2adb7a891b8c2c888860f263ea5",
      "filename": "appsv/server/talkyard/server/http/JsonOrFormRequestBody.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/JsonOrFormRequestBody.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/JsonOrFormRequestBody.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/http/JsonOrFormRequestBody.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.http\n+package talkyard.server.http\n \n import com.debiki.core.Prelude._\n import debiki.EdHttp._",
      "previous_filename": "appsv/server/ed/server/http/JsonOrFormRequestBody.scala"
    },
    {
      "sha": "1c4e7e908452dabe23eb7cf062a0c1b33fb41ad4",
      "filename": "appsv/server/talkyard/server/http/PageRequest.scala",
      "status": "renamed",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/PageRequest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/PageRequest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/http/PageRequest.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,15 +15,15 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.http\n+package talkyard.server.http\n \n import com.debiki.core._\n import com.debiki.core.Prelude._\n import controllers.Utils.ValidationImplicits._\n import debiki._\n import debiki.EdHttp._\n import debiki.dao.SiteDao\n-import ed.server.security.{SidStatus, XsrfOk, BrowserId}\n+import talkyard.server.security.{SidStatus, XsrfOk, BrowserId}\n import play.api.mvc.Request\n \n \n@@ -63,7 +63,7 @@ class PageRequest[A](\n \n \n   def pageId: Option[PageId] = pagePath.pageId\n-  def theSitePageId = SitePageId(siteId, thePageId)\n+  def theSitePageId: SitePageId = SitePageId(siteId, thePageId)\n \n   /**\n    * Throws 404 Not Found if id unknown. The page id is known if it",
      "previous_filename": "appsv/server/ed/server/http/PageRequest.scala"
    },
    {
      "sha": "32461c185c03368fa3cbeb8c4643e8690b8b32d5",
      "filename": "appsv/server/talkyard/server/http/PlainApiActions.scala",
      "status": "renamed",
      "additions": 19,
      "deletions": 4,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/PlainApiActions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/PlainApiActions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/http/PlainApiActions.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,16 +15,16 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.http\n+package talkyard.server.http\n \n import org.apache.commons.codec.{binary => acb}\n import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.RateLimits.NoRateLimits\n import debiki.dao.{LoginNotFoundException, SiteDao}\n-import ed.server._\n-import ed.server.security._\n+import talkyard.server._\n+import talkyard.server.security._\n import java.{util => ju}\n import play.api.mvc._\n import scala.concurrent.{ExecutionContext, Future}\n@@ -280,9 +280,10 @@ class PlainApiActions(\n       val secretKey = colonPassword.drop(1)\n \n       // Could make username configurable in Play Fmw config, and on the API secrets\n+      HACK // 1/2: Hardcoding the email webhooks endpoint below (dupl path).\n       if (username == \"emailwebhooks\") {\n         throwForbiddenIf(globals.config.emailWebhooksApiSecret.isNot(secretKey),\n-              \"TyE60MREH35\", \"Wrong password\")\n+              \"TyE60MREH35\", \"Wrong handle-email API secret\")\n         throwForbiddenIf(request.path != \"/-/handle-email\", \"TyE406MSE35\", \"Wrong path\")\n \n         val sysbot = dao.getTheUser(SysbotUserId)\n@@ -291,6 +292,20 @@ class PlainApiActions(\n               SidOk(TySession.ApiSecretPart12, 0, Some(SysbotUserId)),\n               XsrfOk(\"_email_webhook_\"), None, block)\n       }\n+      HACK // 2/2: Hardcoding the create site API endpoint (dupl path).\n+      if (username == \"createsite\") {\n+        throwForbiddenIf(globals.config.createSiteApiSecret.isNot(secretKey),\n+              \"TyE70MREH36\", \"Wrong create site API secret\")\n+        val correctPath = \"/-/v0/create-site\"\n+        throwForbiddenIf(request.path != correctPath, \"TyE406MSE36\", s\"Wrong URL path, is: ${\n+              request.path}, should be: $correctPath\")\n+\n+        val sysbot = dao.getTheUser(SysbotUserId)\n+        return runBlockIfAuthOk(request, site, dao, Some(sysbot),\n+              Some(TySession.singleApiCallSession(asPatId = SysbotUserId)),\n+              SidOk(TySession.ApiSecretPart12, 0, Some(SysbotUserId)),\n+              XsrfOk(\"_create_site_\"), None, block)\n+      }\n \n       DO_AFTER // 2021-08-01 enable this always. Test in dev-test first, for now.\n       throwForbiddenIf(Globals.isDevOrTest && !dao.getWholeSiteSettings().enableApi,",
      "previous_filename": "appsv/server/ed/server/http/PlainApiActions.scala"
    },
    {
      "sha": "acd6a0984bf14db8da1e0b73bcde7deca0987b36",
      "filename": "appsv/server/talkyard/server/http/SafeActions.scala",
      "status": "renamed",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/SafeActions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/SafeActions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/http/SafeActions.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,14 +15,14 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.http\n+package talkyard.server.http\n \n import com.debiki.core._\n import com.debiki.core.DbDao.EmailAddressChangedException\n import com.debiki.core.Prelude._\n import org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace\n import debiki._\n-import ed.server.security.EdSecurity\n+import talkyard.server.security.EdSecurity\n import play.api.mvc._\n import play.api.libs.typedmap.TypedKey\n import scala.concurrent.{ExecutionContext, Future}",
      "previous_filename": "appsv/server/ed/server/http/SafeActions.scala"
    },
    {
      "sha": "0e38f367b865a31c765dae311981cac349937211",
      "filename": "appsv/server/talkyard/server/http/package.scala",
      "status": "modified",
      "additions": 67,
      "deletions": 0,
      "changes": 67,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/http/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/http/package.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -1,7 +1,30 @@\n+/**\n+ * Copyright (c) 2013-2015, 2021 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n package talkyard.server\n \n import com.debiki.core._\n+import debiki.dao.SiteDao\n+import talkyard.server.security.{BrowserId, SidStatus, XsrfOk}\n import play.api.http.{HeaderNames => play_HeaderNames}\n+import play.api.libs.json.{JsValue, JsObject}\n+import play.api.mvc.{Request => p_Request, Result => p_Result, RequestHeader => p_RequestHeader}\n+\n+\n \n package object http {\n \n@@ -53,4 +76,48 @@ package object http {\n     val Downlink = \"downlink\"\n   }\n \n+\n+\n+  def OkSafeJson(json: JsObject): p_Result =\n+    _root_.controllers.Utils.OkApiJson(json)\n+\n+\n+  case class AuthnReqHeaderImpl(\n+    site: SiteBrief,\n+    anyTySession: Opt[TySession],\n+    sid: SidStatus,\n+    xsrfToken: XsrfOk,\n+    browserId: Opt[BrowserId],\n+    user: Opt[Pat],\n+    dao: SiteDao,\n+    request: p_RequestHeader) extends AuthnReqHeader {\n+  }\n+\n+\n+  case class ApiRequest[A](   // RENAME to AuthnReqImpl\n+    site: SiteBrief,\n+    anyTySession: Opt[TySession],\n+    sid: SidStatus,\n+    xsrfToken: XsrfOk,\n+    browserId: Opt[BrowserId],\n+    user: Opt[Pat],\n+    dao: SiteDao,\n+    request: p_Request[A]) extends DebikiRequest[A] {\n+  }\n+\n+\n+  /** A request with no post data. */\n+  type GetRequest = ApiRequest[Unit]\n+\n+  type PageGetRequest = PageRequest[Unit]\n+\n+  /** A request with form data.\n+    *\n+    * @deprecated Use ApiRequest[JsonOrFormDataBody] instead — no, use JsonPostRequest.\n+    */\n+  type FormDataPostRequest = ApiRequest[Map[String, Seq[String]]]\n+\n+  type JsonPostRequest = ApiRequest[JsValue]\n+\n+\n }"
    },
    {
      "sha": "2b3be8b0b2329acb29897bdc06e0efe88570c07f",
      "filename": "appsv/server/talkyard/server/liftweb/HtmlParser.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/liftweb/HtmlParser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/liftweb/HtmlParser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/liftweb/HtmlParser.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,7 +20,7 @@\n  * limitations under the License.\n  */\n \n-package ed.server.liftweb\n+package talkyard.server.liftweb\n \n import scala.xml.{PCData => _, _}\n import parsing._",
      "previous_filename": "appsv/server/ed/server/liftweb/HtmlParser.scala"
    },
    {
      "sha": "4ac45b2ad416ea5f6633adc71037da16cb970ead",
      "filename": "appsv/server/talkyard/server/liftweb/PCDataMarkupParser.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/liftweb/PCDataMarkupParser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/liftweb/PCDataMarkupParser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/liftweb/PCDataMarkupParser.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -22,7 +22,7 @@\n \n //package net.liftweb\n //package util\n-package ed.server.liftweb\n+package talkyard.server.liftweb\n //import net.liftweb.util._\n \n //import common._",
      "previous_filename": "appsv/server/ed/server/liftweb/PCDataMarkupParser.scala"
    },
    {
      "sha": "aeecc853005f257d8881cd13edd908813d765b2e",
      "filename": "appsv/server/talkyard/server/notf/NotfHtmlRenderer.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/notf/NotfHtmlRenderer.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/notf/NotfHtmlRenderer.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/notf/NotfHtmlRenderer.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.notf\n+package talkyard.server.notf\n \n import com.debiki.core.Prelude._\n import com.debiki.core._",
      "previous_filename": "appsv/server/ed/server/notf/NotfHtmlRenderer.scala"
    },
    {
      "sha": "77a72802bfb77c0c6016255f432357e26290f1a1",
      "filename": "appsv/server/talkyard/server/notf/NotificationGenerator.scala",
      "status": "renamed",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/notf/NotificationGenerator.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/notf/NotificationGenerator.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/notf/NotificationGenerator.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,14 +15,14 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.notf\n+package talkyard.server.notf\n \n import com.debiki.core.Prelude._\n import com.debiki.core._\n import debiki._\n import debiki.Globals.isDevOrTest\n import debiki.EdHttp.throwForbiddenIf\n-import ed.server.notf.NotificationGenerator._\n+import talkyard.server.notf.NotificationGenerator._\n import scala.collection.{immutable, mutable}\n import scala.util.matching.Regex\n ",
      "previous_filename": "appsv/server/ed/server/notf/NotificationGenerator.scala"
    },
    {
      "sha": "ba04d5acec8647143b6669fec3e7526296e005e4",
      "filename": "appsv/server/talkyard/server/notf/NotifierActor.scala",
      "status": "renamed",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/notf/NotifierActor.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/notf/NotifierActor.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/notf/NotifierActor.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,14 +15,14 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.notf\n+package talkyard.server.notf\n \n import akka.actor._\n import com.debiki.core.Prelude._\n import com.debiki.core._\n import debiki.DatabaseUtils.isConnectionClosedBecauseTestsDone\n import debiki.dao.{SiteDao, SiteDaoFactory, SystemDao}\n-import ed.server.notf.NotifierActor._\n+import talkyard.server.notf.NotifierActor._\n import scala.collection.{immutable, mutable}\n import scala.collection.mutable.ArrayBuffer\n import scala.concurrent.ExecutionContext\n@@ -130,7 +130,7 @@ class NotifierActor (val systemDao: SystemDao, val siteDaoFactory: SiteDaoFactor\n   }\n \n \n-  CLEAN_UP; REFACTOR // break out to ed.server.utx.SomeNewClass? Later...  UtxDao maybe?\n+  CLEAN_UP; REFACTOR // break out to talkyard.server.utx.SomeNewClass? Later...  UtxDao maybe?\n   // Answer: This can instead be an external bot / server [bot_api], which once a day\n   // looks at new signups (queries Ty's API) and sends emails.\n   private def createAndSendUtxReminderEmails(): Unit = {  // [plugin]",
      "previous_filename": "appsv/server/ed/server/notf/NotifierActor.scala"
    },
    {
      "sha": "6423bd3ec6a347c059dfaf4dad1ae73e814ede0f",
      "filename": "appsv/server/talkyard/server/package.scala",
      "status": "modified",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/package.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -1,7 +1,26 @@\n+/**\n+ * Copyright (c) 2016, 2021 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n package talkyard\n \n import com.debiki.core._\n import debiki.Globals\n+import play.api.libs.json._\n+\n \n package object server {\n \n@@ -85,4 +104,40 @@ package object server {\n     }\n   }\n \n+\n+  val Whatever = \"*\"\n+\n+  val UploadsUrlBasePath = \"/-/u/\"\n+\n+\n+  /** @param html Html for the whole page.\n+    * @param unapprovedPostAuthorIds Ids of authors who have posted stuff that hasn't yet been\n+    *   approved. If one of these authors views the page, hens unapproved posts should\n+    *   be loaded too, so hen can edit them. (Normally, unapproved posts aren't loaded.)\n+    */\n+  case class RenderedPage(\n+    html: String,\n+    reactStoreJsonString: String,\n+    unapprovedPostAuthorIds: Set[UserId])\n+\n+\n+  REMOVE // ?\n+  implicit object WhenFormat extends Format[When] {\n+    def reads(json: JsValue): JsResult[When] = JsSuccess(When.fromMillis(json.as[Long]))\n+    def writes(when: When): JsValue = JsNumber(when.millis)\n+  }\n+\n+\n+  REMOVE // ?\n+  implicit object OptWhenFormat extends Format[Option[When]] {\n+    def reads(json: JsValue): JsResult[Option[When]] =\n+      if (json == JsNull) JsSuccess(None)\n+      else JsSuccess(Some(When.fromMillis(json.as[Long])))\n+\n+    def writes(when: Option[When]): JsValue = when match {\n+      case None => JsNull\n+      case Some(w) => JsNumber(w.millis)\n+    }\n+  }\n+\n }"
    },
    {
      "sha": "a07f6c19293e3f2e989f5fcd3f2b97a0fbc4463c",
      "filename": "appsv/server/talkyard/server/plugins/utx/UsabilityTestingExchangeController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/plugins/utx/UsabilityTestingExchangeController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/plugins/utx/UsabilityTestingExchangeController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/plugins/utx/UsabilityTestingExchangeController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,7 +21,7 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n-import ed.server._\n+import talkyard.server._\n import javax.inject.Inject\n import play.api.libs.json.JsValue\n import play.api.mvc.{Action, ControllerComponents, DiscardingCookie, Result}\n@@ -30,8 +30,8 @@ import scala.collection.mutable\n \n /** Saves Usability Testing Exchange tasks, and picks the next task to do.  [plugin]\n   */\n-class UsabilityTestingExchangeController @Inject()(cc: ControllerComponents, tyCtx: EdContext)\n-  extends EdController(cc, tyCtx) {\n+class UsabilityTestingExchangeController @Inject()(cc: ControllerComponents, tyCtx: TyContext)\n+  extends TyController(cc, tyCtx) {\n \n \n   def handleUsabilityTestingForm: Action[JsValue] = PostJsonAction("
    },
    {
      "sha": "fa42620adc4e1d9fae755883b2f6cfe29d0e8f6d",
      "filename": "appsv/server/talkyard/server/pop/PagePopularityCalculator.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/pop/PagePopularityCalculator.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/pop/PagePopularityCalculator.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/pop/PagePopularityCalculator.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.pop\n+package talkyard.server.pop\n \n import com.debiki.core._\n import scala.collection.{immutable, mutable}",
      "previous_filename": "appsv/server/ed/server/pop/PagePopularityCalculator.scala"
    },
    {
      "sha": "9348c344e53afc96bc0703a857693b6366bb5f4b",
      "filename": "appsv/server/talkyard/server/pop/PagePopularityDao.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/pop/PagePopularityDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/pop/PagePopularityDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/pop/PagePopularityDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.pop\n+package talkyard.server.pop\n \n import com.debiki.core._\n import debiki._",
      "previous_filename": "appsv/server/ed/server/pop/PagePopularityDao.scala"
    },
    {
      "sha": "8d4c6f5051acf2b5b00ae4d3b75534a95fe45dc9",
      "filename": "appsv/server/talkyard/server/pubsub/PubSub.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/pubsub/PubSub.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/pubsub/PubSub.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/pubsub/PubSub.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.pubsub\n+package talkyard.server.pubsub\n \n import akka.actor._\n import akka.pattern.ask",
      "previous_filename": "appsv/server/ed/server/pubsub/PubSub.scala"
    },
    {
      "sha": "2874dc9ba16610e1db579159f63296bdf79127e5",
      "filename": "appsv/server/talkyard/server/pubsub/SubscriberController.scala",
      "status": "renamed",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/pubsub/SubscriberController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/pubsub/SubscriberController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/pubsub/SubscriberController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,17 +15,17 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.pubsub\n+package talkyard.server.pubsub\n \n import akka.stream.scaladsl.Flow\n import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.EdHttp._\n import debiki._\n import talkyard.server.JsX\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n-import ed.server.security.CheckSidAndXsrfResult\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n+import talkyard.server.security.CheckSidAndXsrfResult\n import javax.inject.Inject\n import org.scalactic.{Bad, Good, Or}\n import play.{api => p}\n@@ -40,8 +40,8 @@ import talkyard.server.pubsub.WebSocketMessageHandler\n \n /** Authorizes and subscribes a user to pubsub messages.\n   */\n-class SubscriberController @Inject()(cc: ControllerComponents, tyCtx: EdContext)\n-  extends EdController(cc, tyCtx) with TyLogging {\n+class SubscriberController @Inject()(cc: ControllerComponents, tyCtx: TyContext)\n+  extends TyController(cc, tyCtx) with TyLogging {\n \n   import context.globals\n ",
      "previous_filename": "appsv/server/ed/server/pubsub/SubscriberController.scala"
    },
    {
      "sha": "a2046ef9c48f933055a0ae402b4ff3775ec3eee1",
      "filename": "appsv/server/talkyard/server/pubsub/WebSocketMessageHandler.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/pubsub/WebSocketMessageHandler.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/pubsub/WebSocketMessageHandler.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/pubsub/WebSocketMessageHandler.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -23,8 +23,8 @@ import akka.stream.scaladsl.{Flow, Sink, Source, SourceQueueWithComplete}\n import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n-import ed.server.pubsub.UserConnected\n-import ed.server.security.XsrfOk\n+import talkyard.server.pubsub.UserConnected\n+import talkyard.server.security.XsrfOk\n import play.{api => p}\n import p.libs.json.{JsString, JsValue}\n import scala.concurrent.Future"
    },
    {
      "sha": "066e5db5d98cd78af7a69eb794c753ca72f51037",
      "filename": "appsv/server/talkyard/server/security/ReservedNames.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/security/ReservedNames.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/security/ReservedNames.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/security/ReservedNames.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.security\n+package talkyard.server.security\n \n import com.debiki.core.Prelude._\n import com.debiki.core.Validation",
      "previous_filename": "appsv/server/ed/server/security/ReservedNames.scala"
    },
    {
      "sha": "6ff2f1543135bc1c3a277ac56aa58d9b520e2996",
      "filename": "appsv/server/talkyard/server/security/package.scala",
      "status": "renamed",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/security/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/security/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/security/package.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,12 +15,12 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.security\n+package talkyard.server.security\n \n import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.{EdHttp, EffectiveSettings, Globals}\n-import ed.server.http.{DebikiRequest, JsonOrFormDataBody}\n+import talkyard.server.http.{DebikiRequest, JsonOrFormDataBody}\n import play.api.mvc.{Cookie, DiscardingCookie, RequestHeader}\n import scala.util.Try\n import EdSecurity._\n@@ -30,7 +30,7 @@ import play.api.libs.json.{JsObject, JsString, JsValue}\n import talkyard.server.TyLogger\n import talkyard.server.sess.SessionSiteDaoMixin\n import talkyard.server.http\n-import ed.server.http.AuthnReqHeader\n+import talkyard.server.http.AuthnReqHeader\n \n \n sealed abstract class XsrfStatus { def isOk = false }",
      "previous_filename": "appsv/server/ed/server/security/package.scala"
    },
    {
      "sha": "086898a359f7822f0b0d142868e5810092b9d76a",
      "filename": "appsv/server/talkyard/server/sess/SessionController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sess/SessionController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sess/SessionController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/sess/SessionController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,7 +21,7 @@ import com.debiki.core._\n import debiki.RateLimits\n import debiki.dao.SiteDao\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n+import talkyard.server.{TyContext, TyController}\n import controllers.Utils.OkApiJson\n import play.api.libs.json._\n import javax.inject.Inject\n@@ -30,8 +30,8 @@ import talkyard.server.JsX._\n import debiki.JsonUtils._\n \n \n-class SessionController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class SessionController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n \n   def listSessions(patId: PatId): Action[U] = GetAction { req =>"
    },
    {
      "sha": "ec9df5a6539a87c039970a1ba3dd304bffa2d931",
      "filename": "appsv/server/talkyard/server/sess/SessionSiteDaoMixin.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sess/SessionSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sess/SessionSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/sess/SessionSiteDaoMixin.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -131,7 +131,7 @@ trait SessionSiteDaoMixin {\n   def terminateSessionForCurReq(req: play.api.mvc.RequestHeader): U = {\n     REFACTOR // Move these cookie names — and their whole file — to this pkg.\n     // Thereafter, can remove this import.\n-    import ed.server.security.EdSecurity._\n+    import talkyard.server.security.EdSecurity._\n \n     val sidPart12Maybe3FromHeader: Opt[St] = req.headers.get(SessionIdHeaderName)\n     val sidPart123FromCookie: Opt[St] ="
    },
    {
      "sha": "98c594c95689439f58f8202aec81dc0f4b2df5b2",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatchController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sitepatch/SitePatchController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sitepatch/SitePatchController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/sitepatch/SitePatchController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,8 +21,8 @@ import com.debiki.core.Prelude._\n import com.debiki.core._\n import debiki._\n import debiki.EdHttp._\n-import ed.server._\n-import ed.server.http.DebikiRequest\n+import talkyard.server._\n+import talkyard.server.http.DebikiRequest\n import javax.inject.Inject\n import play.api._\n import play.api.libs.json._\n@@ -39,8 +39,8 @@ import talkyard.server.JsX.JsStringOrNull\n   *\n   * Search for [readlater] for stuff ignored right now.\n   */\n-class SitePatchController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class SitePatchController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.globals\n   import context.security"
    },
    {
      "sha": "e4bbd022157a25b5ebeea0b2107d83384e154302",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatchMaker.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sitepatch/SitePatchMaker.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sitepatch/SitePatchMaker.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/sitepatch/SitePatchMaker.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -21,7 +21,7 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.dao.{ReadOnlySiteDao, SiteDao}\n import debiki.{JsonMaker, Settings2}\n-import ed.server._\n+import talkyard.server._\n import play.api.libs.json._\n import scala.collection.mutable\n import scala.collection.immutable\n@@ -35,7 +35,7 @@ import talkyard.server.JsX._\n   *\n   * Split into two: SitePatchMaker and ActionBatchResponseMaker? [ACTNPATCH]\n   */\n-case class SitePatchMaker(context: EdContext) {\n+case class SitePatchMaker(context: TyContext) {\n \n   import context.globals\n "
    },
    {
      "sha": "14ad2893b81af9d12cc9048b22aa9c4bd6884eb7",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatchParser.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sitepatch/SitePatchParser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sitepatch/SitePatchParser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/sitepatch/SitePatchParser.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -25,7 +25,7 @@ import com.debiki.dao.rdb.PostsSiteDaoMixin\n import debiki.JsonUtils._\n import debiki._\n import debiki.EdHttp._\n-import ed.server._\n+import talkyard.server._\n import java.{util => ju}\n import org.scalactic._\n import play.api.libs.json._\n@@ -44,7 +44,7 @@ import talkyard.server.JsX\n   *\n   * Search for [readlater] for stuff ignored right now.\n   */\n-case class SitePatchParser(context: EdContext) {\n+case class SitePatchParser(context: TyContext) {\n \n   import context.globals\n   import context.security"
    },
    {
      "sha": "72e5190587e6fdb6d2dbc3a3535224e538d14197",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatcher.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sitepatch/SitePatcher.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/sitepatch/SitePatcher.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/sitepatch/SitePatcher.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -23,8 +23,8 @@ import debiki.dao.{CatAlgs, UseTx}\n import debiki.EdHttp._\n import debiki.{SpecialContentPages, TextAndHtml}\n import debiki.dao.{PageDao, PagePartsDao, SettingsDao, SiteDao}\n-import ed.server.notf.NotificationGenerator\n-import ed.server.pop.PagePopularityDao\n+import talkyard.server.notf.NotificationGenerator\n+import talkyard.server.pop.PagePopularityDao\n import org.jsoup.Jsoup\n import scala.collection.immutable\n import scala.collection.mutable"
    },
    {
      "sha": "eeb6218e30be849b5668a954728d5335d3c14cef",
      "filename": "appsv/server/talkyard/server/spam/QuickSpamCheckDao.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/spam/QuickSpamCheckDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/spam/QuickSpamCheckDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/spam/QuickSpamCheckDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.spam\n+package talkyard.server.spam\n \n import com.debiki.core._\n import com.debiki.core.Prelude._",
      "previous_filename": "appsv/server/ed/server/spam/QuickSpamCheckDao.scala"
    },
    {
      "sha": "da65c4e0e8c273cce5b5e28049396c4f2755f54e",
      "filename": "appsv/server/talkyard/server/spam/SpamCheckActor.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/spam/SpamCheckActor.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/spam/SpamCheckActor.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/spam/SpamCheckActor.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.spam\n+package talkyard.server.spam\n \n import akka.actor._\n import com.debiki.core._",
      "previous_filename": "appsv/server/ed/server/spam/SpamCheckActor.scala"
    },
    {
      "sha": "79e8eacfd759f76fcc2ce1d6a0f5a94b667c3567",
      "filename": "appsv/server/talkyard/server/spam/SpamChecker.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/spam/SpamChecker.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/spam/SpamChecker.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/spam/SpamChecker.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.spam\n+package talkyard.server.spam\n \n import com.debiki.core._\n import com.debiki.core.Prelude._",
      "previous_filename": "appsv/server/ed/server/spam/SpamChecker.scala"
    },
    {
      "sha": "a6923923ed6eb0f116dddf72efd9fd5c8eea9d0a",
      "filename": "appsv/server/talkyard/server/summaryemails/SummaryEmailsDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/summaryemails/SummaryEmailsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/summaryemails/SummaryEmailsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/summaryemails/SummaryEmailsDao.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -217,7 +217,7 @@ trait SummaryEmailsDao {\n         </ul>\n         <p>This email is sent if we haven't seen you in a while.</p>\n         {\n-          ed.server.util.email.makeFooter(\n+           talkyard.server.util.email.makeFooter(\n             regardsFromName = siteName,\n             regardsFromUrl = origin,\n             unsubUrl = origin + routes.UnsubFromSummariesController.showUnsubForm(email.id).url)"
    },
    {
      "sha": "10a232984eedcd96ae69c28b446075898714d275",
      "filename": "appsv/server/talkyard/server/summaryemails/UnsubFromSummariesController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/summaryemails/UnsubFromSummariesController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/summaryemails/UnsubFromSummariesController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/summaryemails/UnsubFromSummariesController.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -19,8 +19,8 @@ package talkyard.server.summaryemails\n \n import com.debiki.core._\n import debiki.EdHttp._\n-import ed.server.{EdContext, EdController}\n-import ed.server.http._\n+import talkyard.server.{TyContext, TyController}\n+import talkyard.server.http._\n import javax.inject.Inject\n import play.api.mvc.{Action, ControllerComponents}\n import UnsubFromSummariesController._\n@@ -51,8 +51,8 @@ object UnsubFromSummariesController {\n  * web sites, in the Referer header. So only use each email id\n  * for one distinct non-repeatable task?\n  */\n-class UnsubFromSummariesController @Inject()(cc: ControllerComponents, edContext: EdContext)\n-  extends EdController(cc, edContext) {\n+class UnsubFromSummariesController @Inject()(cc: ControllerComponents, edContext: TyContext)\n+  extends TyController(cc, edContext) {\n \n   import context.safeActions.ExceptionAction\n   import context.globals"
    },
    {
      "sha": "fe5456f267005092e3908278f248c74a8d34a620",
      "filename": "appsv/server/talkyard/server/util/package.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/util/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/appsv/server/talkyard/server/util/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/util/package.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server\n+package talkyard.server\n \n import com.debiki.core.Prelude._\n import com.debiki.core._",
      "previous_filename": "appsv/server/ed/server/util/package.scala"
    },
    {
      "sha": "0afa58aa3b1bdd1a8405b90b0233c8f36d3c0613",
      "filename": "build.sbt",
      "status": "modified",
      "additions": 15,
      "deletions": 10,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/build.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/build.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/build.sbt?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -54,14 +54,16 @@ val appDependencies = Seq(\n   // For some reason, withouth this, an older version gets used which throws\n   // an error because some dependencies use jackson 2.13.0 (and the others too,\n   // older 2.X evicted), but the older -module-scala wants 2.10 or something.\n-  \"com.fasterxml.jackson.module\" %% \"jackson-module-scala\" % \"2.13.0\",\n+  \"com.fasterxml.jackson.module\" %% \"jackson-module-scala\" % \"2.13.1\",\n \n   // OAuth2 and OIDC authentication.\n   Dependencies.Libs.scribeJava,\n   Dependencies.Libs.auth0JavaJwt,\n+  /*\n   // Deprecated:\n   \"com.mohiva\" %% \"play-silhouette\" % \"7.0.0\",\n   \"com.mohiva\" %% \"play-silhouette-crypto-jca\" % \"7.0.0\",\n+   */\n \n \n   Dependencies.Libs.jpasetoApi,\n@@ -78,26 +80,27 @@ val appDependencies = Seq(\n   caffeine,  // was: \"com.github.ben-manes.caffeine\" % \"caffeine\"\n   Dependencies.Libs.rediscala,\n   // Search engine, in https://mvnrepository.com.\n-  \"org.elasticsearch\" % \"elasticsearch\" % \"6.8.21\",\n-  \"org.elasticsearch.client\" % \"transport\" % \"6.8.21\",\n+  \"org.elasticsearch\" % \"elasticsearch\" % \"6.8.23\",\n+  \"org.elasticsearch.client\" % \"transport\" % \"6.8.23\",\n \n   Dependencies.Libs.apacheCommonsEmail,\n+  Dependencies.Libs.apacheCommonsLang3,\n   Dependencies.Libs.guava,\n   Dependencies.Libs.jsoup,\n   // Fluentd better understands json logs.\n   // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic\n-  \"ch.qos.logback\" % \"logback-classic\" % \"1.2.8\",\n+  \"ch.qos.logback\" % \"logback-classic\" % \"1.2.10\",\n   // https://mvnrepository.com/artifact/ch.qos.logback/logback-core\n-  \"ch.qos.logback\" % \"logback-core\" % \"1.2.8\",\n+  \"ch.qos.logback\" % \"logback-core\" % \"1.2.10\",\n   // Docs: https://github.com/logstash/logstash-logback-encoder/tree/logstash-logback-encoder-4.9\n   \"net.logstash.logback\" % \"logstash-logback-encoder\" % \"7.0.1\",\n   //\"org.kurochan\" %% \"logback-stackdriver-logging\" % \"0.0.1\",\n   // java.nio.file.Files.probeContentType doesn't work in Alpine Linux + JRE 8, so use\n   // Tika instead. It'll be useful anyway later if indexing PDF or MS Word docs.\n   // Dependencies.Libs.apacheTika\n-  \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.1.26\",\n-  \"io.jaegertracing\" % \"jaeger-client\" % \"0.32.0\",  // 1.6.0 exists now\n-  \"nl.grons\" %% \"metrics4-scala\" % \"4.1.19\",\n+  \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.2.7\",\n+  \"io.jaegertracing\" % \"jaeger-client\" % \"0.35.1\",  // 1.6.0 exists now\n+  \"nl.grons\" %% \"metrics4-scala\" % \"4.2.8\",\n   // JSR 305 is requried by Guava, at build time only (so specify \"provided\"\n   // so it won't be included in the JAR), or there's this weird error: \"\"\"\n   //   class file '...guava-13.0.1.jar(.../LocalCache.class)' is broken\n@@ -131,8 +134,8 @@ def mainSettings = List(\n \n   // Pin to >= 2.15, no, 2.16.\n   dependencyOverrides ++= Seq(\n-        \"org.apache.logging.log4j\" % \"log4j-api\" % \"2.16.0\",\n-        \"org.apache.logging.log4j\" % \"log4j-core\" % \"2.16.0\"),\n+        \"org.apache.logging.log4j\" % \"log4j-api\" % \"2.17.1\",\n+        \"org.apache.logging.log4j\" % \"log4j-core\" % \"2.17.1\"),\n \n   // Place tests in ./tests/app/ instead of ./test/, because there're other tests in\n   // ./tests/, namely security/ and e2e/, and having both ./test/ and ./tests/ seems confusing.\n@@ -148,6 +151,7 @@ def mainSettings = List(\n   Compile / TwirlKeys.compileTemplates / sourceDirectories :=\n         Seq({ (Compile / baseDirectory)(_ / \"appsv\" / \"server\") }.value),\n \n+  /*\n   // Silhouette needs com.atlassian.jwt:jwt-core and jwt-api, but there's a problem:\n   // \"\"\"the problem is that the jwt-lib is hosted on bintray.com and then mirrored to\n   // the typesafe.com repository. It seems that the typesafe repository uses a redirect\n@@ -158,6 +162,7 @@ def mainSettings = List(\n   resolvers :=\n     (\"Atlassian Releases\" at \"https://maven.atlassian.com/public/\") +:\n       Keys.resolvers.value,\n+  */\n \n   // This is the default. But keep anyway, because if needed later, then won't have to try to\n   // find out in which packages the stuff is located."
    },
    {
      "sha": "9c434e9bdb6b1d3d3370c1052aba54e6d2361532",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-editor/editor/editor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-editor/editor/editor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-editor/editor/editor.editor.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -2384,6 +2384,8 @@ export const Editor = createFactory<any, EditorState>({\n         case PageRole.Problem: what = t.e.ReportProblem; break;\n         case PageRole.Idea: what = t.e.SuggestIdea; break;\n         case PageRole.ToDo: what = \"Create a todo\"; break;\n+        // Show \"Chat\" for both these, and let one toggle need-to-join on/off later? UX SHOULD [JoinlessChat]\n+        case PageRole.JoinlessChat:\n         case PageRole.OpenChat: what = t.e.NewChat; break;\n         case PageRole.PrivateChat: what = t.e.NewPrivChat; break;\n         case PageRole.MindMap: what = \"Create a mind map page\"; break;\n@@ -2501,6 +2503,7 @@ export const Editor = createFactory<any, EditorState>({\n         case PageRole.Code:\n           saveButtonTitle = makeSaveTitle(t.e.Create, t.e.page);\n           break;\n+        case PageRole.JoinlessChat:\n         case PageRole.OpenChat:\n         case PageRole.PrivateChat:\n           saveButtonTitle = makeSaveTitle(t.e.Create, t.e.chat);\n@@ -2755,7 +2758,8 @@ const GuidelinesModal = createClassAndFactory({\n       rb.Modal({ show: this.props.isOpen, onHide: this.props.close,\n           dialogClassName: 'es-guidelines-modal' },\n         rb.ModalBody({}, body),\n-        rb.ModalFooter({}, Button({ onClick: this.props.close }, t.Okay))));\n+        rb.ModalFooter({},\n+          Button({ onClick: this.props.close, className: 'e_CloseGuidelinesB' }, t.Okay))));\n   }\n });\n "
    },
    {
      "sha": "6a223dfcad9143bdd3ec1c3ddd78d19472cc246a",
      "filename": "client/app-more/editor/PageRoleDropdown.more.ts",
      "status": "modified",
      "additions": 37,
      "deletions": 21,
      "changes": 58,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-more/editor/PageRoleDropdown.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-more/editor/PageRoleDropdown.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/editor/PageRoleDropdown.more.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -82,46 +82,57 @@ export var PageRoleDropdown = createComponent({\n     // Don't allow changing already existing topics, to chat topics, because chat\n     // topics are \"totally\" different from \"normal\" topics like\n     // discussions/ideas/questions etc. Chat topic types, may be selected only\n-    // when creating a new page.\n-    const canChangeToChat: boolean = !props.pageExists;\n+    // 1) when creating a new page, or 2) toggling between AnyoneChat and StandardChat.\n+    const isChatAlready: Bo = page_isChat(pageRole) && props.pageExists;\n \n     const dropdownButton =\n       Button({ onClick: this.open, ref: 'dropdownButton', className: 'esTopicType_dropdown' },\n         pageRole_toIconString(pageRole), ' ', r.span({ className: 'caret' }));\n \n-    const discussionOption =\n+    const discussionOption = isChatAlready ? null :\n       ExplainingListItem({ onSelect: this.onSelect, id: 'te_DiscO',\n         activeEventKey: pageRole, eventKey: PageRole.Discussion,\n         title: PageRole_Discussion_IconString,\n         text: t.pt.DiscussionExpl });\n \n-    const questionOption =\n+    const questionOption = isChatAlready ? null :\n       ExplainingListItem({ onSelect: this.onSelect, id: 'e2eTTD_QuestionO',\n         activeEventKey: pageRole, eventKey: PageRole.Question,\n         title: PageRole_Question_IconString,\n         text: r.span({}, t.pt.QuestionExpl) });\n \n-    const problemOption =\n+    const problemOption = isChatAlready ? null :\n       ExplainingListItem({ onSelect: this.onSelect, id: 'e2eTTD_ProblemO',\n         activeEventKey: pageRole, eventKey: PageRole.Problem,\n         title: PageRole_Problem_IconString,\n         text: t.pt.ProblExpl });\n \n-    const ideaOption =\n+    const ideaOption = isChatAlready ? null :\n       ExplainingListItem({ onSelect: this.onSelect, id: 'e2eTTD_IdeaO',\n         activeEventKey: pageRole, eventKey: PageRole.Idea,\n         title: PageRole_Idea_IconString,\n         text: t.pt.IdeaExpl });\n \n-    const chatOption = !canChangeToChat ||\n-      user_isGuest(me) || settings.enableChat === false ? null :\n-      ExplainingListItem({ onSelect: this.onSelect, id: 'e2eTTD_OpenChatO',\n-        activeEventKey: pageRole, eventKey: PageRole.OpenChat,\n-        title: PageRole_OpenChat_IconString,\n-        text: t.pt.ChatExpl });\n-\n-    const privateChatOption = !canChangeToChat ||\n-      !isStaff(me) || props.hideStaffOnly || settings.enableChat === false ? null :\n+    // const wikiOption = ...\n+\n+    // Toggling between the two open chat types, AnyoneChat and StandardChat, is fine.\n+    const chatOptions = (props.pageExists && !page_isOpenChat(pageRole)) ||\n+            user_isGuest(me) || settings.enableChat === false ? null :\n+        rFr({},\n+          ExplainingListItem({ onSelect: this.onSelect, id: 'e2eTTD_OpenChatO',\n+            activeEventKey: pageRole, eventKey: PageRole.OpenChat,\n+            title: PageRole_OpenChat_IconString,\n+            text: t.pt.ChatExpl }),\n+\n+          ExplainingListItem({ onSelect: this.onSelect, id: 'e_JoinlessChatO',\n+            activeEventKey: pageRole, eventKey: PageRole.JoinlessChat,\n+            title: PageRole_JoinlessChat_IconString,\n+            // Create t.pt.JoinlessChatExpl ?\n+            text: \"Anyone can post, without joining the chat channel \" +  // I18N\n+                  \"— there's no list of channel members\" }));\n+\n+    const privateChatOption = props.pageExists ||\n+            !isStaff(me) || props.hideStaffOnly || settings.enableChat === false ? null :\n       ExplainingListItem({ onSelect: this.onSelect, id: 'e2eTTD_PrivChatO',\n         activeEventKey: pageRole, eventKey: PageRole.PrivateChat,\n         title: PageRole_PrivateChat_IconString,\n@@ -137,15 +148,16 @@ export var PageRoleDropdown = createComponent({\n \n     // ----- Staff only\n \n-    const showMore = !isStaff(me) || props.hideStaffOnly || showAllOptions ? null :\n+    const showMore =\n+            !isStaff(me) || props.hideStaffOnly || showAllOptions || isChatAlready ?  null :\n       ExplainingListItem({ onClick: this.showAllOptions,\n         title: r.span({ className: 'esPageRole_showMore' }, t.MoreDots) });\n \n \n     let staffOnlyDivider;\n     let infoPageOption;\n \n-    if (isStaff(me) && !props.hideStaffOnly) {\n+    if (isStaff(me) && !props.hideStaffOnly && !isChatAlready) {\n       staffOnlyDivider =\n         r.div({ className: 'esDropModal_header' }, \"Only staff can create these:\");\n \n@@ -165,7 +177,7 @@ export var PageRoleDropdown = createComponent({\n     let adminOnlyDivider;\n     let formOption;\n     let customHtmlPageOption;\n-    if (me.isAdmin && showAllOptions) {\n+    if (me.isAdmin && showAllOptions && !isChatAlready) {\n       adminOnlyDivider = r.div({ className: 'esDropModal_header' }, \"Only for admins:\");\n \n       formOption =  // [6JK8WHI3]\n@@ -194,7 +206,7 @@ export var PageRoleDropdown = createComponent({\n           questionOption,\n           problemOption,\n           ideaOption,\n-          chatOption,\n+          chatOptions,\n           //wikiMindMap,\n \n           staffOnlyDivider,\n@@ -208,7 +220,7 @@ export var PageRoleDropdown = createComponent({\n           customHtmlPageOption));\n \n     return (\n-      rFragment({},\n+      rFr({},\n         dropdownButton,\n         dropdownModal));\n   }\n@@ -225,7 +237,8 @@ export function forumTopicType_toEnSingSt(pageType: PageType): St {\n     case PageRole.Idea: return \"idea\";\n     case PageRole.EmbeddedComments: // fall through\n     case PageRole.Discussion: return \"discussion\";\n-    case PageRole.OpenChat: return \"chat\";\n+    case PageRole.JoinlessChat: return \"joinless chat\";\n+    case PageRole.OpenChat: return \"open chat\";\n     default:\n       // @ifdef DEBUG\n       die(`Bad page role: ${pageType} [TyE52PK75R]`);\n@@ -259,6 +272,7 @@ export function pageRole_toIconString(pageRole: PageRole) {\n     case PageRole.MindMap: return PageRole_MindMap_IconString;\n     case PageRole.Discussion: return PageRole_Discussion_IconString;\n     case PageRole.FormalMessage: return t.MessageN;\n+    case PageRole.JoinlessChat: return PageRole_JoinlessChat_IconString;\n     case PageRole.OpenChat: return PageRole_OpenChat_IconString;\n     case PageRole.PrivateChat: return PageRole_PrivateChat_IconString;\n     case PageRole.Form: return PageRole_Form_IconString;\n@@ -278,6 +292,8 @@ var PageRole_Idea_IconString = r.span({ className: iconFor(PageRole.Idea) }, t.I\n var PageRole_MindMap_IconString = r.span({ className: iconFor(PageRole.MindMap) }, \"Mind Map\");\n \n var PageRole_Todo_IconString = r.span({ className: iconFor(PageRole.ToDo) }, \"Todo\");\n+var PageRole_JoinlessChat_IconString = r.span({ className: iconFor(PageRole.JoinlessChat) },\n+      \"Anyone Chat\");  // I18N\n var PageRole_OpenChat_IconString = r.span({ className: iconFor(PageRole.OpenChat) }, t.ChatN);\n var PageRole_PrivateChat_IconString = r.span({ className: iconFor(PageRole.PrivateChat) }, t.pt.PrivChat);\n "
    },
    {
      "sha": "27c7d142e31ae67be2a02364b353d5860f3611e4",
      "filename": "client/app-more/login/login-dialog.more.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-more/login/login-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-more/login/login-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/login/login-dialog.more.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -286,7 +286,11 @@ const LoginDialog = createClassAndFactory({\n         afterLoginCallback: state.afterLoginCallback,\n         setChildDialog: this.setChildDialog,\n         childDialog: state.childDialog,\n-        closeDialog: this.close,\n+        closeDialog: (closeAll?: 'CloseAllLoginDialogs') => {\n+          if (!state.preventClose) {\n+            this.close(closeAll);\n+          }\n+        },\n         isLoggedIn: state.isLoggedIn,\n         switchDialog: this.switchDialog,\n         store: state.store } as LoginDialogContentProps);\n@@ -656,7 +660,7 @@ function ExtIdpAuthnBtn(props: ExtIdpAuthnBtnProps) {\n     // (This parameter tells the server to set a certain cookie. Setting it here\n     // instead has no effect, don't know why.)\n     const mayNotCreateUser =\n-            props.loginReason === 'LoginToAdministrate' ? 'mayNotCreateUser&' : '';\n+            props.loginReason === LoginReason.LoginToAdministrate ? 'mayNotCreateUser&' : '';\n \n     // A bit weird, just now when migrating to ScribeJava.\n     let useServerGlobalIdp = false;\n@@ -800,6 +804,8 @@ const PasswordLoginDialogContent = createClassAndFactory({\n         r.a({ href: linkToResetPassword(),\n             // Once the password has been reset, the user will be logged in automatically. Then\n             // it's confusing if this dialog is still open, so close it on click. [5KWE02X]\n+            // (Unless pat is in the admin area, or the site is private — because then there'd\n+            // be nothing to see, if closing the login dialog. See:  preventClose: Bo, above.)\n             // UX COULD show reset-pwd input in a dialog directly here instead, don't want it\n             // on a separate page.\n             onClick: () => this.props.closeDialog('CloseAllLoginDialogs'),"
    },
    {
      "sha": "7ce4bf7f971dc44f0337126d7a44596daad6b8d7",
      "filename": "client/app-slim/forum/forum.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/forum/forum.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/forum/forum.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/forum/forum.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -2007,7 +2007,7 @@ function makeTitle(topic: Topic, className: string, settings: SettingsVisibleCli\n       title = r.span({}, r.span({ className: iconClass }, title));\n     }\n   }\n-  else if (topic.pageRole === PageRole.OpenChat) {\n+  else if (page_isOpenChat(topic.pageRole)) {\n     if (showIcons) {\n       tooltip = t.ft.TitleChat;\n       title = r.span({}, r.span({ className: 'icon-chat' }), title);"
    },
    {
      "sha": "d8c068233794d5e948c30cf9d9f3490e01bb69a4",
      "filename": "client/app-slim/page-methods.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/page-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/page-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page-methods.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -64,7 +64,7 @@ export function page_findPostById(page: Page, postId: PostId): Post | undefined\n \n export function page_mayChangeRole(pageRole: PageRole): boolean {\n   // Sync with Scala [6KUW204]\n-  return !isSection(pageRole) && !page_isChat(pageRole) && !page_isPrivateGroup(pageRole) &&\n+  return !isSection(pageRole) && !page_isPrivateGroup(pageRole) &&\n       pageRole !== PageRole.About &&\n       pageRole !== PageRole.Code &&\n       pageRole !== PageRole.SpecialContent;\n@@ -97,6 +97,7 @@ export function pageRole_iconClass(pageRole: PageRole): string {\n     case PageRole.MindMap: return 'icon-sitemap';\n     case PageRole.Discussion: return 'icon-comment-empty';\n     case PageRole.FormalMessage: return 'icon-mail';\n+    case PageRole.JoinlessChat: // same icon\n     case PageRole.OpenChat: return 'icon-chat';\n     case PageRole.PrivateChat: return 'icon-lock';\n     case PageRole.Form: return 'icon-th-list';"
    },
    {
      "sha": "f6b09d900356bc5243a4a8287d9142483994cd39",
      "filename": "client/app-slim/page/chat.styl",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/page/chat.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/page/chat.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/chat.styl?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -142,14 +142,17 @@ html.es-chat\n \n .esC_Edtr\n   margin-top: 15px;\n-  padding-bottom: 7px;\n-  background: white;\n   overflow: hidden; // the username autocomplete might overflow [J7UKFBW]\n+  padding: 9px 10px 10px;\n+  border-top: 1px solid hsl(0deg 0% 86%);\n+  background: hsl(0deg 0% 93.7%);\n \n .esC_Edtr_textarea\n   width: 100%;\n-  border-radius: 4px;\n   min-height: 60px;\n+  padding: 2px 2px 0px 3px;\n+  margin: 0px;\n+  border-color: hsl(0 0% 73%);\n \n .esC_Edtr_Bs\n   display: flex;"
    },
    {
      "sha": "982f5ad4d2682258a7d1c626f35e548e24da3994",
      "filename": "client/app-slim/page/chat.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/page/chat.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/page/chat.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/chat.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -54,7 +54,7 @@ export const ChatMessages = createComponent({\n     const store: Store = this.props.store;\n     const page: Page = store.currentPage;\n     const isChatMember = _.some(store.currentPage.pageMemberIds, id => id === store.me.id);\n-    const editorOrJoinButton = isChatMember\n+    const editorOrJoinButton = isChatMember || page.pageRole === PageRole.JoinlessChat\n         ? ChatMessageEditor({ store: store, scrollDownToViewNewMessage: this.scrollDown })\n         : JoinChatButton({});\n     return ("
    },
    {
      "sha": "4c9abbd74074e550754f540ec27055a0f789584a",
      "filename": "client/app-slim/page/discussion.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/page/discussion.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/page/discussion.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/discussion.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -500,7 +500,7 @@ export const Title = createComponent({\n         iconClass = 'icon-mail';\n         tooltip = t.d.TooltipPersMsg;\n       }\n-      else if (page.pageRole === PageRole.OpenChat) {\n+      else if (page_isOpenChat(page.pageRole)) {\n         iconClass = 'icon-chat';\n         tooltip = t.d.TooltipChat;\n       }"
    },
    {
      "sha": "6fba79084e463dcaa2ee7cc48ed921c8a3db6b80",
      "filename": "client/app-slim/rules.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/rules.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/rules.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/rules.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -34,8 +34,14 @@ export function mayIndeed() {\n }\n \n \n-export function page_isChat(pageRole: PageRole): boolean {\n-  return pageRole === PageRole.OpenChat || pageRole === PageRole.PrivateChat;\n+export function page_isOpenChat(pageRole: PageType): Bo {\n+  return pageRole === PageRole.JoinlessChat ||\n+          pageRole === PageRole.OpenChat;\n+}\n+\n+\n+export function page_isChat(pageRole: PageType): Bo {\n+  return page_isOpenChat(pageRole) || pageRole === PageRole.PrivateChat;\n }\n \n // Hmm now there's a Discussion topic type (= page role), then page_isDiscussion is an a"
    },
    {
      "sha": "f1027df348d0544e52179b7a2b7ce6d1f184d672",
      "filename": "client/app-slim/sidebar/sidebar.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/sidebar/sidebar.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/sidebar/sidebar.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/sidebar/sidebar.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -401,9 +401,15 @@ export var Sidebar = createComponent({  // RENAME to ContextBar\n         else if (!usersHere.areChatChannelMembers && !usersHere.areTopicContributors) {\n           title = t.cb.UsersOnline;\n         }\n+        else if (page.pageRole === PageRole.JoinlessChat) {\n+          // Then, list the most recent people who posted in the chat?\n+          // Not impl though.\n+          title = ''; // \"People here recently:\"  // I18N, unimplemented\n+        }\n         else {\n+          const titleText = isChat ? t.cb.UsersInThisChat : t.cb.UsersInThisTopic;\n           title = r.div({},\n-            isChat ? t.cb.UsersInThisChat : t.cb.UsersInThisTopic,\n+            titleText,\n             r.span({ className: 'esCtxbar_onlineCol' }, t.Online));\n           // Don't show num online strangers, when listing post authors for the current topic only.\n           numOnlineStrangers = 0;\n@@ -507,9 +513,9 @@ export var Sidebar = createComponent({  // RENAME to ContextBar\n           adminGuideButton);\n     }\n     else {\n-      let title = r.span({}, this.state.commentsType + ' ', r.span({ className: 'caret' }));\n+      const title = r.span({}, this.state.commentsType + ' ', r.span({ className: 'caret' }));\n       tabButtons =\n-        ModalDropdownButton({ title: title, key: 'showRecent', pullRight: true },\n+        ModalDropdownButton({ title, key: 'showRecent', pullRight: true },\n           r.ul({ className: 'dropdown-menu' },\n             recentButton,\n             unreadButton,"
    },
    {
      "sha": "3a28981783730b0669e2d89dabfa7a79d8834627",
      "filename": "client/app-slim/slim-bundle.d.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/slim-bundle.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/slim-bundle.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/slim-bundle.d.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -320,6 +320,7 @@ declare namespace debiki2 {\n \n   function event_isCtrlEnter(event): boolean;\n   function event_isEscape(event): boolean;\n+  function page_isOpenChat(pageRole: PageRole): Bo;\n   function page_isChat(pageRole: PageRole): boolean;\n   function page_isPrivateGroup(pageRole: PageRole): boolean;\n   function pageRole_iconClass(pageRole: PageRole): string;"
    },
    {
      "sha": "e2cc4922a829a75d61fa469f22fa754d816cddd9",
      "filename": "client/app-slim/watchbar/watchbar.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/watchbar/watchbar.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/app-slim/watchbar/watchbar.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/watchbar/watchbar.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -197,6 +197,7 @@ const ChatChannels = createComponent({\n         store.allCategoriesHacky = categories;\n         const category = store_getCurrOrDefaultCat(store);\n         dieIf(!category, 'EsE4KPE02');\n+        // COULD let pat choose between joinless, and join-first, chat types? [JoinlessChat]\n         editor.editNewForumPage(category.id, PageRole.OpenChat);\n       });\n     });"
    },
    {
      "sha": "86a48cf8623037dceef4e9ff2da2e6870c45f996",
      "filename": "client/embedded-comments/blog-comments.ts",
      "status": "modified",
      "additions": 58,
      "deletions": 11,
      "changes": 69,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/embedded-comments/blog-comments.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/embedded-comments/blog-comments.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/embedded-comments/blog-comments.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -29,10 +29,11 @@ declare function smoothScroll(elem: Element, x: number, y: number,\n     durationMs?: number, onDone?: () => void);\n \n interface WindowWithTalkyardProps {\n-  talkyardLogLevel: number | undefined;\n+  talkyardLogLevel?: Nr;\n   talkyardDebug: boolean | number | undefined; // deprecated 2020-06-16\n-  talkyardAuthnToken: St | Ay | U;\n-  talkyardManyCommentIframes: Bo | U;\n+  talkyardAuthnToken?: St | Ay;\n+  talkyardManyCommentIframes?: Bo;\n+  talkyardConsiderQueryParams?: St[];\n   edRemoveCommentsAndEditor: () => void;\n   edReloadCommentsAndEditor: () => void;\n   talkyardRemoveCommentsAndEditor: () => void;\n@@ -69,11 +70,11 @@ const talkyardLogLevel: Nr | St = (typeof winLogLvl !== 'undefined') ? winLogLvl\n \n // Default to logging debug messages, for now, because people send screenshots of the\n // console when sth is amiss, and nice to get the log messages then.\n-function makeTalkyardLogFn(isWarn: Bo, consoleLogFn: (...data: Ay[]) => Vo) {\n+function makeTalkyardLogFn(isWarnOrErr: Bo, consoleLogFn: (...data: Ay[]) => Vo) {\n   // For now, so at least 'warn' works, as per the \"disable logging by ...\"\n   // comment below.\n   const skipDebug = !talkyardLogLevel || talkyardLogLevel === 'warn';\n-  if (skipDebug && !isWarn || !window.console)\n+  if (skipDebug && !isWarnOrErr || !window.console)\n     return function() {};\n \n   return function logFn(..._arguments) {\n@@ -93,6 +94,7 @@ function makeTalkyardLogFn(isWarn: Bo, consoleLogFn: (...data: Ay[]) => Vo) {\n const logD = makeTalkyardLogFn(false, console.debug);\n const logM = makeTalkyardLogFn(false, console.log);\n const logW = makeTalkyardLogFn(true, console.warn);\n+const logE = makeTalkyardLogFn(true, console.error);\n \n // const j2s = JSON.stringify;\n \n@@ -126,6 +128,7 @@ const insecureSomethingErrMsg = insecureTyIframeProbl ? (\n     \"— If this is your site, what if you get a LetsEncrypt cert? [TyEINSCBLG]\"\n         ) : */  '');\n \n+const considerQueryParams = windowWithTalkyardProps.talkyardConsiderQueryParams;\n \n // For automatic Single Sign-On with PASETO authn tokens, either in a variable,\n // or a cookie (cookie better? So not incl in html, although encrypted).\n@@ -442,10 +445,54 @@ function intCommentIframe(commentsElem, iframeNr: Nr, manyCommentsIframes: Bo) {\n \n   logD(`intCommentIframe(..., iframeNr = ${iframeNr}, ...)`);\n \n+  // Tests:  embcom.ignore-query-params.2br  TyTEEMCIGQPRMS\n+\n   // The server wants the embedding URL, to know if it should add 'localhost'\n   // to the allowed frame-ancestors, for development. [embng_url]\n-  var embeddingUrl = window.location.origin + window.location.pathname + window.location.search;\n-  var embeddingUrlParam = 'embeddingUrl=' + embeddingUrl;\n+  // Ignore the query string, by default. It's almost always just for tracking\n+  // and analytics — but almost never for deciding what page to show.\n+  let embeddingUrl = location.origin + location.pathname;\n+\n+  if (!considerQueryParams) {\n+    // Noop: Leave embeddingUrl as is, without query params.\n+  /* Maybe later:\n+  }\n+  else if (considerQueryParams === 'AllReally') {\n+    // Consider all query params, mostly for backw compat.\n+    embeddingUrl += location.search;\n+  }\n+  else if (considerQueryParams === 'SkipTracking') {\n+    // Exclude:  &ref=  &campaign=... and utm_...= and ...\n+    // see:  https://en.wikipedia.org/wiki/UTM_parameters\n+    // and:  https://www.talkyard.io/-645#post-4\n+    */\n+  }\n+  else if (considerQueryParams.length) {\n+    // Consider only the specified query param(s).\n+    const url = new URL(location.toString());\n+    for (let i = 0; i < considerQueryParams.length; ++i) {\n+      const paramName = considerQueryParams[i];\n+      const unencVal = url.searchParams.get(paramName);\n+      const encodedVal = encodeURIComponent(unencVal);\n+      // For this to work with many query params, would need to call\n+      // encodeURIComponent on the whole embeddingUrl afterwards [enc_aft],\n+      // and unencode it server side. And to know that it's been encoded,\n+      // could rename the param to embgUrl=... whilst the server would know that\n+      // embeddingUrl hadn't been encoded (the blog comments script is cached\n+      // for up to a day [embcom_script_cache_time]).\n+      if (i >= 1) {\n+        logW(`Only one query param supported, but talkyardConsiderQueryParams is: ${\n+              JSON.stringify(considerQueryParams)} — ignoring all but ${\n+              considerQueryParams[0]}`);\n+        break;;\n+      }\n+      embeddingUrl += i === 0 ? '?' : '&';\n+      embeddingUrl += `${paramName}=${encodedVal}`;\n+    }\n+  }\n+\n+  // Could rename param, and encode the value, see above [enc_aft].\n+  const embeddingUrlParam = 'embeddingUrl=' + embeddingUrl;\n \n   // NEXT:\n   // + data-page      = places comments on that page / auto-creates it\n@@ -508,7 +555,7 @@ function intCommentIframe(commentsElem, iframeNr: Nr, manyCommentsIframes: Bo) {\n           htmlClassParam + logLevelParam + scriptVersionQueryParam;\n \n   var commentsIframeUrl = serverOrigin + '/-/embedded-comments?' + allUrlParams;\n-  loadWeinre = window.location.hash.indexOf('&loadWeinre') >= 0;  // [WEINRE]\n+  loadWeinre = location.hash.indexOf('&loadWeinre') >= 0;  // [WEINRE]\n   if (loadWeinre) {\n     // Let's append the whole hash fragment — nice to see any client \"name\"\n     // you can debug-include in the hash, in Weinre's debug targets list.\n@@ -1238,7 +1285,7 @@ function sendToOneIframe(iframe, message: any | null, retryNr: Nr = 0) {\n function findOneTimeLoginSecret() {\n   // This need not be at the start of the hash fragment — but if there's anything before\n   // or after, needs to be separated with one of [#&].\n-  var loginSecretHashMatch = window.location.hash.match(\n+  var loginSecretHashMatch = location.hash.match(\n       /[#&]talkyardOneTimeLoginSecret=([a-zA-Z0-9]+)([#&].*)?$/);\n   if (loginSecretHashMatch) {\n     oneTimeLoginSecret = loginSecretHashMatch[1];\n@@ -1247,15 +1294,15 @@ function findOneTimeLoginSecret() {\n     // will reply Error and Talkyard would show an error message in the browser.\n     logM(\"Found one time login secret, removing from url: \" + oneTimeLoginSecret);\n     // Maybe use history.replaceState({}, '', '# ...') instead?\n-    window.location.hash = window.location.hash.replace(\n+    location.hash = location.hash.replace(\n         'talkyardOneTimeLoginSecret=' + oneTimeLoginSecret, '');\n   }\n }\n \n \n \n function findCommentToScrollTo() {\n-  const commentNrHashMatch = window.location.hash.match(/^#comment-(\\d+)([#&].*)?$/);  // [2PAWC0]\n+  const commentNrHashMatch = location.hash.match(/^#comment-(\\d+)([#&].*)?$/);  // [2PAWC0]\n   if (commentNrHashMatch) {\n     const commentNrStr = commentNrHashMatch[1];\n     const commentNr = parseInt(commentNrStr);"
    },
    {
      "sha": "8704841b4cb606189bad4206a308071a8aacb1ef",
      "filename": "client/types-and-const-enums.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/types-and-const-enums.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/client/types-and-const-enums.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/types-and-const-enums.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -401,7 +401,8 @@ const enum PageRole { // dupl in client/e2e/test-types.ts [5F8KW0P2]  RENAME to\n   MindMap = 11,\n   Discussion = 12,\n   FormalMessage = 17,\n-  OpenChat = 18,\n+  JoinlessChat = 22,   // [JoinlessChat]   RENAME to AnyoneChat?\n+  OpenChat = 18,  // RENAME to StandardChat?\n   PrivateChat = 19,\n     // DirectMessage = 20,\n   Form = 20,  // try to remove?"
    },
    {
      "sha": "f17664f4b750ef9cfa196d0fca373402ef9de216",
      "filename": "conf/app-dev.conf",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/conf/app-dev.conf",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/conf/app-dev.conf",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf/app-dev.conf?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -84,7 +84,7 @@ talkyard.uploads.maxKiloBytes=100111222\n # Play Framework\n # ------------------\n \n-play.application.loader= ed.server.EdAppLoader\n+play.application.loader=\"talkyard.server.TyAppLoader\"\n \n # For debugging.\n play.server.http.idleTimeout=infinite"
    },
    {
      "sha": "d6e07a767c414f6ed7cc4d32cf6cce9426cdec63",
      "filename": "conf/app-prod.conf",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/conf/app-prod.conf",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/conf/app-prod.conf",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf/app-prod.conf?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -6,7 +6,7 @@\n talkyard.uploads.maxKiloBytesPerFile=100111\n # Also see play.http.parser below.\n \n-play.application.loader=ed.server.EdAppLoader\n+play.application.loader=\"talkyard.server.TyAppLoader\"\n # The default is 100KB. Also see talkyard.uploads.maxKiloBytes above.\n play.http.parser.maxMemoryBuffer=100112\n play.http.parser.maxDiskBuffer=100113k  # why 113? oh well"
    },
    {
      "sha": "e22215abc50b45ace207e4229747ba41058d5352",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/conf/routes",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/conf/routes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf/routes?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -41,10 +41,11 @@ GET   /-/authn/verif-email-ask-if-link-accounts   controllers.LoginWithOpenAuthC\n POST  /-/authn/ans-link-accounts                  controllers.LoginWithOpenAuthController.answerLinkAccounts\n \n # Would like to remove, use /-/authn/oauth2/:name  instead:\n-GET   /-/login-openauth/:providerName controllers.LoginWithOpenAuthController.startAuthentication(providerName, returnToUrl: Option[String])\n+#ET   /-/login-openauth/:providerName controllers.LoginWithOpenAuthController.startAuthentication(providerName, returnToUrl: Option[String])\n+# Keep this endpoint, for backwards compatibility, from before /-/authn/oauth2/:name was added.\n GET   /-/login-auth-callback/:providerName  controllers.LoginWithOpenAuthController.finishAuthentication(providerName)\n-GET   /-/login-oauth-then-return/:providerName controllers.LoginWithOpenAuthController.loginAtLoginOriginThenReturnToOriginalSite(providerName, returnToOrigin, xsrfToken)\n-GET   /-/login-oauth-continue           controllers.LoginWithOpenAuthController.continueAtOriginalSite(oauthDetailsCacheKey, xsrfToken)\n+#ET   /-/login-oauth-then-return/:providerName controllers.LoginWithOpenAuthController.loginAtLoginOriginThenReturnToOriginalSite(providerName, returnToOrigin, xsrfToken)\n+#ET   /-/login-oauth-continue           controllers.LoginWithOpenAuthController.continueAtOriginalSite(oauthDetailsCacheKey, xsrfToken)\n POST  /-/login-oauth-create-user  controllers.LoginWithOpenAuthController.handleCreateUserDialog\n \n GET   /-/impersonate-at-other-site  controllers.ImpersonateController.impersonateAtOtherSite(siteId: Int, userId: Int, goToSiteById: Option[Boolean])\n@@ -53,8 +54,8 @@ POST  /-/impersonate            controllers.ImpersonateController.impersonate(us\n POST  /-/view-as-other          controllers.ImpersonateController.viewAsOther(userId: Int)\n POST  /-/stop-impersonating     controllers.ImpersonateController.stopImpersonating\n \n-GET   /-/load-online-users      ed.server.pubsub.SubscriberController.loadOnlineUsers\n-GET   /-/websocket              ed.server.pubsub.SubscriberController.webSocket\n+GET   /-/load-online-users      talkyard.server.pubsub.SubscriberController.loadOnlineUsers\n+GET   /-/websocket              talkyard.server.pubsub.SubscriberController.webSocket\n \n GET   /-/embedded-comments      controllers.EmbeddedTopicsController.showTopic(embeddingUrl, discussionId: Option[String], edPageId: Option[String], category: Option[String], scriptV: Option[String])\n GET   /-/embedded-editor        controllers.EmbeddedTopicsController.showEmbeddedEditor(embeddingUrl, embeddingScriptV: Option[Int])\n@@ -76,6 +77,7 @@ GET   /-/create-site                        controllers.CreateSiteController.sho\n GET   /-/create-site/embedded-comments      controllers.CreateSiteController.showPage(isTest = \"false\")\n GET   /-/create-test-site                   controllers.CreateSiteController.showPage(isTest = \"true\")\n GET   /-/create-test-site/embedded-comments controllers.CreateSiteController.showPage(isTest = \"true\")\n+POST  /-/v0/create-site                     controllers.CreateSiteController.apiV0_createSite\n POST  /-/create-site                        controllers.CreateSiteController.createSite\n POST  /-/delete-test-site                   controllers.CreateSiteController.deleteTestSite\n GET   /-/_int_req/hostname-should-have-cert controllers.CreateSiteController.intReq_hostnameShouldHaveCert"
    },
    {
      "sha": "46521aa04bbed139afc816bb1f1761ebc3a42601",
      "filename": "docs/design-docs/tags.dd.adoc",
      "status": "modified",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/docs/design-docs/tags.dd.adoc",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/docs/design-docs/tags.dd.adoc",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/design-docs/tags.dd.adoc?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -171,6 +171,53 @@ Therefore: domain thing_types_d, can be only 7 or 56, for now.\n \n == Tag values\n \n+Idea: Store values in tags_t instead?\n+\n+either:\n+tags_t: remove pk\n+tags_t +=\n+   has_extra_vals          bool\n+   extra_val_for_tag_id_c  tag_id_d,\n+\n+or:\n+tags_t: add val_nr: 0,1,2,... , 0 could be the main\n+tags_t +=\n+   has_extra_vals          bool\n+   extra_val_for_tag_id_c  tag_id_d,\n+   val_type_c     val_type_d,   -- e.g. date —> val_i64_c = unix time millis?\n+                                -- date_range —> val_i64_end_c  = end date range?\n+                                -- CVE score: (0, 10]\n+                                -- SemVer2 —> regex check?\n+                                -- etc etc\n+\n+and/or just inline all values, maybe:\n+(Foreign keys won't work, but the simplicity and the higher performance and the\n+lower bug risk (than if joining with a tag values table) is worth it I think!\n+See: http://www.databasesoup.com/2015/01/tag-all-things.html & part 2 & 3.)\n+\n+    val_i64_c      i64_d,\n+    val_i64_end_c  i64_d,\n+    val_f64_c      f64_d,\n+    val_f64_end_c  f64_d,\n+\n+    val_title_c    text w max len,\n+    val_http_url_c http_url_d,\n+\n+    val_i32_arr_c   i32[],\n+    val_i64_arr_c   i64[],\n+    val_f64_arr_c   f64[],\n+    val_text_arr_c  text[],\n+\n+    val_jsonb_c    jsonb_max_NNN_bytes,\n+\n+And tag_types_t:\n+  allowed_val_types_c  User   for example    — maybe a bitfield?\n+  max_num_vals_c      5   (0..=100 for example)   — e.g. assign sth to 5 ppl?\n+\n+\n+Mat views are reealy slow, often out of sync:\n+    https://stackoverflow.com/questions/29437650/how-can-i-ensure-that-a-materialized-view-is-always-up-to-date\n+\n Later:\n \n In Talkyard, tags will be able to have values. E.g. an Assigned-To page tag,\n@@ -200,6 +247,18 @@ but then it's cumbersome or even infeasible to change `happens-in-` to, say,\n — instead of just renaming one tag (the \"Happens in city\" tag),\n you'd have to rename _all_ tags with that prefix.\n \n+What values would be nice to support?\n+\n+CVE numbers: float (0.0, 10.0].\n+Software versions: string?\n+Pat list.\n+Page list.\n+Date-time.\n+Date-time range.\n+Many date-time ranges? (a many evenings / days event)\n+Cat list?\n+Tag list? Hmm\n+\n ----\n create table tag_vals_t(\n   site_id_c int,"
    },
    {
      "sha": "79538737aabb4cd7efd603786bf67fd518bd4c8b",
      "filename": "docs/tests-map.txt",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/docs/tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/docs/tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/tests-map.txt?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -45,6 +45,7 @@ full text search:\n             - api-search-ext-site-and-server.2br.cors  TyTEAPIEXTSRV\n \n create site & forum -\n+  via api: [.create_site_via_api]\n   create:  create-site-all-logins\n   not too many per ip / email:\n   not too many in total:\n@@ -81,6 +82,11 @@ authn:\n           - password-login-reset.2browsers.test.ts  TyT5KAES20W\n     via email verif email:\n           - unsubscribe.2browsers.test.ts  [TyT2ABK5I0]\n+    owner resets, before first login:\n+            - dir.create-site-via-api.2br  TyTE2ECREASITAPI  incl type wrong pwd\n+            - embcom.create-site-via-api.2br  TyTE2ECREAEMBSITAPI\n+    resets, but types wrong email:\n+            - dir.create-site-via-api.2br  TyTE2ECREASITAPI.TyTERSTWRONGEML\n   forgot password -\n     reset it:\n           - password-login-reset.2browsers.test.ts  TyT5KAES20W\n@@ -828,6 +834,8 @@ chat:\n     self join, auto leave:\n           - login-required-join-global-chat.2br.test.ts  TyTE2E603MAT53\n           - promote-demote-by-staff-join-leave-chats.2br.test.ts  TyTE2E5H3GFRVK\n+  joinless chat:\n+            - TESTS_MISSING\n   private chat:             ==\n           - private-chat.3browsers.test.ts  TyT2ABKR045\n     not searchable:\n@@ -863,6 +871,8 @@ embedded comments:\n           - embcom.vote-bef-page-exists.1br  TyT2AKBS056\n           - embedded-comments-scroll  TyT2K4DHR49-02\n   (50279460),\n+  ignores query params:\n+            - embcom.ignore-query-params.2br  TyTEEMCIGQPRMS\n   scroll and show #comment-n:\n           - embedded-comments-scroll  TyT2K4DHR49-05\n   scroll and load #comment-nnn:\n@@ -1452,6 +1462,9 @@ server side rendering -\n     category dropdown:\n \n api:\n+  create site via api: [.create_site_via_api]\n+            - dir.create-site-via-api.2br  TyTE2ECREASITAPI\n+            - embcom.create-site-via-api.2br  TyTE2ECREAEMBSITAPI\n   enable API:\n             - embedded-comments-create-site-import-disqus.2br.test.ts  TyT5KFG0P75.TyTENAAPI\n             - dir.create-site-imp-json.2br  TyTEIMPJSON01.TyTENAAPI"
    },
    {
      "sha": "32a86e58e08fd511bb1b8a9526fcca152fc35e60",
      "filename": "images/search/Dockerfile",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/images/search/Dockerfile",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/images/search/Dockerfile",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/images/search/Dockerfile?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -8,7 +8,7 @@\n # happens below), and use all Basic features at no cost, so, no problems\n # with using ES, right. Also see decisions.adoc.\n #\n-FROM docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.21\n+FROM docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.23\n \n # [ty_v1] mount these instead — in a conf.d?\n # In dev, mount the conf from  modules/ed-prod-one-test/conf/search/."
    },
    {
      "sha": "84c77275a4cbb45b59ce361031c7f7168f3a5b40",
      "filename": "images/web/server-locations.conf",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/images/web/server-locations.conf",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/images/web/server-locations.conf",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/images/web/server-locations.conf?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -151,6 +151,7 @@ location /-/fonts/ {\n # the comments — one spends maybe a minute reading the embedding article anyway.\n # Use a descriptive name that includes \"Talkyard\", because people see the name when\n # they copy-paste embedded comments html tags. 'ed-comments(.v0)?' = old names. [2EBG05]\n+# [embcom_script_cache_time]\n location ~ ^/-/(talkyard-comments|ed-comments(.v0)?).(?<suffix>min.js|js)$ {\n   alias /opt/talkyard/assets/talkyard-comments.$suffix;\n   # Temp short max age, when non-backw compat blog comments changes. [embcom_upgr_0cache]"
    },
    {
      "sha": "1f9981e70c1e747fb4406cc8ac0703776be8050c",
      "filename": "lock.sbt",
      "status": "modified",
      "additions": 65,
      "deletions": 77,
      "changes": 142,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/lock.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/lock.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/lock.sbt?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -6,22 +6,20 @@ Compile / dependencyOverrides ++= {\n     Seq.empty\n   } else {\n     Seq(\n-      \"ch.qos.logback\" % \"logback-classic\" % \"1.2.8\",\n-      \"ch.qos.logback\" % \"logback-core\" % \"1.2.8\",\n-      \"com.atlassian.jwt\" % \"jwt-api\" % \"2.0.5\",\n-      \"com.atlassian.jwt\" % \"jwt-core\" % \"2.0.5\",\n-      \"com.auth0\" % \"java-jwt\" % \"3.18.2\",\n+      \"ch.qos.logback\" % \"logback-classic\" % \"1.2.10\",\n+      \"ch.qos.logback\" % \"logback-core\" % \"1.2.10\",\n+      \"com.auth0\" % \"java-jwt\" % \"3.18.3\",\n       \"com.carrotsearch\" % \"hppc\" % \"0.7.1\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-annotations\" % \"2.13.0\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.13.0\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.13.0\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-annotations\" % \"2.13.1\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.13.1\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.13.1\",\n       \"com.fasterxml.jackson.dataformat\" % \"jackson-dataformat-cbor\" % \"2.11.4\",\n       \"com.fasterxml.jackson.dataformat\" % \"jackson-dataformat-smile\" % \"2.8.11\",\n       \"com.fasterxml.jackson.dataformat\" % \"jackson-dataformat-yaml\" % \"2.8.11\",\n       \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jdk8\" % \"2.11.4\",\n       \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jsr310\" % \"2.11.4\",\n       \"com.fasterxml.jackson.module\" % \"jackson-module-parameter-names\" % \"2.11.4\",\n-      \"com.fasterxml.jackson.module\" % \"jackson-module-scala_2.12\" % \"2.13.0\",\n+      \"com.fasterxml.jackson.module\" % \"jackson-module-scala_2.12\" % \"2.13.1\",\n       \"com.github.ben-manes.caffeine\" % \"caffeine\" % \"2.8.8\",\n       \"com.github.ben-manes.caffeine\" % \"jcache\" % \"2.8.8\",\n       \"com.github.etaty\" % \"rediscala_2.12\" % \"1.9.0\",\n@@ -32,7 +30,6 @@ Compile / dependencyOverrides ++= {\n       \"com.github.scribejava\" % \"scribejava-apis\" % \"6.9.0\",\n       \"com.github.scribejava\" % \"scribejava-core\" % \"6.9.0\",\n       \"com.github.spullara.mustache.java\" % \"compiler\" % \"0.9.3\",\n-      \"com.github.stephenc.jcip\" % \"jcip-annotations\" % \"1.0-1\",\n       \"com.google.code.findbugs\" % \"jsr305\" % \"3.0.2\",\n       \"com.google.code.gson\" % \"gson\" % \"2.8.8\",\n       \"com.google.errorprone\" % \"error_prone_annotations\" % \"2.7.1\",\n@@ -41,66 +38,61 @@ Compile / dependencyOverrides ++= {\n       \"com.google.guava\" % \"listenablefuture\" % \"9999.0-empty-to-avoid-conflict-with-guava\",\n       \"com.google.j2objc\" % \"j2objc-annotations\" % \"1.3\",\n       \"com.lambdaworks\" % \"scrypt\" % \"1.4.0\",\n-      \"com.mohiva\" % \"play-silhouette-crypto-jca_2.12\" % \"7.0.0\",\n-      \"com.mohiva\" % \"play-silhouette_2.12\" % \"7.0.0\",\n-      \"com.nimbusds\" % \"nimbus-jose-jwt\" % \"4.41.1\",\n       \"com.squareup.okhttp3\" % \"okhttp\" % \"3.9.0\",\n       \"com.squareup.okio\" % \"okio\" % \"1.13.0\",\n       \"com.sun.mail\" % \"javax.mail\" % \"1.5.6\",\n       \"com.tdunning\" % \"t-digest\" % \"3.2\",\n       \"com.thoughtworks.paranamer\" % \"paranamer\" % \"2.8\",\n       \"com.typesafe\" % \"config\" % \"1.4.1\",\n       \"com.typesafe\" % \"ssl-config-core_2.12\" % \"0.4.2\",\n-      \"com.typesafe.akka\" % \"akka-actor-typed_2.12\" % \"2.6.17\",\n-      \"com.typesafe.akka\" % \"akka-actor_2.12\" % \"2.6.17\",\n+      \"com.typesafe.akka\" % \"akka-actor-typed_2.12\" % \"2.6.18\",\n+      \"com.typesafe.akka\" % \"akka-actor_2.12\" % \"2.6.18\",\n       \"com.typesafe.akka\" % \"akka-http-core_2.12\" % \"10.1.15\",\n       \"com.typesafe.akka\" % \"akka-parsing_2.12\" % \"10.1.15\",\n-      \"com.typesafe.akka\" % \"akka-protobuf-v3_2.12\" % \"2.6.17\",\n-      \"com.typesafe.akka\" % \"akka-serialization-jackson_2.12\" % \"2.6.17\",\n-      \"com.typesafe.akka\" % \"akka-slf4j_2.12\" % \"2.6.17\",\n-      \"com.typesafe.akka\" % \"akka-stream_2.12\" % \"2.6.17\",\n-      \"com.typesafe.play\" % \"build-link\" % \"2.8.9\",\n+      \"com.typesafe.akka\" % \"akka-protobuf-v3_2.12\" % \"2.6.18\",\n+      \"com.typesafe.akka\" % \"akka-serialization-jackson_2.12\" % \"2.6.18\",\n+      \"com.typesafe.akka\" % \"akka-slf4j_2.12\" % \"2.6.18\",\n+      \"com.typesafe.akka\" % \"akka-stream_2.12\" % \"2.6.18\",\n+      \"com.typesafe.play\" % \"build-link\" % \"2.8.12\",\n       \"com.typesafe.play\" % \"cachecontrol_2.12\" % \"2.0.0\",\n-      \"com.typesafe.play\" % \"filters-helpers_2.12\" % \"2.8.9\",\n-      \"com.typesafe.play\" % \"play-ahc-ws-standalone_2.12\" % \"2.1.3\",\n-      \"com.typesafe.play\" % \"play-ahc-ws_2.12\" % \"2.8.9\",\n-      \"com.typesafe.play\" % \"play-akka-http-server_2.12\" % \"2.8.9\",\n-      \"com.typesafe.play\" % \"play-cache_2.12\" % \"2.8.9\",\n-      \"com.typesafe.play\" % \"play-caffeine-cache_2.12\" % \"2.8.9\",\n-      \"com.typesafe.play\" % \"play-exceptions\" % \"2.8.9\",\n+      \"com.typesafe.play\" % \"filters-helpers_2.12\" % \"2.8.12\",\n+      \"com.typesafe.play\" % \"play-ahc-ws-standalone_2.12\" % \"2.1.7\",\n+      \"com.typesafe.play\" % \"play-ahc-ws_2.12\" % \"2.8.12\",\n+      \"com.typesafe.play\" % \"play-akka-http-server_2.12\" % \"2.8.12\",\n+      \"com.typesafe.play\" % \"play-cache_2.12\" % \"2.8.12\",\n+      \"com.typesafe.play\" % \"play-caffeine-cache_2.12\" % \"2.8.12\",\n+      \"com.typesafe.play\" % \"play-exceptions\" % \"2.8.12\",\n       \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.2\",\n-      \"com.typesafe.play\" % \"play-json-joda_2.12\" % \"2.7.4\",\n       \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.2\",\n-      \"com.typesafe.play\" % \"play-logback_2.12\" % \"2.8.9\",\n-      \"com.typesafe.play\" % \"play-openid_2.12\" % \"2.8.1\",\n-      \"com.typesafe.play\" % \"play-server_2.12\" % \"2.8.9\",\n-      \"com.typesafe.play\" % \"play-streams_2.12\" % \"2.8.9\",\n-      \"com.typesafe.play\" % \"play-ws-standalone-json_2.12\" % \"2.1.3\",\n-      \"com.typesafe.play\" % \"play-ws-standalone-xml_2.12\" % \"2.1.3\",\n-      \"com.typesafe.play\" % \"play-ws-standalone_2.12\" % \"2.1.3\",\n-      \"com.typesafe.play\" % \"play-ws_2.12\" % \"2.8.9\",\n-      \"com.typesafe.play\" % \"play_2.12\" % \"2.8.9\",\n-      \"com.typesafe.play\" % \"shaded-asynchttpclient\" % \"2.1.3\",\n-      \"com.typesafe.play\" % \"shaded-oauth\" % \"2.1.3\",\n+      \"com.typesafe.play\" % \"play-logback_2.12\" % \"2.8.12\",\n+      \"com.typesafe.play\" % \"play-server_2.12\" % \"2.8.12\",\n+      \"com.typesafe.play\" % \"play-streams_2.12\" % \"2.8.12\",\n+      \"com.typesafe.play\" % \"play-ws-standalone-json_2.12\" % \"2.1.7\",\n+      \"com.typesafe.play\" % \"play-ws-standalone-xml_2.12\" % \"2.1.7\",\n+      \"com.typesafe.play\" % \"play-ws-standalone_2.12\" % \"2.1.7\",\n+      \"com.typesafe.play\" % \"play-ws_2.12\" % \"2.8.12\",\n+      \"com.typesafe.play\" % \"play_2.12\" % \"2.8.12\",\n+      \"com.typesafe.play\" % \"shaded-asynchttpclient\" % \"2.1.7\",\n+      \"com.typesafe.play\" % \"shaded-oauth\" % \"2.1.7\",\n       \"com.typesafe.play\" % \"twirl-api_2.12\" % \"1.5.1\",\n       \"com.zaxxer\" % \"HikariCP\" % \"3.4.5\",\n       \"commons-beanutils\" % \"commons-beanutils\" % \"1.9.4\",\n       \"commons-codec\" % \"commons-codec\" % \"1.15\",\n       \"commons-collections\" % \"commons-collections\" % \"3.2.2\",\n       \"commons-digester\" % \"commons-digester\" % \"2.1\",\n-      \"commons-io\" % \"commons-io\" % \"2.10.0\",\n+      \"commons-io\" % \"commons-io\" % \"2.11.0\",\n       \"commons-logging\" % \"commons-logging\" % \"1.2\",\n       \"commons-validator\" % \"commons-validator\" % \"1.7\",\n       \"dev.paseto\" % \"jpaseto-api\" % \"0.7.0\",\n       \"dev.paseto\" % \"jpaseto-gson\" % \"0.7.0\",\n       \"dev.paseto\" % \"jpaseto-impl\" % \"0.7.0\",\n       \"dev.paseto\" % \"jpaseto-sodium\" % \"0.7.0\",\n-      \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.1.26\",\n-      \"io.dropwizard.metrics\" % \"metrics-healthchecks\" % \"4.1.19\",\n-      \"io.jaegertracing\" % \"jaeger-client\" % \"0.32.0\",\n-      \"io.jaegertracing\" % \"jaeger-core\" % \"0.32.0\",\n-      \"io.jaegertracing\" % \"jaeger-thrift\" % \"0.32.0\",\n-      \"io.jaegertracing\" % \"jaeger-tracerresolver\" % \"0.32.0\",\n+      \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.2.7\",\n+      \"io.dropwizard.metrics\" % \"metrics-healthchecks\" % \"4.2.7\",\n+      \"io.jaegertracing\" % \"jaeger-client\" % \"0.35.1\",\n+      \"io.jaegertracing\" % \"jaeger-core\" % \"0.35.1\",\n+      \"io.jaegertracing\" % \"jaeger-thrift\" % \"0.35.1\",\n+      \"io.jaegertracing\" % \"jaeger-tracerresolver\" % \"0.35.1\",\n       \"io.jsonwebtoken\" % \"jjwt\" % \"0.9.1\",\n       \"io.netty\" % \"netty-buffer\" % \"4.1.32.Final\",\n       \"io.netty\" % \"netty-codec\" % \"4.1.32.Final\",\n@@ -109,10 +101,10 @@ Compile / dependencyOverrides ++= {\n       \"io.netty\" % \"netty-handler\" % \"4.1.32.Final\",\n       \"io.netty\" % \"netty-resolver\" % \"4.1.32.Final\",\n       \"io.netty\" % \"netty-transport\" % \"4.1.32.Final\",\n-      \"io.opentracing\" % \"opentracing-api\" % \"0.31.0\",\n-      \"io.opentracing\" % \"opentracing-noop\" % \"0.31.0\",\n-      \"io.opentracing\" % \"opentracing-util\" % \"0.31.0\",\n-      \"io.opentracing.contrib\" % \"opentracing-tracerresolver\" % \"0.1.5\",\n+      \"io.opentracing\" % \"opentracing-api\" % \"0.32.0\",\n+      \"io.opentracing\" % \"opentracing-noop\" % \"0.32.0\",\n+      \"io.opentracing\" % \"opentracing-util\" % \"0.32.0\",\n+      \"io.opentracing.contrib\" % \"opentracing-tracerresolver\" % \"0.1.6\",\n       \"jakarta.activation\" % \"jakarta.activation-api\" % \"1.2.2\",\n       \"jakarta.transaction\" % \"jakarta.transaction-api\" % \"1.3.3\",\n       \"jakarta.xml.bind\" % \"jakarta.xml.bind-api\" % \"2.3.3\",\n@@ -121,18 +113,16 @@ Compile / dependencyOverrides ++= {\n       \"javax.inject\" % \"javax.inject\" % \"1\",\n       \"joda-time\" % \"joda-time\" % \"2.10.10\",\n       \"net.logstash.logback\" % \"logstash-logback-encoder\" % \"7.0.1\",\n-      \"net.minidev\" % \"accessors-smart\" % \"1.2\",\n-      \"net.minidev\" % \"json-smart\" % \"2.3\",\n       \"net.sf.jopt-simple\" % \"jopt-simple\" % \"5.0.2\",\n-      \"nl.grons\" % \"metrics4-scala_2.12\" % \"4.1.19\",\n+      \"nl.grons\" % \"metrics4-scala_2.12\" % \"4.2.8\",\n       \"nu.validator.htmlparser\" % \"htmlparser\" % \"1.4\",\n       \"org.apache.commons\" % \"commons-email\" % \"1.5\",\n-      \"org.apache.commons\" % \"commons-lang3\" % \"3.8.1\",\n+      \"org.apache.commons\" % \"commons-lang3\" % \"3.12.0\",\n       \"org.apache.httpcomponents\" % \"httpasyncclient\" % \"4.1.2\",\n       \"org.apache.httpcomponents\" % \"httpclient\" % \"4.5.2\",\n       \"org.apache.httpcomponents\" % \"httpcore\" % \"4.4.5\",\n       \"org.apache.httpcomponents\" % \"httpcore-nio\" % \"4.4.5\",\n-      \"org.apache.logging.log4j\" % \"log4j-api\" % \"2.16.0\",\n+      \"org.apache.logging.log4j\" % \"log4j-api\" % \"2.17.1\",\n       \"org.apache.lucene\" % \"lucene-analyzers-common\" % \"7.7.3\",\n       \"org.apache.lucene\" % \"lucene-backward-codecs\" % \"7.7.3\",\n       \"org.apache.lucene\" % \"lucene-core\" % \"7.7.3\",\n@@ -148,36 +138,34 @@ Compile / dependencyOverrides ++= {\n       \"org.apache.lucene\" % \"lucene-spatial-extras\" % \"7.7.3\",\n       \"org.apache.lucene\" % \"lucene-spatial3d\" % \"7.7.3\",\n       \"org.apache.lucene\" % \"lucene-suggest\" % \"7.7.3\",\n-      \"org.apache.thrift\" % \"libthrift\" % \"0.11.0\",\n-      \"org.apache.tika\" % \"tika-core\" % \"1.27\",\n+      \"org.apache.thrift\" % \"libthrift\" % \"0.12.0\",\n+      \"org.apache.tika\" % \"tika-core\" % \"1.28\",\n       \"org.apache.tuweni\" % \"tuweni-bytes\" % \"0.10.0\",\n       \"org.apache.tuweni\" % \"tuweni-crypto\" % \"0.10.0\",\n       \"org.apache.tuweni\" % \"tuweni-io\" % \"0.10.0\",\n       \"org.apache.tuweni\" % \"tuweni-units\" % \"0.10.0\",\n-      \"org.bouncycastle\" % \"bcpkix-jdk15on\" % \"1.60\",\n-      \"org.bouncycastle\" % \"bcprov-jdk15on\" % \"1.60\",\n       \"org.checkerframework\" % \"checker-qual\" % \"3.12.0\",\n-      \"org.elasticsearch\" % \"elasticsearch\" % \"6.8.21\",\n-      \"org.elasticsearch\" % \"elasticsearch-cli\" % \"6.8.21\",\n-      \"org.elasticsearch\" % \"elasticsearch-core\" % \"6.8.21\",\n-      \"org.elasticsearch\" % \"elasticsearch-secure-sm\" % \"6.8.21\",\n-      \"org.elasticsearch\" % \"elasticsearch-ssl-config\" % \"6.8.21\",\n-      \"org.elasticsearch\" % \"elasticsearch-x-content\" % \"6.8.21\",\n+      \"org.elasticsearch\" % \"elasticsearch\" % \"6.8.23\",\n+      \"org.elasticsearch\" % \"elasticsearch-cli\" % \"6.8.23\",\n+      \"org.elasticsearch\" % \"elasticsearch-core\" % \"6.8.23\",\n+      \"org.elasticsearch\" % \"elasticsearch-secure-sm\" % \"6.8.23\",\n+      \"org.elasticsearch\" % \"elasticsearch-ssl-config\" % \"6.8.23\",\n+      \"org.elasticsearch\" % \"elasticsearch-x-content\" % \"6.8.23\",\n       \"org.elasticsearch\" % \"jna\" % \"5.5.0\",\n-      \"org.elasticsearch.client\" % \"elasticsearch-rest-client\" % \"6.8.21\",\n-      \"org.elasticsearch.client\" % \"transport\" % \"6.8.21\",\n-      \"org.elasticsearch.plugin\" % \"lang-mustache-client\" % \"6.8.21\",\n-      \"org.elasticsearch.plugin\" % \"parent-join-client\" % \"6.8.21\",\n-      \"org.elasticsearch.plugin\" % \"percolator-client\" % \"6.8.21\",\n-      \"org.elasticsearch.plugin\" % \"rank-eval-client\" % \"6.8.21\",\n-      \"org.elasticsearch.plugin\" % \"reindex-client\" % \"6.8.21\",\n-      \"org.elasticsearch.plugin\" % \"transport-netty4-client\" % \"6.8.21\",\n+      \"org.elasticsearch.client\" % \"elasticsearch-rest-client\" % \"6.8.23\",\n+      \"org.elasticsearch.client\" % \"transport\" % \"6.8.23\",\n+      \"org.elasticsearch.plugin\" % \"lang-mustache-client\" % \"6.8.23\",\n+      \"org.elasticsearch.plugin\" % \"parent-join-client\" % \"6.8.23\",\n+      \"org.elasticsearch.plugin\" % \"percolator-client\" % \"6.8.23\",\n+      \"org.elasticsearch.plugin\" % \"rank-eval-client\" % \"6.8.23\",\n+      \"org.elasticsearch.plugin\" % \"reindex-client\" % \"6.8.23\",\n+      \"org.elasticsearch.plugin\" % \"transport-netty4-client\" % \"6.8.23\",\n       \"org.flywaydb\" % \"flyway-core\" % \"5.0.7\",\n       \"org.hdrhistogram\" % \"HdrHistogram\" % \"2.1.9\",\n       \"org.jsoup\" % \"jsoup\" % \"1.14.3\",\n       \"org.lz4\" % \"lz4-java\" % \"1.8.0\",\n       \"org.osgi\" % \"org.osgi.service.component.annotations\" % \"1.4.0\",\n-      \"org.ow2.asm\" % \"asm\" % \"5.0.4\",\n+      \"org.ow2.asm\" % \"asm\" % \"5.0.3\",\n       \"org.ow2.asm\" % \"asm-analysis\" % \"5.0.3\",\n       \"org.ow2.asm\" % \"asm-commons\" % \"5.0.3\",\n       \"org.ow2.asm\" % \"asm-tree\" % \"5.0.3\",\n@@ -190,11 +178,11 @@ Compile / dependencyOverrides ++= {\n       \"org.scala-lang.modules\" % \"scala-xml_2.12\" % \"1.2.0\",\n       \"org.scala-stm\" % \"scala-stm_2.12\" % \"0.9.1\",\n       \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.10\",\n-      \"org.slf4j\" % \"jcl-over-slf4j\" % \"1.7.30\",\n-      \"org.slf4j\" % \"jul-to-slf4j\" % \"1.7.30\",\n+      \"org.slf4j\" % \"jcl-over-slf4j\" % \"1.7.32\",\n+      \"org.slf4j\" % \"jul-to-slf4j\" % \"1.7.32\",\n       \"org.slf4j\" % \"slf4j-api\" % \"1.7.32\",\n       \"org.yaml\" % \"snakeyaml\" % \"1.17\"\n     )\n   }\n }\n-// LIBRARY_DEPENDENCIES_HASH c5f2c9d990693c72f65518e3e1ffca7989b8f127\n+// LIBRARY_DEPENDENCIES_HASH 06dac48052957314902aad3047e30f016af05e7d"
    },
    {
      "sha": "2e5b0f57101d323a86821a681f055328cbd9246a",
      "filename": "node_modules",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/node_modules?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -1 +1 @@\n-Subproject commit f1ff1a69c004cbf2ba113d1afbced5f08d85ed32\n+Subproject commit 2e5b0f57101d323a86821a681f055328cbd9246a"
    },
    {
      "sha": "870f80f6a2b7627e29140fff3514936b55a87732",
      "filename": "package.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/package.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/package.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/package.json?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -30,7 +30,7 @@\n     \"fileapi\": \"^2.0.21\",\n     \"glob\": \"^7.1.7\",\n     \"keymaster\": \"^1.6.2\",\n-    \"markdown-it\": \"^12.2.0\",\n+    \"markdown-it\": \"^12.3.2\",\n     \"moment\": \"^2.24.0\",\n     \"react\": \"^16.13.1\",\n     \"react-bootstrap\": \"^0.32.3\",\n@@ -42,7 +42,7 @@\n   },\n   \"devDependencies\": {\n     \"@types/assert\": \"^1.5.6\",\n-    \"@types/markdown-it\": \"^12.2.1\",\n+    \"@types/markdown-it\": \"^12.2.3\",\n     \"@types/minimist\": \"^1.2.2\",\n     \"@types/node\": \"^16.7.4\",\n     \"@types/supertest\": \"^2.0.11\","
    },
    {
      "sha": "6c309e9790f71d689e2b6084fb13038f079e5687",
      "filename": "project/Dependencies.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/project/Dependencies.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/project/Dependencies.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/project/Dependencies.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -50,10 +50,11 @@ object Dependencies {\n     val rediscala = \"com.github.etaty\" %% \"rediscala\" % \"1.9.0\"\n \n     val apacheCommonsEmail = \"org.apache.commons\" % \"commons-email\" % \"1.5\"\n+    val apacheCommonsLang3 = \"org.apache.commons\" % \"commons-lang3\" % \"3.12.0\"\n \n     // Does v1.25 recognize .woff and .woff2 file extensions? Then can remove\n     // extra checks in module ty-core. [5AKR20]\n-    val apacheTika = \"org.apache.tika\" % \"tika-core\" % \"1.27\"  // 2.1.0 is newest, SHOULD SECURITY\n+    val apacheTika = \"org.apache.tika\" % \"tika-core\" % \"1.28\"  // 2.1.0 is newest, SHOULD SECURITY\n \n     val jsoup = \"org.jsoup\" % \"jsoup\" % \"1.14.3\"   // newest as of 2021-11\n \n@@ -97,7 +98,7 @@ object Dependencies {\n     //\n     // Let's use Java-JWT. It's well-known and its readme has a simple decoding example.\n     // Repo: https://github.com/auth0/java-jwt\n-    val auth0JavaJwt = \"com.auth0\" % \"java-jwt\" % \"3.18.2\"\n+    val auth0JavaJwt = \"com.auth0\" % \"java-jwt\" % \"3.18.3\"\n \n \n     // ----- PASETO tokens\n@@ -117,7 +118,7 @@ object Dependencies {\n     // Needed for v2.public, in Java 8:\n     // But the BouncyCastle docs are not nice to read, plus ads.\n     // Upgr to Java 11, so won't need to read.\n-    //val jpasetoBouncyCastle = \"dev.paseto\" % \"jpaseto-bouncy-castle\" % \"0.6.0\" //% \"runtime\"\n+    //val jpasetoBouncyCastle = \"dev.paseto\" % \"jpaseto-bouncy-castle\" % \"0.7.0\" //% \"runtime\"\n     //val bouncyCastle = \"org.bouncycastle\" % \"bcprov-jdk15to18\" % \"1.68\"\n \n     // For v2.public — cannot get this working though."
    },
    {
      "sha": "e64c208ff5072a841520c31ee232b896b239006f",
      "filename": "project/build.properties",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/project/build.properties",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/project/build.properties",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/project/build.properties?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -1 +1 @@\n-sbt.version=1.5.6\n+sbt.version=1.5.8"
    },
    {
      "sha": "f56c7422faaa78adfc8f01f168a5a884b24c22a7",
      "filename": "project/plugins.sbt",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/project/plugins.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/project/plugins.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/project/plugins.sbt?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -18,10 +18,10 @@ resolvers ++= Seq(\n   Resolver.sbtPluginRepo(\"releases\")) // =  https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases/\n \n // Use the Play sbt plugin for Play projects\n-addSbtPlugin(\"com.typesafe.play\" % \"sbt-plugin\" % \"2.8.9\")\n+addSbtPlugin(\"com.typesafe.play\" % \"sbt-plugin\" % \"2.8.12\")\n \n // A refactoring and linting tool for Scala\n-addSbtPlugin(\"ch.epfl.scala\" % \"sbt-scalafix\" % \"0.9.33\")\n+addSbtPlugin(\"ch.epfl.scala\" % \"sbt-scalafix\" % \"0.9.34\")\n \n // Pin dependencies.\n addSbtPlugin(\"com.github.tkawachi\" % \"sbt-lock\" % \"0.8.0\")"
    },
    {
      "sha": "4f3793ae1f5ef7d391c8b3557e8700186b5235ce",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans/tyse-v0-dev?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -1 +1 @@\n-Subproject commit ec8af9b559cfe2de9e9d043287eff85ca5fe3a97\n+Subproject commit 4f3793ae1f5ef7d391c8b3557e8700186b5235ce"
    },
    {
      "sha": "1a2600b448e62f68f8130052182122286e4b10e1",
      "filename": "relchans/tyse-v0-regular",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans/tyse-v0-regular?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -1 +1 @@\n-Subproject commit 1d0010e0439224984bd704e2fef79299ffdacf40\n+Subproject commit 1a2600b448e62f68f8130052182122286e4b10e1"
    },
    {
      "sha": "163a058ed0e79a84c7aa93dc192fa8e4314878d6",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -524,6 +524,8 @@ function runAllE2eTests {\n \n   $r s/wdio-7 --only do-api-like-and-subscribe.2br --cd -i $args\n \n+  $r s/wdio-7 --only dir.create-site-via-api.2br --cd -i $args\n+  $r s/wdio-7 --only embcom.create-site-via-api.2br --cd -i $args\n   $r s/wdio-7 --only dir.create-site-imp-json.2br --cd -i $args\n \n \n@@ -611,6 +613,7 @@ function runAllE2eTests {\n   #r s/wdio       --only embcom.many-comment-iframes-click-load-more.2br $args TESTS_MISSING\n   $r s/wdio       --only embedded-comments-discussion-id.test $args\n   $r s/wdio       --only embedded-comments-discussion-id-old-name $args\n+  $r s/wdio-7     --only embcom.ignore-query-params.2br --cd -i $args\n \n   $r s/wdio       --only embedded-comments-guest-login-email-notf-unsbscribe $args\n   $r s/wdio       --only embcom.all-idp-logins.1br.extidp $args"
    },
    {
      "sha": "d1f9c1b7a3e1f71cd07df6d7d7bfe66bf395ef0b",
      "filename": "tests/app/debiki/RateLimiterSpec.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/debiki/RateLimiterSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/debiki/RateLimiterSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/debiki/RateLimiterSpec.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -19,7 +19,7 @@ package debiki\n \n import com.debiki.core._\n import debiki.dao.DaoAppSuite\n-import ed.server.http.DebikiRequest\n+import talkyard.server.http.DebikiRequest\n import org.mockito.Mockito._\n import org.mockito.Mockito\n import play.api.http.Status.TOO_MANY_REQUESTS"
    },
    {
      "sha": "4abd4c0ae8be5eabd167389e7bfd2ef8e21d2a09",
      "filename": "tests/app/debiki/dao/DaoAppSuite.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/debiki/dao/DaoAppSuite.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/debiki/dao/DaoAppSuite.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/debiki/dao/DaoAppSuite.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -20,7 +20,7 @@ package debiki.dao\n import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.{Globals, TextAndHtml, TextAndHtmlMaker, TitleSourceAndHtml}\n-import ed.server.{EdAppComponents, EdContext}\n+import talkyard.server.{TyAppComponents, TyContext}\n import org.scalatest.freespec.AnyFreeSpec\n import org.scalatest.matchers.must\n import org.scalatestplus.play.{BaseOneAppPerSuite, FakeApplicationFactory}\n@@ -70,9 +70,9 @@ class DaoAppSuite(\n \n   Globals.setIsProdForever(false)\n \n-  private var edAppComponents: EdAppComponents = _\n+  private var edAppComponents: TyAppComponents = _\n \n-  lazy val context: EdContext = edAppComponents.context\n+  lazy val context: TyContext = edAppComponents.context\n   lazy val globals: Globals = context.globals\n \n \n@@ -105,7 +105,7 @@ class DaoAppSuite(\n       _.configure(env, totalConfig, optionalProperties = Map.empty)\n     } */\n \n-    edAppComponents = new EdAppComponents(appLoaderContext)\n+    edAppComponents = new TyAppComponents(appLoaderContext)\n     setTime(startTime) // now 'globals' is available\n     edAppComponents.application\n   }"
    },
    {
      "sha": "bd83fd565146ea413a1319d5c9993c7cd67f4366",
      "filename": "tests/app/debiki/dao/UploadsDaoSpec.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/debiki/dao/UploadsDaoSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/debiki/dao/UploadsDaoSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/debiki/dao/UploadsDaoSpec.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -93,7 +93,7 @@ class UploadsDaoSpec extends AnyFreeSpec with must.Matchers {\n       val badPathSlashMissing = s\"/-/u/$pubSiteIdOne/0/1/22444444444444444444444444444444.jpg\"\n \n       def mkRef(hashPath: String) = UploadRef(\n-        ed.server.UploadsUrlBasePath, hashPath\n+         talkyard.server.UploadsUrlBasePath, hashPath\n             .replaceAllLiterally(s\"/-/u/$pubSiteIdOne/\", \"\")\n             .replaceAllLiterally(s\"/-/u/$pubSiteIdTwo/\", \"\")\n             .replaceAllLiterally(\"/-/u/\", \"\"))"
    },
    {
      "sha": "3e7a4e39be83abfbbc27e2220cd649763f5cf019",
      "filename": "tests/app/talkyard/server/dao/LoadWhomToSendSummariesToAppSpec.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/dao/LoadWhomToSendSummariesToAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/dao/LoadWhomToSendSummariesToAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/talkyard/server/dao/LoadWhomToSendSummariesToAppSpec.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.dao\n+package  talkyard.server.dao\n \n import com.debiki.core._\n import com.debiki.core.Prelude._",
      "previous_filename": "tests/app/ed/server/dao/LoadWhomToSendSummariesToAppSpec.scala"
    },
    {
      "sha": "332e314bbc78d2c6ec929b5a4bbfe221dd6adb7f",
      "filename": "tests/app/talkyard/server/dao/SiteTransactionAppSpec.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/dao/SiteTransactionAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/dao/SiteTransactionAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/talkyard/server/dao/SiteTransactionAppSpec.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.dao\n+package  talkyard.server.dao\n \n import com.debiki.core._\n import com.debiki.core.Prelude._",
      "previous_filename": "tests/app/ed/server/dao/SiteTransactionAppSpec.scala"
    },
    {
      "sha": "84f77a70540441514966b8e6546972a21cafdfaa",
      "filename": "tests/app/talkyard/server/dao/SiteTxLoadParticipantsAppSpec.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/dao/SiteTxLoadParticipantsAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/dao/SiteTxLoadParticipantsAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/talkyard/server/dao/SiteTxLoadParticipantsAppSpec.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.dao\n+package  talkyard.server.dao\n \n import com.debiki.core._\n import debiki._",
      "previous_filename": "tests/app/ed/server/dao/SiteTxLoadParticipantsAppSpec.scala"
    },
    {
      "sha": "fda40a56255ab27ca57ba84febf5c49681eb9804",
      "filename": "tests/app/talkyard/server/dao/SiteTxNoticesAppSpec.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/dao/SiteTxNoticesAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/dao/SiteTxNoticesAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/talkyard/server/dao/SiteTxNoticesAppSpec.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.dao\n+package  talkyard.server.dao\n \n import com.debiki.core._\n import debiki._",
      "previous_filename": "tests/app/ed/server/dao/SiteTxNoticesAppSpec.scala"
    },
    {
      "sha": "107ed0e442a5ea2e112c4984799caff8b028aced",
      "filename": "tests/app/talkyard/server/dao/SiteTxPermissionsAppSpec.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/dao/SiteTxPermissionsAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/dao/SiteTxPermissionsAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/talkyard/server/dao/SiteTxPermissionsAppSpec.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.dao\n+package  talkyard.server.dao\n \n import com.debiki.core._\n import debiki._",
      "previous_filename": "tests/app/ed/server/dao/SiteTxPermissionsAppSpec.scala"
    },
    {
      "sha": "e48ce9f6961992448482832256b2f5184fdceee3",
      "filename": "tests/app/talkyard/server/notf/NotfsAppMentionsSpec.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/notf/NotfsAppMentionsSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/notf/NotfsAppMentionsSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/talkyard/server/notf/NotfsAppMentionsSpec.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.notf\n+package  talkyard.server.notf\n \n import com.debiki.core._\n import debiki.dao._",
      "previous_filename": "tests/app/ed/server/notf/NotfsAppMentionsSpec.scala"
    },
    {
      "sha": "c8c4bb75c6f8974f7a0332a77c745233ea02b146",
      "filename": "tests/app/talkyard/server/notf/NotfsAppPageNotfsSpec.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/notf/NotfsAppPageNotfsSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/notf/NotfsAppPageNotfsSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/talkyard/server/notf/NotfsAppPageNotfsSpec.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,7 +15,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package ed.server.notf\n+package  talkyard.server.notf\n \n import com.debiki.core._\n import com.debiki.core.Prelude._",
      "previous_filename": "tests/app/ed/server/notf/NotfsAppPageNotfsSpec.scala"
    },
    {
      "sha": "703f20c307397e44b0c4dde75d50d3990edf8268",
      "filename": "tests/app/talkyard/server/security/ReservedNamesTest.scala",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/security/ReservedNamesTest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/app/talkyard/server/security/ReservedNamesTest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/talkyard/server/security/ReservedNamesTest.scala?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -16,7 +16,7 @@\n  */\n \n \n-package ed.server.security\n+package  talkyard.server.security\n \n \n import org.scalatest.freespec.AnyFreeSpec",
      "previous_filename": "tests/app/ed/server/security/ReservedNamesTest.scala"
    },
    {
      "sha": "2fd438fdbd12237948e8c7189fd86061db455d3d",
      "filename": "tests/e2e-wdio7/specs/__e2e-test-template.2br.e2e__.ts",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/specs/__e2e-test-template.2br.e2e__.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/specs/__e2e-test-template.2br.e2e__.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/__e2e-test-template.2br.e2e__.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "previous_filename": "tests/e2e-wdio7/specs/__e2e-test-template__.2br.ts"
    },
    {
      "sha": "9b7a2bce394c90a12b40309ea71e437181095144",
      "filename": "tests/e2e-wdio7/specs/dir.create-site-via-api.2br.e2e.ts",
      "status": "added",
      "additions": 199,
      "deletions": 0,
      "changes": 199,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/specs/dir.create-site-via-api.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/specs/dir.create-site-via-api.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/dir.create-site-via-api.2br.e2e.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -0,0 +1,199 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import * as make from '../utils/make';\n+import * as utils from '../utils/utils';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let mei: Member;\n+let mei_brB: TyE2eTestBrowser;\n+\n+let newSite: { id: SiteId, origin: St } | U;\n+\n+\n+\n+describe(`dir.create-site-via-api.2br  TyTE2ECREASITAPI`, () => {\n+\n+  it(`Create browsers`, async () => {\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = make.memberOwenOwner();\n+    owen_brA = brA;\n+    \n+    mei = make.memberMei();\n+    mei_brB = brB;\n+  });\n+\n+\n+  it(`Create site via API`, async () => {\n+    newSite = server.apiV0.createSite({ data: {\n+      testSiteOkDelete: true,\n+      acceptTermsAndPrivacy: true,\n+      createForum: true,\n+      localHostname: 'e2e-test--site-via-api',\n+      //embeddingSiteAddress: '',\n+      organizationName: \"E2E Test Create Site Via Api\",\n+      ownerUsername: owen.username,\n+      ownerEmailAddr: owen.emailAddress,\n+      ownerEmailAddrVerified: true,\n+      // Maybe later — so won't need to use Forgot-password link?\n+      // ownerOneTimeLoginSecret: ___,\n+    }}).newSite;\n+  });\n+\n+\n+  it(`Skip rate limits`, async () => {\n+    server.skipRateLimits(newSite.id);\n+  });\n+\n+\n+  // TESTS_MISSING: Verify that others cannot login, yet? Before Owen has\n+  // activated his account.\n+\n+  it(`Owen goes to the admin area, ... `, async () => {\n+    await owen_brA.adminArea.goToUsersEnabled(newSite.origin);\n+  });\n+\n+\n+  it(`... clicks the Forgot Password link`, async () => {\n+    // Dupl code. [e2e_reset_pwd]\n+    await owen_brA.loginDialog.clickResetPasswordCloseDialogSwitchTab({\n+            loginDialogWillClose: false });\n+  });\n+\n+\n+  it(`... types the wrong email address  TyTERSTWRONGEML`, async () => {\n+    await owen_brA.resetPasswordPage.submitAccountOwnerEmailAddress('wrong-addr@some.co');\n+  });\n+\n+  it(`... goes back to try again`, async () => {\n+    await owen_brA.back();\n+  });\n+\n+  it(`... types his real address (which was specified in the create-site request)`, async () => {\n+    await owen_brA.resetPasswordPage.submitAccountOwnerEmailAddress(owen.emailAddress);\n+  });\n+\n+  let resetPwdPageLink;\n+\n+  it(\"Owen gets an email with a password reset link\", async () => {\n+    // (Could have used: server.waitAndGetResetPasswordLinkEmailedTo(..).)\n+    const email = await server.getLastEmailSenTo(newSite.id, owen.emailAddress);\n+    resetPwdPageLink = utils.findFirstLinkToUrlIn(\n+          newSite.origin + '/-/reset-password/choose-password/', email.bodyHtmlText);\n+  });\n+\n+\n+  it(\"But no email got sent to the wrong addr\", async () => {\n+    const emailsSent = await server.getEmailsSentToAddrs(newSite.id);\n+    assert.eq(emailsSent.num, 1);\n+    assert.deepEq(emailsSent.addrsByTimeAsc, [owen.emailAddress]);\n+  });\n+\n+\n+  it(\"Owen follows the reset-password link\", async () => {\n+    await owen_brA.rememberCurrentUrl();\n+    await owen_brA.go2(resetPwdPageLink);\n+    await owen_brA.waitForNewUrl();\n+  });\n+\n+  it(\"... types a new password\", async () => {\n+    await owen_brA.chooseNewPasswordPage.typeAndSaveNewPassword(owen.password);\n+  });\n+\n+  it(\"... he can login with the new password\", async () => {\n+    await owen_brA.goAndWaitForNewUrl(newSite.origin);\n+    await owen_brA.topbar.clickLogout();\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen.username, owen.password);\n+  });\n+\n+\n+  it(`New members can sign up`, async () => {\n+    await mei_brB.go2(newSite.origin);\n+    await mei_brB.complex.signUpAsMemberViaTopbar(mei);\n+  });\n+\n+\n+  it(`Owen logs out ...`, async () => {\n+    await owen_brA.topbar.clickLogout();\n+  });\n+\n+  it(`... he can log in directly to the admin area`, async () => {\n+    await owen_brA.adminArea.goToUsersEnabled();\n+    await owen_brA.loginDialog.loginWithPassword(owen);\n+  });\n+\n+\n+\n+  it(`Owen sees just one user in the active users tab`, async () => {\n+    await owen_brA.adminArea.users.asserExactlyNumUsers(1);\n+  });\n+\n+  it(`... namely himself — Mei hasn't yet verified her email`, async () => {\n+    await owen_brA.adminArea.users.assertUserListed(owen);\n+  });\n+\n+\n+\n+  it(`Mei verifies her email address`, async () => {\n+    const link = await server.waitAndGetLastVerifyEmailAddressLinkEmailedTo(\n+        newSite.id, mei.emailAddress);\n+    await mei_brB.go2(link);\n+  });\n+  it(`... gets logged in`, async () => {\n+    await mei_brB.hasVerifiedSignupEmailPage.clickContinue();\n+  });\n+  it(`... sees her username menu`, async () => {\n+    await mei_brB.topbar.assertMyUsernameMatches(mei.username);\n+  });\n+\n+\n+\n+  it(`Now Owen sees two users`, async () => {\n+    await owen_brA.refresh2();\n+    await owen_brA.adminArea.users.asserExactlyNumUsers(2);\n+  });\n+\n+  it(`... namely himself and Mei`, async () => {\n+    await owen_brA.adminArea.users.assertUserListed(owen);\n+    await owen_brA.adminArea.users.assertUserListed(mei);\n+  });\n+\n+\n+  // ----- Verify that the new site can actually be used\n+\n+  let newTopicUrlPath: St | U;\n+\n+  it(`Mei can create a topic`, async () => {\n+    await mei_brB.complex.createAndSaveTopic({ title: \"New_topic_title\", body: \"Body.\" });\n+    newTopicUrlPath = await mei_brB.urlPath();\n+  });\n+\n+  it(`... Owen gets an email notification`, async () => {\n+    await server.waitUntilLastEmailMatches(newSite.id, owen.emailAddress, \"New_topic_title\");\n+  });\n+\n+  it(`... Owen sees it`, async () => {\n+    await owen_brA.go2(newTopicUrlPath);\n+    await owen_brA.assertPageTitleMatches(\"New_topic_title\");\n+  });\n+\n+  it(`... can reply`, async () => {\n+    // Why do the guidelines modal appear here, although the win width supposedly is 1150?\n+    // — with that width, the guidelines modal *won't* appear.  [invisible_br_width]\n+    await owen_brA.complex.replyToOrigPost(\"New_topic_reply\", null, { closeGuidelines: true });\n+  });\n+\n+  it(`Mei sees the reply`, async () => {\n+    await mei_brB.topic.waitForNumReplies({ numNormal: 1 });\n+  });\n+\n+});\n+"
    },
    {
      "sha": "5a10bee5f1e7c23765aa834736d34184d506e625",
      "filename": "tests/e2e-wdio7/specs/embcom.create-site-via-api.2br.e2e.ts",
      "status": "added",
      "additions": 186,
      "deletions": 0,
      "changes": 186,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/specs/embcom.create-site-via-api.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/specs/embcom.create-site-via-api.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/embcom.create-site-via-api.2br.e2e.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -0,0 +1,186 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import * as make from '../utils/make';\n+import c from '../test-constants';\n+import { TyE2eTestBrowser, IsWhere } from '../utils/ty-e2e-test-browser';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let mei: Member;\n+let mei_brB: TyE2eTestBrowser;\n+\n+let newSite: { id: SiteId, origin: St } | U;\n+\n+const localHostname = 'comments-for-e2e-test-creembsit-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-creembsit.localhost:8080';\n+\n+\n+\n+describe(`embcom.create-site-via-api.2br  TyTE2ECREAEMBSITAPI`, () => {\n+\n+  it(`Create browsers`, async () => {\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = make.memberOwenOwner();\n+    owen_brA = brA;\n+    \n+    mei = make.memberMei();\n+    mei_brB = brB;\n+  });\n+\n+\n+  it(`Create embedded comments site via API`, async () => {\n+    newSite = server.apiV0.createSite({ data: {\n+      testSiteOkDelete: true,\n+      acceptTermsAndPrivacy: true,\n+      localHostname: 'comments-for-e2e-test-creembsit-localhost-8080',\n+      createEmbeddedComments: true,\n+      embeddingSiteAddress: embeddingOrigin,\n+      organizationName: \"E2E Test Create Site Via Api\",\n+      ownerUsername: owen.username,\n+      ownerEmailAddr: owen.emailAddress,\n+      ownerEmailAddrVerified: true,\n+      // Maybe later — so won't need to use Forgot-password link?\n+      // ownerOneTimeLoginSecret: ___,\n+    }}).newSite;\n+  });\n+\n+\n+  it(`Skip rate limits`, async () => {\n+    server.skipRateLimits(newSite.id);\n+  });\n+\n+\n+  it(`Create embedding pages`, () => {\n+    const dir = 'target';\n+    fs.writeFileSync(`${dir}/page-a-slug.html`, makeHtml('aaa', '#500'));\n+    fs.writeFileSync(`${dir}/page-b-slug.html`, makeHtml('bbb', '#040'));\n+    function makeHtml(pageName: St, bgColor: St): St {\n+      return utils.makeEmbeddedCommentsHtml({\n+              pageName, discussionId: '', localHostname, bgColor});\n+    }\n+  });\n+\n+\n+  it(`Owen goes to the admin area, ... `, async () => {\n+    await owen_brA.adminArea.goToUsersEnabled(newSite.origin);\n+  });\n+\n+  it(`Owen resets his password`, async () => {\n+    await owen_brA.complex.resetPasswordFromLoginDialog({ site: newSite, who: owen,\n+            newPassword: owen.password });\n+  });\n+\n+  it(`... closse the exta tab where he type the password`, async () => {\n+    await owen_brA.closeWindowSwitchToOther();\n+  });\n+\n+  it(`Owen goes to the admin area (already logged in)`, async () => {\n+    await owen_brA.adminArea.goToUsersEnabled();\n+  });\n+\n+  it(`... sees one user in the active users tab`, async () => {\n+    await owen_brA.adminArea.users.asserExactlyNumUsers(1);\n+  });\n+\n+  it(`... namely himself`, async () => {\n+    await owen_brA.adminArea.users.assertUserListed(owen);\n+  });\n+\n+\n+  it(`Mei goes there too`, async () => {\n+    await mei_brB.go2(embeddingOrigin + '/page-a-slug.html');\n+  });\n+\n+  it(`... creates an account`, async () => {\n+    await mei_brB.complex.signUpAsMemberViaPagebar(mei);\n+  });\n+\n+\n+  it(`Mei verifies her email address`, async () => {\n+    const link = await server.waitAndGetLastVerifyEmailAddressLinkEmailedTo(\n+        newSite.id, mei.emailAddress);\n+    await mei_brB.go2(link);\n+  });\n+  it(`... gets logged in to the embedded comments`, async () => {\n+    await mei_brB.rememberCurrentUrl();\n+    await mei_brB.hasVerifiedSignupEmailPage.clickContinue();\n+  });\n+  it(`... is then sent to the embedded comments page`, async () => {\n+    await mei_brB.waitForNewUrl();\n+    let url = await mei_brB.getUrl();\n+    assert.eq(url, embeddingOrigin + '/page-a-slug.html'\n+                                                  + '#'); // why needed? Oh well.\n+  });\n+\n+\n+\n+  it(`Now Owen sees two users`, async () => {\n+    await owen_brA.refresh2();\n+    await owen_brA.adminArea.users.asserExactlyNumUsers(2);\n+  });\n+\n+  it(`... namely himself and Mei`, async () => {\n+    await owen_brA.adminArea.users.assertUserListed(owen);\n+    await owen_brA.adminArea.users.assertUserListed(mei);\n+  });\n+\n+\n+  it(`Owen logs out, done for the day`, async () => {\n+    await owen_brA.topbar.clickLogout();\n+  });\n+\n+\n+\n+  // ----- Verify that the new site can actually be used\n+\n+  it(`Mei posts a comment`, async () => {\n+    await mei_brB.complex.replyToEmbeddingBlogPost(\"Meis_comment\");\n+  });\n+\n+  it(`... Owen gets a notification email, clicks link to Mei's comment`, async () => {\n+    const link = await server.waitAndGetLastReplyNotfLinkEmailedTo(newSite.id, owen.emailAddress,\n+            { textInMessage: \"Meis_comment\", urlPart: embeddingOrigin + '/page-a-slug.html' });\n+    await owen_brA.go2(link);\n+    //const matchRes = await server.waitUntilLastEmailMatches(newSite.id, owen.emailAddress, \"Meis_comment\");\n+    //matchRes.matchedEmail.\n+  });\n+\n+  it(`... Owen sees the reply`, async () => {\n+    await owen_brA.switchToEmbCommentsIframeIfNeeded();\n+    await owen_brA.topic.waitForNumReplies({ numNormal: 1 });\n+    await owen_brA.topic.assertPostTextIs(c.FirstReplyNr, \"Meis_comment\");\n+  });\n+\n+  /*  Window handle E2E test bug, skip for now: [E2EBUG]\n+\n+  it(`... clicks Reply`, async () => {\n+    await owen_brA.topic.clickReplyToPostNr(c.FirstReplyNr);\n+  });\n+\n+  it(`... submits a message`, async () => {\n+    await owen_brA.editor.editText(`Owens_reply`);\n+    await owen_brA.editor.clickSave();\n+        // await this.editor.clickSave();\n+    await owen_brA.swithToOtherTabOrWindow(IsWhere.LoginPopup);\n+    await owen_brA.loginDialog.switchToLoginIfIsSignup();\n+    await owen_brA.loginDialog.loginWithPassword(owen);\n+    //await owen_brA.switchBackToFirstTabOrWindow();\n+  });\n+\n+  it(`Mei sees the reply`, async () => {\n+    await mei_brB.refresh2();\n+    await mei_brB.topic.waitForNumReplies({ numNormal: 2 });\n+  });\n+  */\n+\n+});\n+"
    },
    {
      "sha": "ebc1617f3481ca7ac41cfbc5bcec661bac0f3097",
      "filename": "tests/e2e-wdio7/specs/embcom.ignore-query-params.2br.e2e.ts",
      "status": "added",
      "additions": 202,
      "deletions": 0,
      "changes": 202,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/specs/embcom.ignore-query-params.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/specs/embcom.ignore-query-params.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/embcom.ignore-query-params.2br.e2e.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -0,0 +1,202 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+\n+const localHostname = 'comments-for-e2e-test-embdftpv-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-embdftpv.localhost:8080';\n+\n+const considerQueryPageUrlPath = '/page-consider-query.html';\n+const ignoreQueryPageUrlPath   = '/page-ignore-query.html';\n+const whatBlogPostQueryParam = '?whatBlogPost=blogPostId';\n+const otherBlogPostQueryParam = '?whatBlogPost=otherPostId';\n+const whateverQueryParam = '?what=ever';\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+\n+\n+describe(`embcom.ignore-query-params.2br  TyTEEMCIGQPRMS`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Emb Cmts Ign Query Params E2E Test\",\n+      members: ['owen_owner', 'maria'],\n+    });\n+\n+    builder.getSite().meta.localHostname = localHostname;\n+    builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Create embedding pages`, () => {\n+    const dir = 'target';\n+    fs.writeFileSync(dir + considerQueryPageUrlPath, makeHtml('aaa', '#500', {\n+          talkyardConsiderQueryParams: ['whatBlogPost'] }));\n+    fs.writeFileSync(dir + ignoreQueryPageUrlPath, makeHtml('bbb', '#040'));\n+    function makeHtml(pageName: St, bgColor: St, ps?: {\n+            talkyardConsiderQueryParams?: St[]}): St {\n+      return utils.makeEmbeddedCommentsHtml({ ...ps,\n+              pageName, discussionId: '', localHostname, bgColor});\n+    }\n+  });\n+\n+\n+  // ----- Post comments\n+\n+  it(`Owen goes to emb page a, no query param`, async () => {\n+    await owen_brA.go2(embeddingOrigin + considerQueryPageUrlPath);\n+  });\n+  it(`... logs in`, async () => {\n+    await owen_brA.complex.loginIfNeededViaMetabar(owen);\n+  });\n+\n+  it(`Maria goes there too, but with a query param: ${whatBlogPostQueryParam}`, async () => {\n+    await maria_brB.go2(embeddingOrigin + considerQueryPageUrlPath + whatBlogPostQueryParam);\n+  });\n+  it(`... logs in`, async () => {\n+    await maria_brB.complex.loginIfNeededViaMetabar(maria);\n+  });\n+\n+  it(`They post one comment each`, async () => {\n+    await owen_brA.complex.replyToEmbeddingBlogPost('Owen-consider_query_1');\n+    await maria_brB.complex.replyToEmbeddingBlogPost('Maria-consider_query_1');\n+  });\n+\n+\n+  it(`Next, they go to the ignore-query-string page`, async () => {\n+    await owen_brA.go2(ignoreQueryPageUrlPath);\n+  });\n+\n+  it(`... Maria with the same query string in the URL: ${whatBlogPostQueryParam}`, async () => {\n+    await maria_brB.go2(ignoreQueryPageUrlPath + whatBlogPostQueryParam);\n+  });\n+\n+  it(`Here too, they post one comment each`, async () => {\n+    await owen_brA.complex.replyToEmbeddingBlogPost('Owen-ignore_query');\n+    await maria_brB.complex.replyToEmbeddingBlogPost('Maria-ignore_query');\n+  });\n+\n+\n+  // ----- Look at comments, query param matters\n+\n+  it(`Back on the consider-query-string page ...`, async () => {\n+    await owen_brA.go2(considerQueryPageUrlPath);\n+    await maria_brB.go2(considerQueryPageUrlPath + whatBlogPostQueryParam);\n+  });\n+\n+  it(`... Owen doesn't see Maria's comment; he sees his own only`, async () => {\n+    await owen_brA.topic.waitForNumReplies({ numNormal: 1 });\n+    await owen_brA.topic.waitForPostAssertTextMatches(c.FirstReplyNr, 'Owen-consider_query_1');\n+  });\n+\n+  it(`... and Maria also sees her own, only  —  Owen's and Maria's URLs are\n+            two different blog posts, show different comments`, async () => {\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 1 });\n+    await maria_brB.topic.waitForPostAssertTextMatches(c.FirstReplyNr, 'Maria-consider_query_1');\n+  });\n+\n+\n+  // ----- The wrong query param\n+\n+  it(`If Maria sets the query parm name to else ...`, async () => {\n+    await maria_brB.go2(considerQueryPageUrlPath + whateverQueryParam)\n+  });\n+  it(`... Owen's comment appears, because unknown query params are ignored,\n+            and Owen posted his comment on a page w/o any query param`, async () => {\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 1 });\n+    await maria_brB.topic.waitForPostAssertTextMatches(c.FirstReplyNr, 'Owen-consider_query_1');\n+  });\n+\n+\n+  // ----- Another blog post, via other query param\n+\n+  it(`But if setting the query string to another blog post id ...`, async () => {\n+    await maria_brB.go2(considerQueryPageUrlPath + otherBlogPostQueryParam)\n+  });\n+  it(`... then no comments are there`, async () => {\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 0 });\n+  });\n+\n+\n+  // ----- Another comment, the other blog post\n+\n+  it(`Maria posts a comment on this same-path but different-query-param blog post`, async () => {\n+    await maria_brB.complex.replyToEmbeddingBlogPost('Maria-consider_query_2');\n+  });\n+\n+  it(`URL paths ${considerQueryPageUrlPath + whatBlogPostQueryParam\n+          } and ${considerQueryPageUrlPath + otherBlogPostQueryParam}\n+          show different comments  (are for different blog posts)`, async () => {\n+    await maria_brB.go2(considerQueryPageUrlPath + whatBlogPostQueryParam);\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 1 });\n+    await maria_brB.topic.waitForPostAssertTextMatches(c.FirstReplyNr, 'Maria-consider_query_1');\n+  });\n+  it(`... different`, async () => {\n+    await maria_brB.go2(considerQueryPageUrlPath + otherBlogPostQueryParam);\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 1 });\n+    await maria_brB.topic.waitForPostAssertTextMatches(c.FirstReplyNr, 'Maria-consider_query_2');\n+  });\n+\n+\n+  // ----- Look at comments, query string ignored\n+\n+  it(`But on the ignore-query-string page ...`, async () => {\n+    await owen_brA.go2(ignoreQueryPageUrlPath);\n+    await maria_brB.go2(ignoreQueryPageUrlPath + whatBlogPostQueryParam);\n+  });\n+\n+  it(`... Owen does see Maria's comment`, async () => {\n+    await owen_brA.topic.waitForNumReplies({ numNormal: 2 });\n+    await owen_brA.topic.waitForPostAssertTextMatches(c.FirstReplyNr, 'Owen-ignore_query');\n+    await owen_brA.topic.waitForPostAssertTextMatches(c.SecondReplyNr, 'Maria-ignore_query');\n+  });\n+\n+  it(`... and Maria sees Owen's comment`, async () => {\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 2 });\n+    await maria_brB.topic.waitForPostAssertTextMatches(c.FirstReplyNr, 'Owen-ignore_query');\n+    await maria_brB.topic.waitForPostAssertTextMatches(c.SecondReplyNr, 'Maria-ignore_query');\n+  });\n+\n+  it(`The query string can be set to whatever`, async () => {\n+    await maria_brB.go2(ignoreQueryPageUrlPath + whateverQueryParam)\n+  });\n+\n+  it(`... since it's ignored, all comments still appear`, async () => {\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 2 });\n+    await maria_brB.topic.waitForPostAssertTextMatches(c.FirstReplyNr, 'Owen-ignore_query');\n+    await maria_brB.topic.waitForPostAssertTextMatches(c.SecondReplyNr, 'Maria-ignore_query');\n+  });\n+\n+});"
    },
    {
      "sha": "f10608163875aa13930e70cb69743b7a77d77f06",
      "filename": "tests/e2e-wdio7/test-constants.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/test-constants.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/test-constants.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/test-constants.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -34,6 +34,7 @@ const TestPageRole = {  // dupl in client/app/constants.ts [5F8KW0P2]\n   MindMap: <PageRole> 11,\n   Discussion: <PageRole> 12,\n   FormalMessage: <PageRole> 17,\n+  JoinlessChat: <PageRole> 22,\n   OpenChat: <PageRole> 18,\n   PrivateChat: <PageRole> 19,\n     // DirectMessage: 20,"
    },
    {
      "sha": "55187fcdc70ca6ee11dec48d4f7c7e0ba259dedc",
      "filename": "tests/e2e-wdio7/utils/log-and-die.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/utils/log-and-die.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/utils/log-and-die.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/log-and-die.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -3,8 +3,10 @@\n import * as _ from 'lodash';\n const ansiColors = require('ansi-colors');\n \n+// (Don't use black text on a white background — that's for e2e test progress messages,\n+// see:  [inv_e2e_progr_msg_cols].)\n const normalColor = ansiColors.white;\n-const boringColor = ansiColors.gray;\n+const boringColor = ansiColors.dim; // 'gray' is darker, hard to read agains a black bg\n const errorColor = ansiColors.bold.bgRed;\n const exceptionColor = ansiColors.bold.yellow;\n const warningColor = ansiColors.bold.red;\n@@ -131,7 +133,8 @@ export function logServerRequest(message: string) {\n   console.log(serverRequestColor(message));\n }\n \n-export function logServerResponse(text: string, ps: { boring: boolean } = { boring: true }) {\n+export function logServerResponse(textOrObj, ps: { boring: Bo } = { boring: true }) {\n+  const text = _.isString(textOrObj) ? textOrObj : JSON.stringify(textOrObj);\n   console.log(\n     serverResponseColor(`The server says:\\n----\\n` + `${text.trim()}` + `\\n----`));\n }"
    },
    {
      "sha": "d1ce66be533109eb85881f2cd22a7da634a36da2",
      "filename": "tests/e2e-wdio7/utils/make.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/utils/make.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/utils/make.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/make.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -187,6 +187,21 @@ export function memberMemah(template: Partial<Member> = {}): Member {\n }\n \n \n+export function memberMei(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"mei\",\n+      fullName: \"Mei Xing\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--mei@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:pub-mei020\",\n+      password: \"pub-mei020\",\n+    };\n+}\n+\n+\n export function memberMaria(template: Partial<Member> = {}): Member {\n     return {\n       ...template,"
    },
    {
      "sha": "f588727289478f93f38284219387f77fdb3ceccc",
      "filename": "tests/e2e-wdio7/utils/server.ts",
      "status": "modified",
      "additions": 37,
      "deletions": 1,
      "changes": 38,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/utils/server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/utils/server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/server.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -6,7 +6,7 @@ import * as _ from 'lodash';\n import assert from './ty-assert';\n import * as utils from './utils';\n import c from '../test-constants';\n-import { j2s, logMessage, logWarning, logErrorNoTrace, logServerRequest, die, dieIf,\n+import { j2s, logMessage, logWarning, logErrorNoTrace, logServerRequest, die, dieIf, logServerResponse,\n         } from './log-and-die';\n \n const syncRequest = require('sync-request');\n@@ -256,6 +256,26 @@ function showResponseBodyJson(body) {\n }\n \n \n+function createSiteViaPubApi(ps: { data: any,\n+        wrongApiSecret?: true }): { newSite: { origin: St, id: SiteId }} {\n+  // See CreateSiteController.apiV0_createSite.\n+  const url = settings.mainSiteOrigin + '/-/v0/create-site';\n+  const data = {\n+    ...ps.data,\n+  };\n+  const apiSecret = ps.wrongApiSecret ? 'wrongCreateSiteApiSecret' :\n+          'publicCreateSiteApiTestSecret';\n+  const resp = postOrDie(url, data, { apiRequester: 'createsite', apiSecret,\n+        fail: !!ps.wrongApiSecret,\n+        hintIfErr:\n+          `You need this in conf/my.conf:\\n\\n` +\n+          'talkyard.createSiteApiSecret=\"publicCreateSiteApiTestSecret\"' });\n+  const respJson = resp.bodyJson();\n+  logServerResponse(respJson);\n+  return respJson;\n+}\n+\n+\n function importRealSiteData(siteData: SiteData2): IdAddress {\n   // We're importing test data, to a \"real\" endpoint that works also\n   // in Prod mode. [06KWFNDS2]\n@@ -321,6 +341,9 @@ function addAdminNotice(ps: { siteId: SiteId, noticeId: Nr }) {\n \n async function getLastEmailSenTo(siteId: SiteId, email: St, dontWait?: 'DontWait')\n         : Pr<EmailSubjectBody | Nl> {\n+  if (!email || email.indexOf('@') <= 0 || email.indexOf('@') >= email.length - 2) {\n+    die(`Not an email address: '${email}'  [TyE4MQEJ9MS2]`);\n+  }\n   for (let attemptNr = 1; attemptNr <= settings.waitforTimeout / 500; ++attemptNr) {\n     const response = await getOrDie(settings.mainSiteOrigin + '/-/last-e2e-test-email?sentTo=' + email +\n       '&siteId=' + siteId);\n@@ -367,6 +390,16 @@ async function getEmailsSentToAddrs(siteId: SiteId): Pr<{ num: Nr, addrsByTimeAs\n }\n \n \n+async function waitAndGetLastReplyNotfLinkEmailedTo(siteId: SiteId, emailAddress: St,\n+          ps: { textInMessage: St, urlPart: St }): Pr<St> {\n+  const matchRes = await waitUntilLastEmailMatches(siteId, emailAddress, ps.textInMessage);\n+  const email = matchRes.matchedEmail;\n+  dieIf(!email, `No email has been sent to ${emailAddress} with text: \"${ps.textInMessage\n+          }\". [TyE2ABKF058]`);\n+  return utils.findFirstLinkToUrlIn(ps.urlPart, email.bodyHtmlText);\n+}\n+\n+\n async function waitAndGetLastVerifyEmailAddressLinkEmailedTo(siteId: SiteId, emailAddress: St,\n       linkAccounts?: 'LINKING_IDP_ACCT'): Pr<St> {\n   const email = await getLastEmailSenTo(siteId, emailAddress);\n@@ -477,6 +510,7 @@ async function waitUntilLastEmailMatches(siteId: SiteId, emailAddress: string,\n   if (opts?.isActivitySummary) {\n     textsToMatch = [...textsToMatch, 'e_ActSumEm'];\n   }\n+  dieIf(!textsToMatch?.map, `No texts to match; textsToMatch is: ${j2s(textsToMatch)}`);\n   const startMs = Date.now();\n   let hasDebugLoggedLastEmail = false;\n   const regexs = textsToMatch.map(text => new RegExp(utils.regexEscapeSlashes(text)));\n@@ -741,6 +775,7 @@ export default {\n   countLastEmailsSentTo,\n   getEmailsSentToAddrs,\n   sendIncomingEmailWebhook,\n+  waitAndGetLastReplyNotfLinkEmailedTo,\n   waitAndGetLastVerifyEmailAddressLinkEmailedTo,\n   // no, worse name:\n   // getVerifyEmailAddressLinkFromLastEmailTo: waitAndGetLastVerifyEmailAddressLinkEmailedTo,\n@@ -758,6 +793,7 @@ export default {\n   lastEmailMatches,\n   assertLastEmailMatches,\n   apiV0: {\n+    createSite: createSiteViaPubApi,\n     fullTextSearch,\n     listQuery,\n     do_,"
    },
    {
      "sha": "150a33c95e4da8c4b0e084ad89966e016ab89a5d",
      "filename": "tests/e2e-wdio7/utils/ty-e2e-test-browser.ts",
      "status": "modified",
      "additions": 122,
      "deletions": 5,
      "changes": 127,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/utils/ty-e2e-test-browser.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/utils/ty-e2e-test-browser.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/ty-e2e-test-browser.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -447,6 +447,11 @@ export class TyE2eTestBrowser {\n     }\n \n \n+    async setWindowSize(width: Nr, height: Nr) {\n+      await this.#br.setWindowSize(width, height);\n+    }\n+\n+\n     async newWindow(url: St, thenWhat: 'StayInCurWin' | 'SwitchToNewWin') {\n       // It seemed as if different drivers had different opinions about which\n       // window should be active, after having opened a new one.\n@@ -3908,10 +3913,11 @@ export class TyE2eTestBrowser {\n         await this.waitForVisible('#e2ePassword');\n       },\n \n+      // RENAME to switchToLoginIfNeeded() ?\n       switchToLoginIfIsSignup: async () => {\n         // Switch to login form, if we're currently showing the signup form.\n         await this.waitUntil(async () => {\n-          if (await this.isVisible('.esCreateUser')) {\n+          if (await this.isVisible('.c_AuD_2LgI')) {\n             await this.waitAndClick('.c_AuD_2LgI .c_AuD_SwitchB');\n             // Don't waitForVisible('.dw-reset-pswd') — that can hang forever (weird?).\n           }\n@@ -3924,6 +3930,26 @@ export class TyE2eTestBrowser {\n         });\n       },\n \n+      switchToSignupIfIsLogin: async () => {\n+        // Switch to the signup form, if we're currently showing the login form or guest form.\n+        let switched = false;\n+        await this.waitUntil(async () => {\n+          if (await this.isVisible('.c_AuD_2SgU')) {\n+            logBoring(`switches to signup form ...`);\n+            switched = true;\n+            await this.waitAndClick('.c_AuD_2SgU .c_AuD_SwitchB');\n+            // Loop another lap.\n+          }\n+          else if (await this.isVisible('.esCreateUser')) {\n+            if (switched) logBoring(`... done switching to signup form`);\n+            // The create account form is shown, fine.\n+            return true;\n+          }\n+        }, {\n+          message: `Switching from login to signup dialog`\n+        });\n+      },\n+\n \n       createGmailAccount: async (data: { email: St, password: St, username: St },\n             ps: { isInPopupAlready?: true, shallBecomeOwner?: Bo,\n@@ -4505,13 +4531,19 @@ export class TyE2eTestBrowser {\n         await this.waitAndClick('#te_WelcomeLoggedIn .btn');\n       },\n \n-      clickResetPasswordCloseDialogSwitchTab: async () => {\n+      clickResetPasswordCloseDialogSwitchTab: async (ps: {\n+            loginDialogWillClose?: false } = {}) => {\n         // This click opens a new tab.\n+        logBoring(`Click forgot-password link...`);\n         await this.waitAndClick('.dw-reset-pswd');\n         // The login dialog should close when we click the reset-password link. [5KWE02X]\n-        await this.waitUntilModalGone();\n-        await this.waitUntilLoadingOverlayGone();\n+        if (ps.loginDialogWillClose !== false) {\n+          await this.waitUntilModalGone();\n+          await this.waitUntilLoadingOverlayGone();\n+        }\n+        logBoring(`Switch to other tab ...`);\n         await this.swithToOtherTabOrWindow();\n+        logBoring(`Wait for email input ...`);\n         await this.waitForVisible('#e2eRPP_emailI');\n       },\n \n@@ -6051,6 +6083,7 @@ export class TyE2eTestBrowser {\n       },\n \n       waitForNumReplies: async (n: Partial<NumReplies>, ps: { skipWait?: Bo } = {}) => {\n+        await this.switchToEmbCommentsIframeIfNeeded();\n         if (!ps.skipWait) {\n           await this.waitForMyDataAdded();\n         }\n@@ -8488,6 +8521,15 @@ export class TyE2eTestBrowser {\n         enabledUsersTabSelector: '.e_EnabledUsB',\n         waitingUsersTabSelector: '.e_WaitingUsB',\n \n+        goHere: async (origin?: St, opts: { loginAs? } = {}) => {\n+          await this.go2((origin || '') + '/-/admin/users');\n+          if (opts.loginAs) {\n+            await this.loginDialog.loginWithPassword(opts.loginAs);\n+          }\n+          await this.adminArea.users.waitForLoaded();\n+        },\n+\n+\n         waitForLoaded: async () => {\n           await this.waitForVisible('.e_AdminUsersList');\n         },\n@@ -9365,6 +9407,40 @@ export class TyE2eTestBrowser {\n         await this.loginDialog.logInAsGuest(name, email);\n       },\n \n+      signUpAsMemberViaPagebar: async (\n+            member: Member, ps: { siteId?: SiteId,\n+              willNeedToVerifyEmail?: Bo } = {}) => {   // , doVerifyEmail?: Bo\n+        await this.switchToEmbCommentsIframeIfNeeded();\n+        logBoring(`clicks Log In ...`);\n+        await this.metabar.clickLogin();\n+        // When embedded, signup happens in a popup win.\n+        const isEmbedded = this.#isWhere === IsWhere.EmbCommentsIframe;\n+        if (isEmbedded) {\n+          logBoring(`switches to other tab ...`);\n+          await this.swithToOtherTabOrWindow();\n+        }\n+        await this.loginDialog.switchToSignupIfIsLogin();\n+        logBoring(`creates a password account ...`);\n+        await this.loginDialog.createPasswordAccount({\n+          username: member.username,\n+          emailAddress: member.emailAddress,\n+          password: member.password,\n+          willNeedToVerifyEmail: ps.willNeedToVerifyEmail || false,\n+          // doVerifyEmail: ps.doVerifyEmail && !isEmbedded || false,\n+        });\n+        if (isEmbedded) {\n+          // Popup win now closed.\n+          await this.switchBackToFirstTabOrWindow();\n+          await this.switchToEmbeddedCommentsIrame();\n+        }\n+        /*\n+        if (ps.doVerifyEmail) {\n+          const link = await server.waitAndGetLastVerifyEmailAddressLinkEmailedTo(\n+                  ps.siteId, member.emailAddress);\n+          // click link ...\n+        } */\n+      },\n+\n       loginIfNeededViaMetabar: async (ps: NameAndPassword) => {\n         await this.switchToEmbCommentsIframeIfNeeded();\n         await this.waitForMyDataAdded();\n@@ -9380,6 +9456,31 @@ export class TyE2eTestBrowser {\n         await this.loginDialog.loginWithPasswordInPopup(ps);\n       },\n \n+      /// Dupl code elswhere; could replace with this fn.  [e2e_reset_pwd]\n+      ///\n+      resetPasswordFromLoginDialog: async (ps: { who: Member, newPassword: St,\n+              site: { id: SiteId, origin: St } }) => {\n+\n+        logBoring(`${ps.who.username} clicks the Forgot Password link`);\n+        await this.loginDialog.clickResetPasswordCloseDialogSwitchTab({\n+                loginDialogWillClose: false });\n+\n+        logBoring(`... types hens email address`);\n+        await this.resetPasswordPage.submitAccountOwnerEmailAddress(ps.who.emailAddress);\n+\n+        logBoring(`... gets an email with a password reset link`);\n+        const resetPwdPageLink = await server.waitAndGetResetPasswordLinkEmailedTo(\n+                ps.site.id, ps.who.emailAddress);\n+\n+        logBoring(`... follows the link`);\n+        await this.rememberCurrentUrl();\n+        await this.go2(resetPwdPageLink);\n+        await this.waitForNewUrl();\n+\n+        logBoring(`... types a new password`);\n+        await this.chooseNewPasswordPage.typeAndSaveNewPassword(ps.newPassword);\n+      },\n+\n       snoozeNotifications: async (ps: SnoozeTime = {}) => {\n         await this.topbar.openMyMenu();\n         await this.topbar.myMenu.snoozeNotfs(ps);\n@@ -9500,8 +9601,24 @@ export class TyE2eTestBrowser {\n         await this.topic.waitUntilPostTextMatches(postNr, newText);\n       },\n \n-      replyToOrigPost: async (text: string, whichButton?: 'DiscussionSection') => {\n+      replyToOrigPost: async (text: string, whichButton?: 'DiscussionSection', ps: {\n+              closeGuidelines?: Bo } = {}) => {\n         await this.topic.clickReplyToOrigPost(whichButton);\n+        if (ps.closeGuidelines) {\n+          // Or break out fn?\n+          // Is this a race? The dialog might take a short wile to appear? Maybe\n+          // wait for a little while? And if it didn't appear (it won't, if the page\n+          // is wide enough), try editing, and if that won't work, see if it's because\n+          // the dialog might have just appeared?  But not now — this works fine in practice:\n+          if (await this.isDisplayed('.e_CloseGuidelinesB')) {\n+            logBoring(`Closing guidelines modal ...`);\n+            await this.waitAndClick('.e_CloseGuidelinesB');\n+            await this.waitForGone('.e_CloseGuidelinesB');\n+          }\n+          else {\n+            logBoring(`No guidelines modal to close (at least not yet).`);\n+          }\n+        }\n         await this.editor.editText(text);\n         await this.editor.save();\n       },"
    },
    {
      "sha": "b6af9d996f42c3d470b5a499d835a3d8f85dd471",
      "filename": "tests/e2e-wdio7/utils/utils.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 2,
      "changes": 17,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/utils/utils.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/utils/utils.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/utils.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -251,6 +251,7 @@ export function makeExternalUserFor(member: Member, opts: {\n export function makeEmbeddedCommentsHtml(ps: { pageName: string, discussionId?: string,\n       talkyardPageId?: string, categoryRef?: string,\n       localHostname?: string, color?: string, bgColor: string, htmlToPaste?: string,\n+      talkyardConsiderQueryParams?: St[],\n       authnToken?: St | Ay }): St {\n     // Dupl code [046KWESJJLI3].\n     dieIf(!!ps.localHostname && !!ps.htmlToPaste, 'TyE502PK562');\n@@ -265,6 +266,8 @@ export function makeEmbeddedCommentsHtml(ps: { pageName: string, discussionId?:\n         ` data-discussion-id=\"\"`, ` data-discussion-id=\"${ps.discussionId}\"`);\n     }\n \n+    const ignQueryParams = !ps.talkyardConsiderQueryParams ? '' :\n+            `talkyardConsiderQueryParams = ${JSON.stringify(ps.talkyardConsiderQueryParams)};`;\n     const authnTokenScript = !ps.authnToken ? '' : `\n <script>\n talkyardAuthnToken = ${JSON.stringify(ps.authnToken)};\n@@ -282,7 +285,10 @@ Ok to delete. The comments: (generated by the admin js bundle [2JKWTQ0])</p>\n <hr>\n ${ htmlToPaste ? htmlToPaste :\n authnTokenScript + `\n-<script>talkyardServerUrl='${settings.scheme}://${ps.localHostname}.localhost';</script>\n+<script>\n+talkyardServerUrl='${settings.scheme}://${ps.localHostname}.localhost';\n+${ignQueryParams}\n+</script>\n <script async defer src=\"${settings.scheme}://${ps.localHostname}.localhost/-/talkyard-comments.js\"></script>\n <div class=\"talkyard-comments\" ${discIdAttr} ${catRefAttr} style=\"margin-top: 45px;\">\n `}\n@@ -476,6 +482,13 @@ export function createPageInHtmlDirUnlessExists(pageSlug: St, html: St) {\n   }\n \n \n+export function page_isChat(pageRole: PageRole): Bo {\n+  return pageRole === PageRole.JoinlessChat ||\n+          pageRole === PageRole.OpenChat ||\n+          pageRole === PageRole.PrivateChat;\n+}\n+\n+\n export function checkNewPageFields(page, ps: {\n      categoryId: CategoryId,\n       authorId?: UserId,\n@@ -506,7 +519,7 @@ export function checkNewPageFields(page, ps: {\n     assert.eq(page.numPostsTotal, ps.numPostsTotal || 2);\n     assert.eq(page.numRepliesTotal, numRepliesTotal);\n     assert.eq(page.numRepliesVisible, numRepliesTotal);\n-    if (page.pageType === PageRole.PrivateChat || page.pageType === PageRole.OpenChat) {\n+    if (page_isChat(page.pageType)) {\n       // Chat messages don't reply to any particular post.\n       assert.eq(page.numOrigPostRepliesVisible, 0);\n     }"
    },
    {
      "sha": "08b10b0b9bb39744bc3b7b426f9b641e2dbb202e",
      "filename": "tests/e2e-wdio7/wdio-progress-reporter.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/wdio-progress-reporter.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/wdio-progress-reporter.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/wdio-progress-reporter.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -15,15 +15,23 @@ type TestStatsState = 'pending' | 'passed' | 'skipped' | 'failed';\n \n \n function logProgr(message: string) {\n-  console.log(ansiColors.whiteBright(message));\n+  //console.log(ansiColors.whiteBright(message));\n+  console.log(ansiColors.inverse.whiteBright(message));\n }\n \n function logProgrBold(message: string) {\n-  console.log(ansiColors.bold.whiteBright(message));\n+  // console.log(ansiColors.bold.whiteBright(message));\n+  console.log(ansiColors.inverse.bold.whiteBright(message));\n }\n \n function logProgrBoldNormal(boldMsg: St, normalMsg: St) {\n-  console.log(ansiColors.bold.whiteBright(boldMsg) + ansiColors.whiteBright(normalMsg));\n+  // [inv_e2e_progr_msg_cols]\n+  // console.log(ansiColors.bold.whiteBright(boldMsg) + ansiColors.whiteBright(normalMsg));\n+  // This: inverse.bold.whiteBright gives a completely black background\n+  // but:  bold.black.bgWhiteBright gives a black-gray background, making the text had to read\n+  // (less contrast with the white text).\n+  console.log(ansiColors.inverse.bold.whiteBright(boldMsg) + ansiColors.inverse.whiteBright(normalMsg));\n+  // console.log(ansiColors.bold.black.bgWhiteBright(boldMsg) + ansiColors.black.bgWhite(normalMsg));\n }\n \n "
    },
    {
      "sha": "62af8ee49a0361b1318d421be489680263dccd00",
      "filename": "tests/e2e-wdio7/wdio.conf.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/wdio.conf.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e-wdio7/wdio.conf.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/wdio.conf.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -488,9 +488,11 @@ export const config = { // doesn't work: WebdriverIO.Config = {\n     global.wdioBrowserC = global.browserC; //  — \"\" —\n \n     // This won't resize any login popup though. Then, might need to scroll. [e2e_win_size]\n+    // Doesn't always work? [invisible_br_width]\n     global.wdioBrowserA.setWindowSize(1150, 1150);\n     if (global.wdioBrowserB) global.wdioBrowserB.setWindowSize(1150, 1150);\n     if (global.wdioBrowserC) global.wdioBrowserC.setWindowSize(1150, 1150);\n+    if (global.wdioBrowserD) global.wdioBrowserD.setWindowSize(1150, 1150);\n \n     // Extremely confusing if calling the wrong $, e.g.:\n     //   $('#e_TermsL').getHTML();"
    },
    {
      "sha": "6f2f43ebe077ef946ae30c6d7968bedeb62bc8d0",
      "filename": "tests/e2e/test-constants.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e/test-constants.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/tests/e2e/test-constants.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/test-constants.ts?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -19,6 +19,7 @@ const TestPageRole = {  // dupl in client/app/constants.ts [5F8KW0P2]\n   MindMap: <PageRole> 11,\n   Discussion: <PageRole> 12,\n   FormalMessage: <PageRole> 17,\n+  JoinlessChat: <PageRole> 22,\n   OpenChat: <PageRole> 18,\n   PrivateChat: <PageRole> 19,\n     // DirectMessage: 20,"
    },
    {
      "sha": "bdcf3265cbb60d724f695ceef45e1528abb816b8",
      "filename": "vendors/jars",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/vendors/jars?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -1 +1 @@\n-Subproject commit 59a0cd2f797abebca15ebb9e54fc0f4b20b2200d\n+Subproject commit bdcf3265cbb60d724f695ceef45e1528abb816b8"
    },
    {
      "sha": "f2eb1ba0b4e6383604a82aed0d37fa60dc5c3011",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -1 +1 @@\n-v0.2021.39\n+v0.2022.01"
    },
    {
      "sha": "cf062315928d4f9443e751a140b2d219f1441d76",
      "filename": "yarn.lock",
      "status": "modified",
      "additions": 8,
      "deletions": 14,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/yarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/35ec2078f1db48703eb0ab09fcac0077f4cc90f3/yarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/yarn.lock?ref=35ec2078f1db48703eb0ab09fcac0077f4cc90f3",
      "patch": "@@ -104,14 +104,13 @@\n   resolved \"https://registry.yarnpkg.com/@types/lodash/-/lodash-4.14.172.tgz#aad774c28e7bfd7a67de25408e03ee5a8c3d028a\"\n   integrity sha512-/BHF5HAx3em7/KkzVKm3LrsD6HZAXuXO1AJZQ3cRRBZj4oHZDviWPYu0aEplAqDFNHZPW6d3G7KN+ONcCCC7pw==\n \n-\"@types/markdown-it@^12.2.1\":\n-  version \"12.2.1\"\n-  resolved \"https://registry.yarnpkg.com/@types/markdown-it/-/markdown-it-12.2.1.tgz#ca36e1edce6f15a770f3e99e68622d1d2e2f0c65\"\n-  integrity sha512-iij+ilRX/vxtUPCREjn74xzHo/RorHJDwOsJ6X+TgKw7zSvazhVXnDfwlTnyLOMdiVUjtRYU4CrcUZ7Aci4PmQ==\n+\"@types/markdown-it@^12.2.3\":\n+  version \"12.2.3\"\n+  resolved \"https://registry.yarnpkg.com/@types/markdown-it/-/markdown-it-12.2.3.tgz#0d6f6e5e413f8daaa26522904597be3d6cd93b51\"\n+  integrity sha512-GKMHFfv3458yYy+v/N8gjufHO6MSZKCOXpZc5GXIWWy8uldwfmPn98vp81gZ5f9SVw8YYBctgfJ22a2d7AOMeQ==\n   dependencies:\n     \"@types/linkify-it\" \"*\"\n     \"@types/mdurl\" \"*\"\n-    highlight.js \"^10.7.2\"\n \n \"@types/mdurl@*\":\n   version \"1.0.2\"\n@@ -2000,11 +1999,6 @@ he@^1.1.0:\n   resolved \"https://registry.yarnpkg.com/he/-/he-1.2.0.tgz#84ae65fa7eafb165fddb61566ae14baf05664f0f\"\n   integrity sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==\n \n-highlight.js@^10.7.2:\n-  version \"10.7.3\"\n-  resolved \"https://registry.yarnpkg.com/highlight.js/-/highlight.js-10.7.3.tgz#697272e3991356e40c3cac566a74eef681756531\"\n-  integrity sha512-tzcUFauisWKNHaRkN4Wjl/ZA07gENAjFl3J/c480dprkGTg5EQstgaNFqBfUqCq54kZRIEcreTsAgF/m2quD7A==\n-\n history@^4.9.0:\n   version \"4.10.1\"\n   resolved \"https://registry.yarnpkg.com/history/-/history-4.10.1.tgz#33371a65e3a83b267434e2b3f3b1b4c58aad4cf3\"\n@@ -2795,10 +2789,10 @@ map-visit@^1.0.0:\n   dependencies:\n     object-visit \"^1.0.0\"\n \n-markdown-it@^12.2.0:\n-  version \"12.2.0\"\n-  resolved \"https://registry.yarnpkg.com/markdown-it/-/markdown-it-12.2.0.tgz#091f720fd5db206f80de7a8d1f1a7035fd0d38db\"\n-  integrity sha512-Wjws+uCrVQRqOoJvze4HCqkKl1AsSh95iFAeQDwnyfxM09divCBSXlDR1uTvyUP3Grzpn4Ru8GeCxYPM8vkCQg==\n+markdown-it@^12.3.2:\n+  version \"12.3.2\"\n+  resolved \"https://registry.yarnpkg.com/markdown-it/-/markdown-it-12.3.2.tgz#bf92ac92283fe983fe4de8ff8abfb5ad72cd0c90\"\n+  integrity sha512-TchMembfxfNVpHkbtriWltGWc+m3xszaRD0CZup7GFFhzIgQqxIfn3eGj1yZpfuflzPvfkt611B2Q/Bsk1YnGg==\n   dependencies:\n     argparse \"^2.0.1\"\n     entities \"~2.1.0\""
    }
  ]
}
