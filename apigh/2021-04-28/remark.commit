{
  "sha": "627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjYyN2FlNThlY2MxNDlmZTM1OGVjMTM3OGFiN2NkMTVkZmMxZDg4MGU=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-04-27T05:31:18Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-04-27T05:31:18Z"
    },
    "message": "Merge remote-tracking branch 'origin/master'",
    "tree": {
      "sha": "078104b7bb8f7ab62c244096e73123c4c6cdbf9c",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/078104b7bb8f7ab62c244096e73123c4c6cdbf9c"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
  "html_url": "https://github.com/umputun/remark42/commit/627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "abd628e1dc8d042198138c4baa53f2e5d2a32e08",
      "url": "https://api.github.com/repos/umputun/remark42/commits/abd628e1dc8d042198138c4baa53f2e5d2a32e08",
      "html_url": "https://github.com/umputun/remark42/commit/abd628e1dc8d042198138c4baa53f2e5d2a32e08"
    },
    {
      "sha": "d5246c9689aac08b710af4e2cbc11b0c6673e5d3",
      "url": "https://api.github.com/repos/umputun/remark42/commits/d5246c9689aac08b710af4e2cbc11b0c6673e5d3",
      "html_url": "https://github.com/umputun/remark42/commit/d5246c9689aac08b710af4e2cbc11b0c6673e5d3"
    }
  ],
  "stats": {
    "total": 24931,
    "additions": 17084,
    "deletions": 7847
  },
  "files": [
    {
      "sha": "314e0bcda70396dcbeeb93676fd5c768e21192e2",
      "filename": "backend/_example/memory_store/go.mod",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/_example/memory_store/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/_example/memory_store/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/_example/memory_store/go.mod?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -3,12 +3,18 @@ module github.com/umputun/remark42/memory_store\n go 1.14\n \n require (\n+\tgithub.com/go-pkgz/auth v1.15.0 // indirect\n+\tgithub.com/go-pkgz/expirable-cache v0.0.3 // indirect\n \tgithub.com/go-pkgz/jrpc v0.2.0\n+\tgithub.com/go-pkgz/lcw v0.8.1 // indirect\n \tgithub.com/go-pkgz/lgr v0.10.4\n+\tgithub.com/go-pkgz/repeater v1.1.3 // indirect\n+\tgithub.com/go-pkgz/rest v1.9.2 // indirect\n+\tgithub.com/go-pkgz/syncs v1.1.1 // indirect\n \tgithub.com/pkg/errors v0.9.1\n-\tgithub.com/stretchr/testify v1.6.1\n+\tgithub.com/stretchr/testify v1.7.0\n \tgithub.com/umputun/go-flags v1.5.1\n-\tgithub.com/umputun/remark42/backend v1.6.0\n+\tgithub.com/umputun/remark42/backend v1.7.1\n )\n \n replace github.com/umputun/remark42/backend => ../../"
    },
    {
      "sha": "a85b062b68e034fc3982ab315217d6cc020c793a",
      "filename": "backend/_example/memory_store/go.sum",
      "status": "modified",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/_example/memory_store/go.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/_example/memory_store/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/_example/memory_store/go.sum?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -1,3 +1,4 @@\n+cloud.google.com/go v0.34.0 h1:eOI3/cP2VTU6uZLDYAoic+eyzzB9YyGmJ7eIjl8rOPg=\n cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\n github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\n github.com/Depado/bfchroma v1.2.0 h1:NyYPFVhWvq8S2ts6Ok4kwXVE3TEO5fof+9ZOKbBJQUo=\n@@ -20,7 +21,10 @@ github.com/alicebob/gopher-json v0.0.0-20180125190556-5a6b3ba71ee6/go.mod h1:SGn\n github.com/alicebob/miniredis/v2 v2.11.4/go.mod h1:VL3UDEfAH59bSa7MuHMuFToxkqyHh69s/WUbYlOAuyg=\n github.com/andybalholm/cascadia v1.1.0 h1:BuuO6sSfQNFRu1LppgbD25Hr2vLYW25JvxHs5zzsLTo=\n github.com/andybalholm/cascadia v1.1.0/go.mod h1:GsXiBklL0woXo1j/WYWtSYYC4ouU9PqHO0sqidkEA4Y=\n+github.com/aws/aws-sdk-go v1.34.28 h1:sscPpn/Ns3i0F4HPEWAVcwdIRaZZCuL7llJ2/60yPIk=\n github.com/aws/aws-sdk-go v1.34.28/go.mod h1:H7NKnBqNVzoTJpGfLrQkkD+ytBA93eiDYi/+8rV9s48=\n+github.com/aymerick/douceur v0.2.0 h1:Mv+mAeH1Q+n9Fr+oyamOlAkUNPWPlA8PPGR0QAaYuPk=\n+github.com/aymerick/douceur v0.2.0/go.mod h1:wlT5vV2O3h55X9m7iVYN0TBM0NH/MmbLnd30/FjWUq4=\n github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\n github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\n github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\n@@ -29,12 +33,18 @@ github.com/danwakefield/fnmatch v0.0.0-20160403171240-cbb64ac3d964/go.mod h1:Xd9\n github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\n github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n+github.com/dghubble/oauth1 v0.6.0 h1:m1yC01Ohc/eF38jwZ8JUjL1a+XHHXtGQgK+MxQbmSx0=\n github.com/dghubble/oauth1 v0.6.0/go.mod h1:8pFdfPkv/jr8mkChVbNVuJ0suiHe278BtWI4Tk1ujxk=\n+github.com/dgrijalva/jwt-go v3.2.0+incompatible h1:7qlOGliEKZXTDg6OTjfoBKDXWrumCAMpl/TFQ4/5kLM=\n github.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=\n github.com/didip/tollbooth/v6 v6.0.1 h1:QvLvRpB1G2bzKvkRze0muMUBlGN9H1z7tJ4DH4ypWOU=\n github.com/didip/tollbooth/v6 v6.0.1/go.mod h1:j2pKs+JQ5PvU/K4jFnrnwntrmfUbYLJE5oSdxR37FD0=\n+github.com/didip/tollbooth/v6 v6.1.0 h1:ZS2fNa9JhFdRSJCj3+V12VfuUifYrGB4Z0jSwXmKMeE=\n+github.com/didip/tollbooth/v6 v6.1.0/go.mod h1:xjcse6CTHCLuOkzsWrEgdy9WPJFv+p/x6v+MyfP+O9s=\n github.com/didip/tollbooth_chi v0.0.0-20200524181329-8b84cd7183d9 h1:gTh8fKuI/yLqQtZEPlDX3ZGsiTPZIe0ADHsxXSbwO1I=\n github.com/didip/tollbooth_chi v0.0.0-20200524181329-8b84cd7183d9/go.mod h1:YWyIfq3y4ArRfWZ9XksmuusP+7Mad+T0iFZ0kv0XG/M=\n+github.com/didip/tollbooth_chi v0.0.0-20200828173446-a7173453ea21 h1:x7YpwKSBIBcKe9I3aTNOqgSyJ6QKDdtOxnEkxBTsi9w=\n+github.com/didip/tollbooth_chi v0.0.0-20200828173446-a7173453ea21/go.mod h1:0ZVa6kSzS011nfTC1rELyxK4tjVf6vqBnOv7oY2KlsA=\n github.com/dlclark/regexp2 v1.1.6 h1:CqB4MjHw0MFCDj+PHHjiESmHX+N7t0tJzKvC6M97BRg=\n github.com/dlclark/regexp2 v1.1.6/go.mod h1:2pZnwuY/m+8K6iRw6wQdMtk+rH5tNGR1i55kozfMjCc=\n github.com/fasthttp-contrib/websocket v0.0.0-20160511215533-1f3b11f56072/go.mod h1:duJ4Jxv5lDcvg4QuQr0oowTf7dz4/CR8NtyCooz9HL8=\n@@ -43,30 +53,43 @@ github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMo\n github.com/gavv/httpexpect v2.0.0+incompatible/go.mod h1:x+9tiU1YnrOvnB725RkpoLv1M62hOWzwo5OXotisrKc=\n github.com/go-chi/chi v4.1.1+incompatible h1:MmTgB0R8Bt/jccxp+t6S/1VGIKdJw5J74CK/c9tTfA4=\n github.com/go-chi/chi v4.1.1+incompatible/go.mod h1:eB3wogJHnLi3x/kFX2A+IbTBlXxmMeXJVKy9tTv1XzQ=\n+github.com/go-chi/chi/v5 v5.0.2/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\n github.com/go-chi/cors v1.1.1/go.mod h1:K2Yje0VW/SJzxiyMYu6iPQYa7hMjQX2i/F491VChg1I=\n+github.com/go-chi/cors v1.2.0/go.mod h1:sSbTewc+6wYHBBCW7ytsFSn836hqM7JxpglAy2Vzc58=\n github.com/go-chi/render v1.0.1 h1:4/5tis2cKaNdnv9zFLfXzcquC9HbeZgCnxGnKrltBS8=\n github.com/go-chi/render v1.0.1/go.mod h1:pq4Rr7HbnsdaeHagklXub+p6Wd16Af5l9koip1OvJns=\n github.com/go-pkgz/auth v0.11.0/go.mod h1:NzVqlTW0E9JXVdAaWRq81XZjICgHnNaNdUfE3CbS2T4=\n github.com/go-pkgz/auth v1.14.0/go.mod h1:1GVd61pXZcuJ0ZnOUdCTY08V8SreO7MJtsvEd5/WEWA=\n+github.com/go-pkgz/auth v1.15.0 h1:77z+YdcxHkRcjJSQc1SBtqIrZbp3p8Zo72ZRR3QKsLk=\n+github.com/go-pkgz/auth v1.15.0/go.mod h1:1HTdNEBMSFRCXoJLLjgCRs8t/gt2TQUaqf6wgYRvsTo=\n github.com/go-pkgz/expirable-cache v0.0.3 h1:rTh6qNPp78z0bQE6HDhXBHUwqnV9i09Vm6dksJLXQDc=\n github.com/go-pkgz/expirable-cache v0.0.3/go.mod h1:+IauqN00R2FqNRLCLA+X5YljQJrwB179PfiAoMPlTlQ=\n github.com/go-pkgz/jrpc v0.2.0 h1:CLy/eZyekjraVrxZV18N2R1mYLMJ/nWrgdfyIOGPY/E=\n github.com/go-pkgz/jrpc v0.2.0/go.mod h1:wd8vtQ4CgtCnuqua6x2b1SKIgv0VSOh5Dn0uUITbiUE=\n github.com/go-pkgz/lcw v0.7.1/go.mod h1:3P6g9QrJsDePXEMe42ywO+tW08L17tBJGwIDdI7lZ6g=\n+github.com/go-pkgz/lcw v0.8.1 h1:Bpt2yYTE1J8hIhz8tjdm1WPOgH13eo5iTNsXyop7cMQ=\n github.com/go-pkgz/lcw v0.8.1/go.mod h1:Xw0/ZfApATgbjVPYRZO4XHdWyxAjErDWDWJ7TLlw1Vc=\n github.com/go-pkgz/lgr v0.7.0 h1:S/AAPwt/RE9a5mNJskA7dGVp+Dq6SMIW6LYjG3ITxY8=\n github.com/go-pkgz/lgr v0.7.0/go.mod h1:yMgxU+GobMRJgIEbSzDKy/67W18S7qmGx/7BVL5AB8Q=\n github.com/go-pkgz/lgr v0.10.4 h1:l7qyFjqEZgwRgaQQSEp6tve4A3OU80VrfzpvtEX8ngw=\n github.com/go-pkgz/lgr v0.10.4/go.mod h1:CD0s1z6EFpIUplV067gitF77tn25JItzwHNKAPqeCF0=\n+github.com/go-pkgz/repeater v1.1.3 h1:q6+JQF14ESSy28Dd7F+wRelY4F+41HJ0LEy/szNnMiE=\n github.com/go-pkgz/repeater v1.1.3/go.mod h1:hVTavuO5x3Gxnu8zW7d6sQBfAneKV8X2FjU48kGfpKw=\n github.com/go-pkgz/rest v1.5.0 h1:C8SxXcXza4GiUUAn/95iCkvoIrGbS30qpwK19iqlrWQ=\n github.com/go-pkgz/rest v1.5.0/go.mod h1:nQaM3RhSTUAmbBZWY4hfe4buyeC9VckvhoCktiQXJxI=\n+github.com/go-pkgz/rest v1.6.0/go.mod h1:FKpgK5FgSqREG323OIU/JpIc0xA7dqay9BmK7LZXTQE=\n+github.com/go-pkgz/rest v1.9.2 h1:RyBBRXBYY6eBgTW3UGYOyT4VQPDiBBFh/tesELWsryQ=\n+github.com/go-pkgz/rest v1.9.2/go.mod h1:wZ/dGipZUaF9to0vIQl7PwDHgWQDB0jsrFg1xnAKLDw=\n+github.com/go-pkgz/syncs v1.1.1 h1:jWN+y6FS/Xe+8z4l3QMbSnODGyaxDHGojIS+wyKIjxg=\n github.com/go-pkgz/syncs v1.1.1/go.mod h1:bt9lxWRRJ9vOCMGc8Big8ttjYHLKP88ofj1y38UlaHE=\n github.com/go-redis/redis/v7 v7.2.0/go.mod h1:JDNMw23GTyLNC4GZu9njt15ctBQVn7xjRfnwdHj/Dcg=\n+github.com/go-redis/redis/v7 v7.4.0 h1:7obg6wUoj05T0EpY0o8B59S9w5yeMWql7sw2kwNW1x4=\n github.com/go-redis/redis/v7 v7.4.0/go.mod h1:JDNMw23GTyLNC4GZu9njt15ctBQVn7xjRfnwdHj/Dcg=\n github.com/go-session/session v3.1.2+incompatible/go.mod h1:8B3iivBQjrz/JtC68Np2T1yBBLxTan3mn/3OM0CyRt0=\n github.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\n+github.com/go-stack/stack v1.8.0 h1:5SgMzNM5HxrEjV0ww2lTmX6E2Izsfxas4+YHWRs3Lsk=\n github.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\n+github.com/go-test/deep v1.0.4/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=\n github.com/gobuffalo/attrs v0.0.0-20190224210810-a9411de4debd/go.mod h1:4duuawTqi2wkkpB4ePgWMaai6/Kc6WEz83bhFwpHzj0=\n github.com/gobuffalo/depgen v0.0.0-20190329151759-d478694a28d3/go.mod h1:3STtPUQYuzV0gBVOY3vy6CfMm/ljR4pABfrTeHNLHUY=\n github.com/gobuffalo/depgen v0.1.0/go.mod h1:+ifsuy7fhi15RWncXQQKjWS9JPkdah5sZvtHc2RXGlg=\n@@ -92,25 +115,33 @@ github.com/gobuffalo/packr/v2 v2.0.9/go.mod h1:emmyGweYTm6Kdper+iywB6YK5YzuKchGt\n github.com/gobuffalo/packr/v2 v2.2.0/go.mod h1:CaAwI0GPIAv+5wKLtv8Afwl+Cm78K/I/VCm/3ptBN+0=\n github.com/gobuffalo/syncx v0.0.0-20190224160051-33c29581e754/go.mod h1:HhnNqWY95UYwwW3uSASeV7vtgYkT2t16hJgV3AEPUpw=\n github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\n+github.com/golang/protobuf v1.3.2 h1:6nsPYzhq5kReh6QImI3k5qWzO4PEbvbIW2cwSfR/6xs=\n github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\n+github.com/golang/snappy v0.0.1 h1:Qgr9rKW7uDUkrbSmQeiDsGa8SjGyCOGtuasMWwvp2P4=\n github.com/golang/snappy v0.0.1/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\n github.com/gomodule/redigo v1.7.1-0.20190322064113-39e2c31b7ca3/go.mod h1:B4C85qUVwatsJoIUNIfCRsp7qO0iAmpGFZ4EELWSbC4=\n github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\n github.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\n github.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=\n github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\n+github.com/google/uuid v1.1.2 h1:EVhdT+1Kseyi1/pUmXKaFxYsDNy9RQYkMWRH68J/W7Y=\n github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\n github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\n+github.com/gorilla/css v1.0.0 h1:BQqNyPTi50JCFMTw/b67hByjMVXZRwGha6wxVGkeihY=\n+github.com/gorilla/css v1.0.0/go.mod h1:Dn721qIggHpt4+EFCcTLTU/vk5ySda2ReITrtgBl60c=\n github.com/gorilla/feeds v1.1.1/go.mod h1:Nk0jZrvPFZX1OBe5NPiddPw7CfwF6Q9eqzaBbaightA=\n github.com/gorilla/websocket v1.4.1/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\n+github.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\n github.com/hashicorp/errwrap v1.0.0 h1:hLrqtEDnRye3+sgx6z4qVLNuviH3MR5aQ0ykNJa/UYA=\n github.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\n github.com/hashicorp/go-multierror v1.1.0 h1:B9UzwGQJehnUY1yNrnwREHc3fGbC2xefo8g4TbElacI=\n github.com/hashicorp/go-multierror v1.1.0/go.mod h1:spPvp8C1qA32ftKqdAHm4hHTbPw+vmowP0z+KUhOZdA=\n+github.com/hashicorp/golang-lru v0.5.4 h1:YDjusn29QI/Das2iO9M0BHnIbxPeyuCHsjMW+lJfyTc=\n github.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\n github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\n github.com/imkira/go-interpol v1.1.0/go.mod h1:z0h2/2T3XF8kyEPpRgJ3kmNv+C43p+I/CoI+jC3w2iA=\n github.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=\n+github.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9YPoQUg=\n github.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=\n github.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=\n github.com/joho/godotenv v1.3.0/go.mod h1:7hK45KPybAkOC6peb+G5yklZfMxEjkZhHbwpqxOKXbg=\n@@ -120,6 +151,7 @@ github.com/karrick/godirwalk v1.8.0/go.mod h1:H5KPZjojv4lE+QYImBI8xVtrBRgYrIVsaR\n github.com/karrick/godirwalk v1.10.3/go.mod h1:RoGL9dQei4vP9ilrpETWE8CLOZ1kiN0LhBygSwrAsHA=\n github.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=\n github.com/klauspost/compress v1.8.2/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=\n+github.com/klauspost/compress v1.9.5 h1:U+CaK85mrNNb4k8BNOfgJtJ/gr6kswUCFj6miSzVC6M=\n github.com/klauspost/compress v1.9.5/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=\n github.com/klauspost/cpuid v1.2.1/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=\n github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\n@@ -130,6 +162,7 @@ github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\n github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\n github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\n github.com/kyokomi/emoji v2.2.1+incompatible/go.mod h1:mZ6aGCD7yk8j6QY6KICwnZ2pxoszVseX1DNoGtU2tBA=\n+github.com/kyokomi/emoji/v2 v2.2.8/go.mod h1:JUcn42DTdsXJo1SWanHh4HKDEyPaR5CqkmoirZZP9qE=\n github.com/markbates/oncer v0.0.0-20181203154359-bf2de49a0be2/go.mod h1:Ld9puTsIW75CHf65OeIOkyKbteujpZVXDpWK6YGZbxE=\n github.com/markbates/safe v1.0.1/go.mod h1:nAqgmRi7cY2nqMc92/bSEeQA+R4OheNU2T1kNSCBdG0=\n github.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=\n@@ -139,9 +172,12 @@ github.com/mattn/go-isatty v0.0.8 h1:HLtExJ+uU2HOZ+wI0Tt5DtUDrx8yhUqDcp7fYERX4CE\n github.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\n github.com/microcosm-cc/bluemonday v1.0.2 h1:5lPfLTTAvAbtS0VqT+94yOtFnGfUWYyx0+iToC3Os3s=\n github.com/microcosm-cc/bluemonday v1.0.2/go.mod h1:iVP4YcDBq+n/5fb23BhYFvIMq/leAFZyRl6bYmGDlGc=\n+github.com/microcosm-cc/bluemonday v1.0.9 h1:dpCwruVKoyrULicJwhuY76jB+nIxRVKv/e248Vx/BXg=\n+github.com/microcosm-cc/bluemonday v1.0.9/go.mod h1:B2riunDr9benLHghZB7hjIgdwSUzzs0pjCxFrWYEZFU=\n github.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\n github.com/montanaflynn/stats v0.0.0-20171201202039-1bf9dbcd8cbe/go.mod h1:wL8QJuTMNUDYhXwkmfOly8iTdp5TEcJFWZD2D7SIkUc=\n github.com/moul/http2curl v1.0.0/go.mod h1:8UbvGypXm98wA/IqH45anm5Y2Z6ep6O31QGOAZ3H0fQ=\n+github.com/nullrocks/identicon v0.0.0-20180626043057-7875f45b0022 h1:Ys0rDzh8s4UMlGaDa1UTA0sfKgvF0hQZzTYX8ktjiDc=\n github.com/nullrocks/identicon v0.0.0-20180626043057-7875f45b0022/go.mod h1:x4NsS+uc7ecH/Cbm9xKQ6XzmJM57rWTkjywjfB2yQ18=\n github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n github.com/onsi/ginkgo v1.10.1/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\n@@ -172,6 +208,7 @@ github.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeV\n github.com/sirupsen/logrus v1.4.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\n github.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=\n github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\n+github.com/slack-go/slack v0.8.2/go.mod h1:FGqNzJBmxIsZURAxh2a8D21AnOVvvXZvGligs4npPUM=\n github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\n github.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\n github.com/spf13/cobra v0.0.3/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=\n@@ -186,6 +223,7 @@ github.com/stretchr/testify v1.5.1 h1:nOGnQDM7FYENwehXlg/kFVnos3rEvtKTjRvOWSzb6H\n github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\n github.com/stretchr/testify v1.6.1 h1:hDPOHmpOpP40lSULcqw7IrRb/u7w6RpDC9399XyoNd0=\n github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n+github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n github.com/tidwall/btree v0.0.0-20170113224114-9876f1454cf0/go.mod h1:huei1BkDWJ3/sLXmO+bsCNELL+Bp2Kks9OLyQFkzvA8=\n github.com/tidwall/buntdb v1.1.0/go.mod h1:Y39xhcDW10WlyYXeLgGftXVbjtM0QP+/kpz8xl9cbzE=\n github.com/tidwall/gjson v1.3.2/go.mod h1:P256ACg0Mn+j1RXIDXoss50DeIABTYK1PULOJHhxOls=\n@@ -199,7 +237,9 @@ github.com/umputun/go-flags v1.5.1/go.mod h1:nTbvsO/hKqe7Utri/NoyN18GR3+EWf+9Rrm\n github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=\n github.com/valyala/fasthttp v1.6.0/go.mod h1:FstJa9V+Pj9vQ7OJie2qMHdwemEDaDiSdBnvPM1Su9w=\n github.com/valyala/tcplisten v0.0.0-20161114210144-ceec8f93295a/go.mod h1:v3UYOV9WzVtRmSR+PDvWpU/qWl4Wa5LApYYX4ZtKbio=\n+github.com/xdg/scram v0.0.0-20180814205039-7eeb5667e42c h1:u40Z8hqBAAQyv+vATcGgV0YCnDjqSL7/q/JyPhhJSPk=\n github.com/xdg/scram v0.0.0-20180814205039-7eeb5667e42c/go.mod h1:lB8K/P019DLNhemzwFU4jHLhdvlE6uDZjXFejJXr49I=\n+github.com/xdg/stringprep v0.0.0-20180714160509-73f8eece6fdc h1:n+nNi93yXLkJvKwXNP9d55HC7lGK4H/SRcwB5IaUZLo=\n github.com/xdg/stringprep v0.0.0-20180714160509-73f8eece6fdc/go.mod h1:Jhud4/sHMO4oL310DaZAKk9ZaJ08SJfe+sJh0HrGL1Y=\n github.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\n github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=\n@@ -214,15 +254,20 @@ go.etcd.io/bbolt v1.3.4/go.mod h1:G5EMThwa9y8QZGBClrRx5EY+Yw9kAhnjy3bSjsnlVTQ=\n go.etcd.io/bbolt v1.3.5 h1:XAzx9gjCb0Rxj7EoqcClPD1d5ZBxZJk0jbuoPHenBt0=\n go.etcd.io/bbolt v1.3.5/go.mod h1:G5EMThwa9y8QZGBClrRx5EY+Yw9kAhnjy3bSjsnlVTQ=\n go.mongodb.org/mongo-driver v1.3.2/go.mod h1:MSWZXKOynuguX+JSvwP8i+58jYCXxbia8HS3gZBapIE=\n+go.mongodb.org/mongo-driver v1.4.4 h1:bsPHfODES+/yx2PCWzUYMH8xj6PVniPI8DQrsJuSXSs=\n go.mongodb.org/mongo-driver v1.4.4/go.mod h1:WcMNYLx/IlOxLe6JRJiv2uXuCz6zBLndR4SoGjYphSc=\n go.uber.org/goleak v1.0.0/go.mod h1:8a7PlsEVH3e/a/GLqe5IIrQx6GzcnRmZEufDUTk4A7A=\n golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\n golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\n golang.org/x/crypto v0.0.0-20190422162423-af44ce270edf/go.mod h1:WFFai1msRO1wXaEeE5yQxYXgSfI8pQAWXbQop6sCtWE=\n golang.org/x/crypto v0.0.0-20190530122614-20be4c3c3ed5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\n golang.org/x/crypto v0.0.0-20200406173513-056763e48d71/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\n+golang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b h1:7mWr3k41Qtv8XlltBkDkl8LoP3mpSgBW8BUoxtEdbXg=\n+golang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\n golang.org/x/image v0.0.0-20200119044424-58c23975cae1 h1:5h3ngYt7+vXCDZCup/HkCQgW5XwmSvR/nA2JmJ0RErg=\n golang.org/x/image v0.0.0-20200119044424-58c23975cae1/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\n+golang.org/x/image v0.0.0-20210220032944-ac19c3e999fb h1:fqpd0EBDzlHRCjiphRR5Zo/RSWWQlWv34418dnEixWk=\n+golang.org/x/image v0.0.0-20210220032944-ac19c3e999fb/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\n golang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\n golang.org/x/net v0.0.0-20180218175443-cbe0f9307d01/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n@@ -237,13 +282,19 @@ golang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLL\n golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/net v0.0.0-20200520182314-0ba52f642ac2 h1:eDrdRpKgkcCqKZQwyZRyeFZgfqt37SL7Kv3tok06cKE=\n golang.org/x/net v0.0.0-20200520182314-0ba52f642ac2/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\n+golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\n+golang.org/x/net v0.0.0-20210421230115-4e50805a0758/go.mod h1:72T/g9IO56b78aLF+1Kcs5dz7/ng1VjMUvfKvpfy+jM=\n+golang.org/x/net v0.0.0-20210423184538-5f58ad60dda6 h1:0PC75Fz/kyMGhL0e1QnypqK2kQMqKt9csD1GnMJR+Zk=\n+golang.org/x/net v0.0.0-20210423184538-5f58ad60dda6/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=\n golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\n+golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d h1:TzXSXBo42m9gQenoE3b9BGiEpg5IG2JkU5FkPIawgtw=\n golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\n golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20190412183630-56d357773e84/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n+golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e h1:vcxGaoTs7kV8m5Np9uUNQin4BrLOthgV7252N8V+FwY=\n golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n@@ -261,10 +312,17 @@ golang.org/x/sys v0.0.0-20191010194322-b09406accb47/go.mod h1:h1NjWce9XRLGQEsW7w\n golang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd h1:xhmwyvizuTgC2qz7ZlMluP20uW+C3Rm0FD/WLDX8884=\n golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n+golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n+golang.org/x/sys v0.0.0-20210420072515-93ed5bcd2bfe/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n+golang.org/x/sys v0.0.0-20210423082822-04245dca01da h1:b3NXsE2LusjYGGjL5bxEVZZORm/YEFFrWFjR8eFrw/c=\n+golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n+golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\n golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\n golang.org/x/text v0.3.2 h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=\n golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\n golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\n+golang.org/x/text v0.3.6 h1:aRYxNxv6iGQlyVaZmk6ZgYEDa+Jg18DxebPSrd6bg1M=\n+golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\n golang.org/x/time v0.0.0-20200416051211-89c76fbcd5d1 h1:NusfzzA6yGQ+ua51ck7E3omNUX/JuqbFSaRGqU8CcLI=\n golang.org/x/time v0.0.0-20200416051211-89c76fbcd5d1/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\n golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\n@@ -278,13 +336,15 @@ golang.org/x/tools v0.0.0-20190531172133-b3315ee88b7d/go.mod h1:/rFqwRUd4F7ZHNgw\n golang.org/x/tools v0.0.0-20191108193012-7d206e10da11/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\n golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n+google.golang.org/appengine v1.4.0 h1:/wp5JvzpHIxhs/dumFmF7BXTf3Z+dd4uXta4kVyO508=\n google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\n gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\n gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n gopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\n gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\n+gopkg.in/oauth2.v3 v3.12.0 h1:yOffAPoolH/i2JxwmC+pgtnY3362iPahsDpLXfDFvNg=\n gopkg.in/oauth2.v3 v3.12.0/go.mod h1:XEYgKqWX095YiPT+Aw5y3tCn+7/FMnlTFKrupgSiJ3I=\n gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\n gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI="
    },
    {
      "sha": "74552783cadec343f2376102117efecbc574eea4",
      "filename": "backend/app/cmd/cleanup_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/cmd/cleanup_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/cmd/cleanup_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/cleanup_test.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -9,7 +9,7 @@ import (\n \t\"testing\"\n \t\"time\"\n \n-\t\"github.com/go-chi/chi\"\n+\t\"github.com/go-chi/chi/v5\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n \t\"github.com/umputun/go-flags\""
    },
    {
      "sha": "2a7899e1e63e81451f3765f1d5d643df358011be",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -18,7 +18,7 @@ import (\n \t\"github.com/go-pkgz/jrpc\"\n \t\"github.com/go-pkgz/lcw/eventbus\"\n \tlog \"github.com/go-pkgz/lgr\"\n-\t\"github.com/kyokomi/emoji\"\n+\t\"github.com/kyokomi/emoji/v2\"\n \t\"github.com/pkg/errors\"\n \tbolt \"go.etcd.io/bbolt\"\n \n@@ -211,9 +211,9 @@ type NotifyGroup struct {\n \t\tVerificationSubject string `long:\"verification_subj\" env:\"VERIFICATION_SUBJ\" description:\"verification message subject\"`\n \t\tAdminNotifications  bool   `long:\"notify_admin\" env:\"ADMIN\" description:\"notify admin on new comments via ADMIN_SHARED_EMAIL\"`\n \t} `group:\"email\" namespace:\"email\" env-namespace:\"EMAIL\"`\n-\tSlack  struct {\n-\t\tToken   string        `long:\"token\" env:\"TOKEN\" description:\"slack token\"`\n-\t\tChannel string        `long:\"chan\" env:\"CHAN\" description:\"slack channel\"`\n+\tSlack struct {\n+\t\tToken   string `long:\"token\" env:\"TOKEN\" description:\"slack token\"`\n+\t\tChannel string `long:\"chan\" env:\"CHAN\" description:\"slack channel\"`\n \t} `group:\"slack\" namespace:\"slack\" env-namespace:\"SLACK\"`\n }\n "
    },
    {
      "sha": "82966fc1575fdd755a6afa1dee3a153657760759",
      "filename": "backend/app/notify/slack_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/notify/slack_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/notify/slack_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/slack_test.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -7,7 +7,7 @@ import (\n \t\"net/http/httptest\"\n \t\"testing\"\n \n-\t\"github.com/go-chi/chi\"\n+\t\"github.com/go-chi/chi/v5\"\n \t\"github.com/slack-go/slack\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\""
    },
    {
      "sha": "17a2ce9cacaee9a0f510bec099f4b7c529858cc9",
      "filename": "backend/app/notify/telegram_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/notify/telegram_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/notify/telegram_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/telegram_test.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -8,7 +8,7 @@ import (\n \t\"testing\"\n \t\"time\"\n \n-\t\"github.com/go-chi/chi\"\n+\t\"github.com/go-chi/chi/v5\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n "
    },
    {
      "sha": "0c24592f9bd7b63948109a8b3974a8702d0f3241",
      "filename": "backend/app/rest/api/admin.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/rest/api/admin.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/rest/api/admin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/admin.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -6,7 +6,7 @@ import (\n \t\"path\"\n \t\"time\"\n \n-\t\"github.com/go-chi/chi\"\n+\t\"github.com/go-chi/chi/v5\"\n \t\"github.com/go-chi/render\"\n \t\"github.com/go-pkgz/auth\"\n \tcache \"github.com/go-pkgz/lcw\""
    },
    {
      "sha": "cf42715e0fa2e9a31ca1f71d03dce5fa989556ca",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/rest/api/rest.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/rest/api/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -12,8 +12,8 @@ import (\n \n \t\"github.com/didip/tollbooth/v6\"\n \t\"github.com/didip/tollbooth_chi\"\n-\t\"github.com/go-chi/chi\"\n-\t\"github.com/go-chi/chi/middleware\"\n+\t\"github.com/go-chi/chi/v5\"\n+\t\"github.com/go-chi/chi/v5/middleware\"\n \t\"github.com/go-chi/cors\"\n \t\"github.com/go-chi/render\"\n \t\"github.com/go-pkgz/auth\""
    },
    {
      "sha": "8c422dd0849c948e9a6a07403ff6188ad96d0bfb",
      "filename": "backend/app/rest/api/rest_private.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/rest/api/rest_private.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/rest/api/rest_private.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_private.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -13,7 +13,7 @@ import (\n \t\"time\"\n \n \t\"github.com/dgrijalva/jwt-go\"\n-\t\"github.com/go-chi/chi\"\n+\t\"github.com/go-chi/chi/v5\"\n \t\"github.com/go-chi/render\"\n \t\"github.com/go-pkgz/auth\"\n \t\"github.com/go-pkgz/auth/token\""
    },
    {
      "sha": "2625a7742eff976555ada7bb5fa5db59120a03fe",
      "filename": "backend/app/rest/api/rest_public.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/rest/api/rest_public.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/rest/api/rest_public.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_public.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -12,7 +12,7 @@ import (\n \t\"strings\"\n \t\"time\"\n \n-\t\"github.com/go-chi/chi\"\n+\t\"github.com/go-chi/chi/v5\"\n \t\"github.com/go-chi/render\"\n \tcache \"github.com/go-pkgz/lcw\"\n \tlog \"github.com/go-pkgz/lgr\""
    },
    {
      "sha": "adae64ace8f625c7cb547ef969ecfe782844bea3",
      "filename": "backend/app/rest/api/ssl.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/rest/api/ssl.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/app/rest/api/ssl.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/ssl.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -6,8 +6,8 @@ import (\n \t\"net/url\"\n \t\"time\"\n \n-\t\"github.com/go-chi/chi\"\n-\t\"github.com/go-chi/chi/middleware\"\n+\t\"github.com/go-chi/chi/v5\"\n+\t\"github.com/go-chi/chi/v5/middleware\"\n \tlog \"github.com/go-pkgz/lgr\"\n \t\"golang.org/x/crypto/acme/autocert\"\n "
    },
    {
      "sha": "339bf32c30debbb6d57e49584cb45ee71b33b84e",
      "filename": "backend/go.mod",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/go.mod?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -9,31 +9,31 @@ require (\n \tgithub.com/dgrijalva/jwt-go v3.2.0+incompatible\n \tgithub.com/didip/tollbooth/v6 v6.1.0\n \tgithub.com/didip/tollbooth_chi v0.0.0-20200828173446-a7173453ea21\n-\tgithub.com/go-chi/chi v4.1.1+incompatible\n-\tgithub.com/go-chi/cors v1.1.1\n+\tgithub.com/go-chi/chi/v5 v5.0.2\n+\tgithub.com/go-chi/cors v1.2.0\n \tgithub.com/go-chi/render v1.0.1\n \tgithub.com/go-pkgz/auth v1.15.0\n \tgithub.com/go-pkgz/jrpc v0.2.0\n \tgithub.com/go-pkgz/lcw v0.8.1\n \tgithub.com/go-pkgz/lgr v0.10.4\n \tgithub.com/go-pkgz/repeater v1.1.3\n-\tgithub.com/go-pkgz/rest v1.7.0\n+\tgithub.com/go-pkgz/rest v1.9.2\n \tgithub.com/go-pkgz/syncs v1.1.1\n \tgithub.com/google/uuid v1.1.2\n \tgithub.com/gorilla/feeds v1.1.1\n \tgithub.com/hashicorp/go-multierror v1.1.0\n-\tgithub.com/kyokomi/emoji v2.2.1+incompatible\n+\tgithub.com/kyokomi/emoji/v2 v2.2.8\n \tgithub.com/microcosm-cc/bluemonday v1.0.9\n \tgithub.com/pkg/errors v0.9.1\n \tgithub.com/rakyll/statik v0.1.7\n \tgithub.com/rs/xid v1.2.1\n \tgithub.com/russross/blackfriday/v2 v2.1.0\n \tgithub.com/slack-go/slack v0.8.2\n-\tgithub.com/stretchr/testify v1.6.1\n+\tgithub.com/stretchr/testify v1.7.0\n \tgithub.com/umputun/go-flags v1.5.1\n \tgo.etcd.io/bbolt v1.3.5\n \tgo.uber.org/goleak v1.0.0\n-\tgolang.org/x/crypto v0.0.0-20200406173513-056763e48d71\n-\tgolang.org/x/image v0.0.0-20200119044424-58c23975cae1\n-\tgolang.org/x/net v0.0.0-20210421230115-4e50805a0758\n+\tgolang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b\n+\tgolang.org/x/image v0.0.0-20210220032944-ac19c3e999fb\n+\tgolang.org/x/net v0.0.0-20210423184538-5f58ad60dda6\n )"
    },
    {
      "sha": "8123c23b8db762ba3e6ed6cfc0430234f1a35caa",
      "filename": "backend/go.sum",
      "status": "modified",
      "additions": 19,
      "deletions": 5,
      "changes": 24,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/go.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/go.sum?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -58,8 +58,12 @@ github.com/gavv/httpexpect v2.0.0+incompatible h1:1X9kcRshkSKEjNJJxX9Y9mQ5BRfbxU\n github.com/gavv/httpexpect v2.0.0+incompatible/go.mod h1:x+9tiU1YnrOvnB725RkpoLv1M62hOWzwo5OXotisrKc=\n github.com/go-chi/chi v4.1.1+incompatible h1:MmTgB0R8Bt/jccxp+t6S/1VGIKdJw5J74CK/c9tTfA4=\n github.com/go-chi/chi v4.1.1+incompatible/go.mod h1:eB3wogJHnLi3x/kFX2A+IbTBlXxmMeXJVKy9tTv1XzQ=\n+github.com/go-chi/chi/v5 v5.0.2 h1:4xKeALZdMEsuI5s05PU2Bm89Uc5iM04qFubUCl5LfAQ=\n+github.com/go-chi/chi/v5 v5.0.2/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\n github.com/go-chi/cors v1.1.1 h1:eHuqxsIw89iXcWnWUN8R72JMibABJTN/4IOYI5WERvw=\n github.com/go-chi/cors v1.1.1/go.mod h1:K2Yje0VW/SJzxiyMYu6iPQYa7hMjQX2i/F491VChg1I=\n+github.com/go-chi/cors v1.2.0 h1:tV1g1XENQ8ku4Bq3K9ub2AtgG+p16SmzeMSGTwrOKdE=\n+github.com/go-chi/cors v1.2.0/go.mod h1:sSbTewc+6wYHBBCW7ytsFSn836hqM7JxpglAy2Vzc58=\n github.com/go-chi/render v1.0.1 h1:4/5tis2cKaNdnv9zFLfXzcquC9HbeZgCnxGnKrltBS8=\n github.com/go-chi/render v1.0.1/go.mod h1:pq4Rr7HbnsdaeHagklXub+p6Wd16Af5l9koip1OvJns=\n github.com/go-pkgz/auth v1.15.0 h1:77z+YdcxHkRcjJSQc1SBtqIrZbp3p8Zo72ZRR3QKsLk=\n@@ -76,8 +80,8 @@ github.com/go-pkgz/repeater v1.1.3 h1:q6+JQF14ESSy28Dd7F+wRelY4F+41HJ0LEy/szNnMi\n github.com/go-pkgz/repeater v1.1.3/go.mod h1:hVTavuO5x3Gxnu8zW7d6sQBfAneKV8X2FjU48kGfpKw=\n github.com/go-pkgz/rest v1.5.0/go.mod h1:nQaM3RhSTUAmbBZWY4hfe4buyeC9VckvhoCktiQXJxI=\n github.com/go-pkgz/rest v1.6.0/go.mod h1:FKpgK5FgSqREG323OIU/JpIc0xA7dqay9BmK7LZXTQE=\n-github.com/go-pkgz/rest v1.7.0 h1:5KHWmYPZaJfd6+Htx8bCJ2InVSHJ85MGh8kuO72SAjU=\n-github.com/go-pkgz/rest v1.7.0/go.mod h1:FKpgK5FgSqREG323OIU/JpIc0xA7dqay9BmK7LZXTQE=\n+github.com/go-pkgz/rest v1.9.2 h1:RyBBRXBYY6eBgTW3UGYOyT4VQPDiBBFh/tesELWsryQ=\n+github.com/go-pkgz/rest v1.9.2/go.mod h1:wZ/dGipZUaF9to0vIQl7PwDHgWQDB0jsrFg1xnAKLDw=\n github.com/go-pkgz/syncs v1.1.1 h1:jWN+y6FS/Xe+8z4l3QMbSnODGyaxDHGojIS+wyKIjxg=\n github.com/go-pkgz/syncs v1.1.1/go.mod h1:bt9lxWRRJ9vOCMGc8Big8ttjYHLKP88ofj1y38UlaHE=\n github.com/go-redis/redis/v7 v7.4.0 h1:7obg6wUoj05T0EpY0o8B59S9w5yeMWql7sw2kwNW1x4=\n@@ -167,8 +171,8 @@ github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORN\n github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\n github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\n github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\n-github.com/kyokomi/emoji v2.2.1+incompatible h1:uP/6J5y5U0XxPh6fv8YximpVD1uMrshXG78I1+uF5SA=\n-github.com/kyokomi/emoji v2.2.1+incompatible/go.mod h1:mZ6aGCD7yk8j6QY6KICwnZ2pxoszVseX1DNoGtU2tBA=\n+github.com/kyokomi/emoji/v2 v2.2.8 h1:jcofPxjHWEkJtkIbcLHvZhxKgCPl6C7MyjTrD4KDqUE=\n+github.com/kyokomi/emoji/v2 v2.2.8/go.mod h1:JUcn42DTdsXJo1SWanHh4HKDEyPaR5CqkmoirZZP9qE=\n github.com/markbates/oncer v0.0.0-20181203154359-bf2de49a0be2/go.mod h1:Ld9puTsIW75CHf65OeIOkyKbteujpZVXDpWK6YGZbxE=\n github.com/markbates/safe v1.0.1/go.mod h1:nAqgmRi7cY2nqMc92/bSEeQA+R4OheNU2T1kNSCBdG0=\n github.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=\n@@ -230,8 +234,9 @@ github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXf\n github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\n github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\n github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\n-github.com/stretchr/testify v1.6.1 h1:hDPOHmpOpP40lSULcqw7IrRb/u7w6RpDC9399XyoNd0=\n github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n+github.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=\n+github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n github.com/tidwall/btree v0.0.0-20170113224114-9876f1454cf0 h1:QnyrPZZvPmR0AtJCxxfCtI1qN+fYpKTKJ/5opWmZ34k=\n github.com/tidwall/btree v0.0.0-20170113224114-9876f1454cf0/go.mod h1:huei1BkDWJ3/sLXmO+bsCNELL+Bp2Kks9OLyQFkzvA8=\n github.com/tidwall/buntdb v1.1.0 h1:H6LzK59KiNjf1nHVPFrYj4Qnl8d8YLBsYamdL8N+Bao=\n@@ -288,8 +293,12 @@ golang.org/x/crypto v0.0.0-20190422162423-af44ce270edf/go.mod h1:WFFai1msRO1wXaE\n golang.org/x/crypto v0.0.0-20190530122614-20be4c3c3ed5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\n golang.org/x/crypto v0.0.0-20200406173513-056763e48d71 h1:DOmugCavvUtnUD114C1Wh+UgTgQZ4pMLzXxi1pSt+/Y=\n golang.org/x/crypto v0.0.0-20200406173513-056763e48d71/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\n+golang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b h1:7mWr3k41Qtv8XlltBkDkl8LoP3mpSgBW8BUoxtEdbXg=\n+golang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\n golang.org/x/image v0.0.0-20200119044424-58c23975cae1 h1:5h3ngYt7+vXCDZCup/HkCQgW5XwmSvR/nA2JmJ0RErg=\n golang.org/x/image v0.0.0-20200119044424-58c23975cae1/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\n+golang.org/x/image v0.0.0-20210220032944-ac19c3e999fb h1:fqpd0EBDzlHRCjiphRR5Zo/RSWWQlWv34418dnEixWk=\n+golang.org/x/image v0.0.0-20210220032944-ac19c3e999fb/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\n golang.org/x/lint v0.0.0-20190930215403-16217165b5de h1:5hukYrvBGR8/eNkX5mdUezrA6JiaEZDtJb9Ei+1LlBs=\n golang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\n golang.org/x/net v0.0.0-20180218175443-cbe0f9307d01/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n@@ -304,8 +313,11 @@ golang.org/x/net v0.0.0-20190827160401-ba9fcec4b297/go.mod h1:z5CRVTTTmAJ677TzLL\n golang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/net v0.0.0-20200520182314-0ba52f642ac2/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\n+golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\n golang.org/x/net v0.0.0-20210421230115-4e50805a0758 h1:aEpZnXcAmXkd6AvLb2OPt+EN1Zu/8Ne3pCqPjja5PXY=\n golang.org/x/net v0.0.0-20210421230115-4e50805a0758/go.mod h1:72T/g9IO56b78aLF+1Kcs5dz7/ng1VjMUvfKvpfy+jM=\n+golang.org/x/net v0.0.0-20210423184538-5f58ad60dda6 h1:0PC75Fz/kyMGhL0e1QnypqK2kQMqKt9csD1GnMJR+Zk=\n+golang.org/x/net v0.0.0-20210423184538-5f58ad60dda6/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=\n golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\n golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d h1:TzXSXBo42m9gQenoE3b9BGiEpg5IG2JkU5FkPIawgtw=\n golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\n@@ -334,6 +346,8 @@ golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7w\n golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n golang.org/x/sys v0.0.0-20210420072515-93ed5bcd2bfe h1:WdX7u8s3yOigWAhHEaDl8r9G+4XwFQEQFtBMYyN+kXQ=\n golang.org/x/sys v0.0.0-20210420072515-93ed5bcd2bfe/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n+golang.org/x/sys v0.0.0-20210423082822-04245dca01da h1:b3NXsE2LusjYGGjL5bxEVZZORm/YEFFrWFjR8eFrw/c=\n+golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\n golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\n golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk="
    },
    {
      "sha": "ba22c99a99eedad8a95a9958ec1b3982843d5e1c",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/.gitignore",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/.gitignore",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/.gitignore",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/.gitignore?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,3 @@\n+.idea\n+*.sw?\n+.vscode"
    },
    {
      "sha": "0c44553d0a5d5ef24d984e09b5d9fa9830e6400f",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/CHANGELOG.md",
      "status": "added",
      "additions": 290,
      "deletions": 0,
      "changes": 290,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/CHANGELOG.md",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/CHANGELOG.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/CHANGELOG.md?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,290 @@\n+# Changelog\n+\n+## v5.0.2 (2021-03-25)\n+\n+- History of changes: see https://github.com/go-chi/chi/compare/v5.0.1...v5.0.2\n+\n+\n+## v5.0.1 (2021-03-10)\n+\n+- Small improvements\n+- History of changes: see https://github.com/go-chi/chi/compare/v5.0.0...v5.0.1\n+\n+\n+## v5.0.0 (2021-02-27)\n+\n+- chi v5, `github.com/go-chi/chi/v5` introduces the adoption of Go's SIV to adhere to the current state-of-the-tools in Go.\n+- chi v1.5.x did not work out as planned, as the Go tooling is too powerful and chi's adoption is too wide.\n+  The most responsible thing to do for everyone's benefit is to just release v5 with SIV, so I present to you all,\n+  chi v5 at `github.com/go-chi/chi/v5`. I hope someday the developer experience and ergonomics I've been seeking\n+  will still come to fruition in some form, see https://github.com/golang/go/issues/44550\n+- History of changes: see https://github.com/go-chi/chi/compare/v1.5.4...v5.0.0\n+\n+\n+## v1.5.4 (2021-02-27)\n+\n+- Undo prior retraction in v1.5.3 as we prepare for v5.0.0 release\n+- History of changes: see https://github.com/go-chi/chi/compare/v1.5.3...v1.5.4\n+\n+\n+## v1.5.3 (2021-02-21)\n+\n+- Update go.mod to go 1.16 with new retract directive marking all versions without prior go.mod support\n+- History of changes: see https://github.com/go-chi/chi/compare/v1.5.2...v1.5.3\n+\n+\n+## v1.5.2 (2021-02-10)\n+\n+- Reverting allocation optimization as a precaution as go test -race fails.\n+- Minor improvements, see history below\n+- History of changes: see https://github.com/go-chi/chi/compare/v1.5.1...v1.5.2\n+\n+\n+## v1.5.1 (2020-12-06)\n+\n+- Performance improvement: removing 1 allocation by foregoing context.WithValue, thank you @bouk for\n+  your contribution (https://github.com/go-chi/chi/pull/555). Note: new benchmarks posted in README.\n+- `middleware.CleanPath`: new middleware that clean's request path of double slashes\n+- deprecate & remove `chi.ServerBaseContext` in favour of stdlib `http.Server#BaseContext`\n+- plus other tiny improvements, see full commit history below\n+- History of changes: see https://github.com/go-chi/chi/compare/v4.1.2...v1.5.1\n+\n+\n+## v1.5.0 (2020-11-12) - now with go.mod support\n+\n+`chi` dates back to 2016 with it's original implementation as one of the first routers to adopt the newly introduced\n+context.Context api to the stdlib -- set out to design a router that is faster, more modular and simpler than anything\n+else out there -- while not introducing any custom handler types or dependencies. Today, `chi` still has zero dependencies,\n+and in many ways is future proofed from changes, given it's minimal nature. Between versions, chi's iterations have been very\n+incremental, with the architecture and api being the same today as it was originally designed in 2016. For this reason it \n+makes chi a pretty easy project to maintain, as well thanks to the many amazing community contributions over the years\n+to who all help make chi better (total of 86 contributors to date -- thanks all!).\n+\n+Chi has been an labour of love, art and engineering, with the goals to offer beautiful ergonomics, flexibility, performance\n+and simplicity when building HTTP services with Go. I've strived to keep the router very minimal in surface area / code size,\n+and always improving the code wherever possible -- and as of today the `chi` package is just 1082 lines of code (not counting\n+middlewares, which are all optional). As well, I don't have the exact metrics, but from my analysis and email exchanges from\n+companies and developers, chi is used by thousands of projects around the world -- thank you all as there is no better form of\n+joy for me than to have art I had started be helpful and enjoyed by others. And of course I use chi in all of my own projects too :)\n+\n+For me, the asthetics of chi's code and usage are very important. With the introduction of Go's module support \n+(which I'm a big fan of), chi's past versioning scheme choice to v2, v3 and v4 would mean I'd require the import path\n+of \"github.com/go-chi/chi/v4\", leading to the lengthy discussion at https://github.com/go-chi/chi/issues/462.\n+Haha, to some, you may be scratching your head why I've spent > 1 year stalling to adopt \"/vXX\" convention in the import\n+path -- which isn't horrible in general -- but for chi, I'm unable to accept it as I strive for perfection in it's API design,\n+aesthetics and simplicity. It just doesn't feel good to me given chi's simple nature -- I do not foresee a \"v5\" or \"v6\",\n+and upgrading between versions in the future will also be just incremental.\n+\n+I do understand versioning is a part of the API design as well, which is why the solution for a while has been to \"do nothing\",\n+as Go supports both old and new import paths with/out go.mod. However, now that Go module support has had time to iron out kinks and\n+is adopted everywhere, it's time for chi to get with the times. Luckily, I've discovered a path forward that will make me happy,\n+while also not breaking anyone's app who adopted a prior versioning from tags in v2/v3/v4. I've made an experimental release of\n+v1.5.0 with go.mod silently, and tested it with new and old projects, to ensure the developer experience is preserved, and it's\n+largely unnoticed. Fortunately, Go's toolchain will check the tags of a repo and consider the \"latest\" tag the one with go.mod.\n+However, you can still request a specific older tag such as v4.1.2, and everything will \"just work\". But new users can just\n+`go get github.com/go-chi/chi` or `go get github.com/go-chi/chi@latest` and they will get the latest version which contains\n+go.mod support, which is v1.5.0+. `chi` will not change very much over the years, just like it hasn't changed much from 4 years ago.\n+Therefore, we will stay on v1.x from here on, starting from v1.5.0. Any breaking changes will bump a \"minor\" release and\n+backwards-compatible improvements/fixes will bump a \"tiny\" release.\n+\n+For existing projects who want to upgrade to the latest go.mod version, run: `go get -u github.com/go-chi/chi@v1.5.0`,\n+which will get you on the go.mod version line (as Go's mod cache may still remember v4.x). Brand new systems can run\n+`go get -u github.com/go-chi/chi` or `go get -u github.com/go-chi/chi@latest` to install chi, which will install v1.5.0+\n+built with go.mod support.\n+\n+My apologies to the developers who will disagree with the decisions above, but, hope you'll try it and see it's a very\n+minor request which is backwards compatible and won't break your existing installations.\n+\n+Cheers all, happy coding!\n+\n+\n+---\n+\n+\n+## v4.1.2 (2020-06-02)\n+\n+- fix that handles MethodNotAllowed with path variables, thank you @caseyhadden for your contribution\n+- fix to replace nested wildcards correctly in RoutePattern, thank you @@unmultimedio for your contribution\n+- History of changes: see https://github.com/go-chi/chi/compare/v4.1.1...v4.1.2\n+\n+\n+## v4.1.1 (2020-04-16)\n+\n+- fix for issue https://github.com/go-chi/chi/issues/411 which allows for overlapping regexp\n+  route to the correct handler through a recursive tree search, thanks to @Jahaja for the PR/fix!\n+- new middleware.RouteHeaders as a simple router for request headers with wildcard support\n+- History of changes: see https://github.com/go-chi/chi/compare/v4.1.0...v4.1.1\n+\n+\n+## v4.1.0 (2020-04-1)\n+\n+- middleware.LogEntry: Write method on interface now passes the response header\n+  and an extra interface type useful for custom logger implementations.\n+- middleware.WrapResponseWriter: minor fix\n+- middleware.Recoverer: a bit prettier\n+- History of changes: see https://github.com/go-chi/chi/compare/v4.0.4...v4.1.0\n+\n+## v4.0.4 (2020-03-24)\n+\n+- middleware.Recoverer: new pretty stack trace printing (https://github.com/go-chi/chi/pull/496)\n+- a few minor improvements and fixes\n+- History of changes: see https://github.com/go-chi/chi/compare/v4.0.3...v4.0.4\n+\n+\n+## v4.0.3 (2020-01-09)\n+\n+- core: fix regexp routing to include default value when param is not matched\n+- middleware: rewrite of middleware.Compress\n+- middleware: suppress http.ErrAbortHandler in middleware.Recoverer\n+- History of changes: see https://github.com/go-chi/chi/compare/v4.0.2...v4.0.3\n+\n+\n+## v4.0.2 (2019-02-26)\n+\n+- Minor fixes\n+- History of changes: see https://github.com/go-chi/chi/compare/v4.0.1...v4.0.2\n+\n+\n+## v4.0.1 (2019-01-21)\n+\n+- Fixes issue with compress middleware: #382 #385\n+- History of changes: see https://github.com/go-chi/chi/compare/v4.0.0...v4.0.1\n+\n+\n+## v4.0.0 (2019-01-10)\n+\n+- chi v4 requires Go 1.10.3+ (or Go 1.9.7+) - we have deprecated support for Go 1.7 and 1.8\n+- router: respond with 404 on router with no routes (#362)\n+- router: additional check to ensure wildcard is at the end of a url pattern (#333)\n+- middleware: deprecate use of http.CloseNotifier (#347)\n+- middleware: fix RedirectSlashes to include query params on redirect (#334)\n+- History of changes: see https://github.com/go-chi/chi/compare/v3.3.4...v4.0.0\n+\n+\n+## v3.3.4 (2019-01-07)\n+\n+- Minor middleware improvements. No changes to core library/router. Moving v3 into its\n+- own branch as a version of chi for Go 1.7, 1.8, 1.9, 1.10, 1.11\n+- History of changes: see https://github.com/go-chi/chi/compare/v3.3.3...v3.3.4\n+\n+\n+## v3.3.3 (2018-08-27)\n+\n+- Minor release\n+- See https://github.com/go-chi/chi/compare/v3.3.2...v3.3.3\n+\n+\n+## v3.3.2 (2017-12-22)\n+\n+- Support to route trailing slashes on mounted sub-routers (#281)\n+- middleware: new `ContentCharset` to check matching charsets. Thank you\n+  @csucu for your community contribution!\n+\n+\n+## v3.3.1 (2017-11-20)\n+\n+- middleware: new `AllowContentType` handler for explicit whitelist of accepted request Content-Types\n+- middleware: new `SetHeader` handler for short-hand middleware to set a response header key/value\n+- Minor bug fixes\n+\n+\n+## v3.3.0 (2017-10-10)\n+\n+- New chi.RegisterMethod(method) to add support for custom HTTP methods, see _examples/custom-method for usage\n+- Deprecated LINK and UNLINK methods from the default list, please use `chi.RegisterMethod(\"LINK\")` and `chi.RegisterMethod(\"UNLINK\")` in an `init()` function\n+\n+\n+## v3.2.1 (2017-08-31)\n+\n+- Add new `Match(rctx *Context, method, path string) bool` method to `Routes` interface\n+  and `Mux`. Match searches the mux's routing tree for a handler that matches the method/path\n+- Add new `RouteMethod` to `*Context`\n+- Add new `Routes` pointer to `*Context`\n+- Add new `middleware.GetHead` to route missing HEAD requests to GET handler\n+- Updated benchmarks (see README)\n+\n+\n+## v3.1.5 (2017-08-02)\n+\n+- Setup golint and go vet for the project\n+- As per golint, we've redefined `func ServerBaseContext(h http.Handler, baseCtx context.Context) http.Handler`\n+  to `func ServerBaseContext(baseCtx context.Context, h http.Handler) http.Handler`\n+\n+\n+## v3.1.0 (2017-07-10)\n+\n+- Fix a few minor issues after v3 release\n+- Move `docgen` sub-pkg to https://github.com/go-chi/docgen\n+- Move `render` sub-pkg to https://github.com/go-chi/render\n+- Add new `URLFormat` handler to chi/middleware sub-pkg to make working with url mime \n+  suffixes easier, ie. parsing `/articles/1.json` and `/articles/1.xml`. See comments in\n+  https://github.com/go-chi/chi/blob/master/middleware/url_format.go for example usage.\n+\n+\n+## v3.0.0 (2017-06-21)\n+\n+- Major update to chi library with many exciting updates, but also some *breaking changes*\n+- URL parameter syntax changed from `/:id` to `/{id}` for even more flexible routing, such as\n+  `/articles/{month}-{day}-{year}-{slug}`, `/articles/{id}`, and `/articles/{id}.{ext}` on the\n+  same router\n+- Support for regexp for routing patterns, in the form of `/{paramKey:regExp}` for example:\n+  `r.Get(\"/articles/{name:[a-z]+}\", h)` and `chi.URLParam(r, \"name\")`\n+- Add `Method` and `MethodFunc` to `chi.Router` to allow routing definitions such as\n+  `r.Method(\"GET\", \"/\", h)` which provides a cleaner interface for custom handlers like\n+  in `_examples/custom-handler`\n+- Deprecating `mux#FileServer` helper function. Instead, we encourage users to create their\n+  own using file handler with the stdlib, see `_examples/fileserver` for an example\n+- Add support for LINK/UNLINK http methods via `r.Method()` and `r.MethodFunc()`\n+- Moved the chi project to its own organization, to allow chi-related community packages to\n+  be easily discovered and supported, at: https://github.com/go-chi\n+- *NOTE:* please update your import paths to `\"github.com/go-chi/chi\"`\n+- *NOTE:* chi v2 is still available at https://github.com/go-chi/chi/tree/v2\n+\n+\n+## v2.1.0 (2017-03-30)\n+\n+- Minor improvements and update to the chi core library\n+- Introduced a brand new `chi/render` sub-package to complete the story of building\n+  APIs to offer a pattern for managing well-defined request / response payloads. Please\n+  check out the updated `_examples/rest` example for how it works.\n+- Added `MethodNotAllowed(h http.HandlerFunc)` to chi.Router interface\n+\n+\n+## v2.0.0 (2017-01-06)\n+\n+- After many months of v2 being in an RC state with many companies and users running it in\n+  production, the inclusion of some improvements to the middlewares, we are very pleased to\n+  announce v2.0.0 of chi.\n+\n+\n+## v2.0.0-rc1 (2016-07-26)\n+\n+- Huge update! chi v2 is a large refactor targetting Go 1.7+. As of Go 1.7, the popular\n+  community `\"net/context\"` package has been included in the standard library as `\"context\"` and\n+  utilized by `\"net/http\"` and `http.Request` to managing deadlines, cancelation signals and other\n+  request-scoped values. We're very excited about the new context addition and are proud to\n+  introduce chi v2, a minimal and powerful routing package for building large HTTP services,\n+  with zero external dependencies. Chi focuses on idiomatic design and encourages the use of \n+  stdlib HTTP handlers and middlwares.\n+- chi v2 deprecates its `chi.Handler` interface and requires `http.Handler` or `http.HandlerFunc`\n+- chi v2 stores URL routing parameters and patterns in the standard request context: `r.Context()`\n+- chi v2 lower-level routing context is accessible by `chi.RouteContext(r.Context()) *chi.Context`,\n+  which provides direct access to URL routing parameters, the routing path and the matching\n+  routing patterns.\n+- Users upgrading from chi v1 to v2, need to:\n+  1. Update the old chi.Handler signature, `func(ctx context.Context, w http.ResponseWriter, r *http.Request)` to\n+     the standard http.Handler: `func(w http.ResponseWriter, r *http.Request)`\n+  2. Use `chi.URLParam(r *http.Request, paramKey string) string`\n+     or `URLParamFromCtx(ctx context.Context, paramKey string) string` to access a url parameter value\n+\n+\n+## v1.0.0 (2016-07-01)\n+\n+- Released chi v1 stable https://github.com/go-chi/chi/tree/v1.0.0 for Go 1.6 and older.\n+\n+\n+## v0.9.0 (2016-03-31)\n+\n+- Reuse context objects via sync.Pool for zero-allocation routing [#33](https://github.com/go-chi/chi/pull/33)\n+- BREAKING NOTE: due to subtle API changes, previously `chi.URLParams(ctx)[\"id\"]` used to access url parameters\n+  has changed to: `chi.URLParam(ctx, \"id\")`"
    },
    {
      "sha": "c0ac2dfe853bd857dcc497b2cc29f7900c8a4370",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/CONTRIBUTING.md",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/CONTRIBUTING.md",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/CONTRIBUTING.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/CONTRIBUTING.md?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,31 @@\n+# Contributing\n+\n+## Prerequisites\n+\n+1. [Install Go][go-install].\n+2. Download the sources and switch the working directory:\n+\n+    ```bash\n+    go get -u -d github.com/go-chi/chi\n+    cd $GOPATH/src/github.com/go-chi/chi\n+    ```\n+\n+## Submitting a Pull Request\n+\n+A typical workflow is:\n+\n+1. [Fork the repository.][fork] [This tip maybe also helpful.][go-fork-tip]\n+2. [Create a topic branch.][branch]\n+3. Add tests for your change.\n+4. Run `go test`. If your tests pass, return to the step 3.\n+5. Implement the change and ensure the steps from the previous step pass.\n+6. Run `goimports -w .`, to ensure the new code conforms to Go formatting guideline.\n+7. [Add, commit and push your changes.][git-help]\n+8. [Submit a pull request.][pull-req]\n+\n+[go-install]: https://golang.org/doc/install\n+[go-fork-tip]: http://blog.campoy.cat/2014/03/github-and-go-forking-pull-requests-and.html\n+[fork]: https://help.github.com/articles/fork-a-repo\n+[branch]: http://learn.github.com/p/branching.html\n+[git-help]: https://guides.github.com\n+[pull-req]: https://help.github.com/articles/using-pull-requests"
    },
    {
      "sha": "d99f02ffac5185e2550770d33333a67e2cf2092b",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/LICENSE",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/LICENSE",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/LICENSE?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,20 @@\n+Copyright (c) 2015-present Peter Kieltyka (https://github.com/pkieltyka), Google Inc.\n+\n+MIT License\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy of\n+this software and associated documentation files (the \"Software\"), to deal in\n+the Software without restriction, including without limitation the rights to\n+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n+the Software, and to permit persons to whom the Software is furnished to do so,\n+subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    {
      "sha": "b96c92dd2145882c7e469fd5cddda7de7fa1ea01",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/Makefile",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/Makefile",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/Makefile",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/Makefile?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,14 @@\n+all:\n+\t@echo \"**********************************************************\"\n+\t@echo \"**                    chi build tool                    **\"\n+\t@echo \"**********************************************************\"\n+\n+\n+test:\n+\tgo clean -testcache && $(MAKE) test-router && $(MAKE) test-middleware\n+\n+test-router:\n+\tgo test -race -v .\n+\n+test-middleware:\n+\tgo test -race -v ./middleware"
    },
    {
      "sha": "55416e15e2feb0db3f8bc566f3041aad5a2c7fd3",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/README.md",
      "status": "added",
      "additions": 511,
      "deletions": 0,
      "changes": 511,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/README.md?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,511 @@\n+# <img alt=\"chi\" src=\"https://cdn.rawgit.com/go-chi/chi/master/_examples/chi.svg\" width=\"220\" />\n+\n+\n+[![GoDoc Widget]][GoDoc] [![Travis Widget]][Travis]\n+\n+`chi` is a lightweight, idiomatic and composable router for building Go HTTP services. It's\n+especially good at helping you write large REST API services that are kept maintainable as your\n+project grows and changes. `chi` is built on the new `context` package introduced in Go 1.7 to\n+handle signaling, cancelation and request-scoped values across a handler chain.\n+\n+The focus of the project has been to seek out an elegant and comfortable design for writing\n+REST API servers, written during the development of the Pressly API service that powers our\n+public API service, which in turn powers all of our client-side applications.\n+\n+The key considerations of chi's design are: project structure, maintainability, standard http\n+handlers (stdlib-only), developer productivity, and deconstructing a large system into many small\n+parts. The core router `github.com/go-chi/chi` is quite small (less than 1000 LOC), but we've also\n+included some useful/optional subpackages: [middleware](/middleware), [render](https://github.com/go-chi/render)\n+and [docgen](https://github.com/go-chi/docgen). We hope you enjoy it too!\n+\n+## Install\n+\n+`go get -u github.com/go-chi/chi/v5`\n+\n+\n+## Features\n+\n+* **Lightweight** - cloc'd in ~1000 LOC for the chi router\n+* **Fast** - yes, see [benchmarks](#benchmarks)\n+* **100% compatible with net/http** - use any http or middleware pkg in the ecosystem that is also compatible with `net/http`\n+* **Designed for modular/composable APIs** - middlewares, inline middlewares, route groups and sub-router mounting\n+* **Context control** - built on new `context` package, providing value chaining, cancellations and timeouts\n+* **Robust** - in production at Pressly, CloudFlare, Heroku, 99Designs, and many others (see [discussion](https://github.com/go-chi/chi/issues/91))\n+* **Doc generation** - `docgen` auto-generates routing documentation from your source to JSON or Markdown\n+* **Go.mod support** - v1.x of chi (starting from v1.5.0), now has go.mod support (see [CHANGELOG](https://github.com/go-chi/chi/blob/master/CHANGELOG.md#v150-2020-11-12---now-with-gomod-support))\n+* **No external dependencies** - plain ol' Go stdlib + net/http\n+\n+\n+## Examples\n+\n+See [_examples/](https://github.com/go-chi/chi/blob/master/_examples/) for a variety of examples.\n+\n+\n+**As easy as:**\n+\n+```go\n+package main\n+\n+import (\n+\t\"net/http\"\n+\n+\t\"github.com/go-chi/chi/v5\"\n+\t\"github.com/go-chi/chi/v5/middleware\"\n+)\n+\n+func main() {\n+\tr := chi.NewRouter()\n+\tr.Use(middleware.Logger)\n+\tr.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n+\t\tw.Write([]byte(\"welcome\"))\n+\t})\n+\thttp.ListenAndServe(\":3000\", r)\n+}\n+```\n+\n+**REST Preview:**\n+\n+Here is a little preview of how routing looks like with chi. Also take a look at the generated routing docs\n+in JSON ([routes.json](https://github.com/go-chi/chi/blob/master/_examples/rest/routes.json)) and in\n+Markdown ([routes.md](https://github.com/go-chi/chi/blob/master/_examples/rest/routes.md)).\n+\n+I highly recommend reading the source of the [examples](https://github.com/go-chi/chi/blob/master/_examples/) listed\n+above, they will show you all the features of chi and serve as a good form of documentation.\n+\n+```go\n+import (\n+  //...\n+  \"context\"\n+  \"github.com/go-chi/chi/v5\"\n+  \"github.com/go-chi/chi/v5/middleware\"\n+)\n+\n+func main() {\n+  r := chi.NewRouter()\n+\n+  // A good base middleware stack\n+  r.Use(middleware.RequestID)\n+  r.Use(middleware.RealIP)\n+  r.Use(middleware.Logger)\n+  r.Use(middleware.Recoverer)\n+\n+  // Set a timeout value on the request context (ctx), that will signal\n+  // through ctx.Done() that the request has timed out and further\n+  // processing should be stopped.\n+  r.Use(middleware.Timeout(60 * time.Second))\n+\n+  r.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n+    w.Write([]byte(\"hi\"))\n+  })\n+\n+  // RESTy routes for \"articles\" resource\n+  r.Route(\"/articles\", func(r chi.Router) {\n+    r.With(paginate).Get(\"/\", listArticles)                           // GET /articles\n+    r.With(paginate).Get(\"/{month}-{day}-{year}\", listArticlesByDate) // GET /articles/01-16-2017\n+\n+    r.Post(\"/\", createArticle)                                        // POST /articles\n+    r.Get(\"/search\", searchArticles)                                  // GET /articles/search\n+\n+    // Regexp url parameters:\n+    r.Get(\"/{articleSlug:[a-z-]+}\", getArticleBySlug)                // GET /articles/home-is-toronto\n+\n+    // Subrouters:\n+    r.Route(\"/{articleID}\", func(r chi.Router) {\n+      r.Use(ArticleCtx)\n+      r.Get(\"/\", getArticle)                                          // GET /articles/123\n+      r.Put(\"/\", updateArticle)                                       // PUT /articles/123\n+      r.Delete(\"/\", deleteArticle)                                    // DELETE /articles/123\n+    })\n+  })\n+\n+  // Mount the admin sub-router\n+  r.Mount(\"/admin\", adminRouter())\n+\n+  http.ListenAndServe(\":3333\", r)\n+}\n+\n+func ArticleCtx(next http.Handler) http.Handler {\n+  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+    articleID := chi.URLParam(r, \"articleID\")\n+    article, err := dbGetArticle(articleID)\n+    if err != nil {\n+      http.Error(w, http.StatusText(404), 404)\n+      return\n+    }\n+    ctx := context.WithValue(r.Context(), \"article\", article)\n+    next.ServeHTTP(w, r.WithContext(ctx))\n+  })\n+}\n+\n+func getArticle(w http.ResponseWriter, r *http.Request) {\n+  ctx := r.Context()\n+  article, ok := ctx.Value(\"article\").(*Article)\n+  if !ok {\n+    http.Error(w, http.StatusText(422), 422)\n+    return\n+  }\n+  w.Write([]byte(fmt.Sprintf(\"title:%s\", article.Title)))\n+}\n+\n+// A completely separate router for administrator routes\n+func adminRouter() http.Handler {\n+  r := chi.NewRouter()\n+  r.Use(AdminOnly)\n+  r.Get(\"/\", adminIndex)\n+  r.Get(\"/accounts\", adminListAccounts)\n+  return r\n+}\n+\n+func AdminOnly(next http.Handler) http.Handler {\n+  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+    ctx := r.Context()\n+    perm, ok := ctx.Value(\"acl.permission\").(YourPermissionType)\n+    if !ok || !perm.IsAdmin() {\n+      http.Error(w, http.StatusText(403), 403)\n+      return\n+    }\n+    next.ServeHTTP(w, r)\n+  })\n+}\n+```\n+\n+\n+## Router interface\n+\n+chi's router is based on a kind of [Patricia Radix trie](https://en.wikipedia.org/wiki/Radix_tree).\n+The router is fully compatible with `net/http`.\n+\n+Built on top of the tree is the `Router` interface:\n+\n+```go\n+// Router consisting of the core routing methods used by chi's Mux,\n+// using only the standard net/http.\n+type Router interface {\n+\thttp.Handler\n+\tRoutes\n+\n+\t// Use appends one or more middlewares onto the Router stack.\n+\tUse(middlewares ...func(http.Handler) http.Handler)\n+\n+\t// With adds inline middlewares for an endpoint handler.\n+\tWith(middlewares ...func(http.Handler) http.Handler) Router\n+\n+\t// Group adds a new inline-Router along the current routing\n+\t// path, with a fresh middleware stack for the inline-Router.\n+\tGroup(fn func(r Router)) Router\n+\n+\t// Route mounts a sub-Router along a `pattern`` string.\n+\tRoute(pattern string, fn func(r Router)) Router\n+\n+\t// Mount attaches another http.Handler along ./pattern/*\n+\tMount(pattern string, h http.Handler)\n+\n+\t// Handle and HandleFunc adds routes for `pattern` that matches\n+\t// all HTTP methods.\n+\tHandle(pattern string, h http.Handler)\n+\tHandleFunc(pattern string, h http.HandlerFunc)\n+\n+\t// Method and MethodFunc adds routes for `pattern` that matches\n+\t// the `method` HTTP method.\n+\tMethod(method, pattern string, h http.Handler)\n+\tMethodFunc(method, pattern string, h http.HandlerFunc)\n+\n+\t// HTTP-method routing along `pattern`\n+\tConnect(pattern string, h http.HandlerFunc)\n+\tDelete(pattern string, h http.HandlerFunc)\n+\tGet(pattern string, h http.HandlerFunc)\n+\tHead(pattern string, h http.HandlerFunc)\n+\tOptions(pattern string, h http.HandlerFunc)\n+\tPatch(pattern string, h http.HandlerFunc)\n+\tPost(pattern string, h http.HandlerFunc)\n+\tPut(pattern string, h http.HandlerFunc)\n+\tTrace(pattern string, h http.HandlerFunc)\n+\n+\t// NotFound defines a handler to respond whenever a route could\n+\t// not be found.\n+\tNotFound(h http.HandlerFunc)\n+\n+\t// MethodNotAllowed defines a handler to respond whenever a method is\n+\t// not allowed.\n+\tMethodNotAllowed(h http.HandlerFunc)\n+}\n+\n+// Routes interface adds two methods for router traversal, which is also\n+// used by the github.com/go-chi/docgen package to generate documentation for Routers.\n+type Routes interface {\n+\t// Routes returns the routing tree in an easily traversable structure.\n+\tRoutes() []Route\n+\n+\t// Middlewares returns the list of middlewares in use by the router.\n+\tMiddlewares() Middlewares\n+\n+\t// Match searches the routing tree for a handler that matches\n+\t// the method/path - similar to routing a http request, but without\n+\t// executing the handler thereafter.\n+\tMatch(rctx *Context, method, path string) bool\n+}\n+```\n+\n+Each routing method accepts a URL `pattern` and chain of `handlers`. The URL pattern\n+supports named params (ie. `/users/{userID}`) and wildcards (ie. `/admin/*`). URL parameters\n+can be fetched at runtime by calling `chi.URLParam(r, \"userID\")` for named parameters\n+and `chi.URLParam(r, \"*\")` for a wildcard parameter.\n+\n+\n+### Middleware handlers\n+\n+chi's middlewares are just stdlib net/http middleware handlers. There is nothing special\n+about them, which means the router and all the tooling is designed to be compatible and\n+friendly with any middleware in the community. This offers much better extensibility and reuse\n+of packages and is at the heart of chi's purpose.\n+\n+Here is an example of a standard net/http middleware where we assign a context key `\"user\"`\n+the value of `\"123\"`. This middleware sets a hypothetical user identifier on the request\n+context and calls the next handler in the chain.\n+\n+```go\n+// HTTP middleware setting a value on the request context\n+func MyMiddleware(next http.Handler) http.Handler {\n+  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+    // create new context from `r` request context, and assign key `\"user\"`\n+    // to value of `\"123\"`\n+    ctx := context.WithValue(r.Context(), \"user\", \"123\")\n+\n+    // call the next handler in the chain, passing the response writer and\n+    // the updated request object with the new context value.\n+    //\n+    // note: context.Context values are nested, so any previously set\n+    // values will be accessible as well, and the new `\"user\"` key\n+    // will be accessible from this point forward.\n+    next.ServeHTTP(w, r.WithContext(ctx))\n+  })\n+}\n+```\n+\n+\n+### Request handlers\n+\n+chi uses standard net/http request handlers. This little snippet is an example of a http.Handler\n+func that reads a user identifier from the request context - hypothetically, identifying\n+the user sending an authenticated request, validated+set by a previous middleware handler.\n+\n+```go\n+// HTTP handler accessing data from the request context.\n+func MyRequestHandler(w http.ResponseWriter, r *http.Request) {\n+  // here we read from the request context and fetch out `\"user\"` key set in\n+  // the MyMiddleware example above.\n+  user := r.Context().Value(\"user\").(string)\n+\n+  // respond to the client\n+  w.Write([]byte(fmt.Sprintf(\"hi %s\", user)))\n+}\n+```\n+\n+\n+### URL parameters\n+\n+chi's router parses and stores URL parameters right onto the request context. Here is\n+an example of how to access URL params in your net/http handlers. And of course, middlewares\n+are able to access the same information.\n+\n+```go\n+// HTTP handler accessing the url routing parameters.\n+func MyRequestHandler(w http.ResponseWriter, r *http.Request) {\n+  // fetch the url parameter `\"userID\"` from the request of a matching\n+  // routing pattern. An example routing pattern could be: /users/{userID}\n+  userID := chi.URLParam(r, \"userID\")\n+\n+  // fetch `\"key\"` from the request context\n+  ctx := r.Context()\n+  key := ctx.Value(\"key\").(string)\n+\n+  // respond to the client\n+  w.Write([]byte(fmt.Sprintf(\"hi %v, %v\", userID, key)))\n+}\n+```\n+\n+\n+## Middlewares\n+\n+chi comes equipped with an optional `middleware` package, providing a suite of standard\n+`net/http` middlewares. Please note, any middleware in the ecosystem that is also compatible\n+with `net/http` can be used with chi's mux.\n+\n+### Core middlewares\n+\n+----------------------------------------------------------------------------------------------------\n+| chi/middleware Handler | description                                                             |\n+| :--------------------- | :---------------------------------------------------------------------- |\n+| [AllowContentEncoding] | Enforces a whitelist of request Content-Encoding headers                |\n+| [AllowContentType]     | Explicit whitelist of accepted request Content-Types                    |\n+| [BasicAuth]            | Basic HTTP authentication                                               |\n+| [Compress]             | Gzip compression for clients that accept compressed responses           |\n+| [ContentCharset]       | Ensure charset for Content-Type request headers                         |\n+| [CleanPath]            | Clean double slashes from request path                                  |\n+| [GetHead]              | Automatically route undefined HEAD requests to GET handlers             |\n+| [Heartbeat]            | Monitoring endpoint to check the servers pulse                          |\n+| [Logger]               | Logs the start and end of each request with the elapsed processing time |\n+| [NoCache]              | Sets response headers to prevent clients from caching                   |\n+| [Profiler]             | Easily attach net/http/pprof to your routers                            |\n+| [RealIP]               | Sets a http.Request's RemoteAddr to either X-Forwarded-For or X-Real-IP |\n+| [Recoverer]            | Gracefully absorb panics and prints the stack trace                     |\n+| [RequestID]            | Injects a request ID into the context of each request                   |\n+| [RedirectSlashes]      | Redirect slashes on routing paths                                       |\n+| [RouteHeaders]         | Route handling for request headers                                      |\n+| [SetHeader]            | Short-hand middleware to set a response header key/value                |\n+| [StripSlashes]         | Strip slashes on routing paths                                          |\n+| [Throttle]             | Puts a ceiling on the number of concurrent requests                     |\n+| [Timeout]              | Signals to the request context when the timeout deadline is reached     |\n+| [URLFormat]            | Parse extension from url and put it on request context                  |\n+| [WithValue]            | Short-hand middleware to set a key/value on the request context         |\n+----------------------------------------------------------------------------------------------------\n+\n+[AllowContentEncoding]: https://pkg.go.dev/github.com/go-chi/chi/middleware#AllowContentEncoding\n+[AllowContentType]: https://pkg.go.dev/github.com/go-chi/chi/middleware#AllowContentType\n+[BasicAuth]: https://pkg.go.dev/github.com/go-chi/chi/middleware#BasicAuth\n+[Compress]: https://pkg.go.dev/github.com/go-chi/chi/middleware#Compress\n+[ContentCharset]: https://pkg.go.dev/github.com/go-chi/chi/middleware#ContentCharset\n+[CleanPath]: https://pkg.go.dev/github.com/go-chi/chi/middleware#CleanPath\n+[GetHead]: https://pkg.go.dev/github.com/go-chi/chi/middleware#GetHead\n+[GetReqID]: https://pkg.go.dev/github.com/go-chi/chi/middleware#GetReqID\n+[Heartbeat]: https://pkg.go.dev/github.com/go-chi/chi/middleware#Heartbeat\n+[Logger]: https://pkg.go.dev/github.com/go-chi/chi/middleware#Logger\n+[NoCache]: https://pkg.go.dev/github.com/go-chi/chi/middleware#NoCache\n+[Profiler]: https://pkg.go.dev/github.com/go-chi/chi/middleware#Profiler\n+[RealIP]: https://pkg.go.dev/github.com/go-chi/chi/middleware#RealIP\n+[Recoverer]: https://pkg.go.dev/github.com/go-chi/chi/middleware#Recoverer\n+[RedirectSlashes]: https://pkg.go.dev/github.com/go-chi/chi/middleware#RedirectSlashes\n+[RequestLogger]: https://pkg.go.dev/github.com/go-chi/chi/middleware#RequestLogger\n+[RequestID]: https://pkg.go.dev/github.com/go-chi/chi/middleware#RequestID\n+[RouteHeaders]: https://pkg.go.dev/github.com/go-chi/chi/middleware#RouteHeaders\n+[SetHeader]: https://pkg.go.dev/github.com/go-chi/chi/middleware#SetHeader\n+[StripSlashes]: https://pkg.go.dev/github.com/go-chi/chi/middleware#StripSlashes\n+[Throttle]: https://pkg.go.dev/github.com/go-chi/chi/middleware#Throttle\n+[ThrottleBacklog]: https://pkg.go.dev/github.com/go-chi/chi/middleware#ThrottleBacklog\n+[ThrottleWithOpts]: https://pkg.go.dev/github.com/go-chi/chi/middleware#ThrottleWithOpts\n+[Timeout]: https://pkg.go.dev/github.com/go-chi/chi/middleware#Timeout\n+[URLFormat]: https://pkg.go.dev/github.com/go-chi/chi/middleware#URLFormat\n+[WithLogEntry]: https://pkg.go.dev/github.com/go-chi/chi/middleware#WithLogEntry\n+[WithValue]: https://pkg.go.dev/github.com/go-chi/chi/middleware#WithValue\n+[Compressor]: https://pkg.go.dev/github.com/go-chi/chi/middleware#Compressor\n+[DefaultLogFormatter]: https://pkg.go.dev/github.com/go-chi/chi/middleware#DefaultLogFormatter\n+[EncoderFunc]: https://pkg.go.dev/github.com/go-chi/chi/middleware#EncoderFunc\n+[HeaderRoute]: https://pkg.go.dev/github.com/go-chi/chi/middleware#HeaderRoute\n+[HeaderRouter]: https://pkg.go.dev/github.com/go-chi/chi/middleware#HeaderRouter\n+[LogEntry]: https://pkg.go.dev/github.com/go-chi/chi/middleware#LogEntry\n+[LogFormatter]: https://pkg.go.dev/github.com/go-chi/chi/middleware#LogFormatter\n+[LoggerInterface]: https://pkg.go.dev/github.com/go-chi/chi/middleware#LoggerInterface\n+[ThrottleOpts]: https://pkg.go.dev/github.com/go-chi/chi/middleware#ThrottleOpts\n+[WrapResponseWriter]: https://pkg.go.dev/github.com/go-chi/chi/middleware#WrapResponseWriter\n+\n+### Extra middlewares & packages\n+\n+Please see https://github.com/go-chi for additional packages.\n+\n+--------------------------------------------------------------------------------------------------------------------\n+| package                                            | description                                                 |\n+|:---------------------------------------------------|:-------------------------------------------------------------\n+| [cors](https://github.com/go-chi/cors)             | Cross-origin resource sharing (CORS)                        |\n+| [docgen](https://github.com/go-chi/docgen)         | Print chi.Router routes at runtime                          |\n+| [jwtauth](https://github.com/go-chi/jwtauth)       | JWT authentication                                          |\n+| [hostrouter](https://github.com/go-chi/hostrouter) | Domain/host based request routing                           |\n+| [httplog](https://github.com/go-chi/httplog)       | Small but powerful structured HTTP request logging          |\n+| [httprate](https://github.com/go-chi/httprate)     | HTTP request rate limiter                                   |\n+| [httptracer](https://github.com/go-chi/httptracer) | HTTP request performance tracing library                    |\n+| [httpvcr](https://github.com/go-chi/httpvcr)       | Write deterministic tests for external sources              |\n+| [stampede](https://github.com/go-chi/stampede)     | HTTP request coalescer                                      |\n+--------------------------------------------------------------------------------------------------------------------\n+\n+\n+## context?\n+\n+`context` is a tiny pkg that provides simple interface to signal context across call stacks\n+and goroutines. It was originally written by [Sameer Ajmani](https://github.com/Sajmani)\n+and is available in stdlib since go1.7.\n+\n+Learn more at https://blog.golang.org/context\n+\n+and..\n+* Docs: https://golang.org/pkg/context\n+* Source: https://github.com/golang/go/tree/master/src/context\n+\n+\n+## Benchmarks\n+\n+The benchmark suite: https://github.com/pkieltyka/go-http-routing-benchmark\n+\n+Results as of Nov 29, 2020 with Go 1.15.5 on Linux AMD 3950x\n+\n+```shell\n+BenchmarkChi_Param          \t3075895\t        384 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_Param5         \t2116603\t        566 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_Param20        \t 964117\t       1227 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_ParamWrite     \t2863413\t        420 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_GithubStatic   \t3045488\t        395 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_GithubParam    \t2204115\t        540 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_GithubAll      \t  10000\t     113811 ns/op\t    81203 B/op    406 allocs/op\n+BenchmarkChi_GPlusStatic    \t3337485\t        359 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_GPlusParam     \t2825853\t        423 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_GPlus2Params   \t2471697\t        483 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_GPlusAll       \t 194220\t       5950 ns/op\t     5200 B/op     26 allocs/op\n+BenchmarkChi_ParseStatic    \t3365324\t        356 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_ParseParam     \t2976614\t        404 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_Parse2Params   \t2638084\t        439 ns/op\t      400 B/op      2 allocs/op\n+BenchmarkChi_ParseAll       \t 109567\t      11295 ns/op\t    10400 B/op     52 allocs/op\n+BenchmarkChi_StaticAll      \t  16846\t      71308 ns/op\t    62802 B/op    314 allocs/op\n+```\n+\n+Comparison with other routers: https://gist.github.com/pkieltyka/123032f12052520aaccab752bd3e78cc\n+\n+NOTE: the allocs in the benchmark above are from the calls to http.Request's\n+`WithContext(context.Context)` method that clones the http.Request, sets the `Context()`\n+on the duplicated (alloc'd) request and returns it the new request object. This is just\n+how setting context on a request in Go works.\n+\n+\n+## Go module support & note on chi's versioning\n+\n+* Go.mod support means we reset our versioning starting from v1.5 (see [CHANGELOG](https://github.com/go-chi/chi/blob/master/CHANGELOG.md#v150-2020-11-12---now-with-gomod-support))\n+* All older tags are preserved, are backwards-compatible and will \"just work\" as they\n+* Brand new systems can run `go get -u github.com/go-chi/chi` as normal, or `go get -u github.com/go-chi/chi@latest`\n+to install chi, which will install v1.x+ built with go.mod support, starting from v1.5.0.\n+* For existing projects who want to upgrade to the latest go.mod version, run: `go get -u github.com/go-chi/chi@v1.5.0`,\n+which will get you on the go.mod version line (as Go's mod cache may still remember v4.x).\n+* Any breaking changes will bump a \"minor\" release and backwards-compatible improvements/fixes will bump a \"tiny\" release.\n+\n+\n+## Credits\n+\n+* Carl Jackson for https://github.com/zenazn/goji\n+  * Parts of chi's thinking comes from goji, and chi's middleware package\n+    sources from goji.\n+* Armon Dadgar for https://github.com/armon/go-radix\n+* Contributions: [@VojtechVitek](https://github.com/VojtechVitek)\n+\n+We'll be more than happy to see [your contributions](./CONTRIBUTING.md)!\n+\n+\n+## Beyond REST\n+\n+chi is just a http router that lets you decompose request handling into many smaller layers.\n+Many companies use chi to write REST services for their public APIs. But, REST is just a convention\n+for managing state via HTTP, and there's a lot of other pieces required to write a complete client-server\n+system or network of microservices.\n+\n+Looking beyond REST, I also recommend some newer works in the field:\n+* [webrpc](https://github.com/webrpc/webrpc) - Web-focused RPC client+server framework with code-gen\n+* [gRPC](https://github.com/grpc/grpc-go) - Google's RPC framework via protobufs\n+* [graphql](https://github.com/99designs/gqlgen) - Declarative query language\n+* [NATS](https://nats.io) - lightweight pub-sub\n+\n+\n+## License\n+\n+Copyright (c) 2015-present [Peter Kieltyka](https://github.com/pkieltyka)\n+\n+Licensed under [MIT License](./LICENSE)\n+\n+[GoDoc]: https://pkg.go.dev/github.com/go-chi/chi?tab=versions\n+[GoDoc Widget]: https://godoc.org/github.com/go-chi/chi?status.svg\n+[Travis]: https://travis-ci.org/go-chi/chi\n+[Travis Widget]: https://travis-ci.org/go-chi/chi.svg?branch=master"
    },
    {
      "sha": "a2278414f4082cc4e4f460b3623a44810e6187b6",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/chain.go",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/chain.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/chain.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/chain.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,49 @@\n+package chi\n+\n+import \"net/http\"\n+\n+// Chain returns a Middlewares type from a slice of middleware handlers.\n+func Chain(middlewares ...func(http.Handler) http.Handler) Middlewares {\n+\treturn Middlewares(middlewares)\n+}\n+\n+// Handler builds and returns a http.Handler from the chain of middlewares,\n+// with `h http.Handler` as the final handler.\n+func (mws Middlewares) Handler(h http.Handler) http.Handler {\n+\treturn &ChainHandler{h, chain(mws, h), mws}\n+}\n+\n+// HandlerFunc builds and returns a http.Handler from the chain of middlewares,\n+// with `h http.Handler` as the final handler.\n+func (mws Middlewares) HandlerFunc(h http.HandlerFunc) http.Handler {\n+\treturn &ChainHandler{h, chain(mws, h), mws}\n+}\n+\n+// ChainHandler is a http.Handler with support for handler composition and\n+// execution.\n+type ChainHandler struct {\n+\tEndpoint    http.Handler\n+\tchain       http.Handler\n+\tMiddlewares Middlewares\n+}\n+\n+func (c *ChainHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n+\tc.chain.ServeHTTP(w, r)\n+}\n+\n+// chain builds a http.Handler composed of an inline middleware stack and endpoint\n+// handler in the order they are passed.\n+func chain(middlewares []func(http.Handler) http.Handler, endpoint http.Handler) http.Handler {\n+\t// Return ahead of time if there aren't any middlewares for the chain\n+\tif len(middlewares) == 0 {\n+\t\treturn endpoint\n+\t}\n+\n+\t// Wrap the end handler with the middleware chain\n+\th := middlewares[len(middlewares)-1](endpoint)\n+\tfor i := len(middlewares) - 2; i >= 0; i-- {\n+\t\th = middlewares[i](h)\n+\t}\n+\n+\treturn h\n+}"
    },
    {
      "sha": "d2e5354dc11717bd95283f96bae7dd70222ad71d",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/chi.go",
      "status": "added",
      "additions": 134,
      "deletions": 0,
      "changes": 134,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/chi.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/chi.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/chi.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,134 @@\n+//\n+// Package chi is a small, idiomatic and composable router for building HTTP services.\n+//\n+// chi requires Go 1.10 or newer.\n+//\n+// Example:\n+//  package main\n+//\n+//  import (\n+//  \t\"net/http\"\n+//\n+//  \t\"github.com/go-chi/chi/v5\"\n+//  \t\"github.com/go-chi/chi/v5/middleware\"\n+//  )\n+//\n+//  func main() {\n+//  \tr := chi.NewRouter()\n+//  \tr.Use(middleware.Logger)\n+//  \tr.Use(middleware.Recoverer)\n+//\n+//  \tr.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n+//  \t\tw.Write([]byte(\"root.\"))\n+//  \t})\n+//\n+//  \thttp.ListenAndServe(\":3333\", r)\n+//  }\n+//\n+// See github.com/go-chi/chi/_examples/ for more in-depth examples.\n+//\n+// URL patterns allow for easy matching of path components in HTTP\n+// requests. The matching components can then be accessed using\n+// chi.URLParam(). All patterns must begin with a slash.\n+//\n+// A simple named placeholder {name} matches any sequence of characters\n+// up to the next / or the end of the URL. Trailing slashes on paths must\n+// be handled explicitly.\n+//\n+// A placeholder with a name followed by a colon allows a regular\n+// expression match, for example {number:\\\\d+}. The regular expression\n+// syntax is Go's normal regexp RE2 syntax, except that regular expressions\n+// including { or } are not supported, and / will never be\n+// matched. An anonymous regexp pattern is allowed, using an empty string\n+// before the colon in the placeholder, such as {:\\\\d+}\n+//\n+// The special placeholder of asterisk matches the rest of the requested\n+// URL. Any trailing characters in the pattern are ignored. This is the only\n+// placeholder which will match / characters.\n+//\n+// Examples:\n+//  \"/user/{name}\" matches \"/user/jsmith\" but not \"/user/jsmith/info\" or \"/user/jsmith/\"\n+//  \"/user/{name}/info\" matches \"/user/jsmith/info\"\n+//  \"/page/*\" matches \"/page/intro/latest\"\n+//  \"/page/*/index\" also matches \"/page/intro/latest\"\n+//  \"/date/{yyyy:\\\\d\\\\d\\\\d\\\\d}/{mm:\\\\d\\\\d}/{dd:\\\\d\\\\d}\" matches \"/date/2017/04/01\"\n+//\n+package chi\n+\n+import \"net/http\"\n+\n+// NewRouter returns a new Mux object that implements the Router interface.\n+func NewRouter() *Mux {\n+\treturn NewMux()\n+}\n+\n+// Router consisting of the core routing methods used by chi's Mux,\n+// using only the standard net/http.\n+type Router interface {\n+\thttp.Handler\n+\tRoutes\n+\n+\t// Use appends one or more middlewares onto the Router stack.\n+\tUse(middlewares ...func(http.Handler) http.Handler)\n+\n+\t// With adds inline middlewares for an endpoint handler.\n+\tWith(middlewares ...func(http.Handler) http.Handler) Router\n+\n+\t// Group adds a new inline-Router along the current routing\n+\t// path, with a fresh middleware stack for the inline-Router.\n+\tGroup(fn func(r Router)) Router\n+\n+\t// Route mounts a sub-Router along a `pattern`` string.\n+\tRoute(pattern string, fn func(r Router)) Router\n+\n+\t// Mount attaches another http.Handler along ./pattern/*\n+\tMount(pattern string, h http.Handler)\n+\n+\t// Handle and HandleFunc adds routes for `pattern` that matches\n+\t// all HTTP methods.\n+\tHandle(pattern string, h http.Handler)\n+\tHandleFunc(pattern string, h http.HandlerFunc)\n+\n+\t// Method and MethodFunc adds routes for `pattern` that matches\n+\t// the `method` HTTP method.\n+\tMethod(method, pattern string, h http.Handler)\n+\tMethodFunc(method, pattern string, h http.HandlerFunc)\n+\n+\t// HTTP-method routing along `pattern`\n+\tConnect(pattern string, h http.HandlerFunc)\n+\tDelete(pattern string, h http.HandlerFunc)\n+\tGet(pattern string, h http.HandlerFunc)\n+\tHead(pattern string, h http.HandlerFunc)\n+\tOptions(pattern string, h http.HandlerFunc)\n+\tPatch(pattern string, h http.HandlerFunc)\n+\tPost(pattern string, h http.HandlerFunc)\n+\tPut(pattern string, h http.HandlerFunc)\n+\tTrace(pattern string, h http.HandlerFunc)\n+\n+\t// NotFound defines a handler to respond whenever a route could\n+\t// not be found.\n+\tNotFound(h http.HandlerFunc)\n+\n+\t// MethodNotAllowed defines a handler to respond whenever a method is\n+\t// not allowed.\n+\tMethodNotAllowed(h http.HandlerFunc)\n+}\n+\n+// Routes interface adds two methods for router traversal, which is also\n+// used by the `docgen` subpackage to generation documentation for Routers.\n+type Routes interface {\n+\t// Routes returns the routing tree in an easily traversable structure.\n+\tRoutes() []Route\n+\n+\t// Middlewares returns the list of middlewares in use by the router.\n+\tMiddlewares() Middlewares\n+\n+\t// Match searches the routing tree for a handler that matches\n+\t// the method/path - similar to routing a http request, but without\n+\t// executing the handler thereafter.\n+\tMatch(rctx *Context, method, path string) bool\n+}\n+\n+// Middlewares type is a slice of standard middleware handlers with methods\n+// to compose middleware chains and http.Handler's.\n+type Middlewares []func(http.Handler) http.Handler"
    },
    {
      "sha": "814c26301212064729bdb802b92bd2f8c4cd3adc",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/context.go",
      "status": "added",
      "additions": 157,
      "deletions": 0,
      "changes": 157,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/context.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/context.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/context.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,157 @@\n+package chi\n+\n+import (\n+\t\"context\"\n+\t\"net/http\"\n+\t\"strings\"\n+)\n+\n+// URLParam returns the url parameter from a http.Request object.\n+func URLParam(r *http.Request, key string) string {\n+\tif rctx := RouteContext(r.Context()); rctx != nil {\n+\t\treturn rctx.URLParam(key)\n+\t}\n+\treturn \"\"\n+}\n+\n+// URLParamFromCtx returns the url parameter from a http.Request Context.\n+func URLParamFromCtx(ctx context.Context, key string) string {\n+\tif rctx := RouteContext(ctx); rctx != nil {\n+\t\treturn rctx.URLParam(key)\n+\t}\n+\treturn \"\"\n+}\n+\n+// RouteContext returns chi's routing Context object from a\n+// http.Request Context.\n+func RouteContext(ctx context.Context) *Context {\n+\tval, _ := ctx.Value(RouteCtxKey).(*Context)\n+\treturn val\n+}\n+\n+// NewRouteContext returns a new routing Context object.\n+func NewRouteContext() *Context {\n+\treturn &Context{}\n+}\n+\n+var (\n+\t// RouteCtxKey is the context.Context key to store the request context.\n+\tRouteCtxKey = &contextKey{\"RouteContext\"}\n+)\n+\n+// Context is the default routing context set on the root node of a\n+// request context to track route patterns, URL parameters and\n+// an optional routing path.\n+type Context struct {\n+\tRoutes Routes\n+\n+\t// parentCtx is the parent of this one, for using Context as a\n+\t// context.Context directly. This is an optimization that saves\n+\t// 1 allocation.\n+\tparentCtx context.Context\n+\n+\t// Routing path/method override used during the route search.\n+\t// See Mux#routeHTTP method.\n+\tRoutePath   string\n+\tRouteMethod string\n+\n+\t// URLParams are the stack of routeParams captured during the\n+\t// routing lifecycle across a stack of sub-routers.\n+\tURLParams RouteParams\n+\n+\t// Route parameters matched for the current sub-router. It is\n+\t// intentionally unexported so it cant be tampered.\n+\trouteParams RouteParams\n+\n+\t// The endpoint routing pattern that matched the request URI path\n+\t// or `RoutePath` of the current sub-router. This value will update\n+\t// during the lifecycle of a request passing through a stack of\n+\t// sub-routers.\n+\troutePattern string\n+\n+\t// Routing pattern stack throughout the lifecycle of the request,\n+\t// across all connected routers. It is a record of all matching\n+\t// patterns across a stack of sub-routers.\n+\tRoutePatterns []string\n+\n+\t// methodNotAllowed hint\n+\tmethodNotAllowed bool\n+}\n+\n+// Reset a routing context to its initial state.\n+func (x *Context) Reset() {\n+\tx.Routes = nil\n+\tx.RoutePath = \"\"\n+\tx.RouteMethod = \"\"\n+\tx.RoutePatterns = x.RoutePatterns[:0]\n+\tx.URLParams.Keys = x.URLParams.Keys[:0]\n+\tx.URLParams.Values = x.URLParams.Values[:0]\n+\n+\tx.routePattern = \"\"\n+\tx.routeParams.Keys = x.routeParams.Keys[:0]\n+\tx.routeParams.Values = x.routeParams.Values[:0]\n+\tx.methodNotAllowed = false\n+\tx.parentCtx = nil\n+}\n+\n+// URLParam returns the corresponding URL parameter value from the request\n+// routing context.\n+func (x *Context) URLParam(key string) string {\n+\tfor k := len(x.URLParams.Keys) - 1; k >= 0; k-- {\n+\t\tif x.URLParams.Keys[k] == key {\n+\t\t\treturn x.URLParams.Values[k]\n+\t\t}\n+\t}\n+\treturn \"\"\n+}\n+\n+// RoutePattern builds the routing pattern string for the particular\n+// request, at the particular point during routing. This means, the value\n+// will change throughout the execution of a request in a router. That is\n+// why its advised to only use this value after calling the next handler.\n+//\n+// For example,\n+//\n+//   func Instrument(next http.Handler) http.Handler {\n+//     return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+//       next.ServeHTTP(w, r)\n+//       routePattern := chi.RouteContext(r.Context()).RoutePattern()\n+//       measure(w, r, routePattern)\n+//   \t })\n+//   }\n+func (x *Context) RoutePattern() string {\n+\troutePattern := strings.Join(x.RoutePatterns, \"\")\n+\treturn replaceWildcards(routePattern)\n+}\n+\n+// replaceWildcards takes a route pattern and recursively replaces all\n+// occurrences of \"/*/\" to \"/\".\n+func replaceWildcards(p string) string {\n+\tif strings.Contains(p, \"/*/\") {\n+\t\treturn replaceWildcards(strings.Replace(p, \"/*/\", \"/\", -1))\n+\t}\n+\n+\treturn p\n+}\n+\n+// RouteParams is a structure to track URL routing parameters efficiently.\n+type RouteParams struct {\n+\tKeys, Values []string\n+}\n+\n+// Add will append a URL parameter to the end of the route param\n+func (s *RouteParams) Add(key, value string) {\n+\ts.Keys = append(s.Keys, key)\n+\ts.Values = append(s.Values, value)\n+}\n+\n+// contextKey is a value for use with context.WithValue. It's used as\n+// a pointer so it fits in an interface{} without allocation. This technique\n+// for defining context keys was copied from Go 1.7's new use of context in net/http.\n+type contextKey struct {\n+\tname string\n+}\n+\n+func (k *contextKey) String() string {\n+\treturn \"chi context value \" + k.name\n+}"
    },
    {
      "sha": "c084c1d5ece78b8375785af4290cb6dd6ad08db6",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/go.mod",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/go.mod?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,3 @@\n+module github.com/go-chi/chi/v5\n+\n+go 1.14"
    },
    {
      "sha": "a546c9e9e8b60b6c63b05946b1a2cf429dad02bf",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/basic_auth.go",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/basic_auth.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/basic_auth.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/basic_auth.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,33 @@\n+package middleware\n+\n+import (\n+\t\"crypto/subtle\"\n+\t\"fmt\"\n+\t\"net/http\"\n+)\n+\n+// BasicAuth implements a simple middleware handler for adding basic http auth to a route.\n+func BasicAuth(realm string, creds map[string]string) func(next http.Handler) http.Handler {\n+\treturn func(next http.Handler) http.Handler {\n+\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tuser, pass, ok := r.BasicAuth()\n+\t\t\tif !ok {\n+\t\t\t\tbasicAuthFailed(w, realm)\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\tcredPass, credUserOk := creds[user]\n+\t\t\tif !credUserOk || subtle.ConstantTimeCompare([]byte(pass), []byte(credPass)) != 1 {\n+\t\t\t\tbasicAuthFailed(w, realm)\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\tnext.ServeHTTP(w, r)\n+\t\t})\n+\t}\n+}\n+\n+func basicAuthFailed(w http.ResponseWriter, realm string) {\n+\tw.Header().Add(\"WWW-Authenticate\", fmt.Sprintf(`Basic realm=\"%s\"`, realm))\n+\tw.WriteHeader(http.StatusUnauthorized)\n+}"
    },
    {
      "sha": "adeba4295180fa3bfb7a2c55f0c4258817606f60",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/clean_path.go",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/clean_path.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/clean_path.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/clean_path.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,28 @@\n+package middleware\n+\n+import (\n+\t\"net/http\"\n+\t\"path\"\n+\n+\t\"github.com/go-chi/chi/v5\"\n+)\n+\n+// CleanPath middleware will clean out double slash mistakes from a user's request path.\n+// For example, if a user requests /users//1 or //users////1 will both be treated as: /users/1\n+func CleanPath(next http.Handler) http.Handler {\n+\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\trctx := chi.RouteContext(r.Context())\n+\n+\t\troutePath := rctx.RoutePath\n+\t\tif routePath == \"\" {\n+\t\t\tif r.URL.RawPath != \"\" {\n+\t\t\t\troutePath = r.URL.RawPath\n+\t\t\t} else {\n+\t\t\t\troutePath = r.URL.Path\n+\t\t\t}\n+\t\t\trctx.RoutePath = path.Clean(routePath)\n+\t\t}\n+\n+\t\tnext.ServeHTTP(w, r)\n+\t})\n+}"
    },
    {
      "sha": "75b56fd17eda68efe72bc233e4ec265768f589be",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/compress.go",
      "status": "added",
      "additions": 399,
      "deletions": 0,
      "changes": 399,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/compress.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/compress.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/compress.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,399 @@\n+package middleware\n+\n+import (\n+\t\"bufio\"\n+\t\"compress/flate\"\n+\t\"compress/gzip\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"strings\"\n+\t\"sync\"\n+)\n+\n+var defaultCompressibleContentTypes = []string{\n+\t\"text/html\",\n+\t\"text/css\",\n+\t\"text/plain\",\n+\t\"text/javascript\",\n+\t\"application/javascript\",\n+\t\"application/x-javascript\",\n+\t\"application/json\",\n+\t\"application/atom+xml\",\n+\t\"application/rss+xml\",\n+\t\"image/svg+xml\",\n+}\n+\n+// Compress is a middleware that compresses response\n+// body of a given content types to a data format based\n+// on Accept-Encoding request header. It uses a given\n+// compression level.\n+//\n+// NOTE: make sure to set the Content-Type header on your response\n+// otherwise this middleware will not compress the response body. For ex, in\n+// your handler you should set w.Header().Set(\"Content-Type\", http.DetectContentType(yourBody))\n+// or set it manually.\n+//\n+// Passing a compression level of 5 is sensible value\n+func Compress(level int, types ...string) func(next http.Handler) http.Handler {\n+\tcompressor := NewCompressor(level, types...)\n+\treturn compressor.Handler\n+}\n+\n+// Compressor represents a set of encoding configurations.\n+type Compressor struct {\n+\t// The mapping of encoder names to encoder functions.\n+\tencoders map[string]EncoderFunc\n+\t// The mapping of pooled encoders to pools.\n+\tpooledEncoders map[string]*sync.Pool\n+\t// The set of content types allowed to be compressed.\n+\tallowedTypes     map[string]struct{}\n+\tallowedWildcards map[string]struct{}\n+\t// The list of encoders in order of decreasing precedence.\n+\tencodingPrecedence []string\n+\tlevel              int // The compression level.\n+}\n+\n+// NewCompressor creates a new Compressor that will handle encoding responses.\n+//\n+// The level should be one of the ones defined in the flate package.\n+// The types are the content types that are allowed to be compressed.\n+func NewCompressor(level int, types ...string) *Compressor {\n+\t// If types are provided, set those as the allowed types. If none are\n+\t// provided, use the default list.\n+\tallowedTypes := make(map[string]struct{})\n+\tallowedWildcards := make(map[string]struct{})\n+\tif len(types) > 0 {\n+\t\tfor _, t := range types {\n+\t\t\tif strings.Contains(strings.TrimSuffix(t, \"/*\"), \"*\") {\n+\t\t\t\tpanic(fmt.Sprintf(\"middleware/compress: Unsupported content-type wildcard pattern '%s'. Only '/*' supported\", t))\n+\t\t\t}\n+\t\t\tif strings.HasSuffix(t, \"/*\") {\n+\t\t\t\tallowedWildcards[strings.TrimSuffix(t, \"/*\")] = struct{}{}\n+\t\t\t} else {\n+\t\t\t\tallowedTypes[t] = struct{}{}\n+\t\t\t}\n+\t\t}\n+\t} else {\n+\t\tfor _, t := range defaultCompressibleContentTypes {\n+\t\t\tallowedTypes[t] = struct{}{}\n+\t\t}\n+\t}\n+\n+\tc := &Compressor{\n+\t\tlevel:            level,\n+\t\tencoders:         make(map[string]EncoderFunc),\n+\t\tpooledEncoders:   make(map[string]*sync.Pool),\n+\t\tallowedTypes:     allowedTypes,\n+\t\tallowedWildcards: allowedWildcards,\n+\t}\n+\n+\t// Set the default encoders.  The precedence order uses the reverse\n+\t// ordering that the encoders were added. This means adding new encoders\n+\t// will move them to the front of the order.\n+\t//\n+\t// TODO:\n+\t// lzma: Opera.\n+\t// sdch: Chrome, Android. Gzip output + dictionary header.\n+\t// br:   Brotli, see https://github.com/go-chi/chi/pull/326\n+\n+\t// HTTP 1.1 \"deflate\" (RFC 2616) stands for DEFLATE data (RFC 1951)\n+\t// wrapped with zlib (RFC 1950). The zlib wrapper uses Adler-32\n+\t// checksum compared to CRC-32 used in \"gzip\" and thus is faster.\n+\t//\n+\t// But.. some old browsers (MSIE, Safari 5.1) incorrectly expect\n+\t// raw DEFLATE data only, without the mentioned zlib wrapper.\n+\t// Because of this major confusion, most modern browsers try it\n+\t// both ways, first looking for zlib headers.\n+\t// Quote by Mark Adler: http://stackoverflow.com/a/9186091/385548\n+\t//\n+\t// The list of browsers having problems is quite big, see:\n+\t// http://zoompf.com/blog/2012/02/lose-the-wait-http-compression\n+\t// https://web.archive.org/web/20120321182910/http://www.vervestudios.co/projects/compression-tests/results\n+\t//\n+\t// That's why we prefer gzip over deflate. It's just more reliable\n+\t// and not significantly slower than gzip.\n+\tc.SetEncoder(\"deflate\", encoderDeflate)\n+\n+\t// TODO: Exception for old MSIE browsers that can't handle non-HTML?\n+\t// https://zoompf.com/blog/2012/02/lose-the-wait-http-compression\n+\tc.SetEncoder(\"gzip\", encoderGzip)\n+\n+\t// NOTE: Not implemented, intentionally:\n+\t// case \"compress\": // LZW. Deprecated.\n+\t// case \"bzip2\":    // Too slow on-the-fly.\n+\t// case \"zopfli\":   // Too slow on-the-fly.\n+\t// case \"xz\":       // Too slow on-the-fly.\n+\treturn c\n+}\n+\n+// SetEncoder can be used to set the implementation of a compression algorithm.\n+//\n+// The encoding should be a standardised identifier. See:\n+// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\n+//\n+// For example, add the Brotli algortithm:\n+//\n+//  import brotli_enc \"gopkg.in/kothar/brotli-go.v0/enc\"\n+//\n+//  compressor := middleware.NewCompressor(5, \"text/html\")\n+//  compressor.SetEncoder(\"br\", func(w http.ResponseWriter, level int) io.Writer {\n+//    params := brotli_enc.NewBrotliParams()\n+//    params.SetQuality(level)\n+//    return brotli_enc.NewBrotliWriter(params, w)\n+//  })\n+func (c *Compressor) SetEncoder(encoding string, fn EncoderFunc) {\n+\tencoding = strings.ToLower(encoding)\n+\tif encoding == \"\" {\n+\t\tpanic(\"the encoding can not be empty\")\n+\t}\n+\tif fn == nil {\n+\t\tpanic(\"attempted to set a nil encoder function\")\n+\t}\n+\n+\t// If we are adding a new encoder that is already registered, we have to\n+\t// clear that one out first.\n+\tif _, ok := c.pooledEncoders[encoding]; ok {\n+\t\tdelete(c.pooledEncoders, encoding)\n+\t}\n+\tif _, ok := c.encoders[encoding]; ok {\n+\t\tdelete(c.encoders, encoding)\n+\t}\n+\n+\t// If the encoder supports Resetting (IoReseterWriter), then it can be pooled.\n+\tencoder := fn(ioutil.Discard, c.level)\n+\tif encoder != nil {\n+\t\tif _, ok := encoder.(ioResetterWriter); ok {\n+\t\t\tpool := &sync.Pool{\n+\t\t\t\tNew: func() interface{} {\n+\t\t\t\t\treturn fn(ioutil.Discard, c.level)\n+\t\t\t\t},\n+\t\t\t}\n+\t\t\tc.pooledEncoders[encoding] = pool\n+\t\t}\n+\t}\n+\t// If the encoder is not in the pooledEncoders, add it to the normal encoders.\n+\tif _, ok := c.pooledEncoders[encoding]; !ok {\n+\t\tc.encoders[encoding] = fn\n+\t}\n+\n+\tfor i, v := range c.encodingPrecedence {\n+\t\tif v == encoding {\n+\t\t\tc.encodingPrecedence = append(c.encodingPrecedence[:i], c.encodingPrecedence[i+1:]...)\n+\t\t}\n+\t}\n+\n+\tc.encodingPrecedence = append([]string{encoding}, c.encodingPrecedence...)\n+}\n+\n+// Handler returns a new middleware that will compress the response based on the\n+// current Compressor.\n+func (c *Compressor) Handler(next http.Handler) http.Handler {\n+\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\tencoder, encoding, cleanup := c.selectEncoder(r.Header, w)\n+\n+\t\tcw := &compressResponseWriter{\n+\t\t\tResponseWriter:   w,\n+\t\t\tw:                w,\n+\t\t\tcontentTypes:     c.allowedTypes,\n+\t\t\tcontentWildcards: c.allowedWildcards,\n+\t\t\tencoding:         encoding,\n+\t\t\tcompressable:     false, // determined in post-handler\n+\t\t}\n+\t\tif encoder != nil {\n+\t\t\tcw.w = encoder\n+\t\t}\n+\t\t// Re-add the encoder to the pool if applicable.\n+\t\tdefer cleanup()\n+\t\tdefer cw.Close()\n+\n+\t\tnext.ServeHTTP(cw, r)\n+\t})\n+}\n+\n+// selectEncoder returns the encoder, the name of the encoder, and a closer function.\n+func (c *Compressor) selectEncoder(h http.Header, w io.Writer) (io.Writer, string, func()) {\n+\theader := h.Get(\"Accept-Encoding\")\n+\n+\t// Parse the names of all accepted algorithms from the header.\n+\taccepted := strings.Split(strings.ToLower(header), \",\")\n+\n+\t// Find supported encoder by accepted list by precedence\n+\tfor _, name := range c.encodingPrecedence {\n+\t\tif matchAcceptEncoding(accepted, name) {\n+\t\t\tif pool, ok := c.pooledEncoders[name]; ok {\n+\t\t\t\tencoder := pool.Get().(ioResetterWriter)\n+\t\t\t\tcleanup := func() {\n+\t\t\t\t\tpool.Put(encoder)\n+\t\t\t\t}\n+\t\t\t\tencoder.Reset(w)\n+\t\t\t\treturn encoder, name, cleanup\n+\n+\t\t\t}\n+\t\t\tif fn, ok := c.encoders[name]; ok {\n+\t\t\t\treturn fn(w, c.level), name, func() {}\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+\t// No encoder found to match the accepted encoding\n+\treturn nil, \"\", func() {}\n+}\n+\n+func matchAcceptEncoding(accepted []string, encoding string) bool {\n+\tfor _, v := range accepted {\n+\t\tif strings.Contains(v, encoding) {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n+// An EncoderFunc is a function that wraps the provided io.Writer with a\n+// streaming compression algorithm and returns it.\n+//\n+// In case of failure, the function should return nil.\n+type EncoderFunc func(w io.Writer, level int) io.Writer\n+\n+// Interface for types that allow resetting io.Writers.\n+type ioResetterWriter interface {\n+\tio.Writer\n+\tReset(w io.Writer)\n+}\n+\n+type compressResponseWriter struct {\n+\thttp.ResponseWriter\n+\n+\t// The streaming encoder writer to be used if there is one. Otherwise,\n+\t// this is just the normal writer.\n+\tw                io.Writer\n+\tcontentTypes     map[string]struct{}\n+\tcontentWildcards map[string]struct{}\n+\tencoding         string\n+\twroteHeader      bool\n+\tcompressable     bool\n+}\n+\n+func (cw *compressResponseWriter) isCompressable() bool {\n+\t// Parse the first part of the Content-Type response header.\n+\tcontentType := cw.Header().Get(\"Content-Type\")\n+\tif idx := strings.Index(contentType, \";\"); idx >= 0 {\n+\t\tcontentType = contentType[0:idx]\n+\t}\n+\n+\t// Is the content type compressable?\n+\tif _, ok := cw.contentTypes[contentType]; ok {\n+\t\treturn true\n+\t}\n+\tif idx := strings.Index(contentType, \"/\"); idx > 0 {\n+\t\tcontentType = contentType[0:idx]\n+\t\t_, ok := cw.contentWildcards[contentType]\n+\t\treturn ok\n+\t}\n+\treturn false\n+}\n+\n+func (cw *compressResponseWriter) WriteHeader(code int) {\n+\tif cw.wroteHeader {\n+\t\tcw.ResponseWriter.WriteHeader(code) // Allow multiple calls to propagate.\n+\t\treturn\n+\t}\n+\tcw.wroteHeader = true\n+\tdefer cw.ResponseWriter.WriteHeader(code)\n+\n+\t// Already compressed data?\n+\tif cw.Header().Get(\"Content-Encoding\") != \"\" {\n+\t\treturn\n+\t}\n+\n+\tif !cw.isCompressable() {\n+\t\tcw.compressable = false\n+\t\treturn\n+\t}\n+\n+\tif cw.encoding != \"\" {\n+\t\tcw.compressable = true\n+\t\tcw.Header().Set(\"Content-Encoding\", cw.encoding)\n+\t\tcw.Header().Set(\"Vary\", \"Accept-Encoding\")\n+\n+\t\t// The content-length after compression is unknown\n+\t\tcw.Header().Del(\"Content-Length\")\n+\t}\n+}\n+\n+func (cw *compressResponseWriter) Write(p []byte) (int, error) {\n+\tif !cw.wroteHeader {\n+\t\tcw.WriteHeader(http.StatusOK)\n+\t}\n+\n+\treturn cw.writer().Write(p)\n+}\n+\n+func (cw *compressResponseWriter) writer() io.Writer {\n+\tif cw.compressable {\n+\t\treturn cw.w\n+\t} else {\n+\t\treturn cw.ResponseWriter\n+\t}\n+}\n+\n+type compressFlusher interface {\n+\tFlush() error\n+}\n+\n+func (cw *compressResponseWriter) Flush() {\n+\tif f, ok := cw.writer().(http.Flusher); ok {\n+\t\tf.Flush()\n+\t}\n+\t// If the underlying writer has a compression flush signature,\n+\t// call this Flush() method instead\n+\tif f, ok := cw.writer().(compressFlusher); ok {\n+\t\tf.Flush()\n+\n+\t\t// Also flush the underlying response writer\n+\t\tif f, ok := cw.ResponseWriter.(http.Flusher); ok {\n+\t\t\tf.Flush()\n+\t\t}\n+\t}\n+}\n+\n+func (cw *compressResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {\n+\tif hj, ok := cw.writer().(http.Hijacker); ok {\n+\t\treturn hj.Hijack()\n+\t}\n+\treturn nil, nil, errors.New(\"chi/middleware: http.Hijacker is unavailable on the writer\")\n+}\n+\n+func (cw *compressResponseWriter) Push(target string, opts *http.PushOptions) error {\n+\tif ps, ok := cw.writer().(http.Pusher); ok {\n+\t\treturn ps.Push(target, opts)\n+\t}\n+\treturn errors.New(\"chi/middleware: http.Pusher is unavailable on the writer\")\n+}\n+\n+func (cw *compressResponseWriter) Close() error {\n+\tif c, ok := cw.writer().(io.WriteCloser); ok {\n+\t\treturn c.Close()\n+\t}\n+\treturn errors.New(\"chi/middleware: io.WriteCloser is unavailable on the writer\")\n+}\n+\n+func encoderGzip(w io.Writer, level int) io.Writer {\n+\tgw, err := gzip.NewWriterLevel(w, level)\n+\tif err != nil {\n+\t\treturn nil\n+\t}\n+\treturn gw\n+}\n+\n+func encoderDeflate(w io.Writer, level int) io.Writer {\n+\tdw, err := flate.NewWriter(w, level)\n+\tif err != nil {\n+\t\treturn nil\n+\t}\n+\treturn dw\n+}"
    },
    {
      "sha": "07b5ce6f66f3b1e16474c27f361d452b570a57c3",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/content_charset.go",
      "status": "added",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/content_charset.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/content_charset.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/content_charset.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,51 @@\n+package middleware\n+\n+import (\n+\t\"net/http\"\n+\t\"strings\"\n+)\n+\n+// ContentCharset generates a handler that writes a 415 Unsupported Media Type response if none of the charsets match.\n+// An empty charset will allow requests with no Content-Type header or no specified charset.\n+func ContentCharset(charsets ...string) func(next http.Handler) http.Handler {\n+\tfor i, c := range charsets {\n+\t\tcharsets[i] = strings.ToLower(c)\n+\t}\n+\n+\treturn func(next http.Handler) http.Handler {\n+\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tif !contentEncoding(r.Header.Get(\"Content-Type\"), charsets...) {\n+\t\t\t\tw.WriteHeader(http.StatusUnsupportedMediaType)\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\tnext.ServeHTTP(w, r)\n+\t\t})\n+\t}\n+}\n+\n+// Check the content encoding against a list of acceptable values.\n+func contentEncoding(ce string, charsets ...string) bool {\n+\t_, ce = split(strings.ToLower(ce), \";\")\n+\t_, ce = split(ce, \"charset=\")\n+\tce, _ = split(ce, \";\")\n+\tfor _, c := range charsets {\n+\t\tif ce == c {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\n+\treturn false\n+}\n+\n+// Split a string in two parts, cleaning any whitespace.\n+func split(str, sep string) (string, string) {\n+\tvar a, b string\n+\tvar parts = strings.SplitN(str, sep, 2)\n+\ta = strings.TrimSpace(parts[0])\n+\tif len(parts) == 2 {\n+\t\tb = strings.TrimSpace(parts[1])\n+\t}\n+\n+\treturn a, b\n+}"
    },
    {
      "sha": "e0b9ccc08aca14bb6469237fb49fc7daa2e61e61",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/content_encoding.go",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/content_encoding.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/content_encoding.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/content_encoding.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,34 @@\n+package middleware\n+\n+import (\n+\t\"net/http\"\n+\t\"strings\"\n+)\n+\n+// AllowContentEncoding enforces a whitelist of request Content-Encoding otherwise responds\n+// with a 415 Unsupported Media Type status.\n+func AllowContentEncoding(contentEncoding ...string) func(next http.Handler) http.Handler {\n+\tallowedEncodings := make(map[string]struct{}, len(contentEncoding))\n+\tfor _, encoding := range contentEncoding {\n+\t\tallowedEncodings[strings.TrimSpace(strings.ToLower(encoding))] = struct{}{}\n+\t}\n+\treturn func(next http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\trequestEncodings := r.Header[\"Content-Encoding\"]\n+\t\t\t// skip check for empty content body or no Content-Encoding\n+\t\t\tif r.ContentLength == 0 {\n+\t\t\t\tnext.ServeHTTP(w, r)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\t// All encodings in the request must be allowed\n+\t\t\tfor _, encoding := range requestEncodings {\n+\t\t\t\tif _, ok := allowedEncodings[strings.TrimSpace(strings.ToLower(encoding))]; !ok {\n+\t\t\t\t\tw.WriteHeader(http.StatusUnsupportedMediaType)\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tnext.ServeHTTP(w, r)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}"
    },
    {
      "sha": "023978fac0efc29d15ba9cb2f8914553948893cc",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/content_type.go",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/content_type.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/content_type.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/content_type.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,49 @@\n+package middleware\n+\n+import (\n+\t\"net/http\"\n+\t\"strings\"\n+)\n+\n+// SetHeader is a convenience handler to set a response header key/value\n+func SetHeader(key, value string) func(next http.Handler) http.Handler {\n+\treturn func(next http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tw.Header().Set(key, value)\n+\t\t\tnext.ServeHTTP(w, r)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}\n+\n+// AllowContentType enforces a whitelist of request Content-Types otherwise responds\n+// with a 415 Unsupported Media Type status.\n+func AllowContentType(contentTypes ...string) func(next http.Handler) http.Handler {\n+\tallowedContentTypes := make(map[string]struct{}, len(contentTypes))\n+\tfor _, ctype := range contentTypes {\n+\t\tallowedContentTypes[strings.TrimSpace(strings.ToLower(ctype))] = struct{}{}\n+\t}\n+\n+\treturn func(next http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tif r.ContentLength == 0 {\n+\t\t\t\t// skip check for empty content body\n+\t\t\t\tnext.ServeHTTP(w, r)\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\ts := strings.ToLower(strings.TrimSpace(r.Header.Get(\"Content-Type\")))\n+\t\t\tif i := strings.Index(s, \";\"); i > -1 {\n+\t\t\t\ts = s[0:i]\n+\t\t\t}\n+\n+\t\t\tif _, ok := allowedContentTypes[s]; ok {\n+\t\t\t\tnext.ServeHTTP(w, r)\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\tw.WriteHeader(http.StatusUnsupportedMediaType)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}"
    },
    {
      "sha": "d4606d8be6db20534136b1dcdafaae3b361c23a7",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/get_head.go",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/get_head.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/get_head.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/get_head.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,39 @@\n+package middleware\n+\n+import (\n+\t\"net/http\"\n+\n+\t\"github.com/go-chi/chi/v5\"\n+)\n+\n+// GetHead automatically route undefined HEAD requests to GET handlers.\n+func GetHead(next http.Handler) http.Handler {\n+\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\tif r.Method == \"HEAD\" {\n+\t\t\trctx := chi.RouteContext(r.Context())\n+\t\t\troutePath := rctx.RoutePath\n+\t\t\tif routePath == \"\" {\n+\t\t\t\tif r.URL.RawPath != \"\" {\n+\t\t\t\t\troutePath = r.URL.RawPath\n+\t\t\t\t} else {\n+\t\t\t\t\troutePath = r.URL.Path\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t// Temporary routing context to look-ahead before routing the request\n+\t\t\ttctx := chi.NewRouteContext()\n+\n+\t\t\t// Attempt to find a HEAD handler for the routing path, if not found, traverse\n+\t\t\t// the router as through its a GET route, but proceed with the request\n+\t\t\t// with the HEAD method.\n+\t\t\tif !rctx.Routes.Match(tctx, \"HEAD\", routePath) {\n+\t\t\t\trctx.RouteMethod = \"GET\"\n+\t\t\t\trctx.RoutePath = routePath\n+\t\t\t\tnext.ServeHTTP(w, r)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t}\n+\n+\t\tnext.ServeHTTP(w, r)\n+\t})\n+}"
    },
    {
      "sha": "fe822fb536cb8dbed50f3b66550ea1adda6fb136",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/heartbeat.go",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/heartbeat.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/heartbeat.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/heartbeat.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,26 @@\n+package middleware\n+\n+import (\n+\t\"net/http\"\n+\t\"strings\"\n+)\n+\n+// Heartbeat endpoint middleware useful to setting up a path like\n+// `/ping` that load balancers or uptime testing external services\n+// can make a request before hitting any routes. It's also convenient\n+// to place this above ACL middlewares as well.\n+func Heartbeat(endpoint string) func(http.Handler) http.Handler {\n+\tf := func(h http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tif r.Method == \"GET\" && strings.EqualFold(r.URL.Path, endpoint) {\n+\t\t\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n+\t\t\t\tw.WriteHeader(http.StatusOK)\n+\t\t\t\tw.Write([]byte(\".\"))\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\th.ServeHTTP(w, r)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+\treturn f\n+}"
    },
    {
      "sha": "66edc3dda8942fbb79e06eb4c4a2089531814326",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/logger.go",
      "status": "added",
      "additions": 174,
      "deletions": 0,
      "changes": 174,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/logger.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/logger.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/logger.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,174 @@\n+package middleware\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"runtime\"\n+\t\"time\"\n+)\n+\n+var (\n+\t// LogEntryCtxKey is the context.Context key to store the request log entry.\n+\tLogEntryCtxKey = &contextKey{\"LogEntry\"}\n+\n+\t// DefaultLogger is called by the Logger middleware handler to log each request.\n+\t// Its made a package-level variable so that it can be reconfigured for custom\n+\t// logging configurations.\n+\tDefaultLogger func(next http.Handler) http.Handler\n+)\n+\n+// Logger is a middleware that logs the start and end of each request, along\n+// with some useful data about what was requested, what the response status was,\n+// and how long it took to return. When standard output is a TTY, Logger will\n+// print in color, otherwise it will print in black and white. Logger prints a\n+// request ID if one is provided.\n+//\n+// Alternatively, look at https://github.com/goware/httplog for a more in-depth\n+// http logger with structured logging support.\n+//\n+// IMPORTANT NOTE: Logger should go before any other middleware that may change\n+// the response, such as `middleware.Recoverer`. Example:\n+//\n+// ```go\n+// r := chi.NewRouter()\n+// r.Use(middleware.Logger)        // <--<< Logger should come before Recoverer\n+// r.Use(middleware.Recoverer)\n+// r.Get(\"/\", handler)\n+// ```\n+func Logger(next http.Handler) http.Handler {\n+\treturn DefaultLogger(next)\n+}\n+\n+// RequestLogger returns a logger handler using a custom LogFormatter.\n+func RequestLogger(f LogFormatter) func(next http.Handler) http.Handler {\n+\treturn func(next http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tentry := f.NewLogEntry(r)\n+\t\t\tww := NewWrapResponseWriter(w, r.ProtoMajor)\n+\n+\t\t\tt1 := time.Now()\n+\t\t\tdefer func() {\n+\t\t\t\tentry.Write(ww.Status(), ww.BytesWritten(), ww.Header(), time.Since(t1), nil)\n+\t\t\t}()\n+\n+\t\t\tnext.ServeHTTP(ww, WithLogEntry(r, entry))\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}\n+\n+// LogFormatter initiates the beginning of a new LogEntry per request.\n+// See DefaultLogFormatter for an example implementation.\n+type LogFormatter interface {\n+\tNewLogEntry(r *http.Request) LogEntry\n+}\n+\n+// LogEntry records the final log when a request completes.\n+// See defaultLogEntry for an example implementation.\n+type LogEntry interface {\n+\tWrite(status, bytes int, header http.Header, elapsed time.Duration, extra interface{})\n+\tPanic(v interface{}, stack []byte)\n+}\n+\n+// GetLogEntry returns the in-context LogEntry for a request.\n+func GetLogEntry(r *http.Request) LogEntry {\n+\tentry, _ := r.Context().Value(LogEntryCtxKey).(LogEntry)\n+\treturn entry\n+}\n+\n+// WithLogEntry sets the in-context LogEntry for a request.\n+func WithLogEntry(r *http.Request, entry LogEntry) *http.Request {\n+\tr = r.WithContext(context.WithValue(r.Context(), LogEntryCtxKey, entry))\n+\treturn r\n+}\n+\n+// LoggerInterface accepts printing to stdlib logger or compatible logger.\n+type LoggerInterface interface {\n+\tPrint(v ...interface{})\n+}\n+\n+// DefaultLogFormatter is a simple logger that implements a LogFormatter.\n+type DefaultLogFormatter struct {\n+\tLogger  LoggerInterface\n+\tNoColor bool\n+}\n+\n+// NewLogEntry creates a new LogEntry for the request.\n+func (l *DefaultLogFormatter) NewLogEntry(r *http.Request) LogEntry {\n+\tuseColor := !l.NoColor\n+\tentry := &defaultLogEntry{\n+\t\tDefaultLogFormatter: l,\n+\t\trequest:             r,\n+\t\tbuf:                 &bytes.Buffer{},\n+\t\tuseColor:            useColor,\n+\t}\n+\n+\treqID := GetReqID(r.Context())\n+\tif reqID != \"\" {\n+\t\tcW(entry.buf, useColor, nYellow, \"[%s] \", reqID)\n+\t}\n+\tcW(entry.buf, useColor, nCyan, \"\\\"\")\n+\tcW(entry.buf, useColor, bMagenta, \"%s \", r.Method)\n+\n+\tscheme := \"http\"\n+\tif r.TLS != nil {\n+\t\tscheme = \"https\"\n+\t}\n+\tcW(entry.buf, useColor, nCyan, \"%s://%s%s %s\\\" \", scheme, r.Host, r.RequestURI, r.Proto)\n+\n+\tentry.buf.WriteString(\"from \")\n+\tentry.buf.WriteString(r.RemoteAddr)\n+\tentry.buf.WriteString(\" - \")\n+\n+\treturn entry\n+}\n+\n+type defaultLogEntry struct {\n+\t*DefaultLogFormatter\n+\trequest  *http.Request\n+\tbuf      *bytes.Buffer\n+\tuseColor bool\n+}\n+\n+func (l *defaultLogEntry) Write(status, bytes int, header http.Header, elapsed time.Duration, extra interface{}) {\n+\tswitch {\n+\tcase status < 200:\n+\t\tcW(l.buf, l.useColor, bBlue, \"%03d\", status)\n+\tcase status < 300:\n+\t\tcW(l.buf, l.useColor, bGreen, \"%03d\", status)\n+\tcase status < 400:\n+\t\tcW(l.buf, l.useColor, bCyan, \"%03d\", status)\n+\tcase status < 500:\n+\t\tcW(l.buf, l.useColor, bYellow, \"%03d\", status)\n+\tdefault:\n+\t\tcW(l.buf, l.useColor, bRed, \"%03d\", status)\n+\t}\n+\n+\tcW(l.buf, l.useColor, bBlue, \" %dB\", bytes)\n+\n+\tl.buf.WriteString(\" in \")\n+\tif elapsed < 500*time.Millisecond {\n+\t\tcW(l.buf, l.useColor, nGreen, \"%s\", elapsed)\n+\t} else if elapsed < 5*time.Second {\n+\t\tcW(l.buf, l.useColor, nYellow, \"%s\", elapsed)\n+\t} else {\n+\t\tcW(l.buf, l.useColor, nRed, \"%s\", elapsed)\n+\t}\n+\n+\tl.Logger.Print(l.buf.String())\n+}\n+\n+func (l *defaultLogEntry) Panic(v interface{}, stack []byte) {\n+\tPrintPrettyStack(v)\n+}\n+\n+func init() {\n+\tcolor := true\n+\tif runtime.GOOS == \"windows\" {\n+\t\tcolor = false\n+\t}\n+\tDefaultLogger = RequestLogger(&DefaultLogFormatter{Logger: log.New(os.Stdout, \"\", log.LstdFlags), NoColor: !color})\n+}"
    },
    {
      "sha": "cc371e00a82e84bfb38982796b736ca42fd9608d",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/middleware.go",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/middleware.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/middleware.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/middleware.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,23 @@\n+package middleware\n+\n+import \"net/http\"\n+\n+// New will create a new middleware handler from a http.Handler.\n+func New(h http.Handler) func(next http.Handler) http.Handler {\n+\treturn func(next http.Handler) http.Handler {\n+\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\t\th.ServeHTTP(w, r)\n+\t\t})\n+\t}\n+}\n+\n+// contextKey is a value for use with context.WithValue. It's used as\n+// a pointer so it fits in an interface{} without allocation. This technique\n+// for defining context keys was copied from Go 1.7's new use of context in net/http.\n+type contextKey struct {\n+\tname string\n+}\n+\n+func (k *contextKey) String() string {\n+\treturn \"chi/middleware context value \" + k.name\n+}"
    },
    {
      "sha": "2412829e1b94b87a9738f2d0bcd394a2e33d4783",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/nocache.go",
      "status": "added",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/nocache.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/nocache.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/nocache.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,58 @@\n+package middleware\n+\n+// Ported from Goji's middleware, source:\n+// https://github.com/zenazn/goji/tree/master/web/middleware\n+\n+import (\n+\t\"net/http\"\n+\t\"time\"\n+)\n+\n+// Unix epoch time\n+var epoch = time.Unix(0, 0).Format(time.RFC1123)\n+\n+// Taken from https://github.com/mytrile/nocache\n+var noCacheHeaders = map[string]string{\n+\t\"Expires\":         epoch,\n+\t\"Cache-Control\":   \"no-cache, no-store, no-transform, must-revalidate, private, max-age=0\",\n+\t\"Pragma\":          \"no-cache\",\n+\t\"X-Accel-Expires\": \"0\",\n+}\n+\n+var etagHeaders = []string{\n+\t\"ETag\",\n+\t\"If-Modified-Since\",\n+\t\"If-Match\",\n+\t\"If-None-Match\",\n+\t\"If-Range\",\n+\t\"If-Unmodified-Since\",\n+}\n+\n+// NoCache is a simple piece of middleware that sets a number of HTTP headers to prevent\n+// a router (or subrouter) from being cached by an upstream proxy and/or client.\n+//\n+// As per http://wiki.nginx.org/HttpProxyModule - NoCache sets:\n+//      Expires: Thu, 01 Jan 1970 00:00:00 UTC\n+//      Cache-Control: no-cache, private, max-age=0\n+//      X-Accel-Expires: 0\n+//      Pragma: no-cache (for HTTP/1.0 proxies/clients)\n+func NoCache(h http.Handler) http.Handler {\n+\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\n+\t\t// Delete any ETag headers that may have been set\n+\t\tfor _, v := range etagHeaders {\n+\t\t\tif r.Header.Get(v) != \"\" {\n+\t\t\t\tr.Header.Del(v)\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Set our NoCache headers\n+\t\tfor k, v := range noCacheHeaders {\n+\t\t\tw.Header().Set(k, v)\n+\t\t}\n+\n+\t\th.ServeHTTP(w, r)\n+\t}\n+\n+\treturn http.HandlerFunc(fn)\n+}"
    },
    {
      "sha": "18158e56dd6fba3951b0808c6016a7a024d662cc",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/profiler.go",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/profiler.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/profiler.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/profiler.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,55 @@\n+package middleware\n+\n+import (\n+\t\"expvar\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/http/pprof\"\n+\n+\t\"github.com/go-chi/chi/v5\"\n+)\n+\n+// Profiler is a convenient subrouter used for mounting net/http/pprof. ie.\n+//\n+//  func MyService() http.Handler {\n+//    r := chi.NewRouter()\n+//    // ..middlewares\n+//    r.Mount(\"/debug\", middleware.Profiler())\n+//    // ..routes\n+//    return r\n+//  }\n+func Profiler() http.Handler {\n+\tr := chi.NewRouter()\n+\tr.Use(NoCache)\n+\n+\tr.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n+\t\thttp.Redirect(w, r, r.RequestURI+\"/pprof/\", http.StatusMovedPermanently)\n+\t})\n+\tr.HandleFunc(\"/pprof\", func(w http.ResponseWriter, r *http.Request) {\n+\t\thttp.Redirect(w, r, r.RequestURI+\"/\", http.StatusMovedPermanently)\n+\t})\n+\n+\tr.HandleFunc(\"/pprof/*\", pprof.Index)\n+\tr.HandleFunc(\"/pprof/cmdline\", pprof.Cmdline)\n+\tr.HandleFunc(\"/pprof/profile\", pprof.Profile)\n+\tr.HandleFunc(\"/pprof/symbol\", pprof.Symbol)\n+\tr.HandleFunc(\"/pprof/trace\", pprof.Trace)\n+\tr.HandleFunc(\"/vars\", expVars)\n+\n+\treturn r\n+}\n+\n+// Replicated from expvar.go as not public.\n+func expVars(w http.ResponseWriter, r *http.Request) {\n+\tfirst := true\n+\tw.Header().Set(\"Content-Type\", \"application/json\")\n+\tfmt.Fprintf(w, \"{\\n\")\n+\texpvar.Do(func(kv expvar.KeyValue) {\n+\t\tif !first {\n+\t\t\tfmt.Fprintf(w, \",\\n\")\n+\t\t}\n+\t\tfirst = false\n+\t\tfmt.Fprintf(w, \"%q: %s\", kv.Key, kv.Value)\n+\t})\n+\tfmt.Fprintf(w, \"\\n}\\n\")\n+}"
    },
    {
      "sha": "72db6ca9f51c4e6babd09d83cc88beb43452c426",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/realip.go",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/realip.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/realip.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/realip.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,54 @@\n+package middleware\n+\n+// Ported from Goji's middleware, source:\n+// https://github.com/zenazn/goji/tree/master/web/middleware\n+\n+import (\n+\t\"net/http\"\n+\t\"strings\"\n+)\n+\n+var xForwardedFor = http.CanonicalHeaderKey(\"X-Forwarded-For\")\n+var xRealIP = http.CanonicalHeaderKey(\"X-Real-IP\")\n+\n+// RealIP is a middleware that sets a http.Request's RemoteAddr to the results\n+// of parsing either the X-Forwarded-For header or the X-Real-IP header (in that\n+// order).\n+//\n+// This middleware should be inserted fairly early in the middleware stack to\n+// ensure that subsequent layers (e.g., request loggers) which examine the\n+// RemoteAddr will see the intended value.\n+//\n+// You should only use this middleware if you can trust the headers passed to\n+// you (in particular, the two headers this middleware uses), for example\n+// because you have placed a reverse proxy like HAProxy or nginx in front of\n+// chi. If your reverse proxies are configured to pass along arbitrary header\n+// values from the client, or if you use this middleware without a reverse\n+// proxy, malicious clients will be able to make you very sad (or, depending on\n+// how you're using RemoteAddr, vulnerable to an attack of some sort).\n+func RealIP(h http.Handler) http.Handler {\n+\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\tif rip := realIP(r); rip != \"\" {\n+\t\t\tr.RemoteAddr = rip\n+\t\t}\n+\t\th.ServeHTTP(w, r)\n+\t}\n+\n+\treturn http.HandlerFunc(fn)\n+}\n+\n+func realIP(r *http.Request) string {\n+\tvar ip string\n+\n+\tif xrip := r.Header.Get(xRealIP); xrip != \"\" {\n+\t\tip = xrip\n+\t} else if xff := r.Header.Get(xForwardedFor); xff != \"\" {\n+\t\ti := strings.Index(xff, \", \")\n+\t\tif i == -1 {\n+\t\t\ti = len(xff)\n+\t\t}\n+\t\tip = xff[:i]\n+\t}\n+\n+\treturn ip\n+}"
    },
    {
      "sha": "785b18c52bace3743eb6ebc64eb90d038489352c",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/recoverer.go",
      "status": "added",
      "additions": 192,
      "deletions": 0,
      "changes": 192,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/recoverer.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/recoverer.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/recoverer.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,192 @@\n+package middleware\n+\n+// The original work was derived from Goji's middleware, source:\n+// https://github.com/zenazn/goji/tree/master/web/middleware\n+\n+import (\n+\t\"bytes\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"runtime/debug\"\n+\t\"strings\"\n+)\n+\n+// Recoverer is a middleware that recovers from panics, logs the panic (and a\n+// backtrace), and returns a HTTP 500 (Internal Server Error) status if\n+// possible. Recoverer prints a request ID if one is provided.\n+//\n+// Alternatively, look at https://github.com/pressly/lg middleware pkgs.\n+func Recoverer(next http.Handler) http.Handler {\n+\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\tdefer func() {\n+\t\t\tif rvr := recover(); rvr != nil && rvr != http.ErrAbortHandler {\n+\n+\t\t\t\tlogEntry := GetLogEntry(r)\n+\t\t\t\tif logEntry != nil {\n+\t\t\t\t\tlogEntry.Panic(rvr, debug.Stack())\n+\t\t\t\t} else {\n+\t\t\t\t\tPrintPrettyStack(rvr)\n+\t\t\t\t}\n+\n+\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n+\t\t\t}\n+\t\t}()\n+\n+\t\tnext.ServeHTTP(w, r)\n+\t}\n+\n+\treturn http.HandlerFunc(fn)\n+}\n+\n+func PrintPrettyStack(rvr interface{}) {\n+\tdebugStack := debug.Stack()\n+\ts := prettyStack{}\n+\tout, err := s.parse(debugStack, rvr)\n+\tif err == nil {\n+\t\tos.Stderr.Write(out)\n+\t} else {\n+\t\t// print stdlib output as a fallback\n+\t\tos.Stderr.Write(debugStack)\n+\t}\n+}\n+\n+type prettyStack struct {\n+}\n+\n+func (s prettyStack) parse(debugStack []byte, rvr interface{}) ([]byte, error) {\n+\tvar err error\n+\tuseColor := true\n+\tbuf := &bytes.Buffer{}\n+\n+\tcW(buf, false, bRed, \"\\n\")\n+\tcW(buf, useColor, bCyan, \" panic: \")\n+\tcW(buf, useColor, bBlue, \"%v\", rvr)\n+\tcW(buf, false, bWhite, \"\\n \\n\")\n+\n+\t// process debug stack info\n+\tstack := strings.Split(string(debugStack), \"\\n\")\n+\tlines := []string{}\n+\n+\t// locate panic line, as we may have nested panics\n+\tfor i := len(stack) - 1; i > 0; i-- {\n+\t\tlines = append(lines, stack[i])\n+\t\tif strings.HasPrefix(stack[i], \"panic(0x\") {\n+\t\t\tlines = lines[0 : len(lines)-2] // remove boilerplate\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\n+\t// reverse\n+\tfor i := len(lines)/2 - 1; i >= 0; i-- {\n+\t\topp := len(lines) - 1 - i\n+\t\tlines[i], lines[opp] = lines[opp], lines[i]\n+\t}\n+\n+\t// decorate\n+\tfor i, line := range lines {\n+\t\tlines[i], err = s.decorateLine(line, useColor, i)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\n+\tfor _, l := range lines {\n+\t\tfmt.Fprintf(buf, \"%s\", l)\n+\t}\n+\treturn buf.Bytes(), nil\n+}\n+\n+func (s prettyStack) decorateLine(line string, useColor bool, num int) (string, error) {\n+\tline = strings.TrimSpace(line)\n+\tif strings.HasPrefix(line, \"\\t\") || strings.Contains(line, \".go:\") {\n+\t\treturn s.decorateSourceLine(line, useColor, num)\n+\t} else if strings.HasSuffix(line, \")\") {\n+\t\treturn s.decorateFuncCallLine(line, useColor, num)\n+\t} else {\n+\t\tif strings.HasPrefix(line, \"\\t\") {\n+\t\t\treturn strings.Replace(line, \"\\t\", \"      \", 1), nil\n+\t\t} else {\n+\t\t\treturn fmt.Sprintf(\"    %s\\n\", line), nil\n+\t\t}\n+\t}\n+}\n+\n+func (s prettyStack) decorateFuncCallLine(line string, useColor bool, num int) (string, error) {\n+\tidx := strings.LastIndex(line, \"(\")\n+\tif idx < 0 {\n+\t\treturn \"\", errors.New(\"not a func call line\")\n+\t}\n+\n+\tbuf := &bytes.Buffer{}\n+\tpkg := line[0:idx]\n+\t// addr := line[idx:]\n+\tmethod := \"\"\n+\n+\tidx = strings.LastIndex(pkg, string(os.PathSeparator))\n+\tif idx < 0 {\n+\t\tidx = strings.Index(pkg, \".\")\n+\t\tmethod = pkg[idx:]\n+\t\tpkg = pkg[0:idx]\n+\t} else {\n+\t\tmethod = pkg[idx+1:]\n+\t\tpkg = pkg[0 : idx+1]\n+\t\tidx = strings.Index(method, \".\")\n+\t\tpkg += method[0:idx]\n+\t\tmethod = method[idx:]\n+\t}\n+\tpkgColor := nYellow\n+\tmethodColor := bGreen\n+\n+\tif num == 0 {\n+\t\tcW(buf, useColor, bRed, \" -> \")\n+\t\tpkgColor = bMagenta\n+\t\tmethodColor = bRed\n+\t} else {\n+\t\tcW(buf, useColor, bWhite, \"    \")\n+\t}\n+\tcW(buf, useColor, pkgColor, \"%s\", pkg)\n+\tcW(buf, useColor, methodColor, \"%s\\n\", method)\n+\t// cW(buf, useColor, nBlack, \"%s\", addr)\n+\treturn buf.String(), nil\n+}\n+\n+func (s prettyStack) decorateSourceLine(line string, useColor bool, num int) (string, error) {\n+\tidx := strings.LastIndex(line, \".go:\")\n+\tif idx < 0 {\n+\t\treturn \"\", errors.New(\"not a source line\")\n+\t}\n+\n+\tbuf := &bytes.Buffer{}\n+\tpath := line[0 : idx+3]\n+\tlineno := line[idx+3:]\n+\n+\tidx = strings.LastIndex(path, string(os.PathSeparator))\n+\tdir := path[0 : idx+1]\n+\tfile := path[idx+1:]\n+\n+\tidx = strings.Index(lineno, \" \")\n+\tif idx > 0 {\n+\t\tlineno = lineno[0:idx]\n+\t}\n+\tfileColor := bCyan\n+\tlineColor := bGreen\n+\n+\tif num == 1 {\n+\t\tcW(buf, useColor, bRed, \" ->   \")\n+\t\tfileColor = bRed\n+\t\tlineColor = bMagenta\n+\t} else {\n+\t\tcW(buf, false, bWhite, \"      \")\n+\t}\n+\tcW(buf, useColor, bWhite, \"%s\", dir)\n+\tcW(buf, useColor, fileColor, \"%s\", file)\n+\tcW(buf, useColor, lineColor, \"%s\", lineno)\n+\tif num == 1 {\n+\t\tcW(buf, false, bWhite, \"\\n\")\n+\t}\n+\tcW(buf, false, bWhite, \"\\n\")\n+\n+\treturn buf.String(), nil\n+}"
    },
    {
      "sha": "4903ecc2144e186a74a25a3a4552cf9a74098ed6",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/request_id.go",
      "status": "added",
      "additions": 96,
      "deletions": 0,
      "changes": 96,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/request_id.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/request_id.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/request_id.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,96 @@\n+package middleware\n+\n+// Ported from Goji's middleware, source:\n+// https://github.com/zenazn/goji/tree/master/web/middleware\n+\n+import (\n+\t\"context\"\n+\t\"crypto/rand\"\n+\t\"encoding/base64\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"sync/atomic\"\n+)\n+\n+// Key to use when setting the request ID.\n+type ctxKeyRequestID int\n+\n+// RequestIDKey is the key that holds the unique request ID in a request context.\n+const RequestIDKey ctxKeyRequestID = 0\n+\n+// RequestIDHeader is the name of the HTTP Header which contains the request id.\n+// Exported so that it can be changed by developers\n+var RequestIDHeader = \"X-Request-Id\"\n+\n+var prefix string\n+var reqid uint64\n+\n+// A quick note on the statistics here: we're trying to calculate the chance that\n+// two randomly generated base62 prefixes will collide. We use the formula from\n+// http://en.wikipedia.org/wiki/Birthday_problem\n+//\n+// P[m, n] \\approx 1 - e^{-m^2/2n}\n+//\n+// We ballpark an upper bound for $m$ by imagining (for whatever reason) a server\n+// that restarts every second over 10 years, for $m = 86400 * 365 * 10 = 315360000$\n+//\n+// For a $k$ character base-62 identifier, we have $n(k) = 62^k$\n+//\n+// Plugging this in, we find $P[m, n(10)] \\approx 5.75%$, which is good enough for\n+// our purposes, and is surely more than anyone would ever need in practice -- a\n+// process that is rebooted a handful of times a day for a hundred years has less\n+// than a millionth of a percent chance of generating two colliding IDs.\n+\n+func init() {\n+\thostname, err := os.Hostname()\n+\tif hostname == \"\" || err != nil {\n+\t\thostname = \"localhost\"\n+\t}\n+\tvar buf [12]byte\n+\tvar b64 string\n+\tfor len(b64) < 10 {\n+\t\trand.Read(buf[:])\n+\t\tb64 = base64.StdEncoding.EncodeToString(buf[:])\n+\t\tb64 = strings.NewReplacer(\"+\", \"\", \"/\", \"\").Replace(b64)\n+\t}\n+\n+\tprefix = fmt.Sprintf(\"%s/%s\", hostname, b64[0:10])\n+}\n+\n+// RequestID is a middleware that injects a request ID into the context of each\n+// request. A request ID is a string of the form \"host.example.com/random-0001\",\n+// where \"random\" is a base62 random string that uniquely identifies this go\n+// process, and where the last number is an atomically incremented request\n+// counter.\n+func RequestID(next http.Handler) http.Handler {\n+\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\tctx := r.Context()\n+\t\trequestID := r.Header.Get(RequestIDHeader)\n+\t\tif requestID == \"\" {\n+\t\t\tmyid := atomic.AddUint64(&reqid, 1)\n+\t\t\trequestID = fmt.Sprintf(\"%s-%06d\", prefix, myid)\n+\t\t}\n+\t\tctx = context.WithValue(ctx, RequestIDKey, requestID)\n+\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n+\t}\n+\treturn http.HandlerFunc(fn)\n+}\n+\n+// GetReqID returns a request ID from the given context if one is present.\n+// Returns the empty string if a request ID cannot be found.\n+func GetReqID(ctx context.Context) string {\n+\tif ctx == nil {\n+\t\treturn \"\"\n+\t}\n+\tif reqID, ok := ctx.Value(RequestIDKey).(string); ok {\n+\t\treturn reqID\n+\t}\n+\treturn \"\"\n+}\n+\n+// NextRequestID generates the next request ID in the sequence.\n+func NextRequestID() uint64 {\n+\treturn atomic.AddUint64(&reqid, 1)\n+}"
    },
    {
      "sha": "ea914a1d3cdc48a74e65d43646c1c4bc4903c813",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/route_headers.go",
      "status": "added",
      "additions": 160,
      "deletions": 0,
      "changes": 160,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/route_headers.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/route_headers.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/route_headers.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,160 @@\n+package middleware\n+\n+import (\n+\t\"net/http\"\n+\t\"strings\"\n+)\n+\n+// RouteHeaders is a neat little header-based router that allows you to direct\n+// the flow of a request through a middleware stack based on a request header.\n+//\n+// For example, lets say you'd like to setup multiple routers depending on the\n+// request Host header, you could then do something as so:\n+//\n+// r := chi.NewRouter()\n+// rSubdomain := chi.NewRouter()\n+//\n+// r.Use(middleware.RouteHeaders().\n+//   Route(\"Host\", \"example.com\", middleware.New(r)).\n+//   Route(\"Host\", \"*.example.com\", middleware.New(rSubdomain)).\n+//   Handler)\n+//\n+// r.Get(\"/\", h)\n+// rSubdomain.Get(\"/\", h2)\n+//\n+//\n+// Another example, imagine you want to setup multiple CORS handlers, where for\n+// your origin servers you allow authorized requests, but for third-party public\n+// requests, authorization is disabled.\n+//\n+// r := chi.NewRouter()\n+//\n+// r.Use(middleware.RouteHeaders().\n+//   Route(\"Origin\", \"https://app.skyweaver.net\", cors.Handler(cors.Options{\n+// \t   AllowedOrigins:   []string{\"https://api.skyweaver.net\"},\n+// \t   AllowedMethods:   []string{\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"},\n+// \t   AllowedHeaders:   []string{\"Accept\", \"Authorization\", \"Content-Type\"},\n+// \t   AllowCredentials: true, // <----------<<< allow credentials\n+//   })).\n+//   Route(\"Origin\", \"*\", cors.Handler(cors.Options{\n+// \t   AllowedOrigins:   []string{\"*\"},\n+// \t   AllowedMethods:   []string{\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"},\n+// \t   AllowedHeaders:   []string{\"Accept\", \"Content-Type\"},\n+// \t   AllowCredentials: false, // <----------<<< do not allow credentials\n+//   })).\n+//   Handler)\n+//\n+func RouteHeaders() HeaderRouter {\n+\treturn HeaderRouter{}\n+}\n+\n+type HeaderRouter map[string][]HeaderRoute\n+\n+func (hr HeaderRouter) Route(header, match string, middlewareHandler func(next http.Handler) http.Handler) HeaderRouter {\n+\theader = strings.ToLower(header)\n+\tk := hr[header]\n+\tif k == nil {\n+\t\thr[header] = []HeaderRoute{}\n+\t}\n+\thr[header] = append(hr[header], HeaderRoute{MatchOne: NewPattern(match), Middleware: middlewareHandler})\n+\treturn hr\n+}\n+\n+func (hr HeaderRouter) RouteAny(header string, match []string, middlewareHandler func(next http.Handler) http.Handler) HeaderRouter {\n+\theader = strings.ToLower(header)\n+\tk := hr[header]\n+\tif k == nil {\n+\t\thr[header] = []HeaderRoute{}\n+\t}\n+\tpatterns := []Pattern{}\n+\tfor _, m := range match {\n+\t\tpatterns = append(patterns, NewPattern(m))\n+\t}\n+\thr[header] = append(hr[header], HeaderRoute{MatchAny: patterns, Middleware: middlewareHandler})\n+\treturn hr\n+}\n+\n+func (hr HeaderRouter) RouteDefault(handler func(next http.Handler) http.Handler) HeaderRouter {\n+\thr[\"*\"] = []HeaderRoute{{Middleware: handler}}\n+\treturn hr\n+}\n+\n+func (hr HeaderRouter) Handler(next http.Handler) http.Handler {\n+\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\tif len(hr) == 0 {\n+\t\t\t// skip if no routes set\n+\t\t\tnext.ServeHTTP(w, r)\n+\t\t}\n+\n+\t\t// find first matching header route, and continue\n+\t\tfor header, matchers := range hr {\n+\t\t\theaderValue := r.Header.Get(header)\n+\t\t\tif headerValue == \"\" {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\theaderValue = strings.ToLower(headerValue)\n+\t\t\tfor _, matcher := range matchers {\n+\t\t\t\tif matcher.IsMatch(headerValue) {\n+\t\t\t\t\tmatcher.Middleware(next).ServeHTTP(w, r)\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\t// if no match, check for \"*\" default route\n+\t\tmatcher, ok := hr[\"*\"]\n+\t\tif !ok || matcher[0].Middleware == nil {\n+\t\t\tnext.ServeHTTP(w, r)\n+\t\t\treturn\n+\t\t}\n+\t\tmatcher[0].Middleware(next).ServeHTTP(w, r)\n+\t})\n+}\n+\n+type HeaderRoute struct {\n+\tMiddleware func(next http.Handler) http.Handler\n+\tMatchOne   Pattern\n+\tMatchAny   []Pattern\n+}\n+\n+func (r HeaderRoute) IsMatch(value string) bool {\n+\tif len(r.MatchAny) > 0 {\n+\t\tfor _, m := range r.MatchAny {\n+\t\t\tif m.Match(value) {\n+\t\t\t\treturn true\n+\t\t\t}\n+\t\t}\n+\t} else if r.MatchOne.Match(value) {\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+type Pattern struct {\n+\tprefix   string\n+\tsuffix   string\n+\twildcard bool\n+}\n+\n+func NewPattern(value string) Pattern {\n+\tp := Pattern{}\n+\tif i := strings.IndexByte(value, '*'); i >= 0 {\n+\t\tp.wildcard = true\n+\t\tp.prefix = value[0:i]\n+\t\tp.suffix = value[i+1:]\n+\t} else {\n+\t\tp.prefix = value\n+\t}\n+\treturn p\n+}\n+\n+func (p Pattern) Match(v string) bool {\n+\tif !p.wildcard {\n+\t\tif p.prefix == v {\n+\t\t\treturn true\n+\t\t} else {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn len(v) >= len(p.prefix+p.suffix) && strings.HasPrefix(v, p.prefix) && strings.HasSuffix(v, p.suffix)\n+}"
    },
    {
      "sha": "ce8ebfccea10e0a51fc462521b729e71ed2afa3a",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/strip.go",
      "status": "added",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/strip.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/strip.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/strip.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,62 @@\n+package middleware\n+\n+import (\n+\t\"fmt\"\n+\t\"net/http\"\n+\n+\t\"github.com/go-chi/chi/v5\"\n+)\n+\n+// StripSlashes is a middleware that will match request paths with a trailing\n+// slash, strip it from the path and continue routing through the mux, if a route\n+// matches, then it will serve the handler.\n+func StripSlashes(next http.Handler) http.Handler {\n+\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\tvar path string\n+\t\trctx := chi.RouteContext(r.Context())\n+\t\tif rctx != nil && rctx.RoutePath != \"\" {\n+\t\t\tpath = rctx.RoutePath\n+\t\t} else {\n+\t\t\tpath = r.URL.Path\n+\t\t}\n+\t\tif len(path) > 1 && path[len(path)-1] == '/' {\n+\t\t\tnewPath := path[:len(path)-1]\n+\t\t\tif rctx == nil {\n+\t\t\t\tr.URL.Path = newPath\n+\t\t\t} else {\n+\t\t\t\trctx.RoutePath = newPath\n+\t\t\t}\n+\t\t}\n+\t\tnext.ServeHTTP(w, r)\n+\t}\n+\treturn http.HandlerFunc(fn)\n+}\n+\n+// RedirectSlashes is a middleware that will match request paths with a trailing\n+// slash and redirect to the same path, less the trailing slash.\n+//\n+// NOTE: RedirectSlashes middleware is *incompatible* with http.FileServer,\n+// see https://github.com/go-chi/chi/issues/343\n+func RedirectSlashes(next http.Handler) http.Handler {\n+\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\tvar path string\n+\t\trctx := chi.RouteContext(r.Context())\n+\t\tif rctx != nil && rctx.RoutePath != \"\" {\n+\t\t\tpath = rctx.RoutePath\n+\t\t} else {\n+\t\t\tpath = r.URL.Path\n+\t\t}\n+\t\tif len(path) > 1 && path[len(path)-1] == '/' {\n+\t\t\tif r.URL.RawQuery != \"\" {\n+\t\t\t\tpath = fmt.Sprintf(\"%s?%s\", path[:len(path)-1], r.URL.RawQuery)\n+\t\t\t} else {\n+\t\t\t\tpath = path[:len(path)-1]\n+\t\t\t}\n+\t\t\tredirectURL := fmt.Sprintf(\"//%s%s\", r.Host, path)\n+\t\t\thttp.Redirect(w, r, redirectURL, 301)\n+\t\t\treturn\n+\t\t}\n+\t\tnext.ServeHTTP(w, r)\n+\t}\n+\treturn http.HandlerFunc(fn)\n+}"
    },
    {
      "sha": "5ead7b9243fd9804ef549d5e20b79291f34c5b93",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/terminal.go",
      "status": "added",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/terminal.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/terminal.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/terminal.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,63 @@\n+package middleware\n+\n+// Ported from Goji's middleware, source:\n+// https://github.com/zenazn/goji/tree/master/web/middleware\n+\n+import (\n+\t\"fmt\"\n+\t\"io\"\n+\t\"os\"\n+)\n+\n+var (\n+\t// Normal colors\n+\tnBlack   = []byte{'\\033', '[', '3', '0', 'm'}\n+\tnRed     = []byte{'\\033', '[', '3', '1', 'm'}\n+\tnGreen   = []byte{'\\033', '[', '3', '2', 'm'}\n+\tnYellow  = []byte{'\\033', '[', '3', '3', 'm'}\n+\tnBlue    = []byte{'\\033', '[', '3', '4', 'm'}\n+\tnMagenta = []byte{'\\033', '[', '3', '5', 'm'}\n+\tnCyan    = []byte{'\\033', '[', '3', '6', 'm'}\n+\tnWhite   = []byte{'\\033', '[', '3', '7', 'm'}\n+\t// Bright colors\n+\tbBlack   = []byte{'\\033', '[', '3', '0', ';', '1', 'm'}\n+\tbRed     = []byte{'\\033', '[', '3', '1', ';', '1', 'm'}\n+\tbGreen   = []byte{'\\033', '[', '3', '2', ';', '1', 'm'}\n+\tbYellow  = []byte{'\\033', '[', '3', '3', ';', '1', 'm'}\n+\tbBlue    = []byte{'\\033', '[', '3', '4', ';', '1', 'm'}\n+\tbMagenta = []byte{'\\033', '[', '3', '5', ';', '1', 'm'}\n+\tbCyan    = []byte{'\\033', '[', '3', '6', ';', '1', 'm'}\n+\tbWhite   = []byte{'\\033', '[', '3', '7', ';', '1', 'm'}\n+\n+\treset = []byte{'\\033', '[', '0', 'm'}\n+)\n+\n+var IsTTY bool\n+\n+func init() {\n+\t// This is sort of cheating: if stdout is a character device, we assume\n+\t// that means it's a TTY. Unfortunately, there are many non-TTY\n+\t// character devices, but fortunately stdout is rarely set to any of\n+\t// them.\n+\t//\n+\t// We could solve this properly by pulling in a dependency on\n+\t// code.google.com/p/go.crypto/ssh/terminal, for instance, but as a\n+\t// heuristic for whether to print in color or in black-and-white, I'd\n+\t// really rather not.\n+\tfi, err := os.Stdout.Stat()\n+\tif err == nil {\n+\t\tm := os.ModeDevice | os.ModeCharDevice\n+\t\tIsTTY = fi.Mode()&m == m\n+\t}\n+}\n+\n+// colorWrite\n+func cW(w io.Writer, useColor bool, color []byte, s string, args ...interface{}) {\n+\tif IsTTY && useColor {\n+\t\tw.Write(color)\n+\t}\n+\tfmt.Fprintf(w, s, args...)\n+\tif IsTTY && useColor {\n+\t\tw.Write(reset)\n+\t}\n+}"
    },
    {
      "sha": "8dcb9440bcb5b182353d31149e98a70a15b4e014",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/throttle.go",
      "status": "added",
      "additions": 132,
      "deletions": 0,
      "changes": 132,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/throttle.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/throttle.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/throttle.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,132 @@\n+package middleware\n+\n+import (\n+\t\"net/http\"\n+\t\"strconv\"\n+\t\"time\"\n+)\n+\n+const (\n+\terrCapacityExceeded = \"Server capacity exceeded.\"\n+\terrTimedOut         = \"Timed out while waiting for a pending request to complete.\"\n+\terrContextCanceled  = \"Context was canceled.\"\n+)\n+\n+var (\n+\tdefaultBacklogTimeout = time.Second * 60\n+)\n+\n+// ThrottleOpts represents a set of throttling options.\n+type ThrottleOpts struct {\n+\tRetryAfterFn   func(ctxDone bool) time.Duration\n+\tLimit          int\n+\tBacklogLimit   int\n+\tBacklogTimeout time.Duration\n+}\n+\n+// Throttle is a middleware that limits number of currently processed requests\n+// at a time across all users. Note: Throttle is not a rate-limiter per user,\n+// instead it just puts a ceiling on the number of currentl in-flight requests\n+// being processed from the point from where the Throttle middleware is mounted.\n+func Throttle(limit int) func(http.Handler) http.Handler {\n+\treturn ThrottleWithOpts(ThrottleOpts{Limit: limit, BacklogTimeout: defaultBacklogTimeout})\n+}\n+\n+// ThrottleBacklog is a middleware that limits number of currently processed\n+// requests at a time and provides a backlog for holding a finite number of\n+// pending requests.\n+func ThrottleBacklog(limit, backlogLimit int, backlogTimeout time.Duration) func(http.Handler) http.Handler {\n+\treturn ThrottleWithOpts(ThrottleOpts{Limit: limit, BacklogLimit: backlogLimit, BacklogTimeout: backlogTimeout})\n+}\n+\n+// ThrottleWithOpts is a middleware that limits number of currently processed requests using passed ThrottleOpts.\n+func ThrottleWithOpts(opts ThrottleOpts) func(http.Handler) http.Handler {\n+\tif opts.Limit < 1 {\n+\t\tpanic(\"chi/middleware: Throttle expects limit > 0\")\n+\t}\n+\n+\tif opts.BacklogLimit < 0 {\n+\t\tpanic(\"chi/middleware: Throttle expects backlogLimit to be positive\")\n+\t}\n+\n+\tt := throttler{\n+\t\ttokens:         make(chan token, opts.Limit),\n+\t\tbacklogTokens:  make(chan token, opts.Limit+opts.BacklogLimit),\n+\t\tbacklogTimeout: opts.BacklogTimeout,\n+\t\tretryAfterFn:   opts.RetryAfterFn,\n+\t}\n+\n+\t// Filling tokens.\n+\tfor i := 0; i < opts.Limit+opts.BacklogLimit; i++ {\n+\t\tif i < opts.Limit {\n+\t\t\tt.tokens <- token{}\n+\t\t}\n+\t\tt.backlogTokens <- token{}\n+\t}\n+\n+\treturn func(next http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tctx := r.Context()\n+\n+\t\t\tselect {\n+\n+\t\t\tcase <-ctx.Done():\n+\t\t\t\tt.setRetryAfterHeaderIfNeeded(w, true)\n+\t\t\t\thttp.Error(w, errContextCanceled, http.StatusTooManyRequests)\n+\t\t\t\treturn\n+\n+\t\t\tcase btok := <-t.backlogTokens:\n+\t\t\t\ttimer := time.NewTimer(t.backlogTimeout)\n+\n+\t\t\t\tdefer func() {\n+\t\t\t\t\tt.backlogTokens <- btok\n+\t\t\t\t}()\n+\n+\t\t\t\tselect {\n+\t\t\t\tcase <-timer.C:\n+\t\t\t\t\tt.setRetryAfterHeaderIfNeeded(w, false)\n+\t\t\t\t\thttp.Error(w, errTimedOut, http.StatusTooManyRequests)\n+\t\t\t\t\treturn\n+\t\t\t\tcase <-ctx.Done():\n+\t\t\t\t\ttimer.Stop()\n+\t\t\t\t\tt.setRetryAfterHeaderIfNeeded(w, true)\n+\t\t\t\t\thttp.Error(w, errContextCanceled, http.StatusTooManyRequests)\n+\t\t\t\t\treturn\n+\t\t\t\tcase tok := <-t.tokens:\n+\t\t\t\t\tdefer func() {\n+\t\t\t\t\t\ttimer.Stop()\n+\t\t\t\t\t\tt.tokens <- tok\n+\t\t\t\t\t}()\n+\t\t\t\t\tnext.ServeHTTP(w, r)\n+\t\t\t\t}\n+\t\t\t\treturn\n+\n+\t\t\tdefault:\n+\t\t\t\tt.setRetryAfterHeaderIfNeeded(w, false)\n+\t\t\t\thttp.Error(w, errCapacityExceeded, http.StatusTooManyRequests)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}\n+\n+// token represents a request that is being processed.\n+type token struct{}\n+\n+// throttler limits number of currently processed requests at a time.\n+type throttler struct {\n+\ttokens         chan token\n+\tbacklogTokens  chan token\n+\tretryAfterFn   func(ctxDone bool) time.Duration\n+\tbacklogTimeout time.Duration\n+}\n+\n+// setRetryAfterHeaderIfNeeded sets Retry-After HTTP header if corresponding retryAfterFn option of throttler is initialized.\n+func (t throttler) setRetryAfterHeaderIfNeeded(w http.ResponseWriter, ctxDone bool) {\n+\tif t.retryAfterFn == nil {\n+\t\treturn\n+\t}\n+\tw.Header().Set(\"Retry-After\", strconv.Itoa(int(t.retryAfterFn(ctxDone).Seconds())))\n+}"
    },
    {
      "sha": "8e373536cf01ec5428015e0f1a7b891d7b458d80",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/timeout.go",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/timeout.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/timeout.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/timeout.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,49 @@\n+package middleware\n+\n+import (\n+\t\"context\"\n+\t\"net/http\"\n+\t\"time\"\n+)\n+\n+// Timeout is a middleware that cancels ctx after a given timeout and return\n+// a 504 Gateway Timeout error to the client.\n+//\n+// It's required that you select the ctx.Done() channel to check for the signal\n+// if the context has reached its deadline and return, otherwise the timeout\n+// signal will be just ignored.\n+//\n+// ie. a route/handler may look like:\n+//\n+//  r.Get(\"/long\", func(w http.ResponseWriter, r *http.Request) {\n+// \t ctx := r.Context()\n+// \t processTime := time.Duration(rand.Intn(4)+1) * time.Second\n+//\n+// \t select {\n+// \t case <-ctx.Done():\n+// \t \treturn\n+//\n+// \t case <-time.After(processTime):\n+// \t \t // The above channel simulates some hard work.\n+// \t }\n+//\n+// \t w.Write([]byte(\"done\"))\n+//  })\n+//\n+func Timeout(timeout time.Duration) func(next http.Handler) http.Handler {\n+\treturn func(next http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tctx, cancel := context.WithTimeout(r.Context(), timeout)\n+\t\t\tdefer func() {\n+\t\t\t\tcancel()\n+\t\t\t\tif ctx.Err() == context.DeadlineExceeded {\n+\t\t\t\t\tw.WriteHeader(http.StatusGatewayTimeout)\n+\t\t\t\t}\n+\t\t\t}()\n+\n+\t\t\tr = r.WithContext(ctx)\n+\t\t\tnext.ServeHTTP(w, r)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}"
    },
    {
      "sha": "10d7134dcac5a2c25ba4a18b9356306ffc23671f",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/url_format.go",
      "status": "added",
      "additions": 72,
      "deletions": 0,
      "changes": 72,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/url_format.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/url_format.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/url_format.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,72 @@\n+package middleware\n+\n+import (\n+\t\"context\"\n+\t\"net/http\"\n+\t\"strings\"\n+\n+\t\"github.com/go-chi/chi/v5\"\n+)\n+\n+var (\n+\t// URLFormatCtxKey is the context.Context key to store the URL format data\n+\t// for a request.\n+\tURLFormatCtxKey = &contextKey{\"URLFormat\"}\n+)\n+\n+// URLFormat is a middleware that parses the url extension from a request path and stores it\n+// on the context as a string under the key `middleware.URLFormatCtxKey`. The middleware will\n+// trim the suffix from the routing path and continue routing.\n+//\n+// Routers should not include a url parameter for the suffix when using this middleware.\n+//\n+// Sample usage.. for url paths: `/articles/1`, `/articles/1.json` and `/articles/1.xml`\n+//\n+//  func routes() http.Handler {\n+//    r := chi.NewRouter()\n+//    r.Use(middleware.URLFormat)\n+//\n+//    r.Get(\"/articles/{id}\", ListArticles)\n+//\n+//    return r\n+//  }\n+//\n+//  func ListArticles(w http.ResponseWriter, r *http.Request) {\n+// \t  urlFormat, _ := r.Context().Value(middleware.URLFormatCtxKey).(string)\n+//\n+// \t  switch urlFormat {\n+// \t  case \"json\":\n+// \t  \trender.JSON(w, r, articles)\n+// \t  case \"xml:\"\n+// \t  \trender.XML(w, r, articles)\n+// \t  default:\n+// \t  \trender.JSON(w, r, articles)\n+// \t  }\n+// }\n+//\n+func URLFormat(next http.Handler) http.Handler {\n+\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\tctx := r.Context()\n+\n+\t\tvar format string\n+\t\tpath := r.URL.Path\n+\n+\t\tif strings.Index(path, \".\") > 0 {\n+\t\t\tbase := strings.LastIndex(path, \"/\")\n+\t\t\tidx := strings.LastIndex(path[base:], \".\")\n+\n+\t\t\tif idx > 0 {\n+\t\t\t\tidx += base\n+\t\t\t\tformat = path[idx+1:]\n+\n+\t\t\t\trctx := chi.RouteContext(r.Context())\n+\t\t\t\trctx.RoutePath = path[:idx]\n+\t\t\t}\n+\t\t}\n+\n+\t\tr = r.WithContext(context.WithValue(ctx, URLFormatCtxKey, format))\n+\n+\t\tnext.ServeHTTP(w, r)\n+\t}\n+\treturn http.HandlerFunc(fn)\n+}"
    },
    {
      "sha": "a9dfd4345df7e06d46a6825da3bffc2eb0f5d849",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/value.go",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/value.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/value.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/value.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,17 @@\n+package middleware\n+\n+import (\n+\t\"context\"\n+\t\"net/http\"\n+)\n+\n+// WithValue is a middleware that sets a given key/value in a context chain.\n+func WithValue(key, val interface{}) func(next http.Handler) http.Handler {\n+\treturn func(next http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tr = r.WithContext(context.WithValue(r.Context(), key, val))\n+\t\t\tnext.ServeHTTP(w, r)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}"
    },
    {
      "sha": "588887b855b668b11954845c36b8a6fd262bc07e",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/wrap_writer.go",
      "status": "added",
      "additions": 165,
      "deletions": 0,
      "changes": 165,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/wrap_writer.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/middleware/wrap_writer.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/middleware/wrap_writer.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,165 @@\n+package middleware\n+\n+// The original work was derived from Goji's middleware, source:\n+// https://github.com/zenazn/goji/tree/master/web/middleware\n+\n+import (\n+\t\"bufio\"\n+\t\"io\"\n+\t\"net\"\n+\t\"net/http\"\n+)\n+\n+// NewWrapResponseWriter wraps an http.ResponseWriter, returning a proxy that allows you to\n+// hook into various parts of the response process.\n+func NewWrapResponseWriter(w http.ResponseWriter, protoMajor int) WrapResponseWriter {\n+\t_, fl := w.(http.Flusher)\n+\n+\tbw := basicWriter{ResponseWriter: w}\n+\n+\tif protoMajor == 2 {\n+\t\t_, ps := w.(http.Pusher)\n+\t\tif fl || ps {\n+\t\t\treturn &http2FancyWriter{bw}\n+\t\t}\n+\t} else {\n+\t\t_, hj := w.(http.Hijacker)\n+\t\t_, rf := w.(io.ReaderFrom)\n+\t\tif fl || hj || rf {\n+\t\t\treturn &httpFancyWriter{bw}\n+\t\t}\n+\t}\n+\n+\treturn &bw\n+}\n+\n+// WrapResponseWriter is a proxy around an http.ResponseWriter that allows you to hook\n+// into various parts of the response process.\n+type WrapResponseWriter interface {\n+\thttp.ResponseWriter\n+\t// Status returns the HTTP status of the request, or 0 if one has not\n+\t// yet been sent.\n+\tStatus() int\n+\t// BytesWritten returns the total number of bytes sent to the client.\n+\tBytesWritten() int\n+\t// Tee causes the response body to be written to the given io.Writer in\n+\t// addition to proxying the writes through. Only one io.Writer can be\n+\t// tee'd to at once: setting a second one will overwrite the first.\n+\t// Writes will be sent to the proxy before being written to this\n+\t// io.Writer. It is illegal for the tee'd writer to be modified\n+\t// concurrently with writes.\n+\tTee(io.Writer)\n+\t// Unwrap returns the original proxied target.\n+\tUnwrap() http.ResponseWriter\n+}\n+\n+// basicWriter wraps a http.ResponseWriter that implements the minimal\n+// http.ResponseWriter interface.\n+type basicWriter struct {\n+\thttp.ResponseWriter\n+\ttee         io.Writer\n+\tcode        int\n+\tbytes       int\n+\twroteHeader bool\n+}\n+\n+func (b *basicWriter) WriteHeader(code int) {\n+\tif !b.wroteHeader {\n+\t\tb.code = code\n+\t\tb.wroteHeader = true\n+\t\tb.ResponseWriter.WriteHeader(code)\n+\t}\n+}\n+\n+func (b *basicWriter) Write(buf []byte) (int, error) {\n+\tb.maybeWriteHeader()\n+\tn, err := b.ResponseWriter.Write(buf)\n+\tif b.tee != nil {\n+\t\t_, err2 := b.tee.Write(buf[:n])\n+\t\t// Prefer errors generated by the proxied writer.\n+\t\tif err == nil {\n+\t\t\terr = err2\n+\t\t}\n+\t}\n+\tb.bytes += n\n+\treturn n, err\n+}\n+\n+func (b *basicWriter) maybeWriteHeader() {\n+\tif !b.wroteHeader {\n+\t\tb.WriteHeader(http.StatusOK)\n+\t}\n+}\n+\n+func (b *basicWriter) Status() int {\n+\treturn b.code\n+}\n+\n+func (b *basicWriter) BytesWritten() int {\n+\treturn b.bytes\n+}\n+\n+func (b *basicWriter) Tee(w io.Writer) {\n+\tb.tee = w\n+}\n+\n+func (b *basicWriter) Unwrap() http.ResponseWriter {\n+\treturn b.ResponseWriter\n+}\n+\n+// httpFancyWriter is a HTTP writer that additionally satisfies\n+// http.Flusher, http.Hijacker, and io.ReaderFrom. It exists for the common case\n+// of wrapping the http.ResponseWriter that package http gives you, in order to\n+// make the proxied object support the full method set of the proxied object.\n+type httpFancyWriter struct {\n+\tbasicWriter\n+}\n+\n+func (f *httpFancyWriter) Flush() {\n+\tf.wroteHeader = true\n+\tfl := f.basicWriter.ResponseWriter.(http.Flusher)\n+\tfl.Flush()\n+}\n+\n+func (f *httpFancyWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {\n+\thj := f.basicWriter.ResponseWriter.(http.Hijacker)\n+\treturn hj.Hijack()\n+}\n+\n+func (f *httpFancyWriter) ReadFrom(r io.Reader) (int64, error) {\n+\tif f.basicWriter.tee != nil {\n+\t\tn, err := io.Copy(&f.basicWriter, r)\n+\t\tf.basicWriter.bytes += int(n)\n+\t\treturn n, err\n+\t}\n+\trf := f.basicWriter.ResponseWriter.(io.ReaderFrom)\n+\tf.basicWriter.maybeWriteHeader()\n+\tn, err := rf.ReadFrom(r)\n+\tf.basicWriter.bytes += int(n)\n+\treturn n, err\n+}\n+\n+var _ http.Flusher = &httpFancyWriter{}\n+var _ http.Hijacker = &httpFancyWriter{}\n+var _ io.ReaderFrom = &httpFancyWriter{}\n+\n+// http2FancyWriter is a HTTP2 writer that additionally satisfies\n+// http.Flusher, and io.ReaderFrom. It exists for the common case\n+// of wrapping the http.ResponseWriter that package http gives you, in order to\n+// make the proxied object support the full method set of the proxied object.\n+type http2FancyWriter struct {\n+\tbasicWriter\n+}\n+\n+func (f *http2FancyWriter) Flush() {\n+\tf.wroteHeader = true\n+\tfl := f.basicWriter.ResponseWriter.(http.Flusher)\n+\tfl.Flush()\n+}\n+\n+func (f *http2FancyWriter) Push(target string, opts *http.PushOptions) error {\n+\treturn f.basicWriter.ResponseWriter.(http.Pusher).Push(target, opts)\n+}\n+\n+var _ http.Flusher = &http2FancyWriter{}\n+var _ http.Pusher = &http2FancyWriter{}"
    },
    {
      "sha": "fff6a3c5e3cd1e66e7f5384e3268b80f48e096a1",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/mux.go",
      "status": "added",
      "additions": 485,
      "deletions": 0,
      "changes": 485,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/mux.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/mux.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/mux.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,485 @@\n+package chi\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"strings\"\n+\t\"sync\"\n+)\n+\n+var _ Router = &Mux{}\n+\n+// Mux is a simple HTTP route multiplexer that parses a request path,\n+// records any URL params, and executes an end handler. It implements\n+// the http.Handler interface and is friendly with the standard library.\n+//\n+// Mux is designed to be fast, minimal and offer a powerful API for building\n+// modular and composable HTTP services with a large set of handlers. It's\n+// particularly useful for writing large REST API services that break a handler\n+// into many smaller parts composed of middlewares and end handlers.\n+type Mux struct {\n+\t// The computed mux handler made of the chained middleware stack and\n+\t// the tree router\n+\thandler http.Handler\n+\n+\t// The radix trie router\n+\ttree *node\n+\n+\t// Custom method not allowed handler\n+\tmethodNotAllowedHandler http.HandlerFunc\n+\n+\t// Controls the behaviour of middleware chain generation when a mux\n+\t// is registered as an inline group inside another mux.\n+\tparent *Mux\n+\n+\t// Routing context pool\n+\tpool *sync.Pool\n+\n+\t// Custom route not found handler\n+\tnotFoundHandler http.HandlerFunc\n+\n+\t// The middleware stack\n+\tmiddlewares []func(http.Handler) http.Handler\n+\n+\tinline bool\n+}\n+\n+// NewMux returns a newly initialized Mux object that implements the Router\n+// interface.\n+func NewMux() *Mux {\n+\tmux := &Mux{tree: &node{}, pool: &sync.Pool{}}\n+\tmux.pool.New = func() interface{} {\n+\t\treturn NewRouteContext()\n+\t}\n+\treturn mux\n+}\n+\n+// ServeHTTP is the single method of the http.Handler interface that makes\n+// Mux interoperable with the standard library. It uses a sync.Pool to get and\n+// reuse routing contexts for each request.\n+func (mx *Mux) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n+\t// Ensure the mux has some routes defined on the mux\n+\tif mx.handler == nil {\n+\t\tmx.NotFoundHandler().ServeHTTP(w, r)\n+\t\treturn\n+\t}\n+\n+\t// Check if a routing context already exists from a parent router.\n+\trctx, _ := r.Context().Value(RouteCtxKey).(*Context)\n+\tif rctx != nil {\n+\t\tmx.handler.ServeHTTP(w, r)\n+\t\treturn\n+\t}\n+\n+\t// Fetch a RouteContext object from the sync pool, and call the computed\n+\t// mx.handler that is comprised of mx.middlewares + mx.routeHTTP.\n+\t// Once the request is finished, reset the routing context and put it back\n+\t// into the pool for reuse from another request.\n+\trctx = mx.pool.Get().(*Context)\n+\trctx.Reset()\n+\trctx.Routes = mx\n+\trctx.parentCtx = r.Context()\n+\n+\t// NOTE: r.WithContext() causes 2 allocations and context.WithValue() causes 1 allocation\n+\tr = r.WithContext(context.WithValue(r.Context(), RouteCtxKey, rctx))\n+\n+\t// Serve the request and once its done, put the request context back in the sync pool\n+\tmx.handler.ServeHTTP(w, r)\n+\tmx.pool.Put(rctx)\n+}\n+\n+// Use appends a middleware handler to the Mux middleware stack.\n+//\n+// The middleware stack for any Mux will execute before searching for a matching\n+// route to a specific handler, which provides opportunity to respond early,\n+// change the course of the request execution, or set request-scoped values for\n+// the next http.Handler.\n+func (mx *Mux) Use(middlewares ...func(http.Handler) http.Handler) {\n+\tif mx.handler != nil {\n+\t\tpanic(\"chi: all middlewares must be defined before routes on a mux\")\n+\t}\n+\tmx.middlewares = append(mx.middlewares, middlewares...)\n+}\n+\n+// Handle adds the route `pattern` that matches any http method to\n+// execute the `handler` http.Handler.\n+func (mx *Mux) Handle(pattern string, handler http.Handler) {\n+\tmx.handle(mALL, pattern, handler)\n+}\n+\n+// HandleFunc adds the route `pattern` that matches any http method to\n+// execute the `handlerFn` http.HandlerFunc.\n+func (mx *Mux) HandleFunc(pattern string, handlerFn http.HandlerFunc) {\n+\tmx.handle(mALL, pattern, handlerFn)\n+}\n+\n+// Method adds the route `pattern` that matches `method` http method to\n+// execute the `handler` http.Handler.\n+func (mx *Mux) Method(method, pattern string, handler http.Handler) {\n+\tm, ok := methodMap[strings.ToUpper(method)]\n+\tif !ok {\n+\t\tpanic(fmt.Sprintf(\"chi: '%s' http method is not supported.\", method))\n+\t}\n+\tmx.handle(m, pattern, handler)\n+}\n+\n+// MethodFunc adds the route `pattern` that matches `method` http method to\n+// execute the `handlerFn` http.HandlerFunc.\n+func (mx *Mux) MethodFunc(method, pattern string, handlerFn http.HandlerFunc) {\n+\tmx.Method(method, pattern, handlerFn)\n+}\n+\n+// Connect adds the route `pattern` that matches a CONNECT http method to\n+// execute the `handlerFn` http.HandlerFunc.\n+func (mx *Mux) Connect(pattern string, handlerFn http.HandlerFunc) {\n+\tmx.handle(mCONNECT, pattern, handlerFn)\n+}\n+\n+// Delete adds the route `pattern` that matches a DELETE http method to\n+// execute the `handlerFn` http.HandlerFunc.\n+func (mx *Mux) Delete(pattern string, handlerFn http.HandlerFunc) {\n+\tmx.handle(mDELETE, pattern, handlerFn)\n+}\n+\n+// Get adds the route `pattern` that matches a GET http method to\n+// execute the `handlerFn` http.HandlerFunc.\n+func (mx *Mux) Get(pattern string, handlerFn http.HandlerFunc) {\n+\tmx.handle(mGET, pattern, handlerFn)\n+}\n+\n+// Head adds the route `pattern` that matches a HEAD http method to\n+// execute the `handlerFn` http.HandlerFunc.\n+func (mx *Mux) Head(pattern string, handlerFn http.HandlerFunc) {\n+\tmx.handle(mHEAD, pattern, handlerFn)\n+}\n+\n+// Options adds the route `pattern` that matches a OPTIONS http method to\n+// execute the `handlerFn` http.HandlerFunc.\n+func (mx *Mux) Options(pattern string, handlerFn http.HandlerFunc) {\n+\tmx.handle(mOPTIONS, pattern, handlerFn)\n+}\n+\n+// Patch adds the route `pattern` that matches a PATCH http method to\n+// execute the `handlerFn` http.HandlerFunc.\n+func (mx *Mux) Patch(pattern string, handlerFn http.HandlerFunc) {\n+\tmx.handle(mPATCH, pattern, handlerFn)\n+}\n+\n+// Post adds the route `pattern` that matches a POST http method to\n+// execute the `handlerFn` http.HandlerFunc.\n+func (mx *Mux) Post(pattern string, handlerFn http.HandlerFunc) {\n+\tmx.handle(mPOST, pattern, handlerFn)\n+}\n+\n+// Put adds the route `pattern` that matches a PUT http method to\n+// execute the `handlerFn` http.HandlerFunc.\n+func (mx *Mux) Put(pattern string, handlerFn http.HandlerFunc) {\n+\tmx.handle(mPUT, pattern, handlerFn)\n+}\n+\n+// Trace adds the route `pattern` that matches a TRACE http method to\n+// execute the `handlerFn` http.HandlerFunc.\n+func (mx *Mux) Trace(pattern string, handlerFn http.HandlerFunc) {\n+\tmx.handle(mTRACE, pattern, handlerFn)\n+}\n+\n+// NotFound sets a custom http.HandlerFunc for routing paths that could\n+// not be found. The default 404 handler is `http.NotFound`.\n+func (mx *Mux) NotFound(handlerFn http.HandlerFunc) {\n+\t// Build NotFound handler chain\n+\tm := mx\n+\thFn := handlerFn\n+\tif mx.inline && mx.parent != nil {\n+\t\tm = mx.parent\n+\t\thFn = Chain(mx.middlewares...).HandlerFunc(hFn).ServeHTTP\n+\t}\n+\n+\t// Update the notFoundHandler from this point forward\n+\tm.notFoundHandler = hFn\n+\tm.updateSubRoutes(func(subMux *Mux) {\n+\t\tif subMux.notFoundHandler == nil {\n+\t\t\tsubMux.NotFound(hFn)\n+\t\t}\n+\t})\n+}\n+\n+// MethodNotAllowed sets a custom http.HandlerFunc for routing paths where the\n+// method is unresolved. The default handler returns a 405 with an empty body.\n+func (mx *Mux) MethodNotAllowed(handlerFn http.HandlerFunc) {\n+\t// Build MethodNotAllowed handler chain\n+\tm := mx\n+\thFn := handlerFn\n+\tif mx.inline && mx.parent != nil {\n+\t\tm = mx.parent\n+\t\thFn = Chain(mx.middlewares...).HandlerFunc(hFn).ServeHTTP\n+\t}\n+\n+\t// Update the methodNotAllowedHandler from this point forward\n+\tm.methodNotAllowedHandler = hFn\n+\tm.updateSubRoutes(func(subMux *Mux) {\n+\t\tif subMux.methodNotAllowedHandler == nil {\n+\t\t\tsubMux.MethodNotAllowed(hFn)\n+\t\t}\n+\t})\n+}\n+\n+// With adds inline middlewares for an endpoint handler.\n+func (mx *Mux) With(middlewares ...func(http.Handler) http.Handler) Router {\n+\t// Similarly as in handle(), we must build the mux handler once additional\n+\t// middleware registration isn't allowed for this stack, like now.\n+\tif !mx.inline && mx.handler == nil {\n+\t\tmx.updateRouteHandler()\n+\t}\n+\n+\t// Copy middlewares from parent inline muxs\n+\tvar mws Middlewares\n+\tif mx.inline {\n+\t\tmws = make(Middlewares, len(mx.middlewares))\n+\t\tcopy(mws, mx.middlewares)\n+\t}\n+\tmws = append(mws, middlewares...)\n+\n+\tim := &Mux{\n+\t\tpool: mx.pool, inline: true, parent: mx, tree: mx.tree, middlewares: mws,\n+\t\tnotFoundHandler: mx.notFoundHandler, methodNotAllowedHandler: mx.methodNotAllowedHandler,\n+\t}\n+\n+\treturn im\n+}\n+\n+// Group creates a new inline-Mux with a fresh middleware stack. It's useful\n+// for a group of handlers along the same routing path that use an additional\n+// set of middlewares. See _examples/.\n+func (mx *Mux) Group(fn func(r Router)) Router {\n+\tim := mx.With().(*Mux)\n+\tif fn != nil {\n+\t\tfn(im)\n+\t}\n+\treturn im\n+}\n+\n+// Route creates a new Mux with a fresh middleware stack and mounts it\n+// along the `pattern` as a subrouter. Effectively, this is a short-hand\n+// call to Mount. See _examples/.\n+func (mx *Mux) Route(pattern string, fn func(r Router)) Router {\n+\tif fn == nil {\n+\t\tpanic(fmt.Sprintf(\"chi: attempting to Route() a nil subrouter on '%s'\", pattern))\n+\t}\n+\tsubRouter := NewRouter()\n+\tfn(subRouter)\n+\tmx.Mount(pattern, subRouter)\n+\treturn subRouter\n+}\n+\n+// Mount attaches another http.Handler or chi Router as a subrouter along a routing\n+// path. It's very useful to split up a large API as many independent routers and\n+// compose them as a single service using Mount. See _examples/.\n+//\n+// Note that Mount() simply sets a wildcard along the `pattern` that will continue\n+// routing at the `handler`, which in most cases is another chi.Router. As a result,\n+// if you define two Mount() routes on the exact same pattern the mount will panic.\n+func (mx *Mux) Mount(pattern string, handler http.Handler) {\n+\tif handler == nil {\n+\t\tpanic(fmt.Sprintf(\"chi: attempting to Mount() a nil handler on '%s'\", pattern))\n+\t}\n+\n+\t// Provide runtime safety for ensuring a pattern isn't mounted on an existing\n+\t// routing pattern.\n+\tif mx.tree.findPattern(pattern+\"*\") || mx.tree.findPattern(pattern+\"/*\") {\n+\t\tpanic(fmt.Sprintf(\"chi: attempting to Mount() a handler on an existing path, '%s'\", pattern))\n+\t}\n+\n+\t// Assign sub-Router's with the parent not found & method not allowed handler if not specified.\n+\tsubr, ok := handler.(*Mux)\n+\tif ok && subr.notFoundHandler == nil && mx.notFoundHandler != nil {\n+\t\tsubr.NotFound(mx.notFoundHandler)\n+\t}\n+\tif ok && subr.methodNotAllowedHandler == nil && mx.methodNotAllowedHandler != nil {\n+\t\tsubr.MethodNotAllowed(mx.methodNotAllowedHandler)\n+\t}\n+\n+\tmountHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\trctx := RouteContext(r.Context())\n+\n+\t\t// shift the url path past the previous subrouter\n+\t\trctx.RoutePath = mx.nextRoutePath(rctx)\n+\n+\t\t// reset the wildcard URLParam which connects the subrouter\n+\t\tn := len(rctx.URLParams.Keys) - 1\n+\t\tif n >= 0 && rctx.URLParams.Keys[n] == \"*\" && len(rctx.URLParams.Values) > n {\n+\t\t\trctx.URLParams.Values[n] = \"\"\n+\t\t}\n+\n+\t\thandler.ServeHTTP(w, r)\n+\t})\n+\n+\tif pattern == \"\" || pattern[len(pattern)-1] != '/' {\n+\t\tmx.handle(mALL|mSTUB, pattern, mountHandler)\n+\t\tmx.handle(mALL|mSTUB, pattern+\"/\", mountHandler)\n+\t\tpattern += \"/\"\n+\t}\n+\n+\tmethod := mALL\n+\tsubroutes, _ := handler.(Routes)\n+\tif subroutes != nil {\n+\t\tmethod |= mSTUB\n+\t}\n+\tn := mx.handle(method, pattern+\"*\", mountHandler)\n+\n+\tif subroutes != nil {\n+\t\tn.subroutes = subroutes\n+\t}\n+}\n+\n+// Routes returns a slice of routing information from the tree,\n+// useful for traversing available routes of a router.\n+func (mx *Mux) Routes() []Route {\n+\treturn mx.tree.routes()\n+}\n+\n+// Middlewares returns a slice of middleware handler functions.\n+func (mx *Mux) Middlewares() Middlewares {\n+\treturn mx.middlewares\n+}\n+\n+// Match searches the routing tree for a handler that matches the method/path.\n+// It's similar to routing a http request, but without executing the handler\n+// thereafter.\n+//\n+// Note: the *Context state is updated during execution, so manage\n+// the state carefully or make a NewRouteContext().\n+func (mx *Mux) Match(rctx *Context, method, path string) bool {\n+\tm, ok := methodMap[method]\n+\tif !ok {\n+\t\treturn false\n+\t}\n+\n+\tnode, _, h := mx.tree.FindRoute(rctx, m, path)\n+\n+\tif node != nil && node.subroutes != nil {\n+\t\trctx.RoutePath = mx.nextRoutePath(rctx)\n+\t\treturn node.subroutes.Match(rctx, method, rctx.RoutePath)\n+\t}\n+\n+\treturn h != nil\n+}\n+\n+// NotFoundHandler returns the default Mux 404 responder whenever a route\n+// cannot be found.\n+func (mx *Mux) NotFoundHandler() http.HandlerFunc {\n+\tif mx.notFoundHandler != nil {\n+\t\treturn mx.notFoundHandler\n+\t}\n+\treturn http.NotFound\n+}\n+\n+// MethodNotAllowedHandler returns the default Mux 405 responder whenever\n+// a method cannot be resolved for a route.\n+func (mx *Mux) MethodNotAllowedHandler() http.HandlerFunc {\n+\tif mx.methodNotAllowedHandler != nil {\n+\t\treturn mx.methodNotAllowedHandler\n+\t}\n+\treturn methodNotAllowedHandler\n+}\n+\n+// handle registers a http.Handler in the routing tree for a particular http method\n+// and routing pattern.\n+func (mx *Mux) handle(method methodTyp, pattern string, handler http.Handler) *node {\n+\tif len(pattern) == 0 || pattern[0] != '/' {\n+\t\tpanic(fmt.Sprintf(\"chi: routing pattern must begin with '/' in '%s'\", pattern))\n+\t}\n+\n+\t// Build the computed routing handler for this routing pattern.\n+\tif !mx.inline && mx.handler == nil {\n+\t\tmx.updateRouteHandler()\n+\t}\n+\n+\t// Build endpoint handler with inline middlewares for the route\n+\tvar h http.Handler\n+\tif mx.inline {\n+\t\tmx.handler = http.HandlerFunc(mx.routeHTTP)\n+\t\th = Chain(mx.middlewares...).Handler(handler)\n+\t} else {\n+\t\th = handler\n+\t}\n+\n+\t// Add the endpoint to the tree and return the node\n+\treturn mx.tree.InsertRoute(method, pattern, h)\n+}\n+\n+// routeHTTP routes a http.Request through the Mux routing tree to serve\n+// the matching handler for a particular http method.\n+func (mx *Mux) routeHTTP(w http.ResponseWriter, r *http.Request) {\n+\t// Grab the route context object\n+\trctx := r.Context().Value(RouteCtxKey).(*Context)\n+\n+\t// The request routing path\n+\troutePath := rctx.RoutePath\n+\tif routePath == \"\" {\n+\t\tif r.URL.RawPath != \"\" {\n+\t\t\troutePath = r.URL.RawPath\n+\t\t} else {\n+\t\t\troutePath = r.URL.Path\n+\t\t}\n+\t\tif routePath == \"\" {\n+\t\t\troutePath = \"/\"\n+\t\t}\n+\t}\n+\n+\t// Check if method is supported by chi\n+\tif rctx.RouteMethod == \"\" {\n+\t\trctx.RouteMethod = r.Method\n+\t}\n+\tmethod, ok := methodMap[rctx.RouteMethod]\n+\tif !ok {\n+\t\tmx.MethodNotAllowedHandler().ServeHTTP(w, r)\n+\t\treturn\n+\t}\n+\n+\t// Find the route\n+\tif _, _, h := mx.tree.FindRoute(rctx, method, routePath); h != nil {\n+\t\th.ServeHTTP(w, r)\n+\t\treturn\n+\t}\n+\tif rctx.methodNotAllowed {\n+\t\tmx.MethodNotAllowedHandler().ServeHTTP(w, r)\n+\t} else {\n+\t\tmx.NotFoundHandler().ServeHTTP(w, r)\n+\t}\n+}\n+\n+func (mx *Mux) nextRoutePath(rctx *Context) string {\n+\troutePath := \"/\"\n+\tnx := len(rctx.routeParams.Keys) - 1 // index of last param in list\n+\tif nx >= 0 && rctx.routeParams.Keys[nx] == \"*\" && len(rctx.routeParams.Values) > nx {\n+\t\troutePath = \"/\" + rctx.routeParams.Values[nx]\n+\t}\n+\treturn routePath\n+}\n+\n+// Recursively update data on child routers.\n+func (mx *Mux) updateSubRoutes(fn func(subMux *Mux)) {\n+\tfor _, r := range mx.tree.routes() {\n+\t\tsubMux, ok := r.SubRoutes.(*Mux)\n+\t\tif !ok {\n+\t\t\tcontinue\n+\t\t}\n+\t\tfn(subMux)\n+\t}\n+}\n+\n+// updateRouteHandler builds the single mux handler that is a chain of the middleware\n+// stack, as defined by calls to Use(), and the tree router (Mux) itself. After this\n+// point, no other middlewares can be registered on this Mux's stack. But you can still\n+// compose additional middlewares via Group()'s or using a chained middleware handler.\n+func (mx *Mux) updateRouteHandler() {\n+\tmx.handler = chain(mx.middlewares, http.HandlerFunc(mx.routeHTTP))\n+}\n+\n+// methodNotAllowedHandler is a helper function to respond with a 405,\n+// method not allowed.\n+func methodNotAllowedHandler(w http.ResponseWriter, r *http.Request) {\n+\tw.WriteHeader(405)\n+\tw.Write(nil)\n+}"
    },
    {
      "sha": "4189b5228b2952d7de4704fae4e5bbd3ad42b658",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/tree.go",
      "status": "added",
      "additions": 866,
      "deletions": 0,
      "changes": 866,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/tree.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/chi/v5/tree.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/chi/v5/tree.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,866 @@\n+package chi\n+\n+// Radix tree implementation below is a based on the original work by\n+// Armon Dadgar in https://github.com/armon/go-radix/blob/master/radix.go\n+// (MIT licensed). It's been heavily modified for use as a HTTP routing tree.\n+\n+import (\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"regexp\"\n+\t\"sort\"\n+\t\"strconv\"\n+\t\"strings\"\n+)\n+\n+type methodTyp uint\n+\n+const (\n+\tmSTUB methodTyp = 1 << iota\n+\tmCONNECT\n+\tmDELETE\n+\tmGET\n+\tmHEAD\n+\tmOPTIONS\n+\tmPATCH\n+\tmPOST\n+\tmPUT\n+\tmTRACE\n+)\n+\n+var mALL = mCONNECT | mDELETE | mGET | mHEAD |\n+\tmOPTIONS | mPATCH | mPOST | mPUT | mTRACE\n+\n+var methodMap = map[string]methodTyp{\n+\thttp.MethodConnect: mCONNECT,\n+\thttp.MethodDelete:  mDELETE,\n+\thttp.MethodGet:     mGET,\n+\thttp.MethodHead:    mHEAD,\n+\thttp.MethodOptions: mOPTIONS,\n+\thttp.MethodPatch:   mPATCH,\n+\thttp.MethodPost:    mPOST,\n+\thttp.MethodPut:     mPUT,\n+\thttp.MethodTrace:   mTRACE,\n+}\n+\n+// RegisterMethod adds support for custom HTTP method handlers, available\n+// via Router#Method and Router#MethodFunc\n+func RegisterMethod(method string) {\n+\tif method == \"\" {\n+\t\treturn\n+\t}\n+\tmethod = strings.ToUpper(method)\n+\tif _, ok := methodMap[method]; ok {\n+\t\treturn\n+\t}\n+\tn := len(methodMap)\n+\tif n > strconv.IntSize-2 {\n+\t\tpanic(fmt.Sprintf(\"chi: max number of methods reached (%d)\", strconv.IntSize))\n+\t}\n+\tmt := methodTyp(2 << n)\n+\tmethodMap[method] = mt\n+\tmALL |= mt\n+}\n+\n+type nodeTyp uint8\n+\n+const (\n+\tntStatic   nodeTyp = iota // /home\n+\tntRegexp                  // /{id:[0-9]+}\n+\tntParam                   // /{user}\n+\tntCatchAll                // /api/v1/*\n+)\n+\n+type node struct {\n+\t// subroutes on the leaf node\n+\tsubroutes Routes\n+\n+\t// regexp matcher for regexp nodes\n+\trex *regexp.Regexp\n+\n+\t// HTTP handler endpoints on the leaf node\n+\tendpoints endpoints\n+\n+\t// prefix is the common prefix we ignore\n+\tprefix string\n+\n+\t// child nodes should be stored in-order for iteration,\n+\t// in groups of the node type.\n+\tchildren [ntCatchAll + 1]nodes\n+\n+\t// first byte of the child prefix\n+\ttail byte\n+\n+\t// node type: static, regexp, param, catchAll\n+\ttyp nodeTyp\n+\n+\t// first byte of the prefix\n+\tlabel byte\n+}\n+\n+// endpoints is a mapping of http method constants to handlers\n+// for a given route.\n+type endpoints map[methodTyp]*endpoint\n+\n+type endpoint struct {\n+\t// endpoint handler\n+\thandler http.Handler\n+\n+\t// pattern is the routing pattern for handler nodes\n+\tpattern string\n+\n+\t// parameter keys recorded on handler nodes\n+\tparamKeys []string\n+}\n+\n+func (s endpoints) Value(method methodTyp) *endpoint {\n+\tmh, ok := s[method]\n+\tif !ok {\n+\t\tmh = &endpoint{}\n+\t\ts[method] = mh\n+\t}\n+\treturn mh\n+}\n+\n+func (n *node) InsertRoute(method methodTyp, pattern string, handler http.Handler) *node {\n+\tvar parent *node\n+\tsearch := pattern\n+\n+\tfor {\n+\t\t// Handle key exhaustion\n+\t\tif len(search) == 0 {\n+\t\t\t// Insert or update the node's leaf handler\n+\t\t\tn.setEndpoint(method, handler, pattern)\n+\t\t\treturn n\n+\t\t}\n+\n+\t\t// We're going to be searching for a wild node next,\n+\t\t// in this case, we need to get the tail\n+\t\tvar label = search[0]\n+\t\tvar segTail byte\n+\t\tvar segEndIdx int\n+\t\tvar segTyp nodeTyp\n+\t\tvar segRexpat string\n+\t\tif label == '{' || label == '*' {\n+\t\t\tsegTyp, _, segRexpat, segTail, _, segEndIdx = patNextSegment(search)\n+\t\t}\n+\n+\t\tvar prefix string\n+\t\tif segTyp == ntRegexp {\n+\t\t\tprefix = segRexpat\n+\t\t}\n+\n+\t\t// Look for the edge to attach to\n+\t\tparent = n\n+\t\tn = n.getEdge(segTyp, label, segTail, prefix)\n+\n+\t\t// No edge, create one\n+\t\tif n == nil {\n+\t\t\tchild := &node{label: label, tail: segTail, prefix: search}\n+\t\t\thn := parent.addChild(child, search)\n+\t\t\thn.setEndpoint(method, handler, pattern)\n+\n+\t\t\treturn hn\n+\t\t}\n+\n+\t\t// Found an edge to match the pattern\n+\n+\t\tif n.typ > ntStatic {\n+\t\t\t// We found a param node, trim the param from the search path and continue.\n+\t\t\t// This param/wild pattern segment would already be on the tree from a previous\n+\t\t\t// call to addChild when creating a new node.\n+\t\t\tsearch = search[segEndIdx:]\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\t// Static nodes fall below here.\n+\t\t// Determine longest prefix of the search key on match.\n+\t\tcommonPrefix := longestPrefix(search, n.prefix)\n+\t\tif commonPrefix == len(n.prefix) {\n+\t\t\t// the common prefix is as long as the current node's prefix we're attempting to insert.\n+\t\t\t// keep the search going.\n+\t\t\tsearch = search[commonPrefix:]\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\t// Split the node\n+\t\tchild := &node{\n+\t\t\ttyp:    ntStatic,\n+\t\t\tprefix: search[:commonPrefix],\n+\t\t}\n+\t\tparent.replaceChild(search[0], segTail, child)\n+\n+\t\t// Restore the existing node\n+\t\tn.label = n.prefix[commonPrefix]\n+\t\tn.prefix = n.prefix[commonPrefix:]\n+\t\tchild.addChild(n, n.prefix)\n+\n+\t\t// If the new key is a subset, set the method/handler on this node and finish.\n+\t\tsearch = search[commonPrefix:]\n+\t\tif len(search) == 0 {\n+\t\t\tchild.setEndpoint(method, handler, pattern)\n+\t\t\treturn child\n+\t\t}\n+\n+\t\t// Create a new edge for the node\n+\t\tsubchild := &node{\n+\t\t\ttyp:    ntStatic,\n+\t\t\tlabel:  search[0],\n+\t\t\tprefix: search,\n+\t\t}\n+\t\thn := child.addChild(subchild, search)\n+\t\thn.setEndpoint(method, handler, pattern)\n+\t\treturn hn\n+\t}\n+}\n+\n+// addChild appends the new `child` node to the tree using the `pattern` as the trie key.\n+// For a URL router like chi's, we split the static, param, regexp and wildcard segments\n+// into different nodes. In addition, addChild will recursively call itself until every\n+// pattern segment is added to the url pattern tree as individual nodes, depending on type.\n+func (n *node) addChild(child *node, prefix string) *node {\n+\tsearch := prefix\n+\n+\t// handler leaf node added to the tree is the child.\n+\t// this may be overridden later down the flow\n+\thn := child\n+\n+\t// Parse next segment\n+\tsegTyp, _, segRexpat, segTail, segStartIdx, segEndIdx := patNextSegment(search)\n+\n+\t// Add child depending on next up segment\n+\tswitch segTyp {\n+\n+\tcase ntStatic:\n+\t\t// Search prefix is all static (that is, has no params in path)\n+\t\t// noop\n+\n+\tdefault:\n+\t\t// Search prefix contains a param, regexp or wildcard\n+\n+\t\tif segTyp == ntRegexp {\n+\t\t\trex, err := regexp.Compile(segRexpat)\n+\t\t\tif err != nil {\n+\t\t\t\tpanic(fmt.Sprintf(\"chi: invalid regexp pattern '%s' in route param\", segRexpat))\n+\t\t\t}\n+\t\t\tchild.prefix = segRexpat\n+\t\t\tchild.rex = rex\n+\t\t}\n+\n+\t\tif segStartIdx == 0 {\n+\t\t\t// Route starts with a param\n+\t\t\tchild.typ = segTyp\n+\n+\t\t\tif segTyp == ntCatchAll {\n+\t\t\t\tsegStartIdx = -1\n+\t\t\t} else {\n+\t\t\t\tsegStartIdx = segEndIdx\n+\t\t\t}\n+\t\t\tif segStartIdx < 0 {\n+\t\t\t\tsegStartIdx = len(search)\n+\t\t\t}\n+\t\t\tchild.tail = segTail // for params, we set the tail\n+\n+\t\t\tif segStartIdx != len(search) {\n+\t\t\t\t// add static edge for the remaining part, split the end.\n+\t\t\t\t// its not possible to have adjacent param nodes, so its certainly\n+\t\t\t\t// going to be a static node next.\n+\n+\t\t\t\tsearch = search[segStartIdx:] // advance search position\n+\n+\t\t\t\tnn := &node{\n+\t\t\t\t\ttyp:    ntStatic,\n+\t\t\t\t\tlabel:  search[0],\n+\t\t\t\t\tprefix: search,\n+\t\t\t\t}\n+\t\t\t\thn = child.addChild(nn, search)\n+\t\t\t}\n+\n+\t\t} else if segStartIdx > 0 {\n+\t\t\t// Route has some param\n+\n+\t\t\t// starts with a static segment\n+\t\t\tchild.typ = ntStatic\n+\t\t\tchild.prefix = search[:segStartIdx]\n+\t\t\tchild.rex = nil\n+\n+\t\t\t// add the param edge node\n+\t\t\tsearch = search[segStartIdx:]\n+\n+\t\t\tnn := &node{\n+\t\t\t\ttyp:   segTyp,\n+\t\t\t\tlabel: search[0],\n+\t\t\t\ttail:  segTail,\n+\t\t\t}\n+\t\t\thn = child.addChild(nn, search)\n+\n+\t\t}\n+\t}\n+\n+\tn.children[child.typ] = append(n.children[child.typ], child)\n+\tn.children[child.typ].Sort()\n+\treturn hn\n+}\n+\n+func (n *node) replaceChild(label, tail byte, child *node) {\n+\tfor i := 0; i < len(n.children[child.typ]); i++ {\n+\t\tif n.children[child.typ][i].label == label && n.children[child.typ][i].tail == tail {\n+\t\t\tn.children[child.typ][i] = child\n+\t\t\tn.children[child.typ][i].label = label\n+\t\t\tn.children[child.typ][i].tail = tail\n+\t\t\treturn\n+\t\t}\n+\t}\n+\tpanic(\"chi: replacing missing child\")\n+}\n+\n+func (n *node) getEdge(ntyp nodeTyp, label, tail byte, prefix string) *node {\n+\tnds := n.children[ntyp]\n+\tfor i := 0; i < len(nds); i++ {\n+\t\tif nds[i].label == label && nds[i].tail == tail {\n+\t\t\tif ntyp == ntRegexp && nds[i].prefix != prefix {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\treturn nds[i]\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (n *node) setEndpoint(method methodTyp, handler http.Handler, pattern string) {\n+\t// Set the handler for the method type on the node\n+\tif n.endpoints == nil {\n+\t\tn.endpoints = make(endpoints)\n+\t}\n+\n+\tparamKeys := patParamKeys(pattern)\n+\n+\tif method&mSTUB == mSTUB {\n+\t\tn.endpoints.Value(mSTUB).handler = handler\n+\t}\n+\tif method&mALL == mALL {\n+\t\th := n.endpoints.Value(mALL)\n+\t\th.handler = handler\n+\t\th.pattern = pattern\n+\t\th.paramKeys = paramKeys\n+\t\tfor _, m := range methodMap {\n+\t\t\th := n.endpoints.Value(m)\n+\t\t\th.handler = handler\n+\t\t\th.pattern = pattern\n+\t\t\th.paramKeys = paramKeys\n+\t\t}\n+\t} else {\n+\t\th := n.endpoints.Value(method)\n+\t\th.handler = handler\n+\t\th.pattern = pattern\n+\t\th.paramKeys = paramKeys\n+\t}\n+}\n+\n+func (n *node) FindRoute(rctx *Context, method methodTyp, path string) (*node, endpoints, http.Handler) {\n+\t// Reset the context routing pattern and params\n+\trctx.routePattern = \"\"\n+\trctx.routeParams.Keys = rctx.routeParams.Keys[:0]\n+\trctx.routeParams.Values = rctx.routeParams.Values[:0]\n+\n+\t// Find the routing handlers for the path\n+\trn := n.findRoute(rctx, method, path)\n+\tif rn == nil {\n+\t\treturn nil, nil, nil\n+\t}\n+\n+\t// Record the routing params in the request lifecycle\n+\trctx.URLParams.Keys = append(rctx.URLParams.Keys, rctx.routeParams.Keys...)\n+\trctx.URLParams.Values = append(rctx.URLParams.Values, rctx.routeParams.Values...)\n+\n+\t// Record the routing pattern in the request lifecycle\n+\tif rn.endpoints[method].pattern != \"\" {\n+\t\trctx.routePattern = rn.endpoints[method].pattern\n+\t\trctx.RoutePatterns = append(rctx.RoutePatterns, rctx.routePattern)\n+\t}\n+\n+\treturn rn, rn.endpoints, rn.endpoints[method].handler\n+}\n+\n+// Recursive edge traversal by checking all nodeTyp groups along the way.\n+// It's like searching through a multi-dimensional radix trie.\n+func (n *node) findRoute(rctx *Context, method methodTyp, path string) *node {\n+\tnn := n\n+\tsearch := path\n+\n+\tfor t, nds := range nn.children {\n+\t\tntyp := nodeTyp(t)\n+\t\tif len(nds) == 0 {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tvar xn *node\n+\t\txsearch := search\n+\n+\t\tvar label byte\n+\t\tif search != \"\" {\n+\t\t\tlabel = search[0]\n+\t\t}\n+\n+\t\tswitch ntyp {\n+\t\tcase ntStatic:\n+\t\t\txn = nds.findEdge(label)\n+\t\t\tif xn == nil || !strings.HasPrefix(xsearch, xn.prefix) {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\txsearch = xsearch[len(xn.prefix):]\n+\n+\t\tcase ntParam, ntRegexp:\n+\t\t\t// short-circuit and return no matching route for empty param values\n+\t\t\tif xsearch == \"\" {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\t// serially loop through each node grouped by the tail delimiter\n+\t\t\tfor idx := 0; idx < len(nds); idx++ {\n+\t\t\t\txn = nds[idx]\n+\n+\t\t\t\t// label for param nodes is the delimiter byte\n+\t\t\t\tp := strings.IndexByte(xsearch, xn.tail)\n+\n+\t\t\t\tif p < 0 {\n+\t\t\t\t\tif xn.tail == '/' {\n+\t\t\t\t\t\tp = len(xsearch)\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t} else if ntyp == ntRegexp && p == 0 {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\n+\t\t\t\tif ntyp == ntRegexp && xn.rex != nil {\n+\t\t\t\t\tif !xn.rex.MatchString(xsearch[:p]) {\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t} else if strings.IndexByte(xsearch[:p], '/') != -1 {\n+\t\t\t\t\t// avoid a match across path segments\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\n+\t\t\t\tprevlen := len(rctx.routeParams.Values)\n+\t\t\t\trctx.routeParams.Values = append(rctx.routeParams.Values, xsearch[:p])\n+\t\t\t\txsearch = xsearch[p:]\n+\n+\t\t\t\tif len(xsearch) == 0 {\n+\t\t\t\t\tif xn.isLeaf() {\n+\t\t\t\t\t\th := xn.endpoints[method]\n+\t\t\t\t\t\tif h != nil && h.handler != nil {\n+\t\t\t\t\t\t\trctx.routeParams.Keys = append(rctx.routeParams.Keys, h.paramKeys...)\n+\t\t\t\t\t\t\treturn xn\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t// flag that the routing context found a route, but not a corresponding\n+\t\t\t\t\t\t// supported method\n+\t\t\t\t\t\trctx.methodNotAllowed = true\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\t// recursively find the next node on this branch\n+\t\t\t\tfin := xn.findRoute(rctx, method, xsearch)\n+\t\t\t\tif fin != nil {\n+\t\t\t\t\treturn fin\n+\t\t\t\t}\n+\n+\t\t\t\t// not found on this branch, reset vars\n+\t\t\t\trctx.routeParams.Values = rctx.routeParams.Values[:prevlen]\n+\t\t\t\txsearch = search\n+\t\t\t}\n+\n+\t\t\trctx.routeParams.Values = append(rctx.routeParams.Values, \"\")\n+\n+\t\tdefault:\n+\t\t\t// catch-all nodes\n+\t\t\trctx.routeParams.Values = append(rctx.routeParams.Values, search)\n+\t\t\txn = nds[0]\n+\t\t\txsearch = \"\"\n+\t\t}\n+\n+\t\tif xn == nil {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\t// did we find it yet?\n+\t\tif len(xsearch) == 0 {\n+\t\t\tif xn.isLeaf() {\n+\t\t\t\th := xn.endpoints[method]\n+\t\t\t\tif h != nil && h.handler != nil {\n+\t\t\t\t\trctx.routeParams.Keys = append(rctx.routeParams.Keys, h.paramKeys...)\n+\t\t\t\t\treturn xn\n+\t\t\t\t}\n+\n+\t\t\t\t// flag that the routing context found a route, but not a corresponding\n+\t\t\t\t// supported method\n+\t\t\t\trctx.methodNotAllowed = true\n+\t\t\t}\n+\t\t}\n+\n+\t\t// recursively find the next node..\n+\t\tfin := xn.findRoute(rctx, method, xsearch)\n+\t\tif fin != nil {\n+\t\t\treturn fin\n+\t\t}\n+\n+\t\t// Did not find final handler, let's remove the param here if it was set\n+\t\tif xn.typ > ntStatic {\n+\t\t\tif len(rctx.routeParams.Values) > 0 {\n+\t\t\t\trctx.routeParams.Values = rctx.routeParams.Values[:len(rctx.routeParams.Values)-1]\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+\treturn nil\n+}\n+\n+func (n *node) findEdge(ntyp nodeTyp, label byte) *node {\n+\tnds := n.children[ntyp]\n+\tnum := len(nds)\n+\tidx := 0\n+\n+\tswitch ntyp {\n+\tcase ntStatic, ntParam, ntRegexp:\n+\t\ti, j := 0, num-1\n+\t\tfor i <= j {\n+\t\t\tidx = i + (j-i)/2\n+\t\t\tif label > nds[idx].label {\n+\t\t\t\ti = idx + 1\n+\t\t\t} else if label < nds[idx].label {\n+\t\t\t\tj = idx - 1\n+\t\t\t} else {\n+\t\t\t\ti = num // breaks cond\n+\t\t\t}\n+\t\t}\n+\t\tif nds[idx].label != label {\n+\t\t\treturn nil\n+\t\t}\n+\t\treturn nds[idx]\n+\n+\tdefault: // catch all\n+\t\treturn nds[idx]\n+\t}\n+}\n+\n+func (n *node) isLeaf() bool {\n+\treturn n.endpoints != nil\n+}\n+\n+func (n *node) findPattern(pattern string) bool {\n+\tnn := n\n+\tfor _, nds := range nn.children {\n+\t\tif len(nds) == 0 {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tn = nn.findEdge(nds[0].typ, pattern[0])\n+\t\tif n == nil {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tvar idx int\n+\t\tvar xpattern string\n+\n+\t\tswitch n.typ {\n+\t\tcase ntStatic:\n+\t\t\tidx = longestPrefix(pattern, n.prefix)\n+\t\t\tif idx < len(n.prefix) {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\tcase ntParam, ntRegexp:\n+\t\t\tidx = strings.IndexByte(pattern, '}') + 1\n+\n+\t\tcase ntCatchAll:\n+\t\t\tidx = longestPrefix(pattern, \"*\")\n+\n+\t\tdefault:\n+\t\t\tpanic(\"chi: unknown node type\")\n+\t\t}\n+\n+\t\txpattern = pattern[idx:]\n+\t\tif len(xpattern) == 0 {\n+\t\t\treturn true\n+\t\t}\n+\n+\t\treturn n.findPattern(xpattern)\n+\t}\n+\treturn false\n+}\n+\n+func (n *node) routes() []Route {\n+\trts := []Route{}\n+\n+\tn.walk(func(eps endpoints, subroutes Routes) bool {\n+\t\tif eps[mSTUB] != nil && eps[mSTUB].handler != nil && subroutes == nil {\n+\t\t\treturn false\n+\t\t}\n+\n+\t\t// Group methodHandlers by unique patterns\n+\t\tpats := make(map[string]endpoints)\n+\n+\t\tfor mt, h := range eps {\n+\t\t\tif h.pattern == \"\" {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tp, ok := pats[h.pattern]\n+\t\t\tif !ok {\n+\t\t\t\tp = endpoints{}\n+\t\t\t\tpats[h.pattern] = p\n+\t\t\t}\n+\t\t\tp[mt] = h\n+\t\t}\n+\n+\t\tfor p, mh := range pats {\n+\t\t\ths := make(map[string]http.Handler)\n+\t\t\tif mh[mALL] != nil && mh[mALL].handler != nil {\n+\t\t\t\ths[\"*\"] = mh[mALL].handler\n+\t\t\t}\n+\n+\t\t\tfor mt, h := range mh {\n+\t\t\t\tif h.handler == nil {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t\tm := methodTypString(mt)\n+\t\t\t\tif m == \"\" {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t\ths[m] = h.handler\n+\t\t\t}\n+\n+\t\t\trt := Route{subroutes, hs, p}\n+\t\t\trts = append(rts, rt)\n+\t\t}\n+\n+\t\treturn false\n+\t})\n+\n+\treturn rts\n+}\n+\n+func (n *node) walk(fn func(eps endpoints, subroutes Routes) bool) bool {\n+\t// Visit the leaf values if any\n+\tif (n.endpoints != nil || n.subroutes != nil) && fn(n.endpoints, n.subroutes) {\n+\t\treturn true\n+\t}\n+\n+\t// Recurse on the children\n+\tfor _, ns := range n.children {\n+\t\tfor _, cn := range ns {\n+\t\t\tif cn.walk(fn) {\n+\t\t\t\treturn true\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n+// patNextSegment returns the next segment details from a pattern:\n+// node type, param key, regexp string, param tail byte, param starting index, param ending index\n+func patNextSegment(pattern string) (nodeTyp, string, string, byte, int, int) {\n+\tps := strings.Index(pattern, \"{\")\n+\tws := strings.Index(pattern, \"*\")\n+\n+\tif ps < 0 && ws < 0 {\n+\t\treturn ntStatic, \"\", \"\", 0, 0, len(pattern) // we return the entire thing\n+\t}\n+\n+\t// Sanity check\n+\tif ps >= 0 && ws >= 0 && ws < ps {\n+\t\tpanic(\"chi: wildcard '*' must be the last pattern in a route, otherwise use a '{param}'\")\n+\t}\n+\n+\tvar tail byte = '/' // Default endpoint tail to / byte\n+\n+\tif ps >= 0 {\n+\t\t// Param/Regexp pattern is next\n+\t\tnt := ntParam\n+\n+\t\t// Read to closing } taking into account opens and closes in curl count (cc)\n+\t\tcc := 0\n+\t\tpe := ps\n+\t\tfor i, c := range pattern[ps:] {\n+\t\t\tif c == '{' {\n+\t\t\t\tcc++\n+\t\t\t} else if c == '}' {\n+\t\t\t\tcc--\n+\t\t\t\tif cc == 0 {\n+\t\t\t\t\tpe = ps + i\n+\t\t\t\t\tbreak\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif pe == ps {\n+\t\t\tpanic(\"chi: route param closing delimiter '}' is missing\")\n+\t\t}\n+\n+\t\tkey := pattern[ps+1 : pe]\n+\t\tpe++ // set end to next position\n+\n+\t\tif pe < len(pattern) {\n+\t\t\ttail = pattern[pe]\n+\t\t}\n+\n+\t\tvar rexpat string\n+\t\tif idx := strings.Index(key, \":\"); idx >= 0 {\n+\t\t\tnt = ntRegexp\n+\t\t\trexpat = key[idx+1:]\n+\t\t\tkey = key[:idx]\n+\t\t}\n+\n+\t\tif len(rexpat) > 0 {\n+\t\t\tif rexpat[0] != '^' {\n+\t\t\t\trexpat = \"^\" + rexpat\n+\t\t\t}\n+\t\t\tif rexpat[len(rexpat)-1] != '$' {\n+\t\t\t\trexpat += \"$\"\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn nt, key, rexpat, tail, ps, pe\n+\t}\n+\n+\t// Wildcard pattern as finale\n+\tif ws < len(pattern)-1 {\n+\t\tpanic(\"chi: wildcard '*' must be the last value in a route. trim trailing text or use a '{param}' instead\")\n+\t}\n+\treturn ntCatchAll, \"*\", \"\", 0, ws, len(pattern)\n+}\n+\n+func patParamKeys(pattern string) []string {\n+\tpat := pattern\n+\tparamKeys := []string{}\n+\tfor {\n+\t\tptyp, paramKey, _, _, _, e := patNextSegment(pat)\n+\t\tif ptyp == ntStatic {\n+\t\t\treturn paramKeys\n+\t\t}\n+\t\tfor i := 0; i < len(paramKeys); i++ {\n+\t\t\tif paramKeys[i] == paramKey {\n+\t\t\t\tpanic(fmt.Sprintf(\"chi: routing pattern '%s' contains duplicate param key, '%s'\", pattern, paramKey))\n+\t\t\t}\n+\t\t}\n+\t\tparamKeys = append(paramKeys, paramKey)\n+\t\tpat = pat[e:]\n+\t}\n+}\n+\n+// longestPrefix finds the length of the shared prefix\n+// of two strings\n+func longestPrefix(k1, k2 string) int {\n+\tmax := len(k1)\n+\tif l := len(k2); l < max {\n+\t\tmax = l\n+\t}\n+\tvar i int\n+\tfor i = 0; i < max; i++ {\n+\t\tif k1[i] != k2[i] {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\treturn i\n+}\n+\n+func methodTypString(method methodTyp) string {\n+\tfor s, t := range methodMap {\n+\t\tif method == t {\n+\t\t\treturn s\n+\t\t}\n+\t}\n+\treturn \"\"\n+}\n+\n+type nodes []*node\n+\n+// Sort the list of nodes by label\n+func (ns nodes) Sort()              { sort.Sort(ns); ns.tailSort() }\n+func (ns nodes) Len() int           { return len(ns) }\n+func (ns nodes) Swap(i, j int)      { ns[i], ns[j] = ns[j], ns[i] }\n+func (ns nodes) Less(i, j int) bool { return ns[i].label < ns[j].label }\n+\n+// tailSort pushes nodes with '/' as the tail to the end of the list for param nodes.\n+// The list order determines the traversal order.\n+func (ns nodes) tailSort() {\n+\tfor i := len(ns) - 1; i >= 0; i-- {\n+\t\tif ns[i].typ > ntStatic && ns[i].tail == '/' {\n+\t\t\tns.Swap(i, len(ns)-1)\n+\t\t\treturn\n+\t\t}\n+\t}\n+}\n+\n+func (ns nodes) findEdge(label byte) *node {\n+\tnum := len(ns)\n+\tidx := 0\n+\ti, j := 0, num-1\n+\tfor i <= j {\n+\t\tidx = i + (j-i)/2\n+\t\tif label > ns[idx].label {\n+\t\t\ti = idx + 1\n+\t\t} else if label < ns[idx].label {\n+\t\t\tj = idx - 1\n+\t\t} else {\n+\t\t\ti = num // breaks cond\n+\t\t}\n+\t}\n+\tif ns[idx].label != label {\n+\t\treturn nil\n+\t}\n+\treturn ns[idx]\n+}\n+\n+// Route describes the details of a routing handler.\n+// Handlers map key is an HTTP method\n+type Route struct {\n+\tSubRoutes Routes\n+\tHandlers  map[string]http.Handler\n+\tPattern   string\n+}\n+\n+// WalkFunc is the type of the function called for each method and route visited by Walk.\n+type WalkFunc func(method string, route string, handler http.Handler, middlewares ...func(http.Handler) http.Handler) error\n+\n+// Walk walks any router tree that implements Routes interface.\n+func Walk(r Routes, walkFn WalkFunc) error {\n+\treturn walk(r, walkFn, \"\")\n+}\n+\n+func walk(r Routes, walkFn WalkFunc, parentRoute string, parentMw ...func(http.Handler) http.Handler) error {\n+\tfor _, route := range r.Routes() {\n+\t\tmws := make([]func(http.Handler) http.Handler, len(parentMw))\n+\t\tcopy(mws, parentMw)\n+\t\tmws = append(mws, r.Middlewares()...)\n+\n+\t\tif route.SubRoutes != nil {\n+\t\t\tif err := walk(route.SubRoutes, walkFn, parentRoute+route.Pattern, mws...); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tfor method, handler := range route.Handlers {\n+\t\t\tif method == \"*\" {\n+\t\t\t\t// Ignore a \"catchAll\" method, since we pass down all the specific methods for each route.\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\tfullRoute := parentRoute + route.Pattern\n+\t\t\tfullRoute = strings.Replace(fullRoute, \"/*/\", \"/\", -1)\n+\n+\t\t\tif chain, ok := handler.(*ChainHandler); ok {\n+\t\t\t\tif err := walkFn(method, fullRoute, chain.Endpoint, append(mws, chain.Middlewares...)...); err != nil {\n+\t\t\t\t\treturn err\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tif err := walkFn(method, fullRoute, handler, mws...); err != nil {\n+\t\t\t\t\treturn err\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\treturn nil\n+}"
    },
    {
      "sha": "b41686b6aff0dd85df7dc25b09f7279858a3223f",
      "filename": "backend/vendor/github.com/go-chi/cors/README.md",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/cors/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/cors/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/cors/README.md?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -16,8 +16,8 @@ func main() {\n   // Basic CORS\n   // for more ideas, see: https://developer.github.com/v3/#cross-origin-resource-sharing\n   r.Use(cors.Handler(cors.Options{\n-    // AllowedOrigins: []string{\"https://foo.com\"}, // Use this to allow specific origin hosts\n-    AllowedOrigins:   []string{\"*\"},\n+    // AllowedOrigins:   []string{\"https://foo.com\"}, // Use this to allow specific origin hosts\n+    AllowedOrigins:   []string{\"https://*\", \"http://*\"},\n     // AllowOriginFunc:  func(r *http.Request, origin string) bool { return true },\n     AllowedMethods:   []string{\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"},\n     AllowedHeaders:   []string{\"Accept\", \"Authorization\", \"Content-Type\", \"X-CSRF-Token\"},"
    },
    {
      "sha": "26ddfc1c2921c7469f33950518442f91dd10a8af",
      "filename": "backend/vendor/github.com/go-chi/cors/go.mod",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/cors/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-chi/cors/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-chi/cors/go.mod?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,3 @@\n+module github.com/go-chi/cors\n+\n+go 1.14"
    },
    {
      "sha": "5769f2c901c9434c66e9510fa7b52f7af7ecb023",
      "filename": "backend/vendor/github.com/go-pkgz/rest/README.md",
      "status": "modified",
      "additions": 27,
      "deletions": 4,
      "changes": 31,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/README.md?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -83,16 +83,39 @@ It looks for `X-Request-ID` header and makes it as a random id\n  (if not found), then populates it to the result's header\n     and to the request's context.\n \n-### Deprecation \n+### Deprecation middleware\n \n-Adds rhe HTTP Deprecation response header, see [draft-dalal-deprecation-header-00](https://tools.ietf.org/id/draft-dalal-deprecation-header-00.html\n+Adds the HTTP Deprecation response header, see [draft-dalal-deprecation-header-00](https://tools.ietf.org/id/draft-dalal-deprecation-header-00.html\n ) \n-    \n+\n+### BasicAuth middleware\n+\n+BasicAuth middleware requires basic auth and matches user & passwd with client-provided checker. In case if no basic auth headers returns\n+`StatusUnauthorized`, in case if checker failed - `StatusForbidden`\n+\n+## Rewrite middleware\n+\n+Rewrites requests with from->to rule. Supports regex (like nginx) and prevents multiple rewrites. For example `Rewrite(\"^/sites/(.*)/settings/$\", \"/sites/settings/$1\")` will change request's URL from `/sites/id1/settings/` to `/sites/settings/id1`\n+\n+## NoCache middleware\n+\n+Sets a number of HTTP headers to prevent a router (handler's) response from being cached by an upstream proxy and/or client.\n+\n+## Headers middleware\n+\n+Sets headers (passed as key:value) to requests. I.e. `rest.Headers(\"Server:MyServer\", \"X-Blah:Foo\")`\n+\n+## Gzip middleware\n+\n+Compresses response with gzip.\n+\n ## Helpers\n \n+- `rest.Wrap` - converts a list of middlewares to nested handlers calls (in reverse order)\n - `rest.JSON` - map alias, just for convenience `type JSON map[string]interface{}`\n - `rest.RenderJSON` -  renders json response from `interface{}`\n - `rest.RenderJSONFromBytes` - renders json response from `[]byte`\n - `rest.RenderJSONWithHTML` -  renders json response with html tags and forced `charset=utf-8`\n - `rest.SendErrorJSON` - makes `{error: blah, details: blah}` json body and responds with given error code. Also, adds context to the logged message\n-- `rest.NewErrorLogger(l logger.Backend)` creates a struct providing shorter form of logger call\n+- `rest.NewErrorLogger` - creates a struct providing shorter form of logger call\n+- `rest.FileServer` - creates a file server for static assets with directory listing disabled"
    },
    {
      "sha": "6ed0c684bbe01b044681de49152a917e71ce0606",
      "filename": "backend/vendor/github.com/go-pkgz/rest/basic_auth.go",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/basic_auth.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/basic_auth.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/basic_auth.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,26 @@\n+package rest\n+\n+import (\n+\t\"net/http\"\n+)\n+\n+// BasicAuth middleware requires basic auth and matches user & passwd with client-provided checker\n+func BasicAuth(checker func(user, passwd string) bool) func(http.Handler) http.Handler {\n+\n+\treturn func(h http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\n+\t\t\tu, p, ok := r.BasicAuth()\n+\t\t\tif !ok {\n+\t\t\t\tw.WriteHeader(http.StatusUnauthorized)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tif !checker(u, p) {\n+\t\t\t\tw.WriteHeader(http.StatusForbidden)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\th.ServeHTTP(w, r)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}"
    },
    {
      "sha": "b59505578b2537a1dd5765d94ceb5c2e0bbb2b26",
      "filename": "backend/vendor/github.com/go-pkgz/rest/cache_control.go",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/cache_control.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/cache_control.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/cache_control.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -33,3 +33,30 @@ func CacheControl(expiration time.Duration, version string) func(http.Handler) h\n \t\treturn http.HandlerFunc(fn)\n \t}\n }\n+\n+// CacheControlDynamic is a middleware setting cache expiration. Using url+ func(r) for etag\n+func CacheControlDynamic(expiration time.Duration, versionFn func(r *http.Request) string) func(http.Handler) http.Handler {\n+\n+\tetag := func(r *http.Request, version string) string {\n+\t\ts := fmt.Sprintf(\"%s:%s\", version, r.URL.String())\n+\t\treturn fmt.Sprintf(\"%x\", sha1.Sum([]byte(s))) //nolint\n+\t}\n+\n+\treturn func(h http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\n+\t\t\te := `\"` + etag(r, versionFn(r)) + `\"`\n+\t\t\tw.Header().Set(\"Etag\", e)\n+\t\t\tw.Header().Set(\"Cache-Control\", fmt.Sprintf(\"max-age=%d, no-cache\", int(expiration.Seconds())))\n+\n+\t\t\tif match := r.Header.Get(\"If-None-Match\"); match != \"\" {\n+\t\t\t\tif strings.Contains(match, e) {\n+\t\t\t\t\tw.WriteHeader(http.StatusNotModified)\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\th.ServeHTTP(w, r)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}"
    },
    {
      "sha": "7898921e5211f3701cdd46c1bc6968a3ada1e362",
      "filename": "backend/vendor/github.com/go-pkgz/rest/go.mod",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/go.mod?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -4,5 +4,5 @@ go 1.15\n \n require (\n \tgithub.com/pkg/errors v0.9.1\n-\tgithub.com/stretchr/testify v1.6.1\n+\tgithub.com/stretchr/testify v1.7.0\n )"
    },
    {
      "sha": "0caa82c6d10c7efb0c6630105e7c238f6d5b5d9e",
      "filename": "backend/vendor/github.com/go-pkgz/rest/go.sum",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/go.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/go.sum?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -8,6 +8,8 @@ github.com/stretchr/objx v0.1.0 h1:4G4v2dO3VZwixGIRoQ5Lfboy6nUhCyYzaqnIAPPhYs4=\n github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\n github.com/stretchr/testify v1.6.1 h1:hDPOHmpOpP40lSULcqw7IrRb/u7w6RpDC9399XyoNd0=\n github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n+github.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=\n+github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\n gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo="
    },
    {
      "sha": "c5e77c90f67ad3f9a23acbfb1acdc822d15c51a2",
      "filename": "backend/vendor/github.com/go-pkgz/rest/gzip.go",
      "status": "added",
      "additions": 89,
      "deletions": 0,
      "changes": 89,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/gzip.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/gzip.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/gzip.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,89 @@\n+package rest\n+\n+import (\n+\t\"compress/gzip\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"strings\"\n+\t\"sync\"\n+)\n+\n+var gzDefaultContentTypes = []string{\n+\t\"text/css\",\n+\t\"text/javascript\",\n+\t\"text/xml\",\n+\t\"text/html\",\n+\t\"text/plain\",\n+\t\"application/javascript\",\n+\t\"application/x-javascript\",\n+\t\"application/json\",\n+}\n+\n+var gzPool = sync.Pool{\n+\tNew: func() interface{} { return gzip.NewWriter(ioutil.Discard) },\n+}\n+\n+type gzipResponseWriter struct {\n+\tio.Writer\n+\thttp.ResponseWriter\n+}\n+\n+func (w *gzipResponseWriter) WriteHeader(status int) {\n+\tw.Header().Del(\"Content-Length\")\n+\tw.ResponseWriter.WriteHeader(status)\n+}\n+\n+func (w *gzipResponseWriter) Write(b []byte) (int, error) {\n+\treturn w.Writer.Write(b)\n+}\n+\n+// Gzip is a middleware compressing response\n+func Gzip(contentTypes ...string) func(http.Handler) http.Handler {\n+\n+\tgzCts := gzDefaultContentTypes\n+\tif len(contentTypes) > 0 {\n+\t\tgzCts = contentTypes\n+\t}\n+\n+\tcontentType := func(r *http.Request) string {\n+\t\tresult := r.Header.Get(\"Content-type\")\n+\t\tif result == \"\" {\n+\t\t\treturn \"application/octet-stream\"\n+\t\t}\n+\t\treturn result\n+\t}\n+\n+\tf := func(next http.Handler) http.Handler {\n+\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tif !strings.Contains(r.Header.Get(\"Accept-Encoding\"), \"gzip\") {\n+\t\t\t\tnext.ServeHTTP(w, r)\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\tvar gzOk bool\n+\t\t\tctype := contentType(r)\n+\t\t\tfor _, c := range gzCts {\n+\t\t\t\tif strings.HasPrefix(strings.ToLower(ctype), strings.ToLower(c)) {\n+\t\t\t\t\tgzOk = true\n+\t\t\t\t\tbreak\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif !gzOk {\n+\t\t\t\tnext.ServeHTTP(w, r)\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\tw.Header().Set(\"Content-Encoding\", \"gzip\")\n+\t\t\tgz := gzPool.Get().(*gzip.Writer)\n+\t\t\tdefer gzPool.Put(gz)\n+\n+\t\t\tgz.Reset(w)\n+\t\t\tdefer gz.Close()\n+\n+\t\t\tnext.ServeHTTP(&gzipResponseWriter{ResponseWriter: w, Writer: gz}, r)\n+\t\t})\n+\t}\n+\treturn f\n+}"
    },
    {
      "sha": "704ef7458ddac50d79b1a4066d52348708bff7c2",
      "filename": "backend/vendor/github.com/go-pkgz/rest/httperrors.go",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/httperrors.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/httperrors.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/httperrors.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -30,17 +30,15 @@ func (e *ErrorLogger) Log(w http.ResponseWriter, r *http.Request, httpCode int,\n \tif e.l != nil {\n \t\te.l.Logf(\"%s\", errDetailsMsg(r, httpCode, err, m))\n \t}\n-\tw.WriteHeader(httpCode)\n-\tRenderJSON(w, JSON{\"error\": m})\n+\trenderJSONWithStatus(w, JSON{\"error\": m}, httpCode)\n }\n \n // SendErrorJSON sends {error: msg} with error code and logging error and caller\n func SendErrorJSON(w http.ResponseWriter, r *http.Request, l logger.Backend, code int, err error, msg string) {\n \tif l != nil {\n \t\tl.Logf(\"%s\", errDetailsMsg(r, code, err, msg))\n \t}\n-\tw.WriteHeader(code)\n-\tRenderJSON(w, JSON{\"error\": msg})\n+\trenderJSONWithStatus(w, JSON{\"error\": msg}, code)\n }\n \n func errDetailsMsg(r *http.Request, code int, err error, msg string) string {"
    },
    {
      "sha": "a95d592babdc55cb53762c73da7e9f734087f11a",
      "filename": "backend/vendor/github.com/go-pkgz/rest/logger/logger.go",
      "status": "modified",
      "additions": 110,
      "deletions": 34,
      "changes": 144,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/logger/logger.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/logger/logger.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/logger/logger.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -12,26 +12,42 @@ import (\n \t\"net/http\"\n \t\"net/url\"\n \t\"regexp\"\n+\t\"strconv\"\n \t\"strings\"\n \t\"time\"\n )\n \n // Middleware is a logger for rest requests.\n type Middleware struct {\n-\tprefix      string\n-\tlogBody     bool\n-\tmaxBodySize int\n-\tipFn        func(ip string) string\n-\tuserFn      func(r *http.Request) (string, error)\n-\tsubjFn      func(r *http.Request) (string, error)\n-\tlog         Backend\n+\tprefix         string\n+\tlogBody        bool\n+\tmaxBodySize    int\n+\tipFn           func(ip string) string\n+\tuserFn         func(r *http.Request) (string, error)\n+\tsubjFn         func(r *http.Request) (string, error)\n+\tlog            Backend\n+\tapacheCombined bool\n }\n \n // Backend is logging backend\n type Backend interface {\n \tLogf(format string, args ...interface{})\n }\n \n+type logParts struct {\n+\tduration   time.Duration\n+\trawURL     string\n+\tmethod     string\n+\tremoteIP   string\n+\tstatusCode int\n+\trespSize   int\n+\thost       string\n+\n+\tprefix string\n+\tuser   string\n+\tbody   string\n+}\n+\n type stdBackend struct{}\n \n func (s stdBackend) Logf(format string, args ...interface{}) {\n@@ -61,6 +77,11 @@ func New(options ...Option) *Middleware {\n // Handler middleware prints http log\n func (l *Middleware) Handler(next http.Handler) http.Handler {\n \n+\tformater := l.formatDefault\n+\tif l.apacheCombined {\n+\t\tformater = l.formatApacheCombined\n+\t}\n+\n \tfn := func(w http.ResponseWriter, r *http.Request) {\n \t\tww := newCustomResponseWriter(w)\n \n@@ -88,44 +109,99 @@ func (l *Middleware) Handler(next http.Handler) http.Handler {\n \t\t\t\tremoteIP = l.ipFn(remoteIP)\n \t\t\t}\n \n-\t\t\tvar bld strings.Builder\n-\t\t\tif l.prefix != \"\" {\n-\t\t\t\t_, _ = bld.WriteString(l.prefix)\n-\t\t\t\t_, _ = bld.WriteString(\" \")\n-\t\t\t}\n-\n-\t\t\t_, _ = bld.WriteString(fmt.Sprintf(\"%s - %s - %s - %d (%d) - %v\", r.Method, rawurl, remoteIP, ww.status, ww.size, t2.Sub(t1)))\n-\n-\t\t\tif user != \"\" {\n-\t\t\t\t_, _ = bld.WriteString(\" - \")\n-\t\t\t\t_, _ = bld.WriteString(user)\n-\t\t\t}\n-\n-\t\t\tif l.subjFn != nil {\n-\t\t\t\tif subj, err := l.subjFn(r); err == nil {\n-\t\t\t\t\t_, _ = bld.WriteString(\" - \")\n-\t\t\t\t\t_, _ = bld.WriteString(subj)\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif traceID := r.Header.Get(\"X-Request-ID\"); traceID != \"\" {\n-\t\t\t\t_, _ = bld.WriteString(\" - \")\n-\t\t\t\t_, _ = bld.WriteString(traceID)\n+\t\t\tserver := r.URL.Hostname()\n+\t\t\tif server == \"\" {\n+\t\t\t\tserver = strings.Split(r.Host, \":\")[0]\n \t\t\t}\n \n-\t\t\tif body != \"\" {\n-\t\t\t\t_, _ = bld.WriteString(\" - \")\n-\t\t\t\t_, _ = bld.WriteString(body)\n+\t\t\tp := &logParts{\n+\t\t\t\tduration:   t2.Sub(t1),\n+\t\t\t\trawURL:     rawurl,\n+\t\t\t\tmethod:     r.Method,\n+\t\t\t\thost:       server,\n+\t\t\t\tremoteIP:   remoteIP,\n+\t\t\t\tstatusCode: ww.status,\n+\t\t\t\trespSize:   ww.size,\n+\t\t\t\tprefix:     l.prefix,\n+\t\t\t\tuser:       user,\n+\t\t\t\tbody:       body,\n \t\t\t}\n \n-\t\t\tl.log.Logf(\"%s\", bld.String())\n+\t\t\tl.log.Logf(formater(r, p))\n \t\t}()\n \n \t\tnext.ServeHTTP(ww, r)\n \t}\n \treturn http.HandlerFunc(fn)\n }\n \n+func (l *Middleware) formatDefault(r *http.Request, p *logParts) string {\n+\tvar bld strings.Builder\n+\tif l.prefix != \"\" {\n+\t\t_, _ = bld.WriteString(l.prefix)\n+\t\t_, _ = bld.WriteString(\" \")\n+\t}\n+\n+\t_, _ = bld.WriteString(fmt.Sprintf(\"%s - %s - %s - %s - %d (%d) - %v\",\n+\t\tp.method, p.rawURL, p.host, p.remoteIP, p.statusCode, p.respSize, p.duration))\n+\n+\tif p.user != \"\" {\n+\t\t_, _ = bld.WriteString(\" - \")\n+\t\t_, _ = bld.WriteString(p.user)\n+\t}\n+\n+\tif l.subjFn != nil {\n+\t\tif subj, err := l.subjFn(r); err == nil {\n+\t\t\t_, _ = bld.WriteString(\" - \")\n+\t\t\t_, _ = bld.WriteString(subj)\n+\t\t}\n+\t}\n+\n+\tif traceID := r.Header.Get(\"X-Request-ID\"); traceID != \"\" {\n+\t\t_, _ = bld.WriteString(\" - \")\n+\t\t_, _ = bld.WriteString(traceID)\n+\t}\n+\n+\tif p.body != \"\" {\n+\t\t_, _ = bld.WriteString(\" - \")\n+\t\t_, _ = bld.WriteString(p.body)\n+\t}\n+\treturn bld.String()\n+}\n+\n+// 127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] \"GET /apache_pb.gif HTTP/1.0\" 200 2326 \"http://www.example.com/start.html\" \"Mozilla/4.08 [en] (Win98; I ;Nav)\"\n+//nolint gosec\n+func (l *Middleware) formatApacheCombined(r *http.Request, p *logParts) string {\n+\tusername := \"-\"\n+\tif p.user != \"\" {\n+\t\tusername = p.user\n+\t}\n+\n+\tvar bld strings.Builder\n+\tbld.WriteString(p.remoteIP)\n+\tbld.WriteString(\" - \")\n+\tbld.WriteString(username)\n+\tbld.WriteString(\" [\")\n+\tbld.WriteString(time.Now().Format(\"02/Jan/2006:15:04:05 -0700\"))\n+\tbld.WriteString(`] \"`)\n+\tbld.WriteString(p.method)\n+\tbld.WriteString(\" \")\n+\tbld.WriteString(p.rawURL)\n+\tbld.WriteString(`\" `)\n+\tbld.WriteString(r.Proto)\n+\tbld.WriteString(`\" `)\n+\tbld.WriteString(strconv.Itoa(p.statusCode))\n+\tbld.WriteString(\" \")\n+\tbld.WriteString(strconv.Itoa(p.respSize))\n+\n+\tbld.WriteString(` \"`)\n+\tbld.WriteString(r.Header.Get(\"Referer\"))\n+\tbld.WriteString(`\" \"`)\n+\tbld.WriteString(r.Header.Get(\"User-Agent\"))\n+\tbld.WriteString(`\"`)\n+\treturn bld.String()\n+}\n+\n var reMultWhtsp = regexp.MustCompile(`[\\s\\p{Zs}]{2,}`)\n \n func (l *Middleware) getBody(r *http.Request) string {"
    },
    {
      "sha": "24f99de92d275377edba8dbf88d7f2bd154cc158",
      "filename": "backend/vendor/github.com/go-pkgz/rest/logger/options.go",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/logger/options.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/logger/options.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/logger/options.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -49,7 +49,13 @@ func SubjFn(subjFn func(r *http.Request) (string, error)) Option {\n \t}\n }\n \n-// Log sets logging backend. \n+// ApacheCombined sets format to Apache Combined Log.\n+// See http://httpd.apache.org/docs/2.2/logs.html#combined\n+func ApacheCombined(l *Middleware) {\n+\tl.apacheCombined = true\n+}\n+\n+// Log sets logging backend.\n func Log(log Backend) Option {\n \treturn func(l *Middleware) {\n \t\tl.log = log"
    },
    {
      "sha": "a40e02c2a81c9a037ebed06c6c9c711ad077f593",
      "filename": "backend/vendor/github.com/go-pkgz/rest/middleware.go",
      "status": "modified",
      "additions": 35,
      "deletions": 2,
      "changes": 37,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/middleware.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/middleware.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/middleware.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -9,6 +9,18 @@ import (\n \t\"github.com/go-pkgz/rest/logger\"\n )\n \n+// Wrap converts a list of middlewares to nested calls (in reverse order)\n+func Wrap(handler http.Handler, mws ...func(http.Handler) http.Handler) http.Handler {\n+\tif len(mws) == 0 {\n+\t\treturn handler\n+\t}\n+\tres := handler\n+\tfor i := len(mws) - 1; i >= 0; i-- {\n+\t\tres = mws[i](res)\n+\t}\n+\treturn res\n+}\n+\n // AppInfo adds custom app-info to the response header\n func AppInfo(app, author, version string) func(http.Handler) http.Handler {\n \tf := func(h http.Handler) http.Handler {\n@@ -47,8 +59,10 @@ func Recoverer(l logger.Backend) func(http.Handler) http.Handler {\n \t\tfn := func(w http.ResponseWriter, r *http.Request) {\n \t\t\tdefer func() {\n \t\t\t\tif rvr := recover(); rvr != nil {\n-\t\t\t\t\tl.Logf(\"request panic, %v\", rvr)\n-\t\t\t\t\tl.Logf(string(debug.Stack()))\n+\t\t\t\t\tl.Logf(\"request panic for %s from %s, %v\", r.URL.String(), r.RemoteAddr, rvr)\n+\t\t\t\t\tif rvr != http.ErrAbortHandler {\n+\t\t\t\t\t\tl.Logf(string(debug.Stack()))\n+\t\t\t\t\t}\n \t\t\t\t\thttp.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)\n \t\t\t\t}\n \t\t\t}()\n@@ -57,3 +71,22 @@ func Recoverer(l logger.Backend) func(http.Handler) http.Handler {\n \t\treturn http.HandlerFunc(fn)\n \t}\n }\n+\n+// Headers middleware adds headers to request\n+func Headers(headers ...string) func(http.Handler) http.Handler {\n+\n+\treturn func(h http.Handler) http.Handler {\n+\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tfor _, h := range headers {\n+\t\t\t\telems := strings.Split(h, \":\")\n+\t\t\t\tif len(elems) != 2 {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t\tr.Header.Set(strings.TrimSpace(elems[0]), strings.TrimSpace(elems[1]))\n+\t\t\t}\n+\t\t\th.ServeHTTP(w, r)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}"
    },
    {
      "sha": "aa0fa9465be7b11588338395e21ec7ddea350316",
      "filename": "backend/vendor/github.com/go-pkgz/rest/nocache.go",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/nocache.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/nocache.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/nocache.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,55 @@\n+package rest\n+\n+import (\n+\t\"net/http\"\n+\t\"time\"\n+)\n+\n+// borrowed from https://github.com/go-chi/chi/blob/master/middleware/nocache.go\n+\n+var epoch = time.Unix(0, 0).UTC().Format(time.RFC1123)\n+\n+var noCacheHeaders = map[string]string{\n+\t\"Expires\":         epoch,\n+\t\"Cache-Control\":   \"no-cache, no-store, no-transform, must-revalidate, private, max-age=0\",\n+\t\"Pragma\":          \"no-cache\",\n+\t\"X-Accel-Expires\": \"0\",\n+}\n+\n+var etagHeaders = []string{\n+\t\"ETag\",\n+\t\"If-Modified-Since\",\n+\t\"If-Match\",\n+\t\"If-None-Match\",\n+\t\"If-Range\",\n+\t\"If-Unmodified-Since\",\n+}\n+\n+// NoCache is a simple piece of middleware that sets a number of HTTP headers to prevent\n+// a router (or subrouter) from being cached by an upstream proxy and/or client.\n+//\n+// As per http://wiki.nginx.org/HttpProxyModule - NoCache sets:\n+//      Expires: Thu, 01 Jan 1970 00:00:00 UTC\n+//      Cache-Control: no-cache, private, max-age=0\n+//      X-Accel-Expires: 0\n+//      Pragma: no-cache (for HTTP/1.0 proxies/clients)\n+func NoCache(h http.Handler) http.Handler {\n+\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\n+\t\t// Delete any ETag headers that may have been set\n+\t\tfor _, v := range etagHeaders {\n+\t\t\tif r.Header.Get(v) != \"\" {\n+\t\t\t\tr.Header.Del(v)\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Set our NoCache headers\n+\t\tfor k, v := range noCacheHeaders {\n+\t\t\tw.Header().Set(k, v)\n+\t\t}\n+\n+\t\th.ServeHTTP(w, r)\n+\t}\n+\n+\treturn http.HandlerFunc(fn)\n+}"
    },
    {
      "sha": "82361bcac0a988079338cef98aaef41be673309b",
      "filename": "backend/vendor/github.com/go-pkgz/rest/rest.go",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/rest.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/go-pkgz/rest/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/rest/rest.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -53,3 +53,17 @@ func RenderJSONWithHTML(w http.ResponseWriter, r *http.Request, v interface{}) e\n \t}\n \treturn RenderJSONFromBytes(w, r, data)\n }\n+\n+// renderJSONWithStatus sends data as json and enforces status code\n+func renderJSONWithStatus(w http.ResponseWriter, data interface{}, code int) {\n+\tbuf := &bytes.Buffer{}\n+\tenc := json.NewEncoder(buf)\n+\tenc.SetEscapeHTML(true)\n+\tif err := enc.Encode(data); err != nil {\n+\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n+\t\treturn\n+\t}\n+\tw.Header().Set(\"Content-Type\", \"application/json; charset=utf-8\")\n+\tw.WriteHeader(code)\n+\t_, _ = w.Write(buf.Bytes())\n+}"
    },
    {
      "sha": "b73be32d58831f4b06386c55494cf8389233b120",
      "filename": "backend/vendor/github.com/kyokomi/emoji/emoji_codemap.go",
      "status": "removed",
      "additions": 0,
      "deletions": 7677,
      "changes": 7677,
      "blob_url": "https://github.com/umputun/remark42/blob/abd628e1dc8d042198138c4baa53f2e5d2a32e08/backend/vendor/github.com/kyokomi/emoji/emoji_codemap.go",
      "raw_url": "https://github.com/umputun/remark42/raw/abd628e1dc8d042198138c4baa53f2e5d2a32e08/backend/vendor/github.com/kyokomi/emoji/emoji_codemap.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/kyokomi/emoji/emoji_codemap.go?ref=abd628e1dc8d042198138c4baa53f2e5d2a32e08"
    },
    {
      "sha": "8cd9b91689a327c7886fafa322602900ee41b9a1",
      "filename": "backend/vendor/github.com/kyokomi/emoji/v2/.gitignore",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/.gitignore",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/.gitignore",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/kyokomi/emoji/v2/.gitignore?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "previous_filename": "backend/vendor/github.com/kyokomi/emoji/.gitignore"
    },
    {
      "sha": "239874e0cb73317ef75c41e65c0f21f45baf87e4",
      "filename": "backend/vendor/github.com/kyokomi/emoji/v2/LICENSE",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/LICENSE",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/kyokomi/emoji/v2/LICENSE?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "previous_filename": "backend/vendor/github.com/kyokomi/emoji/LICENSE"
    },
    {
      "sha": "e604598591c09f6afabe21ab8f2a8e5ff9a75102",
      "filename": "backend/vendor/github.com/kyokomi/emoji/v2/README.md",
      "status": "renamed",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/kyokomi/emoji/v2/README.md?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -3,19 +3,19 @@ Emoji is a simple golang package.\n \n [![wercker status](https://app.wercker.com/status/7bef60de2c6d3e0e6c13d56b2393c5d8/s/master \"wercker status\")](https://app.wercker.com/project/byKey/7bef60de2c6d3e0e6c13d56b2393c5d8)\n [![Coverage Status](https://coveralls.io/repos/kyokomi/emoji/badge.png?branch=master)](https://coveralls.io/r/kyokomi/emoji?branch=master)\n-[![GoDoc](https://godoc.org/github.com/kyokomi/emoji?status.svg)](https://godoc.org/github.com/kyokomi/emoji)\n+[![GoDoc](https://pkg.go.dev/badge/github.com/kyokomi/emoji.svg)](https://pkg.go.dev/github.com/kyokomi/emoji/v2)\n \n Get it:\n \n ```\n-go get github.com/kyokomi/emoji\n+go get github.com/kyokomi/emoji/v2\n ```\n \n Import it:\n \n ```\n import (\n-\t\"github.com/kyokomi/emoji\"\n+\t\"github.com/kyokomi/emoji/v2\"\n )\n ```\n \n@@ -27,7 +27,7 @@ package main\n import (\n \t\"fmt\"\n \n-\t\"github.com/kyokomi/emoji\"\n+\t\"github.com/kyokomi/emoji/v2\"\n )\n \n func main() {",
      "previous_filename": "backend/vendor/github.com/kyokomi/emoji/README.md"
    },
    {
      "sha": "6913a2ea4a2929fef945025ad79375084efad1f4",
      "filename": "backend/vendor/github.com/kyokomi/emoji/v2/emoji.go",
      "status": "renamed",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/emoji.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/emoji.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/kyokomi/emoji/v2/emoji.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -10,25 +10,25 @@ import (\n \t\"unicode\"\n )\n \n-//go:generate generateEmojiCodeMap -pkg emoji\n+//go:generate generateEmojiCodeMap -pkg emoji -o emoji_codemap.go\n \n // Replace Padding character for emoji.\n-const (\n+var (\n \tReplacePadding = \" \"\n )\n \n // CodeMap gets the underlying map of emoji.\n func CodeMap() map[string]string {\n-\treturn emojiCodeMap\n+\treturn emojiCode()\n }\n \n // RevCodeMap gets the underlying map of emoji.\n func RevCodeMap() map[string][]string {\n-\treturn emojiRevCodeMap\n+\treturn emojiRevCode()\n }\n \n func AliasList(shortCode string) []string {\n-\treturn emojiRevCodeMap[emojiCodeMap[shortCode]]\n+\treturn emojiRevCode()[emojiCode()[shortCode]]\n }\n \n // HasAlias flags if the given `shortCode` has multiple aliases with other\n@@ -50,7 +50,7 @@ func NormalizeShortCode(shortCode string) string {\n var flagRegexp = regexp.MustCompile(\":flag-([a-z]{2}):\")\n \n func emojize(x string) string {\n-\tstr, ok := emojiCodeMap[x]\n+\tstr, ok := emojiCode()[x]\n \tif ok {\n \t\treturn str + ReplacePadding\n \t}",
      "previous_filename": "backend/vendor/github.com/kyokomi/emoji/emoji.go"
    },
    {
      "sha": "9a9d73b05e1c0b84fd3fa2adede4d794beb4474c",
      "filename": "backend/vendor/github.com/kyokomi/emoji/v2/emoji_codemap.go",
      "status": "added",
      "additions": 7715,
      "deletions": 0,
      "changes": 7715,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/emoji_codemap.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/emoji_codemap.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/kyokomi/emoji/v2/emoji_codemap.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e"
    },
    {
      "sha": "f18dda2046f78fc0a423d4b23930e2f0acd763e2",
      "filename": "backend/vendor/github.com/kyokomi/emoji/v2/go.mod",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/kyokomi/emoji/v2/go.mod?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,3 @@\n+module github.com/kyokomi/emoji/v2\n+\n+go 1.14"
    },
    {
      "sha": "2c4a6930afd31dd119bf6b75d2a466a1b6f84f72",
      "filename": "backend/vendor/github.com/kyokomi/emoji/v2/wercker.yml",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/wercker.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/kyokomi/emoji/v2/wercker.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/kyokomi/emoji/v2/wercker.yml?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -9,7 +9,7 @@ build:\n         name: install tools\n         code: |\n           go get github.com/mattn/goveralls\n-          go get github.com/golangci/golangci-lint/cmd/golangci-lint\n+          GO111MODULE=on go get github.com/golangci/golangci-lint/cmd/golangci-lint\n     - script:\n         name: go get\n         code: |",
      "previous_filename": "backend/vendor/github.com/kyokomi/emoji/wercker.yml"
    },
    {
      "sha": "41649d26792461a0e999695e0c91a15d72b5898a",
      "filename": "backend/vendor/github.com/stretchr/testify/assert/assertion_compare.go",
      "status": "modified",
      "additions": 146,
      "deletions": 26,
      "changes": 172,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/assert/assertion_compare.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/assert/assertion_compare.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/stretchr/testify/assert/assertion_compare.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -13,12 +13,42 @@ const (\n \tcompareGreater\n )\n \n+var (\n+\tintType   = reflect.TypeOf(int(1))\n+\tint8Type  = reflect.TypeOf(int8(1))\n+\tint16Type = reflect.TypeOf(int16(1))\n+\tint32Type = reflect.TypeOf(int32(1))\n+\tint64Type = reflect.TypeOf(int64(1))\n+\n+\tuintType   = reflect.TypeOf(uint(1))\n+\tuint8Type  = reflect.TypeOf(uint8(1))\n+\tuint16Type = reflect.TypeOf(uint16(1))\n+\tuint32Type = reflect.TypeOf(uint32(1))\n+\tuint64Type = reflect.TypeOf(uint64(1))\n+\n+\tfloat32Type = reflect.TypeOf(float32(1))\n+\tfloat64Type = reflect.TypeOf(float64(1))\n+\n+\tstringType = reflect.TypeOf(\"\")\n+)\n+\n func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n+\tobj1Value := reflect.ValueOf(obj1)\n+\tobj2Value := reflect.ValueOf(obj2)\n+\n+\t// throughout this switch we try and avoid calling .Convert() if possible,\n+\t// as this has a pretty big performance impact\n \tswitch kind {\n \tcase reflect.Int:\n \t\t{\n-\t\t\tintobj1 := obj1.(int)\n-\t\t\tintobj2 := obj2.(int)\n+\t\t\tintobj1, ok := obj1.(int)\n+\t\t\tif !ok {\n+\t\t\t\tintobj1 = obj1Value.Convert(intType).Interface().(int)\n+\t\t\t}\n+\t\t\tintobj2, ok := obj2.(int)\n+\t\t\tif !ok {\n+\t\t\t\tintobj2 = obj2Value.Convert(intType).Interface().(int)\n+\t\t\t}\n \t\t\tif intobj1 > intobj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -31,8 +61,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.Int8:\n \t\t{\n-\t\t\tint8obj1 := obj1.(int8)\n-\t\t\tint8obj2 := obj2.(int8)\n+\t\t\tint8obj1, ok := obj1.(int8)\n+\t\t\tif !ok {\n+\t\t\t\tint8obj1 = obj1Value.Convert(int8Type).Interface().(int8)\n+\t\t\t}\n+\t\t\tint8obj2, ok := obj2.(int8)\n+\t\t\tif !ok {\n+\t\t\t\tint8obj2 = obj2Value.Convert(int8Type).Interface().(int8)\n+\t\t\t}\n \t\t\tif int8obj1 > int8obj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -45,8 +81,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.Int16:\n \t\t{\n-\t\t\tint16obj1 := obj1.(int16)\n-\t\t\tint16obj2 := obj2.(int16)\n+\t\t\tint16obj1, ok := obj1.(int16)\n+\t\t\tif !ok {\n+\t\t\t\tint16obj1 = obj1Value.Convert(int16Type).Interface().(int16)\n+\t\t\t}\n+\t\t\tint16obj2, ok := obj2.(int16)\n+\t\t\tif !ok {\n+\t\t\t\tint16obj2 = obj2Value.Convert(int16Type).Interface().(int16)\n+\t\t\t}\n \t\t\tif int16obj1 > int16obj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -59,8 +101,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.Int32:\n \t\t{\n-\t\t\tint32obj1 := obj1.(int32)\n-\t\t\tint32obj2 := obj2.(int32)\n+\t\t\tint32obj1, ok := obj1.(int32)\n+\t\t\tif !ok {\n+\t\t\t\tint32obj1 = obj1Value.Convert(int32Type).Interface().(int32)\n+\t\t\t}\n+\t\t\tint32obj2, ok := obj2.(int32)\n+\t\t\tif !ok {\n+\t\t\t\tint32obj2 = obj2Value.Convert(int32Type).Interface().(int32)\n+\t\t\t}\n \t\t\tif int32obj1 > int32obj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -73,8 +121,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.Int64:\n \t\t{\n-\t\t\tint64obj1 := obj1.(int64)\n-\t\t\tint64obj2 := obj2.(int64)\n+\t\t\tint64obj1, ok := obj1.(int64)\n+\t\t\tif !ok {\n+\t\t\t\tint64obj1 = obj1Value.Convert(int64Type).Interface().(int64)\n+\t\t\t}\n+\t\t\tint64obj2, ok := obj2.(int64)\n+\t\t\tif !ok {\n+\t\t\t\tint64obj2 = obj2Value.Convert(int64Type).Interface().(int64)\n+\t\t\t}\n \t\t\tif int64obj1 > int64obj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -87,8 +141,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.Uint:\n \t\t{\n-\t\t\tuintobj1 := obj1.(uint)\n-\t\t\tuintobj2 := obj2.(uint)\n+\t\t\tuintobj1, ok := obj1.(uint)\n+\t\t\tif !ok {\n+\t\t\t\tuintobj1 = obj1Value.Convert(uintType).Interface().(uint)\n+\t\t\t}\n+\t\t\tuintobj2, ok := obj2.(uint)\n+\t\t\tif !ok {\n+\t\t\t\tuintobj2 = obj2Value.Convert(uintType).Interface().(uint)\n+\t\t\t}\n \t\t\tif uintobj1 > uintobj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -101,8 +161,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.Uint8:\n \t\t{\n-\t\t\tuint8obj1 := obj1.(uint8)\n-\t\t\tuint8obj2 := obj2.(uint8)\n+\t\t\tuint8obj1, ok := obj1.(uint8)\n+\t\t\tif !ok {\n+\t\t\t\tuint8obj1 = obj1Value.Convert(uint8Type).Interface().(uint8)\n+\t\t\t}\n+\t\t\tuint8obj2, ok := obj2.(uint8)\n+\t\t\tif !ok {\n+\t\t\t\tuint8obj2 = obj2Value.Convert(uint8Type).Interface().(uint8)\n+\t\t\t}\n \t\t\tif uint8obj1 > uint8obj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -115,8 +181,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.Uint16:\n \t\t{\n-\t\t\tuint16obj1 := obj1.(uint16)\n-\t\t\tuint16obj2 := obj2.(uint16)\n+\t\t\tuint16obj1, ok := obj1.(uint16)\n+\t\t\tif !ok {\n+\t\t\t\tuint16obj1 = obj1Value.Convert(uint16Type).Interface().(uint16)\n+\t\t\t}\n+\t\t\tuint16obj2, ok := obj2.(uint16)\n+\t\t\tif !ok {\n+\t\t\t\tuint16obj2 = obj2Value.Convert(uint16Type).Interface().(uint16)\n+\t\t\t}\n \t\t\tif uint16obj1 > uint16obj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -129,8 +201,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.Uint32:\n \t\t{\n-\t\t\tuint32obj1 := obj1.(uint32)\n-\t\t\tuint32obj2 := obj2.(uint32)\n+\t\t\tuint32obj1, ok := obj1.(uint32)\n+\t\t\tif !ok {\n+\t\t\t\tuint32obj1 = obj1Value.Convert(uint32Type).Interface().(uint32)\n+\t\t\t}\n+\t\t\tuint32obj2, ok := obj2.(uint32)\n+\t\t\tif !ok {\n+\t\t\t\tuint32obj2 = obj2Value.Convert(uint32Type).Interface().(uint32)\n+\t\t\t}\n \t\t\tif uint32obj1 > uint32obj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -143,8 +221,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.Uint64:\n \t\t{\n-\t\t\tuint64obj1 := obj1.(uint64)\n-\t\t\tuint64obj2 := obj2.(uint64)\n+\t\t\tuint64obj1, ok := obj1.(uint64)\n+\t\t\tif !ok {\n+\t\t\t\tuint64obj1 = obj1Value.Convert(uint64Type).Interface().(uint64)\n+\t\t\t}\n+\t\t\tuint64obj2, ok := obj2.(uint64)\n+\t\t\tif !ok {\n+\t\t\t\tuint64obj2 = obj2Value.Convert(uint64Type).Interface().(uint64)\n+\t\t\t}\n \t\t\tif uint64obj1 > uint64obj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -157,8 +241,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.Float32:\n \t\t{\n-\t\t\tfloat32obj1 := obj1.(float32)\n-\t\t\tfloat32obj2 := obj2.(float32)\n+\t\t\tfloat32obj1, ok := obj1.(float32)\n+\t\t\tif !ok {\n+\t\t\t\tfloat32obj1 = obj1Value.Convert(float32Type).Interface().(float32)\n+\t\t\t}\n+\t\t\tfloat32obj2, ok := obj2.(float32)\n+\t\t\tif !ok {\n+\t\t\t\tfloat32obj2 = obj2Value.Convert(float32Type).Interface().(float32)\n+\t\t\t}\n \t\t\tif float32obj1 > float32obj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -171,8 +261,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.Float64:\n \t\t{\n-\t\t\tfloat64obj1 := obj1.(float64)\n-\t\t\tfloat64obj2 := obj2.(float64)\n+\t\t\tfloat64obj1, ok := obj1.(float64)\n+\t\t\tif !ok {\n+\t\t\t\tfloat64obj1 = obj1Value.Convert(float64Type).Interface().(float64)\n+\t\t\t}\n+\t\t\tfloat64obj2, ok := obj2.(float64)\n+\t\t\tif !ok {\n+\t\t\t\tfloat64obj2 = obj2Value.Convert(float64Type).Interface().(float64)\n+\t\t\t}\n \t\t\tif float64obj1 > float64obj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -185,8 +281,14 @@ func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {\n \t\t}\n \tcase reflect.String:\n \t\t{\n-\t\t\tstringobj1 := obj1.(string)\n-\t\t\tstringobj2 := obj2.(string)\n+\t\t\tstringobj1, ok := obj1.(string)\n+\t\t\tif !ok {\n+\t\t\t\tstringobj1 = obj1Value.Convert(stringType).Interface().(string)\n+\t\t\t}\n+\t\t\tstringobj2, ok := obj2.(string)\n+\t\t\tif !ok {\n+\t\t\t\tstringobj2 = obj2Value.Convert(stringType).Interface().(string)\n+\t\t\t}\n \t\t\tif stringobj1 > stringobj2 {\n \t\t\t\treturn compareGreater, true\n \t\t\t}\n@@ -240,6 +342,24 @@ func LessOrEqual(t TestingT, e1 interface{}, e2 interface{}, msgAndArgs ...inter\n \treturn compareTwoValues(t, e1, e2, []CompareType{compareLess, compareEqual}, \"\\\"%v\\\" is not less than or equal to \\\"%v\\\"\", msgAndArgs)\n }\n \n+// Positive asserts that the specified element is positive\n+//\n+//    assert.Positive(t, 1)\n+//    assert.Positive(t, 1.23)\n+func Positive(t TestingT, e interface{}, msgAndArgs ...interface{}) bool {\n+\tzero := reflect.Zero(reflect.TypeOf(e))\n+\treturn compareTwoValues(t, e, zero.Interface(), []CompareType{compareGreater}, \"\\\"%v\\\" is not positive\", msgAndArgs)\n+}\n+\n+// Negative asserts that the specified element is negative\n+//\n+//    assert.Negative(t, -1)\n+//    assert.Negative(t, -1.23)\n+func Negative(t TestingT, e interface{}, msgAndArgs ...interface{}) bool {\n+\tzero := reflect.Zero(reflect.TypeOf(e))\n+\treturn compareTwoValues(t, e, zero.Interface(), []CompareType{compareLess}, \"\\\"%v\\\" is not negative\", msgAndArgs)\n+}\n+\n func compareTwoValues(t TestingT, e1 interface{}, e2 interface{}, allowedComparesResults []CompareType, failMessage string, msgAndArgs ...interface{}) bool {\n \tif h, ok := t.(tHelper); ok {\n \t\th.Helper()"
    },
    {
      "sha": "4dfd1229a8617f401e11efa0ad461447f31c1b3e",
      "filename": "backend/vendor/github.com/stretchr/testify/assert/assertion_format.go",
      "status": "modified",
      "additions": 97,
      "deletions": 0,
      "changes": 97,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/assert/assertion_format.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/assert/assertion_format.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/stretchr/testify/assert/assertion_format.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -114,6 +114,24 @@ func Errorf(t TestingT, err error, msg string, args ...interface{}) bool {\n \treturn Error(t, err, append([]interface{}{msg}, args...)...)\n }\n \n+// ErrorAsf asserts that at least one of the errors in err's chain matches target, and if so, sets target to that error value.\n+// This is a wrapper for errors.As.\n+func ErrorAsf(t TestingT, err error, target interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn ErrorAs(t, err, target, append([]interface{}{msg}, args...)...)\n+}\n+\n+// ErrorIsf asserts that at least one of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func ErrorIsf(t TestingT, err error, target error, msg string, args ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn ErrorIs(t, err, target, append([]interface{}{msg}, args...)...)\n+}\n+\n // Eventuallyf asserts that given condition will be met in waitFor time,\n // periodically checking target function each tick.\n //\n@@ -321,6 +339,54 @@ func InEpsilonSlicef(t TestingT, expected interface{}, actual interface{}, epsil\n \treturn InEpsilonSlice(t, expected, actual, epsilon, append([]interface{}{msg}, args...)...)\n }\n \n+// IsDecreasingf asserts that the collection is decreasing\n+//\n+//    assert.IsDecreasingf(t, []int{2, 1, 0}, \"error message %s\", \"formatted\")\n+//    assert.IsDecreasingf(t, []float{2, 1}, \"error message %s\", \"formatted\")\n+//    assert.IsDecreasingf(t, []string{\"b\", \"a\"}, \"error message %s\", \"formatted\")\n+func IsDecreasingf(t TestingT, object interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsDecreasing(t, object, append([]interface{}{msg}, args...)...)\n+}\n+\n+// IsIncreasingf asserts that the collection is increasing\n+//\n+//    assert.IsIncreasingf(t, []int{1, 2, 3}, \"error message %s\", \"formatted\")\n+//    assert.IsIncreasingf(t, []float{1, 2}, \"error message %s\", \"formatted\")\n+//    assert.IsIncreasingf(t, []string{\"a\", \"b\"}, \"error message %s\", \"formatted\")\n+func IsIncreasingf(t TestingT, object interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsIncreasing(t, object, append([]interface{}{msg}, args...)...)\n+}\n+\n+// IsNonDecreasingf asserts that the collection is not decreasing\n+//\n+//    assert.IsNonDecreasingf(t, []int{1, 1, 2}, \"error message %s\", \"formatted\")\n+//    assert.IsNonDecreasingf(t, []float{1, 2}, \"error message %s\", \"formatted\")\n+//    assert.IsNonDecreasingf(t, []string{\"a\", \"b\"}, \"error message %s\", \"formatted\")\n+func IsNonDecreasingf(t TestingT, object interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsNonDecreasing(t, object, append([]interface{}{msg}, args...)...)\n+}\n+\n+// IsNonIncreasingf asserts that the collection is not increasing\n+//\n+//    assert.IsNonIncreasingf(t, []int{2, 1, 1}, \"error message %s\", \"formatted\")\n+//    assert.IsNonIncreasingf(t, []float{2, 1}, \"error message %s\", \"formatted\")\n+//    assert.IsNonIncreasingf(t, []string{\"b\", \"a\"}, \"error message %s\", \"formatted\")\n+func IsNonIncreasingf(t TestingT, object interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsNonIncreasing(t, object, append([]interface{}{msg}, args...)...)\n+}\n+\n // IsTypef asserts that the specified objects are of the same type.\n func IsTypef(t TestingT, expectedType interface{}, object interface{}, msg string, args ...interface{}) bool {\n \tif h, ok := t.(tHelper); ok {\n@@ -375,6 +441,17 @@ func LessOrEqualf(t TestingT, e1 interface{}, e2 interface{}, msg string, args .\n \treturn LessOrEqual(t, e1, e2, append([]interface{}{msg}, args...)...)\n }\n \n+// Negativef asserts that the specified element is negative\n+//\n+//    assert.Negativef(t, -1, \"error message %s\", \"formatted\")\n+//    assert.Negativef(t, -1.23, \"error message %s\", \"formatted\")\n+func Negativef(t TestingT, e interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn Negative(t, e, append([]interface{}{msg}, args...)...)\n+}\n+\n // Neverf asserts that the given condition doesn't satisfy in waitFor time,\n // periodically checking the target function each tick.\n //\n@@ -476,6 +553,15 @@ func NotEqualValuesf(t TestingT, expected interface{}, actual interface{}, msg s\n \treturn NotEqualValues(t, expected, actual, append([]interface{}{msg}, args...)...)\n }\n \n+// NotErrorIsf asserts that at none of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func NotErrorIsf(t TestingT, err error, target error, msg string, args ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn NotErrorIs(t, err, target, append([]interface{}{msg}, args...)...)\n+}\n+\n // NotNilf asserts that the specified object is not nil.\n //\n //    assert.NotNilf(t, err, \"error message %s\", \"formatted\")\n@@ -572,6 +658,17 @@ func PanicsWithValuef(t TestingT, expected interface{}, f PanicTestFunc, msg str\n \treturn PanicsWithValue(t, expected, f, append([]interface{}{msg}, args...)...)\n }\n \n+// Positivef asserts that the specified element is positive\n+//\n+//    assert.Positivef(t, 1, \"error message %s\", \"formatted\")\n+//    assert.Positivef(t, 1.23, \"error message %s\", \"formatted\")\n+func Positivef(t TestingT, e interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn Positive(t, e, append([]interface{}{msg}, args...)...)\n+}\n+\n // Regexpf asserts that a specified regexp matches a string.\n //\n //  assert.Regexpf(t, regexp.MustCompile(\"start\"), \"it's starting\", \"error message %s\", \"formatted\")"
    },
    {
      "sha": "25337a6f07e6e05f3f29e5493cc2ba71cc474abb",
      "filename": "backend/vendor/github.com/stretchr/testify/assert/assertion_forward.go",
      "status": "modified",
      "additions": 194,
      "deletions": 0,
      "changes": 194,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/assert/assertion_forward.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/assert/assertion_forward.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/stretchr/testify/assert/assertion_forward.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -204,6 +204,42 @@ func (a *Assertions) Error(err error, msgAndArgs ...interface{}) bool {\n \treturn Error(a.t, err, msgAndArgs...)\n }\n \n+// ErrorAs asserts that at least one of the errors in err's chain matches target, and if so, sets target to that error value.\n+// This is a wrapper for errors.As.\n+func (a *Assertions) ErrorAs(err error, target interface{}, msgAndArgs ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn ErrorAs(a.t, err, target, msgAndArgs...)\n+}\n+\n+// ErrorAsf asserts that at least one of the errors in err's chain matches target, and if so, sets target to that error value.\n+// This is a wrapper for errors.As.\n+func (a *Assertions) ErrorAsf(err error, target interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn ErrorAsf(a.t, err, target, msg, args...)\n+}\n+\n+// ErrorIs asserts that at least one of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func (a *Assertions) ErrorIs(err error, target error, msgAndArgs ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn ErrorIs(a.t, err, target, msgAndArgs...)\n+}\n+\n+// ErrorIsf asserts that at least one of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func (a *Assertions) ErrorIsf(err error, target error, msg string, args ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn ErrorIsf(a.t, err, target, msg, args...)\n+}\n+\n // Errorf asserts that a function returned an error (i.e. not `nil`).\n //\n //   actualObj, err := SomeFunction()\n@@ -631,6 +667,102 @@ func (a *Assertions) InEpsilonf(expected interface{}, actual interface{}, epsilo\n \treturn InEpsilonf(a.t, expected, actual, epsilon, msg, args...)\n }\n \n+// IsDecreasing asserts that the collection is decreasing\n+//\n+//    a.IsDecreasing([]int{2, 1, 0})\n+//    a.IsDecreasing([]float{2, 1})\n+//    a.IsDecreasing([]string{\"b\", \"a\"})\n+func (a *Assertions) IsDecreasing(object interface{}, msgAndArgs ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsDecreasing(a.t, object, msgAndArgs...)\n+}\n+\n+// IsDecreasingf asserts that the collection is decreasing\n+//\n+//    a.IsDecreasingf([]int{2, 1, 0}, \"error message %s\", \"formatted\")\n+//    a.IsDecreasingf([]float{2, 1}, \"error message %s\", \"formatted\")\n+//    a.IsDecreasingf([]string{\"b\", \"a\"}, \"error message %s\", \"formatted\")\n+func (a *Assertions) IsDecreasingf(object interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsDecreasingf(a.t, object, msg, args...)\n+}\n+\n+// IsIncreasing asserts that the collection is increasing\n+//\n+//    a.IsIncreasing([]int{1, 2, 3})\n+//    a.IsIncreasing([]float{1, 2})\n+//    a.IsIncreasing([]string{\"a\", \"b\"})\n+func (a *Assertions) IsIncreasing(object interface{}, msgAndArgs ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsIncreasing(a.t, object, msgAndArgs...)\n+}\n+\n+// IsIncreasingf asserts that the collection is increasing\n+//\n+//    a.IsIncreasingf([]int{1, 2, 3}, \"error message %s\", \"formatted\")\n+//    a.IsIncreasingf([]float{1, 2}, \"error message %s\", \"formatted\")\n+//    a.IsIncreasingf([]string{\"a\", \"b\"}, \"error message %s\", \"formatted\")\n+func (a *Assertions) IsIncreasingf(object interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsIncreasingf(a.t, object, msg, args...)\n+}\n+\n+// IsNonDecreasing asserts that the collection is not decreasing\n+//\n+//    a.IsNonDecreasing([]int{1, 1, 2})\n+//    a.IsNonDecreasing([]float{1, 2})\n+//    a.IsNonDecreasing([]string{\"a\", \"b\"})\n+func (a *Assertions) IsNonDecreasing(object interface{}, msgAndArgs ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsNonDecreasing(a.t, object, msgAndArgs...)\n+}\n+\n+// IsNonDecreasingf asserts that the collection is not decreasing\n+//\n+//    a.IsNonDecreasingf([]int{1, 1, 2}, \"error message %s\", \"formatted\")\n+//    a.IsNonDecreasingf([]float{1, 2}, \"error message %s\", \"formatted\")\n+//    a.IsNonDecreasingf([]string{\"a\", \"b\"}, \"error message %s\", \"formatted\")\n+func (a *Assertions) IsNonDecreasingf(object interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsNonDecreasingf(a.t, object, msg, args...)\n+}\n+\n+// IsNonIncreasing asserts that the collection is not increasing\n+//\n+//    a.IsNonIncreasing([]int{2, 1, 1})\n+//    a.IsNonIncreasing([]float{2, 1})\n+//    a.IsNonIncreasing([]string{\"b\", \"a\"})\n+func (a *Assertions) IsNonIncreasing(object interface{}, msgAndArgs ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsNonIncreasing(a.t, object, msgAndArgs...)\n+}\n+\n+// IsNonIncreasingf asserts that the collection is not increasing\n+//\n+//    a.IsNonIncreasingf([]int{2, 1, 1}, \"error message %s\", \"formatted\")\n+//    a.IsNonIncreasingf([]float{2, 1}, \"error message %s\", \"formatted\")\n+//    a.IsNonIncreasingf([]string{\"b\", \"a\"}, \"error message %s\", \"formatted\")\n+func (a *Assertions) IsNonIncreasingf(object interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn IsNonIncreasingf(a.t, object, msg, args...)\n+}\n+\n // IsType asserts that the specified objects are of the same type.\n func (a *Assertions) IsType(expectedType interface{}, object interface{}, msgAndArgs ...interface{}) bool {\n \tif h, ok := a.t.(tHelper); ok {\n@@ -739,6 +871,28 @@ func (a *Assertions) Lessf(e1 interface{}, e2 interface{}, msg string, args ...i\n \treturn Lessf(a.t, e1, e2, msg, args...)\n }\n \n+// Negative asserts that the specified element is negative\n+//\n+//    a.Negative(-1)\n+//    a.Negative(-1.23)\n+func (a *Assertions) Negative(e interface{}, msgAndArgs ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn Negative(a.t, e, msgAndArgs...)\n+}\n+\n+// Negativef asserts that the specified element is negative\n+//\n+//    a.Negativef(-1, \"error message %s\", \"formatted\")\n+//    a.Negativef(-1.23, \"error message %s\", \"formatted\")\n+func (a *Assertions) Negativef(e interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn Negativef(a.t, e, msg, args...)\n+}\n+\n // Never asserts that the given condition doesn't satisfy in waitFor time,\n // periodically checking the target function each tick.\n //\n@@ -941,6 +1095,24 @@ func (a *Assertions) NotEqualf(expected interface{}, actual interface{}, msg str\n \treturn NotEqualf(a.t, expected, actual, msg, args...)\n }\n \n+// NotErrorIs asserts that at none of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func (a *Assertions) NotErrorIs(err error, target error, msgAndArgs ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn NotErrorIs(a.t, err, target, msgAndArgs...)\n+}\n+\n+// NotErrorIsf asserts that at none of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func (a *Assertions) NotErrorIsf(err error, target error, msg string, args ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn NotErrorIsf(a.t, err, target, msg, args...)\n+}\n+\n // NotNil asserts that the specified object is not nil.\n //\n //    a.NotNil(err)\n@@ -1133,6 +1305,28 @@ func (a *Assertions) Panicsf(f PanicTestFunc, msg string, args ...interface{}) b\n \treturn Panicsf(a.t, f, msg, args...)\n }\n \n+// Positive asserts that the specified element is positive\n+//\n+//    a.Positive(1)\n+//    a.Positive(1.23)\n+func (a *Assertions) Positive(e interface{}, msgAndArgs ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn Positive(a.t, e, msgAndArgs...)\n+}\n+\n+// Positivef asserts that the specified element is positive\n+//\n+//    a.Positivef(1, \"error message %s\", \"formatted\")\n+//    a.Positivef(1.23, \"error message %s\", \"formatted\")\n+func (a *Assertions) Positivef(e interface{}, msg string, args ...interface{}) bool {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\treturn Positivef(a.t, e, msg, args...)\n+}\n+\n // Regexp asserts that a specified regexp matches a string.\n //\n //  a.Regexp(regexp.MustCompile(\"start\"), \"it's starting\")"
    },
    {
      "sha": "1c3b47182a726afbfb1890c5119144bad1bcf8c9",
      "filename": "backend/vendor/github.com/stretchr/testify/assert/assertion_order.go",
      "status": "added",
      "additions": 81,
      "deletions": 0,
      "changes": 81,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/assert/assertion_order.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/assert/assertion_order.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/stretchr/testify/assert/assertion_order.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,81 @@\n+package assert\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+)\n+\n+// isOrdered checks that collection contains orderable elements.\n+func isOrdered(t TestingT, object interface{}, allowedComparesResults []CompareType, failMessage string, msgAndArgs ...interface{}) bool {\n+\tobjKind := reflect.TypeOf(object).Kind()\n+\tif objKind != reflect.Slice && objKind != reflect.Array {\n+\t\treturn false\n+\t}\n+\n+\tobjValue := reflect.ValueOf(object)\n+\tobjLen := objValue.Len()\n+\n+\tif objLen <= 1 {\n+\t\treturn true\n+\t}\n+\n+\tvalue := objValue.Index(0)\n+\tvalueInterface := value.Interface()\n+\tfirstValueKind := value.Kind()\n+\n+\tfor i := 1; i < objLen; i++ {\n+\t\tprevValue := value\n+\t\tprevValueInterface := valueInterface\n+\n+\t\tvalue = objValue.Index(i)\n+\t\tvalueInterface = value.Interface()\n+\n+\t\tcompareResult, isComparable := compare(prevValueInterface, valueInterface, firstValueKind)\n+\n+\t\tif !isComparable {\n+\t\t\treturn Fail(t, fmt.Sprintf(\"Can not compare type \\\"%s\\\" and \\\"%s\\\"\", reflect.TypeOf(value), reflect.TypeOf(prevValue)), msgAndArgs...)\n+\t\t}\n+\n+\t\tif !containsValue(allowedComparesResults, compareResult) {\n+\t\t\treturn Fail(t, fmt.Sprintf(failMessage, prevValue, value), msgAndArgs...)\n+\t\t}\n+\t}\n+\n+\treturn true\n+}\n+\n+// IsIncreasing asserts that the collection is increasing\n+//\n+//    assert.IsIncreasing(t, []int{1, 2, 3})\n+//    assert.IsIncreasing(t, []float{1, 2})\n+//    assert.IsIncreasing(t, []string{\"a\", \"b\"})\n+func IsIncreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {\n+\treturn isOrdered(t, object, []CompareType{compareLess}, \"\\\"%v\\\" is not less than \\\"%v\\\"\", msgAndArgs)\n+}\n+\n+// IsNonIncreasing asserts that the collection is not increasing\n+//\n+//    assert.IsNonIncreasing(t, []int{2, 1, 1})\n+//    assert.IsNonIncreasing(t, []float{2, 1})\n+//    assert.IsNonIncreasing(t, []string{\"b\", \"a\"})\n+func IsNonIncreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {\n+\treturn isOrdered(t, object, []CompareType{compareEqual, compareGreater}, \"\\\"%v\\\" is not greater than or equal to \\\"%v\\\"\", msgAndArgs)\n+}\n+\n+// IsDecreasing asserts that the collection is decreasing\n+//\n+//    assert.IsDecreasing(t, []int{2, 1, 0})\n+//    assert.IsDecreasing(t, []float{2, 1})\n+//    assert.IsDecreasing(t, []string{\"b\", \"a\"})\n+func IsDecreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {\n+\treturn isOrdered(t, object, []CompareType{compareGreater}, \"\\\"%v\\\" is not greater than \\\"%v\\\"\", msgAndArgs)\n+}\n+\n+// IsNonDecreasing asserts that the collection is not decreasing\n+//\n+//    assert.IsNonDecreasing(t, []int{1, 1, 2})\n+//    assert.IsNonDecreasing(t, []float{1, 2})\n+//    assert.IsNonDecreasing(t, []string{\"a\", \"b\"})\n+func IsNonDecreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {\n+\treturn isOrdered(t, object, []CompareType{compareLess, compareEqual}, \"\\\"%v\\\" is not less than or equal to \\\"%v\\\"\", msgAndArgs)\n+}"
    },
    {
      "sha": "bcac4401f57fb271d4a0909e607d56d51c606e59",
      "filename": "backend/vendor/github.com/stretchr/testify/assert/assertions.go",
      "status": "modified",
      "additions": 81,
      "deletions": 2,
      "changes": 83,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/assert/assertions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/assert/assertions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/stretchr/testify/assert/assertions.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -172,8 +172,8 @@ func isTest(name, prefix string) bool {\n \tif len(name) == len(prefix) { // \"Test\" is ok\n \t\treturn true\n \t}\n-\trune, _ := utf8.DecodeRuneInString(name[len(prefix):])\n-\treturn !unicode.IsLower(rune)\n+\tr, _ := utf8.DecodeRuneInString(name[len(prefix):])\n+\treturn !unicode.IsLower(r)\n }\n \n func messageFromMsgAndArgs(msgAndArgs ...interface{}) string {\n@@ -1622,6 +1622,7 @@ var spewConfig = spew.ConfigState{\n \tDisableCapacities:       true,\n \tSortKeys:                true,\n \tDisableMethods:          true,\n+\tMaxDepth:                10,\n }\n \n type tHelper interface {\n@@ -1693,3 +1694,81 @@ func Never(t TestingT, condition func() bool, waitFor time.Duration, tick time.D\n \t\t}\n \t}\n }\n+\n+// ErrorIs asserts that at least one of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func ErrorIs(t TestingT, err, target error, msgAndArgs ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif errors.Is(err, target) {\n+\t\treturn true\n+\t}\n+\n+\tvar expectedText string\n+\tif target != nil {\n+\t\texpectedText = target.Error()\n+\t}\n+\n+\tchain := buildErrorChainString(err)\n+\n+\treturn Fail(t, fmt.Sprintf(\"Target error should be in err chain:\\n\"+\n+\t\t\"expected: %q\\n\"+\n+\t\t\"in chain: %s\", expectedText, chain,\n+\t), msgAndArgs...)\n+}\n+\n+// NotErrorIs asserts that at none of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func NotErrorIs(t TestingT, err, target error, msgAndArgs ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif !errors.Is(err, target) {\n+\t\treturn true\n+\t}\n+\n+\tvar expectedText string\n+\tif target != nil {\n+\t\texpectedText = target.Error()\n+\t}\n+\n+\tchain := buildErrorChainString(err)\n+\n+\treturn Fail(t, fmt.Sprintf(\"Target error should not be in err chain:\\n\"+\n+\t\t\"found: %q\\n\"+\n+\t\t\"in chain: %s\", expectedText, chain,\n+\t), msgAndArgs...)\n+}\n+\n+// ErrorAs asserts that at least one of the errors in err's chain matches target, and if so, sets target to that error value.\n+// This is a wrapper for errors.As.\n+func ErrorAs(t TestingT, err error, target interface{}, msgAndArgs ...interface{}) bool {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif errors.As(err, target) {\n+\t\treturn true\n+\t}\n+\n+\tchain := buildErrorChainString(err)\n+\n+\treturn Fail(t, fmt.Sprintf(\"Should be in error chain:\\n\"+\n+\t\t\"expected: %q\\n\"+\n+\t\t\"in chain: %s\", target, chain,\n+\t), msgAndArgs...)\n+}\n+\n+func buildErrorChainString(err error) string {\n+\tif err == nil {\n+\t\treturn \"\"\n+\t}\n+\n+\te := errors.Unwrap(err)\n+\tchain := fmt.Sprintf(\"%q\", err.Error())\n+\tfor e != nil {\n+\t\tchain += fmt.Sprintf(\"\\n\\t%q\", e.Error())\n+\t\te = errors.Unwrap(e)\n+\t}\n+\treturn chain\n+}"
    },
    {
      "sha": "e2e6a2d237df08cd44699b946b20da81082822cc",
      "filename": "backend/vendor/github.com/stretchr/testify/mock/mock.go",
      "status": "modified",
      "additions": 36,
      "deletions": 9,
      "changes": 45,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/mock/mock.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/mock/mock.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/stretchr/testify/mock/mock.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -297,25 +297,52 @@ func (m *Mock) findExpectedCall(method string, arguments ...interface{}) (int, *\n \treturn -1, expectedCall\n }\n \n+type matchCandidate struct {\n+\tcall      *Call\n+\tmismatch  string\n+\tdiffCount int\n+}\n+\n+func (c matchCandidate) isBetterMatchThan(other matchCandidate) bool {\n+\tif c.call == nil {\n+\t\treturn false\n+\t}\n+\tif other.call == nil {\n+\t\treturn true\n+\t}\n+\n+\tif c.diffCount > other.diffCount {\n+\t\treturn false\n+\t}\n+\tif c.diffCount < other.diffCount {\n+\t\treturn true\n+\t}\n+\n+\tif c.call.Repeatability > 0 && other.call.Repeatability <= 0 {\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n func (m *Mock) findClosestCall(method string, arguments ...interface{}) (*Call, string) {\n-\tvar diffCount int\n-\tvar closestCall *Call\n-\tvar err string\n+\tvar bestMatch matchCandidate\n \n \tfor _, call := range m.expectedCalls() {\n \t\tif call.Method == method {\n \n \t\t\terrInfo, tempDiffCount := call.Arguments.Diff(arguments)\n-\t\t\tif tempDiffCount < diffCount || diffCount == 0 {\n-\t\t\t\tdiffCount = tempDiffCount\n-\t\t\t\tclosestCall = call\n-\t\t\t\terr = errInfo\n+\t\t\ttempCandidate := matchCandidate{\n+\t\t\t\tcall:      call,\n+\t\t\t\tmismatch:  errInfo,\n+\t\t\t\tdiffCount: tempDiffCount,\n+\t\t\t}\n+\t\t\tif tempCandidate.isBetterMatchThan(bestMatch) {\n+\t\t\t\tbestMatch = tempCandidate\n \t\t\t}\n-\n \t\t}\n \t}\n \n-\treturn closestCall, err\n+\treturn bestMatch.call, bestMatch.mismatch\n }\n \n func callString(method string, arguments Arguments, includeArgumentValues bool) string {"
    },
    {
      "sha": "51820df2e6726fe50df902ff53c6a2a08bc344e8",
      "filename": "backend/vendor/github.com/stretchr/testify/require/require.go",
      "status": "modified",
      "additions": 248,
      "deletions": 0,
      "changes": 248,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/require/require.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/require/require.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/stretchr/testify/require/require.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -256,6 +256,54 @@ func Error(t TestingT, err error, msgAndArgs ...interface{}) {\n \tt.FailNow()\n }\n \n+// ErrorAs asserts that at least one of the errors in err's chain matches target, and if so, sets target to that error value.\n+// This is a wrapper for errors.As.\n+func ErrorAs(t TestingT, err error, target interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.ErrorAs(t, err, target, msgAndArgs...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// ErrorAsf asserts that at least one of the errors in err's chain matches target, and if so, sets target to that error value.\n+// This is a wrapper for errors.As.\n+func ErrorAsf(t TestingT, err error, target interface{}, msg string, args ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.ErrorAsf(t, err, target, msg, args...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// ErrorIs asserts that at least one of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func ErrorIs(t TestingT, err error, target error, msgAndArgs ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.ErrorIs(t, err, target, msgAndArgs...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// ErrorIsf asserts that at least one of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func ErrorIsf(t TestingT, err error, target error, msg string, args ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.ErrorIsf(t, err, target, msg, args...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n // Errorf asserts that a function returned an error (i.e. not `nil`).\n //\n //   actualObj, err := SomeFunction()\n@@ -806,6 +854,126 @@ func InEpsilonf(t TestingT, expected interface{}, actual interface{}, epsilon fl\n \tt.FailNow()\n }\n \n+// IsDecreasing asserts that the collection is decreasing\n+//\n+//    assert.IsDecreasing(t, []int{2, 1, 0})\n+//    assert.IsDecreasing(t, []float{2, 1})\n+//    assert.IsDecreasing(t, []string{\"b\", \"a\"})\n+func IsDecreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.IsDecreasing(t, object, msgAndArgs...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// IsDecreasingf asserts that the collection is decreasing\n+//\n+//    assert.IsDecreasingf(t, []int{2, 1, 0}, \"error message %s\", \"formatted\")\n+//    assert.IsDecreasingf(t, []float{2, 1}, \"error message %s\", \"formatted\")\n+//    assert.IsDecreasingf(t, []string{\"b\", \"a\"}, \"error message %s\", \"formatted\")\n+func IsDecreasingf(t TestingT, object interface{}, msg string, args ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.IsDecreasingf(t, object, msg, args...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// IsIncreasing asserts that the collection is increasing\n+//\n+//    assert.IsIncreasing(t, []int{1, 2, 3})\n+//    assert.IsIncreasing(t, []float{1, 2})\n+//    assert.IsIncreasing(t, []string{\"a\", \"b\"})\n+func IsIncreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.IsIncreasing(t, object, msgAndArgs...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// IsIncreasingf asserts that the collection is increasing\n+//\n+//    assert.IsIncreasingf(t, []int{1, 2, 3}, \"error message %s\", \"formatted\")\n+//    assert.IsIncreasingf(t, []float{1, 2}, \"error message %s\", \"formatted\")\n+//    assert.IsIncreasingf(t, []string{\"a\", \"b\"}, \"error message %s\", \"formatted\")\n+func IsIncreasingf(t TestingT, object interface{}, msg string, args ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.IsIncreasingf(t, object, msg, args...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// IsNonDecreasing asserts that the collection is not decreasing\n+//\n+//    assert.IsNonDecreasing(t, []int{1, 1, 2})\n+//    assert.IsNonDecreasing(t, []float{1, 2})\n+//    assert.IsNonDecreasing(t, []string{\"a\", \"b\"})\n+func IsNonDecreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.IsNonDecreasing(t, object, msgAndArgs...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// IsNonDecreasingf asserts that the collection is not decreasing\n+//\n+//    assert.IsNonDecreasingf(t, []int{1, 1, 2}, \"error message %s\", \"formatted\")\n+//    assert.IsNonDecreasingf(t, []float{1, 2}, \"error message %s\", \"formatted\")\n+//    assert.IsNonDecreasingf(t, []string{\"a\", \"b\"}, \"error message %s\", \"formatted\")\n+func IsNonDecreasingf(t TestingT, object interface{}, msg string, args ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.IsNonDecreasingf(t, object, msg, args...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// IsNonIncreasing asserts that the collection is not increasing\n+//\n+//    assert.IsNonIncreasing(t, []int{2, 1, 1})\n+//    assert.IsNonIncreasing(t, []float{2, 1})\n+//    assert.IsNonIncreasing(t, []string{\"b\", \"a\"})\n+func IsNonIncreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.IsNonIncreasing(t, object, msgAndArgs...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// IsNonIncreasingf asserts that the collection is not increasing\n+//\n+//    assert.IsNonIncreasingf(t, []int{2, 1, 1}, \"error message %s\", \"formatted\")\n+//    assert.IsNonIncreasingf(t, []float{2, 1}, \"error message %s\", \"formatted\")\n+//    assert.IsNonIncreasingf(t, []string{\"b\", \"a\"}, \"error message %s\", \"formatted\")\n+func IsNonIncreasingf(t TestingT, object interface{}, msg string, args ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.IsNonIncreasingf(t, object, msg, args...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n // IsType asserts that the specified objects are of the same type.\n func IsType(t TestingT, expectedType interface{}, object interface{}, msgAndArgs ...interface{}) {\n \tif h, ok := t.(tHelper); ok {\n@@ -944,6 +1112,34 @@ func Lessf(t TestingT, e1 interface{}, e2 interface{}, msg string, args ...inter\n \tt.FailNow()\n }\n \n+// Negative asserts that the specified element is negative\n+//\n+//    assert.Negative(t, -1)\n+//    assert.Negative(t, -1.23)\n+func Negative(t TestingT, e interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.Negative(t, e, msgAndArgs...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// Negativef asserts that the specified element is negative\n+//\n+//    assert.Negativef(t, -1, \"error message %s\", \"formatted\")\n+//    assert.Negativef(t, -1.23, \"error message %s\", \"formatted\")\n+func Negativef(t TestingT, e interface{}, msg string, args ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.Negativef(t, e, msg, args...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n // Never asserts that the given condition doesn't satisfy in waitFor time,\n // periodically checking the target function each tick.\n //\n@@ -1200,6 +1396,30 @@ func NotEqualf(t TestingT, expected interface{}, actual interface{}, msg string,\n \tt.FailNow()\n }\n \n+// NotErrorIs asserts that at none of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func NotErrorIs(t TestingT, err error, target error, msgAndArgs ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.NotErrorIs(t, err, target, msgAndArgs...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// NotErrorIsf asserts that at none of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func NotErrorIsf(t TestingT, err error, target error, msg string, args ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.NotErrorIsf(t, err, target, msg, args...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n // NotNil asserts that the specified object is not nil.\n //\n //    assert.NotNil(t, err)\n@@ -1446,6 +1666,34 @@ func Panicsf(t TestingT, f assert.PanicTestFunc, msg string, args ...interface{}\n \tt.FailNow()\n }\n \n+// Positive asserts that the specified element is positive\n+//\n+//    assert.Positive(t, 1)\n+//    assert.Positive(t, 1.23)\n+func Positive(t TestingT, e interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.Positive(t, e, msgAndArgs...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n+// Positivef asserts that the specified element is positive\n+//\n+//    assert.Positivef(t, 1, \"error message %s\", \"formatted\")\n+//    assert.Positivef(t, 1.23, \"error message %s\", \"formatted\")\n+func Positivef(t TestingT, e interface{}, msg string, args ...interface{}) {\n+\tif h, ok := t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tif assert.Positivef(t, e, msg, args...) {\n+\t\treturn\n+\t}\n+\tt.FailNow()\n+}\n+\n // Regexp asserts that a specified regexp matches a string.\n //\n //  assert.Regexp(t, regexp.MustCompile(\"start\"), \"it's starting\")"
    },
    {
      "sha": "ed54a9d83f35e103201daa02cf50a42a95f36877",
      "filename": "backend/vendor/github.com/stretchr/testify/require/require_forward.go",
      "status": "modified",
      "additions": 194,
      "deletions": 0,
      "changes": 194,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/require/require_forward.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/github.com/stretchr/testify/require/require_forward.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/stretchr/testify/require/require_forward.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -205,6 +205,42 @@ func (a *Assertions) Error(err error, msgAndArgs ...interface{}) {\n \tError(a.t, err, msgAndArgs...)\n }\n \n+// ErrorAs asserts that at least one of the errors in err's chain matches target, and if so, sets target to that error value.\n+// This is a wrapper for errors.As.\n+func (a *Assertions) ErrorAs(err error, target interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tErrorAs(a.t, err, target, msgAndArgs...)\n+}\n+\n+// ErrorAsf asserts that at least one of the errors in err's chain matches target, and if so, sets target to that error value.\n+// This is a wrapper for errors.As.\n+func (a *Assertions) ErrorAsf(err error, target interface{}, msg string, args ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tErrorAsf(a.t, err, target, msg, args...)\n+}\n+\n+// ErrorIs asserts that at least one of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func (a *Assertions) ErrorIs(err error, target error, msgAndArgs ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tErrorIs(a.t, err, target, msgAndArgs...)\n+}\n+\n+// ErrorIsf asserts that at least one of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func (a *Assertions) ErrorIsf(err error, target error, msg string, args ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tErrorIsf(a.t, err, target, msg, args...)\n+}\n+\n // Errorf asserts that a function returned an error (i.e. not `nil`).\n //\n //   actualObj, err := SomeFunction()\n@@ -632,6 +668,102 @@ func (a *Assertions) InEpsilonf(expected interface{}, actual interface{}, epsilo\n \tInEpsilonf(a.t, expected, actual, epsilon, msg, args...)\n }\n \n+// IsDecreasing asserts that the collection is decreasing\n+//\n+//    a.IsDecreasing([]int{2, 1, 0})\n+//    a.IsDecreasing([]float{2, 1})\n+//    a.IsDecreasing([]string{\"b\", \"a\"})\n+func (a *Assertions) IsDecreasing(object interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tIsDecreasing(a.t, object, msgAndArgs...)\n+}\n+\n+// IsDecreasingf asserts that the collection is decreasing\n+//\n+//    a.IsDecreasingf([]int{2, 1, 0}, \"error message %s\", \"formatted\")\n+//    a.IsDecreasingf([]float{2, 1}, \"error message %s\", \"formatted\")\n+//    a.IsDecreasingf([]string{\"b\", \"a\"}, \"error message %s\", \"formatted\")\n+func (a *Assertions) IsDecreasingf(object interface{}, msg string, args ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tIsDecreasingf(a.t, object, msg, args...)\n+}\n+\n+// IsIncreasing asserts that the collection is increasing\n+//\n+//    a.IsIncreasing([]int{1, 2, 3})\n+//    a.IsIncreasing([]float{1, 2})\n+//    a.IsIncreasing([]string{\"a\", \"b\"})\n+func (a *Assertions) IsIncreasing(object interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tIsIncreasing(a.t, object, msgAndArgs...)\n+}\n+\n+// IsIncreasingf asserts that the collection is increasing\n+//\n+//    a.IsIncreasingf([]int{1, 2, 3}, \"error message %s\", \"formatted\")\n+//    a.IsIncreasingf([]float{1, 2}, \"error message %s\", \"formatted\")\n+//    a.IsIncreasingf([]string{\"a\", \"b\"}, \"error message %s\", \"formatted\")\n+func (a *Assertions) IsIncreasingf(object interface{}, msg string, args ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tIsIncreasingf(a.t, object, msg, args...)\n+}\n+\n+// IsNonDecreasing asserts that the collection is not decreasing\n+//\n+//    a.IsNonDecreasing([]int{1, 1, 2})\n+//    a.IsNonDecreasing([]float{1, 2})\n+//    a.IsNonDecreasing([]string{\"a\", \"b\"})\n+func (a *Assertions) IsNonDecreasing(object interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tIsNonDecreasing(a.t, object, msgAndArgs...)\n+}\n+\n+// IsNonDecreasingf asserts that the collection is not decreasing\n+//\n+//    a.IsNonDecreasingf([]int{1, 1, 2}, \"error message %s\", \"formatted\")\n+//    a.IsNonDecreasingf([]float{1, 2}, \"error message %s\", \"formatted\")\n+//    a.IsNonDecreasingf([]string{\"a\", \"b\"}, \"error message %s\", \"formatted\")\n+func (a *Assertions) IsNonDecreasingf(object interface{}, msg string, args ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tIsNonDecreasingf(a.t, object, msg, args...)\n+}\n+\n+// IsNonIncreasing asserts that the collection is not increasing\n+//\n+//    a.IsNonIncreasing([]int{2, 1, 1})\n+//    a.IsNonIncreasing([]float{2, 1})\n+//    a.IsNonIncreasing([]string{\"b\", \"a\"})\n+func (a *Assertions) IsNonIncreasing(object interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tIsNonIncreasing(a.t, object, msgAndArgs...)\n+}\n+\n+// IsNonIncreasingf asserts that the collection is not increasing\n+//\n+//    a.IsNonIncreasingf([]int{2, 1, 1}, \"error message %s\", \"formatted\")\n+//    a.IsNonIncreasingf([]float{2, 1}, \"error message %s\", \"formatted\")\n+//    a.IsNonIncreasingf([]string{\"b\", \"a\"}, \"error message %s\", \"formatted\")\n+func (a *Assertions) IsNonIncreasingf(object interface{}, msg string, args ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tIsNonIncreasingf(a.t, object, msg, args...)\n+}\n+\n // IsType asserts that the specified objects are of the same type.\n func (a *Assertions) IsType(expectedType interface{}, object interface{}, msgAndArgs ...interface{}) {\n \tif h, ok := a.t.(tHelper); ok {\n@@ -740,6 +872,28 @@ func (a *Assertions) Lessf(e1 interface{}, e2 interface{}, msg string, args ...i\n \tLessf(a.t, e1, e2, msg, args...)\n }\n \n+// Negative asserts that the specified element is negative\n+//\n+//    a.Negative(-1)\n+//    a.Negative(-1.23)\n+func (a *Assertions) Negative(e interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tNegative(a.t, e, msgAndArgs...)\n+}\n+\n+// Negativef asserts that the specified element is negative\n+//\n+//    a.Negativef(-1, \"error message %s\", \"formatted\")\n+//    a.Negativef(-1.23, \"error message %s\", \"formatted\")\n+func (a *Assertions) Negativef(e interface{}, msg string, args ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tNegativef(a.t, e, msg, args...)\n+}\n+\n // Never asserts that the given condition doesn't satisfy in waitFor time,\n // periodically checking the target function each tick.\n //\n@@ -942,6 +1096,24 @@ func (a *Assertions) NotEqualf(expected interface{}, actual interface{}, msg str\n \tNotEqualf(a.t, expected, actual, msg, args...)\n }\n \n+// NotErrorIs asserts that at none of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func (a *Assertions) NotErrorIs(err error, target error, msgAndArgs ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tNotErrorIs(a.t, err, target, msgAndArgs...)\n+}\n+\n+// NotErrorIsf asserts that at none of the errors in err's chain matches target.\n+// This is a wrapper for errors.Is.\n+func (a *Assertions) NotErrorIsf(err error, target error, msg string, args ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tNotErrorIsf(a.t, err, target, msg, args...)\n+}\n+\n // NotNil asserts that the specified object is not nil.\n //\n //    a.NotNil(err)\n@@ -1134,6 +1306,28 @@ func (a *Assertions) Panicsf(f assert.PanicTestFunc, msg string, args ...interfa\n \tPanicsf(a.t, f, msg, args...)\n }\n \n+// Positive asserts that the specified element is positive\n+//\n+//    a.Positive(1)\n+//    a.Positive(1.23)\n+func (a *Assertions) Positive(e interface{}, msgAndArgs ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tPositive(a.t, e, msgAndArgs...)\n+}\n+\n+// Positivef asserts that the specified element is positive\n+//\n+//    a.Positivef(1, \"error message %s\", \"formatted\")\n+//    a.Positivef(1.23, \"error message %s\", \"formatted\")\n+func (a *Assertions) Positivef(e interface{}, msg string, args ...interface{}) {\n+\tif h, ok := a.t.(tHelper); ok {\n+\t\th.Helper()\n+\t}\n+\tPositivef(a.t, e, msg, args...)\n+}\n+\n // Regexp asserts that a specified regexp matches a string.\n //\n //  a.Regexp(regexp.MustCompile(\"start\"), \"it's starting\")"
    },
    {
      "sha": "174cfe8b41586654052aa732f04f029be0cd8588",
      "filename": "backend/vendor/golang.org/x/crypto/acme/acme.go",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/acme.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/acme.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/crypto/acme/acme.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -363,6 +363,10 @@ func AcceptTOS(tosURL string) bool { return true }\n // Also see Error's Instance field for when a CA requires already registered accounts to agree\n // to an updated Terms of Service.\n func (c *Client) Register(ctx context.Context, acct *Account, prompt func(tosURL string) bool) (*Account, error) {\n+\tif c.Key == nil {\n+\t\treturn nil, errors.New(\"acme: client.Key must be set to Register\")\n+\t}\n+\n \tdir, err := c.Discover(ctx)\n \tif err != nil {\n \t\treturn nil, err"
    },
    {
      "sha": "c7fbc54c451bd3d158beed8f96c1d62aec18e4f6",
      "filename": "backend/vendor/golang.org/x/crypto/acme/autocert/autocert.go",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/autocert/autocert.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/autocert/autocert.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/crypto/acme/autocert/autocert.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -1133,11 +1133,11 @@ func (s *certState) tlscert() (*tls.Certificate, error) {\n \t}, nil\n }\n \n-// certRequest generates a CSR for the given common name cn and optional SANs.\n-func certRequest(key crypto.Signer, cn string, ext []pkix.Extension, san ...string) ([]byte, error) {\n+// certRequest generates a CSR for the given common name.\n+func certRequest(key crypto.Signer, name string, ext []pkix.Extension) ([]byte, error) {\n \treq := &x509.CertificateRequest{\n-\t\tSubject:         pkix.Name{CommonName: cn},\n-\t\tDNSNames:        san,\n+\t\tSubject:         pkix.Name{CommonName: name},\n+\t\tDNSNames:        []string{name},\n \t\tExtraExtensions: ext,\n \t}\n \treturn x509.CreateCertificateRequest(rand.Reader, req, key)"
    },
    {
      "sha": "8c3ecceca7dca3b8360ee166572ab325ddbd3dc8",
      "filename": "backend/vendor/golang.org/x/crypto/acme/jws.go",
      "status": "modified",
      "additions": 48,
      "deletions": 6,
      "changes": 54,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/jws.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/jws.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/crypto/acme/jws.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -7,13 +7,15 @@ package acme\n import (\n \t\"crypto\"\n \t\"crypto/ecdsa\"\n+\t\"crypto/hmac\"\n \t\"crypto/rand\"\n \t\"crypto/rsa\"\n \t\"crypto/sha256\"\n \t_ \"crypto/sha512\" // need for EC keys\n \t\"encoding/asn1\"\n \t\"encoding/base64\"\n \t\"encoding/json\"\n+\t\"errors\"\n \t\"fmt\"\n \t\"math/big\"\n )\n@@ -31,6 +33,14 @@ const noKeyID = keyID(\"\")\n // See https://tools.ietf.org/html/rfc8555#section-6.3 for more details.\n const noPayload = \"\"\n \n+// jsonWebSignature can be easily serialized into a JWS following\n+// https://tools.ietf.org/html/rfc7515#section-3.2.\n+type jsonWebSignature struct {\n+\tProtected string `json:\"protected\"`\n+\tPayload   string `json:\"payload\"`\n+\tSig       string `json:\"signature\"`\n+}\n+\n // jwsEncodeJSON signs claimset using provided key and a nonce.\n // The result is serialized in JSON format containing either kid or jwk\n // fields based on the provided keyID value.\n@@ -71,19 +81,51 @@ func jwsEncodeJSON(claimset interface{}, key crypto.Signer, kid keyID, nonce, ur\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\n-\tenc := struct {\n-\t\tProtected string `json:\"protected\"`\n-\t\tPayload   string `json:\"payload\"`\n-\t\tSig       string `json:\"signature\"`\n-\t}{\n+\tenc := jsonWebSignature{\n \t\tProtected: phead,\n \t\tPayload:   payload,\n \t\tSig:       base64.RawURLEncoding.EncodeToString(sig),\n \t}\n \treturn json.Marshal(&enc)\n }\n \n+// jwsWithMAC creates and signs a JWS using the given key and the HS256\n+// algorithm. kid and url are included in the protected header. rawPayload\n+// should not be base64-URL-encoded.\n+func jwsWithMAC(key []byte, kid, url string, rawPayload []byte) (*jsonWebSignature, error) {\n+\tif len(key) == 0 {\n+\t\treturn nil, errors.New(\"acme: cannot sign JWS with an empty MAC key\")\n+\t}\n+\theader := struct {\n+\t\tAlgorithm string `json:\"alg\"`\n+\t\tKID       string `json:\"kid\"`\n+\t\tURL       string `json:\"url,omitempty\"`\n+\t}{\n+\t\t// Only HMAC-SHA256 is supported.\n+\t\tAlgorithm: \"HS256\",\n+\t\tKID:       kid,\n+\t\tURL:       url,\n+\t}\n+\trawProtected, err := json.Marshal(header)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tprotected := base64.RawURLEncoding.EncodeToString(rawProtected)\n+\tpayload := base64.RawURLEncoding.EncodeToString(rawPayload)\n+\n+\th := hmac.New(sha256.New, key)\n+\tif _, err := h.Write([]byte(protected + \".\" + payload)); err != nil {\n+\t\treturn nil, err\n+\t}\n+\tmac := h.Sum(nil)\n+\n+\treturn &jsonWebSignature{\n+\t\tProtected: protected,\n+\t\tPayload:   payload,\n+\t\tSig:       base64.RawURLEncoding.EncodeToString(mac),\n+\t}, nil\n+}\n+\n // jwkEncode encodes public part of an RSA or ECDSA key into a JWK.\n // The result is also suitable for creating a JWK thumbprint.\n // https://tools.ietf.org/html/rfc7517"
    },
    {
      "sha": "073cee58b7c7a11279e7ccd75501170287cb644f",
      "filename": "backend/vendor/golang.org/x/crypto/acme/rfc8555.go",
      "status": "modified",
      "additions": 25,
      "deletions": 5,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/rfc8555.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/rfc8555.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/crypto/acme/rfc8555.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -37,22 +37,32 @@ func (c *Client) DeactivateReg(ctx context.Context) error {\n \treturn nil\n }\n \n-// registerRFC is quivalent to c.Register but for CAs implementing RFC 8555.\n+// registerRFC is equivalent to c.Register but for CAs implementing RFC 8555.\n // It expects c.Discover to have already been called.\n-// TODO: Implement externalAccountBinding.\n func (c *Client) registerRFC(ctx context.Context, acct *Account, prompt func(tosURL string) bool) (*Account, error) {\n \tc.cacheMu.Lock() // guard c.kid access\n \tdefer c.cacheMu.Unlock()\n \n \treq := struct {\n-\t\tTermsAgreed bool     `json:\"termsOfServiceAgreed,omitempty\"`\n-\t\tContact     []string `json:\"contact,omitempty\"`\n+\t\tTermsAgreed            bool              `json:\"termsOfServiceAgreed,omitempty\"`\n+\t\tContact                []string          `json:\"contact,omitempty\"`\n+\t\tExternalAccountBinding *jsonWebSignature `json:\"externalAccountBinding,omitempty\"`\n \t}{\n \t\tContact: acct.Contact,\n \t}\n \tif c.dir.Terms != \"\" {\n \t\treq.TermsAgreed = prompt(c.dir.Terms)\n \t}\n+\n+\t// set 'externalAccountBinding' field if requested\n+\tif acct.ExternalAccountBinding != nil {\n+\t\teabJWS, err := c.encodeExternalAccountBinding(acct.ExternalAccountBinding)\n+\t\tif err != nil {\n+\t\t\treturn nil, fmt.Errorf(\"acme: failed to encode external account binding: %v\", err)\n+\t\t}\n+\t\treq.ExternalAccountBinding = eabJWS\n+\t}\n+\n \tres, err := c.post(ctx, c.Key, c.dir.RegURL, req, wantStatus(\n \t\thttp.StatusOK,      // account with this key already registered\n \t\thttp.StatusCreated, // new account created\n@@ -75,7 +85,17 @@ func (c *Client) registerRFC(ctx context.Context, acct *Account, prompt func(tos\n \treturn a, nil\n }\n \n-// updateGegRFC is equivalent to c.UpdateReg but for CAs implementing RFC 8555.\n+// encodeExternalAccountBinding will encode an external account binding stanza\n+// as described in https://tools.ietf.org/html/rfc8555#section-7.3.4.\n+func (c *Client) encodeExternalAccountBinding(eab *ExternalAccountBinding) (*jsonWebSignature, error) {\n+\tjwk, err := jwkEncode(c.Key.Public())\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn jwsWithMAC(eab.Key, eab.KID, c.dir.RegURL, []byte(jwk))\n+}\n+\n+// updateRegRFC is equivalent to c.UpdateReg but for CAs implementing RFC 8555.\n // It expects c.Discover to have already been called.\n func (c *Client) updateRegRFC(ctx context.Context, a *Account) (*Account, error) {\n \turl := string(c.accountKID(ctx))"
    },
    {
      "sha": "eaae4529078e82168d72f654c731c37bc9c0efa8",
      "filename": "backend/vendor/golang.org/x/crypto/acme/types.go",
      "status": "modified",
      "additions": 68,
      "deletions": 6,
      "changes": 74,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/types.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/types.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/crypto/acme/types.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -57,6 +57,32 @@ var (\n \tErrNoAccount = errors.New(\"acme: account does not exist\")\n )\n \n+// A Subproblem describes an ACME subproblem as reported in an Error.\n+type Subproblem struct {\n+\t// Type is a URI reference that identifies the problem type,\n+\t// typically in a \"urn:acme:error:xxx\" form.\n+\tType string\n+\t// Detail is a human-readable explanation specific to this occurrence of the problem.\n+\tDetail string\n+\t// Instance indicates a URL that the client should direct a human user to visit\n+\t// in order for instructions on how to agree to the updated Terms of Service.\n+\t// In such an event CA sets StatusCode to 403, Type to\n+\t// \"urn:ietf:params:acme:error:userActionRequired\", and adds a Link header with relation\n+\t// \"terms-of-service\" containing the latest TOS URL.\n+\tInstance string\n+\t// Identifier may contain the ACME identifier that the error is for.\n+\tIdentifier *AuthzID\n+}\n+\n+func (sp Subproblem) String() string {\n+\tstr := fmt.Sprintf(\"%s: \", sp.Type)\n+\tif sp.Identifier != nil {\n+\t\tstr += fmt.Sprintf(\"[%s: %s] \", sp.Identifier.Type, sp.Identifier.Value)\n+\t}\n+\tstr += sp.Detail\n+\treturn str\n+}\n+\n // Error is an ACME error, defined in Problem Details for HTTP APIs doc\n // http://tools.ietf.org/html/draft-ietf-appsawg-http-problem.\n type Error struct {\n@@ -76,10 +102,21 @@ type Error struct {\n \t// Header is the original server error response headers.\n \t// It may be nil.\n \tHeader http.Header\n+\t// Subproblems may contain more detailed information about the individual problems\n+\t// that caused the error. This field is only sent by RFC 8555 compatible ACME\n+\t// servers. Defined in RFC 8555 Section 6.7.1.\n+\tSubproblems []Subproblem\n }\n \n func (e *Error) Error() string {\n-\treturn fmt.Sprintf(\"%d %s: %s\", e.StatusCode, e.ProblemType, e.Detail)\n+\tstr := fmt.Sprintf(\"%d %s: %s\", e.StatusCode, e.ProblemType, e.Detail)\n+\tif len(e.Subproblems) > 0 {\n+\t\tstr += fmt.Sprintf(\"; subproblems:\")\n+\t\tfor _, sp := range e.Subproblems {\n+\t\t\tstr += fmt.Sprintf(\"\\n\\t%s\", sp)\n+\t\t}\n+\t}\n+\treturn str\n }\n \n // AuthorizationError indicates that an authorization for an identifier\n@@ -199,6 +236,28 @@ type Account struct {\n \t//\n \t// It is non-RFC 8555 compliant and is obsoleted by OrdersURL.\n \tCertificates string\n+\n+\t// ExternalAccountBinding represents an arbitrary binding to an account of\n+\t// the CA which the ACME server is tied to.\n+\t// See https://tools.ietf.org/html/rfc8555#section-7.3.4 for more details.\n+\tExternalAccountBinding *ExternalAccountBinding\n+}\n+\n+// ExternalAccountBinding contains the data needed to form a request with\n+// an external account binding.\n+// See https://tools.ietf.org/html/rfc8555#section-7.3.4 for more details.\n+type ExternalAccountBinding struct {\n+\t// KID is the Key ID of the symmetric MAC key that the CA provides to\n+\t// identify an external account from ACME.\n+\tKID string\n+\n+\t// Key is the bytes of the symmetric key that the CA provides to identify\n+\t// the account. Key must correspond to the KID.\n+\tKey []byte\n+}\n+\n+func (e *ExternalAccountBinding) String() string {\n+\treturn fmt.Sprintf(\"&{KID: %q, Key: redacted}\", e.KID)\n }\n \n // Directory is ACME server discovery data.\n@@ -511,20 +570,23 @@ func (c *wireChallenge) challenge() *Challenge {\n // wireError is a subset of fields of the Problem Details object\n // as described in https://tools.ietf.org/html/rfc7807#section-3.1.\n type wireError struct {\n-\tStatus   int\n-\tType     string\n-\tDetail   string\n-\tInstance string\n+\tStatus      int\n+\tType        string\n+\tDetail      string\n+\tInstance    string\n+\tSubproblems []Subproblem\n }\n \n func (e *wireError) error(h http.Header) *Error {\n-\treturn &Error{\n+\terr := &Error{\n \t\tStatusCode:  e.Status,\n \t\tProblemType: e.Type,\n \t\tDetail:      e.Detail,\n \t\tInstance:    e.Instance,\n \t\tHeader:      h,\n+\t\tSubproblems: e.Subproblems,\n \t}\n+\treturn err\n }\n \n // CertOption is an optional argument type for the TLS ChallengeCert methods for"
    },
    {
      "sha": "b9efdb59e5851c79fcd7208386fbbed81a603c89",
      "filename": "backend/vendor/golang.org/x/crypto/acme/version_go112.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/version_go112.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/acme/version_go112.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/crypto/acme/version_go112.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build go1.12\n // +build go1.12\n \n package acme"
    },
    {
      "sha": "9d3fffa8fedd0a85837a54c6b4cd7dcd98ee804a",
      "filename": "backend/vendor/golang.org/x/crypto/ocsp/ocsp.go",
      "status": "modified",
      "additions": 17,
      "deletions": 12,
      "changes": 29,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/ocsp/ocsp.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/crypto/ocsp/ocsp.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/crypto/ocsp/ocsp.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -445,25 +445,30 @@ func ParseRequest(bytes []byte) (*Request, error) {\n \t}, nil\n }\n \n-// ParseResponse parses an OCSP response in DER form. It only supports\n-// responses for a single certificate. If the response contains a certificate\n-// then the signature over the response is checked. If issuer is not nil then\n-// it will be used to validate the signature or embedded certificate.\n+// ParseResponse parses an OCSP response in DER form. The response must contain\n+// only one certificate status. To parse the status of a specific certificate\n+// from a response which may contain multiple statuses, use ParseResponseForCert\n+// instead.\n+//\n+// If the response contains an embedded certificate, then that certificate will\n+// be used to verify the response signature. If the response contains an\n+// embedded certificate and issuer is not nil, then issuer will be used to verify\n+// the signature on the embedded certificate.\n+//\n+// If the response does not contain an embedded certificate and issuer is not\n+// nil, then issuer will be used to verify the response signature.\n //\n // Invalid responses and parse failures will result in a ParseError.\n // Error responses will result in a ResponseError.\n func ParseResponse(bytes []byte, issuer *x509.Certificate) (*Response, error) {\n \treturn ParseResponseForCert(bytes, nil, issuer)\n }\n \n-// ParseResponseForCert parses an OCSP response in DER form and searches for a\n-// Response relating to cert. If such a Response is found and the OCSP response\n-// contains a certificate then the signature over the response is checked. If\n-// issuer is not nil then it will be used to validate the signature or embedded\n-// certificate.\n-//\n-// Invalid responses and parse failures will result in a ParseError.\n-// Error responses will result in a ResponseError.\n+// ParseResponseForCert acts identically to ParseResponse, except it supports\n+// parsing responses that contain multiple statuses. If the response contains\n+// multiple statuses and cert is not nil, then ParseResponseForCert will return\n+// the first status which contains a matching serial, otherwise it will return an\n+// error. If cert is nil, then the first status in the response will be returned.\n func ParseResponseForCert(bytes []byte, cert, issuer *x509.Certificate) (*Response, error) {\n \tvar resp responseASN1\n \trest, err := asn1.Unmarshal(bytes, &resp)"
    },
    {
      "sha": "29d44808b1d02b122a34bd0d6e39d6a274bb3871",
      "filename": "backend/vendor/golang.org/x/sys/unix/fcntl_linux_32bit.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/fcntl_linux_32bit.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/fcntl_linux_32bit.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/sys/unix/fcntl_linux_32bit.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -2,8 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-//go:build (linux && 386) || (linux && arm) || (linux && mips) || (linux && mipsle)\n-// +build linux,386 linux,arm linux,mips linux,mipsle\n+//go:build (linux && 386) || (linux && arm) || (linux && mips) || (linux && mipsle) || (linux && ppc)\n+// +build linux,386 linux,arm linux,mips linux,mipsle linux,ppc\n \n package unix\n "
    },
    {
      "sha": "9945e5f9655ad0318ce8f14c80fb2a8a4e617a95",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_darwin.go",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/syscall_darwin.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/syscall_darwin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/sys/unix/syscall_darwin.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -378,6 +378,17 @@ func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err e\n \treturn\n }\n \n+func GetsockoptIPMreqn(fd, level, opt int) (*IPMreqn, error) {\n+\tvar value IPMreqn\n+\tvallen := _Socklen(SizeofIPMreqn)\n+\terrno := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)\n+\treturn &value, errno\n+}\n+\n+func SetsockoptIPMreqn(fd, level, opt int, mreq *IPMreqn) (err error) {\n+\treturn setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))\n+}\n+\n // GetsockoptXucred is a getsockopt wrapper that returns an Xucred struct.\n // The usual level and opt are SOL_LOCAL and LOCAL_PEERCRED, respectively.\n func GetsockoptXucred(fd, level, opt int) (*Xucred, error) {"
    },
    {
      "sha": "7e65e088d29b03163701061f5652ffcfc30b1592",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_linux_ppc.go",
      "status": "added",
      "additions": 272,
      "deletions": 0,
      "changes": 272,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/syscall_linux_ppc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/syscall_linux_ppc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/sys/unix/syscall_linux_ppc.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,272 @@\n+// Copyright 2021 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build linux && ppc\n+// +build linux\n+// +build ppc\n+\n+package unix\n+\n+import (\n+\t\"syscall\"\n+\t\"unsafe\"\n+)\n+\n+//sys\tdup2(oldfd int, newfd int) (err error)\n+//sysnb\tEpollCreate(size int) (fd int, err error)\n+//sys\tEpollWait(epfd int, events []EpollEvent, msec int) (n int, err error)\n+//sys\tFchown(fd int, uid int, gid int) (err error)\n+//sys\tFstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\n+//sys\tFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) = SYS_FSTATAT64\n+//sys\tFtruncate(fd int, length int64) (err error) = SYS_FTRUNCATE64\n+//sysnb\tGetegid() (egid int)\n+//sysnb\tGeteuid() (euid int)\n+//sysnb\tGetgid() (gid int)\n+//sysnb\tGetuid() (uid int)\n+//sysnb\tInotifyInit() (fd int, err error)\n+//sys\tIoperm(from int, num int, on int) (err error)\n+//sys\tIopl(level int) (err error)\n+//sys\tLchown(path string, uid int, gid int) (err error)\n+//sys\tListen(s int, n int) (err error)\n+//sys\tLstat(path string, stat *Stat_t) (err error) = SYS_LSTAT64\n+//sys\tPause() (err error)\n+//sys\tPread(fd int, p []byte, offset int64) (n int, err error) = SYS_PREAD64\n+//sys\tPwrite(fd int, p []byte, offset int64) (n int, err error) = SYS_PWRITE64\n+//sys\tRenameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)\n+//sys\tSelect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error) = SYS__NEWSELECT\n+//sys\tsendfile(outfd int, infd int, offset *int64, count int) (written int, err error) = SYS_SENDFILE64\n+//sys\tsetfsgid(gid int) (prev int, err error)\n+//sys\tsetfsuid(uid int) (prev int, err error)\n+//sysnb\tSetregid(rgid int, egid int) (err error)\n+//sysnb\tSetresgid(rgid int, egid int, sgid int) (err error)\n+//sysnb\tSetresuid(ruid int, euid int, suid int) (err error)\n+//sysnb\tSetreuid(ruid int, euid int) (err error)\n+//sys\tShutdown(fd int, how int) (err error)\n+//sys\tSplice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int, err error)\n+//sys\tStat(path string, stat *Stat_t) (err error) = SYS_STAT64\n+//sys\tTruncate(path string, length int64) (err error) = SYS_TRUNCATE64\n+//sys\tUstat(dev int, ubuf *Ustat_t) (err error)\n+//sys\taccept(s int, rsa *RawSockaddrAny, addrlen *_Socklen) (fd int, err error)\n+//sys\taccept4(s int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int) (fd int, err error)\n+//sys\tbind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n+//sys\tconnect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)\n+//sysnb\tgetgroups(n int, list *_Gid_t) (nn int, err error)\n+//sysnb\tsetgroups(n int, list *_Gid_t) (err error)\n+//sys\tgetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)\n+//sys\tsetsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)\n+//sysnb\tsocket(domain int, typ int, proto int) (fd int, err error)\n+//sysnb\tsocketpair(domain int, typ int, proto int, fd *[2]int32) (err error)\n+//sysnb\tgetpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)\n+//sysnb\tgetsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)\n+//sys\trecvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error)\n+//sys\tsendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error)\n+//sys\trecvmsg(s int, msg *Msghdr, flags int) (n int, err error)\n+//sys\tsendmsg(s int, msg *Msghdr, flags int) (n int, err error)\n+\n+//sys\tfutimesat(dirfd int, path string, times *[2]Timeval) (err error)\n+//sysnb\tGettimeofday(tv *Timeval) (err error)\n+//sysnb\tTime(t *Time_t) (tt Time_t, err error)\n+//sys\tUtime(path string, buf *Utimbuf) (err error)\n+//sys\tutimes(path string, times *[2]Timeval) (err error)\n+\n+func Fadvise(fd int, offset int64, length int64, advice int) (err error) {\n+\t_, _, e1 := Syscall6(SYS_FADVISE64_64, uintptr(fd), uintptr(advice), uintptr(offset>>32), uintptr(offset), uintptr(length>>32), uintptr(length))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+func seek(fd int, offset int64, whence int) (int64, syscall.Errno) {\n+\tvar newoffset int64\n+\toffsetLow := uint32(offset & 0xffffffff)\n+\toffsetHigh := uint32((offset >> 32) & 0xffffffff)\n+\t_, _, err := Syscall6(SYS__LLSEEK, uintptr(fd), uintptr(offsetHigh), uintptr(offsetLow), uintptr(unsafe.Pointer(&newoffset)), uintptr(whence), 0)\n+\treturn newoffset, err\n+}\n+\n+func Seek(fd int, offset int64, whence int) (newoffset int64, err error) {\n+\tnewoffset, errno := seek(fd, offset, whence)\n+\tif errno != 0 {\n+\t\treturn 0, errno\n+\t}\n+\treturn newoffset, nil\n+}\n+\n+func Fstatfs(fd int, buf *Statfs_t) (err error) {\n+\t_, _, e := Syscall(SYS_FSTATFS64, uintptr(fd), unsafe.Sizeof(*buf), uintptr(unsafe.Pointer(buf)))\n+\tif e != 0 {\n+\t\terr = e\n+\t}\n+\treturn\n+}\n+\n+func Statfs(path string, buf *Statfs_t) (err error) {\n+\tpathp, err := BytePtrFromString(path)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\t_, _, e := Syscall(SYS_STATFS64, uintptr(unsafe.Pointer(pathp)), unsafe.Sizeof(*buf), uintptr(unsafe.Pointer(buf)))\n+\tif e != 0 {\n+\t\terr = e\n+\t}\n+\treturn\n+}\n+\n+//sys\tmmap2(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset uintptr) (xaddr uintptr, err error)\n+\n+func mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error) {\n+\tpage := uintptr(offset / 4096)\n+\tif offset != int64(page)*4096 {\n+\t\treturn 0, EINVAL\n+\t}\n+\treturn mmap2(addr, length, prot, flags, fd, page)\n+}\n+\n+func setTimespec(sec, nsec int64) Timespec {\n+\treturn Timespec{Sec: int32(sec), Nsec: int32(nsec)}\n+}\n+\n+func setTimeval(sec, usec int64) Timeval {\n+\treturn Timeval{Sec: int32(sec), Usec: int32(usec)}\n+}\n+\n+type rlimit32 struct {\n+\tCur uint32\n+\tMax uint32\n+}\n+\n+//sysnb\tgetrlimit(resource int, rlim *rlimit32) (err error) = SYS_UGETRLIMIT\n+\n+const rlimInf32 = ^uint32(0)\n+const rlimInf64 = ^uint64(0)\n+\n+func Getrlimit(resource int, rlim *Rlimit) (err error) {\n+\terr = prlimit(0, resource, nil, rlim)\n+\tif err != ENOSYS {\n+\t\treturn err\n+\t}\n+\n+\trl := rlimit32{}\n+\terr = getrlimit(resource, &rl)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\tif rl.Cur == rlimInf32 {\n+\t\trlim.Cur = rlimInf64\n+\t} else {\n+\t\trlim.Cur = uint64(rl.Cur)\n+\t}\n+\n+\tif rl.Max == rlimInf32 {\n+\t\trlim.Max = rlimInf64\n+\t} else {\n+\t\trlim.Max = uint64(rl.Max)\n+\t}\n+\treturn\n+}\n+\n+//sysnb\tsetrlimit(resource int, rlim *rlimit32) (err error) = SYS_SETRLIMIT\n+\n+func Setrlimit(resource int, rlim *Rlimit) (err error) {\n+\terr = prlimit(0, resource, rlim, nil)\n+\tif err != ENOSYS {\n+\t\treturn err\n+\t}\n+\n+\trl := rlimit32{}\n+\tif rlim.Cur == rlimInf64 {\n+\t\trl.Cur = rlimInf32\n+\t} else if rlim.Cur < uint64(rlimInf32) {\n+\t\trl.Cur = uint32(rlim.Cur)\n+\t} else {\n+\t\treturn EINVAL\n+\t}\n+\tif rlim.Max == rlimInf64 {\n+\t\trl.Max = rlimInf32\n+\t} else if rlim.Max < uint64(rlimInf32) {\n+\t\trl.Max = uint32(rlim.Max)\n+\t} else {\n+\t\treturn EINVAL\n+\t}\n+\n+\treturn setrlimit(resource, &rl)\n+}\n+\n+func (r *PtraceRegs) PC() uint32 { return r.Nip }\n+\n+func (r *PtraceRegs) SetPC(pc uint32) { r.Nip = pc }\n+\n+func (iov *Iovec) SetLen(length int) {\n+\tiov.Len = uint32(length)\n+}\n+\n+func (msghdr *Msghdr) SetControllen(length int) {\n+\tmsghdr.Controllen = uint32(length)\n+}\n+\n+func (msghdr *Msghdr) SetIovlen(length int) {\n+\tmsghdr.Iovlen = uint32(length)\n+}\n+\n+func (cmsg *Cmsghdr) SetLen(length int) {\n+\tcmsg.Len = uint32(length)\n+}\n+\n+//sysnb\tpipe(p *[2]_C_int) (err error)\n+\n+func Pipe(p []int) (err error) {\n+\tif len(p) != 2 {\n+\t\treturn EINVAL\n+\t}\n+\tvar pp [2]_C_int\n+\terr = pipe(&pp)\n+\tp[0] = int(pp[0])\n+\tp[1] = int(pp[1])\n+\treturn\n+}\n+\n+//sysnb\tpipe2(p *[2]_C_int, flags int) (err error)\n+\n+func Pipe2(p []int, flags int) (err error) {\n+\tif len(p) != 2 {\n+\t\treturn EINVAL\n+\t}\n+\tvar pp [2]_C_int\n+\terr = pipe2(&pp, flags)\n+\tp[0] = int(pp[0])\n+\tp[1] = int(pp[1])\n+\treturn\n+}\n+\n+//sys\tpoll(fds *PollFd, nfds int, timeout int) (n int, err error)\n+\n+func Poll(fds []PollFd, timeout int) (n int, err error) {\n+\tif len(fds) == 0 {\n+\t\treturn poll(nil, 0, timeout)\n+\t}\n+\treturn poll(&fds[0], len(fds), timeout)\n+}\n+\n+//sys\tsyncFileRange2(fd int, flags int, off int64, n int64) (err error) = SYS_SYNC_FILE_RANGE2\n+\n+func SyncFileRange(fd int, off int64, n int64, flags int) error {\n+\t// The sync_file_range and sync_file_range2 syscalls differ only in the\n+\t// order of their arguments.\n+\treturn syncFileRange2(fd, flags, off, n)\n+}\n+\n+//sys\tkexecFileLoad(kernelFd int, initrdFd int, cmdlineLen int, cmdline string, flags int) (err error)\n+\n+func KexecFileLoad(kernelFd int, initrdFd int, cmdline string, flags int) error {\n+\tcmdlineLen := len(cmdline)\n+\tif cmdlineLen > 0 {\n+\t\t// Account for the additional NULL byte added by\n+\t\t// BytePtrFromString in kexecFileLoad. The kexec_file_load\n+\t\t// syscall expects a NULL-terminated string.\n+\t\tcmdlineLen++\n+\t}\n+\treturn kexecFileLoad(kernelFd, initrdFd, cmdlineLen, cmdline, flags)\n+}"
    },
    {
      "sha": "d9530e5fbfbc93b654d1d991c5da7aa14d0a4cc0",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc.go",
      "status": "added",
      "additions": 860,
      "deletions": 0,
      "changes": 860,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,860 @@\n+// mkerrors.sh -Wall -Werror -static -I/tmp/include\n+// Code generated by the command above; see README.md. DO NOT EDIT.\n+\n+//go:build ppc && linux\n+// +build ppc,linux\n+\n+// Code generated by cmd/cgo -godefs; DO NOT EDIT.\n+// cgo -godefs -- -Wall -Werror -static -I/tmp/include /build/_const.go\n+\n+package unix\n+\n+import \"syscall\"\n+\n+const (\n+\tB1000000                         = 0x17\n+\tB115200                          = 0x11\n+\tB1152000                         = 0x18\n+\tB1500000                         = 0x19\n+\tB2000000                         = 0x1a\n+\tB230400                          = 0x12\n+\tB2500000                         = 0x1b\n+\tB3000000                         = 0x1c\n+\tB3500000                         = 0x1d\n+\tB4000000                         = 0x1e\n+\tB460800                          = 0x13\n+\tB500000                          = 0x14\n+\tB57600                           = 0x10\n+\tB576000                          = 0x15\n+\tB921600                          = 0x16\n+\tBLKBSZGET                        = 0x40041270\n+\tBLKBSZSET                        = 0x80041271\n+\tBLKFLSBUF                        = 0x20001261\n+\tBLKFRAGET                        = 0x20001265\n+\tBLKFRASET                        = 0x20001264\n+\tBLKGETSIZE                       = 0x20001260\n+\tBLKGETSIZE64                     = 0x40041272\n+\tBLKPBSZGET                       = 0x2000127b\n+\tBLKRAGET                         = 0x20001263\n+\tBLKRASET                         = 0x20001262\n+\tBLKROGET                         = 0x2000125e\n+\tBLKROSET                         = 0x2000125d\n+\tBLKRRPART                        = 0x2000125f\n+\tBLKSECTGET                       = 0x20001267\n+\tBLKSECTSET                       = 0x20001266\n+\tBLKSSZGET                        = 0x20001268\n+\tBOTHER                           = 0x1f\n+\tBS1                              = 0x8000\n+\tBSDLY                            = 0x8000\n+\tCBAUD                            = 0xff\n+\tCBAUDEX                          = 0x0\n+\tCIBAUD                           = 0xff0000\n+\tCLOCAL                           = 0x8000\n+\tCR1                              = 0x1000\n+\tCR2                              = 0x2000\n+\tCR3                              = 0x3000\n+\tCRDLY                            = 0x3000\n+\tCREAD                            = 0x800\n+\tCS6                              = 0x100\n+\tCS7                              = 0x200\n+\tCS8                              = 0x300\n+\tCSIZE                            = 0x300\n+\tCSTOPB                           = 0x400\n+\tECHOCTL                          = 0x40\n+\tECHOE                            = 0x2\n+\tECHOK                            = 0x4\n+\tECHOKE                           = 0x1\n+\tECHONL                           = 0x10\n+\tECHOPRT                          = 0x20\n+\tEFD_CLOEXEC                      = 0x80000\n+\tEFD_NONBLOCK                     = 0x800\n+\tEPOLL_CLOEXEC                    = 0x80000\n+\tEXTPROC                          = 0x10000000\n+\tFF1                              = 0x4000\n+\tFFDLY                            = 0x4000\n+\tFICLONE                          = 0x80049409\n+\tFICLONERANGE                     = 0x8020940d\n+\tFLUSHO                           = 0x800000\n+\tFS_IOC_ENABLE_VERITY             = 0x80806685\n+\tFS_IOC_GETFLAGS                  = 0x40046601\n+\tFS_IOC_GET_ENCRYPTION_NONCE      = 0x4010661b\n+\tFS_IOC_GET_ENCRYPTION_POLICY     = 0x800c6615\n+\tFS_IOC_GET_ENCRYPTION_PWSALT     = 0x80106614\n+\tFS_IOC_SETFLAGS                  = 0x80046602\n+\tFS_IOC_SET_ENCRYPTION_POLICY     = 0x400c6613\n+\tF_GETLK                          = 0xc\n+\tF_GETLK64                        = 0xc\n+\tF_GETOWN                         = 0x9\n+\tF_RDLCK                          = 0x0\n+\tF_SETLK                          = 0xd\n+\tF_SETLK64                        = 0xd\n+\tF_SETLKW                         = 0xe\n+\tF_SETLKW64                       = 0xe\n+\tF_SETOWN                         = 0x8\n+\tF_UNLCK                          = 0x2\n+\tF_WRLCK                          = 0x1\n+\tHIDIOCGRAWINFO                   = 0x40084803\n+\tHIDIOCGRDESC                     = 0x50044802\n+\tHIDIOCGRDESCSIZE                 = 0x40044801\n+\tHUPCL                            = 0x4000\n+\tICANON                           = 0x100\n+\tIEXTEN                           = 0x400\n+\tIN_CLOEXEC                       = 0x80000\n+\tIN_NONBLOCK                      = 0x800\n+\tIOCTL_VM_SOCKETS_GET_LOCAL_CID   = 0x200007b9\n+\tISIG                             = 0x80\n+\tIUCLC                            = 0x1000\n+\tIXOFF                            = 0x400\n+\tIXON                             = 0x200\n+\tMAP_ANON                         = 0x20\n+\tMAP_ANONYMOUS                    = 0x20\n+\tMAP_DENYWRITE                    = 0x800\n+\tMAP_EXECUTABLE                   = 0x1000\n+\tMAP_GROWSDOWN                    = 0x100\n+\tMAP_HUGETLB                      = 0x40000\n+\tMAP_LOCKED                       = 0x80\n+\tMAP_NONBLOCK                     = 0x10000\n+\tMAP_NORESERVE                    = 0x40\n+\tMAP_POPULATE                     = 0x8000\n+\tMAP_STACK                        = 0x20000\n+\tMAP_SYNC                         = 0x80000\n+\tMCL_CURRENT                      = 0x2000\n+\tMCL_FUTURE                       = 0x4000\n+\tMCL_ONFAULT                      = 0x8000\n+\tNFDBITS                          = 0x20\n+\tNL2                              = 0x200\n+\tNL3                              = 0x300\n+\tNLDLY                            = 0x300\n+\tNOFLSH                           = 0x80000000\n+\tNS_GET_NSTYPE                    = 0x2000b703\n+\tNS_GET_OWNER_UID                 = 0x2000b704\n+\tNS_GET_PARENT                    = 0x2000b702\n+\tNS_GET_USERNS                    = 0x2000b701\n+\tOLCUC                            = 0x4\n+\tONLCR                            = 0x2\n+\tO_APPEND                         = 0x400\n+\tO_ASYNC                          = 0x2000\n+\tO_CLOEXEC                        = 0x80000\n+\tO_CREAT                          = 0x40\n+\tO_DIRECT                         = 0x20000\n+\tO_DIRECTORY                      = 0x4000\n+\tO_DSYNC                          = 0x1000\n+\tO_EXCL                           = 0x80\n+\tO_FSYNC                          = 0x101000\n+\tO_LARGEFILE                      = 0x10000\n+\tO_NDELAY                         = 0x800\n+\tO_NOATIME                        = 0x40000\n+\tO_NOCTTY                         = 0x100\n+\tO_NOFOLLOW                       = 0x8000\n+\tO_NONBLOCK                       = 0x800\n+\tO_PATH                           = 0x200000\n+\tO_RSYNC                          = 0x101000\n+\tO_SYNC                           = 0x101000\n+\tO_TMPFILE                        = 0x404000\n+\tO_TRUNC                          = 0x200\n+\tPARENB                           = 0x1000\n+\tPARODD                           = 0x2000\n+\tPENDIN                           = 0x20000000\n+\tPERF_EVENT_IOC_DISABLE           = 0x20002401\n+\tPERF_EVENT_IOC_ENABLE            = 0x20002400\n+\tPERF_EVENT_IOC_ID                = 0x40042407\n+\tPERF_EVENT_IOC_MODIFY_ATTRIBUTES = 0x8004240b\n+\tPERF_EVENT_IOC_PAUSE_OUTPUT      = 0x80042409\n+\tPERF_EVENT_IOC_PERIOD            = 0x80082404\n+\tPERF_EVENT_IOC_QUERY_BPF         = 0xc004240a\n+\tPERF_EVENT_IOC_REFRESH           = 0x20002402\n+\tPERF_EVENT_IOC_RESET             = 0x20002403\n+\tPERF_EVENT_IOC_SET_BPF           = 0x80042408\n+\tPERF_EVENT_IOC_SET_FILTER        = 0x80042406\n+\tPERF_EVENT_IOC_SET_OUTPUT        = 0x20002405\n+\tPPPIOCATTACH                     = 0x8004743d\n+\tPPPIOCATTCHAN                    = 0x80047438\n+\tPPPIOCBRIDGECHAN                 = 0x80047435\n+\tPPPIOCCONNECT                    = 0x8004743a\n+\tPPPIOCDETACH                     = 0x8004743c\n+\tPPPIOCDISCONN                    = 0x20007439\n+\tPPPIOCGASYNCMAP                  = 0x40047458\n+\tPPPIOCGCHAN                      = 0x40047437\n+\tPPPIOCGDEBUG                     = 0x40047441\n+\tPPPIOCGFLAGS                     = 0x4004745a\n+\tPPPIOCGIDLE                      = 0x4008743f\n+\tPPPIOCGIDLE32                    = 0x4008743f\n+\tPPPIOCGIDLE64                    = 0x4010743f\n+\tPPPIOCGL2TPSTATS                 = 0x40487436\n+\tPPPIOCGMRU                       = 0x40047453\n+\tPPPIOCGRASYNCMAP                 = 0x40047455\n+\tPPPIOCGUNIT                      = 0x40047456\n+\tPPPIOCGXASYNCMAP                 = 0x40207450\n+\tPPPIOCSACTIVE                    = 0x80087446\n+\tPPPIOCSASYNCMAP                  = 0x80047457\n+\tPPPIOCSCOMPRESS                  = 0x800c744d\n+\tPPPIOCSDEBUG                     = 0x80047440\n+\tPPPIOCSFLAGS                     = 0x80047459\n+\tPPPIOCSMAXCID                    = 0x80047451\n+\tPPPIOCSMRRU                      = 0x8004743b\n+\tPPPIOCSMRU                       = 0x80047452\n+\tPPPIOCSNPMODE                    = 0x8008744b\n+\tPPPIOCSPASS                      = 0x80087447\n+\tPPPIOCSRASYNCMAP                 = 0x80047454\n+\tPPPIOCSXASYNCMAP                 = 0x8020744f\n+\tPPPIOCUNBRIDGECHAN               = 0x20007434\n+\tPPPIOCXFERUNIT                   = 0x2000744e\n+\tPROT_SAO                         = 0x10\n+\tPR_SET_PTRACER_ANY               = 0xffffffff\n+\tPTRACE_GETEVRREGS                = 0x14\n+\tPTRACE_GETFPREGS                 = 0xe\n+\tPTRACE_GETREGS64                 = 0x16\n+\tPTRACE_GETVRREGS                 = 0x12\n+\tPTRACE_GETVSRREGS                = 0x1b\n+\tPTRACE_GET_DEBUGREG              = 0x19\n+\tPTRACE_SETEVRREGS                = 0x15\n+\tPTRACE_SETFPREGS                 = 0xf\n+\tPTRACE_SETREGS64                 = 0x17\n+\tPTRACE_SETVRREGS                 = 0x13\n+\tPTRACE_SETVSRREGS                = 0x1c\n+\tPTRACE_SET_DEBUGREG              = 0x1a\n+\tPTRACE_SINGLEBLOCK               = 0x100\n+\tPTRACE_SYSEMU                    = 0x1d\n+\tPTRACE_SYSEMU_SINGLESTEP         = 0x1e\n+\tPT_CCR                           = 0x26\n+\tPT_CTR                           = 0x23\n+\tPT_DAR                           = 0x29\n+\tPT_DSCR                          = 0x2c\n+\tPT_DSISR                         = 0x2a\n+\tPT_FPR0                          = 0x30\n+\tPT_FPR31                         = 0x6e\n+\tPT_FPSCR                         = 0x71\n+\tPT_LNK                           = 0x24\n+\tPT_MQ                            = 0x27\n+\tPT_MSR                           = 0x21\n+\tPT_NIP                           = 0x20\n+\tPT_ORIG_R3                       = 0x22\n+\tPT_R0                            = 0x0\n+\tPT_R1                            = 0x1\n+\tPT_R10                           = 0xa\n+\tPT_R11                           = 0xb\n+\tPT_R12                           = 0xc\n+\tPT_R13                           = 0xd\n+\tPT_R14                           = 0xe\n+\tPT_R15                           = 0xf\n+\tPT_R16                           = 0x10\n+\tPT_R17                           = 0x11\n+\tPT_R18                           = 0x12\n+\tPT_R19                           = 0x13\n+\tPT_R2                            = 0x2\n+\tPT_R20                           = 0x14\n+\tPT_R21                           = 0x15\n+\tPT_R22                           = 0x16\n+\tPT_R23                           = 0x17\n+\tPT_R24                           = 0x18\n+\tPT_R25                           = 0x19\n+\tPT_R26                           = 0x1a\n+\tPT_R27                           = 0x1b\n+\tPT_R28                           = 0x1c\n+\tPT_R29                           = 0x1d\n+\tPT_R3                            = 0x3\n+\tPT_R30                           = 0x1e\n+\tPT_R31                           = 0x1f\n+\tPT_R4                            = 0x4\n+\tPT_R5                            = 0x5\n+\tPT_R6                            = 0x6\n+\tPT_R7                            = 0x7\n+\tPT_R8                            = 0x8\n+\tPT_R9                            = 0x9\n+\tPT_REGS_COUNT                    = 0x2c\n+\tPT_RESULT                        = 0x2b\n+\tPT_TRAP                          = 0x28\n+\tPT_XER                           = 0x25\n+\tRLIMIT_AS                        = 0x9\n+\tRLIMIT_MEMLOCK                   = 0x8\n+\tRLIMIT_NOFILE                    = 0x7\n+\tRLIMIT_NPROC                     = 0x6\n+\tRLIMIT_RSS                       = 0x5\n+\tRNDADDENTROPY                    = 0x80085203\n+\tRNDADDTOENTCNT                   = 0x80045201\n+\tRNDCLEARPOOL                     = 0x20005206\n+\tRNDGETENTCNT                     = 0x40045200\n+\tRNDGETPOOL                       = 0x40085202\n+\tRNDRESEEDCRNG                    = 0x20005207\n+\tRNDZAPENTCNT                     = 0x20005204\n+\tRTC_AIE_OFF                      = 0x20007002\n+\tRTC_AIE_ON                       = 0x20007001\n+\tRTC_ALM_READ                     = 0x40247008\n+\tRTC_ALM_SET                      = 0x80247007\n+\tRTC_EPOCH_READ                   = 0x4004700d\n+\tRTC_EPOCH_SET                    = 0x8004700e\n+\tRTC_IRQP_READ                    = 0x4004700b\n+\tRTC_IRQP_SET                     = 0x8004700c\n+\tRTC_PIE_OFF                      = 0x20007006\n+\tRTC_PIE_ON                       = 0x20007005\n+\tRTC_PLL_GET                      = 0x401c7011\n+\tRTC_PLL_SET                      = 0x801c7012\n+\tRTC_RD_TIME                      = 0x40247009\n+\tRTC_SET_TIME                     = 0x8024700a\n+\tRTC_UIE_OFF                      = 0x20007004\n+\tRTC_UIE_ON                       = 0x20007003\n+\tRTC_VL_CLR                       = 0x20007014\n+\tRTC_VL_READ                      = 0x40047013\n+\tRTC_WIE_OFF                      = 0x20007010\n+\tRTC_WIE_ON                       = 0x2000700f\n+\tRTC_WKALM_RD                     = 0x40287010\n+\tRTC_WKALM_SET                    = 0x8028700f\n+\tSCM_TIMESTAMPING                 = 0x25\n+\tSCM_TIMESTAMPING_OPT_STATS       = 0x36\n+\tSCM_TIMESTAMPING_PKTINFO         = 0x3a\n+\tSCM_TIMESTAMPNS                  = 0x23\n+\tSCM_TXTIME                       = 0x3d\n+\tSCM_WIFI_STATUS                  = 0x29\n+\tSFD_CLOEXEC                      = 0x80000\n+\tSFD_NONBLOCK                     = 0x800\n+\tSIOCATMARK                       = 0x8905\n+\tSIOCGPGRP                        = 0x8904\n+\tSIOCGSTAMPNS_NEW                 = 0x40108907\n+\tSIOCGSTAMP_NEW                   = 0x40108906\n+\tSIOCINQ                          = 0x4004667f\n+\tSIOCOUTQ                         = 0x40047473\n+\tSIOCSPGRP                        = 0x8902\n+\tSOCK_CLOEXEC                     = 0x80000\n+\tSOCK_DGRAM                       = 0x2\n+\tSOCK_NONBLOCK                    = 0x800\n+\tSOCK_STREAM                      = 0x1\n+\tSOL_SOCKET                       = 0x1\n+\tSO_ACCEPTCONN                    = 0x1e\n+\tSO_ATTACH_BPF                    = 0x32\n+\tSO_ATTACH_REUSEPORT_CBPF         = 0x33\n+\tSO_ATTACH_REUSEPORT_EBPF         = 0x34\n+\tSO_BINDTODEVICE                  = 0x19\n+\tSO_BINDTOIFINDEX                 = 0x3e\n+\tSO_BPF_EXTENSIONS                = 0x30\n+\tSO_BROADCAST                     = 0x6\n+\tSO_BSDCOMPAT                     = 0xe\n+\tSO_BUSY_POLL                     = 0x2e\n+\tSO_BUSY_POLL_BUDGET              = 0x46\n+\tSO_CNX_ADVICE                    = 0x35\n+\tSO_COOKIE                        = 0x39\n+\tSO_DETACH_REUSEPORT_BPF          = 0x44\n+\tSO_DOMAIN                        = 0x27\n+\tSO_DONTROUTE                     = 0x5\n+\tSO_ERROR                         = 0x4\n+\tSO_INCOMING_CPU                  = 0x31\n+\tSO_INCOMING_NAPI_ID              = 0x38\n+\tSO_KEEPALIVE                     = 0x9\n+\tSO_LINGER                        = 0xd\n+\tSO_LOCK_FILTER                   = 0x2c\n+\tSO_MARK                          = 0x24\n+\tSO_MAX_PACING_RATE               = 0x2f\n+\tSO_MEMINFO                       = 0x37\n+\tSO_NOFCS                         = 0x2b\n+\tSO_OOBINLINE                     = 0xa\n+\tSO_PASSCRED                      = 0x14\n+\tSO_PASSSEC                       = 0x22\n+\tSO_PEEK_OFF                      = 0x2a\n+\tSO_PEERCRED                      = 0x15\n+\tSO_PEERGROUPS                    = 0x3b\n+\tSO_PEERSEC                       = 0x1f\n+\tSO_PREFER_BUSY_POLL              = 0x45\n+\tSO_PROTOCOL                      = 0x26\n+\tSO_RCVBUF                        = 0x8\n+\tSO_RCVBUFFORCE                   = 0x21\n+\tSO_RCVLOWAT                      = 0x10\n+\tSO_RCVTIMEO                      = 0x12\n+\tSO_RCVTIMEO_NEW                  = 0x42\n+\tSO_RCVTIMEO_OLD                  = 0x12\n+\tSO_REUSEADDR                     = 0x2\n+\tSO_REUSEPORT                     = 0xf\n+\tSO_RXQ_OVFL                      = 0x28\n+\tSO_SECURITY_AUTHENTICATION       = 0x16\n+\tSO_SECURITY_ENCRYPTION_NETWORK   = 0x18\n+\tSO_SECURITY_ENCRYPTION_TRANSPORT = 0x17\n+\tSO_SELECT_ERR_QUEUE              = 0x2d\n+\tSO_SNDBUF                        = 0x7\n+\tSO_SNDBUFFORCE                   = 0x20\n+\tSO_SNDLOWAT                      = 0x11\n+\tSO_SNDTIMEO                      = 0x13\n+\tSO_SNDTIMEO_NEW                  = 0x43\n+\tSO_SNDTIMEO_OLD                  = 0x13\n+\tSO_TIMESTAMPING                  = 0x25\n+\tSO_TIMESTAMPING_NEW              = 0x41\n+\tSO_TIMESTAMPING_OLD              = 0x25\n+\tSO_TIMESTAMPNS                   = 0x23\n+\tSO_TIMESTAMPNS_NEW               = 0x40\n+\tSO_TIMESTAMPNS_OLD               = 0x23\n+\tSO_TIMESTAMP_NEW                 = 0x3f\n+\tSO_TXTIME                        = 0x3d\n+\tSO_TYPE                          = 0x3\n+\tSO_WIFI_STATUS                   = 0x29\n+\tSO_ZEROCOPY                      = 0x3c\n+\tTAB1                             = 0x400\n+\tTAB2                             = 0x800\n+\tTAB3                             = 0xc00\n+\tTABDLY                           = 0xc00\n+\tTCFLSH                           = 0x2000741f\n+\tTCGETA                           = 0x40147417\n+\tTCGETS                           = 0x402c7413\n+\tTCSAFLUSH                        = 0x2\n+\tTCSBRK                           = 0x2000741d\n+\tTCSBRKP                          = 0x5425\n+\tTCSETA                           = 0x80147418\n+\tTCSETAF                          = 0x8014741c\n+\tTCSETAW                          = 0x80147419\n+\tTCSETS                           = 0x802c7414\n+\tTCSETSF                          = 0x802c7416\n+\tTCSETSW                          = 0x802c7415\n+\tTCXONC                           = 0x2000741e\n+\tTFD_CLOEXEC                      = 0x80000\n+\tTFD_NONBLOCK                     = 0x800\n+\tTIOCCBRK                         = 0x5428\n+\tTIOCCONS                         = 0x541d\n+\tTIOCEXCL                         = 0x540c\n+\tTIOCGDEV                         = 0x40045432\n+\tTIOCGETC                         = 0x40067412\n+\tTIOCGETD                         = 0x5424\n+\tTIOCGETP                         = 0x40067408\n+\tTIOCGEXCL                        = 0x40045440\n+\tTIOCGICOUNT                      = 0x545d\n+\tTIOCGISO7816                     = 0x40285442\n+\tTIOCGLCKTRMIOS                   = 0x5456\n+\tTIOCGLTC                         = 0x40067474\n+\tTIOCGPGRP                        = 0x40047477\n+\tTIOCGPKT                         = 0x40045438\n+\tTIOCGPTLCK                       = 0x40045439\n+\tTIOCGPTN                         = 0x40045430\n+\tTIOCGPTPEER                      = 0x20005441\n+\tTIOCGRS485                       = 0x542e\n+\tTIOCGSERIAL                      = 0x541e\n+\tTIOCGSID                         = 0x5429\n+\tTIOCGSOFTCAR                     = 0x5419\n+\tTIOCGWINSZ                       = 0x40087468\n+\tTIOCINQ                          = 0x4004667f\n+\tTIOCLINUX                        = 0x541c\n+\tTIOCMBIC                         = 0x5417\n+\tTIOCMBIS                         = 0x5416\n+\tTIOCMGET                         = 0x5415\n+\tTIOCMIWAIT                       = 0x545c\n+\tTIOCMSET                         = 0x5418\n+\tTIOCM_CAR                        = 0x40\n+\tTIOCM_CD                         = 0x40\n+\tTIOCM_CTS                        = 0x20\n+\tTIOCM_DSR                        = 0x100\n+\tTIOCM_LOOP                       = 0x8000\n+\tTIOCM_OUT1                       = 0x2000\n+\tTIOCM_OUT2                       = 0x4000\n+\tTIOCM_RI                         = 0x80\n+\tTIOCM_RNG                        = 0x80\n+\tTIOCM_SR                         = 0x10\n+\tTIOCM_ST                         = 0x8\n+\tTIOCNOTTY                        = 0x5422\n+\tTIOCNXCL                         = 0x540d\n+\tTIOCOUTQ                         = 0x40047473\n+\tTIOCPKT                          = 0x5420\n+\tTIOCSBRK                         = 0x5427\n+\tTIOCSCTTY                        = 0x540e\n+\tTIOCSERCONFIG                    = 0x5453\n+\tTIOCSERGETLSR                    = 0x5459\n+\tTIOCSERGETMULTI                  = 0x545a\n+\tTIOCSERGSTRUCT                   = 0x5458\n+\tTIOCSERGWILD                     = 0x5454\n+\tTIOCSERSETMULTI                  = 0x545b\n+\tTIOCSERSWILD                     = 0x5455\n+\tTIOCSER_TEMT                     = 0x1\n+\tTIOCSETC                         = 0x80067411\n+\tTIOCSETD                         = 0x5423\n+\tTIOCSETN                         = 0x8006740a\n+\tTIOCSETP                         = 0x80067409\n+\tTIOCSIG                          = 0x80045436\n+\tTIOCSISO7816                     = 0xc0285443\n+\tTIOCSLCKTRMIOS                   = 0x5457\n+\tTIOCSLTC                         = 0x80067475\n+\tTIOCSPGRP                        = 0x80047476\n+\tTIOCSPTLCK                       = 0x80045431\n+\tTIOCSRS485                       = 0x542f\n+\tTIOCSSERIAL                      = 0x541f\n+\tTIOCSSOFTCAR                     = 0x541a\n+\tTIOCSTART                        = 0x2000746e\n+\tTIOCSTI                          = 0x5412\n+\tTIOCSTOP                         = 0x2000746f\n+\tTIOCSWINSZ                       = 0x80087467\n+\tTIOCVHANGUP                      = 0x5437\n+\tTOSTOP                           = 0x400000\n+\tTUNATTACHFILTER                  = 0x800854d5\n+\tTUNDETACHFILTER                  = 0x800854d6\n+\tTUNGETDEVNETNS                   = 0x200054e3\n+\tTUNGETFEATURES                   = 0x400454cf\n+\tTUNGETFILTER                     = 0x400854db\n+\tTUNGETIFF                        = 0x400454d2\n+\tTUNGETSNDBUF                     = 0x400454d3\n+\tTUNGETVNETBE                     = 0x400454df\n+\tTUNGETVNETHDRSZ                  = 0x400454d7\n+\tTUNGETVNETLE                     = 0x400454dd\n+\tTUNSETCARRIER                    = 0x800454e2\n+\tTUNSETDEBUG                      = 0x800454c9\n+\tTUNSETFILTEREBPF                 = 0x400454e1\n+\tTUNSETGROUP                      = 0x800454ce\n+\tTUNSETIFF                        = 0x800454ca\n+\tTUNSETIFINDEX                    = 0x800454da\n+\tTUNSETLINK                       = 0x800454cd\n+\tTUNSETNOCSUM                     = 0x800454c8\n+\tTUNSETOFFLOAD                    = 0x800454d0\n+\tTUNSETOWNER                      = 0x800454cc\n+\tTUNSETPERSIST                    = 0x800454cb\n+\tTUNSETQUEUE                      = 0x800454d9\n+\tTUNSETSNDBUF                     = 0x800454d4\n+\tTUNSETSTEERINGEBPF               = 0x400454e0\n+\tTUNSETTXFILTER                   = 0x800454d1\n+\tTUNSETVNETBE                     = 0x800454de\n+\tTUNSETVNETHDRSZ                  = 0x800454d8\n+\tTUNSETVNETLE                     = 0x800454dc\n+\tUBI_IOCATT                       = 0x80186f40\n+\tUBI_IOCDET                       = 0x80046f41\n+\tUBI_IOCEBCH                      = 0x80044f02\n+\tUBI_IOCEBER                      = 0x80044f01\n+\tUBI_IOCEBISMAP                   = 0x40044f05\n+\tUBI_IOCEBMAP                     = 0x80084f03\n+\tUBI_IOCEBUNMAP                   = 0x80044f04\n+\tUBI_IOCMKVOL                     = 0x80986f00\n+\tUBI_IOCRMVOL                     = 0x80046f01\n+\tUBI_IOCRNVOL                     = 0x91106f03\n+\tUBI_IOCRPEB                      = 0x80046f04\n+\tUBI_IOCRSVOL                     = 0x800c6f02\n+\tUBI_IOCSETVOLPROP                = 0x80104f06\n+\tUBI_IOCSPEB                      = 0x80046f05\n+\tUBI_IOCVOLCRBLK                  = 0x80804f07\n+\tUBI_IOCVOLRMBLK                  = 0x20004f08\n+\tUBI_IOCVOLUP                     = 0x80084f00\n+\tVDISCARD                         = 0x10\n+\tVEOF                             = 0x4\n+\tVEOL                             = 0x6\n+\tVEOL2                            = 0x8\n+\tVMIN                             = 0x5\n+\tVREPRINT                         = 0xb\n+\tVSTART                           = 0xd\n+\tVSTOP                            = 0xe\n+\tVSUSP                            = 0xc\n+\tVSWTC                            = 0x9\n+\tVT1                              = 0x10000\n+\tVTDLY                            = 0x10000\n+\tVTIME                            = 0x7\n+\tVWERASE                          = 0xa\n+\tWDIOC_GETBOOTSTATUS              = 0x40045702\n+\tWDIOC_GETPRETIMEOUT              = 0x40045709\n+\tWDIOC_GETSTATUS                  = 0x40045701\n+\tWDIOC_GETSUPPORT                 = 0x40285700\n+\tWDIOC_GETTEMP                    = 0x40045703\n+\tWDIOC_GETTIMELEFT                = 0x4004570a\n+\tWDIOC_GETTIMEOUT                 = 0x40045707\n+\tWDIOC_KEEPALIVE                  = 0x40045705\n+\tWDIOC_SETOPTIONS                 = 0x40045704\n+\tWORDSIZE                         = 0x20\n+\tXCASE                            = 0x4000\n+\tXTABS                            = 0xc00\n+\t_HIDIOCGRAWNAME                  = 0x40804804\n+\t_HIDIOCGRAWPHYS                  = 0x40404805\n+\t_HIDIOCGRAWUNIQ                  = 0x40404808\n+)\n+\n+// Errors\n+const (\n+\tEADDRINUSE      = syscall.Errno(0x62)\n+\tEADDRNOTAVAIL   = syscall.Errno(0x63)\n+\tEADV            = syscall.Errno(0x44)\n+\tEAFNOSUPPORT    = syscall.Errno(0x61)\n+\tEALREADY        = syscall.Errno(0x72)\n+\tEBADE           = syscall.Errno(0x34)\n+\tEBADFD          = syscall.Errno(0x4d)\n+\tEBADMSG         = syscall.Errno(0x4a)\n+\tEBADR           = syscall.Errno(0x35)\n+\tEBADRQC         = syscall.Errno(0x38)\n+\tEBADSLT         = syscall.Errno(0x39)\n+\tEBFONT          = syscall.Errno(0x3b)\n+\tECANCELED       = syscall.Errno(0x7d)\n+\tECHRNG          = syscall.Errno(0x2c)\n+\tECOMM           = syscall.Errno(0x46)\n+\tECONNABORTED    = syscall.Errno(0x67)\n+\tECONNREFUSED    = syscall.Errno(0x6f)\n+\tECONNRESET      = syscall.Errno(0x68)\n+\tEDEADLK         = syscall.Errno(0x23)\n+\tEDEADLOCK       = syscall.Errno(0x3a)\n+\tEDESTADDRREQ    = syscall.Errno(0x59)\n+\tEDOTDOT         = syscall.Errno(0x49)\n+\tEDQUOT          = syscall.Errno(0x7a)\n+\tEHOSTDOWN       = syscall.Errno(0x70)\n+\tEHOSTUNREACH    = syscall.Errno(0x71)\n+\tEHWPOISON       = syscall.Errno(0x85)\n+\tEIDRM           = syscall.Errno(0x2b)\n+\tEILSEQ          = syscall.Errno(0x54)\n+\tEINPROGRESS     = syscall.Errno(0x73)\n+\tEISCONN         = syscall.Errno(0x6a)\n+\tEISNAM          = syscall.Errno(0x78)\n+\tEKEYEXPIRED     = syscall.Errno(0x7f)\n+\tEKEYREJECTED    = syscall.Errno(0x81)\n+\tEKEYREVOKED     = syscall.Errno(0x80)\n+\tEL2HLT          = syscall.Errno(0x33)\n+\tEL2NSYNC        = syscall.Errno(0x2d)\n+\tEL3HLT          = syscall.Errno(0x2e)\n+\tEL3RST          = syscall.Errno(0x2f)\n+\tELIBACC         = syscall.Errno(0x4f)\n+\tELIBBAD         = syscall.Errno(0x50)\n+\tELIBEXEC        = syscall.Errno(0x53)\n+\tELIBMAX         = syscall.Errno(0x52)\n+\tELIBSCN         = syscall.Errno(0x51)\n+\tELNRNG          = syscall.Errno(0x30)\n+\tELOOP           = syscall.Errno(0x28)\n+\tEMEDIUMTYPE     = syscall.Errno(0x7c)\n+\tEMSGSIZE        = syscall.Errno(0x5a)\n+\tEMULTIHOP       = syscall.Errno(0x48)\n+\tENAMETOOLONG    = syscall.Errno(0x24)\n+\tENAVAIL         = syscall.Errno(0x77)\n+\tENETDOWN        = syscall.Errno(0x64)\n+\tENETRESET       = syscall.Errno(0x66)\n+\tENETUNREACH     = syscall.Errno(0x65)\n+\tENOANO          = syscall.Errno(0x37)\n+\tENOBUFS         = syscall.Errno(0x69)\n+\tENOCSI          = syscall.Errno(0x32)\n+\tENODATA         = syscall.Errno(0x3d)\n+\tENOKEY          = syscall.Errno(0x7e)\n+\tENOLCK          = syscall.Errno(0x25)\n+\tENOLINK         = syscall.Errno(0x43)\n+\tENOMEDIUM       = syscall.Errno(0x7b)\n+\tENOMSG          = syscall.Errno(0x2a)\n+\tENONET          = syscall.Errno(0x40)\n+\tENOPKG          = syscall.Errno(0x41)\n+\tENOPROTOOPT     = syscall.Errno(0x5c)\n+\tENOSR           = syscall.Errno(0x3f)\n+\tENOSTR          = syscall.Errno(0x3c)\n+\tENOSYS          = syscall.Errno(0x26)\n+\tENOTCONN        = syscall.Errno(0x6b)\n+\tENOTEMPTY       = syscall.Errno(0x27)\n+\tENOTNAM         = syscall.Errno(0x76)\n+\tENOTRECOVERABLE = syscall.Errno(0x83)\n+\tENOTSOCK        = syscall.Errno(0x58)\n+\tENOTSUP         = syscall.Errno(0x5f)\n+\tENOTUNIQ        = syscall.Errno(0x4c)\n+\tEOPNOTSUPP      = syscall.Errno(0x5f)\n+\tEOVERFLOW       = syscall.Errno(0x4b)\n+\tEOWNERDEAD      = syscall.Errno(0x82)\n+\tEPFNOSUPPORT    = syscall.Errno(0x60)\n+\tEPROTO          = syscall.Errno(0x47)\n+\tEPROTONOSUPPORT = syscall.Errno(0x5d)\n+\tEPROTOTYPE      = syscall.Errno(0x5b)\n+\tEREMCHG         = syscall.Errno(0x4e)\n+\tEREMOTE         = syscall.Errno(0x42)\n+\tEREMOTEIO       = syscall.Errno(0x79)\n+\tERESTART        = syscall.Errno(0x55)\n+\tERFKILL         = syscall.Errno(0x84)\n+\tESHUTDOWN       = syscall.Errno(0x6c)\n+\tESOCKTNOSUPPORT = syscall.Errno(0x5e)\n+\tESRMNT          = syscall.Errno(0x45)\n+\tESTALE          = syscall.Errno(0x74)\n+\tESTRPIPE        = syscall.Errno(0x56)\n+\tETIME           = syscall.Errno(0x3e)\n+\tETIMEDOUT       = syscall.Errno(0x6e)\n+\tETOOMANYREFS    = syscall.Errno(0x6d)\n+\tEUCLEAN         = syscall.Errno(0x75)\n+\tEUNATCH         = syscall.Errno(0x31)\n+\tEUSERS          = syscall.Errno(0x57)\n+\tEXFULL          = syscall.Errno(0x36)\n+)\n+\n+// Signals\n+const (\n+\tSIGBUS    = syscall.Signal(0x7)\n+\tSIGCHLD   = syscall.Signal(0x11)\n+\tSIGCLD    = syscall.Signal(0x11)\n+\tSIGCONT   = syscall.Signal(0x12)\n+\tSIGIO     = syscall.Signal(0x1d)\n+\tSIGPOLL   = syscall.Signal(0x1d)\n+\tSIGPROF   = syscall.Signal(0x1b)\n+\tSIGPWR    = syscall.Signal(0x1e)\n+\tSIGSTKFLT = syscall.Signal(0x10)\n+\tSIGSTOP   = syscall.Signal(0x13)\n+\tSIGSYS    = syscall.Signal(0x1f)\n+\tSIGTSTP   = syscall.Signal(0x14)\n+\tSIGTTIN   = syscall.Signal(0x15)\n+\tSIGTTOU   = syscall.Signal(0x16)\n+\tSIGURG    = syscall.Signal(0x17)\n+\tSIGUSR1   = syscall.Signal(0xa)\n+\tSIGUSR2   = syscall.Signal(0xc)\n+\tSIGVTALRM = syscall.Signal(0x1a)\n+\tSIGWINCH  = syscall.Signal(0x1c)\n+\tSIGXCPU   = syscall.Signal(0x18)\n+\tSIGXFSZ   = syscall.Signal(0x19)\n+)\n+\n+// Error table\n+var errorList = [...]struct {\n+\tnum  syscall.Errno\n+\tname string\n+\tdesc string\n+}{\n+\t{1, \"EPERM\", \"operation not permitted\"},\n+\t{2, \"ENOENT\", \"no such file or directory\"},\n+\t{3, \"ESRCH\", \"no such process\"},\n+\t{4, \"EINTR\", \"interrupted system call\"},\n+\t{5, \"EIO\", \"input/output error\"},\n+\t{6, \"ENXIO\", \"no such device or address\"},\n+\t{7, \"E2BIG\", \"argument list too long\"},\n+\t{8, \"ENOEXEC\", \"exec format error\"},\n+\t{9, \"EBADF\", \"bad file descriptor\"},\n+\t{10, \"ECHILD\", \"no child processes\"},\n+\t{11, \"EAGAIN\", \"resource temporarily unavailable\"},\n+\t{12, \"ENOMEM\", \"cannot allocate memory\"},\n+\t{13, \"EACCES\", \"permission denied\"},\n+\t{14, \"EFAULT\", \"bad address\"},\n+\t{15, \"ENOTBLK\", \"block device required\"},\n+\t{16, \"EBUSY\", \"device or resource busy\"},\n+\t{17, \"EEXIST\", \"file exists\"},\n+\t{18, \"EXDEV\", \"invalid cross-device link\"},\n+\t{19, \"ENODEV\", \"no such device\"},\n+\t{20, \"ENOTDIR\", \"not a directory\"},\n+\t{21, \"EISDIR\", \"is a directory\"},\n+\t{22, \"EINVAL\", \"invalid argument\"},\n+\t{23, \"ENFILE\", \"too many open files in system\"},\n+\t{24, \"EMFILE\", \"too many open files\"},\n+\t{25, \"ENOTTY\", \"inappropriate ioctl for device\"},\n+\t{26, \"ETXTBSY\", \"text file busy\"},\n+\t{27, \"EFBIG\", \"file too large\"},\n+\t{28, \"ENOSPC\", \"no space left on device\"},\n+\t{29, \"ESPIPE\", \"illegal seek\"},\n+\t{30, \"EROFS\", \"read-only file system\"},\n+\t{31, \"EMLINK\", \"too many links\"},\n+\t{32, \"EPIPE\", \"broken pipe\"},\n+\t{33, \"EDOM\", \"numerical argument out of domain\"},\n+\t{34, \"ERANGE\", \"numerical result out of range\"},\n+\t{35, \"EDEADLK\", \"resource deadlock avoided\"},\n+\t{36, \"ENAMETOOLONG\", \"file name too long\"},\n+\t{37, \"ENOLCK\", \"no locks available\"},\n+\t{38, \"ENOSYS\", \"function not implemented\"},\n+\t{39, \"ENOTEMPTY\", \"directory not empty\"},\n+\t{40, \"ELOOP\", \"too many levels of symbolic links\"},\n+\t{42, \"ENOMSG\", \"no message of desired type\"},\n+\t{43, \"EIDRM\", \"identifier removed\"},\n+\t{44, \"ECHRNG\", \"channel number out of range\"},\n+\t{45, \"EL2NSYNC\", \"level 2 not synchronized\"},\n+\t{46, \"EL3HLT\", \"level 3 halted\"},\n+\t{47, \"EL3RST\", \"level 3 reset\"},\n+\t{48, \"ELNRNG\", \"link number out of range\"},\n+\t{49, \"EUNATCH\", \"protocol driver not attached\"},\n+\t{50, \"ENOCSI\", \"no CSI structure available\"},\n+\t{51, \"EL2HLT\", \"level 2 halted\"},\n+\t{52, \"EBADE\", \"invalid exchange\"},\n+\t{53, \"EBADR\", \"invalid request descriptor\"},\n+\t{54, \"EXFULL\", \"exchange full\"},\n+\t{55, \"ENOANO\", \"no anode\"},\n+\t{56, \"EBADRQC\", \"invalid request code\"},\n+\t{57, \"EBADSLT\", \"invalid slot\"},\n+\t{58, \"EDEADLOCK\", \"file locking deadlock error\"},\n+\t{59, \"EBFONT\", \"bad font file format\"},\n+\t{60, \"ENOSTR\", \"device not a stream\"},\n+\t{61, \"ENODATA\", \"no data available\"},\n+\t{62, \"ETIME\", \"timer expired\"},\n+\t{63, \"ENOSR\", \"out of streams resources\"},\n+\t{64, \"ENONET\", \"machine is not on the network\"},\n+\t{65, \"ENOPKG\", \"package not installed\"},\n+\t{66, \"EREMOTE\", \"object is remote\"},\n+\t{67, \"ENOLINK\", \"link has been severed\"},\n+\t{68, \"EADV\", \"advertise error\"},\n+\t{69, \"ESRMNT\", \"srmount error\"},\n+\t{70, \"ECOMM\", \"communication error on send\"},\n+\t{71, \"EPROTO\", \"protocol error\"},\n+\t{72, \"EMULTIHOP\", \"multihop attempted\"},\n+\t{73, \"EDOTDOT\", \"RFS specific error\"},\n+\t{74, \"EBADMSG\", \"bad message\"},\n+\t{75, \"EOVERFLOW\", \"value too large for defined data type\"},\n+\t{76, \"ENOTUNIQ\", \"name not unique on network\"},\n+\t{77, \"EBADFD\", \"file descriptor in bad state\"},\n+\t{78, \"EREMCHG\", \"remote address changed\"},\n+\t{79, \"ELIBACC\", \"can not access a needed shared library\"},\n+\t{80, \"ELIBBAD\", \"accessing a corrupted shared library\"},\n+\t{81, \"ELIBSCN\", \".lib section in a.out corrupted\"},\n+\t{82, \"ELIBMAX\", \"attempting to link in too many shared libraries\"},\n+\t{83, \"ELIBEXEC\", \"cannot exec a shared library directly\"},\n+\t{84, \"EILSEQ\", \"invalid or incomplete multibyte or wide character\"},\n+\t{85, \"ERESTART\", \"interrupted system call should be restarted\"},\n+\t{86, \"ESTRPIPE\", \"streams pipe error\"},\n+\t{87, \"EUSERS\", \"too many users\"},\n+\t{88, \"ENOTSOCK\", \"socket operation on non-socket\"},\n+\t{89, \"EDESTADDRREQ\", \"destination address required\"},\n+\t{90, \"EMSGSIZE\", \"message too long\"},\n+\t{91, \"EPROTOTYPE\", \"protocol wrong type for socket\"},\n+\t{92, \"ENOPROTOOPT\", \"protocol not available\"},\n+\t{93, \"EPROTONOSUPPORT\", \"protocol not supported\"},\n+\t{94, \"ESOCKTNOSUPPORT\", \"socket type not supported\"},\n+\t{95, \"ENOTSUP\", \"operation not supported\"},\n+\t{96, \"EPFNOSUPPORT\", \"protocol family not supported\"},\n+\t{97, \"EAFNOSUPPORT\", \"address family not supported by protocol\"},\n+\t{98, \"EADDRINUSE\", \"address already in use\"},\n+\t{99, \"EADDRNOTAVAIL\", \"cannot assign requested address\"},\n+\t{100, \"ENETDOWN\", \"network is down\"},\n+\t{101, \"ENETUNREACH\", \"network is unreachable\"},\n+\t{102, \"ENETRESET\", \"network dropped connection on reset\"},\n+\t{103, \"ECONNABORTED\", \"software caused connection abort\"},\n+\t{104, \"ECONNRESET\", \"connection reset by peer\"},\n+\t{105, \"ENOBUFS\", \"no buffer space available\"},\n+\t{106, \"EISCONN\", \"transport endpoint is already connected\"},\n+\t{107, \"ENOTCONN\", \"transport endpoint is not connected\"},\n+\t{108, \"ESHUTDOWN\", \"cannot send after transport endpoint shutdown\"},\n+\t{109, \"ETOOMANYREFS\", \"too many references: cannot splice\"},\n+\t{110, \"ETIMEDOUT\", \"connection timed out\"},\n+\t{111, \"ECONNREFUSED\", \"connection refused\"},\n+\t{112, \"EHOSTDOWN\", \"host is down\"},\n+\t{113, \"EHOSTUNREACH\", \"no route to host\"},\n+\t{114, \"EALREADY\", \"operation already in progress\"},\n+\t{115, \"EINPROGRESS\", \"operation now in progress\"},\n+\t{116, \"ESTALE\", \"stale file handle\"},\n+\t{117, \"EUCLEAN\", \"structure needs cleaning\"},\n+\t{118, \"ENOTNAM\", \"not a XENIX named type file\"},\n+\t{119, \"ENAVAIL\", \"no XENIX semaphores available\"},\n+\t{120, \"EISNAM\", \"is a named type file\"},\n+\t{121, \"EREMOTEIO\", \"remote I/O error\"},\n+\t{122, \"EDQUOT\", \"disk quota exceeded\"},\n+\t{123, \"ENOMEDIUM\", \"no medium found\"},\n+\t{124, \"EMEDIUMTYPE\", \"wrong medium type\"},\n+\t{125, \"ECANCELED\", \"operation canceled\"},\n+\t{126, \"ENOKEY\", \"required key not available\"},\n+\t{127, \"EKEYEXPIRED\", \"key has expired\"},\n+\t{128, \"EKEYREVOKED\", \"key has been revoked\"},\n+\t{129, \"EKEYREJECTED\", \"key was rejected by service\"},\n+\t{130, \"EOWNERDEAD\", \"owner died\"},\n+\t{131, \"ENOTRECOVERABLE\", \"state not recoverable\"},\n+\t{132, \"ERFKILL\", \"operation not possible due to RF-kill\"},\n+\t{133, \"EHWPOISON\", \"memory page has hardware error\"},\n+}\n+\n+// Signal table\n+var signalList = [...]struct {\n+\tnum  syscall.Signal\n+\tname string\n+\tdesc string\n+}{\n+\t{1, \"SIGHUP\", \"hangup\"},\n+\t{2, \"SIGINT\", \"interrupt\"},\n+\t{3, \"SIGQUIT\", \"quit\"},\n+\t{4, \"SIGILL\", \"illegal instruction\"},\n+\t{5, \"SIGTRAP\", \"trace/breakpoint trap\"},\n+\t{6, \"SIGABRT\", \"aborted\"},\n+\t{7, \"SIGBUS\", \"bus error\"},\n+\t{8, \"SIGFPE\", \"floating point exception\"},\n+\t{9, \"SIGKILL\", \"killed\"},\n+\t{10, \"SIGUSR1\", \"user defined signal 1\"},\n+\t{11, \"SIGSEGV\", \"segmentation fault\"},\n+\t{12, \"SIGUSR2\", \"user defined signal 2\"},\n+\t{13, \"SIGPIPE\", \"broken pipe\"},\n+\t{14, \"SIGALRM\", \"alarm clock\"},\n+\t{15, \"SIGTERM\", \"terminated\"},\n+\t{16, \"SIGSTKFLT\", \"stack fault\"},\n+\t{17, \"SIGCHLD\", \"child exited\"},\n+\t{18, \"SIGCONT\", \"continued\"},\n+\t{19, \"SIGSTOP\", \"stopped (signal)\"},\n+\t{20, \"SIGTSTP\", \"stopped\"},\n+\t{21, \"SIGTTIN\", \"stopped (tty input)\"},\n+\t{22, \"SIGTTOU\", \"stopped (tty output)\"},\n+\t{23, \"SIGURG\", \"urgent I/O condition\"},\n+\t{24, \"SIGXCPU\", \"CPU time limit exceeded\"},\n+\t{25, \"SIGXFSZ\", \"file size limit exceeded\"},\n+\t{26, \"SIGVTALRM\", \"virtual timer expired\"},\n+\t{27, \"SIGPROF\", \"profiling timer expired\"},\n+\t{28, \"SIGWINCH\", \"window changed\"},\n+\t{29, \"SIGIO\", \"I/O possible\"},\n+\t{30, \"SIGPWR\", \"power failure\"},\n+\t{31, \"SIGSYS\", \"bad system call\"},\n+}"
    },
    {
      "sha": "927cf1a00f0d72b6a8b6b2fc7c18c8a6bf7a1f9e",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc.go",
      "status": "added",
      "additions": 762,
      "deletions": 0,
      "changes": 762,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,762 @@\n+// go run mksyscall.go -b32 -tags linux,ppc syscall_linux.go syscall_linux_ppc.go\n+// Code generated by the command above; see README.md. DO NOT EDIT.\n+\n+//go:build linux && ppc\n+// +build linux,ppc\n+\n+package unix\n+\n+import (\n+\t\"syscall\"\n+\t\"unsafe\"\n+)\n+\n+var _ syscall.Errno\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func fanotifyMark(fd int, flags uint, mask uint64, dirFd int, pathname *byte) (err error) {\n+\t_, _, e1 := Syscall6(SYS_FANOTIFY_MARK, uintptr(fd), uintptr(flags), uintptr(mask>>32), uintptr(mask), uintptr(dirFd), uintptr(unsafe.Pointer(pathname)))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Fallocate(fd int, mode uint32, off int64, len int64) (err error) {\n+\t_, _, e1 := Syscall6(SYS_FALLOCATE, uintptr(fd), uintptr(mode), uintptr(off>>32), uintptr(off), uintptr(len>>32), uintptr(len))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Tee(rfd int, wfd int, len int, flags int) (n int64, err error) {\n+\tr0, r1, e1 := Syscall6(SYS_TEE, uintptr(rfd), uintptr(wfd), uintptr(len), uintptr(flags), 0, 0)\n+\tn = int64(int64(r0)<<32 | int64(r1))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func dup2(oldfd int, newfd int) (err error) {\n+\t_, _, e1 := Syscall(SYS_DUP2, uintptr(oldfd), uintptr(newfd), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func EpollCreate(size int) (fd int, err error) {\n+\tr0, _, e1 := RawSyscall(SYS_EPOLL_CREATE, uintptr(size), 0, 0)\n+\tfd = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(events) > 0 {\n+\t\t_p0 = unsafe.Pointer(&events[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := Syscall6(SYS_EPOLL_WAIT, uintptr(epfd), uintptr(_p0), uintptr(len(events)), uintptr(msec), 0, 0)\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Fchown(fd int, uid int, gid int) (err error) {\n+\t_, _, e1 := Syscall(SYS_FCHOWN, uintptr(fd), uintptr(uid), uintptr(gid))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Fstat(fd int, stat *Stat_t) (err error) {\n+\t_, _, e1 := Syscall(SYS_FSTAT64, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Fstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) {\n+\tvar _p0 *byte\n+\t_p0, err = BytePtrFromString(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\t_, _, e1 := Syscall6(SYS_FSTATAT64, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), uintptr(flags), 0, 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Ftruncate(fd int, length int64) (err error) {\n+\t_, _, e1 := Syscall(SYS_FTRUNCATE64, uintptr(fd), uintptr(length>>32), uintptr(length))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Getegid() (egid int) {\n+\tr0, _ := RawSyscallNoError(SYS_GETEGID, 0, 0, 0)\n+\tegid = int(r0)\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Geteuid() (euid int) {\n+\tr0, _ := RawSyscallNoError(SYS_GETEUID, 0, 0, 0)\n+\teuid = int(r0)\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Getgid() (gid int) {\n+\tr0, _ := RawSyscallNoError(SYS_GETGID, 0, 0, 0)\n+\tgid = int(r0)\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Getuid() (uid int) {\n+\tr0, _ := RawSyscallNoError(SYS_GETUID, 0, 0, 0)\n+\tuid = int(r0)\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func InotifyInit() (fd int, err error) {\n+\tr0, _, e1 := RawSyscall(SYS_INOTIFY_INIT, 0, 0, 0)\n+\tfd = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Ioperm(from int, num int, on int) (err error) {\n+\t_, _, e1 := Syscall(SYS_IOPERM, uintptr(from), uintptr(num), uintptr(on))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Iopl(level int) (err error) {\n+\t_, _, e1 := Syscall(SYS_IOPL, uintptr(level), 0, 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Lchown(path string, uid int, gid int) (err error) {\n+\tvar _p0 *byte\n+\t_p0, err = BytePtrFromString(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\t_, _, e1 := Syscall(SYS_LCHOWN, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Listen(s int, n int) (err error) {\n+\t_, _, e1 := Syscall(SYS_LISTEN, uintptr(s), uintptr(n), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Lstat(path string, stat *Stat_t) (err error) {\n+\tvar _p0 *byte\n+\t_p0, err = BytePtrFromString(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\t_, _, e1 := Syscall(SYS_LSTAT64, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Pause() (err error) {\n+\t_, _, e1 := Syscall(SYS_PAUSE, 0, 0, 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Pread(fd int, p []byte, offset int64) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(p) > 0 {\n+\t\t_p0 = unsafe.Pointer(&p[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset>>32), uintptr(offset), 0)\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Pwrite(fd int, p []byte, offset int64) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(p) > 0 {\n+\t\t_p0 = unsafe.Pointer(&p[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset>>32), uintptr(offset), 0)\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) {\n+\tvar _p0 *byte\n+\t_p0, err = BytePtrFromString(oldpath)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\tvar _p1 *byte\n+\t_p1, err = BytePtrFromString(newpath)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\t_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error) {\n+\tr0, _, e1 := Syscall6(SYS__NEWSELECT, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), 0)\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func sendfile(outfd int, infd int, offset *int64, count int) (written int, err error) {\n+\tr0, _, e1 := Syscall6(SYS_SENDFILE64, uintptr(outfd), uintptr(infd), uintptr(unsafe.Pointer(offset)), uintptr(count), 0, 0)\n+\twritten = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func setfsgid(gid int) (prev int, err error) {\n+\tr0, _, e1 := Syscall(SYS_SETFSGID, uintptr(gid), 0, 0)\n+\tprev = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func setfsuid(uid int) (prev int, err error) {\n+\tr0, _, e1 := Syscall(SYS_SETFSUID, uintptr(uid), 0, 0)\n+\tprev = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Setregid(rgid int, egid int) (err error) {\n+\t_, _, e1 := RawSyscall(SYS_SETREGID, uintptr(rgid), uintptr(egid), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Setresgid(rgid int, egid int, sgid int) (err error) {\n+\t_, _, e1 := RawSyscall(SYS_SETRESGID, uintptr(rgid), uintptr(egid), uintptr(sgid))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Setresuid(ruid int, euid int, suid int) (err error) {\n+\t_, _, e1 := RawSyscall(SYS_SETRESUID, uintptr(ruid), uintptr(euid), uintptr(suid))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Setreuid(ruid int, euid int) (err error) {\n+\t_, _, e1 := RawSyscall(SYS_SETREUID, uintptr(ruid), uintptr(euid), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Shutdown(fd int, how int) (err error) {\n+\t_, _, e1 := Syscall(SYS_SHUTDOWN, uintptr(fd), uintptr(how), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int, err error) {\n+\tr0, _, e1 := Syscall6(SYS_SPLICE, uintptr(rfd), uintptr(unsafe.Pointer(roff)), uintptr(wfd), uintptr(unsafe.Pointer(woff)), uintptr(len), uintptr(flags))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Stat(path string, stat *Stat_t) (err error) {\n+\tvar _p0 *byte\n+\t_p0, err = BytePtrFromString(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\t_, _, e1 := Syscall(SYS_STAT64, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Truncate(path string, length int64) (err error) {\n+\tvar _p0 *byte\n+\t_p0, err = BytePtrFromString(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\t_, _, e1 := Syscall(SYS_TRUNCATE64, uintptr(unsafe.Pointer(_p0)), uintptr(length>>32), uintptr(length))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Ustat(dev int, ubuf *Ustat_t) (err error) {\n+\t_, _, e1 := Syscall(SYS_USTAT, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func accept(s int, rsa *RawSockaddrAny, addrlen *_Socklen) (fd int, err error) {\n+\tr0, _, e1 := Syscall(SYS_ACCEPT, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))\n+\tfd = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func accept4(s int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int) (fd int, err error) {\n+\tr0, _, e1 := Syscall6(SYS_ACCEPT4, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags), 0, 0)\n+\tfd = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func bind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {\n+\t_, _, e1 := Syscall(SYS_BIND, uintptr(s), uintptr(addr), uintptr(addrlen))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {\n+\t_, _, e1 := Syscall(SYS_CONNECT, uintptr(s), uintptr(addr), uintptr(addrlen))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func getgroups(n int, list *_Gid_t) (nn int, err error) {\n+\tr0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)\n+\tnn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func setgroups(n int, list *_Gid_t) (err error) {\n+\t_, _, e1 := RawSyscall(SYS_SETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) {\n+\t_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {\n+\t_, _, e1 := Syscall6(SYS_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func socket(domain int, typ int, proto int) (fd int, err error) {\n+\tr0, _, e1 := RawSyscall(SYS_SOCKET, uintptr(domain), uintptr(typ), uintptr(proto))\n+\tfd = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func socketpair(domain int, typ int, proto int, fd *[2]int32) (err error) {\n+\t_, _, e1 := RawSyscall6(SYS_SOCKETPAIR, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(unsafe.Pointer(fd)), 0, 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func getpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {\n+\t_, _, e1 := RawSyscall(SYS_GETPEERNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func getsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {\n+\t_, _, e1 := RawSyscall(SYS_GETSOCKNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(p) > 0 {\n+\t\t_p0 = unsafe.Pointer(&p[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(buf) > 0 {\n+\t\t_p0 = unsafe.Pointer(&buf[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\t_, _, e1 := Syscall6(SYS_SENDTO, uintptr(s), uintptr(_p0), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func recvmsg(s int, msg *Msghdr, flags int) (n int, err error) {\n+\tr0, _, e1 := Syscall(SYS_RECVMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func sendmsg(s int, msg *Msghdr, flags int) (n int, err error) {\n+\tr0, _, e1 := Syscall(SYS_SENDMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func futimesat(dirfd int, path string, times *[2]Timeval) (err error) {\n+\tvar _p0 *byte\n+\t_p0, err = BytePtrFromString(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\t_, _, e1 := Syscall(SYS_FUTIMESAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Gettimeofday(tv *Timeval) (err error) {\n+\t_, _, e1 := RawSyscall(SYS_GETTIMEOFDAY, uintptr(unsafe.Pointer(tv)), 0, 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Time(t *Time_t) (tt Time_t, err error) {\n+\tr0, _, e1 := RawSyscall(SYS_TIME, uintptr(unsafe.Pointer(t)), 0, 0)\n+\ttt = Time_t(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Utime(path string, buf *Utimbuf) (err error) {\n+\tvar _p0 *byte\n+\t_p0, err = BytePtrFromString(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\t_, _, e1 := Syscall(SYS_UTIME, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func utimes(path string, times *[2]Timeval) (err error) {\n+\tvar _p0 *byte\n+\t_p0, err = BytePtrFromString(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\t_, _, e1 := Syscall(SYS_UTIMES, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func mmap2(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset uintptr) (xaddr uintptr, err error) {\n+\tr0, _, e1 := Syscall6(SYS_MMAP2, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flags), uintptr(fd), uintptr(pageOffset))\n+\txaddr = uintptr(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func getrlimit(resource int, rlim *rlimit32) (err error) {\n+\t_, _, e1 := RawSyscall(SYS_UGETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func setrlimit(resource int, rlim *rlimit32) (err error) {\n+\t_, _, e1 := RawSyscall(SYS_SETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func pipe(p *[2]_C_int) (err error) {\n+\t_, _, e1 := RawSyscall(SYS_PIPE, uintptr(unsafe.Pointer(p)), 0, 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func poll(fds *PollFd, nfds int, timeout int) (n int, err error) {\n+\tr0, _, e1 := Syscall(SYS_POLL, uintptr(unsafe.Pointer(fds)), uintptr(nfds), uintptr(timeout))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func syncFileRange2(fd int, flags int, off int64, n int64) (err error) {\n+\t_, _, e1 := Syscall6(SYS_SYNC_FILE_RANGE2, uintptr(fd), uintptr(flags), uintptr(off>>32), uintptr(off), uintptr(n>>32), uintptr(n))\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func kexecFileLoad(kernelFd int, initrdFd int, cmdlineLen int, cmdline string, flags int) (err error) {\n+\tvar _p0 *byte\n+\t_p0, err = BytePtrFromString(cmdline)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\t_, _, e1 := Syscall6(SYS_KEXEC_FILE_LOAD, uintptr(kernelFd), uintptr(initrdFd), uintptr(cmdlineLen), uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}"
    },
    {
      "sha": "7693656a6b456efe93f3353707c610c0ca26db8a",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsysnum_linux_ppc.go",
      "status": "added",
      "additions": 433,
      "deletions": 0,
      "changes": 433,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/zsysnum_linux_ppc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/zsysnum_linux_ppc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/sys/unix/zsysnum_linux_ppc.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,433 @@\n+// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/include /tmp/include/asm/unistd.h\n+// Code generated by the command above; see README.md. DO NOT EDIT.\n+\n+//go:build ppc && linux\n+// +build ppc,linux\n+\n+package unix\n+\n+const (\n+\tSYS_RESTART_SYSCALL              = 0\n+\tSYS_EXIT                         = 1\n+\tSYS_FORK                         = 2\n+\tSYS_READ                         = 3\n+\tSYS_WRITE                        = 4\n+\tSYS_OPEN                         = 5\n+\tSYS_CLOSE                        = 6\n+\tSYS_WAITPID                      = 7\n+\tSYS_CREAT                        = 8\n+\tSYS_LINK                         = 9\n+\tSYS_UNLINK                       = 10\n+\tSYS_EXECVE                       = 11\n+\tSYS_CHDIR                        = 12\n+\tSYS_TIME                         = 13\n+\tSYS_MKNOD                        = 14\n+\tSYS_CHMOD                        = 15\n+\tSYS_LCHOWN                       = 16\n+\tSYS_BREAK                        = 17\n+\tSYS_OLDSTAT                      = 18\n+\tSYS_LSEEK                        = 19\n+\tSYS_GETPID                       = 20\n+\tSYS_MOUNT                        = 21\n+\tSYS_UMOUNT                       = 22\n+\tSYS_SETUID                       = 23\n+\tSYS_GETUID                       = 24\n+\tSYS_STIME                        = 25\n+\tSYS_PTRACE                       = 26\n+\tSYS_ALARM                        = 27\n+\tSYS_OLDFSTAT                     = 28\n+\tSYS_PAUSE                        = 29\n+\tSYS_UTIME                        = 30\n+\tSYS_STTY                         = 31\n+\tSYS_GTTY                         = 32\n+\tSYS_ACCESS                       = 33\n+\tSYS_NICE                         = 34\n+\tSYS_FTIME                        = 35\n+\tSYS_SYNC                         = 36\n+\tSYS_KILL                         = 37\n+\tSYS_RENAME                       = 38\n+\tSYS_MKDIR                        = 39\n+\tSYS_RMDIR                        = 40\n+\tSYS_DUP                          = 41\n+\tSYS_PIPE                         = 42\n+\tSYS_TIMES                        = 43\n+\tSYS_PROF                         = 44\n+\tSYS_BRK                          = 45\n+\tSYS_SETGID                       = 46\n+\tSYS_GETGID                       = 47\n+\tSYS_SIGNAL                       = 48\n+\tSYS_GETEUID                      = 49\n+\tSYS_GETEGID                      = 50\n+\tSYS_ACCT                         = 51\n+\tSYS_UMOUNT2                      = 52\n+\tSYS_LOCK                         = 53\n+\tSYS_IOCTL                        = 54\n+\tSYS_FCNTL                        = 55\n+\tSYS_MPX                          = 56\n+\tSYS_SETPGID                      = 57\n+\tSYS_ULIMIT                       = 58\n+\tSYS_OLDOLDUNAME                  = 59\n+\tSYS_UMASK                        = 60\n+\tSYS_CHROOT                       = 61\n+\tSYS_USTAT                        = 62\n+\tSYS_DUP2                         = 63\n+\tSYS_GETPPID                      = 64\n+\tSYS_GETPGRP                      = 65\n+\tSYS_SETSID                       = 66\n+\tSYS_SIGACTION                    = 67\n+\tSYS_SGETMASK                     = 68\n+\tSYS_SSETMASK                     = 69\n+\tSYS_SETREUID                     = 70\n+\tSYS_SETREGID                     = 71\n+\tSYS_SIGSUSPEND                   = 72\n+\tSYS_SIGPENDING                   = 73\n+\tSYS_SETHOSTNAME                  = 74\n+\tSYS_SETRLIMIT                    = 75\n+\tSYS_GETRLIMIT                    = 76\n+\tSYS_GETRUSAGE                    = 77\n+\tSYS_GETTIMEOFDAY                 = 78\n+\tSYS_SETTIMEOFDAY                 = 79\n+\tSYS_GETGROUPS                    = 80\n+\tSYS_SETGROUPS                    = 81\n+\tSYS_SELECT                       = 82\n+\tSYS_SYMLINK                      = 83\n+\tSYS_OLDLSTAT                     = 84\n+\tSYS_READLINK                     = 85\n+\tSYS_USELIB                       = 86\n+\tSYS_SWAPON                       = 87\n+\tSYS_REBOOT                       = 88\n+\tSYS_READDIR                      = 89\n+\tSYS_MMAP                         = 90\n+\tSYS_MUNMAP                       = 91\n+\tSYS_TRUNCATE                     = 92\n+\tSYS_FTRUNCATE                    = 93\n+\tSYS_FCHMOD                       = 94\n+\tSYS_FCHOWN                       = 95\n+\tSYS_GETPRIORITY                  = 96\n+\tSYS_SETPRIORITY                  = 97\n+\tSYS_PROFIL                       = 98\n+\tSYS_STATFS                       = 99\n+\tSYS_FSTATFS                      = 100\n+\tSYS_IOPERM                       = 101\n+\tSYS_SOCKETCALL                   = 102\n+\tSYS_SYSLOG                       = 103\n+\tSYS_SETITIMER                    = 104\n+\tSYS_GETITIMER                    = 105\n+\tSYS_STAT                         = 106\n+\tSYS_LSTAT                        = 107\n+\tSYS_FSTAT                        = 108\n+\tSYS_OLDUNAME                     = 109\n+\tSYS_IOPL                         = 110\n+\tSYS_VHANGUP                      = 111\n+\tSYS_IDLE                         = 112\n+\tSYS_VM86                         = 113\n+\tSYS_WAIT4                        = 114\n+\tSYS_SWAPOFF                      = 115\n+\tSYS_SYSINFO                      = 116\n+\tSYS_IPC                          = 117\n+\tSYS_FSYNC                        = 118\n+\tSYS_SIGRETURN                    = 119\n+\tSYS_CLONE                        = 120\n+\tSYS_SETDOMAINNAME                = 121\n+\tSYS_UNAME                        = 122\n+\tSYS_MODIFY_LDT                   = 123\n+\tSYS_ADJTIMEX                     = 124\n+\tSYS_MPROTECT                     = 125\n+\tSYS_SIGPROCMASK                  = 126\n+\tSYS_CREATE_MODULE                = 127\n+\tSYS_INIT_MODULE                  = 128\n+\tSYS_DELETE_MODULE                = 129\n+\tSYS_GET_KERNEL_SYMS              = 130\n+\tSYS_QUOTACTL                     = 131\n+\tSYS_GETPGID                      = 132\n+\tSYS_FCHDIR                       = 133\n+\tSYS_BDFLUSH                      = 134\n+\tSYS_SYSFS                        = 135\n+\tSYS_PERSONALITY                  = 136\n+\tSYS_AFS_SYSCALL                  = 137\n+\tSYS_SETFSUID                     = 138\n+\tSYS_SETFSGID                     = 139\n+\tSYS__LLSEEK                      = 140\n+\tSYS_GETDENTS                     = 141\n+\tSYS__NEWSELECT                   = 142\n+\tSYS_FLOCK                        = 143\n+\tSYS_MSYNC                        = 144\n+\tSYS_READV                        = 145\n+\tSYS_WRITEV                       = 146\n+\tSYS_GETSID                       = 147\n+\tSYS_FDATASYNC                    = 148\n+\tSYS__SYSCTL                      = 149\n+\tSYS_MLOCK                        = 150\n+\tSYS_MUNLOCK                      = 151\n+\tSYS_MLOCKALL                     = 152\n+\tSYS_MUNLOCKALL                   = 153\n+\tSYS_SCHED_SETPARAM               = 154\n+\tSYS_SCHED_GETPARAM               = 155\n+\tSYS_SCHED_SETSCHEDULER           = 156\n+\tSYS_SCHED_GETSCHEDULER           = 157\n+\tSYS_SCHED_YIELD                  = 158\n+\tSYS_SCHED_GET_PRIORITY_MAX       = 159\n+\tSYS_SCHED_GET_PRIORITY_MIN       = 160\n+\tSYS_SCHED_RR_GET_INTERVAL        = 161\n+\tSYS_NANOSLEEP                    = 162\n+\tSYS_MREMAP                       = 163\n+\tSYS_SETRESUID                    = 164\n+\tSYS_GETRESUID                    = 165\n+\tSYS_QUERY_MODULE                 = 166\n+\tSYS_POLL                         = 167\n+\tSYS_NFSSERVCTL                   = 168\n+\tSYS_SETRESGID                    = 169\n+\tSYS_GETRESGID                    = 170\n+\tSYS_PRCTL                        = 171\n+\tSYS_RT_SIGRETURN                 = 172\n+\tSYS_RT_SIGACTION                 = 173\n+\tSYS_RT_SIGPROCMASK               = 174\n+\tSYS_RT_SIGPENDING                = 175\n+\tSYS_RT_SIGTIMEDWAIT              = 176\n+\tSYS_RT_SIGQUEUEINFO              = 177\n+\tSYS_RT_SIGSUSPEND                = 178\n+\tSYS_PREAD64                      = 179\n+\tSYS_PWRITE64                     = 180\n+\tSYS_CHOWN                        = 181\n+\tSYS_GETCWD                       = 182\n+\tSYS_CAPGET                       = 183\n+\tSYS_CAPSET                       = 184\n+\tSYS_SIGALTSTACK                  = 185\n+\tSYS_SENDFILE                     = 186\n+\tSYS_GETPMSG                      = 187\n+\tSYS_PUTPMSG                      = 188\n+\tSYS_VFORK                        = 189\n+\tSYS_UGETRLIMIT                   = 190\n+\tSYS_READAHEAD                    = 191\n+\tSYS_MMAP2                        = 192\n+\tSYS_TRUNCATE64                   = 193\n+\tSYS_FTRUNCATE64                  = 194\n+\tSYS_STAT64                       = 195\n+\tSYS_LSTAT64                      = 196\n+\tSYS_FSTAT64                      = 197\n+\tSYS_PCICONFIG_READ               = 198\n+\tSYS_PCICONFIG_WRITE              = 199\n+\tSYS_PCICONFIG_IOBASE             = 200\n+\tSYS_MULTIPLEXER                  = 201\n+\tSYS_GETDENTS64                   = 202\n+\tSYS_PIVOT_ROOT                   = 203\n+\tSYS_FCNTL64                      = 204\n+\tSYS_MADVISE                      = 205\n+\tSYS_MINCORE                      = 206\n+\tSYS_GETTID                       = 207\n+\tSYS_TKILL                        = 208\n+\tSYS_SETXATTR                     = 209\n+\tSYS_LSETXATTR                    = 210\n+\tSYS_FSETXATTR                    = 211\n+\tSYS_GETXATTR                     = 212\n+\tSYS_LGETXATTR                    = 213\n+\tSYS_FGETXATTR                    = 214\n+\tSYS_LISTXATTR                    = 215\n+\tSYS_LLISTXATTR                   = 216\n+\tSYS_FLISTXATTR                   = 217\n+\tSYS_REMOVEXATTR                  = 218\n+\tSYS_LREMOVEXATTR                 = 219\n+\tSYS_FREMOVEXATTR                 = 220\n+\tSYS_FUTEX                        = 221\n+\tSYS_SCHED_SETAFFINITY            = 222\n+\tSYS_SCHED_GETAFFINITY            = 223\n+\tSYS_TUXCALL                      = 225\n+\tSYS_SENDFILE64                   = 226\n+\tSYS_IO_SETUP                     = 227\n+\tSYS_IO_DESTROY                   = 228\n+\tSYS_IO_GETEVENTS                 = 229\n+\tSYS_IO_SUBMIT                    = 230\n+\tSYS_IO_CANCEL                    = 231\n+\tSYS_SET_TID_ADDRESS              = 232\n+\tSYS_FADVISE64                    = 233\n+\tSYS_EXIT_GROUP                   = 234\n+\tSYS_LOOKUP_DCOOKIE               = 235\n+\tSYS_EPOLL_CREATE                 = 236\n+\tSYS_EPOLL_CTL                    = 237\n+\tSYS_EPOLL_WAIT                   = 238\n+\tSYS_REMAP_FILE_PAGES             = 239\n+\tSYS_TIMER_CREATE                 = 240\n+\tSYS_TIMER_SETTIME                = 241\n+\tSYS_TIMER_GETTIME                = 242\n+\tSYS_TIMER_GETOVERRUN             = 243\n+\tSYS_TIMER_DELETE                 = 244\n+\tSYS_CLOCK_SETTIME                = 245\n+\tSYS_CLOCK_GETTIME                = 246\n+\tSYS_CLOCK_GETRES                 = 247\n+\tSYS_CLOCK_NANOSLEEP              = 248\n+\tSYS_SWAPCONTEXT                  = 249\n+\tSYS_TGKILL                       = 250\n+\tSYS_UTIMES                       = 251\n+\tSYS_STATFS64                     = 252\n+\tSYS_FSTATFS64                    = 253\n+\tSYS_FADVISE64_64                 = 254\n+\tSYS_RTAS                         = 255\n+\tSYS_SYS_DEBUG_SETCONTEXT         = 256\n+\tSYS_MIGRATE_PAGES                = 258\n+\tSYS_MBIND                        = 259\n+\tSYS_GET_MEMPOLICY                = 260\n+\tSYS_SET_MEMPOLICY                = 261\n+\tSYS_MQ_OPEN                      = 262\n+\tSYS_MQ_UNLINK                    = 263\n+\tSYS_MQ_TIMEDSEND                 = 264\n+\tSYS_MQ_TIMEDRECEIVE              = 265\n+\tSYS_MQ_NOTIFY                    = 266\n+\tSYS_MQ_GETSETATTR                = 267\n+\tSYS_KEXEC_LOAD                   = 268\n+\tSYS_ADD_KEY                      = 269\n+\tSYS_REQUEST_KEY                  = 270\n+\tSYS_KEYCTL                       = 271\n+\tSYS_WAITID                       = 272\n+\tSYS_IOPRIO_SET                   = 273\n+\tSYS_IOPRIO_GET                   = 274\n+\tSYS_INOTIFY_INIT                 = 275\n+\tSYS_INOTIFY_ADD_WATCH            = 276\n+\tSYS_INOTIFY_RM_WATCH             = 277\n+\tSYS_SPU_RUN                      = 278\n+\tSYS_SPU_CREATE                   = 279\n+\tSYS_PSELECT6                     = 280\n+\tSYS_PPOLL                        = 281\n+\tSYS_UNSHARE                      = 282\n+\tSYS_SPLICE                       = 283\n+\tSYS_TEE                          = 284\n+\tSYS_VMSPLICE                     = 285\n+\tSYS_OPENAT                       = 286\n+\tSYS_MKDIRAT                      = 287\n+\tSYS_MKNODAT                      = 288\n+\tSYS_FCHOWNAT                     = 289\n+\tSYS_FUTIMESAT                    = 290\n+\tSYS_FSTATAT64                    = 291\n+\tSYS_UNLINKAT                     = 292\n+\tSYS_RENAMEAT                     = 293\n+\tSYS_LINKAT                       = 294\n+\tSYS_SYMLINKAT                    = 295\n+\tSYS_READLINKAT                   = 296\n+\tSYS_FCHMODAT                     = 297\n+\tSYS_FACCESSAT                    = 298\n+\tSYS_GET_ROBUST_LIST              = 299\n+\tSYS_SET_ROBUST_LIST              = 300\n+\tSYS_MOVE_PAGES                   = 301\n+\tSYS_GETCPU                       = 302\n+\tSYS_EPOLL_PWAIT                  = 303\n+\tSYS_UTIMENSAT                    = 304\n+\tSYS_SIGNALFD                     = 305\n+\tSYS_TIMERFD_CREATE               = 306\n+\tSYS_EVENTFD                      = 307\n+\tSYS_SYNC_FILE_RANGE2             = 308\n+\tSYS_FALLOCATE                    = 309\n+\tSYS_SUBPAGE_PROT                 = 310\n+\tSYS_TIMERFD_SETTIME              = 311\n+\tSYS_TIMERFD_GETTIME              = 312\n+\tSYS_SIGNALFD4                    = 313\n+\tSYS_EVENTFD2                     = 314\n+\tSYS_EPOLL_CREATE1                = 315\n+\tSYS_DUP3                         = 316\n+\tSYS_PIPE2                        = 317\n+\tSYS_INOTIFY_INIT1                = 318\n+\tSYS_PERF_EVENT_OPEN              = 319\n+\tSYS_PREADV                       = 320\n+\tSYS_PWRITEV                      = 321\n+\tSYS_RT_TGSIGQUEUEINFO            = 322\n+\tSYS_FANOTIFY_INIT                = 323\n+\tSYS_FANOTIFY_MARK                = 324\n+\tSYS_PRLIMIT64                    = 325\n+\tSYS_SOCKET                       = 326\n+\tSYS_BIND                         = 327\n+\tSYS_CONNECT                      = 328\n+\tSYS_LISTEN                       = 329\n+\tSYS_ACCEPT                       = 330\n+\tSYS_GETSOCKNAME                  = 331\n+\tSYS_GETPEERNAME                  = 332\n+\tSYS_SOCKETPAIR                   = 333\n+\tSYS_SEND                         = 334\n+\tSYS_SENDTO                       = 335\n+\tSYS_RECV                         = 336\n+\tSYS_RECVFROM                     = 337\n+\tSYS_SHUTDOWN                     = 338\n+\tSYS_SETSOCKOPT                   = 339\n+\tSYS_GETSOCKOPT                   = 340\n+\tSYS_SENDMSG                      = 341\n+\tSYS_RECVMSG                      = 342\n+\tSYS_RECVMMSG                     = 343\n+\tSYS_ACCEPT4                      = 344\n+\tSYS_NAME_TO_HANDLE_AT            = 345\n+\tSYS_OPEN_BY_HANDLE_AT            = 346\n+\tSYS_CLOCK_ADJTIME                = 347\n+\tSYS_SYNCFS                       = 348\n+\tSYS_SENDMMSG                     = 349\n+\tSYS_SETNS                        = 350\n+\tSYS_PROCESS_VM_READV             = 351\n+\tSYS_PROCESS_VM_WRITEV            = 352\n+\tSYS_FINIT_MODULE                 = 353\n+\tSYS_KCMP                         = 354\n+\tSYS_SCHED_SETATTR                = 355\n+\tSYS_SCHED_GETATTR                = 356\n+\tSYS_RENAMEAT2                    = 357\n+\tSYS_SECCOMP                      = 358\n+\tSYS_GETRANDOM                    = 359\n+\tSYS_MEMFD_CREATE                 = 360\n+\tSYS_BPF                          = 361\n+\tSYS_EXECVEAT                     = 362\n+\tSYS_SWITCH_ENDIAN                = 363\n+\tSYS_USERFAULTFD                  = 364\n+\tSYS_MEMBARRIER                   = 365\n+\tSYS_MLOCK2                       = 378\n+\tSYS_COPY_FILE_RANGE              = 379\n+\tSYS_PREADV2                      = 380\n+\tSYS_PWRITEV2                     = 381\n+\tSYS_KEXEC_FILE_LOAD              = 382\n+\tSYS_STATX                        = 383\n+\tSYS_PKEY_ALLOC                   = 384\n+\tSYS_PKEY_FREE                    = 385\n+\tSYS_PKEY_MPROTECT                = 386\n+\tSYS_RSEQ                         = 387\n+\tSYS_IO_PGETEVENTS                = 388\n+\tSYS_SEMGET                       = 393\n+\tSYS_SEMCTL                       = 394\n+\tSYS_SHMGET                       = 395\n+\tSYS_SHMCTL                       = 396\n+\tSYS_SHMAT                        = 397\n+\tSYS_SHMDT                        = 398\n+\tSYS_MSGGET                       = 399\n+\tSYS_MSGSND                       = 400\n+\tSYS_MSGRCV                       = 401\n+\tSYS_MSGCTL                       = 402\n+\tSYS_CLOCK_GETTIME64              = 403\n+\tSYS_CLOCK_SETTIME64              = 404\n+\tSYS_CLOCK_ADJTIME64              = 405\n+\tSYS_CLOCK_GETRES_TIME64          = 406\n+\tSYS_CLOCK_NANOSLEEP_TIME64       = 407\n+\tSYS_TIMER_GETTIME64              = 408\n+\tSYS_TIMER_SETTIME64              = 409\n+\tSYS_TIMERFD_GETTIME64            = 410\n+\tSYS_TIMERFD_SETTIME64            = 411\n+\tSYS_UTIMENSAT_TIME64             = 412\n+\tSYS_PSELECT6_TIME64              = 413\n+\tSYS_PPOLL_TIME64                 = 414\n+\tSYS_IO_PGETEVENTS_TIME64         = 416\n+\tSYS_RECVMMSG_TIME64              = 417\n+\tSYS_MQ_TIMEDSEND_TIME64          = 418\n+\tSYS_MQ_TIMEDRECEIVE_TIME64       = 419\n+\tSYS_SEMTIMEDOP_TIME64            = 420\n+\tSYS_RT_SIGTIMEDWAIT_TIME64       = 421\n+\tSYS_FUTEX_TIME64                 = 422\n+\tSYS_SCHED_RR_GET_INTERVAL_TIME64 = 423\n+\tSYS_PIDFD_SEND_SIGNAL            = 424\n+\tSYS_IO_URING_SETUP               = 425\n+\tSYS_IO_URING_ENTER               = 426\n+\tSYS_IO_URING_REGISTER            = 427\n+\tSYS_OPEN_TREE                    = 428\n+\tSYS_MOVE_MOUNT                   = 429\n+\tSYS_FSOPEN                       = 430\n+\tSYS_FSCONFIG                     = 431\n+\tSYS_FSMOUNT                      = 432\n+\tSYS_FSPICK                       = 433\n+\tSYS_PIDFD_OPEN                   = 434\n+\tSYS_CLONE3                       = 435\n+\tSYS_CLOSE_RANGE                  = 436\n+\tSYS_OPENAT2                      = 437\n+\tSYS_PIDFD_GETFD                  = 438\n+\tSYS_FACCESSAT2                   = 439\n+\tSYS_PROCESS_MADVISE              = 440\n+\tSYS_EPOLL_PWAIT2                 = 441\n+)"
    },
    {
      "sha": "883b64a272363d57570b3412aad4f713da6f5365",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_darwin_386.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_386.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_386.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_386.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -221,6 +221,12 @@ type IPMreq struct {\n \tInterface [4]byte /* in_addr */\n }\n \n+type IPMreqn struct {\n+\tMultiaddr [4]byte /* in_addr */\n+\tAddress   [4]byte /* in_addr */\n+\tIfindex   int32\n+}\n+\n type IPv6Mreq struct {\n \tMultiaddr [16]byte /* in6_addr */\n \tInterface uint32\n@@ -272,6 +278,7 @@ const (\n \tSizeofLinger           = 0x8\n \tSizeofIovec            = 0x8\n \tSizeofIPMreq           = 0x8\n+\tSizeofIPMreqn          = 0xc\n \tSizeofIPv6Mreq         = 0x14\n \tSizeofMsghdr           = 0x1c\n \tSizeofCmsghdr          = 0xc"
    },
    {
      "sha": "2673e6c5909c338d0ece15d00768482257afd2d4",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_darwin_amd64.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_amd64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_amd64.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -233,6 +233,12 @@ type IPMreq struct {\n \tInterface [4]byte /* in_addr */\n }\n \n+type IPMreqn struct {\n+\tMultiaddr [4]byte /* in_addr */\n+\tAddress   [4]byte /* in_addr */\n+\tIfindex   int32\n+}\n+\n type IPv6Mreq struct {\n \tMultiaddr [16]byte /* in6_addr */\n \tInterface uint32\n@@ -285,6 +291,7 @@ const (\n \tSizeofLinger           = 0x8\n \tSizeofIovec            = 0x10\n \tSizeofIPMreq           = 0x8\n+\tSizeofIPMreqn          = 0xc\n \tSizeofIPv6Mreq         = 0x14\n \tSizeofMsghdr           = 0x30\n \tSizeofCmsghdr          = 0xc"
    },
    {
      "sha": "eef51338574488f3f86c4f078363feccb04d61e0",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_darwin_arm.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_arm.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_arm.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -221,6 +221,12 @@ type IPMreq struct {\n \tInterface [4]byte /* in_addr */\n }\n \n+type IPMreqn struct {\n+\tMultiaddr [4]byte /* in_addr */\n+\tAddress   [4]byte /* in_addr */\n+\tIfindex   int32\n+}\n+\n type IPv6Mreq struct {\n \tMultiaddr [16]byte /* in6_addr */\n \tInterface uint32\n@@ -272,6 +278,7 @@ const (\n \tSizeofLinger           = 0x8\n \tSizeofIovec            = 0x8\n \tSizeofIPMreq           = 0x8\n+\tSizeofIPMreqn          = 0xc\n \tSizeofIPv6Mreq         = 0x14\n \tSizeofMsghdr           = 0x1c\n \tSizeofCmsghdr          = 0xc"
    },
    {
      "sha": "1465cbcffe476d872135974ccd6f02be1d32cdcb",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_darwin_arm64.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_arm64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/sys/unix/ztypes_darwin_arm64.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -233,6 +233,12 @@ type IPMreq struct {\n \tInterface [4]byte /* in_addr */\n }\n \n+type IPMreqn struct {\n+\tMultiaddr [4]byte /* in_addr */\n+\tAddress   [4]byte /* in_addr */\n+\tIfindex   int32\n+}\n+\n type IPv6Mreq struct {\n \tMultiaddr [16]byte /* in6_addr */\n \tInterface uint32\n@@ -285,6 +291,7 @@ const (\n \tSizeofLinger           = 0x8\n \tSizeofIovec            = 0x10\n \tSizeofIPMreq           = 0x8\n+\tSizeofIPMreqn          = 0xc\n \tSizeofIPv6Mreq         = 0x14\n \tSizeofMsghdr           = 0x30\n \tSizeofCmsghdr          = 0xc"
    },
    {
      "sha": "af7a72017e9fb1c7614483c09c365fe57fadb12c",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc.go",
      "status": "added",
      "additions": 627,
      "deletions": 0,
      "changes": 627,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc.go?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -0,0 +1,627 @@\n+// cgo -godefs -- -Wall -Werror -static -I/tmp/include /build/linux/types.go | go run mkpost.go\n+// Code generated by the command above; see README.md. DO NOT EDIT.\n+\n+//go:build ppc && linux\n+// +build ppc,linux\n+\n+package unix\n+\n+const (\n+\tSizeofPtr  = 0x4\n+\tSizeofLong = 0x4\n+)\n+\n+type (\n+\t_C_long int32\n+)\n+\n+type Timespec struct {\n+\tSec  int32\n+\tNsec int32\n+}\n+\n+type Timeval struct {\n+\tSec  int32\n+\tUsec int32\n+}\n+\n+type Timex struct {\n+\tModes     uint32\n+\tOffset    int32\n+\tFreq      int32\n+\tMaxerror  int32\n+\tEsterror  int32\n+\tStatus    int32\n+\tConstant  int32\n+\tPrecision int32\n+\tTolerance int32\n+\tTime      Timeval\n+\tTick      int32\n+\tPpsfreq   int32\n+\tJitter    int32\n+\tShift     int32\n+\tStabil    int32\n+\tJitcnt    int32\n+\tCalcnt    int32\n+\tErrcnt    int32\n+\tStbcnt    int32\n+\tTai       int32\n+\t_         [44]byte\n+}\n+\n+type Time_t int32\n+\n+type Tms struct {\n+\tUtime  int32\n+\tStime  int32\n+\tCutime int32\n+\tCstime int32\n+}\n+\n+type Utimbuf struct {\n+\tActime  int32\n+\tModtime int32\n+}\n+\n+type Rusage struct {\n+\tUtime    Timeval\n+\tStime    Timeval\n+\tMaxrss   int32\n+\tIxrss    int32\n+\tIdrss    int32\n+\tIsrss    int32\n+\tMinflt   int32\n+\tMajflt   int32\n+\tNswap    int32\n+\tInblock  int32\n+\tOublock  int32\n+\tMsgsnd   int32\n+\tMsgrcv   int32\n+\tNsignals int32\n+\tNvcsw    int32\n+\tNivcsw   int32\n+}\n+\n+type Stat_t struct {\n+\tDev     uint64\n+\tIno     uint64\n+\tMode    uint32\n+\tNlink   uint32\n+\tUid     uint32\n+\tGid     uint32\n+\tRdev    uint64\n+\t_       uint16\n+\t_       [4]byte\n+\tSize    int64\n+\tBlksize int32\n+\t_       [4]byte\n+\tBlocks  int64\n+\tAtim    Timespec\n+\tMtim    Timespec\n+\tCtim    Timespec\n+\t_       uint32\n+\t_       uint32\n+}\n+\n+type Dirent struct {\n+\tIno    uint64\n+\tOff    int64\n+\tReclen uint16\n+\tType   uint8\n+\tName   [256]uint8\n+\t_      [5]byte\n+}\n+\n+type Flock_t struct {\n+\tType   int16\n+\tWhence int16\n+\t_      [4]byte\n+\tStart  int64\n+\tLen    int64\n+\tPid    int32\n+\t_      [4]byte\n+}\n+\n+type DmNameList struct {\n+\tDev  uint64\n+\tNext uint32\n+\tName [0]byte\n+\t_    [4]byte\n+}\n+\n+const (\n+\tFADV_DONTNEED = 0x4\n+\tFADV_NOREUSE  = 0x5\n+)\n+\n+type RawSockaddr struct {\n+\tFamily uint16\n+\tData   [14]uint8\n+}\n+\n+type RawSockaddrAny struct {\n+\tAddr RawSockaddr\n+\tPad  [96]uint8\n+}\n+\n+type Iovec struct {\n+\tBase *byte\n+\tLen  uint32\n+}\n+\n+type Msghdr struct {\n+\tName       *byte\n+\tNamelen    uint32\n+\tIov        *Iovec\n+\tIovlen     uint32\n+\tControl    *byte\n+\tControllen uint32\n+\tFlags      int32\n+}\n+\n+type Cmsghdr struct {\n+\tLen   uint32\n+\tLevel int32\n+\tType  int32\n+}\n+\n+const (\n+\tSizeofIovec   = 0x8\n+\tSizeofMsghdr  = 0x1c\n+\tSizeofCmsghdr = 0xc\n+)\n+\n+const (\n+\tSizeofSockFprog = 0x8\n+)\n+\n+type PtraceRegs struct {\n+\tGpr       [32]uint32\n+\tNip       uint32\n+\tMsr       uint32\n+\tOrig_gpr3 uint32\n+\tCtr       uint32\n+\tLink      uint32\n+\tXer       uint32\n+\tCcr       uint32\n+\tMq        uint32\n+\tTrap      uint32\n+\tDar       uint32\n+\tDsisr     uint32\n+\tResult    uint32\n+}\n+\n+type FdSet struct {\n+\tBits [32]int32\n+}\n+\n+type Sysinfo_t struct {\n+\tUptime    int32\n+\tLoads     [3]uint32\n+\tTotalram  uint32\n+\tFreeram   uint32\n+\tSharedram uint32\n+\tBufferram uint32\n+\tTotalswap uint32\n+\tFreeswap  uint32\n+\tProcs     uint16\n+\tPad       uint16\n+\tTotalhigh uint32\n+\tFreehigh  uint32\n+\tUnit      uint32\n+\t_         [8]uint8\n+}\n+\n+type Ustat_t struct {\n+\tTfree  int32\n+\tTinode uint32\n+\tFname  [6]uint8\n+\tFpack  [6]uint8\n+}\n+\n+type EpollEvent struct {\n+\tEvents uint32\n+\t_      int32\n+\tFd     int32\n+\tPad    int32\n+}\n+\n+const (\n+\tPOLLRDHUP = 0x2000\n+)\n+\n+type Sigset_t struct {\n+\tVal [32]uint32\n+}\n+\n+const _C__NSIG = 0x41\n+\n+type Termios struct {\n+\tIflag  uint32\n+\tOflag  uint32\n+\tCflag  uint32\n+\tLflag  uint32\n+\tCc     [19]uint8\n+\tLine   uint8\n+\tIspeed uint32\n+\tOspeed uint32\n+}\n+\n+type Taskstats struct {\n+\tVersion                   uint16\n+\tAc_exitcode               uint32\n+\tAc_flag                   uint8\n+\tAc_nice                   uint8\n+\t_                         [4]byte\n+\tCpu_count                 uint64\n+\tCpu_delay_total           uint64\n+\tBlkio_count               uint64\n+\tBlkio_delay_total         uint64\n+\tSwapin_count              uint64\n+\tSwapin_delay_total        uint64\n+\tCpu_run_real_total        uint64\n+\tCpu_run_virtual_total     uint64\n+\tAc_comm                   [32]uint8\n+\tAc_sched                  uint8\n+\tAc_pad                    [3]uint8\n+\t_                         [4]byte\n+\tAc_uid                    uint32\n+\tAc_gid                    uint32\n+\tAc_pid                    uint32\n+\tAc_ppid                   uint32\n+\tAc_btime                  uint32\n+\t_                         [4]byte\n+\tAc_etime                  uint64\n+\tAc_utime                  uint64\n+\tAc_stime                  uint64\n+\tAc_minflt                 uint64\n+\tAc_majflt                 uint64\n+\tCoremem                   uint64\n+\tVirtmem                   uint64\n+\tHiwater_rss               uint64\n+\tHiwater_vm                uint64\n+\tRead_char                 uint64\n+\tWrite_char                uint64\n+\tRead_syscalls             uint64\n+\tWrite_syscalls            uint64\n+\tRead_bytes                uint64\n+\tWrite_bytes               uint64\n+\tCancelled_write_bytes     uint64\n+\tNvcsw                     uint64\n+\tNivcsw                    uint64\n+\tAc_utimescaled            uint64\n+\tAc_stimescaled            uint64\n+\tCpu_scaled_run_real_total uint64\n+\tFreepages_count           uint64\n+\tFreepages_delay_total     uint64\n+\tThrashing_count           uint64\n+\tThrashing_delay_total     uint64\n+\tAc_btime64                uint64\n+}\n+\n+type cpuMask uint32\n+\n+const (\n+\t_NCPUBITS = 0x20\n+)\n+\n+const (\n+\tCBitFieldMaskBit0  = 0x8000000000000000\n+\tCBitFieldMaskBit1  = 0x4000000000000000\n+\tCBitFieldMaskBit2  = 0x2000000000000000\n+\tCBitFieldMaskBit3  = 0x1000000000000000\n+\tCBitFieldMaskBit4  = 0x800000000000000\n+\tCBitFieldMaskBit5  = 0x400000000000000\n+\tCBitFieldMaskBit6  = 0x200000000000000\n+\tCBitFieldMaskBit7  = 0x100000000000000\n+\tCBitFieldMaskBit8  = 0x80000000000000\n+\tCBitFieldMaskBit9  = 0x40000000000000\n+\tCBitFieldMaskBit10 = 0x20000000000000\n+\tCBitFieldMaskBit11 = 0x10000000000000\n+\tCBitFieldMaskBit12 = 0x8000000000000\n+\tCBitFieldMaskBit13 = 0x4000000000000\n+\tCBitFieldMaskBit14 = 0x2000000000000\n+\tCBitFieldMaskBit15 = 0x1000000000000\n+\tCBitFieldMaskBit16 = 0x800000000000\n+\tCBitFieldMaskBit17 = 0x400000000000\n+\tCBitFieldMaskBit18 = 0x200000000000\n+\tCBitFieldMaskBit19 = 0x100000000000\n+\tCBitFieldMaskBit20 = 0x80000000000\n+\tCBitFieldMaskBit21 = 0x40000000000\n+\tCBitFieldMaskBit22 = 0x20000000000\n+\tCBitFieldMaskBit23 = 0x10000000000\n+\tCBitFieldMaskBit24 = 0x8000000000\n+\tCBitFieldMaskBit25 = 0x4000000000\n+\tCBitFieldMaskBit26 = 0x2000000000\n+\tCBitFieldMaskBit27 = 0x1000000000\n+\tCBitFieldMaskBit28 = 0x800000000\n+\tCBitFieldMaskBit29 = 0x400000000\n+\tCBitFieldMaskBit30 = 0x200000000\n+\tCBitFieldMaskBit31 = 0x100000000\n+\tCBitFieldMaskBit32 = 0x80000000\n+\tCBitFieldMaskBit33 = 0x40000000\n+\tCBitFieldMaskBit34 = 0x20000000\n+\tCBitFieldMaskBit35 = 0x10000000\n+\tCBitFieldMaskBit36 = 0x8000000\n+\tCBitFieldMaskBit37 = 0x4000000\n+\tCBitFieldMaskBit38 = 0x2000000\n+\tCBitFieldMaskBit39 = 0x1000000\n+\tCBitFieldMaskBit40 = 0x800000\n+\tCBitFieldMaskBit41 = 0x400000\n+\tCBitFieldMaskBit42 = 0x200000\n+\tCBitFieldMaskBit43 = 0x100000\n+\tCBitFieldMaskBit44 = 0x80000\n+\tCBitFieldMaskBit45 = 0x40000\n+\tCBitFieldMaskBit46 = 0x20000\n+\tCBitFieldMaskBit47 = 0x10000\n+\tCBitFieldMaskBit48 = 0x8000\n+\tCBitFieldMaskBit49 = 0x4000\n+\tCBitFieldMaskBit50 = 0x2000\n+\tCBitFieldMaskBit51 = 0x1000\n+\tCBitFieldMaskBit52 = 0x800\n+\tCBitFieldMaskBit53 = 0x400\n+\tCBitFieldMaskBit54 = 0x200\n+\tCBitFieldMaskBit55 = 0x100\n+\tCBitFieldMaskBit56 = 0x80\n+\tCBitFieldMaskBit57 = 0x40\n+\tCBitFieldMaskBit58 = 0x20\n+\tCBitFieldMaskBit59 = 0x10\n+\tCBitFieldMaskBit60 = 0x8\n+\tCBitFieldMaskBit61 = 0x4\n+\tCBitFieldMaskBit62 = 0x2\n+\tCBitFieldMaskBit63 = 0x1\n+)\n+\n+type SockaddrStorage struct {\n+\tFamily uint16\n+\t_      [122]uint8\n+\t_      uint32\n+}\n+\n+type HDGeometry struct {\n+\tHeads     uint8\n+\tSectors   uint8\n+\tCylinders uint16\n+\tStart     uint32\n+}\n+\n+type Statfs_t struct {\n+\tType    int32\n+\tBsize   int32\n+\tBlocks  uint64\n+\tBfree   uint64\n+\tBavail  uint64\n+\tFiles   uint64\n+\tFfree   uint64\n+\tFsid    Fsid\n+\tNamelen int32\n+\tFrsize  int32\n+\tFlags   int32\n+\tSpare   [4]int32\n+\t_       [4]byte\n+}\n+\n+type TpacketHdr struct {\n+\tStatus  uint32\n+\tLen     uint32\n+\tSnaplen uint32\n+\tMac     uint16\n+\tNet     uint16\n+\tSec     uint32\n+\tUsec    uint32\n+}\n+\n+const (\n+\tSizeofTpacketHdr = 0x18\n+)\n+\n+type RTCPLLInfo struct {\n+\tCtrl    int32\n+\tValue   int32\n+\tMax     int32\n+\tMin     int32\n+\tPosmult int32\n+\tNegmult int32\n+\tClock   int32\n+}\n+\n+type BlkpgPartition struct {\n+\tStart   int64\n+\tLength  int64\n+\tPno     int32\n+\tDevname [64]uint8\n+\tVolname [64]uint8\n+\t_       [4]byte\n+}\n+\n+const (\n+\tBLKPG = 0x20001269\n+)\n+\n+type XDPUmemReg struct {\n+\tAddr     uint64\n+\tLen      uint64\n+\tSize     uint32\n+\tHeadroom uint32\n+\tFlags    uint32\n+\t_        [4]byte\n+}\n+\n+type CryptoUserAlg struct {\n+\tName        [64]uint8\n+\tDriver_name [64]uint8\n+\tModule_name [64]uint8\n+\tType        uint32\n+\tMask        uint32\n+\tRefcnt      uint32\n+\tFlags       uint32\n+}\n+\n+type CryptoStatAEAD struct {\n+\tType         [64]uint8\n+\tEncrypt_cnt  uint64\n+\tEncrypt_tlen uint64\n+\tDecrypt_cnt  uint64\n+\tDecrypt_tlen uint64\n+\tErr_cnt      uint64\n+}\n+\n+type CryptoStatAKCipher struct {\n+\tType         [64]uint8\n+\tEncrypt_cnt  uint64\n+\tEncrypt_tlen uint64\n+\tDecrypt_cnt  uint64\n+\tDecrypt_tlen uint64\n+\tVerify_cnt   uint64\n+\tSign_cnt     uint64\n+\tErr_cnt      uint64\n+}\n+\n+type CryptoStatCipher struct {\n+\tType         [64]uint8\n+\tEncrypt_cnt  uint64\n+\tEncrypt_tlen uint64\n+\tDecrypt_cnt  uint64\n+\tDecrypt_tlen uint64\n+\tErr_cnt      uint64\n+}\n+\n+type CryptoStatCompress struct {\n+\tType            [64]uint8\n+\tCompress_cnt    uint64\n+\tCompress_tlen   uint64\n+\tDecompress_cnt  uint64\n+\tDecompress_tlen uint64\n+\tErr_cnt         uint64\n+}\n+\n+type CryptoStatHash struct {\n+\tType      [64]uint8\n+\tHash_cnt  uint64\n+\tHash_tlen uint64\n+\tErr_cnt   uint64\n+}\n+\n+type CryptoStatKPP struct {\n+\tType                      [64]uint8\n+\tSetsecret_cnt             uint64\n+\tGenerate_public_key_cnt   uint64\n+\tCompute_shared_secret_cnt uint64\n+\tErr_cnt                   uint64\n+}\n+\n+type CryptoStatRNG struct {\n+\tType          [64]uint8\n+\tGenerate_cnt  uint64\n+\tGenerate_tlen uint64\n+\tSeed_cnt      uint64\n+\tErr_cnt       uint64\n+}\n+\n+type CryptoStatLarval struct {\n+\tType [64]uint8\n+}\n+\n+type CryptoReportLarval struct {\n+\tType [64]uint8\n+}\n+\n+type CryptoReportHash struct {\n+\tType       [64]uint8\n+\tBlocksize  uint32\n+\tDigestsize uint32\n+}\n+\n+type CryptoReportCipher struct {\n+\tType        [64]uint8\n+\tBlocksize   uint32\n+\tMin_keysize uint32\n+\tMax_keysize uint32\n+}\n+\n+type CryptoReportBlkCipher struct {\n+\tType        [64]uint8\n+\tGeniv       [64]uint8\n+\tBlocksize   uint32\n+\tMin_keysize uint32\n+\tMax_keysize uint32\n+\tIvsize      uint32\n+}\n+\n+type CryptoReportAEAD struct {\n+\tType        [64]uint8\n+\tGeniv       [64]uint8\n+\tBlocksize   uint32\n+\tMaxauthsize uint32\n+\tIvsize      uint32\n+}\n+\n+type CryptoReportComp struct {\n+\tType [64]uint8\n+}\n+\n+type CryptoReportRNG struct {\n+\tType     [64]uint8\n+\tSeedsize uint32\n+}\n+\n+type CryptoReportAKCipher struct {\n+\tType [64]uint8\n+}\n+\n+type CryptoReportKPP struct {\n+\tType [64]uint8\n+}\n+\n+type CryptoReportAcomp struct {\n+\tType [64]uint8\n+}\n+\n+type LoopInfo struct {\n+\tNumber           int32\n+\tDevice           uint32\n+\tInode            uint32\n+\tRdevice          uint32\n+\tOffset           int32\n+\tEncrypt_type     int32\n+\tEncrypt_key_size int32\n+\tFlags            int32\n+\tName             [64]uint8\n+\tEncrypt_key      [32]uint8\n+\tInit             [2]uint32\n+\tReserved         [4]uint8\n+}\n+\n+type TIPCSubscr struct {\n+\tSeq     TIPCServiceRange\n+\tTimeout uint32\n+\tFilter  uint32\n+\tHandle  [8]uint8\n+}\n+\n+type TIPCSIOCLNReq struct {\n+\tPeer     uint32\n+\tId       uint32\n+\tLinkname [68]uint8\n+}\n+\n+type TIPCSIOCNodeIDReq struct {\n+\tPeer uint32\n+\tId   [16]uint8\n+}\n+\n+type PPSKInfo struct {\n+\tAssert_sequence uint32\n+\tClear_sequence  uint32\n+\tAssert_tu       PPSKTime\n+\tClear_tu        PPSKTime\n+\tCurrent_mode    int32\n+\t_               [4]byte\n+}\n+\n+const (\n+\tPPS_GETPARAMS = 0x400470a1\n+\tPPS_SETPARAMS = 0x800470a2\n+\tPPS_GETCAP    = 0x400470a3\n+\tPPS_FETCH     = 0xc00470a4\n+)"
    },
    {
      "sha": "501dd6824750287777e2ba28b3507b546ba46425",
      "filename": "backend/vendor/modules.txt",
      "status": "modified",
      "additions": 13,
      "deletions": 10,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark42/blob/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/modules.txt",
      "raw_url": "https://github.com/umputun/remark42/raw/627ae58ecc149fe358ec1378ab7cd15dfc1d880e/backend/vendor/modules.txt",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/modules.txt?ref=627ae58ecc149fe358ec1378ab7cd15dfc1d880e",
      "patch": "@@ -84,10 +84,13 @@ github.com/didip/tollbooth_chi\n github.com/dlclark/regexp2\n github.com/dlclark/regexp2/syntax\n # github.com/go-chi/chi v4.1.1+incompatible\n-## explicit\n github.com/go-chi/chi\n github.com/go-chi/chi/middleware\n-# github.com/go-chi/cors v1.1.1\n+# github.com/go-chi/chi/v5 v5.0.2\n+## explicit\n+github.com/go-chi/chi/v5\n+github.com/go-chi/chi/v5/middleware\n+# github.com/go-chi/cors v1.2.0\n ## explicit\n github.com/go-chi/cors\n # github.com/go-chi/render v1.0.1\n@@ -119,7 +122,7 @@ github.com/go-pkgz/lgr\n ## explicit\n github.com/go-pkgz/repeater\n github.com/go-pkgz/repeater/strategy\n-# github.com/go-pkgz/rest v1.7.0\n+# github.com/go-pkgz/rest v1.9.2\n ## explicit\n github.com/go-pkgz/rest\n github.com/go-pkgz/rest/logger\n@@ -166,9 +169,9 @@ github.com/klauspost/compress/huff0\n github.com/klauspost/compress/snappy\n github.com/klauspost/compress/zstd\n github.com/klauspost/compress/zstd/internal/xxhash\n-# github.com/kyokomi/emoji v2.2.1+incompatible\n+# github.com/kyokomi/emoji/v2 v2.2.8\n ## explicit\n-github.com/kyokomi/emoji\n+github.com/kyokomi/emoji/v2\n # github.com/microcosm-cc/bluemonday v1.0.9\n ## explicit\n github.com/microcosm-cc/bluemonday\n@@ -198,7 +201,7 @@ github.com/slack-go/slack/internal/timex\n github.com/slack-go/slack/slackutilsx\n # github.com/stretchr/objx v0.1.1\n github.com/stretchr/objx\n-# github.com/stretchr/testify v1.6.1\n+# github.com/stretchr/testify v1.7.0\n ## explicit\n github.com/stretchr/testify/assert\n github.com/stretchr/testify/mock\n@@ -251,20 +254,20 @@ go.mongodb.org/mongo-driver/x/mongo/driver/wiremessage\n ## explicit\n go.uber.org/goleak\n go.uber.org/goleak/internal/stack\n-# golang.org/x/crypto v0.0.0-20200406173513-056763e48d71\n+# golang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b\n ## explicit\n golang.org/x/crypto/acme\n golang.org/x/crypto/acme/autocert\n golang.org/x/crypto/ocsp\n golang.org/x/crypto/pbkdf2\n-# golang.org/x/image v0.0.0-20200119044424-58c23975cae1\n+# golang.org/x/image v0.0.0-20210220032944-ac19c3e999fb\n ## explicit\n golang.org/x/image/draw\n golang.org/x/image/math/f64\n # golang.org/x/lint v0.0.0-20190930215403-16217165b5de\n golang.org/x/lint\n golang.org/x/lint/golint\n-# golang.org/x/net v0.0.0-20210421230115-4e50805a0758\n+# golang.org/x/net v0.0.0-20210423184538-5f58ad60dda6\n ## explicit\n golang.org/x/net/context\n golang.org/x/net/context/ctxhttp\n@@ -284,7 +287,7 @@ golang.org/x/oauth2/yandex\n # golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e\n golang.org/x/sync/errgroup\n golang.org/x/sync/semaphore\n-# golang.org/x/sys v0.0.0-20210420072515-93ed5bcd2bfe\n+# golang.org/x/sys v0.0.0-20210423082822-04245dca01da\n golang.org/x/sys/internal/unsafeheader\n golang.org/x/sys/unix\n # golang.org/x/text v0.3.6"
    }
  ]
}
