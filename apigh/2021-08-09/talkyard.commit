{
  "sha": "636270da549d2ecec1ef235d11635101742ae8ad",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6NjM2MjcwZGE1NDlkMmVjZWMxZWYyMzVkMTE2MzUxMDE3NDJhZThhZA==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2021-08-03T18:46:57Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2021-08-03T18:46:57Z"
    },
    "message": "Merge v0.2021.22 into 'release'.",
    "tree": {
      "sha": "6de0ba8b16ec4e9257866cce315da93227c61277",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/6de0ba8b16ec4e9257866cce315da93227c61277"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/636270da549d2ecec1ef235d11635101742ae8ad",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/636270da549d2ecec1ef235d11635101742ae8ad",
  "html_url": "https://github.com/debiki/talkyard/commit/636270da549d2ecec1ef235d11635101742ae8ad",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/636270da549d2ecec1ef235d11635101742ae8ad/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "15177b939c6bf33cf7456c7cb24ea4a41fdb5d65",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/15177b939c6bf33cf7456c7cb24ea4a41fdb5d65",
      "html_url": "https://github.com/debiki/talkyard/commit/15177b939c6bf33cf7456c7cb24ea4a41fdb5d65"
    },
    {
      "sha": "3daad07e2f005d5dd7d739d26c72155f2a4453cf",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/3daad07e2f005d5dd7d739d26c72155f2a4453cf",
      "html_url": "https://github.com/debiki/talkyard/commit/3daad07e2f005d5dd7d739d26c72155f2a4453cf"
    }
  ],
  "stats": {
    "total": 35667,
    "additions": 30734,
    "deletions": 4933
  },
  "files": [
    {
      "sha": "7c34e8d2a515aadacc29d94ffb34ebaa5bbe7b9d",
      "filename": "app/controllers/EmbeddedTopicsController.scala",
      "status": "modified",
      "additions": 11,
      "deletions": 38,
      "changes": 49,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/controllers/EmbeddedTopicsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/controllers/EmbeddedTopicsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/EmbeddedTopicsController.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -49,7 +49,7 @@ class EmbeddedTopicsController @Inject()(cc: ControllerComponents, edContext: Ed\n \n \n   def showTopic(embeddingUrl: String, discussionId: Option[AltPageId],   // [5BRW02]\n-          edPageId: Option[PageId], category: Option[Ref]): Action[Unit] =\n+          edPageId: Option[PageId], category: Option[Ref], scriptV: Opt[St]): Action[U] =\n       AsyncGetActionMaybeSkipCookies(avoidCookies = true) { request =>\n \n     import request.dao\n@@ -112,7 +112,7 @@ class EmbeddedTopicsController @Inject()(cc: ControllerComponents, edContext: Ed\n \n       case Some(realId) =>\n         // (For now, ignore `category` here. Or, some time later, would an admin setting\n-        // to move move the page to that category make sense?  [auto_upd_emb_cat])\n+        // to move move the page to that category make sense?\n \n         val pageMeta = dao.getThePageMeta(realId)\n         if (pageMeta.pageType != PageType.EmbeddedComments)\n@@ -172,49 +172,22 @@ class EmbeddedTopicsController @Inject()(cc: ControllerComponents, edContext: Ed\n   }\n \n \n-  def showEmbeddedEditor(embeddingUrl: String, discussionId: Option[AltPageId],\n-          edPageId: Option[PageId], category: Option[Ref]): Action[Unit] =\n+  def showEmbeddedEditor(embeddingUrl: St, embeddingScriptV: Opt[i32]): Action[U] =\n         AsyncGetActionMaybeSkipCookies(avoidCookies = true) { request =>\n-    import request.{dao, requester}\n \n-    val anyRealPageId = getAnyRealPageId(\n-          edPageId, discussionId, embeddingUrl, categoryRef = category, request.dao)\n-\n-    val lazyCreatePageInCatId =\n-          if (anyRealPageId.isDefined) {\n-            // The page already exists and was placed in some category already.\n-            // For now, don't move it to `category`. (Maybe could be an admin\n-            // setting to do that.  [auto_upd_emb_cat])\n-            None\n-          }\n-          else {\n-            category.map(dao.getOrThrowAnyCategoryByRef)\n-          }\n-\n-    val tpi = new EditPageTpi(request, PageType.EmbeddedComments,\n-          anyEmbeddedPageId = anyRealPageId, anyDiscussionId = discussionId,\n-          anyEmbeddingUrl = Some(embeddingUrl),\n-          lazyCreatePageInCatId = lazyCreatePageInCatId.map(_.id))\n-\n-    val htmlStr = views.html.embeddedEditor(tpi).body\n-\n-    for {\n-      pageId <- anyRealPageId\n-      pageMeta <- dao.getPageMeta(pageId)\n-    } {\n-      TESTS_MISSING // test may-not-see  TyT035KRGMTW2\n-      val (maySee, debugCode) = dao.maySeePageUseCache(pageMeta, requester)\n-      if (!maySee)\n-        security.throwIndistinguishableNotFound(debugCode)\n-    }\n+    val tpi = new EditPageTpi(request, anyEmbeddingUrl = Some(embeddingUrl))\n+    val htmlStr = views.html.embeddedEditor(tpi, embeddingScriptV = embeddingScriptV).body\n \n+    // (The callee needs to know the embedding origin, so the callee can know if\n+    // the request is to localhost — then we allow embedding (from localhost),\n+    // so techies can test on localhost.)\n     ViewPageController.addVolatileJsonAndPreventClickjacking2(htmlStr,\n         unapprovedPostAuthorIds = Set.empty, request, embeddingUrl = Some(embeddingUrl))\n   }\n \n \n-  private def getAnyRealPageId(edPageId: Option[PageId], discussionId: Option[String],\n-        embeddingUrl: String, categoryRef: Option[Ref], dao: SiteDao): Option[PageId] = {\n+  private def getAnyRealPageId(tyPageId: Opt[PageId], discussionId: Opt[DiscId],\n+        embeddingUrl: St, categoryRef: Opt[Ref], dao: SiteDao): Opt[PageId] = {\n \n     // Lookup the page by Talkyard page id, if specified, otherwise\n     // use the discussion id, or the embedding url, or, if no match,\n@@ -266,7 +239,7 @@ class EmbeddedTopicsController @Inject()(cc: ControllerComponents, edContext: Ed\n     // embeddingOrigin and data-category-ref makes sense then.\n     // ---------------------------------------------------------\n     //\n-    edPageId orElse {\n+    tyPageId orElse {\n       discussionId.trimNoneIfBlank match {\n         case Some(id) =>\n           // If this finds nothing, then, don't try matching by embeddingUrl. — If the"
    },
    {
      "sha": "7dfe76c8c0d4d09bbab6082e0167e213e8d827b8",
      "filename": "app/controllers/UserController.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 3,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/controllers/UserController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/controllers/UserController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/UserController.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -940,8 +940,18 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n   }\n \n \n-  def loadMyPageData(pageId: PageId): Action[Unit] = GetAction { request =>\n-    val json = loadMyPageDataImpl(request, pageId)\n+  def loadMyPageData(pageIds: St): Action[U] = GetAction { request =>\n+    QUICK; COULD_OPTIMIZE // don't use String.split('') — it sometimes creates a regex.\n+    // Review the whole code base. // Use Guava's Splitter instead.\n+    // https://guava.dev/releases/20.0/api/docs/com/google/common/base/Splitter.html\n+\n+    COULD_OPTIMIZE // fewer requests\n+    // Later, load data for many pages:  [many_ifr_my_page_data]\n+    val pageIdsSeq: ImmSeq[PageId] =\n+          if (pageIds.indexOf(',') == -1) ImmSeq(pageIds)\n+          else pageIds.split(',').to[ImmSeq]\n+   // For now:\n+    val json = loadMyPageDataImpl(request, pageIdsSeq.head)\n     OkSafeJson(json)\n   }\n \n@@ -1131,7 +1141,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n   }\n \n \n-  def toggleTips: Action[JsValue] = PostJsonAction(RateLimits.TrackReadingActivity,\n+  def toggleTips: Action[JsValue] = UserPostJsonAction(RateLimits.TrackReadingActivity,\n         maxBytes = 200) { request =>\n     import request.{dao, body, theRequester => requester}\n     val tipsId: Opt[St] = parseOptSt(body, \"tipsId\")"
    },
    {
      "sha": "fea02b30efe64ad6a86eb7fe7ce74f4b53630495",
      "filename": "app/controllers/ViewPageController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/controllers/ViewPageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/controllers/ViewPageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/ViewPageController.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -461,7 +461,7 @@ object ViewPageController {\n         // also be https\"\"\"\n         \" http://localhost:* https://localhost:*\"\n       }\n-      // Also update: [4GUYQC0]\n+      // Also update: [4GUYQC0]   [embng_url]\n       frameAncestorsSpace + allowEmbeddingFrom + allowIfLocalhost\n     }\n     }"
    },
    {
      "sha": "d79263c949a5f9fe694cb4cd07fe6135a4de5177",
      "filename": "app/controllers/VoteController.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 8,
      "changes": 21,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/controllers/VoteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/controllers/VoteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/VoteController.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -101,19 +101,24 @@ class VoteController @Inject()(cc: ControllerComponents, edContext: EdContext)\n           request)\n \n     if (delete) {\n-      dao.deleteVote(pageId, postNr, voteType, voterId = request.theUser.id)\n+      dao.deleteVoteIfAuZ(pageId, postNr, voteType, voterId = request.theUser.id)\n     }\n     else {\n-      dao.ifAuthAddVote(pageId, postNr, voteType,\n-        voterId = request.theUser.id, voterIp = request.ip, postNrsRead)\n+      dao.addVoteIfAuZ(pageId, postNr, voteType,\n+            voterId = request.theUser.id, voterIp = request.ip, postNrsRead)\n     }\n \n-    val postJson = dao.jsonMaker.postToJson2(postNr = postNr, pageId = pageId,\n-      includeUnapproved = false, showHidden = true)\n+    RACE // Fine, harmless.\n+    val updatedPost = dao.loadPost(pageId, postNr) getOrThrowForbidden(\n+          \"TyE7M3MRSED5\", \"The post just got hard deleted?\")\n \n-    val responseJson =\n-      EmbeddedCommentsPageCreator.makeAnyNewPageJson(newEmbPage) +\n-        (\"updatedPost\" -> postJson)\n+    val author = dao.getParticipantOrUnknown(updatedPost.createdById)\n+\n+    val storePatchJson = dao.jsonMaker.makeStorePatch(\n+          updatedPost, author, showHidden = true)\n+\n+    val responseJson = storePatchJson ++\n+          EmbeddedCommentsPageCreator.makeAnyNewPageJson(newEmbPage)\n \n     OkSafeJson(responseJson)\n   }"
    },
    {
      "sha": "c3a4444eb872d39165ff6d20ff3e3debc73da671",
      "filename": "app/debiki/MailerActor.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/debiki/MailerActor.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/debiki/MailerActor.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/MailerActor.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -387,7 +387,7 @@ class MailerActor(\n     val fromAddrMaybeEmailId =\n           if (fromAddress.contains(\"+EMAIL_ID@\"))\n             fromAddress.replaceAllLiterally(\n-                  \"+EMAIL_ID@\", s\"+$sitePubId.${emailToSend.id}@\")\n+                  \"+EMAIL_ID@\", s\"+$sitePubId-${emailToSend.id}@\")\n           else\n             fromAddress\n "
    },
    {
      "sha": "c918d6ff288ab9bdc59dc74c7506e657002e245c",
      "filename": "app/debiki/PageTpi.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/debiki/PageTpi.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/debiki/PageTpi.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/PageTpi.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -159,6 +159,7 @@ class SiteTpi protected (\n         isAdminApp: Bo = false,\n         isInEmbeddedEditor: Bo = false,\n         anyEmbeddedPageId: Opt[PageId] = None,\n+        embeddingScriptV: Opt[i32] = None,\n         resetPasswordPageData: Option[(User, EmailId)] = None,\n         ): xml.Unparsed = {\n \n@@ -192,10 +193,14 @@ class SiteTpi protected (\n           \"isRtl\" -> isRtlLanguage, // @{ if (tpi.isRtlLanguage) \"true\" else \"false\" },\n \n           \"embeddingOrigin\" -> JsStringOrNull(anyEmbeddingOrigin), //  @Html(embeddingOriginOrUndefined),\n+          \"embeddingScriptV\" -> JsNumberOrNull(embeddingScriptV),\n+          // These are changed dynamically in an editor iframe, [many_embcom_iframes].\n+          // to match the embedded comments iframe pat is replying / editing in.\n           \"embeddingUrl\" -> JsStringOrNull(anyEmbeddingUrl),  //  @Html(embeddingUrlOrUndefined),\n           \"embeddedPageId\" -> JsStringOrNull(anyEmbeddedPageId),\n           \"embeddedPageAltId\" -> JsStringOrNull(anyDiscussionId), // @Html(discussionIdOrUndefined),\n           \"lazyCreatePageInCatId\" -> JsNumberOrNull(lazyCreatePageInCatId), //@Html(lazyCreatePageInCatId),\n+          // ----------------------\n \n           \"assetUrlPrefix\" -> assetUrlPrefix,\n           \"uploadsUrlPrefixCommonmark\" -> uploadsUrlPrefix,\n@@ -359,13 +364,9 @@ class SiteTpi protected (\n   */\n class EditPageTpi(\n   request: GetRequest,\n-  val pageRole: PageType,\n-  val anyEmbeddedPageId: Option[PageId],\n-  override val anyDiscussionId: Option[AltPageId],\n   override val anyEmbeddingUrl: Option[String],\n-  override val lazyCreatePageInCatId: Option[CategoryId],\n ) extends SiteTpi(request) {\n-  override def anyCurrentPageRole = Some(pageRole)\n+  override def anyCurrentPageRole: Opt[PageType] = Some(PageType.EmbeddedComments)\n }\n \n "
    },
    {
      "sha": "7f6e9470b7eb7700c41567017eb84d40417316da",
      "filename": "app/debiki/dao/PostsDao.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/debiki/dao/PostsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/debiki/dao/PostsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/PostsDao.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -2187,7 +2187,7 @@ trait PostsDao {\n   }\n \n \n-  def deleteVote(pageId: PageId, postNr: PostNr, voteType: PostVoteType, voterId: UserId): Unit = {\n+  def deleteVoteIfAuZ(pageId: PageId, postNr: PostNr, voteType: PostVoteType, voterId: UserId): Unit = {\n     require(postNr >= PageParts.BodyNr, \"TyE2ABKPGN7\")\n \n     writeTx { (tx, staleStuff) =>\n@@ -2235,7 +2235,7 @@ trait PostsDao {\n   }\n \n \n-  def ifAuthAddVote(pageId: PageId, postNr: PostNr, voteType: PostVoteType,\n+  def addVoteIfAuZ(pageId: PageId, postNr: PostNr, voteType: PostVoteType,\n         voterId: UserId, voterIp: String, postNrsRead: Set[PostNr]): Unit = {\n     require(postNr >= PageParts.BodyNr, \"TyE5WKAB20\")\n "
    },
    {
      "sha": "e1999bf530be8f9bab0f775ed7e057309c7001a1",
      "filename": "app/ed/server/EdController.scala",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/ed/server/EdController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/ed/server/EdController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/EdController.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -97,6 +97,17 @@ class EdController(cc: ControllerComponents, val context: EdContext)\n     PlainApiAction(cc.parsers.json(maxLength = maxBytes),\n       rateLimits, allowAnyone = allowAnyone, isLogin = isLogin)(f)\n \n+  def AsyncUserPostJsonAction(rateLimits: RateLimits, maxBytes: i32,\n+        avoidCookies: Bo = false)(\n+        f: JsonPostRequest => Future[Result]): Action[JsValue] =\n+    PlainApiAction(cc.parsers.json(maxLength = maxBytes),\n+      rateLimits, authnUsersOnly = true, avoidCookies = avoidCookies).async(f)\n+\n+  def UserPostJsonAction(rateLimits: RateLimits, maxBytes: i32)(\n+        f: JsonPostRequest => Result): Action[JsValue] =\n+    PlainApiAction(cc.parsers.json(maxLength = maxBytes),\n+      rateLimits, authnUsersOnly = true)(f)\n+\n   def PostTextAction(rateLimits: RateLimits, maxBytes: Int, allowAnyone: Boolean = false)(\n         f: ApiRequest[String] => Result): Action[String] =\n     PlainApiAction(cc.parsers.text(maxLength = maxBytes),"
    },
    {
      "sha": "4314a04ba59aba03237d057a48e5dc0e4fc7762d",
      "filename": "app/ed/server/auth/Authz.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/ed/server/auth/Authz.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/ed/server/auth/Authz.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/auth/Authz.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -715,6 +715,8 @@ object MaySeeOrWhyNot {\n \n   case object NopeNoSuchPage extends MaySeeOrWhyNot(5)\n   case object NopeNoPostWithThatNr extends MaySeeOrWhyNot(3)  // RENAME NopeNoSuchPost\n+  case object NopePostNotApproved extends MaySeeOrWhyNot(6)\n   case object NopePostDeleted extends MaySeeOrWhyNot(4)\n+\n }\n "
    },
    {
      "sha": "5b8ea79bd91d910655c616e5decaf52b9b1fbd02",
      "filename": "app/ed/server/auth/AuthzSiteDaoMixin.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/ed/server/auth/AuthzSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/ed/server/auth/AuthzSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/auth/AuthzSiteDaoMixin.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -283,6 +283,9 @@ trait AuthzSiteDaoMixin {\n     if (post.isDeleted && !isStaffOrAuthor)\n       return (MaySeeOrWhyNot.NopePostDeleted, \"6PKJ2RU-Post-Deleted\")\n \n+    if (!post.isSomeVersionApproved && !isStaffOrAuthor)\n+      return (MaySeeOrWhyNot.NopePostNotApproved, \"6PKJ2RW-Post-0Apr\")\n+\n     // Later: else if is meta discussion ... [METADISC]\n \n     (MaySeeOrWhyNot.YesMaySee, \"\")"
    },
    {
      "sha": "1bbff324d46fe9510b972bb47129181176a54b4e",
      "filename": "app/ed/server/http/PlainApiActions.scala",
      "status": "modified",
      "additions": 20,
      "deletions": 3,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/ed/server/http/PlainApiActions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/ed/server/http/PlainApiActions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/http/PlainApiActions.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -51,9 +51,11 @@ class PlainApiActions(\n \n   def PlainApiAction[B](parser: BodyParser[B],\n         rateLimits: RateLimits, allowAnyone: Bo = false, isLogin: Bo = false,\n+        authnUsersOnly: Bo = false,\n         avoidCookies: Bo = false, skipXsrfCheck: Bo = false)\n         : ActionBuilder[ApiRequest, B] =\n     PlainApiActionImpl(parser, rateLimits,\n+        authnUsersOnly = authnUsersOnly,\n         allowAnyone = allowAnyone, isLogin = isLogin, avoidCookies = avoidCookies,\n         skipXsrfCheck = skipXsrfCheck)\n \n@@ -87,6 +89,7 @@ class PlainApiActions(\n         rateLimits: RateLimits,\n         adminOnly: Boolean = false,\n         staffOnly: Boolean = false,\n+        authnUsersOnly: Bo = false,\n         allowAnyone: Boolean = false,  // try to delete 'allowAnyone'? REFACTOR\n         avoidCookies: Boolean = false,\n         isLogin: Boolean = false,\n@@ -541,6 +544,15 @@ class PlainApiActions(\n         }\n       }\n \n+      if (authnUsersOnly) {\n+        if (!anyUser.exists(_.isUserNotGuest))\n+          throwForbidden(\n+                \"TyE0AUTHND\", \"You need to be logged in to do this\")\n+        if (!anyUser.exists(_.isApprovedOrStaff))\n+          throwForbidden(\n+                \"TyE0APPRVD1\", \"Your user account has not yet been approved\")\n+      }\n+\n       if (!allowAnyone && !isLogin) {\n         // ViewPageController has allow-anyone = true.\n         val isXhr = isAjax(request)\n@@ -563,11 +575,16 @@ class PlainApiActions(\n \n         if (!anyUser.exists(_.isApprovedOrStaff) && siteSettings.userMustBeApproved)\n           goToHomepageOrIfApiReqThen(throwForbidden(\n-                \"TyE0APPRVD\", \"Your user account has not yet been approved\"))\n+                \"TyE0APPRVD2\", \"Your user account has not yet been approved\"))\n \n-        if (anyUser.exists(_.isGuest) && !siteSettings.isGuestLoginAllowed && isApiReq)\n-          throwForbidden(\"DwE7JYK4\", o\"\"\"Guest access has been disabled, but you're logged in\n+        if (anyUser.exists(_.isGuest) && !siteSettings.isGuestLoginAllowed) {\n+          throwForbiddenIf(isApiReq,\n+                \"TyE7JYK4\", o\"\"\"Guest access has been disabled, but you're logged in\n                 as guest. Please sign up with a real account instead\"\"\")\n+          // If !api-req, then could be *viewing* a page — that's ok,\n+          // since !siteSettings.userMustBeApproved.\n+          // Or maybe delete guest session, show a message that one is now logged out?\n+        }\n       }\n \n       val apiRequest = ApiRequest[A]("
    },
    {
      "sha": "7bd57ed9b1405665c5cb512140379bf147c8cb31",
      "filename": "app/talkyard/server/authn/SsoAuthnController.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/talkyard/server/authn/SsoAuthnController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/talkyard/server/authn/SsoAuthnController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/talkyard/server/authn/SsoAuthnController.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -48,6 +48,12 @@ class SsoAuthnController @Inject()(cc: ControllerComponents, edContext: EdContex\n   /** This endpoint logs in a pat via a GET request — and there needs to be\n     * a one-time secret in a query param.  [GETLOGIN]\n     * ex: http://localhost/-/v0/login-with-secret?oneTimeSecret=nnnnn&thenGoTo=/\n+    *\n+    * Always allowed, also if API not enabled —\n+    * ?? old comment follows: needed for embedded comments\n+    *   signup-login to work if 3rd party cookies blocked. [306KUD244]\n+    *   Otherwise, works only if this server has generated a secret, that is,\n+    *   API enabled.\n     */\n   def apiv0_loginWithSecret: Action[U] = GetActionIsLogin { request: GetRequest =>\n \n@@ -192,6 +198,8 @@ class SsoAuthnController @Inject()(cc: ControllerComponents, edContext: EdContex\n       parseOptJsObject(req.body, \"userDevTest\")\n     }\n \n+    // SECURITY [stop_emb_aun_tkn_rply] Incl seq nr in token, bump on\n+    // each login, store highest seen in pats_t, require next is greater.\n     val anyAuthnToken = parseOptSt(req.body, \"userAuthnToken\")\n \n     throwBadReqIf(anyUserJsObj.isEmpty && anyAuthnToken.isEmpty,"
    },
    {
      "sha": "92300484a16edda042c461f122b4c2c163ac042a",
      "filename": "app/talkyard/server/emails/in/EmailsInController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/talkyard/server/emails/in/EmailsInController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/talkyard/server/emails/in/EmailsInController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/talkyard/server/emails/in/EmailsInController.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -210,7 +210,7 @@ class EmailsInController @Inject()(cc: ControllerComponents, edContext: EdContex\n           createdAt = dao.globals.now(),\n           sendTo = emailIn.sentFromAddr,\n           toUserId = origEmailOut.toUserId,\n-          subject = s\"[$siteName] You cannot reply via email\",   // I18N\n+          subject = s\"[$siteName] New notifications\",   // I18N\n           bodyHtml = htmlSt)\n   }\n }"
    },
    {
      "sha": "5af55c197d1cd6f8321701f2da1b6f3287ed5a56",
      "filename": "app/views/embeddedEditor.scala.html",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/app/views/embeddedEditor.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/app/views/embeddedEditor.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/embeddedEditor.scala.html?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -15,15 +15,20 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  *@\n \n-@(tpi: debiki.EditPageTpi)\n+@(tpi: debiki.EditPageTpi, embeddingScriptV: Option[Int])\n \n \n <html class=\"DW dw-pri dw-embedded-editor\">\n <head>\n @tpi.debikiMeta\n @tpi.debikiStyles\n @tpi.stylesheetBundle(\"styles.css\")\n-@tpi.debikiScriptsInHead(isInEmbeddedEditor = true, anyEmbeddedPageId = tpi.anyEmbeddedPageId)\n+\n+@* Won't work any more: anyEmbeddedPageId,  with [many_embcom_iframes]  *@\n+@tpi.debikiScriptsInHead(\n+      isInEmbeddedEditor = true,\n+      embeddingScriptV = embeddingScriptV)\n+\n @* [script_src_self]\n <script>\n eds.isInEmbeddedEditor = true;"
    },
    {
      "sha": "c61cc1b489fe858be33ad6244f2eb144cd525a30",
      "filename": "client/app-editor/editor-prelude.editor.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-editor/editor-prelude.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-editor/editor-prelude.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-editor/editor-prelude.editor.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1,4 +1,4 @@\n-/// <reference path=\"../app-slim/server-vars.ts\" />\n+/// <reference path=\"../app-slim/model.ts\" />\n /// <reference path=\"../app-slim/translations.d.ts\" />\n /// <reference path=\"../app-slim/slim-bundle.d.ts\" />\n /// <reference path=\"../app-more/more-bundle-already-loaded.d.ts\" />\n\\ No newline at end of file"
    },
    {
      "sha": "e81c26983e8d9d9900565d695fd34a1f5bb44c56",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 309,
      "deletions": 124,
      "changes": 433,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-editor/editor/editor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-editor/editor/editor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-editor/editor/editor.editor.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2015-2018 Kaj Magnus Lindberg\n+ * Copyright (c) 2015-2021 Kaj Magnus Lindberg\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU Affero General Public License as\n@@ -27,6 +27,7 @@ let FileAPI;\n \n let theEditor: any;\n \n+\n // rta supports multichar triggers (v3.1.1), and can use a custom\n // component instead of a <textarea> (v4.2.0).\n // Oh it's actually a bit problematic:   [rta_overfl_top_bgfx]  — places the\n@@ -112,8 +113,9 @@ export const listUsernamesTrigger = {\n \n \n interface EditorState {\n+  inFrame?: DiscWin,\n+  inFrameStore?: DiscStore;\n   store: Store;\n-  embMainStoreCopy?: Partial<Store>;\n   visible: boolean;\n   replyToPostNrs: PostNr[];\n   anyPostType?: PostType;\n@@ -185,16 +187,107 @@ export const Editor = createFactory<any, EditorState>({\n     };\n   },\n \n+\n+  getDiscStore(): DiscStore {\n+    const state: EditorState = this.state;\n+    return state.inFrameStore || state.store; // [many_embcom_iframes]\n+  },\n+\n+\n+  /// This is part of making the embedded editor work with many comment iframes\n+  /// at the same time. We clone the relevant discussion data, from the\n+  /// relevant embedded comments iframe. — If we're not in embedded iframes,\n+  /// we just return the React store of the current window as is (which is then\n+  /// the top window).\n+  ///\n+  getOrCloneDiscStore(inFrame?: DiscWin): DiscStore {\n+    if (!eds.isInIframe) {\n+      // @ifdef DEBUG\n+      dieIf(inFrame, 'TyE507MWEG25');\n+      dieIf(window.top !== window, 'TyE6WMLE25');\n+      // Should be in sync because of the debiki2.StoreListenerMixin.\n+      // (I wonder if some race cond could make them different for a millisec?)\n+      dieIf(this.state.store !== debiki2.ReactStore.allData(), 'TyE50MREJ35');\n+      // @endif\n+      return debiki2.ReactStore.allData();\n+    }\n+\n+    // @ifdef DEBUG\n+    dieIf(!inFrame && !this.state.inFrame, 'TyE604RMJ46');\n+    // @endif\n+\n+    // `inFrame` is sometimes available before this.state has been updated, so\n+    // try to use it first.\n+    const state: EditorState = this.state;\n+    const discFrameStore: Partial<DiscStore> =\n+        inFrame?.theStore || (    // [ONESTORE]  [many_embcom_iframes]\n+              state.inFrame ? state.inFrame.theStore : (\n+                  // This'd be weird, would mean the comments iframe was deleted\n+                  // by external javascript? See below [.72JM6]\n+                  win_getSessWinStore()));\n+\n+    // `discFrameStore` is from another iframe — clone it. And if it's from the session\n+    // iframe [.72JM6], add empty maps and lists for users and pages (this\n+    // would be weird, but maybe can happen if buggy javascript on the embedd*ing*\n+    // page deletes a comments iframe. Then it's nice if Talkyard continues\n+    // working as best it can without showing errors?).\n+    //\n+    // Why clone? So as not to 1) hold on to data from another iframe and thereby\n+    // maybe preventing data in that other iframe from being freed. Maybe not needed,\n+    // since this isn't html tags, just variables, but let's clone just in case.\n+    // And 2) so that the data won't get changed at any time by code in the other iframe\n+    // — React.js wouldn't like that.\n+    //\n+    let storeClone: DiscStore;\n+    try {\n+      storeClone = _.cloneDeep({\n+        me: discFrameStore.me,\n+        embeddedOriginOrEmpty: discFrameStore.embeddedOriginOrEmpty,\n+        currentPage: discFrameStore.currentPage,\n+        currentPageId: discFrameStore.currentPageId,\n+        currentCategories: discFrameStore.currentCategories,\n+        usersByIdBrief: discFrameStore.usersByIdBrief || {},\n+        pagesById: {},  // updated below\n+      });\n+    }\n+    catch (ex) {\n+      // Don't think this can happen, but let's wait and see for a while?\n+      // DO_AFTER 2022-01-01 unwrap from try-catch (remvoe this catch {}).\n+      if (!this.loggedCloneError) {\n+        logW(\"Couldn't clone store in other iframe [TyECLONSTOR]\", ex);\n+        // @ifdef DEBUG\n+        debugger;\n+        // @endif\n+        this.loggedCloneError = true;\n+      }\n+      storeClone = state.store;\n+    }\n+\n+    // We show the embedded editor for one discussion at a time, so we need\n+    // the current page, only.\n+    if (storeClone.currentPage) {\n+      // @ifdef DEBUG\n+      dieIf(storeClone.currentPage.pageId !== storeClone.currentPageId, 'TyE507MWEG27')\n+      // @endif\n+      storeClone.pagesById[storeClone.currentPageId] = storeClone.currentPage;\n+    }\n+\n+    return storeClone;\n+  },\n+\n+\n   onChange: function() {\n     this.setState({ store: debiki2.ReactStore.allData() });\n   },\n \n+\n   onManualScroll: function() {\n     // Then stop auto scrolling.\n     // Start again, if pat clicks the Show Preview button?\n     delete this.scrollToPreview;\n   },\n \n+\n   UNSAFE_componentWillMount: function() {\n     // Sync delay w e2e test. Dupl code. [upd_ed_pv_delay]\n     this.updatePreviewSoon = _.debounce(this.updatePreviewNow, 333);\n@@ -207,6 +300,7 @@ export const Editor = createFactory<any, EditorState>({\n     this.searchForSimilarTopicsSoon = _.debounce(this.searchForSimilarTopicsNow, 1800);\n   },\n \n+\n   componentDidMount: function() {\n     // Minor BUG: resizing .dw-comments to adjust for the textarea doesn't work. (5YKQ27)\n     this.columns = $all('#esPageColumn, #esWatchbarColumn, #dw-sidebar .dw-comments');\n@@ -233,6 +327,7 @@ export const Editor = createFactory<any, EditorState>({\n     }); */\n   },\n \n+\n   componentDidUpdate: function(prevProps, prevState: EditorState) {\n     const state: EditorState = this.state;\n     this.perhapsShowGuidelineModal();\n@@ -245,6 +340,7 @@ export const Editor = createFactory<any, EditorState>({\n     }\n   },\n \n+\n   componentWillUnmount: function() {\n     this.isGone = true;\n     logD(\"Editor: componentWillUnmount\");\n@@ -256,13 +352,15 @@ export const Editor = createFactory<any, EditorState>({\n     this.saveDraftNow();\n   },\n \n+\n   focusInputFields: function() {\n     let elemToFocus = this.titleElm || this.textareaElm;\n     if (elemToFocus) {\n       elemToFocus.focus();\n     }\n   },\n \n+\n   makeEditorResizable: function() {\n     if (eds.isInEmbeddedEditor) {\n       // The iframe is resizable instead. [RESEMBEDTR]\n@@ -271,6 +369,7 @@ export const Editor = createFactory<any, EditorState>({\n     util.makeResizableUp(this.refs.editor, this.refs.resizeHandle, this.makeSpaceAtBottomForEditor);\n   },\n \n+\n   makeSpaceAtBottomForEditor: function() {\n     if (this.isGone) return;\n     const editorHeightPx = this.refs.editor.clientHeight + 'px';\n@@ -279,16 +378,19 @@ export const Editor = createFactory<any, EditorState>({\n     });\n   },\n \n+\n   returnSpaceAtBottomForEditor: function() {\n     _.each(this.columns, (c) => {\n       c.style.bottom = '0px';\n     });\n   },\n \n+\n   selectAndUploadFile: function() {\n     this.refs.uploadFileInput.click();\n   },\n \n+\n   onPaste: function(event: ClipboardEvent) {\n     // Note! This works only (?) if right clicking an image in the browser,\n     // and selecting Copy Image, and pasting into the editor, but...\n@@ -357,6 +459,7 @@ export const Editor = createFactory<any, EditorState>({\n     } */\n   },\n \n+\n   // We never un-initialize this, instead we reuse the same editor instance always once created.\n   initUploadFileStuff: function() {\n     if (!this.refs.uploadFileInput)\n@@ -400,8 +503,7 @@ export const Editor = createFactory<any, EditorState>({\n     }\n \n     for (let file of files) {\n-      const store: Store = this.state.store;\n-      const me: Myself = store.me;\n+      const me: Myself = this.getDiscStore().me;\n \n       // '**' can mean all allowed, for backw compat with old sites\n       // that don't expect any upload file type restrictions.\n@@ -610,15 +712,23 @@ export const Editor = createFactory<any, EditorState>({\n     return link;\n   },\n \n+\n+\n   toggleWriteReplyToPostNr: function(postNr: PostNr, inclInReply: Bo,\n-        anyPostType?: PostType) {\n+        anyPostType?: PostType, inFrame?: DiscWin) {\n     if (this.alertBadState('WriteReply'))\n       return;\n \n     const state: EditorState = this.state;\n-    const store: Store = state.store;\n     let postNrs = state.replyToPostNrs;\n \n+    // If we're in the blog comments editor iframe, then, usernames are in a store\n+    // in another iframe, namely the one with the comments (rather than this iframe\n+    // with only the editor).\n+    // We'll then clone the parts we need of that other store, and remember\n+    // in this.state.inFrameStore.\n+    const discStore: DiscStore = this.getOrCloneDiscStore(inFrame);\n+\n     if (inclInReply && postNrs.length) {\n       // This means we've started replying to a post, and then clicked Reply\n       // for *another* post too — i.e. we're trying to reply to more than one post,\n@@ -636,7 +746,7 @@ export const Editor = createFactory<any, EditorState>({\n     // No multireplies — disabled.\n     dieIf(postNrs.length >= 2, 'TyE35KKGJRT0');\n \n-    if (state.editorsPageId !== store.currentPageId && postNrs.length) {\n+    if (state.editorsPageId !== discStore.currentPageId && postNrs.length) {\n       // The post nrs on this different page, won't match the ones in postNrs.\n       // So ignore this.\n       // UX COULD disable the reply buttons? Also see (5445522) just above.  — Done.\n@@ -685,51 +795,25 @@ export const Editor = createFactory<any, EditorState>({\n       postType = PostType.Flat;\n     }\n \n-    // If we're in the blog comments editor iframe, then, usernames are avaiable\n-    // only in the \"main\" iframe — the one with all comments. Let's clone\n-    // the parts we need, and store in our own local React store.\n-    //\n-    // COULD ask about this approach (i.e. using data from another iframe\n-    // on the same domain) at StackOverflow, but for now, just try-catch\n-    // — if won't work, some old ode that shows:\n-    //   \"Replying to post-1234\" text:\n-    // will run instead — all fine.\n-    //\n-    const mainStore: Store = getMainWinStore();\n-    let embMainStoreCopy: Partial<Store> | undefined;\n-    if (eds.isInEmbeddedEditor) {\n-      try {\n-        embMainStoreCopy = {\n-          // Clone data from the other iframe, so as not to 1) hold on to it\n-          // and thereby maybe preventing data in that other frame from being\n-          // freed. Probably not needed, since this arene't html tags, just\n-          // variables, but let's clone anyway just in case.\n-          // And 2) not getting it changed \"at any time\" by the other iframe\n-          // — React.js wouldn't llike that.\n-          currentPage: _.cloneDeep(mainStore.currentPage),\n-          usersByIdBrief: _.cloneDeep(mainStore.usersByIdBrief),\n-          currentPageId: mainStore.currentPageId,\n-        };\n-      }\n-      catch (ex) {\n-        // Oh well.\n-        if (!this.loggedCloneError) {\n-          logW(\"Couldn't clone Partial<Store> from main iframe [TyECLONSTOR]\", ex);\n-          // @ifdef DEBUG\n-          debugger;\n-          // @endif\n-          this.loggedCloneError = true;\n-        }\n-      }\n+    let inFrameStore: DiscStore | U;\n+    if (eds.isInEmbeddedEditor && inFrame?.eds) {\n+      // [many_embcom_iframes]\n+      inFrameStore = discStore;\n+      eds.embeddedPageId = inFrame.eds.embeddedPageId;\n+      eds.embeddingUrl = inFrame.eds.embeddingUrl;\n+      eds.embeddedPageAltId = inFrame.eds.embeddedPageAltId;\n+      eds.lazyCreatePageInCatId = inFrame.eds.lazyCreatePageInCatId;\n     }\n \n     const newState: Partial<EditorState> = {\n-      embMainStoreCopy,\n+      inFrame,\n+      inFrameStore,\n       anyPostType: postType,\n-      editorsCategories: store.currentCategories,\n-      editorsPageId: store.currentPageId || eds.embeddedPageId,\n+      editorsCategories: discStore.currentCategories,\n+      editorsPageId: discStore.currentPageId || eds.embeddedPageId,\n+      // [editorsNewLazyPageRole] = PageRole.EmbeddedComments if eds.isInEmbeddedEditor?\n       replyToPostNrs: postNrs,\n-      text: state.text || makeDefaultReplyText(store, postNrs),\n+      text: state.text || makeDefaultReplyText(discStore, postNrs),\n     };\n     this.showEditor(newState);\n \n@@ -741,38 +825,63 @@ export const Editor = createFactory<any, EditorState>({\n     const draftType = postType === PostType.BottomComment ?\n         DraftType.ProgressPost : DraftType.Reply;\n \n+\n     const draftLocator: DraftLocator = {\n       draftType,\n       pageId: newState.editorsPageId,\n       postNr: postNrs[0], // for now\n     };\n-    draftLocator.postId = store_getPostId(mainStore, draftLocator.pageId, draftLocator.postNr);\n+    draftLocator.postId = store_getPostId(discStore, draftLocator.pageId, draftLocator.postNr);\n+\n+    // draftLocator used as key in local storage, better avoid null/undef/empty fields.\n     if (eds.embeddingUrl) {\n       draftLocator.embeddingUrl = eds.embeddingUrl;\n     }\n+    if (eds.embeddedPageAltId) {\n+      draftLocator.discussionId = eds.embeddedPageAltId;  // [draft_diid]\n+    }\n+\n \n     let writingWhat = WritingWhat.ReplyToNotOriginalPost;\n     if (_.isEqual([BodyNr], postNrs)) writingWhat = WritingWhat.ReplyToOriginalPost;\n     else if (_.isEqual([NoPostId], postNrs)) writingWhat = WritingWhat.ChatComment;\n \n-    this.loadDraftAndGuidelines(draftLocator, writingWhat);\n+    this.loadDraftAndGuidelines(\n+          draftLocator, writingWhat, undefined, inFrameStore);\n   },\n \n-  editPost: function(postNr: PostNr, onDone?: EditsDoneHandler) {\n+\n+\n+  editPost: function(postNr: PostNr, onDone?: EditsDoneHandler, inFrame?: DiscWin) {\n     // [editor-drafts] UX COULD somehow give the user the option to cancel & close, without\n     // loading? saving? any draft.\n \n     if (this.alertBadState())\n       return;\n+\n+    // If many comments iframes, update the embedded page id, so we'll load the post\n+    // on the correct page, from the server. [many_embcom_iframes]\n+    if (inFrame?.eds) {\n+      eds.embeddedPageId = inFrame.eds.embeddedPageId;\n+      eds.embeddingUrl = inFrame.eds.embeddingUrl;\n+      eds.embeddedPageAltId = inFrame.eds.embeddedPageAltId;\n+      delete eds.lazyCreatePageInCatId; // page already exists\n+      const inFrameStore: DiscStore = this.getOrCloneDiscStore(inFrame);\n+      const newState: Partial<EditorState> = { inFrame, inFrameStore };\n+      this.setState(newState);\n+    }\n+\n+    // [manyiframes_pageid]\n     Server.loadDraftAndText(postNr, (response: LoadDraftAndTextResponse) => {\n       const state: EditorState = this.state;\n       if (this.isGone) return;\n-      const store: Store = state.store;\n-      const draft: Draft | undefined = response.draft;\n+      if (state.inFrame !== inFrame) return;\n+      const draft: Draft | U = response.draft;\n \n       // In case the draft was created when one wasn't logged in, then, now, set a user id.\n-      if (draft && store.me) {\n-        draft.byUserId = store.me.id;\n+      const discStore: DiscStore = this.getDiscStore();\n+      if (draft && discStore.me) {\n+        draft.byUserId = discStore.me.id;\n       }\n \n       // This can fail, if the post was moved by staff to a different page? Then it\n@@ -781,7 +890,7 @@ export const Editor = createFactory<any, EditorState>({\n \n       const newState: Partial<EditorState> = {\n         anyPostType: null,\n-        editorsCategories: store.currentCategories,\n+        editorsCategories: discStore.currentCategories, // [many_embcom_iframes]\n         editorsPageId: response.pageId,\n         editingPostNr: postNr,\n         editingPostUid: response.postUid,\n@@ -802,6 +911,10 @@ export const Editor = createFactory<any, EditorState>({\n \n     const state: EditorState = this.state;\n     const store: Store = state.store;\n+    // This cannot happen in an embedded editor, currently.\n+    // @ifdef DEBUG\n+    dieIf(state.inFrame, 'TyE502MHEARI0-1');\n+    // @endif\n \n     let category: Category | U;\n     let categoryId: CategoryId | U;\n@@ -858,7 +971,13 @@ export const Editor = createFactory<any, EditorState>({\n     if (this.alertBadState())\n       return;\n \n-    const store: Store = this.state.store;\n+    const state: EditorState = this.state;\n+    const store: Store = state.store;\n+    // This cannot happen in an embedded editor, currently.\n+    // @ifdef DEBUG\n+    dieIf(state.inFrame, 'TyE502MHEARI0-2');\n+    // @endif\n+\n     const newState: Partial<EditorState> = {\n       editorsCategories: store.currentCategories,\n       editorsPageId: store.currentPageId,\n@@ -876,7 +995,12 @@ export const Editor = createFactory<any, EditorState>({\n   openToWriteMessage: function(userId: UserId) {\n     if (this.alertBadState())\n       return;\n-    const store: Store = this.state.store;\n+    const state: EditorState = this.state;\n+    const store: Store = state.store;\n+    // This cannot happen in an embedded editor, currently.\n+    // @ifdef DEBUG\n+    dieIf(state.inFrame, 'TyE502MHEARI0-3');\n+    // @endif\n     const newState: Partial<EditorState> = {\n       editorsCategories: store.currentCategories,\n       // The current page doens't matter, when creating a new page. [DRAFTS_BUG] set to undefined\n@@ -920,7 +1044,7 @@ export const Editor = createFactory<any, EditorState>({\n     // the active Reply button(s).)\n \n     const state: EditorState = this.state;\n-    const store: Store = state.store;\n+    const store: DiscStore = this.getDiscStore();\n \n     // REFACTOR: Remove allFine? Not needed?\n     const allFine = state.draftStatus <= DraftStatus.NeedNotSave &&\n@@ -957,11 +1081,62 @@ export const Editor = createFactory<any, EditorState>({\n     return !allFine && seemsBad;\n   },\n \n+\n   loadDraftAndGuidelines: function(draftLocator: DraftLocator, writingWhat: WritingWhat,\n-        pageRole?: PageRole) {\n+        pageRole?: PageRole, inFrameStore?: DiscStore) {\n \n     const setDraftAndGuidelines = (anyDraft?, anyGuidelines?) => {\n-      const draft = anyDraft || BrowserStorage.get(draftLocator);\n+      let draft = anyDraft ||\n+            // BUG harmleess: Use BrowserStorage.forEachDraft(page-id) instead?\n+            // So same algorithm for finding drafts to show in-page, as to load\n+            // in the editor.  [find_br_drafts]\n+            BrowserStorage.get(draftLocator);\n+      // Also try without any  pageId  or discussionId,  [draft_diid]\n+      // in case we started writing, before a page had been created,\n+      // or before there was a discussion id (maybe the site admin added later).\n+      if (!draft) {\n+        const hasDiscId = !!draftLocator.discussionId;\n+        const hasPageId = !isNoPage(draftLocator.pageId);\n+        // UX, minor: Could find all 3 drafts (if any) and pick the most recent one?\n+        // Or let pat choose, or show diffs  o.O  almost a can of worms?\n+        if (hasDiscId) {\n+          // Lookup by url path or page id, if the draft was saved before the\n+          // embedded discussion had a discussion id assigned.\n+          // But if the url is different, skip this draft [emb_draft_url].\n+          // (COULD consider the url path only? In case blog moved elsewhere?)\n+          const loc2 = { ... draftLocator };\n+          delete loc2.discussionId;\n+          draft = BrowserStorage.get(loc2);\n+        }\n+        if (!draft && hasPageId) {\n+          // Lookup by url path or discussion id, if draft created before\n+          // the page existed, that is, when the page id was sitll empty/no-page-id.\n+          // (Remember, embedded comments pages aren't created before the first\n+          // comment gets posted [emb_lzy_pgs], so, a draft of the very first comment,\n+          // usually won't have any page id.)\n+          const loc2 = { ... draftLocator };\n+          // Replies currently always have a page id — if page doesn't exist,\n+          // then, EmptyPageId, not undefined.\n+          loc2.pageId = EmptyPageId;\n+          draft = BrowserStorage.get(loc2);\n+          // But, later on, new forum topics, don't (since don't yet exist).\n+          // (New forum topics cannot have embedded discussion ids, so this\n+          // not needed in the last if{} below.))\n+          if (!draft) {\n+            delete loc2.pageId;\n+            draft = BrowserStorage.get(loc2);\n+          }\n+        }\n+        if (!draft && hasDiscId && hasPageId) {\n+          // Lookup by url path, if draft created before the emb comments page existed,\n+          // and before it had a discussion id.\n+          const loc2 = { ... draftLocator };\n+          delete loc2.discussionId;\n+          loc2.pageId = EmptyPageId;\n+          draft = BrowserStorage.get(loc2);\n+        }\n+      }\n+\n       logD(\"Setting draft and guidelines: !!anyDraft: \" + !!anyDraft +\n           \" !!draft: \" + !!draft +\n           \" !!anyGuidelines: \" + !!anyGuidelines);\n@@ -989,7 +1164,7 @@ export const Editor = createFactory<any, EditorState>({\n       return;\n     }\n \n-    const store: Store = getMainWinStore();\n+    const store: DiscStore = inFrameStore || state.store;\n \n     // For embedded comments iframes, the page might not yet have been created,\n     // and the categoryId might be unknown / undefined.\n@@ -1014,8 +1189,8 @@ export const Editor = createFactory<any, EditorState>({\n         (guidelinesSafeHtml: string | U, draft?: Draft) => {\n       logD(\"Done loading draft and guidelines.\");\n       const state: EditorState = this.state;\n-      if (this.isGone || !state.visible)\n-        return;\n+      if (this.isGone || !state.visible) return;\n+      if (state.inFrameStore !== inFrameStore) return;\n       let guidelines = undefined;\n       if (guidelinesSafeHtml) {\n         const guidelinesHash = hashStringToNumber(guidelinesSafeHtml);\n@@ -1033,6 +1208,7 @@ export const Editor = createFactory<any, EditorState>({\n     });\n   },\n \n+\n   // Remembers that these guidelines have been hidden, by storing a hash of the text in localStorage.\n   // So, if the guidelines get changed, they'll be shown again (good). COULD delete old hashes if\n   // we end up storing > 100? hashes?\n@@ -1182,7 +1358,7 @@ export const Editor = createFactory<any, EditorState>({\n         if (state.editingPostUid) {\n           params.editingPostNr = state.editingPostNr;\n         }\n-        ReactActions.showEditsPreviewInPage(params);\n+        ReactActions.showEditsPreviewInPage(params, state.inFrame);\n         // We'll hide the preview, wheh closing the editor, here: (TGLPRVW)\n       }\n     });\n@@ -1194,7 +1370,12 @@ export const Editor = createFactory<any, EditorState>({\n \n     const state: EditorState = this.state;\n     const store: Store = state.store;\n-    let settings: SettingsVisibleClientSide = store.settings;\n+    // This cannot happen in an embedded editor, currently.\n+    // @ifdef DEBUG\n+    dieIf(state.inFrame, 'TyE502MHEARI0-4');\n+    // @endif\n+\n+    const settings: SettingsVisibleClientSide = store.settings;\n     if (settings.enableSimilarTopics === false)\n       return;\n \n@@ -1266,7 +1447,7 @@ export const Editor = createFactory<any, EditorState>({\n     const state: EditorState = this.state;\n     const anyPostType: PostType | U = state.anyPostType;\n     const locator: DraftLocator = { draftType: DraftType.Scratch };\n-    const mainStore: Store = eds.isInEmbeddedEditor ? getMainWinStore() : state.store;\n+    const discStore: DiscStore = this.getDiscStore();\n \n     // If we're in an iframe, the page might have gotten lazy-created; then\n     // we need to use eds.embeddedPageId.\n@@ -1335,17 +1516,20 @@ export const Editor = createFactory<any, EditorState>({\n       locator.draftType = postType_toDraftType(postType);\n       locator.pageId = editorsPageId;\n       locator.postNr = state.replyToPostNrs[0]; // for now just pick the first one\n-      locator.postId = store_getPostId(mainStore, locator.pageId, locator.postNr);\n+      locator.postId = store_getPostId(discStore, locator.pageId, locator.postNr);\n       // This is needed for embedded comments, if the discussion page hasn't yet been created.\n       if (eds.embeddingUrl) {\n         locator.embeddingUrl = eds.embeddingUrl;\n       }\n+      if (eds.embeddedPageAltId) {\n+        locator.discussionId = eds.embeddedPageAltId;  // [draft_diid]\n+      }\n     }\n     else if (state.isWritingChatMessage) {\n       locator.draftType = DraftType.Reply;\n       locator.pageId = editorsPageId;\n       locator.postNr = BodyNr;\n-      locator.postId = store_getPostId(mainStore, locator.pageId, locator.postNr);\n+      locator.postId = store_getPostId(discStore, locator.pageId, locator.postNr);\n       postType = PostType.ChatMessage;\n     }\n     else if (isNewDirectMessage) {\n@@ -1365,7 +1549,7 @@ export const Editor = createFactory<any, EditorState>({\n     }\n \n     const draft: Draft = {\n-      byUserId: mainStore.me.id,\n+      byUserId: discStore.me.id,\n       draftNr: NoDraftNr,\n       forWhat: locator,\n       createdAt: getNowMs(),\n@@ -1455,24 +1639,23 @@ export const Editor = createFactory<any, EditorState>({\n             draft: null,\n             draftStatus: DraftStatus.Deleted,\n           });\n-        }), useBeacon || this.setCannotSaveDraft);\n+        }), useBeacon || this.setCannotSaveDraft, state.inFrame);\n       }\n       if (callbackThatClosesEditor) {\n         callbackThatClosesEditor();\n       }\n       return;\n     }\n \n-    const store: Store = state.store;\n+    const me: Myself = this.getDiscStore().me;\n     const draftToSave: Draft = { ...draftOldOrEmpty, text, title };\n \n     // If this is an embedded comments discussion, and the discussion page hasn't\n     // yet been created, there's no page id to use as draft locator key. Then,\n     // save the draft in the browser storage only, for now.\n     // UX COULD save server side, with url as key  [BLGCMNT1]\n     // — it's the key already, in the sesison cache.\n-    const saveInBrowser =\n-        !store.me.isLoggedIn || isEmbeddedNotYetCreatedPage(state);\n+    const saveInBrowser = !me.isLoggedIn || isEmbeddedNotYetCreatedPage(state);\n \n     logD(`Saving draft: ${JSON.stringify(draftToSave)}, ` + (\n         saveInBrowser ? \"temp in browser\" : \"server side\"));\n@@ -1576,7 +1759,7 @@ export const Editor = createFactory<any, EditorState>({\n       //   you have navigated away frome it, to here\"\"\n       this.callOnDoneCallback(true);\n       this.clearAndCloseFineIfGone(); // [6027TKWAPJ5]\n-    });\n+    }, state.inFrame);\n   },\n \n   saveNewPost: function() {\n@@ -1588,7 +1771,7 @@ export const Editor = createFactory<any, EditorState>({\n       // Also, if we've navigaated away, seems any draft won't get deleted.\n       this.callOnDoneCallback(true);\n       this.clearAndCloseFineIfGone();\n-    });\n+    }, state.inFrame);\n   },\n \n   saveNewForumPage: function() {\n@@ -1656,6 +1839,7 @@ export const Editor = createFactory<any, EditorState>({\n     }\n   },\n \n+\n   cycleMaxHorizBack: function() {\n     // Cycle from 1) normal to 2) maximized & tiled vertically, to 3) maximized & tiled horizontally\n     // and then back to normal.\n@@ -1676,6 +1860,7 @@ export const Editor = createFactory<any, EditorState>({\n             this.updatePreviewSoon : undefined);\n   },\n \n+\n   togglePreview: function() {\n     const state: EditorState = this.state;\n     this.setState({\n@@ -1684,6 +1869,10 @@ export const Editor = createFactory<any, EditorState>({\n     });\n   },\n \n+\n+  /// (When the editor is minimized, it's still considered open — there's some\n+  /// edits in progress inside, just that its' been temporarily minimized.)\n+  ///\n   toggleMinimized: function() {\n     const state: EditorState = this.state;\n     const nextShowMini = !state.showMinimized;\n@@ -1698,6 +1887,7 @@ export const Editor = createFactory<any, EditorState>({\n     // Else: the editor covers 100% anyway.\n   },\n \n+\n   showEditor: function(statePatch: Partial<EditorState>) {\n     // @ifdef DEBUG\n     dieIf(!_.isUndefined(statePatch.visible), 'TyE305WKTJP4');\n@@ -1720,26 +1910,34 @@ export const Editor = createFactory<any, EditorState>({\n     });\n   },\n \n+\n   saveDraftClearAndClose: function() {\n     this.saveDraftNow(\n         (upToDateDraft?: Draft) =>\n           this.clearAndCloseFineIfGone({ keepDraft: true, upToDateDraft }));\n   },\n \n+\n   clearAndCloseFineIfGone: function(ps: { keepDraft?: true, upToDateDraft?: Draft } = {}) {\n     const state: EditorState = this.state;\n     const anyDraft: Draft = ps.upToDateDraft || state.draft;\n \n     if (!ps.keepDraft && anyDraft) {\n       const deleteDraftPost = true;\n       // What about  state.newForumTopicCategoryId, for new topics?  [DRAFTS_BUG]\n-      ReactActions.deleteDraft(state.editorsPageId, anyDraft, deleteDraftPost);\n+      ReactActions.deleteDraft(\n+            state.editorsPageId, anyDraft, deleteDraftPost,\n+            undefined, undefined, state.inFrame);\n     }\n \n     const params: HideEditorAndPreviewParams = {\n       anyDraft,\n       keepDraft: ps.keepDraft,\n-      editorsPageId: state.editorsPageId,\n+      editorsPageId:\n+          // If the page was just lazy-created (embedded comments), need to specify\n+          // the correct id. [4HKW28]\n+          !isNoPage(eds.embeddedPageId) ? eds.embeddedPageId :\n+              state.editorsPageId,\n     };\n \n     const postNrs: PostNr[] = state.replyToPostNrs;\n@@ -1759,14 +1957,16 @@ export const Editor = createFactory<any, EditorState>({\n \n     // Hide any preview post we created when opening the editor (TGLPRVW),\n     // and reenable any Reply buttons.\n-    ReactActions.hideEditorAndPreview(params);\n+    ReactActions.hideEditorAndPreview(params, state.inFrame);\n \n     this.returnSpaceAtBottomForEditor();\n \n     if (this.isGone)\n       return;\n \n     this.setState({\n+      inFrame: undefined,\n+      inFrameStore: undefined,\n       visible: false,\n       replyToPostNrs: [],\n       anyPostType: undefined,\n@@ -1790,6 +1990,10 @@ export const Editor = createFactory<any, EditorState>({\n       guidelines: null,\n       backdropOpacity: 0,\n     });\n+    eds.embeddedPageId = EmptyPageId;\n+    // eds.embeddingUrl — probably stays the same\n+    eds.embeddedPageAltId = null;\n+    eds.lazyCreatePageInCatId = null;\n   },\n \n   callOnDoneCallback: function(saved: boolean) {\n@@ -1836,9 +2040,11 @@ export const Editor = createFactory<any, EditorState>({\n     this.setState({ text: newText }, this.updatePreviewSoon);\n   },\n \n+\n+\n   render: function() {\n     const state: EditorState = this.state;\n-    const store: Store = state.store;\n+    const store: DiscStore = this.getDiscStore();\n \n     // Is undef, if in the API section, e.g. typing a direct message to a user.\n     const editorsPage: Page | undefined =\n@@ -1848,7 +2054,7 @@ export const Editor = createFactory<any, EditorState>({\n \n     const me: Myself = store.me;\n     const myUiPrefs: UiPrefs = me_uiPrefs(me);\n-    let settings: SettingsVisibleClientSide = store.settings;\n+    const settings: SettingsVisibleClientSide = state.store.settings;\n     const isPrivateGroup = page_isPrivateGroup(state.newPageRole);\n \n     // We'll disable the editor, until any draft has been loaded. [5AKBW20] Otherwise one might\n@@ -1941,14 +2147,14 @@ export const Editor = createFactory<any, EditorState>({\n       if (state.newForumTopicCategoryId && !isPrivateGroup &&\n           settings_showCategories(settings, me))\n         categoriesDropdown =\n-          SelectCategoryDropdown({ className: 'esEdtr_titleEtc_category', store: store,\n+          SelectCategoryDropdown({ className: 'esEdtr_titleEtc_category', store,\n               categories: state.editorsCategories,\n               selectedCategoryId: state.newForumTopicCategoryId,\n               onCategorySelected: this.changeCategory });\n \n       if (state.newPageRole && settings_selectTopicType(settings, me)) {\n         pageRoleDropdown = PageRoleDropdown({ store, pageRole: state.newPageRole,\n-            complicated: store.settings.showExperimental,\n+            complicated: settings.showExperimental,\n             onSelect: this.changeNewForumPageRole,\n             title: t.TopicType, className: 'esEdtr_titleEtc_pageRole' });\n       }\n@@ -1960,12 +2166,13 @@ export const Editor = createFactory<any, EditorState>({\n     const repliesToNotOrigPost = replyToPostNrs.length && !isOrigPostReply;\n \n     // The page might not yet have been created — it's just {} before it gets\n-    // saved and lazy-created [EMBED0PG]. However, in such a situation, we're inside\n+    // saved and lazy-created. However, in such a situation, we're inside\n     // the editor iframe, at the blog (not at the Talkyard site).\n+    // Maybe add a [editorsNewLazyPageRole] state field?\n     const isBlogPostReply = isOrigPostReply && (\n-        // Might not work, at the blog:\n+        // Won't work if embedded, and the discussion hasn't yet been lazy-created:\n         editorsPage?.pageRole === PageRole.EmbeddedComments ||\n-        // Works, but only at the blog:\n+        // Works if embedded:\n         eds.isInEmbeddedEditor);\n \n     // ----- Delete these?:\n@@ -1976,6 +2183,8 @@ export const Editor = createFactory<any, EditorState>({\n \n     // ----- \"Reply to\" or \"Editing\" text\n \n+    const whichFrameScrollOpts: ShowPostOpts = { inFrame: state.inFrame };\n+\n     let doingWhatInfo: any;\n     if (_.isNumber(editingPostNr)) {\n       doingWhatInfo =\n@@ -1988,7 +2197,7 @@ export const Editor = createFactory<any, EditorState>({\n               onMouseLeave: () => ReactActions.highlightPost(editingPostNr, false),\n               onClick: (event) => {\n                 event.preventDefault();\n-                ReactActions.scrollAndShowPost(editingPostNr);\n+                ReactActions.scrollAndShowPost(editingPostNr, whichFrameScrollOpts);\n                 this.scrollToPreview = true;\n               }},\n             t.e.EditPost_2 + editingPostNr + ':'));\n@@ -2051,42 +2260,14 @@ export const Editor = createFactory<any, EditorState>({\n           _.filter(replyToPostNrs, (id) => id !== NoPostId).map((replToPostNr, index) => {\n             // If replying to a blog post, then, it got auto created by the System\n             // user. Don't show \"Reply to System\".\n-            let replToPost: Post | undefined;\n-\n-            let replToAuthor: BriefUser | undefined;\n-            if (eds.isInEmbeddedEditor) {\n-              // Here in the embedded editor, we haven't loaded any page or author names\n-              // — get them from the main iframe instead (the one with all the comments).\n-              // This is a new and a bit odd approach? (Jan 2020.) Let's wrap in try (although\n-              // shouldn't be needed).)\n-              //\n-              // REFACTOR CLEAN_UP don't send just a postNr to the editor,\n-              // instead send:\n-              //     { replyingToPost: Post, replyingToAuthor: Participant }   ? + page id ?\n-              // then can skip all this (!),\n-              // plus, post remembered, also if navigating to other page.\n-              //\n-              try {\n-                replToPost = state.embMainStoreCopy.currentPage.postsByNr[replToPostNr];\n-                replToAuthor = replToPost && store_getAuthorOrMissing(\n-                    state.embMainStoreCopy as Store, replToPost);\n-              }\n-              catch (ex) {\n-                if (!this.loggedStoreCloneWarning) {\n-                  logW(\"Error getting author name from main iframe store clone\", ex);\n-                  debugger;\n-                  this.loggedStoreCloneWarning = true;\n-                }\n-              }\n-            }\n-            else {\n-              replToPost = editorsPage?.postsByNr[replToPostNr];\n-              replToAuthor = replToPost && store_getAuthorOrMissing(store, replToPost);\n-            }\n+\n+            const replToPost: Post | U = editorsPage?.postsByNr[replToPostNr];\n+            const replToAuthor: Pat | U =\n+                    replToPost && store_getAuthorOrMissing(store, replToPost);\n \n             let replyingToWhat;\n             if (replToAuthor) {\n-              replyingToWhat = UserName({ user: replToAuthor, store,\n+              replyingToWhat = UserName({ user: replToAuthor, settings,\n                   makeLink: false, onClick: null, avoidFullName: true });\n             }\n             else {\n@@ -2103,7 +2284,7 @@ export const Editor = createFactory<any, EditorState>({\n                   onMouseEnter: () => ReactActions.highlightPost(replToPostNr, true),\n                   onMouseLeave: () => ReactActions.highlightPost(replToPostNr, false),\n                   onClick: !replToPost ? undefined : () => {\n-                    ReactActions.scrollAndShowPost(replToPost);\n+                    ReactActions.scrollAndShowPost(replToPost, whichFrameScrollOpts);\n                     // Stop auto scrolling the preview into view — since pat\n                     // apparently wants to view the post hen is replying to.\n                     // (If clicking Show Preview, we'll resume auto scrolling into view.)\n@@ -2393,6 +2574,7 @@ export const Editor = createFactory<any, EditorState>({\n });\n \n \n+\n const GuidelinesModal = createClassAndFactory({\n   displayName: 'GuidelinesModal',\n \n@@ -2409,11 +2591,13 @@ const GuidelinesModal = createClassAndFactory({\n });\n \n \n+\n function page_isUsabilityTesting(pageType: PageRole): boolean {  // [plugin]\n   return pageType === PageRole.UsabilityTesting;\n }\n \n \n+\n function wrapSelectedText(textarea: HTMLTextAreaElement, content: St,\n       wrap: St, wrapAfter?: St, newlines?: St) {\n   const startIndex = textarea.selectionStart;\n@@ -2430,7 +2614,8 @@ function wrapSelectedText(textarea: HTMLTextAreaElement, content: St,\n }\n \n \n-function makeDefaultReplyText(store: Store, postIds: PostId[]): string {\n+\n+function makeDefaultReplyText(store: DiscStore, postIds: PostId[]): string {\n   const page: Page = store.currentPage;\n   let result = '';\n   // For UTX replies, include the instructions, in bold-italic lines,  [2JFKD0Y3]\n@@ -2473,13 +2658,13 @@ function makeDefaultReplyText(store: Store, postIds: PostId[]): string {\n // lazily when the 1st reply is posted [4AMJX7]); there's no page id to use in the\n // draft locator. Could use the embedding URL though, or data-discussion-id=\"...\"\n // embedding page html tag attr.\n-function isEmbeddedNotYetCreatedPage(props: { store: Store, messageToUserIds }): boolean {\n+function isEmbeddedNotYetCreatedPage(props: { store: DiscStore, messageToUserIds }): Bo {\n   // If is-no-page, then the page doesn't exist. However, we might be in the user\n   // profile section, composing a reply or a direct message to someone — then we\n   // do save drafts.\n   const result =\n-      !eds.embeddedPageId &&\n-      store_isNoPage(props.store) &&\n+      debiki2.isNoPage(eds.embeddedPageId) &&\n+      debiki2.isNoPage(props.store.currentPageId) &&\n       !props.messageToUserIds.length && // could skip this?\n       eds.isInIframe;\n   // @ifdef DEBUG"
    },
    {
      "sha": "70e34825ab06503ac5ac89aaf4fa50e922de6f49",
      "filename": "client/app-head/head-bundle.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-head/head-bundle.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-head/head-bundle.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-head/head-bundle.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -17,7 +17,6 @@\n \n /// <reference path=\"../types-and-const-enums.ts\" />\n /// <reference path=\"../app-slim/model.ts\" />\n-/// <reference path=\"../app-slim/server-vars.d.ts\" />\n \n  /*\n @(tpi: debiki.SiteTpi, siteId: Int, isInLoginWindow: Boolean, isInLoginPopup: Boolean,\n@@ -269,6 +268,7 @@ eds.isInEmbeddedCommentsIframe = _isInEmbCmtsIframe && !eds.isInEmbeddedEditor;\n   */\n if (!eds.isInEmbeddedEditor) {  // [6932867RMS]\n   // CLEAN_UP use sth like:  getMainWin().theStore.currentPageId  instead?\n+  // — no, remove main-win-current-page-id.  [many_embcom_iframes]\n   eds.embeddedPageId = _isInIframe ? _pageId : undefined;\n }\n // Else: Already incl in eds, leave as is.\n@@ -289,6 +289,8 @@ if (!eds.isInEmbeddedEditor) {  // [6932867RMS]\n var debiki = { internal: {}, v0: { util: {}} };\n \n // Talkyard per page load session data (if we avoid cookies). [NOCOOKIES]   rename to  tyd?  see above *@\n+// Maybe store this in Myself instead? Next to Myself.mySidPart1ForJs? [sess_in_me]\n+// And remove typs.\n var typs: PageSession = {\n   xsrfTokenIfNoCookies: _volatileData.xsrfTokenIfNoCookies,\n   canUseCookies: navigator.cookieEnabled"
    },
    {
      "sha": "15d1357329d8814e95d8a7183009d9be93d86811",
      "filename": "client/app-more/login/login-dialog.more.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-more/login/login-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-more/login/login-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/login/login-dialog.more.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -256,7 +256,7 @@ const LoginDialog = createClassAndFactory({\n     const state: LoginDialogState = this.state;\n     const fade = state.childDialog ? ' dw-modal-fade' : '';\n \n-    /*\n+    /*  Use loginToWhat() instead  [authn_reason_info]\n     let title;\n     switch (state.loginReason) {\n       case LoginReason.AuthnRequiredToRead:\n@@ -801,6 +801,8 @@ const PasswordLoginDialogContent = createClassAndFactory({\n \n /**\n  * Text to append to the login button so it reads e.g. \"Log in to write a comment\".\n+ *\n+ * [authn_reason_info]\n  */\n function loginToWhat(loginReason: LoginReason): St {\n   switch (loginReason) {"
    },
    {
      "sha": "987bb4be581523c95258300e40846646309b64d4",
      "filename": "client/app-more/more-prelude.more.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-more/more-prelude.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-more/more-prelude.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/more-prelude.more.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1,3 +1,3 @@\n-/// <reference path=\"../app-slim/server-vars.ts\" />\n+/// <reference path=\"../app-slim/model.ts\" />\n /// <reference path=\"../app-slim/translations.d.ts\" />\n /// <reference path=\"../app-slim/slim-bundle.d.ts\" />\n\\ No newline at end of file"
    },
    {
      "sha": "4d93d81cd31f974c8cd28e9f07313d50849f0c41",
      "filename": "client/app-more/util/stupid-dialog.more.ts",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-more/util/stupid-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-more/util/stupid-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/util/stupid-dialog.more.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -136,8 +136,18 @@ export const StupidDialog = createComponent({\n             showCloseButton: !preventClose, className,\n             // For now:\n             windowWidth: this.state.winWidth,\n-            atX: this.state.atX - 150,\n-            atY: debiki2.iframeOffsetWinSize.top + 80,\n+            // It's about 250 px wide — place the left border 125 px to the left\n+            // of the middle. (Doesn't need to be exact — the DropdownModal\n+            // fits it in view if needed.)\n+            pullLeft: true,\n+            atX: this.state.atX - 125,\n+            // If the upper edge of the iframe is above the upper edge of the viewport\n+            // (debiki2.iframeOffsetWinSize.top > 0),  (annoying negation! [why_neg_ifr_top])\n+            // then show the dialog a bit down — namely just below the upper edge\n+            // of the viewport. Otherwise (debiki2.iframeOffsetWinSize.top <= 0)\n+            // show the dialog at the top of the iframe (since the top of the iframe\n+            // is either visible in the viewport, or is somewhere further down).\n+            atY: Math.max(0, debiki2.iframeOffsetWinSize.top) + 80,\n           },\n           body));\n     }"
    },
    {
      "sha": "5b933d2cbddb5906bd36ab5cbc086c3d4ab48105",
      "filename": "client/app-slim/ReactActions.ts",
      "status": "modified",
      "additions": 153,
      "deletions": 50,
      "changes": 203,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/ReactActions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/ReactActions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/ReactActions.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -20,7 +20,7 @@\n /// <reference path=\"login/login-if-needed.ts\" />\n \n // REFACTOR SMALLER_BUNDLE [4WG20ABG2] try to remove ReactActions? Move the fns to the store instead,\n-// call directly? This ReactActions obj is just a pointless indirection.\n+// call directly? This ReactActions obj is just a pointless indirection. [flux_mess]\n // Also, remove the EventEmitter. I can write my own in 10 lines. The EventEmitter\n // has 99% things that aren't needed in Talkyard's case. It just makes the slim-bundle larger.\n \n@@ -72,13 +72,17 @@ export const actionTypes = {\n };\n \n \n-export function loadMyself(afterwardsCallback?) {\n+export function loadMyself(afterwardsCallback?: () => Vo) {\n   // (Don't delete temp login cookies here, because this fn gets called if login is\n   // detected in another tab — and perhaps yet another login has been started in that other\n   // tab, and we don't want to break it by deleting cookies. Instead login temp cookies are\n   // deleted by the server.)\n \n   Server.loadMyself((user) => {\n+    // @ifdef DEBUG\n+    // Might happen if there was no weakSessionId, and also, no cookie.\n+    dieIf(!user, 'TyE4032SMH57');\n+    // @endif\n     if (isInSomeEmbCommentsIframe()) {\n       // Tell the embedded comments or embedded editor iframe that we just logged in,\n       // also include the session id, so Talkyard's script on the embedding page\n@@ -95,7 +99,10 @@ export function loadMyself(afterwardsCallback?) {\n               // — could be surprising if we had to click buttons to log out,\n               // when we didn't need to do that, to log in.\n               typs.sessType !== SessionType.AutoTokenSiteCustomSso;\n-      sendToOtherIframe([\n+      if (mainWin !== window) {\n+        mainWin.theStore.me = _.cloneDeep(user);\n+      }\n+      sendToOtherIframes([\n         'justLoggedIn', { user, weakSessionId, pubSiteId: eds.pubSiteId,  // [JLGDIN]\n               sessionType: null, rememberEmbSess }]);\n     }\n@@ -108,6 +115,9 @@ export function loadMyself(afterwardsCallback?) {\n \n \n export function setNewMe(user) {\n+  // @ifdef DEBUG\n+  dieIf(!user, `setNewMe(nothing) TyE60MRJ46RS`);\n+  // @endif\n   ReactDispatcher.handleViewAction({\n     actionType: actionTypes.NewMyself,\n     user: user\n@@ -132,20 +142,23 @@ export function logout() {\n }\n \n \n-export function logoutClientSideOnly(ps: { goTo?: St } = {}) {\n+export function logoutClientSideOnly(ps: { goTo?: St, skipSend?: Bo } = {}) {\n   Server.deleteTempSessId();\n \n   ReactDispatcher.handleViewAction({\n     actionType: actionTypes.Logout\n   });\n \n-  if (eds.isInEmbeddedCommentsIframe) {\n+  if (eds.isInEmbeddedCommentsIframe && !ps.skipSend) {\n     // Tell the editor iframe that we've logged out.\n     // And maybe we'll redirect the embedd*ing* window.  [sso_redir_par_win]\n-    sendToOtherIframe(['logoutClientSideOnly', ps]);\n+    sendToOtherIframes(['logoutClientSideOnly', ps]);\n \n     // Probaby not needed, since reload() below, but anyway:\n     patchTheStore({ setEditorOpen: false });\n+    const sessWin: MainWin = getMainWin();\n+    delete sessWin.typs.weakSessionId;\n+    sessWin.theStore.me = 'TyMLOGDOUT' as any;\n   }\n \n   // Disconnect WebSocket so we won't receive data, for this user, after we've\n@@ -316,24 +329,37 @@ export function showForumIntro(visible: boolean) {\n }\n \n \n-export function editPostWithNr(postNr: PostNr) {\n+export function editPostWithNr(postNr: PostNr, inWhichWin?: MainWin) {\n   login.loginIfNeededReturnToPost(LoginReason.LoginToEdit, postNr, () => {\n     if (eds.isInEmbeddedCommentsIframe) {\n+      // [many_embcom_iframes]\n       sendToEditorIframe(['editorEditPost', postNr]);\n     }\n     else {\n       // Right now, we don't need to use the Store for this.\n-      editor.openToEditPostNr(postNr);\n+      editor.openToEditPostNr(postNr, undefined, inWhichWin);\n     }\n   });\n }\n \n \n-export function handleEditResult(editedPost) {\n+export function handleEditResult(editedPost: Post, sendToWhichFrame?: MainWin) {\n   if (eds.isInEmbeddedEditor) {\n-    sendToCommentsIframe(['handleEditResult', editedPost]);\n+    sendToCommentsIframe(['handleEditResult', editedPost], sendToWhichFrame);\n   }\n   else {\n+    // Forget any pre-edits cached post — we no longer need to restore it\n+    // when the editor closes and we remove any preview, because we've saved the edits.\n+    if (origPostBeforeEdits) {\n+      // @ifdef DEBUG\n+      dieIf(editedPost.nr !== origPostBeforeEdits.nr,\n+            `Preview post, and the now edited and saved post, are different:\n+            nr ${editedPost.nr} and ${origPostBeforeEdits.nr} respectively,\n+            here's the cached post: ${JSON.stringify(origPostBeforeEdits)},\n+            and the edited post: ${JSON.stringify(editedPost)} [TyE3056MR35]`);\n+      // @endif\n+      origPostBeforeEdits = null;\n+    }\n     updatePost(editedPost);\n   }\n }\n@@ -366,7 +392,7 @@ export function deletePost(postNr: number, repliesToo: boolean, success: () => v\n \n \n // try to remove, use patchTheStore() instead\n-export function updatePost(post) {\n+export function updatePost(post: Post) {\n   ReactDispatcher.handleViewAction({\n     actionType: actionTypes.UpdatePost,\n     post: post\n@@ -387,12 +413,14 @@ export function changePostType(post: Post, newType: PostType, onDone: () => void\n }\n \n \n-export function vote(post, doWhat: string, voteType: string) {\n+export function vote(storePatch: StorePatch, doWhat: 'DeleteVote' | 'CreateVote',\n+        voteType: St, postNr: PostNr) {\n   ReactDispatcher.handleViewAction({\n     actionType: actionTypes.VoteOnPost,\n-    post: post,\n-    doWhat: doWhat,\n-    voteType: voteType\n+    storePatch,\n+    doWhat,\n+    voteType,\n+    postNr,\n   });\n }\n \n@@ -484,7 +512,7 @@ export function scrollAndShowPost(postOrNr: Post | PostNr, anyShowPostOpts?: Sho\n \n   if (eds.isInEmbeddedEditor) {\n     const nr = _.isNumber(postOrNr) ? postOrNr : postOrNr.nr;\n-    sendToCommentsIframe(['scrollToPostNr', nr]);\n+    sendToCommentsIframe(['scrollToPostNr', nr], anyShowPostOpts.inFrame);\n     return;\n   }\n \n@@ -510,8 +538,7 @@ export function scrollAndShowPost(postOrNr: Post | PostNr, anyShowPostOpts?: Sho\n   // We don't want the topbar to occlude the whatever we're scrolling to.\n   // COULD do in utils.scrollIntoView() instead?  [306KDRGFG2]\n   marginTop += topbar.getTopbarHeightInclShadow();\n-  if (store.replyingToPostNr === post.nr ||\n-      store.editingPostId === post.uniqueId) {\n+  if (store_isReplyingToOrEditing(store, post)) {\n     // Add more margin so \"Replying to:\" above also will scroll into view. [305KTJ4]\n     marginTop += 75;\n   }\n@@ -864,7 +891,10 @@ export function setHorizontalLayout(enabled: boolean) {\n \n \n export function hideTips(message: { id: St, version?: Nr }) {\n-  Server.toggleTips({ tipsId: message.id, hide: true });\n+  const me: Me = ReactStore.me();\n+  if (me.isAuthenticated) {\n+    Server.toggleTips({ tipsId: message.id, hide: true });\n+  }\n   ReactDispatcher.handleViewAction({\n     actionType: actionTypes.HideHelpMessage,\n     message: message,\n@@ -881,7 +911,10 @@ export function showSingleTipsClientSide(messageId: string) {\n \n \n export function showTipsAgain(ps: { onlyAnnouncements?: Bo } = {}) {\n-  Server.toggleTips({ ...ps, hide: false });\n+  const me: Me = ReactStore.me();\n+  if (me.isAuthenticated) {\n+    Server.toggleTips({ ...ps, hide: false });\n+  }\n   ReactDispatcher.handleViewAction({\n     ...ps,\n     actionType: actionTypes.ShowHelpAgain,\n@@ -961,7 +994,7 @@ let origPostBeforeEdits: Post | undefined;\n let lastFlashPostNr: PostNr | undefined;\n \n \n-export function showEditsPreviewInPage(ps: ShowEditsPreviewParams) {\n+export function showEditsPreviewInPage(ps: ShowEditsPreviewParams, inFrame?: DiscWin) {\n   // @ifdef DEBUG\n   dieIf(ps.replyToNr && ps.editingPostNr, 'TyE73KGTD02');\n   dieIf(ps.replyToNr && !ps.anyPostType, 'TyE502KGSTJ46');\n@@ -970,7 +1003,8 @@ export function showEditsPreviewInPage(ps: ShowEditsPreviewParams) {\n   if (eds.isInEmbeddedEditor) {\n     const editorIframeHeightPx = window.innerHeight;\n      // DO_AFTER 2020-09-01 send 'showEditsPreviewInPage' instead.\n-    sendToCommentsIframe(['showEditsPreview', { ...ps, editorIframeHeightPx }]);\n+    sendToCommentsIframe(\n+            ['showEditsPreview', { ...ps, editorIframeHeightPx }], inFrame);\n     return;\n   }\n \n@@ -1025,19 +1059,22 @@ export function showEditsPreviewInPage(ps: ShowEditsPreviewParams) {\n       origPostBeforeEdits = postToEdit;\n     }\n     patch = page_makeEditsPreviewPatch(page, origPostBeforeEdits, ps.safeHtml);\n+    patch.editingPostId = postToEdit.uniqueId;\n   }\n   else if (ps.replyToNr || isChat) {\n     const postType = ps.anyPostType || PostType.ChatMessage;\n     // Show an inline preview, where the reply will appear.\n     patch = store_makeNewPostPreviewPatch(\n         store, page, ps.replyToNr, ps.safeHtml, postType);\n+    patch.replyingToPostNr = ps.replyToNr;\n   }\n \n   // @ifdef DEBUG\n   dieIf(!patch, 'TyE5WKDAW25');\n   // @endif\n \n   if (patch) {\n+    patch.editorsPageId = ps.editorsPageId;\n     patchTheStore(patch, () => {\n       // The preview won't appear until a bit later, after the preview post\n       // store patch has been applied — currently the wait-a-bit code is\n@@ -1125,14 +1162,20 @@ export function scrollToPreview(ps: {\n }\n \n \n-export function hideEditorAndPreview(ps: HideEditorAndPreviewParams) {\n+export function hideEditor() {\n+  patchTheStore({ setEditorOpen: false });\n+}\n+\n+\n+export function hideEditorAndPreview(ps?: HideEditorAndPreviewParams, inFrame?) {\n   // @ifdef DEBUG\n   dieIf(ps.replyToNr && ps.editingPostNr, 'TyE4KTJW035M');\n   dieIf(ps.replyToNr && !ps.anyPostType, 'TyE72SKJRW46');\n   // @endif\n \n   if (eds.isInEmbeddedEditor) {\n-    sendToCommentsIframe(['hideEditorAndPreview', ps]);\n+    sendToCommentsIframe(['hideEditorAndPreview', ps], inFrame);\n+    sendToParent(['hideEditor']);\n     patchTheStore({ setEditorOpen: false });\n     return;\n   }\n@@ -1147,6 +1190,9 @@ export function hideEditorAndPreview(ps: HideEditorAndPreviewParams) {\n \n   // If' we've navigated to a different page, then, any preview is gone already.\n   const isOtherPage = ps.editorsPageId && ps.editorsPageId !== store.currentPageId;\n+  // editorsPageId  has been updated already, if was typing the first reply\n+  // on a new now lazy-created page [4HKW28] — then, !isOtherPage, so below,\n+  // we'll pick the remove-preview if branch [.rm_prv_if_br].\n \n   // A bit dupl debug checks (49307558).\n   // @ifdef DEBUG\n@@ -1164,18 +1210,24 @@ export function hideEditorAndPreview(ps: HideEditorAndPreviewParams) {\n   }\n   else if (ps.keepPreview) {\n     // This happens if we're editing a chat message in the advanced editor — we can\n-    // continue typing in the cat message text box, and keep the preview.\n+    // continue typing in the chat message text box, and keep the preview.\n   }\n   else if (ps.editingPostNr) {\n-    // Put back the original post, the one before the edits. If saving, then,\n-    // once the serve has replied, we'll insert the new updated post instead.  Or...? [359264FKUGP]\n+    // Put back the post as it was before the edits. If we submitted the edits, then,\n+    // once the serve has replied, we'll insert the new updated post instead.  Or...?\n     if (origPostBeforeEdits) {\n+      // @ifdef DEBUG\n+      dieIf(ps.editingPostNr !== origPostBeforeEdits.nr,\n+            `Preview post to hide, and cached post before edits, are different:\n+           nr ${ps.editingPostNr} and ${origPostBeforeEdits.nr} respectively, here's\n+           the cached post: ${JSON.stringify(origPostBeforeEdits)} [TyE3056MR35]`);\n+      // @endif\n       highlightPostNrAfter = origPostBeforeEdits.nr;\n       patch = page_makePostPatch(page, origPostBeforeEdits);\n       origPostBeforeEdits = null;\n     }\n   }\n-  else if (ps.replyToNr || isChat) {\n+  else if (ps.replyToNr || isChat) {   // [.rm_prv_if_br]\n     const postType = ps.anyPostType || PostType.ChatMessage;\n     patch = ps.anyDraft && ps.keepDraft\n         ? store_makeDraftPostPatch(store, page, ps.anyDraft)\n@@ -1200,10 +1252,13 @@ export function hideEditorAndPreview(ps: HideEditorAndPreviewParams) {\n export function deleteDraftPost(pageId: PageId, draftPost: Post) {\n   const store: Store = ReactStore.allData();\n \n-  // This is a post on an already existing page — no category id needed.\n+  // This is a post on an already existing page, or on a not yet created page\n+  // — in any case no category id needed.\n   const draftLocator: DraftLocator = {\n     draftType: postType_toDraftType(draftPost.postType),\n     pageId: pageId,\n+    discussionId: eds.embeddedPageAltId,\n+    embeddingUrl: eds.embeddingUrl,\n     postNr: draftPost.parentNr,\n     postId: store_getPostId(store, pageId, draftPost.parentNr),\n   };\n@@ -1213,41 +1268,51 @@ export function deleteDraftPost(pageId: PageId, draftPost: Post) {\n     draftNr,\n     forWhat: draftLocator,\n   };\n-  deleteDraftImpl(draftPost, draftDeletor);\n+  deleteDraftImpl(draftPost, draftDeletor, undefined, undefined, window as DiscWin);\n }\n \n \n /// Deletes the draft, and optionally any draft post too.\n ///\n export function deleteDraft(pageId: PageId, draft: Draft, deleteDraftPost: boolean,\n-      onDoneOrBeacon?: OnDoneOrBeacon, onError?: ErrorStatusHandler) {\n+      onDoneOrBeacon?: OnDoneOrBeacon, onError?: ErrorStatusHandler, inFrame?: DiscWin) {\n \n   // What about category id, for new topics?  [DRAFTS_BUG]\n   const draftDeletor: DraftDeletor = {\n     pageId,\n     draftNr: draft.draftNr,\n     forWhat: draft.forWhat,\n   }\n-  let draftPost;\n+  let draftPost: Post | U;\n   if (deleteDraftPost) {\n-    const store: Store = getMainWinStore();\n-    draftPost = store_makePostForDraft(store, draft);  // [60MNW53]\n+    // Maybe pass one's id in a param to this fn deleteDraft() instead?\n+    const store: SessWinStore = win_getSessWinStore();\n+    draftPost = store_makePostForDraft(store.me.id, draft);  // [60MNW53]\n   }\n-  deleteDraftImpl(draftPost, draftDeletor, onDoneOrBeacon, onError);\n+  deleteDraftImpl(draftPost, draftDeletor, onDoneOrBeacon, onError, inFrame);\n }\n \n \n function deleteDraftImpl(draftPost: Post | U, draftDeletor: DraftDeletor,\n-      onDoneOrBeacon?: OnDoneOrBeacon, onError?: ErrorStatusHandler) {\n+      onDoneOrBeacon?: OnDoneOrBeacon, onError?: ErrorStatusHandler, inFrame?: DiscWin) {\n \n   // ----- Delete from browser storage\n \n   // Not so easy to do an exact key lookup — not sure what fields\n   // were included in the storage key, when saving the draft. So look at all\n   // browser storage drafts.\n   BrowserStorage.forEachDraft(draftDeletor.pageId, (draft: Draft, keyStr: string) => {\n+    // If there're many iframes on the same embedding page, we should only\n+    // look at the draft in the correct iframe — i.e. same discussion id. [draft_diid]\n+    const noDiscId = !draft.forWhat.discussionId;\n+    const sameDiscId = draft.forWhat.discussionId === draftDeletor.forWhat.discussionId;\n+    // If there's no discussion id, then any embedding url needs to be the same.\n+    const noOrSameEmbUrl =   // dupl code [find_br_drafts]\n+        !draft.forWhat.embeddingUrl ||\n+            draft.forWhat.embeddingUrl === draftDeletor.forWhat.embeddingUrl;\n     if (draft.forWhat.postNr === draftDeletor.forWhat.postNr &&\n-        draft.forWhat.draftType === draftDeletor.forWhat.draftType) {\n+          draft.forWhat.draftType === draftDeletor.forWhat.draftType &&\n+          (sameDiscId || (noDiscId && noOrSameEmbUrl))) {\n       BrowserStorage.remove(keyStr);\n     }\n   });\n@@ -1271,7 +1336,9 @@ function deleteDraftImpl(draftPost: Post | U, draftDeletor: DraftDeletor,\n   const draftNr: DraftNr | U = draftDeletor.draftNr;\n   if (!draftNr) {\n     // This draft existed locally only, in the browse's storage.\n-    patchTheStoreAllIframes(storePatch, onDone);\n+    patchTheStoreManyFrames(storePatch, onDone,\n+          // Delete it from the correct iframe only. [draft_diid]\n+          inFrame);\n   }\n   else if (_.isNumber(draftNr)) {\n     if (onDoneOrBeacon === UseBeacon) {\n@@ -1280,7 +1347,7 @@ function deleteDraftImpl(draftPost: Post | U, draftDeletor: DraftDeletor,\n     }\n     else {\n       Server.deleteDrafts([draftNr], function() {\n-        patchTheStoreAllIframes(storePatch, onDone);\n+        patchTheStoreManyFrames(storePatch, onDone, inFrame);\n       }, onError);\n     }\n   }\n@@ -1305,10 +1372,11 @@ export function composeReplyTo(parentNr: PostNr, replyPostType: PostType) {\n \n \n export function saveReply(editorsPageId: PageId, postNrs: PostNr[], text: string,\n-      anyPostType: number, draftToDelete: Draft | undefined, onDone?: () => void) {\n+      anyPostType: Nr, draftToDelete: Draft | U, onOk?: () => Vo,\n+      sendToWhichFrame?: MainWin) {\n   Server.saveReply(editorsPageId, postNrs, text, anyPostType, draftToDelete?.draftNr,\n       (storePatch) => {\n-    handleReplyResult(storePatch, draftToDelete, onDone);\n+    handleReplyResult(storePatch, draftToDelete, onOk, sendToWhichFrame);\n   });\n }\n \n@@ -1322,15 +1390,16 @@ export function insertChatMessage(text: string, draftToDelete: Draft | undefined\n \n \n export function handleReplyResult(patch: StorePatch, draftToDelete: Draft | undefined,\n-      onDone?: () => void) {\n+      onDone?: () => void, sendToWhichFrame?: MainWin) {\n   if (eds.isInEmbeddedEditor) {\n     if (patch.newlyCreatedPageId) {\n       // Update this, so subsequent server requests, will use the correct page id. [4HKW28]\n+      // (Also done in patchTheStore().)\n       eds.embeddedPageId = patch.newlyCreatedPageId;\n     }\n     // Send a message to the embedding page, which will forward it to\n     // the comments iframe, which will show the new comment.\n-    sendToCommentsIframe(['handleReplyResult', [patch, draftToDelete]]);\n+    sendToCommentsIframe(['handleReplyResult', [patch, draftToDelete]], sendToWhichFrame);\n     onDone?.();\n     return;\n   }\n@@ -1339,9 +1408,16 @@ export function handleReplyResult(patch: StorePatch, draftToDelete: Draft | unde\n }\n \n \n-function patchTheStoreAllIframes(storePatch: StorePatch, onDone?: () => void) {\n-  patchTheStore(storePatch, onDone);\n-  sendToOtherIframe(['patchTheStore', storePatch]);\n+function patchTheStoreManyFrames(storePatch: StorePatch, onOk: () => Vo,\n+          inFrame: DiscWin) {\n+  patchTheStore(storePatch, onOk);\n+  if (inFrame === window || !eds.isInIframe) {\n+    // No other frame store to patch. (This happens e.g. if clicking Delete Draft\n+    // in a comments iframe — then only that one needs to get patched.)\n+  }\n+  else {\n+    sendToCommentsIframe(['patchTheStore', storePatch], inFrame);\n+  }\n }\n \n \n@@ -1521,24 +1597,51 @@ export function openPagePostNr(pageId: string, postNr: number) { // CLEAN_UP use\n \n \n function sendToEditorIframe(message) {\n+  sendToIframesImpl(message, true);\n+}\n+\n+\n+function sendToCommentsIframe(message, toWhichFrame?: DiscWin) {\n+  sendToIframesImpl(message, false, toWhichFrame);\n+}\n+\n+\n+function sendToParent(message) {\n+  sendToIframesImpl(message, false, parent);\n+}\n+\n+\n+function sendToIframesImpl(message, toEditor?: Bo, toWhichFrame?: Window) {\n   // Send the message to any embedding page; it'll forward it to the appropriate iframe.\n   // But only if we're in an iframe — otherwise, in Safari, there's an error. Not in\n   // Chrome or FF; they do nothing instead.\n+  // @ifdef DEBUG\n+  if (!eds.isInIframe) {\n+    die(`Sending to iframe when not in iframe? toEditor: ${toEditor\n+          }, toWhichIframe.name: ${toWhichFrame?.name} [TyE40GWG2R]`);\n+  }\n+  // @endif\n   if (eds.isInIframe) {\n     try {\n-      window.parent.postMessage(JSON.stringify(message), eds.embeddingOrigin);\n+      const sendDirectly = toWhichFrame || toEditor; //  &&  feature flag\n+      const win = sendDirectly ? toWhichFrame || win_getEditorWin() : window.parent;\n+      // Which origin? 1) The parent win is the embedding page, e.g. a blog post page,\n+      // with origin eds.embeddingOrigin. 2) If not posting to the parent win,\n+      // we're posting to another Talkyard iframe on the same server (same origin).\n+      const targetOrigin = !sendDirectly || toWhichFrame === parent ?\n+              eds.embeddingOrigin : location.origin;\n+      win.postMessage(JSON.stringify(message), targetOrigin);  // [post_dir_2_ifr]\n     }\n     catch (ex) {\n       // Don't propagate this. Probably better to let the current frame continue\n       // as best it can with whatever it's doing.\n-      console.error(`Error posting to parent frame [TyEPSTPRNT]`, ex);\n+      logW(`Error posting to other frame [TyEPSTPRNT]`, ex);\n     }\n   }\n }\n \n // An alias, for better readability.\n-const sendToCommentsIframe = sendToEditorIframe;\n-const sendToOtherIframe = sendToEditorIframe;\n+const sendToOtherIframes = sendToIframesImpl;\n \n \n //------------------------------------------------------------------------------"
    },
    {
      "sha": "9680a14233be1cf2c1c6d2a256cdde70028e03d3",
      "filename": "client/app-slim/ReactStore.ts",
      "status": "modified",
      "additions": 119,
      "deletions": 13,
      "changes": 132,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/ReactStore.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/ReactStore.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/ReactStore.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -25,6 +25,10 @@\n // CLEAN_UP try to remove this dependency from here.\n /// <reference path=\"utils/scroll-into-view.ts\" />\n \n+\n+// Old comment! Do *not* start using Redux or any such, in Ty's case, over complicated\n+// things. Instead, remove the Flux pattern and call Store fns directly, [flux_mess].\n+//\n /* This Flux store is perhaps a bit weird, not sure. I'll switch to Redux or\n  * Flummox or Fluxxor or whatever later, and rewrite everything in a better way?\n  * Also perhaps there should be more than one store, so events won't be broadcasted\n@@ -41,9 +45,9 @@ const htmlElem = document.getElementsByTagName('html')[0];\n declare const EventEmitter3; // don't know why, but the TypeScript defs doesn't work.\n export const ReactStore = new EventEmitter3();\n \n-export function getMainWinStore(): Store {  // RENAME QUICK to win_getMainWinStore()\n+export function win_getSessWinStore(): SessWinStore {\n   const mainWin = getMainWin();\n-  return mainWin.debiki2.ReactStore.allData();\n+  return mainWin.theStore;\n }\n \n type StoreStateSetter = (store: Store) => void;\n@@ -504,9 +508,64 @@ let volatileDataActivated = false;\n ReactStore.activateVolatileData = function() {\n   dieIf(volatileDataActivated, 'EsE4PFY03');\n   volatileDataActivated = true;\n-  const data: VolatileDataFromServer = eds.volatileDataFromServer;\n-  theStore_setOnlineUsers(data.numStrangersOnline, data.usersOnline);\n-  ReactStore.activateMyself(data.me);\n+  const volData: VolatileDataFromServer = eds.volatileDataFromServer;\n+\n+  // Update this win's/frame's user\n+  // ------------------------------\n+  // Copy any session frame user to this frame's user:  [mny_ifr_pat_dta]\n+  // If we're in a comments iframe, and we're logged in — there's a session\n+  // and a user in the session-iframe.html — then, use that session and user.\n+  // This makes it possible to dynamically add new blog comments iframes,\n+  // and they'll be already-logged-in — works also if session cookies blocked.\n+  let sessFrameStore: SessWinStore;\n+  if (eds.isInIframe) {\n+    try {\n+      const sessFrame = getMainWin();\n+      sessFrameStore = sessFrame.theStore;\n+      if (_.isObject(sessFrameStore.me)) {\n+        if (!volData.me || volData.me.isStranger) {\n+          volData.me = _.cloneDeep(sessFrameStore.me);  // [emb_ifr_shortcuts]\n+        }\n+        else {\n+          // @ifdef DEBUG\n+          if (volData.me.id !== sessFrameStore.me.id) {\n+            logW(`sessStore.me and volData.me race? Ids: ${sessFrameStore.me.id\n+                } and ${volData.me.id}  [TyM0J2MW67]`);\n+            debugger;\n+          }\n+          // @endif\n+          volData.me = me_merge(sessFrameStore.me, volData.me);  // [emb_ifr_shortcuts]\n+          sessFrameStore.me = _.cloneDeep(volData.me);\n+        }\n+      }\n+    }\n+    catch (ex) {\n+      logW(`Multi iframe error? [TyEMANYIFR02]`, ex)\n+    }\n+  }\n+\n+  // Do the interesting thing\n+  // ------------------------------\n+\n+  theStore_setOnlineUsers(volData.numStrangersOnline, volData.usersOnline);\n+  ReactStore.activateMyself(volData.me);\n+\n+  // Update any session frame's user\n+  // ------------------------------\n+  // Copy this frame's user to the session frame, if missing there:  [mny_ifr_pat_dta]\n+  // This is safe and cannot fail, still, try-catch for now, new code.\n+  // DO_AFTER 2022-01-01 remove try-catch, keep just the contents.\n+  if (sessFrameStore) {\n+    try {\n+      if (!_.isObject(sessFrameStore.me) && store.me) {  // [emb_ifr_shortcuts]\n+        sessFrameStore.me = _.cloneDeep(store.me);\n+      }\n+    }\n+    catch (ex) {\n+      logW(`Multi iframe error? [TyEMANYIFR03]`, ex)\n+    }\n+  }\n+\n   store.quickUpdate = false;\n   this.emitChange();\n };\n@@ -671,6 +730,11 @@ ReactStore.allData = function(): Store {\n };\n \n \n+ReactStore.me = function(): Me {\n+  return store.me;\n+};\n+\n+\n // Shows one's drafts: Create a preview post, for each new post draft (but not\n // for edit drafts — then, we instead show a text \"Unfinished edits\" next to the\n // edit button. [UFINEDT])\n@@ -680,11 +744,13 @@ ReactStore.allData = function(): Store {\n // message text input box. [CHATPRVW]\n //\n function addMyDraftPosts(store: Store, myPageData: MyPageData) {\n+  // Some drafts are saved server side, others just in the browser — the latter ones\n+  // get loaded here: addLocalStorageDataTo().\n   if (!eds.isInEmbeddedEditor && !page_isChat(store.currentPage?.pageRole)) {\n     _.each(myPageData.myDrafts, (draft: Draft) => {\n       const draftType = draft.forWhat.draftType;\n       if (draftType === DraftType.Reply || draftType === DraftType.ProgressPost) {\n-        const post: Post | null = store_makePostForDraft(store, draft);\n+        const post: Post | null = store_makePostForDraft(store.me.id, draft);\n         if (post) {\n           updatePost(post, store.currentPageId);\n         }\n@@ -905,14 +971,14 @@ function updatePost(post: Post, pageId: PageId, isCollapsing?: boolean) {\n \n \n function voteOnPost(action) {\n-  const post: Post = action.post;\n+  const postNr: PostNr = action.postNr;\n \n   const me: Myself = store.me;\n   const myPageData: MyPageData = me.myCurrentPageData;\n-  let votes = myPageData.votes[post.nr];\n+  let votes = myPageData.votes[postNr];\n   if (!votes) {\n     votes = [];\n-    myPageData.votes[post.nr] = votes;\n+    myPageData.votes[postNr] = votes;\n   }\n \n   if (action.doWhat === 'CreateVote') {\n@@ -922,7 +988,7 @@ function voteOnPost(action) {\n     _.remove(votes, (voteType) => voteType === action.voteType);\n   }\n \n-  updatePost(post, store.currentPageId);\n+  patchTheStore(action.storePatch);\n }\n \n \n@@ -1401,7 +1467,7 @@ function updateNotificationCounts(notf: Notification, add: boolean) {\n }\n \n \n-function patchTheStore(storePatch: StorePatch) {\n+function patchTheStore(storePatch: StorePatch) {  // REFACTOR just call directly, instead of via [flux_mess].\n   if (isDefined2(storePatch.setEditorOpen) && storePatch.setEditorOpen !== store.isEditorOpen) {\n     store.isEditorOpen = storePatch.setEditorOpen;\n     store.editorsPageId = storePatch.setEditorOpen && storePatch.editorsPageId;\n@@ -1426,7 +1492,25 @@ function patchTheStore(storePatch: StorePatch) {\n \n   if (storePatch.me) {\n     // [redux] modifying the store in place, again.\n-    store.me = <Myself> _.assign(store.me || {}, storePatch.me);\n+    let patchedMe: Myself | U;\n+    if (eds.isInIframe) {\n+      // Don't forget [data about pat] loaded by other frames.  [mny_ifr_pat_dta]\n+      try {\n+        const sessWin = getMainWin();\n+        const sessStore: SessWinStore = sessWin.theStore;\n+        if (_.isObject(sessStore.me)) {\n+          patchedMe = me_merge(sessStore.me, store.me, storePatch.me);  // [emb_ifr_shortcuts]\n+          sessStore.me = _.cloneDeep(patchedMe);\n+        }\n+      }\n+      catch (ex) {\n+        logW(`Multi iframe error? [TyEMANYIFR04]`, ex)\n+      }\n+    }\n+    if (!patchedMe) {\n+      patchedMe = _.assign(store.me || {} as Myself, storePatch.me);\n+    }\n+    store.me = patchedMe;\n   }\n \n   if (storePatch.deleteDraft) {\n@@ -1516,6 +1600,8 @@ function patchTheStore(storePatch: StorePatch) {\n     const origPost = currentPage.postsByNr[BodyNr];\n     origPost.uniqueId = storePatch.newlyCreatedOrigPostId;\n \n+    // Update this, so subsequent server requests, will use the correct page id. [4HKW28]\n+    eds.embeddedPageId = storePatch.newlyCreatedPageId;\n     // Later: Add this new page to the watchbar? Currently not needed, because pages created\n     // lazily only for embedded comments, and then there's no watchbar.\n   }\n@@ -1539,6 +1625,8 @@ function patchTheStore(storePatch: StorePatch) {\n     _.each(store.pagesById, (oldPage: Page) => {\n       _.each(patchedPosts, (patchedPost: Post) => {\n         _.each(oldPage.postsByNr, (oldPost: Post) => {\n+          // Oops, drafts and previews have ids like = -1000101, -1000102\n+          // — but they are the *newest*, so, \"old\" in oldPost is then misleading.\n           if (oldPost.uniqueId === patchedPost.uniqueId) {\n             const movedToNewPage = oldPage.pageId !== patchedPageId;\n             const movedOnThisPage = !movedToNewPage && oldPost.parentNr !== patchedPost.parentNr;\n@@ -1830,6 +1918,7 @@ function watchbar_copyUnreadStatusFromTo(old: Watchbar, newWatchbar: Watchbar) {\n function makeStranger(store: Store): Myself {\n   const stranger = {\n     dbgSrc: '5BRCW27',\n+    isStranger: true,\n     trustLevel: TrustLevel.Stranger,\n     threatLevel: ThreatLevel.HopefullySafe,\n     permsOnPages: [],\n@@ -1891,11 +1980,28 @@ function addLocalStorageDataTo(me: Myself) {\n   //\n   // Any drafts in the browser's storage?\n   if (!eds.isInEmbeddedEditor) {\n+    // BUG minor: COULD also load embedded comments drafts whose pageId is NoPageId,\n+    // if their url or discussion id match. They might have been saved in the browser,\n+    // before an embedded discussion page had been created.\n+\n+    //   [find_br_drafts] Should do like this in the editor too?\n     BrowserStorage.forEachDraft(store.currentPageId, (draft: Draft) => {\n       // BUG, harmless: Skip drafts that got loaded from the server already,\n       // so browser storage drafts won't overwrite them (until the editor gets opened\n       // and the real draft text gets loaded from the server).\n-      me.myCurrentPageData.myDrafts.push(draft);\n+      const draftDiscId = draft.forWhat.discussionId;\n+      const embUrl = draft.forWhat.embeddingUrl;\n+      if (draftDiscId && draftDiscId !== eds.embeddedPageAltId) {\n+        // This is for an embedded discussion, not the same as the discussion\n+        // we're in now. [draft_diid]\n+      }\n+      else if (embUrl && embUrl !== eds.embeddingUrl) { // dupl code  [find_br_drafts]\n+        // Also the wrong embedded discussion — at least the editor won't load it,\n+        // so better not show it here, currently. [emb_draft_url]\n+      }\n+      else {\n+        me.myCurrentPageData.myDrafts.push(draft);\n+      }\n     });\n   }\n "
    },
    {
      "sha": "e1a992175e0017b159726fb3156efc831ae4c567",
      "filename": "client/app-slim/Server.ts",
      "status": "modified",
      "additions": 60,
      "deletions": 23,
      "changes": 83,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/Server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/Server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/Server.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2014-2017 Kaj Magnus Lindberg\n+ * Copyright (c) 2014-2021 Kaj Magnus Lindberg\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU Affero General Public License as\n@@ -37,9 +37,11 @@ const XsrfTokenHeaderName = 'X-XSRF-TOKEN'; // CLEAN_UP rename to X-Ty-Xsrf-Toke\n const SessionIdHeaderName = 'X-Ty-Sid';\n const AvoidCookiesHeaderName = 'X-Ty-Avoid-Cookies';\n \n-function getPageId(): PageId {\n-  return eds.embeddedPageId || // [4HKW28]\n-      ReactStore.allData().currentPageId;\n+export function getPageId(): PageId | U {   // move elsewhere?\n+  return !isNoPage(eds.embeddedPageId) ? eds.embeddedPageId : // [4HKW28]\n+      ReactStore.allData().currentPageId || (\n+        // old,  CLEAN_UP  REMOVE\n+        eds.embeddedPageId || ReactStore.allData().currentPageId);\n }\n \n interface OngoingRequest {\n@@ -710,7 +712,7 @@ export function addAnyNoCookieHeaders(headers: { [headerName: string]: St }) {\n   logD(`This is the main window: ${window === mainWin}`);\n   try {\n     logD(\"Window.opener.typs: \" +\n-        (window.opener && JSON.stringify(window.opener.typs)));\n+        (window.opener && JSON.stringify((window.opener as DiscWin).typs)));\n   }\n   catch (ignored) {\n     logD(\"Window.opener.typs: Threw exception. Opened from cross-origin window?\");\n@@ -720,13 +722,13 @@ export function addAnyNoCookieHeaders(headers: { [headerName: string]: St }) {\n   // @endif\n \n   const typs: PageSession = mainWin.typs;\n-  const currentPageXsrfToken = typs.xsrfTokenIfNoCookies;\n-  const currentPageSid = typs.weakSessionId;\n+  const currentPageXsrfToken: St | U = typs.xsrfTokenIfNoCookies;\n+  const currentPageSid: St | U = typs.weakSessionId;\n \n   if (!win_canUseCookies(mainWin)) {\n     headers[AvoidCookiesHeaderName] = 'Avoid';\n     // Not sure if can have been set to xsrf cookie value already? So skip if set.\n-    if (!headers[XsrfTokenHeaderName]) {\n+    if (!headers[XsrfTokenHeaderName] && currentPageXsrfToken) {\n       headers[XsrfTokenHeaderName] = currentPageXsrfToken;\n     }\n   }\n@@ -1369,16 +1371,19 @@ export function savePageNotfPrefUpdStoreIfSelf(memberId: UserId, target: PageNot\n   // also include any alt page id, and the embedding url. [4AMJX7]\n   if (notfPref.pageId === EmptyPageId) {\n     // COULD instead:\n-    // const serverVars = getMainWin().eds;\n+    // const serverVars = getMainWin().eds;   NO remove  MainWin.eds\n     postData.discussionId = eds.embeddedPageAltId || undefined;  // undef not ''\n     postData.embeddingUrl = eds.embeddingUrl || undefined;\n     postData.lazyCreatePageInCatId = eds.lazyCreatePageInCatId;\n   }\n \n-  postJsonSuccess('/-/save-content-notf-pref', (response) => {\n+  postJsonSuccess('/-/save-content-notf-pref', (response: { newlyCreatedPageId }) => {\n+    let storePatch: StorePatch = {};\n+\n     if (response.newlyCreatedPageId) {\n       // Update this, so subsequent server requests, will use the correct page id. [4HKW28]\n       eds.embeddedPageId = response.newlyCreatedPageId;\n+      storePatch.newlyCreatedPageId = response.newlyCreatedPageId;\n     }\n \n     // If one saved one's own prefs (rather than if one is staff, and changed someone\n@@ -1390,20 +1395,25 @@ export function savePageNotfPrefUpdStoreIfSelf(memberId: UserId, target: PageNot\n       if (!pageData && response.newlyCreatedPageId) {\n         // Add page data for the new page, so it's there if we need to e.g. render a\n         // notf pref button title (then, need to know our page notf level) [TyT305MHRTDP23].\n-        // The id will remain EmptyPageId = '0', not newlyCreatedPageId, until page reload.\n         pageData = makeNoPageData();\n+        pageData.pageId = response.newlyCreatedPageId;\n       }\n \n       let newMe: Myself;\n       if (pageData) {\n-        newMe = me_copyWithNewPageData(me, { ...pageData, myPageNotfPref: notfPref })\n+        newMe = me_copyWithNewPageData(me, { ...pageData, myPageNotfPref: notfPref });\n       }\n       else {\n         const updPrefs = pageNotfPrefs_copyWithUpdatedPref(me.myCatsTagsSiteNotfPrefs, notfPref);\n         newMe = { ...me, myCatsTagsSiteNotfPrefs: updPrefs };\n       }\n-      ReactActions.patchTheStore({ me: newMe });\n+      storePatch.me = newMe;\n+    }\n+\n+    if (!_.isEmpty(storePatch)) {\n+      ReactActions.patchTheStore(storePatch);\n     }\n+\n     if (onDone) {\n       onDone();\n     }\n@@ -1424,10 +1434,29 @@ export function loadMyself(callback: (user: any) => void) {\n     debugger;\n   }\n   // @endif\n+\n+  // Need to load data for the discussions in all iframes, not only the iframe\n+  // we're in now. But not implemented server side.  [many_ifr_my_page_data]\n+  // Therefore, BUG: If many comments iframes, will *look* as if changing notf\n+  // level, has no effect. But in fact it works.\n+  let pageIds = getPageId();\n+  if (eds.isInEmbeddedCommentsIframe) {\n+    try {\n+      const mainWin = getMainWin();\n+      if (mainWin.tydyn) {\n+        pageIds = mainWin.tydyn.allIframePageIds.join(',');\n+        // (Could ifdef-debug check that cur page id is included)\n+      }\n+    }\n+    catch (ex) {\n+      logW(`Error getting loadMyself() page id(s)`, ex);\n+    }\n+  }\n   // SHOULD incl sort order & topic filter in the url params. [2KBLJ80]\n-  get(`/-/load-my-page-data?pageId=${getPageId()}`, callback);\n+  get(`/-/load-my-page-data?pageIds=${pageIds}`, callback);\n }\n \n+\n export function listDrafts(userId: UserId,\n       onOk: (response: ListDraftsResponse) => void, onError: () => void) {\n   get(`/-/list-drafts?userId=${userId}`, onOk, onError);\n@@ -1624,6 +1653,10 @@ export function loadDraftAndGuidelines(draftLocator: DraftLocator, writingWhat:\n   const toUserIdParam = loc.toUserId ? '&toUserId=' + loc.toUserId : '';\n   const categoryParam = categoryId ? '&categoryId=' + categoryId : '';\n \n+  // We don't include any embedding url or discussion id — saving drafts\n+  // for pages that don't yet exist (lazy created embedded discussions)\n+  // hasn't been implemented.  [BLGCMNT1]\n+\n   const url = `/-/load-draft-and-guidelines?writingWhat=${writingWhat}&pageRole=${pageRole}` +\n     draftTypeParam + pageIdParam + postNrParam + postIdParam + toUserIdParam + categoryParam;\n \n@@ -1633,6 +1666,9 @@ export function loadDraftAndGuidelines(draftLocator: DraftLocator, writingWhat:\n }\n \n \n+// CLEAN_UP pass page id (instead of using getPageId() below), so simpler to understand\n+// if in emb emb editor and there're many discussions in different Ty iframes,\n+// different Ty page ids. [manyiframes_pageid]\n export function loadDraftAndText(postNr: PostNr,\n       onDone: (response: LoadDraftAndTextResponse) => void) {\n   get(`/-/load-draft-and-text?pageId=${getPageId()}&postNr=${postNr}`, onDone, undefined, {\n@@ -1702,7 +1738,7 @@ export function saveVote(data: {\n     vote: string,\n     action: 'DeleteVote' | 'CreateVote',\n     postNrsRead: PostNr[]\n-}, onDone: (updatedPost) => void) {\n+}, onDone: (storePatch: StorePatch) => Vo) {\n   // Specify altPageId and embeddingUrl, so any embedded page can be created lazily. [4AMJX7]\n   // @ifdef DEBUG\n   dieIf(data.pageId && data.pageId !== EmptyPageId && data.pageId !== getPageId(), 'TyE2ABKSY7');\n@@ -1714,12 +1750,12 @@ export function saveVote(data: {\n     embeddingUrl: eds.embeddingUrl || undefined,\n     lazyCreatePageInCatId: eds.lazyCreatePageInCatId,\n   }\n-  postJsonSuccess('/-/vote', (response) => {\n-    if (response.newlyCreatedPageId) {\n+  postJsonSuccess('/-/vote', (storePatch: StorePatch) => {\n+    if (storePatch.newlyCreatedPageId) {\n       // Update this, so subsequent server requests, will use the correct page id. [4HKW28]\n-      eds.embeddedPageId = response.newlyCreatedPageId;\n+      eds.embeddedPageId = storePatch.newlyCreatedPageId;\n     }\n-    onDone(response.updatedPost);\n+    onDone(storePatch);\n   }, dataWithEmbeddingUrl);\n }\n \n@@ -1732,8 +1768,8 @@ export function loadVoters(postId: PostId, voteType: PostVoteType,\n }\n \n \n-export function saveEdits(editorsPageId: PageId, postNr: number, text: string,\n-      deleteDraftNr: DraftNr, doneCallback: () => void) {\n+export function saveEdits(editorsPageId: PageId, postNr: PostNr, text: St,\n+      deleteDraftNr: DraftNr, onOK: () => Vo, sendToWhichFrame?: MainWin) {\n   postJson('/-/edit', {\n     data: {\n       pageId: editorsPageId ||\n@@ -1746,9 +1782,9 @@ export function saveEdits(editorsPageId: PageId, postNr: number, text: string,\n     success: (editedPost) => {\n       // This hides the editor and places back the orig post [6027TKWAPJ5]\n       // — there'll be a short flash-of-original-version:\n-      doneCallback();\n+      onOK();\n       // ... until here we upsert the edited version instead:\n-      ReactActions.handleEditResult(editedPost);\n+      ReactActions.handleEditResult(editedPost, sendToWhichFrame);\n     }\n   });\n }\n@@ -1811,6 +1847,7 @@ export function saveReply(editorsPageId: PageId, postNrs: PostNr[], text: string\n           // Old (as of Jan 2020), keep for a while?:\n           getPageId() || undefined,\n       // Incl altPageId and embeddingUrl, so any embedded page can be created lazily. [4AMJX7]\n+      // Changed, in emb editor, if many comments iframes  [many_embcom_iframes]\n       discussionId: eds.embeddedPageAltId || undefined,  // undef not ''\n       embeddingUrl: eds.embeddingUrl || undefined,\n       lazyCreatePageInCatId: eds.lazyCreatePageInCatId,"
    },
    {
      "sha": "bda5727e5079a392d0ee9334f3cc08aa473eff37",
      "filename": "client/app-slim/editor-bundle-not-yet-loaded.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/editor-bundle-not-yet-loaded.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/editor-bundle-not-yet-loaded.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/editor-bundle-not-yet-loaded.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -31,16 +31,17 @@ function ensureEditorCreated(success: (editor: any) => void) {\n \n \n export function toggleWriteReplyToPostNr(postNr: PostNr, inclInReply: boolean,\n-      anyPostType?: PostType) {\n+      anyPostType?: PostType, inWhichFrame?: MainWin) {\n   ensureEditorCreated(editor => {\n-    editor.toggleWriteReplyToPostNr(postNr, inclInReply, anyPostType);\n+    editor.toggleWriteReplyToPostNr(postNr, inclInReply, anyPostType, inWhichFrame);\n   });\n }\n \n \n-export function openToEditPostNr(postNr: PostNr, onDone?: EditsDoneHandler) {\n+export function openToEditPostNr(postNr: PostNr, onDone?: EditsDoneHandler,\n+        inWhichFrame?: MainWin) {\n   ensureEditorCreated(editor => {\n-    editor.editPost(postNr, onDone);\n+    editor.editPost(postNr, onDone, inWhichFrame);\n   });\n }\n "
    },
    {
      "sha": "d53f30e0a5f268cd6aa809c90edd14c8c5d4ac68",
      "filename": "client/app-slim/help/help.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/help/help.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/help/help.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/help/help.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -47,7 +47,7 @@ export function isHelpMessageClosed(store: Store, message: HelpMessage) {\n }\n \n \n-export const HelpMessageBox = createComponent({   // props: HelpMessage. RENAME to TipsBox\n+export const HelpMessageBox = createComponent({   // RENAME to TipsBox\n   mixins: [StoreListenerMixin],\n \n   getInitialState: function() {\n@@ -65,7 +65,8 @@ export const HelpMessageBox = createComponent({   // props: HelpMessage. RENAME\n   },\n \n   computeState: function() {\n-    const message: HelpMessage = this.props.message;\n+    const props: TipsBoxProps = this.props;\n+    const message: HelpMessage = props.message;\n     const store: Store = ReactStore.allData();\n     const me: Myself = store.me;\n     if (!store.userSpecificDataAdded) {\n@@ -85,7 +86,8 @@ export const HelpMessageBox = createComponent({   // props: HelpMessage. RENAME\n   },\n \n   hideThisHelp: function() {\n-    ReactActions.hideTips(this.props.message);\n+    const props: TipsBoxProps = this.props;\n+    ReactActions.hideTips(props.message);\n \n     const store: Store = ReactStore.allData();\n     const me: Myself = store.me;\n@@ -96,7 +98,7 @@ export const HelpMessageBox = createComponent({   // props: HelpMessage. RENAME\n     // Wait a short while with opening this, so one first sees the effect of clicking Close.\n     // Also, wait until one has clicked 3? Close buttons — to me, it otherwise feels annoying\n     // that this tips pops up directly, and I have to close it too.\n-    if (this.props.showUnhideTips !== false && numClosed >= minNumClosedToShowUnhideTips) {\n+    if (props.showUnhideTips !== false && numClosed >= minNumClosedToShowUnhideTips) {\n       setTimeout(() => morebundle.openHelpDialogUnlessHidden({\n         content: r.span({}, t.help.YouCanShowAgain_1, r.b({}, t.help.YouCanShowAgain_2), '.'),\n         id: '5YK7EW3',\n@@ -105,8 +107,9 @@ export const HelpMessageBox = createComponent({   // props: HelpMessage. RENAME\n   },\n \n   render: function() {\n-    const message: HelpMessage = this.props.message;\n-    const alwaysShow = (this.props.alwaysShow || message.alwaysShow || !message.id)\n+    const props: TipsBoxProps = this.props;\n+    const message: HelpMessage = props.message;\n+    const alwaysShow = (props.alwaysShow || message.alwaysShow || !message.id)\n     if (this.state.hidden && !alwaysShow)\n       return null;\n \n@@ -119,8 +122,8 @@ export const HelpMessageBox = createComponent({   // props: HelpMessage. RENAME\n         : r.a({ className: okayIcon + ' dw-hide', onClick: this.hideThisHelp },\n             message.okayText || t.Hide);\n \n-    const className = this.props.className || message.className || '';\n-    const largeClass = this.props.large ? ' dwHelp-large' : '';\n+    const className = props.className || message.className || '';\n+    const largeClass = props.large ? ' dwHelp-large' : '';\n     const warningClass = message.isWarning ? ' esHelp-warning' : '';\n     const classes = className + ' dw-help' + largeClass + warningClass;\n     return ("
    },
    {
      "sha": "b7e122c66a2455dc966c89e50144272ebcb14221",
      "filename": "client/app-slim/help/serverAnnouncements.ts",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/help/serverAnnouncements.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/help/serverAnnouncements.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/help/serverAnnouncements.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -42,6 +42,21 @@ export function getServerAnnouncements(store: Store): RElm | Nl {\n   const me: Myself = store.me;\n   if (!me.isAdmin) return null;\n \n+  let newTyVersionAnn: RElm =\n+      help.HelpMessageBox({ message: {\n+          // SAn = Server Announcement, TyV = Talkyard new Version announcement nr 1.\n+          id: 'SAn_TyV1', version: 1,\n+          content: rFr({},\n+            r.p({},\n+              r.b({}, `New Talkyard version: ${TalkyardVersion}, `),\n+              \"read more here: \",\n+              ExtVerbLink(\n+                  'https://www.talkyard.io/-589/talkyard-v0202122')),\n+            ThisShownToAdminsOnly()),\n+      } });\n+\n+  let prevTyVersionAnn: RElm | U;\n+\n   // Announcement about HTTPS certificates renewal problem.\n   // Only for admins for self hosted sites, created after revision 895b7aa6e2\n   // \"Code review: Auto https ...\", Mars 20, 2021, in talkyard-prod-one.\n@@ -65,6 +80,8 @@ export function getServerAnnouncements(store: Store): RElm | Nl {\n   let e2eTestAnn: RElm | Nl = null;\n   // @ifdef DEBUG\n   if (document.querySelector('h1.dw-p-ttl')?.textContent === \"Hide_Unhide_Tips_\") {\n+    newTyVersionAnn = null;\n+    prevTyVersionAnn = null;\n     certBugAnn = null;\n     e2eTestAnn =\n           help.HelpMessageBox({ message: {\n@@ -80,6 +97,8 @@ export function getServerAnnouncements(store: Store): RElm | Nl {\n     r.div({ className: 'c_SrvAnns' },\n       e2eTestAnn,\n       certBugAnn,\n+      newTyVersionAnn,\n+      prevTyVersionAnn,\n     ));\n }\n "
    },
    {
      "sha": "b1812afe70c0aa71ae7c9c2397d185e6a5955b89",
      "filename": "client/app-slim/if-in-iframe.ts",
      "status": "modified",
      "additions": 80,
      "deletions": 14,
      "changes": 94,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/if-in-iframe.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/if-in-iframe.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/if-in-iframe.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -25,6 +25,13 @@\n export function startIframeMessages() {\n   addEventListener('message', onMessage, false);\n \n+  if (!isNoPage(eds.embeddedPageId)) {\n+    const sessWin = getMainWin();\n+    if (sessWin.tydyn) {\n+      sessWin.tydyn.allIframePageIds.push(eds.embeddedPageId);\n+    }\n+  }\n+\n   window.parent.postMessage(\n       JSON.stringify(['iframeInited', {}]),\n       eds.embeddingOrigin);\n@@ -35,7 +42,8 @@ export function startIframeMessages() {\n \n \n function onMessage(event) {\n-  if (event.origin !== eds.embeddingOrigin)\n+  const isFromOtherFrame = event.origin === location.origin;\n+  if (event.origin !== eds.embeddingOrigin && !isFromOtherFrame)\n     return;\n \n   // The message is a \"[eventName, eventData]\" string because IE <= 9 doesn't support\n@@ -48,13 +56,33 @@ function onMessage(event) {\n     eventData = json[1];\n   }\n   catch (error) {\n-    // This isn't a message from Debiki.\n+    // Not from Talkyard.\n+    return;\n+  }\n+\n+  // We can access other Ty frames  [many_embcom_iframes], but if the sender is\n+  // window.parent, we cannot access it — then, set to undefined.\n+  const fromFrame = isFromOtherFrame ? event.source : undefined;\n+\n+  // If the embedding script's cache time hasn't yet expired, it might be\n+  // old and then don't show the editor (it too likely would malfunction).\n+  // Could move 2 to enums-and-constants.ts. [emb_scr_ver]\n+  const curScriptV = 2;\n+  if (eds.isInEmbeddedEditor && eds.embeddingScriptV !== curScriptV) {\n+    (fromFrame || window.parent).postMessage(\n+          JSON.stringify(['tooOldEmbeddingScript', {\n+            embeddingScriptV: eds.embeddingScriptV,\n+            curScriptV,\n+          }]),\n+          fromFrame ? location.origin : eds.embeddingOrigin);\n     return;\n   }\n \n   switch (eventName) {\n     case 'loginWithAuthnToken':\n+      // This gets sent to the first comments iframe only. [1st_com_frame]\n       const authnToken = eventData;\n+      // REFACTOR to Authn.loginWithToken, calls Server and loadMyself()? [ts_authn_modl]\n       Server.loginWithAuthnToken(authnToken, SessionType.AutoTokenSiteCustomSso,\n               function() {\n         // typs.weakSessionId should have been updated by the above login fn.\n@@ -63,19 +91,26 @@ function onMessage(event) {\n \n       break;\n     case 'loginWithOneTimeSecret':\n+      // This gets sent to the first comments iframe only. [1st_com_frame]\n       dieIf(!eds.isInEmbeddedCommentsIframe, 'TyE50KH4');\n       const oneTimeLoginSecret = eventData;\n+      // REFACTOR to Authn.loginWithOneTimeSecret? [ts_authn_modl]\n       Server.loginWithOneTimeSecret(oneTimeLoginSecret, function() {\n+        // REFACTOR call loadMyself() directly from loginWithOneTimeSecret().\n         // typs.weakSessionId has been updated already by the above login fn.\n         ReactActions.loadMyself();\n       });\n       break;\n     case 'resumeWeakSession':\n+      // This gets sent to the first comments iframe only. [1st_com_frame]\n       dieIf(!eds.isInEmbeddedCommentsIframe, 'TyE305RK3');\n       const pubSiteId = eventData.pubSiteId;\n       if (eds.pubSiteId === pubSiteId) {\n+        // REFACTOR break out fn Authn.loginWithOldSession()?  [ts_authn_modl]\n+        const mainWin = debiki2.getMainWin();\n+        mainWin.typs.weakSessionId = eventData.weakSessionId;\n         typs.weakSessionId = eventData.weakSessionId;\n-        // This will send 'justLoggedIn' to the editor iframe, so it'll get updated too.\n+        // This sends 'justLoggedIn' to other iframes, so they'll get updated too.\n         ReactActions.loadMyself();\n       }\n       else {\n@@ -90,18 +125,23 @@ function onMessage(event) {\n       // @ifdef DEBUG\n       const mainWin: MainWin = getMainWin();\n       if (!mainWin.typs.weakSessionId && !getSetCookie('dwCoSid')) {\n-        logAndDebugDie(`Not really logged in? No cookie, no typs.weakSessionId. ` +\n+        logAndDebugDie(`justLoggedIn but not logged in? ` +\n+            `No cookie, no typs.weakSessionId. ` +\n             `This frame name: ${window.name}, ` +\n             `main frame name: ${mainWin.name}, ` +\n             `this is main frame: ${window === mainWin}, ` +\n             `mainWin.typs: ${JSON.stringify(mainWin.typs)} [TyE60UKTTGL35]`);\n       }\n+      // theStore.me was updated by ReactActions.loadMyself():\n+      dieIf(!mainWin.theStore.me, 'justLoggedIn but theStore.me missing [TyE406MR4E2]');\n+      dieIf(!eventData.user, 'justLoggedIn but user missing [TyE406MR4E3]');\n       // @endif\n       ReactActions.setNewMe(eventData.user);\n       break;\n     case 'logoutClientSideOnly':\n-      // Sent from the comments iframe to the editor iframe, when one logs out in the comments iframe.\n-      ReactActions.logoutClientSideOnly();\n+      // Sent from the comments iframe one logged out in, to the editor iframe\n+      // and other comments iframes.\n+      ReactActions.logoutClientSideOnly({ skipSend: true });\n       break;\n     case 'scrollToPostNr':  // rename to loadAndShowPost  ? + add  anyShowPostOpts?: ShowPostOpts\n       var postNr = eventData;\n@@ -117,12 +157,12 @@ function onMessage(event) {\n       });\n       break;\n     case 'editorToggleReply':\n-      // This message is sent from an embedded comments page to the embedded editor.\n-      // It opens the editor to write a reply to `postId`.\n+      // This message is sent from a comments iframe to the editor iframe.\n+      // Will open the editor to write a reply to `postNr` in that comments iframe.\n       var postNr = eventData[0];\n       var inclInReply = eventData[1];\n       var postType = eventData[2] ?? PostType.Normal;\n-      editor.toggleWriteReplyToPostNr(postNr, inclInReply, postType);\n+      editor.toggleWriteReplyToPostNr(postNr, inclInReply, postType, fromFrame);\n       break;\n     case 'handleReplyResult':\n       // This message is sent from the embedded editor <iframe> to the comments\n@@ -132,29 +172,50 @@ function onMessage(event) {\n       ReactActions.handleReplyResult(eventData[0], eventData[1]);\n       break;\n     case 'editorEditPost':\n-      // Sent from an embedded comments page to the embedded editor.\n+      // Sent from a comments iframe to the editor iframe.\n       var postNr = eventData;\n-      ReactActions.editPostWithNr(postNr);\n+      ReactActions.editPostWithNr(postNr, fromFrame);\n       break;\n     case 'onEditorOpen':\n-      // Sent from the embedded editor to the comments iframe.\n+      // Sent from the embedded editor to all comment iframes, so they can\n+      // disable Reply and Edit buttons, since pat is already editing editing sth.\n       ReactActions.onEditorOpen(eventData);\n       break;\n     case 'handleEditResult':\n-      // This is sent from the embedded editor back to an embedded comments page.\n+      // Sent from the editor iframe to the iframe with the edited comment.\n       ReactActions.handleEditResult(eventData);\n       break;\n     case 'showEditsPreview':  // REMOVE DO_AFTER 2020-09-01 deprecated\n     case 'showEditsPreviewInPage':\n+    case 'showEditsPreviewInDisc': // use instead?\n       ReactActions.showEditsPreviewInPage(eventData);\n       break;\n     case 'scrollToPreview':\n       ReactActions.scrollToPreview(eventData);\n       break;\n+    case 'hideEditor':\n+      ReactActions.hideEditor();\n+      break;\n     case 'hideEditorAndPreview':\n       // This is sent from the embedded editor to an embedded comments page.\n       ReactActions.hideEditorAndPreview(eventData);\n       break;\n+    case 'tooOldEmbeddingScript':\n+      // Sent from the editor iframe to a comments iframe that says anything,\n+      // if the embedding script (on the embedding blog post page) are too old,\n+      // so the editor might not work. [embcom_upgr_0cache]\n+      // (The cache time is just 15 minutes, for this upgrade.)\n+      pagedialogs.getServerErrorDialog().openForBrowserError(\n+            \"Try again in 15 minutes.\\n\\n\" +\n+            \"This server was recently upgraded. The changes will take effect \" +\n+            \"within 15 minutes — thereafter, you can post and edit comments again.\\n\\n\" +\n+            \"Details: \" + JSON.stringify(eventData) + \" [TyM04MWEJQ3]\",\n+            { title: \"Wait for a while\" });\n+      /* Or, but won't appear in the middle:\n+      morebundle.openDefaultStupidDialog({\n+         body: ...\n+          });*/\n+      break;\n     case 'iframeOffsetWinSize':\n       debiki2.iframeOffsetWinSize = eventData;\n       break;\n@@ -186,7 +247,12 @@ function syncDocSizeWithIframeSize() {\n     // Make space for any notf prefs dialog — it can be taller than the emb cmts\n     // iframe height, before there're any comments. [IFRRESIZE]\n     const anyDialog = $first('.esDropModal_content');\n-    const dialogHeightPlusPadding = anyDialog ? anyDialog.clientHeight + 30 : 0;\n+    let dialogHeightPlusPadding = 0;\n+    if (anyDialog) {\n+      const rect = anyDialog.getBoundingClientRect();\n+      dialogHeightPlusPadding = rect.bottom + 30;\n+      // Was: anyDialog.clientHeight + 30, but that didn't incl whitespace above.\n+    }\n \n     const currentHeight = Math.max(currentDiscussionHeight, dialogHeightPlusPadding);\n "
    },
    {
      "sha": "2d9689ddcbcd06da7c9e6e5f9b4717a8ecab96df",
      "filename": "client/app-slim/init-all-react-roots.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/init-all-react-roots.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/init-all-react-roots.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/init-all-react-roots.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -32,7 +32,7 @@\n \n \n export function startMainReactRoot(reactRenderMethodName: 'render' | 'hydrate') {\n-  // /-/admin/*\n+  // /-/admin/ *\n   // app/views/adminPage.scala.html\n   // <div id=\"esPageColumn\">\n   // <div id=\"esPageScrollable\">\n@@ -51,7 +51,7 @@ export function startMainReactRoot(reactRenderMethodName: 'render' | 'hydrate')\n     return;\n   }\n \n-  // /-/superadmin/*clientRoute\n+  // /-/superadmin/ *clientRoute\n   // adminPage.scala.html, appId = \"theSuperAdminApp\"\n   const superAdminAppElem = document.getElementById('theSuperAdminApp');\n   if (superAdminAppElem) {\n@@ -60,7 +60,7 @@ export function startMainReactRoot(reactRenderMethodName: 'render' | 'hydrate')\n     return;\n   }\n \n-  // /-/tags/*\n+  // /-/tags/ *\n   // adminPage.scala.html, appId = \"theTagsApp\"\n   // No! This should be part of  MoreScriptsRoutesComponent.\n   const tagsAppElem = document.getElementById('theTagsApp');"
    },
    {
      "sha": "ffa7a93ee0809f26a063bd59577f41d6f5577c23",
      "filename": "client/app-slim/keyboard-shortcuts.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/keyboard-shortcuts.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/keyboard-shortcuts.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/keyboard-shortcuts.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -523,7 +523,7 @@ function onKeyUp(event: KeyboardEvent) {\n   if (isModifierNotShift(key))\n     return;\n \n-  const store: Store = getMainWinStore();\n+  const store: Store = win_getSessWinStore() as Store;\n \n   const uiPrefs = me_uiPrefs(store.me);\n   if (uiPrefs.kbd !== UiPrefsKeyboardShortcuts.On)\n@@ -611,7 +611,7 @@ function onKeyUp(event: KeyboardEvent) {\n \n \n function onKeyDown(event: KeyboardEvent) {\n-  const store: Store = getMainWinStore();\n+  const store: Store = win_getSessWinStore() as Store;\n \n   const uiPrefs = me_uiPrefs(store.me);\n   if (!uiPrefs.kbd)"
    },
    {
      "sha": "ef9d766841f5ff44104f56481e3ff4650773b450",
      "filename": "client/app-slim/links.ts",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/links.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/links.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/links.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -37,10 +37,20 @@ export function origin(): string {\n   // This needs to happen in a function, so gets reevaluated server side, where the same script\n   // engine gets reused, for rendering pages at different sites, different origins.\n   //\n-  const mainStore: Store = getMainWinStore();\n-  return mainStore.embeddedOriginOrEmpty;  // [ONESTORE]\n+  // We cache the origin, so, if many Ty comments iframes,  [many_embcom_iframes]\n+  // so we won't need to access a different iframe all the time.\n+  // But if server side, don't cache — the origin will change when rendering pages\n+  // for different sites. (Also, then no need to cache, aren't any iframes.)\n+  //\n+  if (notDef(cachedEmbOrig) || isServerSide()) {\n+    const mainStore: SessWinStore = win_getSessWinStore();\n+    cachedEmbOrig = mainStore.embeddedOriginOrEmpty;  // [ONESTORE]\n+  }\n+  return cachedEmbOrig;\n }\n \n+let cachedEmbOrig: St | U;\n+\n \n export function linkToPageId(pageId: PageId): string {\n   return origin() + '/-' + pageId;"
    },
    {
      "sha": "f9753291a8a82c3c3bf16998c14f4aaa28af8ce3",
      "filename": "client/app-slim/model.ts",
      "status": "modified",
      "additions": 171,
      "deletions": 8,
      "changes": 179,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/model.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/model.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/model.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -18,6 +18,44 @@\n /// <reference path=\"./../types-and-const-enums.ts\" />\n /// <reference path=\"./../third-party/third-party-types.d.ts\" />\n \n+\n+interface PageSession  {\n+  xsrfTokenIfNoCookies?: St;\n+\n+  // Initialized when the page loads, by checking navigator.cookieEnabled.\n+  canUseCookies?: Bo;\n+\n+  // This session id is available to client side Javascript, and can be stolen\n+  // if there's an XSS vulnerability. So, it's going to have fewer capabilities\n+  // than a http-only session when the Talkyard site is opened as the main window\n+  // (rather than embedded in an iframe).\n+  //\n+  // It's needed because Safari and FF blocks 3rd party cookies, so\n+  // we need to remember the login session in a non-cookie somehow.\n+  //\n+  // ADD_TO_DOCS\n+  //\n+  weakSessionId?: St;\n+\n+  // If the session is for an embedded comments iframe. REMOVE incl in sid instead, somehow.\n+  sessType?: SessionType.AutoTokenSiteCustomSso;\n+}\n+\n+\n+interface __TyWinInterface extends Window {\n+  tydyn?: { allIframePageIds: PageId[] };\n+  typs: PageSession;\n+  theStore: Store;\n+  eds: ServerVars;\n+}\n+\n+\n+// RENAME to DiscWin.\n+type MainWin = __TyWinInterface & typeof globalThis;\n+type DiscWin = MainWin;\n+\n+\n+\n type DateMs = WhenMs;  // use When instead? sounds better since using When server side too\n \n type HttpRequest = XMLHttpRequest;\n@@ -170,6 +208,7 @@ interface DraftLocator {\n   // This is useful on embedded blog comments pages, if the Talkyard page hasn't yet\n   // been created, so there's no page id. [BLGCMNT1]\n   embeddingUrl?: string;\n+  discussionId?: St;\n   postNr?: PostNr;\n }\n \n@@ -258,6 +297,7 @@ interface ScrollIntoViewOpts extends CalcScrollOpts {\n \n interface ShowPostOpts extends ScrollIntoViewOpts {\n   showChildrenToo?: boolean;\n+  inFrame?: DiscWin;\n }\n \n \n@@ -395,6 +435,7 @@ type Me = Myself\n interface Myself extends OwnPageNotfPrefs {   // RENAME to Me\n   dbgSrc?: string;\n   id?: UserId;\n+  isStranger?: Bo;\n   isGroup?: boolean; // currently always undefined (i.e. false)\n   isLoggedIn?: boolean;\n   isAdmin?: boolean;\n@@ -900,7 +941,25 @@ interface Origins {\n }\n \n \n-interface Store extends Origins, PartialEditorStoreState {\n+interface SessWinStore {\n+  me?: Myself;\n+  embeddedOriginOrEmpty: St;\n+}\n+\n+\n+/// Can be 1) the main ('top') browser win (incl topbar, editor, sidebars etc), or\n+/// 2) a copy of the store in an embedded comments iframe.  [many_embcom_iframes]\n+///\n+interface DiscStore extends SessWinStore {\n+  currentPage?: Page;\n+  currentPageId?: PageId;\n+  currentCategories: Cat[];   // RENAME [concice_is_nice] curCats\n+  usersByIdBrief: { [userId: number]: Pat };  // = PatsById\n+  pagesById: { [pageId: string]: Page };\n+}\n+\n+\n+interface Store extends Origins, DiscStore, PartialEditorStoreState {\n   // Need to use the same layout settings as the server, on the first\n   // render, when reusing (hydrating) html from the server.\n   isHydrating?: Bo;\n@@ -923,7 +982,7 @@ interface Store extends Origins, PartialEditorStoreState {\n   userMustBeApproved: boolean;\n   settings: SettingsVisibleClientSide;\n   hideForumIntro?: boolean;\n-  currentCategories: Category[];   // RENAME [concice_is_nice] curCats\n+\n   // For all site sections, loaded lazily, and updated in a hacky way, for now, so have a look,\n   // and refactor (?), before using it for anything more.\n   allCategoriesHacky?: Category[];\n@@ -937,7 +996,8 @@ interface Store extends Origins, PartialEditorStoreState {\n   isImpersonating?: boolean;\n   isViewingAs?: boolean;\n   rootPostId: number;\n-  usersByIdBrief: { [userId: number]: Participant };  // = PatsById\n+\n+  // Maybe move to DiscStore?\n   pageMetaBriefById: { [pageId: string]: PageMetaBrief };\n \n   isEditorOpen?: boolean;  // default: false\n@@ -962,9 +1022,6 @@ interface Store extends Origins, PartialEditorStoreState {\n   // Overrides quickUpdate.\n   cannotQuickUpdate?: boolean;\n \n-  pagesById: { [pageId: string]: Page };\n-  currentPage?: Page;\n-  currentPageId?: PageId;\n   debugStartPageId: string;\n \n   tagsStuff?: TagsStuff;\n@@ -1352,11 +1409,14 @@ const enum EditMemberAction {\n }\n \n \n-// Sync w Scala: LoginReason.\n+/// Sync w Scala: LoginReason.\n+/// Some reasons make a short text appear in the login dialog. [authn_reason_info]\n const enum LoginReason {\n   LoginToEdit = 9,\n   LoginToChat = 10,\n   LoginToLike = 11,\n+  LoginToDisagree = 25,\n+  LoginToFlag = 26,\n   BecomeOwner = 12,\n   SignUp = 13,\n   TryToAccessNotFoundPage = 14,\n@@ -1370,6 +1430,7 @@ const enum LoginReason {\n   AuthnRequiredToRead = 22,  // was: 'LoginToAuthenticate'\n   NeedToBeAdmin = 23, // was: 'LoginAsAdmin'\n   LoginToAdministrate = 24,\n+  // Last: 26, see above\n }\n \n \n@@ -1533,7 +1594,7 @@ interface StorePatch extends EditorStorePatch {\n // So we know which post to highlight, to indicate it's being replied to.\n interface PartialEditorStoreState {\n   editorsPageId?: PageId;\n-  replyingToPostNr?: PostNr;\n+  replyingToPostNr?: PostNr;  // on page editorsPageId\n   editingPostId?: PostId;\n }\n \n@@ -1809,6 +1870,16 @@ interface ExplainingListItemProps extends ExplainingTitleText {\n }\n \n \n+interface TipsBoxProps {\n+  message: HelpMessage;\n+  alwaysShow?: Bo;\n+  showUnhideTips?: Bo;\n+  className?: St;\n+  large?: Bo;\n+}\n+\n+\n+\n // =========================================================================\n //  Admin Area\n // =========================================================================\n@@ -2162,6 +2233,98 @@ interface GenPasetoV2LocSecrResp {\n \n \n \n+// =========================================================================\n+//  Server variables\n+// =========================================================================\n+\n+\n+// These variables are initialized in a certain <head><script>.  [5JWKA27]\n+\n+interface ServerVars {\n+  doWhat: 'Noop' | 'StartPage' | 'ResetPwd';\n+  pubSiteId: string;\n+  siteId: SiteId;  // only in Dev mode  — repl w isFirstSite: boolean?\n+  secure: boolean;\n+  isDev: boolean;\n+  isTestSite: boolean;\n+  testNowMs: WhenMs | undefined;\n+  loadGlobalAdminScript: boolean;\n+  loadGlobalStaffScript: boolean;\n+  loadGlobalAllScript: boolean;\n+\n+  // \"js\" or \"min.js\"  (but not \".js\" or \".min.js\").\n+  minMaxJs: St;\n+\n+  // This field exists, but don't declare it, shouldn't be used at any more places. Use origin()\n+  // in links.ts instead.\n+  // const debugOrigin: string;\n+\n+  cdnOriginOrEmpty: string;\n+  cdnOrServerOrigin: string;\n+  assetUrlPrefix: string;\n+  debugOrigin: St;\n+\n+  // To be used only when rendering commonmark to html. (But when running React,\n+  // the store Origin fields should be used instead. There is, hovewer,\n+  // no store, when rendering commonmark to html, so then currently we use this.)\n+  // CLEAN_UP COULD send the upl prefix to replaceLinks(md) instead, so won't need this here? [5YKF02]\n+  uploadsUrlPrefixCommonmark: string;\n+\n+  currentVersion: string;\n+  cachedVersion: string;\n+\n+  wantsServiceWorker: boolean;\n+  useServiceWorker: boolean;  // if both wants it, and it's available\n+\n+  pageDataFromServer: any;\n+  volatileDataFromServer: VolatileDataFromServer;\n+\n+  isIos: boolean;\n+  isInLoginWindow: boolean;\n+  isInLoginPopup: boolean;\n+  isInIframe: boolean;\n+  isInAdminArea: boolean;\n+  isRtl: boolean;  // right-to-left language? then right-pull menus instead of left-pull\n+\n+  // For embedded comments.\n+  isInEmbeddedCommentsIframe: boolean;\n+  isInEmbeddedEditor: boolean;\n+\n+  embeddingScriptV?: Nr;\n+  embeddingOrigin?: string;\n+\n+  // Wrap in an obj so they can be updated all at the same time?\n+  // ---------------\n+  // (In an embedded editor, they're updated dynamically, depending on which\n+  // blog comments iframe is active.  [many_embcom_iframes])\n+  embeddingUrl?: string;\n+  embeddedPageAltId?: string;  // RENAME to embeddedDiscussionId\n+  lazyCreatePageInCatId?: CategoryId;\n+  // Sometimes lazy-inited when the page gets lazy-created, when the first reply is posted. [4HKW28]\n+  embeddedPageId?: string;\n+  // ---------------\n+\n+  // When creating new site.\n+  baseDomain?: string;\n+\n+  newPasswordData?: NewPasswordData;\n+\n+  // Is non-zero, if the server is read-only, because of maintenance work. The value\n+  // is the Unix second when the maintenance work is believed to be done, or 1 if unspecified.\n+  mainWorkUntilSecs?: number;\n+}\n+\n+\n+interface NewPasswordData {\n+  fullName: St;\n+  username: St;\n+  email: St;\n+  minLength: Nr;\n+  resetPasswordEmailId: St;\n+}\n+\n+\n+\n // =========================================================================\n //  Service worker messages  [sw]\n // ========================================================================="
    },
    {
      "sha": "d90a5812efc115dc10808a782c5ff9f21d428b93",
      "filename": "client/app-slim/oop-methods.ts",
      "status": "modified",
      "additions": 55,
      "deletions": 14,
      "changes": 69,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/oop-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/oop-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/oop-methods.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -580,15 +580,38 @@ export function post_isPubVisible(post: Post): Bo {\n }\n \n \n+\n // Me\n //----------------------------------\n \n+\n+/// Me2 has precedence over me1, and me3 over me2.\n+///\n+export function me_merge(me1: Myself, me2: Partial<Myself> | U,\n+        me3?: Partial<Myself>): Myself {\n+  let me = me_mergeImpl(me1, me2 || {});\n+  if (me3) {\n+    me = me_mergeImpl(me, me3);\n+  }\n+  return me;\n+}\n+\n+\n+function me_mergeImpl(me1: Partial<Myself>, me2: Partial<Myself>): Myself {\n+  const me = { ...me1, ...me2 };\n+  me.myDataByPageId = { ...me1.myDataByPageId, ...me2.myDataByPageId };\n+  me.marksByPostId = { ...me1.marksByPostId, ...me2.marksByPostId };\n+  return me as Myself;\n+}\n+\n+\n export function me_isUser(me: Myself): boolean {\n   return (!isGuest(me) && !me.isGroup &&\n       // Don't need both these? Oh well.\n       me.isAuthenticated && me_isAuthenticated(me));\n }\n \n+\n export function me_hasRead(me: Myself, post: Post) {\n   // If not logged in, we have no idea.\n   dieIf(!me.isLoggedIn, 'EdE2WKA0');\n@@ -741,8 +764,8 @@ export function store_mainSiteSection(store: Store): SiteSection {\n \n \n \n-export function store_isNoPage(store: Store): boolean {\n-  return !store.currentPageId || store.currentPageId === EmptyPageId;\n+export function isNoPage(pageId: PageId): Bo {\n+  return !pageId || pageId === EmptyPageId;\n }\n \n \n@@ -972,6 +995,21 @@ function store_mayIEditImpl(store: Store, post: Post, isEditPage: boolean): bool\n }\n \n \n+export function store_isReplyingTo(store: Store, post: Post): Bo {\n+  return store.editorsPageId === store.currentPageId &&\n+          store.replyingToPostNr === post.nr;\n+}\n+\n+\n+export function store_isReplyingToOrEditing(store: Store, post: Post): Bo {\n+  // @ifdef DEBUG\n+  dieIf(store.editorsPageId !== store.currentPageId &&\n+          store.editingPostId === post.uniqueId, 'TyE60IMJ257');\n+  // @endif\n+  return store_isReplyingTo(store, post) || store.editingPostId === post.uniqueId;\n+}\n+\n+\n // Also see: store_getCurrOrDefaultCat(store) [GETACTDEFCAT]\n //\n export function store_findTheDefaultCategory(store: Store): Category | U {\n@@ -1033,14 +1071,16 @@ export function store_findCatsWhereIMayCreateTopics(store: Store): Category[] {\n }\n \n \n-export function store_getPostId(store: Store, pageId: PageId, postNr: PostNr): PostId | U {\n+export function store_getPostId(store: DiscStore, pageId: PageId,\n+        postNr: PostNr): PostId | U {\n   // If we're on a blog bost with embedded comments, then, the Talkyard embedded\n   // comments page might not yet have been created.\n-  if (!pageId)\n+  if (isNoPage(pageId))\n     return undefined;\n \n   // The page might not be the current page, if the editor is open and we've\n   // temporarily jumped to a different page or user's profile maybe.\n+  // BUG happens sometimes, browser error auto reported on 2021-07-15 from one ip addr.\n   const page: Page = store.pagesById[pageId];\n   dieIf(!page, 'TyE603KWUDB4');\n \n@@ -1062,7 +1102,7 @@ export function page_makePostPatch(page: Page, post: Post): StorePatch {\n \n export function store_makeDraftPostPatch(store: Store, page: Page, draft: Draft)\n       : StorePatch {\n-  const draftPost = store_makePostForDraft(store, draft)\n+  const draftPost = store_makePostForDraft(store.me.id, draft)\n   return page_makePostPatch(page, draftPost);\n }\n \n@@ -1071,7 +1111,7 @@ export function store_makeNewPostPreviewPatch(store: Store, page: Page,\n       parentPostNr: PostNr | undefined, safePreviewHtml: string,\n       newPostType?: PostType): StorePatch {\n   const previewPost = store_makePreviewPost({\n-      store, parentPostNr, safePreviewHtml, newPostType, isEditing: true });\n+      authorId: store.me.id, parentPostNr, safePreviewHtml, newPostType, isEditing: true });\n   return page_makePostPatch(page, previewPost);\n }\n \n@@ -1109,7 +1149,8 @@ export function postType_toDraftType(postType: PostType): DraftType | undefined\n }\n \n \n-export function store_makePostForDraft(store: Store, draft: Draft): Post | null {\n+// RENAME? to draft_makePreviewPost(draft, authorId)?\n+export function store_makePostForDraft(authorId: PatId, draft: Draft): Post | Nl {\n   const locator: DraftLocator = draft.forWhat;\n   const parentPostNr = locator.postNr;\n \n@@ -1123,7 +1164,7 @@ export function store_makePostForDraft(store: Store, draft: Draft): Post | null\n   // For now, use the CommonMark source instead.\n \n   const previewPost = store_makePreviewPost({\n-      store, parentPostNr, unsafeSource: draft.text, newPostType: postType,\n+      authorId, parentPostNr, unsafeSource: draft.text, newPostType: postType,\n       isForDraftNr: draft.draftNr || true });\n   return previewPost;\n }\n@@ -1148,7 +1189,7 @@ export function post_makePreviewIdNr(parentNr: PostNr, newPostType: PostType): P\n \n \n interface MakePreviewParams {\n-  store: Store;\n+  authorId: PatId;\n   parentPostNr?: PostNr;\n   safePreviewHtml?: string;\n   unsafeSource?: string;\n@@ -1161,7 +1202,7 @@ interface MakePreviewParams {\n \n \n function store_makePreviewPost({\n-    store, parentPostNr, safePreviewHtml, unsafeSource,\n+    authorId, parentPostNr, safePreviewHtml, unsafeSource,\n     newPostType, isForDraftNr, isEditing }: MakePreviewParams): Post {\n \n   dieIf(!newPostType, \"Don't use for edit previews [TyE4903KS]\");\n@@ -1180,7 +1221,7 @@ function store_makePreviewPost({\n     parentNr: parentPostNr,\n     multireplyPostNrs: [], //PostNr[];\n     postType: newPostType,\n-    authorId: store.me.id,\n+    authorId,\n     createdAtMs: now,\n     //approvedAtMs?: number;\n     //lastApprovedEditAtMs: number;\n@@ -1204,7 +1245,7 @@ function store_makePreviewPost({\n     branchSideways: 0,\n     likeScore: 0,\n     childNrsSorted: [],\n-    unsafeSource: unsafeSource,\n+    unsafeSource,\n     sanitizedHtml: safePreviewHtml,\n     //tags?: string[];\n     //numPendingFlags?: number;\n@@ -1217,15 +1258,15 @@ function store_makePreviewPost({\n \n /* Not in use, but maybe later? Instead, for now, this: [60MNW53].\n export function store_makeDeleteDraftPostPatch(store: Store, draft: Draft): StorePatch {\n-  const draftPost = store_makePostForDraft(store, draft);\n+  const draftPost = store_makePostForDraft(store.me.id, draft);\n   return store_makeDeletePostPatch(draftPost);\n } */\n \n \n export function store_makeDeletePreviewPostPatch(store: Store, parentPostNr: PostNr,\n       newPostType?: PostType): StorePatch {\n   const previewPost: Post = store_makePreviewPost({\n-      store, parentPostNr, safePreviewHtml: '', newPostType });\n+      authorId: store.me.id, parentPostNr, safePreviewHtml: '', newPostType });\n   return store_makeDeletePostPatch(previewPost);\n }\n "
    },
    {
      "sha": "bbe896698da983f2c64ab7bb4c022e88f48ef155",
      "filename": "client/app-slim/page-dialogs/server-error-dialog.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/page-dialogs/server-error-dialog.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/page-dialogs/server-error-dialog.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page-dialogs/server-error-dialog.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -58,7 +58,8 @@ const ServerErrorDialog = createComponent({\n     };\n   },\n \n-  openForBrowserError: function(errorMessage: string, opts: { mayClose?: boolean } = {}) {\n+  openForBrowserError: function(errorMessage: St,\n+          opts: { title?: St, mayClose?: Bo } = {}) {\n     this.setState({\n       ...opts,\n       isOpen: true,\n@@ -94,7 +95,7 @@ const ServerErrorDialog = createComponent({\n     let message: string;\n \n     if (this.state.clientErrorMessage) {\n-      title = \"Error\";\n+      title = this.state.title || \"Error\";\n       message = this.state.clientErrorMessage;\n       if (debiki2.utils.isMouseDetected) {\n         message += \"\\n\\n\" +"
    },
    {
      "sha": "a9287c666c0bbdcc9df1c51c3f4d6f7c7239467b",
      "filename": "client/app-slim/page/arrows.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/page/arrows.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/page/arrows.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/arrows.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -172,7 +172,7 @@ function drawVerticalArrows(depth: number, isFirstChild: boolean,\n   //                                             |parent comment    |\n   //                                             |text…             |\n   //                                             +------------------+\n-  //                                              \\\n+  //                                              ＼\n   //                                               v\n   // The child comment (would be this post,      +-----—------------+\n   // if `isOnlyChild` below is true).            |the only child    |\n@@ -212,7 +212,7 @@ function drawVerticalArrows(depth: number, isFirstChild: boolean,\n   // is \"dw-arw-vt-line-to-sibling-1\",           |    |child comment|\n   // again.                                      |    |text…        |\n   //                                             |    +-------------+\n-  //                                             \\\n+  //                                             ＼\n   // This very last line to the :last-child -->   v\n   // is \"dw-arw-vt-curve-to-unindented\".         +-----—------------+\n   // Here, numRemainingWithArrows is 0.          |:last-child       |\n@@ -234,7 +234,7 @@ function drawVerticalArrows(depth: number, isFirstChild: boolean,\n     arrows.push(\n         r.div({ className: 'dw-arw dw-arw-vt-line-to-sibling-2', key: 25 }));\n \n-    //          \\\n+    //          ＼\n     // Draw the  v  arrow to the very last sibling: — ... but always indent it, nowadays. [6UWADTW0]\n     if (numRemainingWithArrows === 1) {\n       //if (!horizontalLayout && depth === 2) {"
    },
    {
      "sha": "19e2b601d5e7158eba802d5b812d677b22334c68",
      "filename": "client/app-slim/page/discussion.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/page/discussion.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/page/discussion.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/discussion.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1278,13 +1278,8 @@ const Thread = createComponent({\n \n     const branchSidewaysClass = horizontalCss(childrenSideways);\n \n-    const isEditorsPage =\n-        store.editorsPageId === page.pageId ||\n-        // The embedded editor doesn't know about page ids (as of now). [EMBED0PG]\n-        page.pageRole === PageRole.EmbeddedComments;\n-\n     let replyingToElem;\n-    if (store.replyingToPostNr === post.nr && isEditorsPage) {\n+    if (store_isReplyingTo(store, post)) {\n       replyingToElem = r.div({ className: 's_T_ReTo' },\n         r.span({ className: 's_T_ReTo_Ttl' },\n           t.d.ReplyingToC),  // [305KTJ4]\n@@ -1353,11 +1348,12 @@ const Thread = createComponent({\n       }\n \n       const resumeDraftBtn = post.isEditing || store.isEditorOpen ? null :\n-            Button({ onClick: this.resumeDraft, className: 's_T_YourPrvw_ResumeB' },\n+            Button({ onClick: this.resumeDraft, className: 's_T_YourPrvw_ResumeB e_RsmDft' },\n               t.d.ResumeEdting);\n \n       const deleteDraftBtn = post.isEditing || store.isEditorOpen ? null :\n-            Button({ onClick: this.askDeleteDraft, className: 's_T_YourPrvw_ResumeB' },\n+            Button({ onClick: this.askDeleteDraft,\n+                  className: 's_T_YourPrvw_ResumeB e_DelDft' },\n               t.d.DelDraft);\n \n       previewElem = r.div({ className: 's_T_YourPrvw' },"
    },
    {
      "sha": "e77458d8febafc8330ca5086105ed0f5bbba68be",
      "filename": "client/app-slim/page/post-actions.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 15,
      "changes": 28,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/page/post-actions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/page/post-actions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/post-actions.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -295,7 +295,7 @@ export const PostActions = createComponent({\n         t.Solution);\n     }\n \n-    const replyingToClass = store.replyingToPostNr === post.nr  ? ' s_PA_B-Active' : '';\n+    const replyingToClass = store_isReplyingTo(store, post)  ? ' s_PA_B-Active' : '';\n     const disabledClass = isEditorOpenAlready ? ' s_PA_B-Disabled' : '';\n \n     const replyButton = !store_mayIReply(store, post) ? null :\n@@ -337,7 +337,7 @@ export const PostActions = createComponent({\n \n     let numWrongsText;\n     if (post.numWrongVotes && useDownvotes && isDisagreeEnabled) {\n-      numWrongsText = r.a({ className: 'dw-a dw-vote-count',\n+      numWrongsText = r.a({ className: 'dw-a dw-vote-count e_WroVo',\n           onClick: (event) => morebundle.openLikesDialog(post, PostVoteType.Disagree, event.target) },\n           t.pa.NumDisagree(post.numWrongVotes));\n     }\n@@ -554,24 +554,22 @@ const MoreVotesDropdownModal = createComponent({\n \n   onWrongClick: function(event) {\n     const post: Post = this.state.post;\n-    loginIfNeededThen('LoginToVote', post.nr, () => {\n+    loginIfNeededThen(LoginReason.LoginToDisagree, post.nr, () => {\n       toggleVote(this.state.store, post, 'VoteWrong', !this.hasVoted('VoteWrong'));\n       this.closeSoon();\n     });\n   },\n   onBuryClick: function(event) {\n     const post: Post = this.state.post;\n-    loginIfNeededThen('LoginToVote', post.nr, () => {\n-      toggleVote(this.state.store, post, 'VoteBury', !this.hasVoted('VoteBury'));\n-      this.closeSoon();\n-    });\n+    // Not visible unless logged in.\n+    toggleVote(this.state.store, post, 'VoteBury', !this.hasVoted('VoteBury'));\n+    this.closeSoon();\n   },\n   onUnwantedClick: function(event) {\n     const post: Post = this.state.post;\n-    loginIfNeededThen('LoginToVote', post.nr, () => {\n-      toggleVote(this.state.store, post, 'VoteUnwanted', !this.hasVoted('VoteUnwanted'));\n-      this.closeSoon();\n-    });\n+    // Not visible unless logged in.\n+    toggleVote(this.state.store, post, 'VoteUnwanted', !this.hasVoted('VoteUnwanted'));\n+    this.closeSoon();\n   },\n \n   makeVoteButtons: function() {\n@@ -650,8 +648,8 @@ function toggleVote(store: Store, post: Post, voteType: string, toggleOn: boolea\n     postNrsRead: postNrsRead\n   };\n \n-  debiki2.Server.saveVote(data, function(updatedPost) {\n-    ReactActions.vote(updatedPost, action, voteType);\n+  debiki2.Server.saveVote(data, function(storePatch: StorePatch) {\n+    ReactActions.vote(storePatch, action, voteType, post.nr);\n   });\n }\n \n@@ -935,13 +933,13 @@ const MoreDropdownModal = createComponent({\n \n \n function flagPost(post: Post, at: Rect) {\n-  loginIfNeededThen('LoginToFlag', post.nr, () => {\n+  loginIfNeededThen(LoginReason.LoginToFlag, post.nr, () => {\n     morebundle.openFlagDialog(post.nr, at);\n   });\n }\n \n \n-function loginIfNeededThen(loginToWhat, postNr: PostNr, success: () => void) {\n+function loginIfNeededThen(loginToWhat: LoginReason, postNr: PostNr, success: () => Vo) {\n   login.loginIfNeededReturnToPost(loginToWhat, postNr, success);\n }\n "
    },
    {
      "sha": "423322b8788bde4ee4829183cb619456ad6b4bea",
      "filename": "client/app-slim/prelude.ts",
      "status": "modified",
      "additions": 35,
      "deletions": 11,
      "changes": 46,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/prelude.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/prelude.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/prelude.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -17,7 +17,6 @@\n \n /// <reference path=\"../types-and-const-enums.ts\" />\n /// <reference path=\"../reactjs-types.ts\" />\n-/// <reference path=\"server-vars.ts\" />\n /// <reference path=\"model.ts\" />\n /// <reference path=\"constants.ts\" />\n /// <reference path=\"translations.d.ts\" />\n@@ -279,7 +278,7 @@ export function win_isLoginPopup(): Bo {\n  * are made from the editor iframe and login popup wins too, not just the main\n  * comments win.\n  */\n-export function getMainWin(): MainWin {  // QUICK RENAME to win_getMainWin()\n+export function getMainWin(): MainWin {  // QUICK RENAME to win_getSessWin() ?\n   // Maybe there're no iframes and we're already in the main win?\n   // (window.opener might still be defined though — could be an embedded\n   // comments iframe, in another browser tab. So if we were to continue below,\n@@ -293,16 +292,17 @@ export function getMainWin(): MainWin {  // QUICK RENAME to win_getMainWin()\n \n   if (window.name === lookingForName) {\n     // @ifdef DEBUG\n-    dieIf(!window['typs'], 'TyE7S2063D');\n+    dieIf(!(window as MainWin).typs, 'TyE7S2063D');\n     // @endif\n     return <MainWin> window;\n   }\n \n-  // This is the main window already, unless we're on an embedded comments page or in a login popup.\n+  // This is the main window already, unless we're on an embedded comments page\n+  // or in a login popup.\n   let win = window;\n \n   // If we're in a login popup window, switch to the opener, which should be either the\n-  // main win (with all comments and discussions), or the embedded editor 'edEditor' in an iframe.\n+  // main win (with comments and discussions), or an embedded comments or editor iframe.\n   try {\n     if (win.opener && (win.opener as MainWin).typs) {\n       win = win.opener as MainWin;\n@@ -314,24 +314,48 @@ export function getMainWin(): MainWin {  // QUICK RENAME to win_getMainWin()\n     // an \"accessing a cross-origin frame\" error. Fine, just ignore.\n   }\n \n-  if (win.name === 'edEditor') {\n-    // We're in the embedded editor iframe window. The parent window is the embedding window,\n-    // e.g. a blog post with comments embedded. And it should have another child window, namely\n-    // the main window, with all embedded comments.\n+  if (win.name !== lookingForName) {\n+    // We're in the embedded editor iframe window, or in an embedded comments iframe\n+    // but not in the one we're looking for (which is the #talkyard-session iframe).\n     // @ifdef DEBUG\n+    dieIf(win.name !== 'edEditor' && !/edComments-[0-9]+/.test(win.name),\n+          `This window has an unexpected name: '${win.name}' TyE7S2RME75`);\n+    // The parent window is the embedding window, e.g. a blog post with\n+    // comments embedded. It can have one or many iframes with embedded comments.\n     dieIf(!win.parent, 'TyE7KKWGCE2');\n     // @endif\n-    win = win.parent[lookingForName];\n+    try {\n+      win = win.parent[lookingForName];\n+    }\n+    catch (ex) {\n+      // Maybe got deleted by scripts on the embedding page? Then what?\n+      logW(`Main win '${lookingForName}' not found [TyE0MAINWIN]`);\n+    }\n   }\n \n   // @ifdef DEBUG\n-  dieIf(!win['typs'], 'TyE5KTGW0256');\n+  dieIf(!win, 'TyE5KTGW0258');\n+  dieIf(!(win as MainWin).typs, 'TyE5KTGW0256');\n   // @endif\n \n   return <MainWin> win;\n }\n \n \n+export function win_getEditorWin(): MainWin | U {\n+  if (window.name === 'edEditor') {\n+    return window as MainWin;\n+  }\n+  // The editor iframe is created first, so this should always work. [ed_ifr_1st]\n+  let win;\n+  try { win = window.parent['edEditor']; }\n+  catch (ignored) {\n+    logW(`Editor iframe 'edEditor' not found [TyE0EDWIN]`);\n+  }\n+  return win;\n+}\n+\n+\n export function anyE2eTestPassword() {\n   return (window.location.search.match(/e2eTestPassword=([^&#]+)/) || [])[1];\n }"
    },
    {
      "sha": "ad857c6072bf460ece2206856e1df36f66a9664b",
      "filename": "client/app-slim/server-vars.d.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 108,
      "changes": 108,
      "blob_url": "https://github.com/debiki/talkyard/blob/15177b939c6bf33cf7456c7cb24ea4a41fdb5d65/client/app-slim/server-vars.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/15177b939c6bf33cf7456c7cb24ea4a41fdb5d65/client/app-slim/server-vars.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/server-vars.d.ts?ref=15177b939c6bf33cf7456c7cb24ea4a41fdb5d65",
      "patch": "@@ -1,108 +0,0 @@\n-/// <reference path=\"model.ts\" />\n-\n-\n-interface PageSession  {\n-  xsrfTokenIfNoCookies: string | undefined;\n-\n-  // Initialized when the page loads, by checking navigator.cookieEnabled.\n-  canUseCookies?: boolean;\n-\n-  // This session id is available to client side Javascript, and can be stolen\n-  // if there's an XSS vulnerability. So, it's going to have fewer capabilities\n-  // than a http-only session when the Talkyard site is opened as the main window\n-  // (rather than embedded in an iframe).\n-  //\n-  // It's needed because Safari and FF blocks 3rd party cookies, so\n-  // we need to remember the login session in a non-cookie somehow.\n-  //\n-  // ADD_TO_DOCS\n-  //\n-  weakSessionId?: St;\n-\n-  // If the session is for an embedded comments iframe. REMOVE incl in sid instead, somehow.\n-  sessType?: SessionType.AutoTokenSiteCustomSso;\n-}\n-\n-interface __MainWinInterface extends Window {\n-  typs: PageSession;\n-}\n-\n-type MainWin = __MainWinInterface & typeof globalThis;\n-\n-\n-// These variables are initialized in a certain <head><script>.  [5JWKA27]\n-\n-interface ServerVars {\n-  doWhat: 'Noop' | 'StartPage' | 'ResetPwd';\n-  pubSiteId: string;\n-  siteId: SiteId;  // only in Dev mode  — repl w isFirstSite: boolean?\n-  secure: boolean;\n-  isDev: boolean;\n-  isTestSite: boolean;\n-  testNowMs: WhenMs | undefined;\n-  loadGlobalAdminScript: boolean;\n-  loadGlobalStaffScript: boolean;\n-  loadGlobalAllScript: boolean;\n-\n-  // \"js\" or \"min.js\"  (but not \".js\" or \".min.js\").\n-  minMaxJs: St;\n-\n-  // This field exists, but don't declare it, shouldn't be used at any more places. Use origin()\n-  // in links.ts instead.\n-  // const debugOrigin: string;\n-\n-  cdnOriginOrEmpty: string;\n-  cdnOrServerOrigin: string;\n-  assetUrlPrefix: string;\n-  debugOrigin: St;\n-\n-  // To be used only when rendering commonmark to html. (But when running React,\n-  // the store Origin fields should be used instead. There is, hovewer,\n-  // no store, when rendering commonmark to html, so then currently we use this.)\n-  // CLEAN_UP COULD send the upl prefix to replaceLinks(md) instead, so won't need this here? [5YKF02]\n-  uploadsUrlPrefixCommonmark: string;\n-\n-  currentVersion: string;\n-  cachedVersion: string;\n-\n-  wantsServiceWorker: boolean;\n-  useServiceWorker: boolean;  // if both wants it, and it's available\n-\n-  pageDataFromServer: any;\n-  volatileDataFromServer: VolatileDataFromServer;\n-\n-  isIos: boolean;\n-  isInLoginWindow: boolean;\n-  isInLoginPopup: boolean;\n-  isInIframe: boolean;\n-  isInAdminArea: boolean;\n-  isRtl: boolean;  // right-to-left language? then right-pull menus instead of left-pull\n-\n-  // For embedded comments.\n-  isInEmbeddedCommentsIframe: boolean;\n-  isInEmbeddedEditor: boolean;\n-  embeddingOrigin?: string;\n-  embeddingUrl?: string;\n-  embeddedPageAltId?: string;  // RENAME to embeddedDiscussionId\n-  lazyCreatePageInCatId?: CategoryId;\n-  // Sometimes lazy-inited when the page gets lazy-created, when the first reply is posted. [4HKW28]\n-  embeddedPageId?: string;\n-\n-  // When creating new site.\n-  baseDomain?: string;\n-\n-  newPasswordData?: NewPasswordData;\n-\n-  // Is non-zero, if the server is read-only, because of maintenance work. The value\n-  // is the Unix second when the maintenance work is believed to be done, or 1 if unspecified.\n-  mainWorkUntilSecs?: number;\n-}\n-\n-\n-interface NewPasswordData {\n-  fullName: St;\n-  username: St;\n-  email: St;\n-  minLength: Nr;\n-  resetPasswordEmailId: St;\n-}"
    },
    {
      "sha": "b0cbff7c968d9955a8cab3f0d5309472f5a57e65",
      "filename": "client/app-slim/server-vars.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/server-vars.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/server-vars.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/server-vars.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1,4 +1,4 @@\n-/// <reference path=\"server-vars.d.ts\" />\n+/// <reference path=\"model.ts\" />\n \n declare const talkyard: TalkyardApi;\n "
    },
    {
      "sha": "07991a96243afd12c3143a32fc5f636d4e111bd5",
      "filename": "client/app-slim/sidebar/sidebar.styl",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/sidebar/sidebar.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/sidebar/sidebar.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/sidebar/sidebar.styl?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -270,14 +270,11 @@ html:not(.dw-hz):not(.mouse) #dw-comment-counts\n   a\n     font-weight: bold;\n \n-.es-editor-help-one,\n-.es-editor-help-two,\n .es-editor-help-three,\n .es-editor-help-four\n   position: absolute;\n   z-index: 1;\n   box-shadow: 6px 6px 8px #777;\n-  left: 25px;\n   max-width: 380px !important;\n   .dw-help-text\n     padding: 1ex 1ex 0;\n@@ -287,15 +284,12 @@ html:not(.dw-hz):not(.mouse) #dw-comment-counts\n   .dw-hide\n     padding: 10px 10px 7px 20px;\n \n-.es-editor-help-one\n-  top: 60px;\n-.es-editor-help-two\n-  top: 75px;\n .es-editor-help-three\n-  top: 110px;\n+  top: 65px;\n+  left: 10px;\n .es-editor-help-four\n-  top: 95px;\n-  left: 35px;\n+  top: 115px;\n+  left: 20px;\n \n .esCB_Help\n   p"
    },
    {
      "sha": "014ab36c178112a58de00ea92230a78ad4da3571",
      "filename": "client/app-slim/sidebar/sidebar.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 23,
      "changes": 32,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/sidebar/sidebar.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/sidebar/sidebar.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/sidebar/sidebar.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -517,25 +517,13 @@ export var Sidebar = createComponent({  // RENAME to ContextBar\n             adminGuideButton));\n     }\n \n-    // Show four help messages: first no. 1, then 2, 3, 4, one at a time, which clarify\n-    // how the sidebar recent-comments list works.\n-    let helpMessageBoxOne;\n-    let helpMessageBoxTwo;\n-    let helpMessageBoxTree;\n-    let helpMessageBoxFour;\n-    let dimCommentsStyle: { opacity: string; };\n+    // Show help messages, one at a time, to clarify how the recent comments list works.\n+    // (Previously there were 4 tips, and people thought that was too many, so skip the\n+    // first two: helpMessageOne & Two — you can find them out commented below.)\n+    let helpMessageBoxTree: RElm | U;\n+    let helpMessageBoxFour: RElm | U;\n+    let dimCommentsStyle: { opacity: St } | U;\n     if (this.state.commentsType === 'Recent' && listItems.length >= 6) {\n-      // People think 4 tips are too many, and the first two are a bit redundant, so\n-      // remove them for now.\n-      /*\n-      helpMessageBoxOne =\n-          help.HelpMessageBox({ className: 'es-editor-help-one', message: helpMessageOne });\n-      if (help.isHelpMessageClosed(store, helpMessageOne)) {\n-        helpMessageBoxTwo =\n-            help.HelpMessageBox({ className: 'es-editor-help-two', message: helpMessageTwo });\n-      }\n-      if (help.isHelpMessageClosed(store, helpMessageTwo)) {\n-      */\n       helpMessageBoxTree =\n           help.HelpMessageBox({ className: 'es-editor-help-three', message: helpMessageThree,\n             showUnhideTips: false });\n@@ -544,11 +532,11 @@ export var Sidebar = createComponent({  // RENAME to ContextBar\n             help.HelpMessageBox({ className: 'es-editor-help-four', message: helpMessageFour,\n               // Don't show, because would cause them to forget what they just read about\n               // the recent comments list. This is complicated enough already.\n-              showUnhideTips: false });\n+              showUnhideTips: false } as TipsBoxProps);\n       }\n       // Dim the comments list until all help messages have been closed.\n       dimCommentsStyle = help.isHelpMessageClosed(store, helpMessageFour) ?\n-          null : { opacity: '0.6' };\n+          null : { opacity: '0.5' };\n     }\n \n     const addMorePeopleButton = !page_isGroupTalk(page.pageRole) || !isStaffOrMyPage ? null :\n@@ -573,12 +561,10 @@ export var Sidebar = createComponent({  // RENAME to ContextBar\n           MiniMap(minimapProps))),\n           */\n       r.div({ id: 'dw-sidebar', className: 'esCtxbar' + sidebarClasses, ref: 'sidebar' },\n-        r.div({ className: 'esCtxbar_btns' },\n+        r.div({ className: 'esCtxbar_btns', style: dimCommentsStyle  },\n           CloseSidebarButton({ onClick: this.closeSidebar }),\n           tabButtons),\n         r.div({ className: 'dw-comments esCtxbar_list' },\n-          helpMessageBoxOne,\n-          helpMessageBoxTwo,\n           helpMessageBoxTree,\n           helpMessageBoxFour,\n           r.div({ style: dimCommentsStyle },"
    },
    {
      "sha": "cc17551e294e264f8ec563666e8b45cd7fe28dcf",
      "filename": "client/app-slim/slim-bundle.d.ts",
      "status": "modified",
      "additions": 28,
      "deletions": 8,
      "changes": 36,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/slim-bundle.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/slim-bundle.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/slim-bundle.d.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1,5 +1,4 @@\n \n-/// <reference path=\"server-vars.ts\" />\n /// <reference path=\"model.ts\" />\n /// <reference path=\"translations.d.ts\" />\n /// <reference path=\"../reactjs-types.ts\" />\n@@ -8,6 +7,25 @@ declare const t: TalkyardTranslations;\n \n declare const Bliss: any;\n \n+// Legacy:\n+declare const debiki: {\n+  currentYear: Nr,\n+  prettyDuration: (thenMs: Date | Nr, nowMs: Date | Nr) => St,\n+  prettyLetterDuration: (thenOrDurationMs: Date | Nr, nowMs?: Date | Nr) => St,\n+  v0: {\n+    util: Ay,\n+  },\n+  internal: Ay,\n+  mentionsServerHelp: Ay,\n+};\n+\n+declare const talkyard: {\n+  postElemPostProcessor?: Ay,\n+}\n+\n+\n+declare const eds: ServerVars;\n+\n \n // In constants.ts:\n \n@@ -135,7 +153,7 @@ declare namespace debiki2 {\n \n   function win_isLoginPopup(): Bo;\n   function getMainWin(): MainWin;\n-  function getMainWinStore(): Store;\n+  function win_getSessWinStore(): SessWinStore;\n   function win_canUseCookies(win: MainWin): boolean;\n \n   function getNowMs(): WhenMs;\n@@ -343,8 +361,8 @@ declare namespace debiki2 {\n   function store_maySendDirectMessageTo(store: Store, user: UserInclDetails): boolean;\n   var page_isGroupTalk;\n \n-  function store_getAuthorOrMissing(store: Store, post: Post): BriefUser;\n-  function store_getUserOrMissing(store: Store, userId: UserId, errorCode2?: string): BriefUser;\n+  function store_getAuthorOrMissing(store: DiscStore, post: Post): Pat;\n+  function store_getUserOrMissing(store: DiscStore, userId: PatId, errorCode2?: St): Pat;\n   var store_thisIsMyPage;\n \n   function draftType_toPostType(draftType: DraftType): PostType | U;\n@@ -353,7 +371,7 @@ declare namespace debiki2 {\n   function store_findCatByRefOrId(store: Store, ref: RefOrId): Category | U;\n   function store_ancestorCatsCurLast(store: Store, categoryId: CatId): Cat[];\n   function store_findCatsWhereIMayCreateTopics(store: Store): Category[];\n-  function store_getPostId(store: Store, pageId: PageId, postNr: PostNr): PostId | U;\n+  function store_getPostId(store: DiscStore, pageId: PageId, postNr: PostNr): PostId | U;\n \n   function categories_sortTree(categories: Category[]): CatsTree;\n \n@@ -377,7 +395,7 @@ declare namespace debiki2 {\n   var isMember;\n   var userId_isGuest;\n   function store_isFeatFlagOn(store: Store, featureFlag: St): Bo;\n-  function store_isNoPage(store: Store): boolean;\n+  function isNoPage(pageId: PageId): Bo;\n   function store_isPageDeleted(store: Store): boolean;\n   function page_isAncCatDeld(page: Page): Bo;\n   function store_canDeletePage(store: Store): boolean;\n@@ -496,9 +514,11 @@ declare namespace debiki2 {\n   var MenuItemDivider;\n \n   function UserNameLink(props: {\n-    user: BriefUser, store: Store, onClick?: Ay, avoidFullName?: Bo });\n+      user: Pat, store: Store, onClick?: Ay, avoidFullName?: Bo });\n+\n   function UserName(props: {\n-    user: BriefUser, store: Store, makeLink?: Bo, onClick?: Ay, avoidFullName?: Bo });\n+      user: Pat, store?: Store, settings?: SettingsVisibleClientSide,\n+      makeLink?: Bo, onClick?: Ay, avoidFullName?: Bo });\n \n   var FacebookLogoImage;\n "
    },
    {
      "sha": "cecabdf370af8b8a7ba77702cf06aae0f41000af",
      "filename": "client/app-slim/start-stuff.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/start-stuff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/start-stuff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/start-stuff.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -15,14 +15,29 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n+/// <reference path=\"prelude.ts\" />\n \n debiki.startStuff = function() {\n \n var d = { i: debiki.internal, u: debiki.v0.util };\n \n debiki.debug = window.location.search.indexOf('debug=true') >= 0;\n \n+\n+// Copy any xsrf token to any session iframe.\n if (eds.isInEmbeddedCommentsIframe || eds.isInEmbeddedEditor) {\n+  // This is safe and cannot fail, still, try-catch for now, new code.\n+  // DO_AFTER 2022-01-01 remove try-catch, keep just the contents.\n+  try {\n+    const sessWin = debiki2.getMainWin();\n+    if (!sessWin.typs.xsrfTokenIfNoCookies && typs.xsrfTokenIfNoCookies) {\n+      sessWin.typs.xsrfTokenIfNoCookies = typs.xsrfTokenIfNoCookies;\n+    }\n+  }\n+  catch (ex) {\n+    debiki2.logW(`Multi iframe error? [TyEMANYIFR01]`, ex)\n+  }\n+\n   debiki2.startIframeMessages();\n }\n "
    },
    {
      "sha": "a23258959c030a80970b0e3e89b820574d7a701b",
      "filename": "client/app-slim/store-getters.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/store-getters.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/store-getters.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/store-getters.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -40,7 +40,7 @@ export function store_thisIsMyPage(store: Store): boolean {\n }\n \n \n-export function store_getAuthorOrMissing(store: Store, post: Post): BriefUser {\n+export function store_getAuthorOrMissing(store: DiscStore, post: Post): Pat {\n   // If we're composing a new reply, without having logged in, then, there's not yet\n   // any author id, when rendering the reply preview. [305KGWGH2]\n   // So, at least for now, create a dummy user with the UnknownUserId — later,\n@@ -64,8 +64,8 @@ export function store_getAuthorOrMissing(store: Store, post: Post): BriefUser {\n }\n \n \n-export function store_getUserOrMissing(store: Store, userId: UserId,\n-      errorCode2?: string): BriefUser {\n+export function store_getUserOrMissing(store: DiscStore, userId: PatId,\n+      errorCode2?: St): Pat {\n   const user = store.usersByIdBrief[userId];\n   if (!user) {\n     if (errorCode2) {"
    },
    {
      "sha": "d78b0dabd231db79174033e03f7a07aafc9d990e",
      "filename": "client/app-slim/utils/util.js",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/utils/util.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/utils/util.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/utils/util.js?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -103,6 +103,9 @@ function monthDayYear(when) {\n // ------- Bug functions\n \n \n+// CLEAN_UP SMALLER_BUNDLE  use the ones in  prelude.ts  instead\n+\n+\n // Don't use. Use die2 instead. Could rewrite all calls to die() to use\n // die2 instead, and then rename die2 to die and remove the original die().\n d.u.die = function(message) {"
    },
    {
      "sha": "2eb95fecae1c79ef81de1b20ae43c1455ba96289",
      "filename": "client/app-slim/widgets.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/widgets.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-slim/widgets.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/widgets.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -261,12 +261,13 @@ export function UserNameLink(props: {\n \n \n export function UserName(props: {\n-    user: BriefUser, store: Store, makeLink?: Bo, onClick?: Ay, avoidFullName?: Bo }) {\n+    user: BriefUser, store?: Store, settings?: SettingsVisibleClientSide,\n+    makeLink?: Bo, onClick?: Ay, avoidFullName?: Bo }) {\n \n   // Some dupl code, see discussion.ts, edit-history-dialog.ts & avatar.ts [88MYU2]\n-  const store: Store = props.store;\n+  const settings: SettingsVisibleClientSide = props.settings || props.store.settings;\n   const user: BriefUser = props.user;\n-  const showHow: ShowAuthorHow = store.settings.showAuthorHow;\n+  const showHow: ShowAuthorHow = settings.showAuthorHow;\n \n   // (All StackExchange demo sites use ShowAuthorHow.FullNameThenUsername, so\n   // only used in that if branch, below.)"
    },
    {
      "sha": "b1db5942c5ebc3d97c700f21e3d51ce54075d3ad",
      "filename": "client/app-staff/staff-prelude.staff.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/app-staff/staff-prelude.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/app-staff/staff-prelude.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-staff/staff-prelude.staff.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1,5 +1,5 @@\n /// <reference path=\"../reactjs-types.ts\" />\n-/// <reference path=\"../app-slim/server-vars.ts\" />\n+/// <reference path=\"../app-slim/model.ts\" />\n /// <reference path=\"../app-slim/translations.d.ts\" />\n /// <reference path=\"../app-slim/slim-bundle.d.ts\" />\n /// <reference path=\"../app-more/more-bundle-already-loaded.d.ts\" />"
    },
    {
      "sha": "5af9e4580757e291541295c3347efb5918cf0636",
      "filename": "client/embedded-comments/blog-comments.ts",
      "status": "modified",
      "additions": 522,
      "deletions": 138,
      "changes": 660,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/embedded-comments/blog-comments.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/embedded-comments/blog-comments.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/embedded-comments/blog-comments.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -32,10 +32,13 @@ interface WindowWithTalkyardProps {\n   talkyardLogLevel: number | undefined;\n   talkyardDebug: boolean | number | undefined; // deprecated 2020-06-16\n   talkyardAuthnToken: St | Ay | U;\n+  talkyardManyCommentIframes: Bo | U;\n   edRemoveCommentsAndEditor: () => void;\n   edReloadCommentsAndEditor: () => void;\n   talkyardRemoveCommentsAndEditor: () => void;\n   talkyardReloadCommentsAndEditor: () => void;\n+  talkyardAddCommentsIframe: (ps: { appendInside: HElm, discussionId: St }) => HElm;\n+  talkyardForgetRemovedCommentIframes: () => Vo;\n }\n \n // Later: SSO and HMAC via https://pasteo.io? https://paseto.io/rfc/  [blog_comments_sso]\n@@ -64,10 +67,6 @@ const winDbg = windowWithTalkyardProps.talkyardDebug;\n const talkyardLogLevel: Nr | St = (typeof winLogLvl !== 'undefined') ? winLogLvl : (\n     winDbg === false || winDbg === 0 ? 'warn' : 'trace');\n \n-// For automatic Single Sign-On with PASETO authn tokens.\n-const talkyardAuthnToken = windowWithTalkyardProps.talkyardAuthnToken;\n-\n-\n // Default to logging debug messages, for now, because people send screenshots of the\n // console when sth is amiss, and nice to get the log messages then.\n function makeTalkyardLogFn(isWarn: Bo, consoleLogFn: (...data: Ay[]) => Vo) {\n@@ -90,15 +89,18 @@ function makeTalkyardLogFn(isWarn: Bo, consoleLogFn: (...data: Ay[]) => Vo) {\n   }\n }\n \n+// const logT =\n const logD = makeTalkyardLogFn(false, console.debug);\n const logM = makeTalkyardLogFn(false, console.log);\n const logW = makeTalkyardLogFn(true, console.warn);\n \n+// const j2s = JSON.stringify;\n \n logM(`Starting ${TalkyardVersion} ... ` +\n       `(disable logging by setting talkyardLogLevel = 'warn')`);\n \n \n+\n const d = { i: debiki.internal };\n const serverOrigin = d.i.commentsServerOrigin;\n \n@@ -124,10 +126,38 @@ const insecureSomethingErrMsg = insecureTyIframeProbl ? (\n     \"— If this is your site, what if you get a LetsEncrypt cert? [TyEINSCBLG]\"\n         ) : */  '');\n \n-if (talkyardAuthnToken) {\n-  logM(`Found authn token in talkyardAuthnToken`);\n+\n+// For automatic Single Sign-On with PASETO authn tokens, either in a variable,\n+// or a cookie (cookie better? So not incl in html, although encrypted).\n+const authnTokenInVar = windowWithTalkyardProps.talkyardAuthnToken;\n+const authnTokenCookieMatches: St[] | Nl =\n+        document.cookie.match(\n+            // (There're no spaces in PASETO tokens.)\n+            /(^|;)\\s*TalkyardAuthnToken\\s*=\\s*([^\\s;]+)/);\n+const authnTokenInCookie: StV = authnTokenCookieMatches ? authnTokenCookieMatches[2] : null;\n+\n+if (authnTokenInCookie) {\n+  // Delete, these should be one time tokens [stop_emb_aun_tkn_rply],\n+  // and shouldn't linger after pat has logged out from the embedd*ing* website.\n+  // https://stackoverflow.com/questions/2144386/how-to-delete-a-cookie\n+  document.cookie = 'TalkyardAuthnToken=; Max-Age=0; path=/';\n+}\n+\n+if (authnTokenInVar) {\n+  logM(`Found authn token in js var`);\n+}\n+if (authnTokenInCookie) {\n+  logM(`Found authn token in cookie`);\n }\n \n+const differentTokens =\n+        authnTokenInVar && authnTokenInCookie && authnTokenInVar !== authnTokenInCookie;\n+if (differentTokens) {\n+  logW(`Authn token in var and cookie differs, ignoring both`);\n+}\n+\n+const autnToken: StV = differentTokens ? null : authnTokenInVar || authnTokenInCookie;\n+\n if (insecureSomethingErrMsg) {\n   logW(insecureSomethingErrMsg);\n }\n@@ -136,18 +166,55 @@ if (insecureSomethingErrMsg) {\n tyns.fetchAndFillInCommentCounts(serverOrigin);\n \n \n-var oneTimeLoginSecret;\n-var postNrToFocus;  // RENAME to ...AfterCommentsLoaded\n+let oneTimeLoginSecret: St | U;\n+let authnTried = false;\n+let postNrToFocus: PostNr | U;  // RENAME to ...AfterCommentsLoaded\n+\n+let loadWeinre: Bo | U;\n+\n+// Could move 2 to enums-and-constants.ts. [emb_scr_ver]\n+const scriptVersionQueryParam = '&embeddingScriptV=2';\n+\n+const EditorIframeNr = 0;\n+const FirstCommentsIframeNr = 1;\n+// 2, 3, 4 etc are other comments iframes.\n+let numDiscussions = 0;\n+\n+let sessionIframeInited: Bo | U;\n+let sessionIframe: HIframeElm | U | Nl;\n+\n+let commentsElems: HTMLCollectionOf<Elm> | U | Nl;\n+let loadingElms: HElm[] = [];\n+let iframeElms: HIframeElm[] = [];\n+let iframesInited: (Bo | U)[] = [];\n+let pendingIframeMessages: Ay[][] = [];\n+\n+let editorIframe: HIframeElm | U;\n+let editorWrapper: HElm | U;\n+let editorPlaceholder: HElm | U;\n+\n+\n+/*\n+Maybe use MutationObserver — but probaly, don't, not needed?\n+// (MutationObserver won't work in Opera Mini from 2015, but that's a while ago.)\n+const mutationObserver = new MutationObserver(function (mutations, observer) {\n+  for (const mutation of mutations) {\n+    console.log(`MUTATION: ${mutation.type} tgt: ${mutation.target}`);\n+    if (mutation.type !== 'childList')\n+      continue;\n+    \n+    console.log(`mutation.removedNodes.length: ${mutation.removedNodes.length}`);\n+    console.log(`mutation.removedNodes: ${mutation.removedNodes}`);\n+  }\n+});\n+\n+// We don't know what elems the embedding page (blog post) might remove that\n+// makes comment iframes disappear. So observe everything. (Performance impact\n+// should be negligible, compared to the actual mutations.)\n+mutationObserver.observe(document.body, { subtree: true, childList: true });\n+*/\n \n-const commentsIframeName = 'edComments';\n \n-var commentsIframe;\n-var commentsIframeInited;  // dupl, remove, use Arr instead (contents dyn upd)\n-var commentsIframeInitedArr = [false];\n-var editorIframe;\n-var editorIframeInitedArr = [false];\n-var editorWrapper;\n-var editorPlaceholder;\n \n // We store a weak session in localStorage, if 3rd party cookies disabled.\n // It's fairly ok to use localStorage in our case, see:\n@@ -197,21 +264,164 @@ addEventListener('scroll', messageCommentsIframeNewWinTopSize);\n addEventListener('message', onMessage, false);\n \n \n+\n function loadCommentsCreateEditor() {\n-  logM(\"loadCommentsCreateEditor()\");\n+  findOneTimeLoginSecret();\n+  findCommentToScrollTo();\n+  createSessionFrame();\n+}\n+\n+\n+\n+function createSessionFrame() {\n+  if (sessionIframe)\n+    return;\n+\n+  logD(\"createSessionFrame()\");\n+  sessionIframe = Bliss.create('iframe', {\n+    id: 'talkyard-session',\n+    name: 'edComments',\n+    title: \"Talkyard comments helper iframe\",\n+    src: serverOrigin + '/-/session-iframe',\n+    height: 0, // don't `hide()` [.hdn_iframe]\n+    'aria-hidden': true,\n+    style: {\n+      padding: 0,\n+      margin: 0,\n+      width: '100%',\n+      border: 'none',\n+      overflow: 'hidden'\n+    },\n+    allowtransparency: 'true',\n+    frameborder: 0,\n+    scrolling: 'no',\n+    horizontalscrolling: 'no',\n+    verticalscrolling: 'no'\n+  });\n+\n+  Bliss.inside(sessionIframe, document.body);\n+}\n+\n+\n+\n+function loadFirstCommentsIframe() {\n+  logD(\"loadFirstCommentsIframe()\");\n   // Create <iframe>s for embedded comments and an embedded editor.\n   // Show a \"Loading comments...\" message until comments loaded.\n   // For now, choose the first .talkyard-comments only, because\n   // the embedded editor will be bound to one page only, and two editors\n   // seems complicated.\n-  var commentsElems = document.getElementsByClassName('ed-comments'); // old name [2EBG05]\n+  commentsElems = document.getElementsByClassName('ed-comments'); // old name [2EBG05]\n   if (!commentsElems.length)\n     commentsElems = document.getElementsByClassName('talkyard-comments');\n   if (!commentsElems.length)\n     return;\n-  var commentsElem = commentsElems[0];\n-  logM(\"found commentsElem\");\n \n+  numDiscussions = commentsElems.length;\n+  logD(`Found ${numDiscussions} Ty comment elems`);\n+\n+  intCommentIframe(commentsElems[0], FirstCommentsIframeNr, numDiscussions > 1);\n+}\n+\n+\n+\n+// It's simpler to debug, if waiting with creating additional comments iframes\n+// until the first one has been created?\n+function loadRemainingCommentIframes() {\n+  logD(\"loadRemainingCommentIframes()\");\n+  if (!commentsElems)\n+    return;\n+\n+  // But skip index 0 — that iframe has been loaded already.\n+  for (let i = 1; i < commentsElems.length; ++i) {\n+    intCommentIframe(\n+          commentsElems[i], i + FirstCommentsIframeNr, numDiscussions > 1);\n+  }\n+\n+  // No need to hang on to the comments elems.\n+  commentsElems = null;\n+}\n+\n+\n+/**\n+ * Ex:\n+ *   talkyardAddCommentsIframe({ appendInside: document.body, discussionId: 'abc123' });\n+ */\n+function addCommentsIframe(ps: { appendInside: HElm | St, discussionId: St }): HElm {\n+  if (!windowWithTalkyardProps.talkyardManyCommentIframes)\n+    throw Error(`Set  talkyardManyCommentIframes = true  to allow many comments iframes`);\n+\n+  // Tests: TyTEMANYEMBDISAPI.TyTAPNDIFR283\n+  const appendIn: HElm = typeof ps.appendInside === 'string' ?\n+          document.querySelector(ps.appendInside) : ps.appendInside;\n+  if (!appendIn) {\n+    logW(`No elem to append in: ${ps.appendInside}`);\n+    return;\n+  }\n+\n+  logD(`Creating iframe for disc id ${ps.discussionId\n+          } in #${appendIn.id}.${appendIn.className} ...`);\n+\n+  const wrapperDiv = Bliss.create('div', {\n+    className: 'talkyard-comments',\n+    'data-discussion-id': ps.discussionId,\n+  });\n+\n+  // (At least iframesInited needs to be appended to. [.if_initd])\n+  loadingElms.push(undefined);\n+  iframeElms.push(undefined);\n+  iframesInited.push(undefined);\n+  pendingIframeMessages.push(undefined);\n+  numDiscussions = iframeElms.length - FirstCommentsIframeNr;\n+\n+  Bliss.inside(wrapperDiv, appendIn);\n+  const commentIframeNr = iframeElms.length - 1;\n+  intCommentIframe(wrapperDiv, commentIframeNr, numDiscussions >= 2);\n+  return wrapperDiv;\n+}\n+\n+\n+\n+function forgetRemovedCommentIframes() {\n+  for (let i = iframeElms.length - 1; i >= 0; --i) {\n+    const iframe = iframeElms[i];\n+    if (!iframe.isConnected)  {\n+      loadingElms.splice(i, 1);\n+      iframeElms.splice(i, 1);\n+      iframesInited.splice(i, 1);\n+      pendingIframeMessages.splice(i, 1);\n+      numDiscussions = iframeElms.length - FirstCommentsIframeNr;\n+      logD(`Forgot removed iframe ${iframe.name}, ${numDiscussions} discussions left.`);\n+    }\n+  }\n+}\n+\n+\n+\n+/// Loads newly added embedded discussions, without the embedding page having\n+/// to call talkyardAddCommentsIframe(..).\n+/*\n+function loadNewCommentIframes(commentsElem, iframeNr: Nr, manyCommentsIframes: Bo) {\n+  const newCommentElems = document.querySelectorAll('.talkyard-comments:not(.ty_IfrCr)');\n+  const numOld = commentsElems.length;\n+  for (let i = 0; i < newCommentElems.length; ++i) {\n+    const iframeNr = numOld + i + FirstCommentsIframeNr;\n+    intCommentIframe(\n+          newCommentElems[i], iframeNr, i > 1);\n+  }\n+}  */\n+\n+\n+\n+function intCommentIframe(commentsElem, iframeNr: Nr, manyCommentsIframes: Bo) {\n+  const existingIframe = commentsElem.querySelector('.ty_CmtsIfr');\n+  if (existingIframe)\n+    return;\n+\n+  logD(`intCommentIframe(..., iframeNr = ${iframeNr}, ...)`);\n+\n+  // The server wants the embedding URL, to know if it should add 'localhost'\n+  // to the allowed frame-ancestors, for development. [embng_url]\n   var embeddingUrl = window.location.origin + window.location.pathname + window.location.search;\n   var embeddingUrlParam = 'embeddingUrl=' + embeddingUrl;\n \n@@ -233,17 +443,32 @@ function loadCommentsCreateEditor() {\n   if (/[\\t\\r\\n]/.test(discussionId)) {\n     var errorMessage = \"Bad discussion id: \" + discussionId + ' [TyEEMDIID]';\n     logW(errorMessage);\n-    throw Error(errorMessage);\n+    if (manyCommentsIframes) return false;  // other iframes might work\n+    else throw Error(errorMessage);\n   }\n   var discIdParam = discussionId ? `discussionId=${discussionId}&` : '';\n \n+  if (windowWithTalkyardProps.talkyardManyCommentIframes && !discussionId) {\n+    // Without a discussion id, how could we know which (if any) of the\n+    // iframe discussion should be associated with just the URL or URL path?\n+    // Or if there's a discussion with no id, associated with the URL,\n+    // and then a 2nd discussion iframe is added, with an id\n+    // — the Ty server won't know if this is supposed to be a separate discussion,\n+    // or if the blog admin just wants to add the id, to the already existing discussion.\n+    const errMsg =\n+          `iframe nr ${iframeNr}: Attribute 'data-discussion-id=...' missing — ` +\n+          `it's required if many comment iframes allowed [TyEMANYIFRID]`;\n+    throw Error(errMsg);\n+  }\n+\n   // To place the lazy-created embedded discussion pages in a specific\n   // category. E.g.:  data-category=\"extid:some_category\"\n   var categoryRef = commentsElem.getAttribute('data-category');\n   if (/[\\t\\r\\n]/.test(categoryRef)) {\n     var errorMessage = `Bad category ref: ${categoryRef} [TyEEMCATRFCL]`;\n     logW(errorMessage);\n-    throw Error(errorMessage);\n+    if (manyCommentsIframes) return false;\n+    else throw Error(errorMessage);\n   }\n   const catRefParam = categoryRef ? `category=${categoryRef}&` : '';\n \n@@ -258,22 +483,21 @@ function loadCommentsCreateEditor() {\n \n   const allUrlParams =\n           edPageIdParam + discIdParam + catRefParam + embeddingUrlParam +\n-          htmlClassParam + logLevelParam;\n+          htmlClassParam + logLevelParam + scriptVersionQueryParam;\n \n   var commentsIframeUrl = serverOrigin + '/-/embedded-comments?' + allUrlParams;\n-  var loadWeinre = window.location.hash.indexOf('&loadWeinre') >= 0;  // [WEINRE]\n+  loadWeinre = window.location.hash.indexOf('&loadWeinre') >= 0;  // [WEINRE]\n   if (loadWeinre) {\n     // Let's append the whole hash fragment — nice to see any client \"name\"\n     // you can debug-include in the hash, in Weinre's debug targets list.\n     commentsIframeUrl += location.hash;\n   }\n \n   // Don't `hide()` the iframe, then FireFox acts as if it doesn't exist: FireFox receives\n-  // no messages at all from it.\n-  commentsIframeInited = false;\n-  commentsIframe = Bliss.create('iframe', {\n+  // no messages at all from it.  [.hdn_iframe]\n+  const commentsIframe = Bliss.create('iframe', {\n     id: 'ed-embedded-comments',\n-    name: commentsIframeName,\n+    name: 'edComments-' + iframeNr,\n     className: 'p_CmtsIfr ty_CmtsIfr',   // DEPRECATE old name p_CmtsIfr\n     // A title attr, for better accessibility. See: https://www.w3.org/TR/WCAG20-TECHS/H64.html\n     title: iframeTitle || \"Comments\",\n@@ -294,7 +518,11 @@ function loadCommentsCreateEditor() {\n   });\n \n   Bliss.start(commentsIframe, commentsElem);\n-  logM(\"inserted commentsIframe\");\n+\n+  commentsElem.classList.add('ty_IfrCr');  // iframe created\n+\n+  iframeElms[iframeNr] = commentsIframe;\n+  logD(`Inserted commentsIframes[${iframeNr}]`);\n \n   if (insecureSomethingErrMsg) {\n     // If insecureTyIframeProbl, then for sure the comments won't load.\n@@ -320,10 +548,17 @@ function loadCommentsCreateEditor() {\n   var loadingCommentsElem = Bliss.create('p', {\n     id: 'ed-loading-comments',\n     className: 'p_Ldng p_Ldng-Cmts',\n-    text: \"Loading comments ...\"\n+    textContent: \"Loading comments ...\"\n   });\n \n   Bliss.start(loadingCommentsElem, commentsElem);\n+  loadingElms[iframeNr] = loadingCommentsElem;\n+}\n+\n+\n+\n+function createEditorIframe() {\n+  logD(`createEditorIframe()`);\n \n   editorWrapper = Bliss.create('div', {\n     id: 'ed-editor-wrapper',\n@@ -352,9 +587,13 @@ function loadCommentsCreateEditor() {\n   });\n \n   Bliss.inside(editorWrapper, document.body);\n-  logM(\"inserted editorWrapper\");\n+  logD(\"inserted editorWrapper\");\n+\n+  // [embng_url]\n+  let editorIframeUrl =\n+        `${serverOrigin}/-/embedded-editor?embeddingUrl=${location.origin}` +\n+        scriptVersionQueryParam;\n \n-  var editorIframeUrl = serverOrigin + '/-/embedded-editor?' + allUrlParams;\n   if (loadWeinre) {\n     editorIframeUrl += location.hash;\n   }\n@@ -364,7 +603,8 @@ function loadCommentsCreateEditor() {\n     name: 'edEditor',\n     className: 'p_EdrIfr',\n     style: {\n-      display: 'block', // otherwise 'inline' —> some blank space below, because of descender spacing?\n+      // Otherwise 'inline' —> some blank space below, because of descender spacing?\n+      display: 'block',\n       padding: 0,\n       margin: 0,\n       width: '100%',\n@@ -375,33 +615,56 @@ function loadCommentsCreateEditor() {\n     src: editorIframeUrl\n   });\n \n+  iframeElms[EditorIframeNr] = editorIframe;\n+\n   Bliss.inside(editorIframe, editorWrapper);\n-  logM(\"inserted editorIframe\");\n+  logD(\"inserted editorIframe\");\n \n-  findOneTimeLoginSecret();\n-  findCommentToScrollTo();\n   makeEditorResizable();\n }\n \n \n+\n function removeCommentsAndEditor() {\n-  logM(\"removeCommentsAndEditor()\");\n-  if (commentsIframe) {\n-    commentsIframe.remove();\n-    commentsIframe = null;\n-    commentsIframeInited = false;\n-    commentsIframeInitedArr = [false];\n+  logD(\"removeCommentsAndEditor()\");\n+\n+  postNrToFocus = undefined;\n+  oneTimeLoginSecret = undefined;\n+  // Maybe?: talkyardAuthnToken = undefined, since won't be able to reuse anyway.\n+  authnTried = false;\n+\n+  for (let i = 0; i < iframeElms.length; ++i) {\n+    const iframe = iframeElms[i];\n+    if (iframe) {\n+      iframe.remove();\n+    }\n+    const loadingText = loadingElms[i];\n+    if (loadingText) {\n+      loadingText.remove();\n+    }\n   }\n+\n+  loadingElms.length = 0;\n+  iframeElms.length = 0;\n+  iframesInited.length = 0;\n+  pendingIframeMessages.length = 0;\n+  numDiscussions = 0;\n+\n   if (editorIframe) {\n-    editorIframe.remove();\n+    //editorIframe.remove();  // done above\n     editorIframe = null;\n     editorWrapper.remove();\n     editorWrapper = null;\n-    editorIframeInitedArr = [false];\n+  }\n+  if (sessionIframe) {\n+    sessionIframe.remove();\n+    sessionIframe = null;\n+    sessionIframeInited = false;\n   }\n }\n \n \n+\n // Editor placeholder, so the <iframe> won't occlude the lower parts of the page.\n function createEditorPlaceholder() {\n   editorPlaceholder = Bliss.create('div', {\n@@ -412,6 +675,7 @@ function createEditorPlaceholder() {\n }\n \n \n+\n /* Enable Utterscroll in parent window.\n // Once the iframe has been loaded, Utterscroll will run in the iframe too,\n // and the two Utterscroll instances will cooperate via `window.postMessage`.\n@@ -422,51 +686,28 @@ jQuery(function($) {   // xx\n }); */\n \n \n-function messageCommentsIframeNewWinTopSize() {\n-  // Dupl code (6029084583).\n-  // Remove this; reuse sendToIframeImpl instead?\n \n-  if (!commentsIframe) {\n-    // Not yet created, or maybe got deleted by some other Javascript.\n-    return;\n-  }\n+function messageCommentsIframeNewWinTopSize() {\n+  sendToComments(calcSizes);\n+}\n \n-  // Wait until the <iframe> is \"alive\".\n-  // Posting a message when the html <iframe> has been created but before it's been fully\n-  // loaded, as of 2019-03 makes Chrome send the message to this parent frame instead,\n-  // resulting in errors like these in the dev console:\n-  //\n-  //   Failed to execute 'postMessage' on 'DOMWindow': The target origin\n-  //   provided ('https://comments-for-the-blog-address.talkyard.net') does not match\n-  //   the recipient window's origin ('https://the-blog-address.com').\n-  //\n-  // Explanation: postMessage tried to send to https://comments-for... (the target origin) but\n-  // instead Chrome sent the message to the main window https://the-blog-address\n-  // (the recipient origin).\n-  //\n-  // This error typically does not happen on localhost, because then the iframe loads\n-  // quickly. Instead, it happens in production, sometimes only. To reproduce, on localhost,\n-  // set a breakpoint in the app server, in EmbeddedTopicsController.showTopic [5BRW02],\n-  // to block the iframe from loading, and then you can reproduce this error.\n-  //\n-  if (!commentsIframeInited) {\n-    setTimeout(messageCommentsIframeNewWinTopSize, 1000);\n-    return;\n-  }\n \n+function calcSizes(commentsIframe: HIframeElm): St {\n   var rect = commentsIframe.getBoundingClientRect();\n   // We're interested in the height part of the viewport that is used for the iframe.\n \n   // If the iframe extends below the lower window edge, we see only the part of it\n   // down to `window.innerHeight` (then, don't use `rect.bottom`).\n   var height = Math.min(window.innerHeight, rect.bottom);\n+   // iframeVisibleBottomInParentWin\n \n   // If the iframe starts above the upper window edge, we don't see the parts of it above 0 (zero).\n   // And if it starts below the upper window edge, then, `rect.top` is where it starts.\n   var iframeVisibleHeight = height - Math.max(0, rect.top);\n+                                  // iframeVisibleTopInParentWin\n \n-  sendToComments('[\"iframeOffsetWinSize\",' +\n-      '{ \"top\":' + (-rect.top) +  // why did I negate?\n+  return ('[\"iframeOffsetWinSize\",' +\n+      '{ \"top\":' + (-rect.top) +  // why did I negate? [why_neg_ifr_top]\n       ', \"height\":' + height +    // rename 'height'? but to what? Maybe 'iframeVisibleBottom'?\n       ', \"iframeVisibleHeight\": ' + iframeVisibleHeight + '}]');\n }\n@@ -481,7 +722,7 @@ function messageCommentsIframeToMessageMeToScrollTo(postNr) {\n \n \n function onMessage(event) {\n-  if (!commentsIframe) return;\n+  if (!sessionIframe) return;\n \n   // The message is a \"[eventName, eventData]\" string because IE <= 9 doesn't support\n   // sending objects. CLEAN_UP COULD send a real obj nowadays, because we don't support IE 9 any more.\n@@ -509,7 +750,24 @@ function onMessage(event) {\n   // COULD REFACTOR: Actually, child iframes can message each other directly;\n   // need not send via the parent.\n \n-  const iframe = findIframeThatSent(event);\n+  if (sessionIframe.contentWindow === event.source) {\n+    // @ifdef DEBUG\n+    if (eventName !== 'iframeInited')\n+      throw Error(`Unexpected message from session iframe: ${eventName}  TyE4MREJ36`);\n+    // @endif\n+    logM(`Session iframe inited`);\n+    sessionIframeInited = true;\n+    createEditorIframe();  // [ed_ifr_1st]\n+    return;\n+  }\n+\n+  const anyFrameAndNr: [HIframeElm, Nr] | U = findIframeThatSent(event);\n+  if (!anyFrameAndNr)\n+    return;\n+\n+  const [iframe, iframeNr] = anyFrameAndNr;\n+  const isFromCommentsIframe = iframeNr >= FirstCommentsIframeNr;\n+  const isFromEditorIframe = iframeNr === EditorIframeNr;\n \n   let assertIsFromEditorToComments = function() {};\n   let assertIsFromCommentsToEditor = function() {};\n@@ -521,38 +779,38 @@ function onMessage(event) {\n     }\n   };\n   assertIsFromCommentsToEditor = function() {\n-    if (iframe !== commentsIframe) {\n+    if (!isFromCommentsIframe) {\n       logW(`Bad msg dir [TyEMSGDIR2]: '${eventName}', ${JSON.stringify(eventData)}`);\n       debugger;\n     }\n   };\n   // @endif\n \n-  function sendToOtherIframe(what) {\n-    if (iframe === editorIframe) {\n-      sendToComments(what);\n-    }\n-    else if (iframe === commentsIframe) {\n-      sendToEditor(what);\n-    }\n-    else {\n-      // Is this in the future and there's now an iframe for one\n-      // of the sidebars?\n-    }\n-  }\n-\n   switch (eventName) {\n     case 'iframeInited':\n+      iframesInited[iframeNr] = true;\n \n-      if (iframe !== commentsIframe) {\n+      if (isFromEditorIframe) {\n         logM(`Editor iframe inited`);\n-        editorIframeInitedArr = [true];\n+        loadFirstCommentsIframe();  // [ed_ifr_1st]\n         return;\n       }\n \n-      logM(`Comments iframe inited`);\n-      commentsIframeInited = true;\n-      commentsIframeInitedArr = [true];\n+      logM(`Comments iframe nr ${iframeNr} inited`);\n+\n+      if (iframeNr === FirstCommentsIframeNr) {\n+        loadRemainingCommentIframes();\n+      }\n+\n+      // If something prevented the editor from loading, let's continue anyway,\n+      // so the comments at least appear, although wouldn't be possible to reply.\n+      // (So start at i = FirstCommentsIframeNr, not 0.)\n+      for (let i = FirstCommentsIframeNr; i < iframesInited.length; ++i) { // [.if_initd]\n+        if (!iframesInited[i])\n+          return;\n+      }\n+\n+      logM(`All comment iframes inited — continuing ...`);\n \n       // Any comment to scroll into view?\n       //\n@@ -568,17 +826,22 @@ function onMessage(event) {\n \n       // Can we login? Already logged in?\n       //\n-      // Log in via only one comments iframe — otherwise there'd be races\n+      // Log in via the first comments iframe only — otherwise there'd be races\n       // and unnecessarily many server requests.\n       //\n-      if (talkyardAuthnToken) {\n-        logM(`Sending authn token to comments iframe`);\n-        sendToComments(\n-              JSON.stringify(['loginWithAuthnToken', talkyardAuthnToken]));\n+      if (authnTried) {\n+        // Noop.\n+      }\n+      else if (autnToken) {\n+        logM(`Sending authn token to first comments iframe`);\n+        sendToFirstCommentsIframe(\n+              JSON.stringify(['loginWithAuthnToken', autnToken]));\n       }\n       else if (oneTimeLoginSecret) {\n         // Tell the comments iframe to login, using our one-time secret.  [306KUD244]\n-        sendToComments(`[\"loginWithOneTimeSecret\", \"${oneTimeLoginSecret}\"]`);\n+        logM(`Sending one time login secret to first comments iframe`);\n+        sendToFirstCommentsIframe(\n+              `[\"loginWithOneTimeSecret\", \"${oneTimeLoginSecret}\"]`);\n       }\n       else {\n         // Resume any old session.\n@@ -591,7 +854,8 @@ function onMessage(event) {\n         // then we won't remember the session again — so that after page reload,\n         // any resume-session error message won't re-appear.\n         //\n-        var sessionStr;\n+        logM(`Resuming old session`);\n+        let sessionStr;\n         try {\n           sessionStr = theStorage.getItem('talkyardSession');\n           theStorage.removeItem('talkyardSession');  // see above (3548236)\n@@ -602,28 +866,37 @@ function onMessage(event) {\n         if (sessionStr) {\n           try {\n             const session = JSON.parse(sessionStr);\n-            sendToComments(['resumeWeakSession', session]);\n+            sendToFirstCommentsIframe(\n+                  ['resumeWeakSession', session]);\n           }\n           catch (ex) {\n             logW(\n                 `Error parsing 'talkyardSession', this: \"${sessionStr}\" [TyEPARSEWKSID]`, ex);\n           }\n         }\n       }\n+      authnTried = true;\n+\n       break;\n     case 'setIframeSize':\n+      //logT(`setIframeSize ${j2s(eventData)}`);\n+\n       setIframeSize(iframe, eventData);\n-      // The comments iframe wants to know the real win dimensions, so it can position modal\n-      // dialogs on screen. But wait until the iframe has been resized — because if\n-      // the iframe bottom after the above resize, is higher up than the window bottom,\n+      // The comments iframes want to know the real win dimensions, so they can position\n+      // dialogs on screen (so pat can see the dialogs). But wait until [the iframe\n+      // whose size we're changing] has been resized — because if the iframe bottom\n+      // after having been resized, is higher up than the window bottom,\n       // then that'd reduce the height we send to the iframe.\n-      if (iframe === commentsIframe) {\n-        setTimeout(messageCommentsIframeNewWinTopSize);\n+      if (isFromCommentsIframe) {\n+        setTimeout(\n+              messageCommentsIframeNewWinTopSize);\n       }\n       // Remove the \"loading comments\" info text.\n-      var loadingText = document.getElementById('ed-loading-comments');\n-      if (loadingText)\n-        loadingText.parentNode.removeChild(loadingText);\n+      var loadingText = loadingElms[iframeNr];\n+      if (loadingText) {\n+        loadingText.remove();\n+        loadingElms[iframeNr] = undefined;\n+      }\n       break;\n     case 'scrollToPostNr':\n       // The comments iframe will calculate the rectangle to scroll into view,\n@@ -652,7 +925,7 @@ function onMessage(event) {\n     case 'authnErr':\n       logW(`Error logging in using ${eventData.prettyMethod}. ` +\n             `Check the console log messages in the Talkyard comments iframe ` +\n-            `for details (its name is \"${commentsIframeName}\").`)\n+            `for details (its name is 'edComments-1').`)\n       break;\n \n     case 'justLoggedIn':\n@@ -688,7 +961,7 @@ function onMessage(event) {\n       catch (ex) {\n         logW(`Error setting 'talkyardSession' in  theStorage [TyESETWKSID]`, ex);\n       }\n-      sendToOtherIframe(event.data);\n+      sendToOtherIframes(event.data, iframeNr);\n       break;\n \n     case 'logoutClientSideOnly':\n@@ -699,8 +972,8 @@ function onMessage(event) {\n       catch (ex) {\n         logW(`Error removing 'talkyardSession' from  theStorage [TyERMWKSID]`, ex);\n       }\n-      sendToOtherIframe(event.data);\n-      if (iframe === commentsIframe) {\n+      sendToOtherIframes(event.data, iframeNr);\n+      if (isFromCommentsIframe) {\n         showEditor(false);\n       }\n       if (eventData.goTo) {\n@@ -718,14 +991,23 @@ function onMessage(event) {\n       break;\n     case 'showEditsPreview':  // REMOVE DO_AFTER 2020-09-01 deprecated\n     case 'showEditsPreviewInPage':\n+      // REMOVE\n+      // @ifdef DEBUG\n+      throw Error('TyE306MWEG25_06');\n+      // @endif\n       assertIsFromEditorToComments();\n       sendToComments(event.data);\n       break;\n     case 'scrollToPreview':\n       assertIsFromEditorToComments();\n       sendToComments(event.data);\n       break;\n-    case 'hideEditorAndPreview':\n+    case 'hideEditorAndPreview': // CLEAN_UP REMOVE_AFTER 2021-10-01 this line only.\n+      // REMOVE\n+      // @ifdef DEBUG\n+      throw Error('TyE306MWEG25_07');\n+      // @endif\n+    case 'hideEditor':\n       assertIsFromEditorToComments();\n       showEditor(false);\n       sendToComments(event.data);\n@@ -737,28 +1019,45 @@ function onMessage(event) {\n       setEditorMinimized(eventData);\n       break;\n     case 'editorToggleReply':\n+      // REMOVE\n+      // @ifdef DEBUG\n+      throw Error('TyE306MWEG25_01');\n+      // @endif\n       assertIsFromCommentsToEditor();\n       sendToEditor(event.data);\n       break;\n     case 'handleReplyResult':\n+      // REMOVE\n+      // @ifdef DEBUG\n+      throw Error('TyE306MWEG25_02');\n+      // @endif\n       assertIsFromEditorToComments();\n       sendToComments(event.data);\n       break;\n     case 'editorEditPost':\n+      // REMOVE\n+      // @ifdef DEBUG\n+      throw Error('TyE306MWEG25_03');\n+      // @endif\n       assertIsFromCommentsToEditor();\n       sendToEditor(event.data);\n       break;\n     case 'handleEditResult':\n+      // REMOVE\n+      // @ifdef DEBUG\n+      throw Error('TyE306MWEG25_04');\n+      // @endif\n       assertIsFromEditorToComments();\n       sendToComments(event.data);\n       break;\n     case 'patchTheStore':\n-      sendToOtherIframe(event.data);\n+      sendToOtherIframes(event.data, iframeNr);\n       break;\n   }\n }\n \n \n+\n function setIframeSize(iframe, dimensions) {\n   // Previously: iframe.style.width = dimensions.width + 'px'; — but now 2d scrolling disabled.\n   iframe.style.height = dimensions.height + 'px';\n@@ -768,51 +1067,119 @@ function setIframeSize(iframe, dimensions) {\n }\n \n \n-function findIframeThatSent(event) {  // [find_evt_ifrm]\n+\n+/// Returns: [iframe, index] or undefined.\n+function findIframeThatSent(event): [HIframeElm, Nr] | U {  // [find_evt_ifrm]\n   // See http://stackoverflow.com/a/18267415/694469\n-  if (commentsIframe && commentsIframe.contentWindow === event.source)\n-    return commentsIframe;\n-  if (editorIframe && editorIframe.contentWindow === event.source)\n-    return editorIframe;\n+  for (let i = 0; i < iframeElms.length; ++i) {\n+    const comIfr = iframeElms[i];\n+    if (comIfr && comIfr.contentWindow === event.source)\n+      return [comIfr, i];\n+  }\n }\n \n \n-const pendingMainIframeMessages = [];\n+\n+\n+function sendToOtherIframes(message, skipIframeNr: Nr) {\n+  // Send to all (except for the one to skip). If we have a specific iframe\n+  // in mind, then we postMessage() to that one directly instead. [post_dir_2_ifr]\n+  for (let i = 0; i < iframeElms.length; ++i) {\n+    if (i === skipIframeNr) {\n+      continue;\n+    }\n+    const otherIframe = iframeElms[i];\n+    sendToOneIframe(otherIframe, message);\n+  }\n+}\n+\n \n function sendToComments(message) {\n-  sendToIframeImpl(\n-      commentsIframe, commentsIframeInitedArr, pendingMainIframeMessages, message);\n+  sendToOtherIframes(message, EditorIframeNr);\n }\n \n \n-const pendingEditorIframeMessages = [];\n \n function sendToEditor(message) {\n-  sendToIframeImpl(\n-      editorIframe, editorIframeInitedArr, pendingEditorIframeMessages, message);\n+  sendToOneIframe(editorIframe, message);\n+}\n+\n+\n+\n+function sendToFirstCommentsIframe(message: Ay) {   // [1st_com_frame]\n+  sendToOneIframe(iframeElms[FirstCommentsIframeNr], message);\n }\n \n-function sendToIframeImpl(iframe, initedArr: boolean[], pendingMessages,\n-      message: any | null) {\n+\n+\n+function sendToOneIframe(iframe, message: any | null, retryNr: Nr = 0) {\n+  //initedArr: boolean[], pendingMessages,\n   // Dupl code (6029084583).\n \n+  const iframeNr: Nr = iframeElms.indexOf(iframe);\n+  if (iframeNr === -1) {\n+    // Gone, skip message.\n+    return;\n+  }\n+\n+  const iframeInited = iframesInited[iframeNr];\n+  const pendingMessages = pendingIframeMessages[iframeNr] || [];\n+  pendingIframeMessages[iframeNr] = pendingMessages;\n+\n   // Sometimes one iframe comes alive and wants to message the other one,\n   // before that other iframe is ready.\n-  // [E2EBUG] it's not impossible that an e2e test browser super quickly clicks something,\n-  // before any pending message has been delivered?  This'd be harmless — would only\n-  // affect e2e tests; humans aren't that fast.\n   if (message) {\n     pendingMessages.push(message);\n   }\n-  if (!initedArr[0]) {\n+\n+  if (!pendingMessages.length)\n+    return;\n+\n+  // Wait until the <iframe> is \"alive\".\n+  // Posting a message when the html <iframe> has been created but before it's been fully\n+  // loaded, as of 2019-03 made Chrome send the message to this parent window instead,\n+  // resulting in errors like these in the dev console:\n+  //\n+  //   Failed to execute 'postMessage' on 'DOMWindow': The target origin\n+  //   provided ('https://comments-for-the-blog-address.talkyard.net') does not match\n+  //   the recipient window's origin ('https://the-blog-address.com').\n+  //\n+  // Explanation: postMessage tried to send to https://comments-for... (the target origin)\n+  // but instead Chrome sent the message to the top window, https://the-blog-address\n+  // (the recipient origin).\n+  //\n+  // This error typically does not happen on localhost, because then the iframe loads\n+  // quickly. Instead, it happens in production, sometimes only. To reproduce, on localhost,\n+  // set a breakpoint in the app server, in EmbeddedTopicsController.showTopic [5BRW02],\n+  // to block the iframe from loading, and then you can reproduce this error.\n+  //\n+  if (!iframeInited) {\n     setTimeout(function() {\n-      sendToIframeImpl(iframe, initedArr, pendingMessages, null);\n+      // Maybe the iframe is gone, was removed before it got inited?\n+      // If so, remove it from our iframes list — then, indexOf() above, won't\n+      // find it so we'd return and skip the message.\n+      if ((retryNr % 5) === 1) {\n+        forgetRemovedCommentIframes();\n+      }\n+      sendToOneIframe(iframe, null, retryNr + 1);\n     }, 500);\n     return;\n   }\n+\n+  // Iframe inited, but contents gone? That'd mean it got removed by javascript.\n+  if (!iframe.contentWindow) {\n+    // If many iframes gone, we'd call forgetRemovedCommentIframes()\n+    // unnecessarily many times, that's ok.\n+    setTimeout(forgetRemovedCommentIframes, 1);\n+    return;\n+  }\n+\n   for (let i = 0; i < pendingMessages.length; ++i) {\n     let m = pendingMessages[i];\n-    if ((typeof m) !== 'string') {\n+    if ((typeof m) === 'function') {\n+      m = m(iframe, iframeNr);\n+    }\n+    else if ((typeof m) !== 'string') {\n       // For now. Could remove JSON.parse instead [3056MSDJ1].\n       m = JSON.stringify(m);\n     }\n@@ -823,6 +1190,7 @@ function sendToIframeImpl(iframe, initedArr: boolean[], pendingMessages,\n }\n \n \n+\n function findOneTimeLoginSecret() {\n   // This need not be at the start of the hash fragment — but if there's anything before\n   // or after, needs to be separated with one of [#&].\n@@ -841,6 +1209,7 @@ function findOneTimeLoginSecret() {\n }\n \n \n+\n function findCommentToScrollTo() {\n   const commentNrHashMatch = window.location.hash.match(/^#comment-(\\d+)([#&].*)?$/);  // [2PAWC0]\n   if (commentNrHashMatch) {\n@@ -858,12 +1227,20 @@ function findCommentToScrollTo() {\n }\n \n \n+\n function scrollComments(rectToScrollIntoView, options /* CalcScrollOpts */) {\n   // For a discussion about using <html> or <body>, see:\n   // https://stackoverflow.com/questions/19618545/\n   //    body-scrolltop-vs-documentelement-scrolltop-vs-window-pagyoffset-vs-window-scrol\n   // COULD use  window.scrollY instead, that's maybe more future compatible,\n   // see: https://stackoverflow.com/a/33462363/694469\n+\n+  // This currently works only with one single comments iframe — if more,\n+  // then, currently we don't know which one to scroll.\n+  if (numDiscussions > 1)\n+    return;\n+\n+  const commentsIframe = iframeElms[FirstCommentsIframeNr];\n   options.parent = document.documentElement.scrollTop ? document.documentElement : document.body;\n   const iframeRect = commentsIframe.getBoundingClientRect();\n   const rectWithOffset = {\n@@ -909,7 +1286,7 @@ function setEditorMaximized(maximized) {\n     oldHeight = editorWrapper.style.height;\n     oldBorderTop = editorWrapper.style.borderTop;\n     oldPaddingTop = editorWrapper.style.paddingTop;\n-    editorWrapper.style.top = 0; // bottom is 0 already\n+    editorWrapper.style.top = '0px'; // bottom is 0 already\n     editorWrapper.style.height = 'auto';\n     editorWrapper.style.borderTop = 'none';\n     editorWrapper.style.paddingTop = 'none';\n@@ -1001,5 +1378,12 @@ windowWithTalkyardProps.edRemoveCommentsAndEditor = removeCommentsAndEditor;  //\n windowWithTalkyardProps.edReloadCommentsAndEditor = loadCommentsCreateEditor; // old name [2EBG05]\n windowWithTalkyardProps.talkyardRemoveCommentsAndEditor = removeCommentsAndEditor;\n windowWithTalkyardProps.talkyardReloadCommentsAndEditor = loadCommentsCreateEditor;\n+windowWithTalkyardProps.talkyardAddCommentsIframe = addCommentsIframe;\n+windowWithTalkyardProps.talkyardForgetRemovedCommentIframes = forgetRemovedCommentIframes;\n+//windowWithTalkyardProps.talkyardLoadNewCommentIframes = loadNewCommentIframes;\n+\n+// @ifdef DEBUG\n+windowWithTalkyardProps['e2e_getNumEmbDiscs'] = () => numDiscussions;\n+// @endif\n \n // vim: fdm=marker et ts=2 sw=2 fo=tcqwn list"
    },
    {
      "sha": "3a2a6e5a8cb1e14d49718740c56cce63636ee5ec",
      "filename": "client/macros/macros-dev.h",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/macros/macros-dev.h",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/macros/macros-dev.h",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/macros/macros-dev.h?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,20 @@\n+\n+// Debug build macros, disappears in prod builds.\n+// Should be uppercase and start with D_ for \"dev build\" or maybe \"debug\".\n+\n+// These macros get processed by the C Preprocessor, 'cpp'. There's a bunch of\n+// macro processors for typescript and javascript, but they all  become abandonware\n+// after a while, or don't have enough nice functionality, e.g. gulp-preprocess\n+// which requires me to add extra '// @if X def' lines above and after\n+// the dev-build-only stuff. — With gcc we can have minimum noise macros.\n+\n+#define D_DO(fn)                dev_build__do(fn)\n+#define D_LOG_T(msg)            dev_build__logT(msg)\n+#define D_LOG_D(msg)            dev_build__logD(msg)\n+#define D_LOG_M(msg)            dev_build__logM(msg)\n+#define D_LOG_W(msg)            dev_build__logW(msg)\n+#define D_LOG_W2(msg, ex)       dev_build__logW(msg, ex)\n+#define D_LOG_E(msg)            dev_build__logE(msg)\n+#define D_LOG_E2(msg, ex)       dev_build__logE(msg, ex)\n+#define D_DIE(errMsg)           dev_build__die(errMsg)\n+#define D_DIE_IF(test, errMsg)  dev_build__dieIf(test, errMsg)"
    },
    {
      "sha": "206576c48de0906e3e7c979f5eb4b55f413e1f10",
      "filename": "client/macros/macros-none.h",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/macros/macros-none.h",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/macros/macros-none.h",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/macros/macros-none.h?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,5 @@\n+// This file is just used to verify that the C Preprocessor won't\n+// mess up anything — if preprocessing a file with no matching macros,\n+// the file shouldn't get changed.\n+\n+#define __DUMMY_NOOP_MACRO__  \"was_macro: __DUMMY_NOOP_MACRO__\""
    },
    {
      "sha": "e96d839a3f42e58b241cbbadcd0072943c1e100a",
      "filename": "client/macros/macros-prod.h",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/macros/macros-prod.h",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/macros/macros-prod.h",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/macros/macros-prod.h?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,16 @@\n+// Find docs in ./macros-dev.h.\n+\n+// Define the macros to 'void 0' i.e. undefined, which is what the function calls\n+// return in dev builds — so the prod build behaves in the same way, except\n+// that it won't log / do anything.\n+\n+#define D_DO(fn)                void 0\n+#define D_LOG_T(msg)            void 0\n+#define D_LOG_D(msg)            void 0\n+#define D_LOG_M(msg)            void 0\n+#define D_LOG_W(msg)            void 0\n+#define D_LOG_W2(msg, ex)       void 0\n+#define D_LOG_E(msg)            void 0\n+#define D_LOG_E2(msg, ex)       void 0\n+#define D_DIE(errMsg)           void 0\n+#define D_DIE_IF(test, errMsg)  void 0"
    },
    {
      "sha": "4d3a91e7fba1560277ca70842c84975232ccf142",
      "filename": "client/macros/macros.d.ts",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/macros/macros.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/macros/macros.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/macros/macros.d.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,15 @@\n+/// <reference path=\"./../types-and-const-enums.ts\" />\n+/// <reference path=\"./../reactjs-types.ts\" />\n+\n+// These macros get changed to: dev_build__do/logT/logD/logM(..) etc in dev builds,\n+// but in prod builds, get changed to: void 0 = undefined, and removed by the minifier.\n+declare function D_DO(fn);\n+declare function D_LOG_T(msg: St);\n+declare function D_LOG_D(msg: St);\n+declare function D_LOG_M(msg: St);\n+declare function D_LOG_W(msg: St);\n+declare function D_LOG_W2(msg: St, ex);\n+declare function D_LOG_E(msg: St);\n+declare function D_LOG_E2(msg: St, ex);\n+declare function D_DIE(errMsg: St);\n+declare function D_DIE_IF(test: Bo, errMsg: St);\n\\ No newline at end of file"
    },
    {
      "sha": "89c38296b8732471cd9d445e04da75e52a11beff",
      "filename": "client/macros/macros.ts",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/macros/macros.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/macros/macros.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/macros/macros.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,47 @@\n+/// <reference path=\"./macros.d.ts\" />\n+\n+// In dev builds, we want the macros to do the below things:\n+\n+// Don't include in prod builds though — the function names get macros-replaced\n+// with just 'false', so would become 'function false(..) { .. }'.\n+// `at-ifdef DEBUG ... at-endif`  gets removed here: [js_macros]\n+\n+// @ifdef DEBUG\n+\n+function dev_build__do(fn: () => void) {\n+  fn();\n+}\n+\n+function dev_build__logT(msg: string) {\n+  console.debug(msg);\n+}\n+\n+function dev_build__logD(msg: string) {\n+  console.debug(msg);\n+}\n+\n+function dev_build__logM(msg: string) {\n+  console.log(msg);\n+}\n+\n+function dev_build__logW(msg: string, ex?) {\n+  console.warn(msg, ex);\n+}\n+\n+function dev_build__logE(msg: string, ex?) {\n+  console.error(msg, ex);\n+}\n+\n+function dev_build__die(errMsg: string) {\n+  // This 'die' pops up a nice dialog.\n+  window['debiki2']?.die(errMsg);\n+  throw Error(errMsg);\n+}\n+\n+function dev_build__dieIf(test: boolean, errMsg: string) {\n+  if (test) {\n+    dev_build__die(errMsg);\n+  }\n+}\n+\n+// @endif"
    },
    {
      "sha": "f8e20b24617a311fd6bd84067c75982b8b0b1a16",
      "filename": "client/server/ReactStore.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/server/ReactStore.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/server/ReactStore.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/server/ReactStore.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -5,7 +5,7 @@\n    module debiki2 {\n //------------------------------------------------------------------------------\n \n-export function getMainWinStore(): Store {\n+export function win_getSessWinStore(): SessWinStore {\n   return (<any> window).theStore;  // [ONESTORE]\n }\n "
    },
    {
      "sha": "15eb5b900b58594081144933f71f4400152a7298",
      "filename": "client/server/server-vars.d.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/15177b939c6bf33cf7456c7cb24ea4a41fdb5d65/client/server/server-vars.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/15177b939c6bf33cf7456c7cb24ea4a41fdb5d65/client/server/server-vars.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/server/server-vars.d.ts?ref=15177b939c6bf33cf7456c7cb24ea4a41fdb5d65",
      "patch": "@@ -1 +0,0 @@\n-../app-slim/server-vars.d.ts\n\\ No newline at end of file"
    },
    {
      "sha": "e7791e8c170342d0053dd74385f45bd8cc798b3f",
      "filename": "client/serviceworker/service-worker.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/serviceworker/service-worker.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/serviceworker/service-worker.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/serviceworker/service-worker.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -46,12 +46,12 @@ Connected  ——> Human gone ——> Stay connected\n   |                           (since already connected, anyway)\n   |\n    `——> Disconnected —> Browser window open?\n-                           \\\n-                            \\———[no]——> Stay disconnected (don't reconnect\n-                             \\                     the service worker alone)\n-                              \\\n+                           ＼\n+                            ＼———[no]——> Stay disconnected (don't reconnect\n+                             ＼                     the service worker alone)\n+                              ＼\n                               [yes]——> Human there? ———[yes] ———> Try to reconnect\n-                                          \\\n+                                          ＼\n                                          [no, gone] —–—> Stay disonnected [HUMANGONE]\n */\n "
    },
    {
      "sha": "59e9506a1fb7f3df32a9f8716496b4eda0415a9e",
      "filename": "client/third-party/get-set-cookie.js",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/third-party/get-set-cookie.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/third-party/get-set-cookie.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/third-party/get-set-cookie.js?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -55,6 +55,7 @@\n  * @cat Plugins/Cookie\n  * @author Klaus Hartl/klaus.hartl@stilbuero.de\n  */\n+//  COULD_OPTIMIZE  SMALLER_BUNDLE  this getSetCookie is over-fancy.\n window.getSetCookie = function(name, value, options) {\n     if (typeof value != 'undefined') { // name and value given, set cookie\n         options = options || {};"
    },
    {
      "sha": "f420b00a4e3378e6e577a8ae351b624d2c7101af",
      "filename": "client/types-and-const-enums.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/client/types-and-const-enums.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/client/types-and-const-enums.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/types-and-const-enums.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -40,6 +40,7 @@ type Nr = number;\n type St = string;\n type Bitfield = Nr;  // in Javascript, only 53? bits, the rest is for the exponent [make_opaque_type]\n \n+type Pr<R> = Promise<R>;\n \n // Nullish and falsy values.\n type Z = 0 | false | '' | null | undefined | void;  // don't incl [] or {}\n@@ -59,6 +60,7 @@ type NrV = Nr | NUV;    // A number or void-ish — but not '' or false\n \n type HElm = HTMLElement;\n type HInpElm = HTMLInputElement;\n+type HIframeElm = HTMLIFrameElement;\n type Elm = Element;\n // Also: type RElm = JSX.Element (React.js element).\n "
    },
    {
      "sha": "88c4f01ec942b3b351c0bda46e566eb472976b43",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/conf/routes",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/conf/routes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf/routes?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -56,8 +56,8 @@ POST  /-/stop-impersonating     controllers.ImpersonateController.stopImpersonat\n GET   /-/load-online-users      ed.server.pubsub.SubscriberController.loadOnlineUsers\n GET   /-/websocket              ed.server.pubsub.SubscriberController.webSocket\n \n-GET   /-/embedded-comments      controllers.EmbeddedTopicsController.showTopic(embeddingUrl, discussionId: Option[String], edPageId: Option[String], category: Option[String])\n-GET   /-/embedded-editor        controllers.EmbeddedTopicsController.showEmbeddedEditor(embeddingUrl, discussionId: Option[String], edPageId: Option[String], category: Option[String])\n+GET   /-/embedded-comments      controllers.EmbeddedTopicsController.showTopic(embeddingUrl, discussionId: Option[String], edPageId: Option[String], category: Option[String], scriptV: Option[String])\n+GET   /-/embedded-editor        controllers.EmbeddedTopicsController.showEmbeddedEditor(embeddingUrl, embeddingScriptV: Option[Int])\n \n GET   /-/search                 controllers.SearchController.showSearchPage(q: Option[String])\n POST  /-/search                 controllers.SearchController.doSearch\n@@ -112,7 +112,7 @@ GET   /-/users/                 controllers.UserController.viewUserPage(whatever\n GET   /-/users/*whatever        controllers.UserController.viewUserPage(whatever)\n GET   /-/groups/                controllers.UserController.viewUserPage(whatever = \"\")\n GET   /-/groups/*whatever       controllers.UserController.viewUserPage(whatever)\n-GET   /-/load-my-page-data      controllers.UserController.loadMyPageData(pageId)\n+GET   /-/load-my-page-data      controllers.UserController.loadMyPageData(pageIds)\n GET   /-/list-topics-by-user    controllers.UserController.listTopicsByUser(userId: Int)\n GET   /-/list-posts             controllers.UserController.listPostsByUser(authorId: Int)\n GET   /-/download-my-content    controllers.UserController.downloadUsersContent(authorId: Int)"
    },
    {
      "sha": "4c2bdad41769e00bed841a70c8945379cc6f27ef",
      "filename": "docs/bem-blocks.txt",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/docs/bem-blocks.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/docs/bem-blocks.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/bem-blocks.txt?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -37,8 +37,12 @@ CUD = create user dialog\n D  = dialog,  e.g. AbtUsrD\n Dg = dialog, when inside a phrase, e.g. InstaDgW = Instant-Dialog-Wrap\n Dd = deleted\n+Del,\n Dl = delete  — change to 'Dt'? 'Dl' looks like Download doesn't it?\n+Dft,\n Df = draft\n+Dsc,\n+Disc = discussion\n Dl = download — change to Dwnl? so rare\n Dis = disabled, Ena = enabled\n Ed  = edit\n@@ -135,6 +139,7 @@ Vl  = vertical, also: Hz: horizontal\n Vt  = vote, NO Vo instead,  Vt could be Vertical\n W   = wrap, wrapper: a div that's wrapped around the main something\n Wik = wiki\n+Wro = wrong\n X   = extra\n Xl  = extra large (screen), also: Lg, Sm, Md\n Wb  = Watchbar"
    },
    {
      "sha": "7bb6093ad412d0a63a4d968fc6a90b4ea288df21",
      "filename": "docs/e2e-tests-map.txt",
      "status": "modified",
      "additions": 62,
      "deletions": 13,
      "changes": 75,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/docs/e2e-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/docs/e2e-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-map.txt?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -115,6 +115,20 @@ authn:\n     with server default oauth2:\n           - see ^oidc\n \n+  [.lazy_authn],\n+  lazy authn,\n+  authn lazily,\n+    dir:\n+      after composing\n+        new topic:\n+        reply:\n+    emb:\n+      composing comment before logged in:\n+            - embcom.reply-vote-report-bef-login.2br  TyTEEMBCDOBEFAUN.TyTRELZYAUN\n+            - embcom.drafts-previews-not-logged-in.2br  TyT2ZBKPW048.TyTRELZYAUN\n+      report & vote before logged in:\n+            - embcom.reply-vote-report-bef-login.2br  TyTEEMBCDOBEFAUN\n+\n oauth2,\n ext idps:\n   keycloak:\n@@ -193,7 +207,7 @@ single-sign-on:  (3093533)\n           - sso-all-ways-to-login.2browsers.test.ts  TyT7FKRTTSR024\n           - sso-access-denied-login.2browsers.test.ts  TyT4AKT02DKJ41\n           - api-w-sso-upsert-pages.2browsers.test.ts  TyT60KRJXT4X3\n-          - embcom.sso.token-direct-w-logout-url.2br.test.ts  TyTE2EEMBSSO1.TyT306MRG2\n+          - [.embcom_sso]\n   one-time login secret abuse:\n           - sso-one-time-key-errors.2browsers.test.ts  TyT5025BDUJQP4R\n   login required ty-only logout url:\n@@ -210,10 +224,11 @@ single-sign-on:  (3093533)\n   update sso user's email, username etc:\n           - api-update-user-and-sso-user.2br   TyTE2E05MRR9\n \n-sso, embedded comments, [.embcom.sso],\n+sso, embedded comments, [.embcom_sso],\n embedded comments sso,\n blog comments sso:\n             - embcom.sso.token-direct-w-logout-url.2br.test.ts  TyTE2EEMBSSO1\n+            - embcom.sso.token-in-cookie.2br.test.ts  TyTE2EEMBSSO2\n \n impersonate:\n           - impersonate-post-as-other.2browsers  TyT502KNG24\n@@ -555,6 +570,18 @@ editor -\n   maximize editor:\n           - embed-twitter-tweets-etc.test.ts  TyT0JSM8PF68.TyT033SKHWW73M\n   preview:\n+    not embedded:\n+            - TESTS_MISSING barely needed\n+    just one comments iframe:\n+            - TESTS_MISSING barely needed\n+    many comments iframes:\n+      replies:\n+            - embcom.manyframes.drafts-repl-to.2br  TyTEMANYCOMIFR02.TyTREPREVW\n+            - TESTS_MISSING actually scroll between replying-to-post and reply preview\n+            - TESTS_MISSING preview placed just below post being replied to\n+      edits:\n+            - embcom.manyframes.drafts-repl-to.2br  TyTEMANYCOMIFR02.TyTEDPREVW\n+            - TESTS_MISSING scroll to edits preview\n   upload things:  (7KFC2)\n   other buttons -\n     ...\n@@ -664,8 +691,9 @@ discussion -\n \n   sort order of replies:\n     best first:\n-          - votes-and-best-first.test.ts\n+            - votes-and-best-first  TyTESORTBEST\n     oldest first:\n+            - embcom.drafts-previews-not-logged-in.2br.e2e.ts  TyT2ZBKPW048.TyTPOSTORDR\n     newest first:\n \n large pages,\n@@ -753,12 +781,12 @@ embedded comments:\n   post 1st comment, edit:   TESTS_MISSING\n     when unapproved:\n     auto approved:\n-  start with Like vote:\n-          - embedded-comments-vote-first.test.ts  TyT2AKBS056\n-  start with configuring one's notf prefs:\n+  vote before page exists:\n+          - embcom.vote-bef-page-exists.1br  TyT2AKBS056\n+  config notf prefs before page exists:\n           - embedded-comments-conf-notf-pref-first.test.ts  TyT502HMSJP3\n   login via metabar:\n-          - embedded-comments-vote-first.test.ts  TyT2AKBS056\n+          - embcom.vote-bef-page-exists.1br  TyT2AKBS056\n           - embedded-comments-scroll  TyT2K4DHR49-02\n   (50279460),\n   scroll and show #comment-n:\n@@ -781,8 +809,6 @@ embedded comments:\n   won't load at wrong domain / origin / hostname:\n           - TESTS_MISSING TyT3059J267P, problem in wdio 6\n                 embedded-comments-create-site-no-verif-email-admin-area-tour.2browsers.test.ts\n-  embedded editor:\n-          - may not see page:   TyT035KRGMTW2  TESTS_MISSING  SEC_TEST_MISSING\n   different discussion id:\n           - embedded-comments-discussion-id.test.ts   TyT603KRDL46\n   place in custom categories:\n@@ -792,9 +818,12 @@ embedded comments:\n           - embedded-comments-category-refs.2browsers.test.ts   TyT03RKHJF59.TyT063AKDGW60\n   comment counts:\n           - embcom.comment-counts.2br.cors.test.ts   TyTE2ECOMCOUNTS\n+  many comments iframes same page:\n+            - embcom.manyframes.basic.2br  TyTEMANYCOMIFR01\n+            - embcom.manyframes.drafts-repl-to.2br  TyTEMANYCOMIFR02\n+            - embcom.manyframes.js-api.2br  TyTEMANYEMBDISAPI\n   sso: see [.embcom.sso]\n \n-\n upload links,\n uploads -  (7KFC2)\n   upload posts with pics:\n@@ -1050,11 +1079,15 @@ review after:\n     #    Alice deletes.\n     #    Memah visits reply — not found.\n \n+report post,\n+flag post,\n flags:\n   auto threat level, moderate:\n           - flag-member-block-agree.2browsers  TyTE2EFLGMEMBLK\n   lock threat level:\n           - flag-member-block-agree.2browsers  TyTE2EFLGMEMBLK.TyTE2ETHRLVDEF\n+  report post before logged in:\n+            - [.lazy_authn]\n \n spam: (4BKS0)\n           - spam-basic-local.2browsers.test.ts  TyT530KRM1R\n@@ -1124,13 +1157,24 @@ draft: [7WKABZP2]\n           - drafts-chat-adv-ed.2browsers.test.ts  TyT7JKMW24\n   delete:\n           - drafts-delete.test.ts  TyT5BKRQ0\n+          - draft previews [.dft_pvs]\n+  resume, delete in page:\n+            - embcom.drafts-previews-not-logged-in.2br  TyT2ZBKPW048.TyTINPGDFTS\n   works also if not logged in:\n-          - forum-drafts-not-logged-in.2browsers.test.ts  TyT2ABSD73\n-          - embedded-comments-drafts-not-logged-in.test.ts  TyT2ZBKPW048\n+            - forum-drafts-not-logged-in.2browsers.test.ts  TyT2ABSD73\n+            - embcom.drafts-previews-not-logged-in.2br  TyT2ZBKPW048\n \n-  draft previews, resume and delete:  TESTS_MISSING\n+  draft previews, resume and delete: [.dft_pvs]\n+    - some TESTS_MISSING if [many_ifr_my_page_data]\n     - chat:\n     - embeded comments:\n+            - embcom.drafts-previews-not-logged-in.2br  TyT2ZBKPW048\n+            - embcom.manyframes.basic.2br  TyTEMANYCOMIFR01.TyTEMBDFT02\n+                mainly in 1st iframe, not 2nd [many_ifr_my_page_data]\n+            - embcom.manyframes.drafts-repl-to.2br  TyTEMANYCOMIFR02\n+                mainly in 1st iframe, not 2nd [many_ifr_my_page_data]\n+    - upload image:\n+            - TESTS_MISSING\n     - discussion topic:\n     - load from browser storage:\n     - go to drafts page w editor open, try open other draft:\n@@ -1363,6 +1407,11 @@ api:\n             - TESTS_MISSING\n   rss feed: No, there're only Atom feeds.\n \n+api for comments,\n+comments api,\n+embedded comments api:\n+            - embcom.manyframes.js-api.2br  TyTEMANYEMBDISAPI\n+\n url api,\n frag action api,\n url frag action api,"
    },
    {
      "sha": "bf6fb66131bbb3396e11b9917119dc93641f8105",
      "filename": "docs/maybe-do-later.txt",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/docs/maybe-do-later.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/docs/maybe-do-later.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/maybe-do-later.txt?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -54,6 +54,8 @@ with \"negative\" permissions — e.g. a group that may Not something.\n Then, everyone in that group, would be forbidden from doing that something,\n regardless of how they inherited permissions from other groups.\n \n+[tags]\n+Nice props / tags in Gerrit: https://chromium-review.googlesource.com/c/v8/v8/+/2537690\n \n [sw] [sse]\n DONE: Service worker.  No, skip, using Websocket instead of:  Server sent events.\n@@ -109,6 +111,10 @@ Reproducible builds.\n [rate_limits]\n Configurable rate limits.\n \n+[precompile_luajit]  COULD_OPTIMIZE\n+See: https://blog.openresty.com/en/luajit-bytecode/\n+Many times faster startup time, hopefully uses less memory too?\n+\n [server_limits] [site_limits]\n If admins try to configure too \"high\" values, e.g. 1 TB upload size,\n need a way for them to know they're above the server or site limits,\n@@ -480,6 +486,10 @@ Include session type (e.g. pwd, oauth, email secret, sso, emb sso) in sid:s,\n see: SessionType.AutoTokenSiteCustomSso, and: SidOk(\"_api_secret_\".\n Also see: [weaksid].\n \n+[sess_in_me]\n+Store xsrf token and any sid-part-1 in Me, instead of win.typs?\n+\n+ \n [hide_authn_btns]\n If auto logged in via token in embedd*ing* html, then, don't show logout button\n — instead the embedding site manages login/out for that user, by incl/excl the token.\n@@ -506,6 +516,12 @@ Make  login-required work also for embeded comments.\n [emb_forum]\n Make it possible to embedd a forum, or fourm cateory (no just blog comments).\n \n+[emb_ifr_shortcuts]\n+Make shortcuts work also if there're many iframes with blog comments comments\n+visible at the same time.\n+[many_ifr_my_page_data]\n+Make changing notf levels update the UI correctly also if many iframes.\n+\n [ty_oemb_og]\n Add oEmbed & OpenGraph support to Ty.\n See e.g.:\n@@ -674,6 +690,9 @@ E.g. disallow toxic speech, or pics of zebras if that's against the community's\n Blake3 is ~ 10x faster than SHA2:\n   https://news.ycombinator.com/item?id=22021769\n   https://news.ycombinator.com/item?id=22003315\n+  Java bindings:\n+    https://dev.to/johanneslichtenberger/blake3-crytopgrahic-hash-function-java-implementation-2bg7\n+    —>  https://github.com/sken77/BLAKE3jni\n Wait until there's a well tested Java lib available?\n Then use Blake3 instead e.g. to hash long Redis keys (and just delete the old\n cached things, it's a cache).\n@@ -775,3 +794,15 @@ About how to write docs:\n [ios_bugs]\n Problems that happen only on iOS Safari (and Chrome, but all browsers are basically\n Safari on iOS). When works elsewhere, this might be bugs in iOS Safari.\n+\n+\n+[default_plugins]\n+KaTeX for Maths (VSCode supports KaTeX, and Docusaurus too:\n+https://docusaurus.io/docs/markdown-features/math-equations )\n+Prism for syntax highlighting (Docusaurus uses it:\n+https://docusaurus.io/docs/markdown-features/code-blocks#syntax-highlighting )\n+\n+\n+[wdio_6_to_7]\n+Upgr Webdriverio from 6 to 7.\n+Add Typescript-ESLint warning: no-floating-promises!\n\\ No newline at end of file"
    },
    {
      "sha": "9df7151fcc7386d17e27bcef5f45e0ef63d3ce57",
      "filename": "docs/tyworld.adoc",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/docs/tyworld.adoc",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/docs/tyworld.adoc",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/tyworld.adoc?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -148,3 +148,32 @@ may-post-topics, are not inherited; instead, are configured per category.\n Maybe it'd be nice if may-edit-wiki permissions got inherited?  Or if, when adding\n a sub category, or editing the base category perms, one could apply the base\n category settings to the sub cats  `[propagate_cat_perms]`  (instead of inheriting).\n+\n+\n+\n+\n+== Embedded comments\n+\n+A Talkyard discussion can be embedded below a blog post, as a blog comments section.\n+And on other types of web pages, for discussing other things.\n+\n+There can be many comments iframes, on the same embedding page.\n+So, for example, a page showing different items in a shop, on the same page,\n+can have small comment sections about each item, below the item,\n+simultaneously on the same page, e.g. to show the most popular customer comments\n+about each item. Could be combined with a button to expand the comments or\n+maybe go to a full screen discussion page about that item.\n+\n+\n+=== Lazy pages\n+\n+[emb_lzy_pgs]\n+Each iframe with comments, is backed by a Talkyard discussion page of\n+type PageType.EmbeddedComments. Such a Talkyard page isn't created\n+before it's needed — that is, when the first comment gets posted,\n+or someone clicks Like (then, the like vote needs a page id),\n+or the blog visitor configures a notify-me-of-comments notification level\n+for that blog post discussion.\n+\n+// first comment gets posted (or like vote or notf setting changed).\n+// So, a draft for the very first comment, usually won't have any page id.)\n\\ No newline at end of file"
    },
    {
      "sha": "3265215b0f2a12b4625daa557f482b6ebba055c1",
      "filename": "gulpfile.js",
      "status": "modified",
      "additions": 132,
      "deletions": 31,
      "changes": 163,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/gulpfile.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/gulpfile.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/gulpfile.js?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -50,16 +50,19 @@ const fs = require(\"fs\");\n // COULD remove, uses old gulp-util, deprecated and pulls in old cruft.\n const save = require('gulp-save');\n const execSync = require('child_process').execSync;\n+const spawnSync = require('child_process').spawnSync;\n const preprocess = require('gulp-preprocess');\n \n const uglify = require('gulp-uglify');\n+\n // Later, to use a more recent uglifyjs version:\n //const composer = require('gulp-uglify/composer');\n //const uglify = composer(require('uglify-js'), console);\n \n const currentDirectorySlash = __dirname + '/';\n const versionFilePath = 'version.txt';\n \n+\n // Gzip otions: Use max level = 9 for 0.5% better compression.\n //\n // Details:\n@@ -91,16 +94,121 @@ const versionFilePath = 'version.txt';\n //\n const gzipOptions = { level: 9, memLevel: 9 };\n \n+\n function readGitHash() {\n   try {\n     return execSync('git rev-parse --short HEAD', { encoding: 'utf8' }).trim();\n   }\n   catch (ex) {\n-    return 'bad_git_repo';\n+    const errCode = 'TyE_BAD_GIT_REPO';\n+    console.error(`Error finding Git revision [${errCode}]`, ex)\n+    return errCode;\n   }\n }\n \n \n+/// Only for Ty's own Typescript code. Not for 3rd party Javascript.\n+///\n+function expandCPreProcessorMacros(ps) {  // : { debug?: true, prod?: true }\n+  // See also: nextFileTemplate = function(contents, file) ...\n+\n+  // And: http://www.nongnu.org/espresso/js-cpp.html\n+  // or: https://www.npmjs.com/package/c-preprocessor\n+  // or: https://www.reddit.com/r/javascript/comments/2ymw1q/using_gcccppclangs_cpreprocessor_in_javascript/\n+  // etc: https://www.google.com/search?q=javascript+%22c+preprocessor%22\n+  // (but they're doing it in an unsafe way, without any [cpp_sane] check.)\n+\n+  if (!!ps.dev === !!ps.prod) throw Error('TyE396MFEG2');\n+\n+  return insert.transform(function(sourceCodeSt, sourceFile) {\n+    const macrosFile = `macros-${ps.dev ? 'dev' : 'prod'}.h`;\n+    function makeCppArgs(macrosFile) {\n+      return [\n+            // Read from stdin — we'll pipe sourceCodeSt to stdin.\n+            '-',\n+            // Write to stdout.\n+            `-`,\n+            // Read C preprocessor macros from this file.\n+            `-imacros`, 'client/macros/' + macrosFile,\n+            // Interpret the source code file more as text, but \"less\" as C or C++ code,\n+            // otherwise the C preprocessor removes \"unneeded\" whitespace — but\n+            // such whitespace might mean something in javascript or typescript.\n+            // See: https://stackoverflow.com/questions/445986/how-to-force-gcc-preprocessor-to-preserve-whitespace\n+            // and: https://gcc.gnu.org/onlinedocs/cpp/Traditional-Mode.html\n+            `-traditional-cpp`,\n+            // Skip default C macros (only use Talkyard's own macros) and headers.\n+            `-nostdinc`,\n+            // Don't add any '#line 123' line markers (for C, not javascript).\n+            `-P`,\n+            // Keep comments.\n+            `-CC`];\n+            // Allow '//' comments — included the C99 standard, not C89. Doesn't work,\n+            // because of -traditional-cpp above?\n+            //`-x=c99`\n+            // This works, but deletes blanks before the '//', which fails the\n+            // safety test below. [cpp_sane]\n+            //`-x=c++`;\n+    }\n+\n+    // Make #ifdef work if commented out — so can be used in Typescript files,\n+    // where #ifdef would cause a Typescript syntax error if on the first column,\n+    // without comments '//' before.\n+    // So, in Ty's Typescript, this will get processed by cpp:\n+    //   >   // #ifdef DEBUG\n+    //   >   debugStuff();\n+    //   >   // #endif\n+    // DO_AFTER soon: remove dependency 'gulp-preprocess', use cpp instead  [js_macros]\n+    // and change  ' // @ifdef DEBUG .. // @endif'  to  ' // #ifdef DEBUG ... // #endif'.\n+    const sourceCodeStWithIfdefUncommented = sourceCodeSt.replace(\n+            /^[ \\t]*\\/\\/[ \\t]*(#[a-z]+([ \\t]+[a-zA-Z0-9_]+)?)[ \\t]*$/gm, '$1');\n+\n+    // cpp -traditional-cpp -nostdinc -P -E -CC /home/user/styd/d9/client/embedded-comments/blog-comments.ts ./blog-comments.ts.after-cpp.ts -imacros /home/user/styd/d9/client/macros-prod.cpp\n+    console.log(`Running:  cpp ${makeCppArgs(macrosFile).join(' ')}`);\n+    const resultObj = spawnSync('cpp', makeCppArgs(macrosFile), {\n+      input: sourceCodeStWithIfdefUncommented,\n+      encoding: 'utf8',\n+      // Unminified script bundles can be large, 1 - 10 MiB, but 50 MiB is impossibly\n+      // much? If too little, there'll be an ENOBUFS error (ENd Of BUFferS?)\n+      // and the file truncated.\n+      maxBuffer: 50 * 1024 * 1024,\n+    });\n+    const processedCodeSt = resultObj.stdout.toString();\n+\n+    // Preprocess the file without any macros too — then we should get back sourceCodeSt\n+    // unchanged, [cpp_sane]  otherwise we cannot be sure that cpp didn't\n+    // mess up anything — after all, it's for C and C++, not Javascript, so if it\n+    // does anything unexpected, that would have been a tiny bit risky.\n+    const resultObjNoMacros = spawnSync(\n+            'cpp', makeCppArgs('macros-none.h'), {\n+              input: sourceCodeStWithIfdefUncommented,\n+              encoding: 'utf8', maxBuffer: 50 * 1024 * 1024, });\n+    const processedCodeNoMacrosSt = resultObjNoMacros.stdout.toString();\n+    // Hmm, but this can fail, although all fine, if there's #ifdef ... ... #endif.\n+    if (processedCodeNoMacrosSt !== sourceCodeSt) {\n+      fs.mkdirSync('target/client', { recursive: true });\n+      fs.writeFileSync('target/client/cpp-before.ts', sourceCodeSt);\n+      fs.writeFileSync('target/client/cpp-after.ts', processedCodeNoMacrosSt);\n+      throw Error(`The C Preprocessor messes up this file:  ${sourceFile.path} \\n` +\n+          `  Look at this:\\n` +\n+          `     gvimdiff  target/client/cpp-before.ts  target/client/cpp-after.ts  \\n` +\n+          `\\n` +\n+          `  Tips 1: cpp (the C Preprocessor) concatenates lines ending with '\\\\',\\n` +\n+          `  so you can change from '\\\\' (backslash) to '＼' which is\\n` +\n+          `  U+FF3C\tFULLWIDTH REVERSE SOLIDUS (not backslash),\\n` +\n+          `  see: https://unicode-search.net/unicode-namesearch.pl?term=BACKSLASH\\n\\n` +\n+          `\\n` +\n+          `  Tips 2: cpp also doesn't know that // starts a comment, and\\n` +\n+          `  will complain about an unterminated /* comment for lines like:\\n` +\n+          `  \"// text text /* more text\", so add a space between / and *: \"/ *\"\\n` +\n+          `  (If enabling C++ or C99 mode, cpp then understands // *but* strips\\n` +\n+          `  whitespace before, making our [cpp_sane] check sometimes fail.)\\n\\n`\n+          );\n+    }\n+\n+    return processedCodeSt;\n+  });\n+}\n+\n let version;\n let versionTag;\n \n@@ -413,12 +521,15 @@ var serverJavascriptSrc = [\n // This one also concatenates Javascript, so it's different from the other\n // 'compile(Sth)Typescript' functions — so let's append 'ConcatJavascript' to the name.\n function compileServerTypescriptConcatJavascript() {\n-  var typescriptStream = serverTypescriptProject.src()\n+  // Generates server-bundle.js, with Ty's own code.\n+  const typescriptStream = serverTypescriptProject.src()\n       .pipe(plumber())\n       .pipe(insert.transform(nextFileTemplate))\n-      .pipe(serverTypescriptProject());\n+      .pipe(serverTypescriptProject())\n+      .pipe(expandCPreProcessorMacros({ dev: true }));\n \n-  var javascriptStream = gulp.src(serverJavascriptSrc)\n+  // Third party code (and skip expandCPreProcessorMacros()).\n+  const javascriptStream = gulp.src(serverJavascriptSrc)\n       .pipe(plumber())\n       .pipe(insert.transform(nextFileTemplate));\n \n@@ -444,29 +555,12 @@ var _2dTypescriptProject = typeScript.createProject({  // [SLIMTYPE]\n }); */\n \n \n-function compileSwTypescript() {\n-  return swTypescriptProject.src()\n-    .pipe(plumber())\n-    .pipe(insert.transform(nextFileTemplate))\n-    .pipe(swTypescriptProject())\n-    .pipe(updateAtimeAndMtime())\n-    .pipe(gulp.dest('target/client/'));\n-}\n-\n-function compileSlimTypescript() {\n-  return slimTypescriptProject.src()\n-    .pipe(plumber())\n-    .pipe(insert.transform(nextFileTemplate))\n-    .pipe(slimTypescriptProject())\n-    .pipe(updateAtimeAndMtime())\n-    .pipe(gulp.dest('target/client/'));\n-}\n-\n-function compileOtherTypescript(typescriptProject) {\n+function compileTypescript(typescriptProject) {\n   return typescriptProject.src()\n     .pipe(plumber())\n     .pipe(insert.transform(nextFileTemplate))\n     .pipe(typescriptProject())\n+    .pipe(expandCPreProcessorMacros({ dev: true }))\n     .pipe(updateAtimeAndMtime())\n     .pipe(gulp.dest('target/client/'));\n }\n@@ -477,7 +571,7 @@ gulp.task('compileServerTypescriptConcatJavascript', () => {\n \n \n gulp.task('compileSwTypescript', () => {\n-  return compileSwTypescript();\n+  return compileTypescript(swTypescriptProject);\n });\n gulp.task('compileSwTypescript-concatScripts',\n         gulp.series('compileSwTypescript',() => {\n@@ -486,7 +580,7 @@ gulp.task('compileSwTypescript-concatScripts',\n \n \n gulp.task('compileHeadTypescript', () => {\n-  return compileOtherTypescript(headTypescriptProject);\n+  return compileTypescript(headTypescriptProject);\n });\n gulp.task('compileHeadTypescript-concatScripts',\n         gulp.series('compileHeadTypescript',() => {\n@@ -497,7 +591,7 @@ gulp.task('compileHeadTypescript-concatScripts',\n \n \n gulp.task('compileSlimTypescript', () => {\n-  return compileSlimTypescript();\n+  return compileTypescript(slimTypescriptProject);\n });\n gulp.task('compileSlimTypescript-concatScripts',\n         gulp.series('compileSlimTypescript',() => {\n@@ -506,7 +600,7 @@ gulp.task('compileSlimTypescript-concatScripts',\n \n \n gulp.task('compileMoreTypescript', () => {\n-  return compileOtherTypescript(moreTypescriptProject);\n+  return compileTypescript(moreTypescriptProject);\n });\n gulp.task('compileMoreTypescript-concatScripts',\n         gulp.series('compileMoreTypescript',() => {\n@@ -524,7 +618,7 @@ gulp.task('compile2dTypescript-concatScripts',\n  */\n \n gulp.task('compileStaffTypescript', () => {\n-  return compileOtherTypescript(staffTypescriptProject);\n+  return compileTypescript(staffTypescriptProject);\n });\n gulp.task('compileStaffTypescript-concatScripts',\n         gulp.series('compileStaffTypescript',() => {\n@@ -533,7 +627,7 @@ gulp.task('compileStaffTypescript-concatScripts',\n \n \n gulp.task('compileEditorTypescript', () => {\n-  return compileOtherTypescript(editorTypescriptProject);\n+  return compileTypescript(editorTypescriptProject);\n });\n gulp.task('compileEditorTypescript-concatScripts',\n         gulp.series('compileEditorTypescript',() => {\n@@ -542,7 +636,7 @@ gulp.task('compileEditorTypescript-concatScripts',\n \n \n gulp.task('compileBlogCommentsTypescript', () => {\n-  return compileOtherTypescript(blogCommentsTypescriptProject);\n+  return compileTypescript(blogCommentsTypescriptProject);\n });\n gulp.task('compileBlogCommentsTypescript-concatScripts',\n         gulp.series('compileBlogCommentsTypescript',() => {\n@@ -634,7 +728,11 @@ gulp.task('minifyScriptsImpl', gulp.series(() => {\n         minimal: false,\n         title: `gulp-debug: minifying scripts: ${JSON.stringify(sourceAndDest)}`,\n       }))\n-      .pipe(preprocess({ context: preprocessProdContext })) // see comment above\n+      .pipe(preprocess({ context: preprocessProdContext })) // comment above [js_macros]\n+      // Skip for now — causes problems with backslash '\\' at the end\n+      // of lines in 3rd party scripts.\n+      //   .pipe(expandCPreProcessorMacros({ prod: true }))\n+      .pipe(gulp.dest('target/client/before-uglify'))\n       .pipe(uglify())\n       .pipe(rename({ extname: '.min.js' }))\n       .pipe(insert.prepend(makeCopyrightAndLicenseBanner()))\n@@ -695,6 +793,8 @@ gulp.task('compile-stylus', () => {\n \n     stream = stream\n       .pipe(stylus(stylusOpts))\n+      // Don't: .pipe(expandCPreProcessorMacros())\n+      // — cpp thinks #some-tag-id is a macro keyword.\n       // Make the .rtl styles work by removing this hacky text.\n       .pipe(replace('__RTL__', ''))\n       .pipe(concat(`styles-bundle${rtlSuffix}.css`))\n@@ -914,6 +1014,7 @@ gulp.task('delete-non-gzipped', () => {\n \n gulp.task('clean', gulp.series('cleanTranslations', () => {\n   return g_del([\n+          `target/client`,\n           `${webDest}/*`,\n           `!${webDest}/.gitkeep`,\n           `${webDestFonts}/*`,"
    },
    {
      "sha": "b5fe8752298c571ccfcbe1aadfbdd3f209b37c9f",
      "filename": "images/web/html/session-iframe.html",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/images/web/html/session-iframe.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/images/web/html/session-iframe.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/images/web/html/session-iframe.html?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,23 @@\n+<html>\n+<body>\n+<script>\n+var tydyn = {\n+  allIframePageIds: []\n+};\n+var typs = {\n+  // There's always something about cookies that won't work,\n+  // or will soon stop working.\n+  canUseCookies: false\n+  // doesn't seem to work:  navigator.cookieEnabled   — Chrome still won't send cookies.\n+};\n+var theStore = {  // : SessWinStore\n+  embeddedOriginOrEmpty: location.origin,\n+  // Needed, for shortcuts to work, in blog comment iframes, before logged in.\n+  // [emb_ifr_shortcuts]\n+  me: 'TyESESIFRME',\n+};\n+window.parent.postMessage(\n+      JSON.stringify(['iframeInited', {}]), '*');\n+</script>\n+</body>\n+</html>"
    },
    {
      "sha": "acd4419af094df961132166ee0508ce173d217e1",
      "filename": "images/web/server-locations.conf",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/images/web/server-locations.conf",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/images/web/server-locations.conf",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/images/web/server-locations.conf?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -158,6 +158,12 @@ location ~ ^/-/(talkyard-comments|ed-comments(.v0)?).(?<suffix>min.js|js)$ {\n   gzip_static on;\n }\n \n+location = /-/session-iframe {\n+  alias /opt/nginx/html/session-iframe.html;\n+  add_header Cache-Control \"${TY_MAX_AGE_DAY}\";  # because no assets versioning\n+  default_type text/html;\n+}\n+\n # Prefix with 'talkyard-' so one sees it's Talkyards service worker, when debugging on localhost.\n # Can be other localhost service workers, from unrelated other open source projects. [sw]\n location ~ ^/talkyard-service-worker.(js|min.js)$ {"
    },
    {
      "sha": "2ea9ec7963faeb73c2ad80a654d214488c1641fe",
      "filename": "lock.sbt",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/lock.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/lock.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/lock.sbt?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -26,12 +26,16 @@ dependencyOverrides in Compile ++= {\n       \"com.github.ben-manes.caffeine\" % \"caffeine\" % \"2.8.4\",\n       \"com.github.ben-manes.caffeine\" % \"jcache\" % \"2.8.4\",\n       \"com.github.etaty\" % \"rediscala_2.12\" % \"1.9.0\",\n+      \"com.github.jnr\" % \"jffi\" % \"1.2.17\",\n+      \"com.github.jnr\" % \"jnr-a64asm\" % \"1.0.0\",\n+      \"com.github.jnr\" % \"jnr-ffi\" % \"2.1.9\",\n+      \"com.github.jnr\" % \"jnr-x86asm\" % \"1.0.2\",\n       \"com.github.scribejava\" % \"scribejava-apis\" % \"6.9.0\",\n       \"com.github.scribejava\" % \"scribejava-core\" % \"6.9.0\",\n       \"com.github.spullara.mustache.java\" % \"compiler\" % \"0.9.3\",\n       \"com.github.stephenc.jcip\" % \"jcip-annotations\" % \"1.0-1\",\n       \"com.google.code.findbugs\" % \"jsr305\" % \"3.0.2\",\n-      \"com.google.code.gson\" % \"gson\" % \"2.8.2\",\n+      \"com.google.code.gson\" % \"gson\" % \"2.8.6\",\n       \"com.google.errorprone\" % \"error_prone_annotations\" % \"2.3.4\",\n       \"com.google.guava\" % \"failureaccess\" % \"1.0.1\",\n       \"com.google.guava\" % \"guava\" % \"28.2-jre\",\n@@ -88,6 +92,10 @@ dependencyOverrides in Compile ++= {\n       \"commons-digester\" % \"commons-digester\" % \"1.8.1\",\n       \"commons-logging\" % \"commons-logging\" % \"1.2\",\n       \"commons-validator\" % \"commons-validator\" % \"1.6\",\n+      \"dev.paseto\" % \"jpaseto-api\" % \"0.6.0\",\n+      \"dev.paseto\" % \"jpaseto-gson\" % \"0.6.0\",\n+      \"dev.paseto\" % \"jpaseto-impl\" % \"0.6.0\",\n+      \"dev.paseto\" % \"jpaseto-sodium\" % \"0.6.0\",\n       \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.1.12.1\",\n       \"io.dropwizard.metrics\" % \"metrics-healthchecks\" % \"4.1.9\",\n       \"io.jaegertracing\" % \"jaeger-client\" % \"0.32.0\",\n@@ -145,6 +153,10 @@ dependencyOverrides in Compile ++= {\n       \"org.apache.lucene\" % \"lucene-suggest\" % \"7.2.1\",\n       \"org.apache.thrift\" % \"libthrift\" % \"0.11.0\",\n       \"org.apache.tika\" % \"tika-core\" % \"1.25\",\n+      \"org.apache.tuweni\" % \"tuweni-bytes\" % \"0.10.0\",\n+      \"org.apache.tuweni\" % \"tuweni-crypto\" % \"0.10.0\",\n+      \"org.apache.tuweni\" % \"tuweni-io\" % \"0.10.0\",\n+      \"org.apache.tuweni\" % \"tuweni-units\" % \"0.10.0\",\n       \"org.bouncycastle\" % \"bcpkix-jdk15on\" % \"1.60\",\n       \"org.bouncycastle\" % \"bcprov-jdk15on\" % \"1.60\",\n       \"org.checkerframework\" % \"checker-qual\" % \"3.4.0\",\n@@ -167,6 +179,10 @@ dependencyOverrides in Compile ++= {\n       \"org.locationtech.spatial4j\" % \"spatial4j\" % \"0.6\",\n       \"org.lz4\" % \"lz4-java\" % \"1.7.1\",\n       \"org.ow2.asm\" % \"asm\" % \"5.0.4\",\n+      \"org.ow2.asm\" % \"asm-analysis\" % \"5.0.3\",\n+      \"org.ow2.asm\" % \"asm-commons\" % \"5.0.3\",\n+      \"org.ow2.asm\" % \"asm-tree\" % \"5.0.3\",\n+      \"org.ow2.asm\" % \"asm-util\" % \"5.0.3\",\n       \"org.owasp.encoder\" % \"encoder\" % \"1.2.1\",\n       \"org.postgresql\" % \"postgresql\" % \"42.2.4\",\n       \"org.reactivestreams\" % \"reactive-streams\" % \"1.0.3\",\n@@ -182,4 +198,4 @@ dependencyOverrides in Compile ++= {\n     )\n   }\n }\n-// LIBRARY_DEPENDENCIES_HASH 251f4eedc3e854683ef6f7633389c0a6f2f96e77\n+// LIBRARY_DEPENDENCIES_HASH a8155a25c7e7032c39904d87514fa1c85d054162"
    },
    {
      "sha": "1b7a43791f3858e39cb46e1b8c05e765eb18726e",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/package.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -129,6 +129,7 @@ package object core {\n   REFACTOR // change page id to Int (not String) — is always an Int anyway,\n   // except for the forum main page at Ty .io.\n   type PageId = String  // Int better\n+  type DiscId = String  // End user (admin) defined, could be anything, so String is good.\n \n   // ... But this should be a string.\n   type AltPageId = String"
    },
    {
      "sha": "6ad07ef7edce688cc1936ace01825943b9e94d65",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/user.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/modules/ed-core/src/main/scala/com/debiki/core/user.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/modules/ed-core/src/main/scala/com/debiki/core/user.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/user.scala?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -647,6 +647,8 @@ sealed trait Participant {    RENAME // to Pat, already started, in core/package\n \n   def isMember: Bo = Participant.isMember(id)\n   def isGuest: Bo = Participant.isGuestId(id)\n+  // Rename to jus isUser later when \"user\" means \"user not guest\" everywhere anyway.\n+  def isUserNotGuest: Bo = isMember && !isGroup && !isBuiltIn\n   def isGroup: Bo = false\n   def anyMemberId: Opt[MembId] = if (isRoleId(id)) Some(id) else None\n "
    },
    {
      "sha": "7c6b5664eda9b316ffcde728449b92fe912eaa68",
      "filename": "node_modules",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/node_modules?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1 +1 @@\n-Subproject commit 8bdea70bbbab0807b1cf39d34b8dedc04b075a11\n+Subproject commit 7c6b5664eda9b316ffcde728449b92fe912eaa68"
    },
    {
      "sha": "f2791d1691d61d4d3a3aa8ba6b756138e6fddcf6",
      "filename": "package.json",
      "status": "modified",
      "additions": 5,
      "deletions": 16,
      "changes": 21,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/package.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/package.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/package.json?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -4,7 +4,7 @@\n   \"description\": \"Talkyard's client side web app\",\n   \"version\": \"0.0.1\",\n   \"homepage\": \"https://www.talkyard.io\",\n-  \"license\": \"AGPL-3.0\",\n+  \"license\": \"AGPL-3.0-or-later\",\n   \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"\"\n@@ -45,20 +45,9 @@\n     \"@types/jest\": \"^26.0.19\",\n     \"@types/markdown-it\": \"^12.0.1\",\n     \"@types/minimist\": \"^1.2.1\",\n-    \"@types/node\": \"^14.14.13\",\n+    \"@types/node\": \"^16.0.0\",\n     \"@types/supertest\": \"^2.0.10\",\n-    \"@wdio/cli\": \"^6.10.10\",\n-    \"@wdio/devtools-service\": \"^6.10.10\",\n-    \"@wdio/dot-reporter\": \"^6.10.6\",\n-    \"@wdio/firefox-profile-service\": \"^6.10.6\",\n-    \"@wdio/local-runner\": \"^6.10.10\",\n-    \"@wdio/mocha-framework\": \"^6.10.10\",\n-    \"@wdio/selenium-standalone-service\": \"^6.10.10\",\n-    \"@wdio/spec-reporter\": \"^6.10.6\",\n-    \"@wdio/static-server-service\": \"^6.10.10\",\n-    \"@wdio/sync\": \"^6.10.10\",\n     \"ansi-colors\": \"^4.1.1\",\n-    \"chromedriver\": \"^91.0.0\",\n     \"del\": \"^5.1.0\",\n     \"gulp\": \"^4.0.2\",\n     \"gulp-clean-css\": \"^4.3.0\",\n@@ -89,11 +78,11 @@\n     \"supertest\": \"^6.0.1\",\n     \"sync-request\": \"^6.1.0\",\n     \"ts-jest\": \"^26.4.4\",\n+    \"ts-node\": \"^10.0.0 — results in 'TypeError: minimist is not a function', in tyd.ts line 112:  minimist(process.argv.slice(2));\",\n     \"ts-node\": \"^9.1.1\",\n     \"tsconfig-paths\": \"^3.9.0\",\n-    \"typescript\": \"^4.1.3\",\n-    \"uglify-js\": \"^3.11.5\",\n-    \"wdio-chromedriver-service\": \"^6.0.3\"\n+    \"typescript\": \"^4.3.5\",\n+    \"uglify-js\": \"^3.11.5\"\n   },\n   \"greenkeeper\": {\n     \"ignore\": ["
    },
    {
      "sha": "bf9493e141f7369fda07be4bc4134b9a2a464ddb",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans/tyse-v0-dev?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1 +1 @@\n-Subproject commit 9c6c22a07b22e3d52d4691aff6f8ef043711d57f\n+Subproject commit bf9493e141f7369fda07be4bc4134b9a2a464ddb"
    },
    {
      "sha": "57f612e2c5b9cbb9f4075f805dbc35b67b38e052",
      "filename": "relchans/tyse-v0-regular",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans/tyse-v0-regular?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1 +1 @@\n-Subproject commit ea04b99b4ae065ea14e4295ed437d894147a182b\n+Subproject commit 57f612e2c5b9cbb9f4075f805dbc35b67b38e052"
    },
    {
      "sha": "0794e1b933f312ec85893a93f76962a1c45181f3",
      "filename": "s/impl/build-prod-images.sh",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/s/impl/build-prod-images.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/s/impl/build-prod-images.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/impl/build-prod-images.sh?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -161,16 +161,22 @@ if [ -z \"$skip_e2e_tests\" ]; then\n   fi\n \n \n-  # Run e2e tests, but not as root.\n+  exit_code_file='./target/e2e-tests-exit-code'\n+  rm -f $exit_code_file\n+\n+  # Run Webdrier.io e2e tests, but not as root.\n   # To stop these e2e tests, you need to 'sudo -i' in another shell, then 'ps aux | grep e2e'\n   # and then kill the right stuff.\n-  su $my_username -c \"s/run-e2e-tests.sh --is-root --prod $all_orig_options ; echo \\$? > ./target/e2e-tests-exit-code\"\n+  echo \"Running E2E tests ...\"\n+  su $my_username -c \"s/run-e2e-tests.sh --is-root --prod $all_orig_options ; echo \\$? > $exit_code_file\"\n \n-  e2e_tests_exit_code=`cat ./target/e2e-tests-exit-code`\n+  e2e_tests_exit_code=$(cat $exit_code_file)\n \n   if [ \"$e2e_tests_exit_code\" != '0' ]; then\n     echo\n-    echo E2E tests failed. Aborting.\n+    echo \"E2E tests failed. Aborting build.\"\n+    echo\n+    echo \"(You can test run the failed test now — Talkyard server still running.)\"\n     echo\n     die_if_in_script\n   fi"
    },
    {
      "sha": "6cf9deb68ff80891305e9ea11f9d681e4beca000",
      "filename": "s/impl/tyd-e2e-tests.ts",
      "status": "added",
      "additions": 367,
      "deletions": 0,
      "changes": 367,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/s/impl/tyd-e2e-tests.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/s/impl/tyd-e2e-tests.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/impl/tyd-e2e-tests.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,367 @@\n+import * as _  from 'lodash';\n+import { ParsedArgs as minimist_ParsedArgs } from 'minimist';\n+import * as fs from 'fs';\n+import * as glob from 'glob';\n+import { die, dieIf, logMessage, logMessageIf, logDebug,\n+         logError, logErrorIf, logErrorNoTrace, logErrorNoTraceIf, logUnusual\n+         } from '../../tests/e2e-wdio7/utils/log-and-die';\n+import * as tyu from './tyd-util';\n+import type { ExitCode } from './tyd-util';\n+\n+//type Pr<R> = Promise<R>;\n+\n+//x <reference path=\"../../client/short-types.ts\" />\n+//x <reference path=\"../../client/types-and-const-enums.ts\" />\n+\n+\n+export function runE2eTestsExitIfErr(ps: {\n+  wdioVersion: 6 | 7,\n+  allSubCmdsSt: St,\n+  allSubCmds: St[],\n+  opts: minimist_ParsedArgs,\n+}) {\n+\n+const { allSubCmdsSt, allSubCmds, opts } = ps;\n+\n+\n+// Cycle e2e test logs:  (dupl path, also in the reporter [693RMSDM3])\n+//   e2e-test-logs —> e2e-test-logs-old\n+// And, if -old non-empty:\n+//   e2e-test-logs-old —> e2e-test-logs-older\n+//   e2e-test-logs-older —> delete\n+const e2eLogsDir = 'target/e2e-test-logs';\n+const e2eLogsDirOld = e2eLogsDir + '-old';\n+const e2eLogsDirOlder = e2eLogsDir + '-older';\n+if (fs.existsSync(e2eLogsDirOld)) {\n+  const oldLogs = glob.sync(e2eLogsDirOld, {});\n+  if (!oldLogs.length) {\n+    tyu.spawnInForeground(`rmdir ${e2eLogsDirOld}`);\n+  }\n+  else {\n+    // Delete -older, rename -old to -older.\n+    // `mv -old -older` places -old *inside* -older/  — need to delete it first.\n+    // (Also with flag --no-target-directory.)\n+    tyu.spawnInForeground(`rm -fr ${e2eLogsDirOlder}`);\n+    tyu.spawnInForeground(`mv ${e2eLogsDirOld} ${e2eLogsDirOlder}`);\n+  }\n+}\n+if (fs.existsSync(e2eLogsDir)) {\n+  tyu.spawnInForeground(`mv -f ${e2eLogsDir} ${e2eLogsDirOld}`);\n+}\n+tyu.spawnInForeground(`mkdir ${e2eLogsDirOld}`);\n+\n+\n+\n+//const e2eSpecsPattern = `tests/e2e/specs/${subCmd ? `*${subCmd}*.ts` : '*.ts'}`;\n+//const allMatchingSpecs_old = glob.sync(e2eSpecsPattern, {});\n+\n+const testProjDir = ps.wdioVersion === 6 ? 'tests/e2e' : 'tests/e2e-wdio7';\n+const specsGlob = testProjDir + '/specs/' + (ps.wdioVersion === 6 ? '*.ts' : '**.e2e.ts');\n+const allSpecs = glob.sync(specsGlob, {});\n+\n+let allMatchingSpecs: St[] = [...allSpecs];\n+\n+for (const pattern of allSubCmds) {\n+  // Dupl filter (987RM29565W)\n+  allMatchingSpecs = allMatchingSpecs.filter((fileName: St) => {\n+    // '!' and '0' (like, Nothing, Not) means exclude those tests.\n+    // (0 is simpler to type on the command line, need not be escaped).\n+    const shallInclude = pattern[0] !== '0' && pattern[0] !== '!';\n+    const p = shallInclude ? pattern : pattern.substr(1, 999);  // drop any '!'\n+    const matchesType = fileName.indexOf(p) >= 0;\n+    return matchesType === shallInclude;\n+  });\n+}\n+\n+\n+console.log(`Specs patterns:  ${allSubCmdsSt}`);\n+console.log(`Specs glob:      ${specsGlob}`);\n+console.log(`Specs matching:\\n - ${allMatchingSpecs.join('\\n - ')}`);\n+\n+\n+// Let wdio handle signals, until it exits.\n+// But maybe exit directly on SIGINT if running >= 2 specs? Then probably not debugging.\n+process.on('SIGINT', function() {\n+  if (allMatchingSpecs.length >= 2) {\n+    logMessage(`Caught SIGINT. Exiting, since >= 2 specs, apparently not debugging.`);\n+    process.exit(1);\n+  }\n+  else {\n+    logMessage(`Caught SIGINT, not exiting, maybe we're debugging?`);\n+  }\n+});\n+\n+\n+// Can look at node_modules/@wdio/cli/build/launcher.js  to see\n+// ex of how handle async errs?\n+//\n+async function runE2eTests(): Promise<ExitCode> {\n+  let zeroOrFirstErrorCode: U | Nr;\n+\n+  // Command line arguments and the test runners?\n+  //\n+  // It seems the Wdio test runner child processes we launch here inherit our\n+  // command line incl arguments, and same working dir — in local-runner, there's\n+  // fork() with: { cwd: process.cwd(), env: runnerEnv, execArgv: this.execArgv },\n+  // see: ../node_modules/@wdio/local-runner/build/worker.js\n+\n+  async function withSpecsMatching(testTypes: St[] | St[][], run: (specs: St[]) =>\n+          Promise<ExitCode> | 'Skip') {\n+\n+    if (_.isString(testTypes[0])) {\n+      testTypes = [testTypes as St[]];\n+    }\n+    dieIf(!testTypes?.[0]?.length, 'TyE38590RTK');\n+    let specsNow = [];\n+    for (let tts of testTypes) {\n+      let moreSpecs = allMatchingSpecs;\n+      for (let tt of tts) {\n+        // Dupl filter (987RM29565W)\n+        moreSpecs = moreSpecs.filter((fileName: St) => {\n+          // '!' and '0' (like, Nothing, Not) means exclude those tests.\n+          const shallInclude = tt[0] !== '0' && tt[0] !== '!';\n+          const pattern = shallInclude ? tt : tt.substr(1, 999);  // drop any '!'\n+          const matchesType = fileName.indexOf(pattern) >= 0;\n+          return matchesType === shallInclude;\n+        });\n+      }\n+      specsNow = [...specsNow, ...moreSpecs];\n+    }\n+    const num = specsNow.length;\n+    if (num >= 1) {\n+      const sep = '\\n - ';\n+      const what = `'${testTypes.join(' ')}'`;\n+      logMessage(`Running ${num} specs matching ${what}:` + sep + specsNow.join(sep));\n+\n+      const exitCode = await run(specsNow);\n+      if (exitCode === 'Skip')\n+        return;\n+\n+      if (!zeroOrFirstErrorCode) {\n+        zeroOrFirstErrorCode = exitCode;\n+      }\n+      logErrorNoTraceIf(exitCode !== 0, `ERROR exit code ${exitCode}, from:  ${what}`);\n+      logMessageIf(exitCode === 0, `Done, exit code 0, fine, from:  ${what}`);\n+    }\n+  }\n+\n+\n+  // Run all variants (e.g. 1br, 2br, 3br) — so we'll find all failing tests\n+  // without having to restart over and over again:\n+\n+\n+  // Things that didn't work:\n+  //\n+  // 1) Use wdio programaticallly:\n+  //     import Launcher from '@wdio/cli'\n+  //     const args = { specs }\n+  //     const wdio = new Launcher('./tests/e2e/wdio.conf.js', args);\n+  //     return wdio.run();\n+  // But that's not flexible enough — the way wdio merges `args` into the\n+  // config obj from wdio.conf.js seems makes it impossible to configure\n+  // [number of browsers] from here? For example,\n+  // see: `merge(object = {}) {...}`\n+  // in: node_modules/@wdio/config/build/lib/ConfigParser.js\n+  // Docs: https://webdriver.io/docs/clioptions.html#run-the-test-runner-programmatically\n+  //\n+  // 2) Spawn wdio directly, and pipe directly to wdio:\n+  //\n+  //     const childProcess = tydutil.spawnInBackground(\n+  //           'node_modules/.bin/wdio', ['tests/e2e/wdio.conf.js', '--parallel', '3']);\n+  //     childProcess.stdin.write(specs.join('\\n') + '\\n');\n+  //     childProcess.stdin.end();\n+  //     const promise = new Promise<ExitCode>(function(resolve, reject) {\n+  //       childProcess.once('exit', function(exitCode: ExitCode) {\n+  //         resolve(exitCode);\n+  //       });\n+  //     })\n+  //     const exitCode = await promise;\n+  //     return exitCode;\n+  //\n+  // Won't work, because wdio starts before we pipe to it — so wdio looks only\n+  // at the config file, starts the wrong tests, ignores the stdin pipe input,\n+  // and exits. But maybe there's a Wdio flag to wait for stdin?\n+  // I don't see anything in the docs:  https://webdriver.io/docs/clioptions.html\n+  // (About Nodejs and pipes, see: https://stackoverflow.com/a/52649324)\n+  //\n+  // Does work:\n+  // 3) By using sh -c  we can pipe to Wdio's stdio directly when it starts,\n+  // like this 'sh -c ... | ...', look:\n+  //\n+  //    bash$ sh -c 'echo \"aaa\\nbb\\ncc\\n\\ndd\\n\" | cat'\n+  //    aaa\n+  //    bb\n+  //    cc\n+  //    \n+  //    dd\n+\n+  const optsStr = tyu.stringifyOpts(opts) + ' --isInProjBaseDir';\n+\n+  async function runWdioInForeground(specs: St[], wdioArgs: St): Promise<Nr> {\n+    // Need to escape the backslask, like this:  `sh -c \"...\\\\n...\"`,\n+    // so that  sh   gets \"...\\n...\" instead of a real line break.\n+    const specsOnePerLine = specs.join('\\\\n');\n+    const wdioConfFile = ps.wdioVersion === 6\n+          ? `${testProjDir}/wdio.conf.js`  // wdio 6, in tests/e2e/.  [wdio_6_to_7]\n+          : `${testProjDir}/wdio.conf.ts`; // wdio 7, in tests/e2e-wdio7/\n+    const commandLine =\n+            `echo \"${specsOnePerLine}\" ` +\n+              `| ${testProjDir}/node_modules/.bin/wdio ${wdioConfFile} ${\n+                    optsStr} ${wdioArgs}`;\n+    const exitCode = await tyu.spawnInForeground('sh', ['-c', commandLine]);\n+    return exitCode;\n+  }\n+\n+\n+  // TODO   Don't run magic time tests in parallel — they mess up the\n+  // time for each other.\n+\n+\n+\n+  const skipAlways = ['!UNIMPL', '!-impl.', '!imp-exp-imp-exp-site'];\n+  const skipEmbAndAlways = ['!embcom', '!embedded-', '!embforum.', ...skipAlways]\n+  const skip2And3Browsers = ['!.2br', '!.3br'];\n+\n+\n+  // ----- 1 browser\n+\n+  let next: St[] | St[][] = [...skip2And3Browsers, ...skipEmbAndAlways];\n+\n+  await withSpecsMatching(next, async (specs: St[]): Promise<ExitCode> => {\n+    //const pipeSpecsToWdio__old =\n+    //        `echo \"${ specs.join('\\\\n') }\" ` +\n+    //          `| node_modules/.bin/wdio  tests/e2e/wdio.conf.js  --parallel 3`;\n+    return runWdioInForeground(specs, '');\n+  });\n+\n+\n+  // ----- 2 browsers\n+\n+  // This tests needs a static file server.\n+  // Should rename this test: incl ss8080 in the name? (static server port 8080)\n+  await withSpecsMatching(['sso-login-required-w-logout-url.2br'], (): 'Skip' => {\n+    tyu.startStaticFileServer(8080, 'target/');\n+    return 'Skip';\n+  });\n+\n+  // Tests that don't modify time can run in parallel.\n+  next = ['.2br', '!.mtime', '!__e2e-test-template__', ...skipEmbAndAlways];\n+\n+  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n+    return runWdioInForeground(specs, '--2browsers');\n+  });\n+\n+  // But tests that do modify time cannot run in parallel (on the same server).\n+  next = ['.2br', '.mtime', ...skipEmbAndAlways];\n+\n+  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n+    return runWdioInForeground(specs, '--2browsers --not-parallel');\n+  });\n+\n+\n+  // ----- 3 browsers\n+\n+  next = ['.3br', ...skipEmbAndAlways];\n+\n+  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n+    return runWdioInForeground(specs, '--3browsers');\n+  });\n+\n+\n+  // ----- 1 browser, embedded comments\n+\n+  const skip23BrAndUnusualEmb = ['!b3c.', '!gatsby', '!embforum.',\n+          ...skip2And3Browsers, ...skipAlways];\n+  // Accidentally different file names.\n+  next = [['embedded-', ...skip23BrAndUnusualEmb],\n+          ['embcom.', ...skip23BrAndUnusualEmb]];\n+\n+  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n+    // Note: 8080 eighty eighty.\n+    tyu.startStaticFileServer(8080, 'target/');\n+    return await runWdioInForeground(specs,\n+              // Doesn't work, why not? Disable via xx. (BADSTCSRV)\n+              // The server starts, lisens to 8080, but never replies to anything :-|\n+              // Just times out.\n+              '-xx-static-server-8080 -xx-verbose');\n+  });\n+\n+\n+  next = [['embcom.', '.b3c.', '.1br.', ...skipAlways]];\n+\n+  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n+    tyu.startStaticFileServer(8080, 'target/');\n+    return runWdioInForeground(specs, ' --b3c ' +\n+              // Doesn't work (BADSTCSRV)\n+              '-xx-static-server-8080');\n+  });\n+\n+\n+  // ----- 2 browsers, embedded comments\n+\n+  // (There're currently no emb comments tests that modify time.)\n+\n+  // Rename somehow to  'embcmt-...'?\n+  next = [\n+        ['.2br', 'embedded-', '!.b3c.', ...skipAlways],\n+        ['.2br', 'embcom', '!.b3c.', ...skipAlways],\n+        ];\n+\n+  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n+    tyu.startStaticFileServer(8080, 'target/');\n+    return runWdioInForeground(specs, ' --2browsers ' +\n+              // Doesn't work (BADSTCSRV)\n+              '-xx-static-server-8080');\n+  });\n+\n+\n+  // ----- Gatsby, embedded comments\n+\n+    // Note: 8080 eighty eighty.\n+  tyu.stopStaticFileServer({ portNr: 8080, stopAnyAndAll: true });\n+\n+  next = ['embedded-', 'gatsby', ...skip2And3Browsers, ...skipAlways];\n+\n+  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n+    // Note: 8000 eighty zero zero.\n+    tyu.startStaticFileServer(8000, 'modules/gatsby-starter-blog/public/');\n+    return runWdioInForeground(specs,\n+              // Doesn't work (BADSTCSRV)\n+              '-xx-static-server-gatsby-v1-8000');\n+  });\n+\n+  // Note: 8000 eighty zero zero.\n+  tyu.stopStaticFileServer({ portNr: 8000, stopAnyAndAll: true });\n+\n+  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n+    tyu.startStaticFileServer(8000, 'modules/gatsby-starter-blog-ed-comments-0.4.4/public/');\n+    return runWdioInForeground(specs,\n+              // Doesn't work (BADSTCSRV)\n+              '-xx-static-server-gatsby-v1-old-ty-8000');\n+  });\n+\n+    // Note: 8000 eighty zero zero.\n+  tyu.stopStaticFileServer({ portNr: 8000, stopAnyAndAll: true });\n+\n+  return zeroOrFirstErrorCode;\n+}\n+\n+\n+\n+console.log(`Running e2e tests ...`);\n+\n+runE2eTests().then((code) => {\n+  const isFine = code === 0;\n+  const fineOrFailed = isFine ? 'fine' : 'tests FAILED';\n+  const logFn = isFine ? logMessage : logErrorNoTrace;\n+  logFn(`\\n\\nDone running e2e tests, exit code: ${code}, ${fineOrFailed}\\n`);\n+  logErrorNoTraceIf(code === undefined,\n+        `Error: Didn't run any tests at all [TyE0SPECSRUN]`);\n+  process.exit(code);\n+}, (error) => {\n+  console.error(`Error starting tests [TyEE2ESTART]`, error);  // error.stacktrace ?\n+  process.exit(1);\n+});\n+\n+\n+}\n\\ No newline at end of file"
    },
    {
      "sha": "caece45d5377d8bb6c518cf4876a2378a283789d",
      "filename": "s/impl/tyd-util.ts",
      "status": "added",
      "additions": 114,
      "deletions": 0,
      "changes": 114,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/s/impl/tyd-util.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/s/impl/tyd-util.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/impl/tyd-util.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,114 @@\n+import * as _  from 'lodash';\n+import { dieIf } from '../../tests/e2e-wdio7/utils/log-and-die';\n+import { ChildProcess, spawn as _spawnAsync, spawnSync as _spawnSync } from 'child_process';\n+\n+\n+export type ExitCode = Nr | Nl;\n+\n+\n+export function spawnInBackground(cmdMaybeArgs: St, anyArgs?: St[]): ChildProcess { // , opts: { pipeStdIn?: Bo } = {})\n+  let cmd = cmdMaybeArgs;\n+  let args = anyArgs;\n+\n+  if (_.isUndefined(args)) {\n+    const cmdAndArgs = cmdMaybeArgs.split(' ').filter(v => !!v.trim());\n+    cmd = cmdAndArgs[0];\n+    args = cmdAndArgs.slice(1);\n+  }\n+\n+  console.log(`\\NSPAWN BG:  ${cmd} ${args.join(' ')}\\n`);\n+  //const stdio = opts.pipeStdIn ? ['pipe', process.stdout, process.stderr] : 'inherit';\n+  const childProcess = _spawnAsync(cmd, args, { detached: true, stdio: 'inherit' });\n+  //childProcess.stdout.pipe(process.stdout);\n+  return childProcess;\n+}\n+\n+\n+export function spawnInForeground(cmdMaybeArgs: St, anyArgs?: St[], env?: NodeJS.ProcessEnv)\n+        : ExitCode {\n+  let cmd = cmdMaybeArgs;\n+  let args = anyArgs;\n+\n+  if (_.isUndefined(args)) {\n+    const cmdAndArgs = cmdMaybeArgs.split(' ').filter(v => !!v.trim());\n+    cmd = cmdAndArgs[0];\n+    args = cmdAndArgs.slice(1);\n+  }\n+\n+  // For now:\n+  const envSt = !env ? '' : ('TY_ENV_ARGV_ST=\"' + env.TY_ENV_ARGV_ST + '\"  ');\n+  console.log(`\\nSPAWN FG:\\n` +\n+        `  ${envSt}${cmd} ${args.join(' ')}\\n`);\n+\n+  // stdio 'inherit' makes the child process write directly to our stdout,\n+  // so colored output and CTRL+C works.\n+  const result = _spawnSync(cmd, args, { env, stdio: 'inherit' });\n+  return result.status;\n+}\n+\n+\n+\n+export function stringifyOpts(opts: { [k: string]: any }): St {\n+  return _.map(opts, (v, k: St) => {\n+    // For now, don't allow quotes in opts?\n+    const vStr = _.isString(v) ? v : '';\n+    const hasSingleQuote = vStr.indexOf(\"'\") >= 0;\n+    const hasDoubleQuote = vStr.indexOf('\"') >= 0;\n+    dieIf(hasSingleQuote || hasDoubleQuote,\n+          `Opts with single or double quotes ` +\n+          `not yet supported:  --${k} ${v}  [TyEBADOPT48R5]`);\n+    //const quote = hasSingleQuote ? '\"' : (hasDoubleQuote ? '\"' :\n+    //      // Maybe better use single quotes anyway? So Bash won't do sth weird.\n+    //      \"'\"); \n+    const quote = \"'\"; // safest, right\n+    const spaceValue = v === true ? '' : ` ${quote}${v}${quote}`;\n+    return `--${k}${spaceValue}`;\n+  }).join(' ');\n+}\n+\n+\n+\n+interface StaticFileServer {\n+  serverProcess: ChildProcess;\n+  relativeFileDir: St;\n+  numWantsIt: Nr;\n+}\n+\n+const serverAndDirByPort: { [portNr: string]: StaticFileServer } = {};\n+\n+export function startStaticFileServer(portNr: Nr, relativeFileDir: St) {\n+  const server = serverAndDirByPort[portNr];\n+  if (!server) {\n+    const serverProcess: ChildProcess = spawnInBackground(\n+            `node_modules/.bin/http-server -p${portNr} ${relativeFileDir}`);\n+    serverAndDirByPort[portNr] = {\n+      serverProcess,\n+      relativeFileDir,\n+      numWantsIt: 1,\n+    };\n+  }\n+  else {\n+    dieIf(server.relativeFileDir !== relativeFileDir,\n+          `Cannot run two servers with different file dirs on same port ${portNr}:` +\n+          `    old server.relativeFileDir: ${server.relativeFileDir}\\n` +\n+          `    new server.relativeFileDir: ${relativeFileDir} ` +\n+          `  [TyE60RMD25]`);\n+    server.numWantsIt = server.numWantsIt + 1;\n+  }\n+}\n+\n+\n+export function stopStaticFileServer(ps: { portNr: Nr, stopAnyAndAll?: Bo }) {\n+  const server = serverAndDirByPort[ps.portNr];\n+  if (!server && ps.stopAnyAndAll)\n+    return;\n+\n+  dieIf(!server, `No server to stop at port ${ps.portNr} [TyE60RMD27]`);\n+  server.numWantsIt = server.numWantsIt - 1;\n+  dieIf(server.numWantsIt < 0, `Less than 0 wants server [TyE60RMD28]`);\n+  if (server.numWantsIt === 0 || ps.stopAnyAndAll) {\n+    const childProcess: ChildProcess = server.serverProcess;\n+    childProcess.kill();\n+    delete serverAndDirByPort[ps.portNr];\n+  }\n+}"
    },
    {
      "sha": "bc73f41d166b518a02c5f82dd4291ce7524938dd",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 21,
      "deletions": 4,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -282,7 +282,8 @@ function runAllE2eTests {\n   fi\n \n   # Start and exit the manual testing tests, just to verify this works.\n-  $r s/wdio --only manual.2browsers $args\n+  $r s/wdio --only manual.2browsers $args  # remove soon\n+  $r s/wdio-7 --only dir.manual.2br.e2e.ts --cd -i $args\n   #\n   # To restart, reusing same test site: (not deleting and recreating)\n   #\n@@ -341,7 +342,9 @@ function runAllE2eTests {\n   $r s/wdio --only private-chat.3browsers $args\n \n   # Is named 'forum-' because there's another test with 'drafts-not-logged-in' in the name.\n+  # But now that one got renamed, so remove 'forum-' from here — should be 'dir.' instead for \"direct\".\n   $r s/wdio --only forum-drafts-not-logged-in.2browsers $args\n+\n   $r s/wdio --only drafts-new-topic.2br.mtime $args\n   $r s/wdio --only drafts-new-topic-from-cats-page $args\n   $r s/wdio --only drafts-reply-edit-dir-msg.2br.mtime $args\n@@ -574,7 +577,9 @@ function runAllE2eTests {\n \n   # For testing manually. Just verify the test starts properly.\n   # For now, not \"manual\" (with 'l' at the end) — that'd start manual.2browsers too  o.O\n-  $r s/wdio       --only embcom.manua.2br $args\n+  $r s/wdio       --only embcom.manua.2br $args  # delete soon\n+  $r s/wdio-7     --only embcom.manual.2br --cd -i $args\n+  $r s/wdio-7     --only embcom.manyframes.manual.2br --cd -i $args\n \n   # Also see navigation-as-* above.\n   $r s/wdio       --only embedded-comments-navigation-as-guest $args\n@@ -583,13 +588,16 @@ function runAllE2eTests {\n   $r s/wdio       --only embedded-comments-create-site-req-verif-email.2browsers $args\n   $r s/wdio       --only embedded-comments-create-site-forum-intro-tour $args\n   $r s/wdio       --only embedded-comments-create-site-import-disqus.2br $args\n-  $r s/wdio       --only embedded-comments-drafts-not-logged-in $args\n+  $r s/wdio-7     --only embcom.drafts-previews-not-logged-in.2br --cd -i $args\n   $r s/wdio       --only embedded-comments-scroll-and-load-more.2browsers $args\n   $r s/wdio       --only embedded-comments-scroll-embedding-page $args\n   # (no -old-name version, because the new name is always included in the server's genetarted html.)\n+\n   $r s/wdio       --only embedded-comments-different-disc-ids-same-page $args\n+  #r s/wdio       --only embcom.many-comment-iframes-click-load-more.2br $args TESTS_MISSING\n   $r s/wdio       --only embedded-comments-discussion-id.test $args\n   $r s/wdio       --only embedded-comments-discussion-id-old-name $args\n+\n   $r s/wdio       --only embedded-comments-guest-login-email-notf-unsbscribe $args\n   $r s/wdio       --only embcom.all-idp-logins.1br.extidp $args\n   $r s/wdio       --only embcom.all-idp-logins-old-name.1br.extidp $args\n@@ -599,7 +607,8 @@ function runAllE2eTests {\n   $r s/wdio --b3c --only embcom.b3c.unverif-gmail.1br.extidp $args\n   $r s/wdio       --only embedded-comments-edit-and-vote.test $args\n   $r s/wdio       --only embedded-comments-edit-and-vote-old-name $args\n-  $r s/wdio       --only embedded-comments-vote-first $args\n+  $r s/wdio-7     --only embcom.vote-bef-page-exists.1br --cd -i $args\n+  $r s/wdio-7     --only embcom.reply-vote-report-bef-login.2br --cd -i $args\n   $r s/wdio       --only embedded-comments-conf-notf-pref-first $args\n   $r s/wdio       --only embedded-comments-sort-order-op-likes-btn-txt.2browsers $args\n   $r s/wdio       --only embedded-comments-category-refs.2browsers $args\n@@ -619,6 +628,14 @@ function runAllE2eTests {\n \n   # Single Sign-On, embedded comments:\n   $r s/wdio       --only embcom.sso.token-direct-w-logout-url.2br $args\n+  $r s/wdio       --only embcom.sso.token-in-cookie.2br $args\n+\n+  # Many comments iframes:\n+  $r s/wdio-7     --only embcom.manyframes.basic.2br --cd -i $args\n+  $r s/wdio-7     --only embcom.manyframes.drafts-repl-to.2br --cd -i $args\n+  $r s/wdio-7     --only embcom.manyframes.js-api.2br --cd -i $args\n+\n+\n \n   if [ -n \"$http_server_pid\" ]; then\n     kill $http_server_pid"
    },
    {
      "sha": "a1f1ba2687f43ab1176ccdf0c94516b2436d0c58",
      "filename": "s/tyd.ts",
      "status": "modified",
      "additions": 67,
      "deletions": 458,
      "changes": 525,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/s/tyd.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/s/tyd.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/tyd.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1,11 +1,14 @@\n import * as _  from 'lodash';\n import * as minimist from 'minimist';\n-import * as fs from 'fs';\n-import * as glob from 'glob';\n import { die, dieIf, logMessage, logMessageIf, logDebug, logError, logErrorIf, logUnusual\n-            } from '../tests/e2e/utils/log-and-die';\n-import { ChildProcess, spawn as _spawnAsync, spawnSync as _spawnSync } from 'child_process';\n+            } from '../tests/e2e-wdio7/utils/log-and-die';\n import { argv } from 'process';\n+import * as tyu from './impl/tyd-util';\n+import type { ExitCode } from './impl/tyd-util';\n+import { runE2eTestsExitIfErr } from './impl/tyd-e2e-tests';\n+\n+/// <reference path=\"../client/types-and-const-enums.ts\" />\n+\n \n // Bash, Zsh, Fish shell command line completion:\n // ----------------------------------------------\n@@ -61,58 +64,15 @@ completion.init();\n // link-previews-twitter.1br.extln.ts\n \n \n-type ExitCode = Nr | Nl;\n-\n-\n-function spawnInBackground(cmdMaybeArgs: St, anyArgs?: St[]): ChildProcess { // , opts: { pipeStdIn?: Bo } = {})\n-  let cmd = cmdMaybeArgs;\n-  let args = anyArgs;\n-\n-  if (_.isUndefined(args)) {\n-    const cmdAndArgs = cmdMaybeArgs.split(' ').filter(v => !!v.trim());\n-    cmd = cmdAndArgs[0];\n-    args = cmdAndArgs.slice(1);\n-  }\n-\n-  console.log(`\\NSPAWN BG:  ${cmd} ${args.join(' ')}\\n`);\n-  //const stdio = opts.pipeStdIn ? ['pipe', process.stdout, process.stderr] : 'inherit';\n-  const childProcess = _spawnAsync(cmd, args, { detached: true, stdio: 'inherit' });\n-  //childProcess.stdout.pipe(process.stdout);\n-  return childProcess;\n-}\n-\n-\n-function spawnInForeground(cmdMaybeArgs: St, anyArgs?: St[], env?: NodeJS.ProcessEnv)\n-        : ExitCode {\n-  let cmd = cmdMaybeArgs;\n-  let args = anyArgs;\n-\n-  if (_.isUndefined(args)) {\n-    const cmdAndArgs = cmdMaybeArgs.split(' ').filter(v => !!v.trim());\n-    cmd = cmdAndArgs[0];\n-    args = cmdAndArgs.slice(1);\n-  }\n-\n-  // For now:\n-  const envSt = !env ? '' : ('TY_ENV_ARGV_ST=\"' + env.TY_ENV_ARGV_ST + '\"  ');\n-  console.log(`\\nSPAWN FG:\\n` +\n-        `  ${envSt}${cmd} ${args.join(' ')}\\n`);\n-\n-  // stdio 'inherit' makes the child process write directly to our stdout,\n-  // so colored output and CTRL+C works.\n-  const result = _spawnSync(cmd, args, { env, stdio: 'inherit' });\n-  return result.status;\n-}\n-\n \n \n // Skip the firts two, argv[1] = /usr/bin/node  argv[2] = <path-to-repo>/s/tyd.\n // bash$ script.ts command cmdB cmdC --opt 1 --optB=2\n // places [command, cmdB, cmdC] in field '_', and opt-vals in key-vals.\n-const _tmpCommandsAndOpts: any = minimist(process.argv.slice(2));\n+const _tmpCommandsAndOpts: minimist.ParsedArgs = minimist(process.argv.slice(2));\n const subCmdsAndOpts = process.argv.slice(3);\n const commands = _tmpCommandsAndOpts['_'];\n-const opts = _tmpCommandsAndOpts;\n+const opts: minimist.ParsedArgs = _tmpCommandsAndOpts;\n delete opts._;\n  \n const mainCmd = commands[0];\n@@ -124,27 +84,9 @@ const allSubCmds: St[] = commands.slice(1);\n const allSubCmdsSt: St = allSubCmds.join(' ');\n let mainCmdIsOk: U | true;\n \n-function stringifyOpts(opts: { [k: string]: any }): St {\n-  return _.map(opts, (v, k: St) => {\n-    // For now, don't allow quotes in opts?\n-    const vStr = _.isString(v) ? v : '';\n-    const hasSingleQuote = vStr.indexOf(\"'\") >= 0;\n-    const hasDoubleQuote = vStr.indexOf('\"') >= 0;\n-    dieIf(hasSingleQuote || hasDoubleQuote,\n-          `Opts with single or double quotes ` +\n-          `not yet supported:  --${k} ${v}  [TyEBADOPT48R5]`);\n-    //const quote = hasSingleQuote ? '\"' : (hasDoubleQuote ? '\"' :\n-    //      // Maybe better use single quotes anyway? So Bash won't do sth weird.\n-    //      \"'\"); \n-    const quote = \"'\"; // safest, right\n-    const spaceValue = v === true ? '' : ` ${quote}${v}${quote}`;\n-    return `--${k}${spaceValue}`;\n-  }).join(' ');\n-}\n-\n logDebug(`commands: ${commands.join(' ')}`);\n logDebug(`    opts: ${JSON.stringify(opts)}`);\n-logDebug(`opts str: ${stringifyOpts(opts)}`);\n+logDebug(`opts str: ${tyu.stringifyOpts(opts)}`);\n \n const yarnOfflineSt = opts.offline || opts.o ? '--offline' : '';\n \n@@ -156,39 +98,39 @@ if (mainCmd === 'h' || mainCmd === 'help') {\n \n \n if (mainCmd === 'nodejs') {\n-  spawnInForeground('docker-compose run --rm nodejs ' + subCmdsAndOpts.join(' '));\n+  tyu.spawnInForeground('docker-compose run --rm nodejs ' + subCmdsAndOpts.join(' '));\n   process.exit(0);\n }\n \n \n if (mainCmd === 'yarn') {\n   // Maybe  --no-bin-links?  [x_plat_offl_builds]\n-  spawnInForeground('docker-compose run --rm nodejs yarn ' + subCmdsAndOpts.join(' '));\n+  tyu.spawnInForeground('docker-compose run --rm nodejs yarn ' + subCmdsAndOpts.join(' '));\n   process.exit(0);\n }\n \n \n if (mainCmd === 'gulp') {\n-  spawnInForeground('docker-compose run --rm nodejs gulp ' + subCmdsAndOpts.join(' '));\n+  tyu.spawnInForeground('docker-compose run --rm nodejs gulp ' + subCmdsAndOpts.join(' '));\n   process.exit(0);\n }\n \n \n if (mainCmd === 'cd' || mainCmd === 'clidb') {\n-  spawnInForeground('make db-cli');\n+  tyu.spawnInForeground('make db-cli');\n   process.exit(0);\n }\n \n \n if (mainCmd === 'ca' || mainCmd === 'cliapp') {\n-  spawnInForeground('make dead');\n-  spawnInForeground('s/d-cli');\n+  tyu.spawnInForeground('make dead');\n+  tyu.spawnInForeground('s/d-cli');\n   process.exit(0);\n }\n \n \n if (mainCmd === 'ps') {\n-  spawnInForeground('docker-compose ps');\n+  tyu.spawnInForeground('docker-compose ps');\n   process.exit(0);\n }\n \n@@ -198,38 +140,38 @@ if (mainCmd === 'l' || mainCmd === 'logs') {\n }\n \n function tailLogsThenExit() {\n-  spawnInForeground(`docker-compose logs -f --tail 0 ${allSubCmdsSt}`);\n+  tyu.spawnInForeground(`docker-compose logs -f --tail 0 ${allSubCmdsSt}`);\n   process.exit(0);\n }\n \n \n if (mainCmd === 'lr' || mainCmd === 'logsrecent') {\n-  spawnInForeground(`docker-compose logs -f --tail 555 ${allSubCmdsSt}`);\n+  tyu.spawnInForeground(`docker-compose logs -f --tail 555 ${allSubCmdsSt}`);\n   process.exit(0);\n }\n \n \n if (mainCmd === 'lra' || mainCmd === 'logsrecentapp') {\n-  spawnInForeground('docker-compose logs -f --tail 555 app');\n+  tyu.spawnInForeground('docker-compose logs -f --tail 555 app');\n   process.exit(0);\n }\n \n \n if (mainCmd === 'lo' || mainCmd === 'logsold') {\n-  spawnInForeground(`docker-compose logs ${allSubCmdsSt}`);\n+  tyu.spawnInForeground(`docker-compose logs ${allSubCmdsSt}`);\n   process.exit(0);\n }\n \n \n if (mainCmd === 'tw' || mainCmd === 'transpilewatch') {\n-  spawnInForeground(`make debug_asset_bundles`);\n-  spawnInForeground('make watch');\n+  tyu.spawnInForeground(`make debug_asset_bundles`);\n+  tyu.spawnInForeground('make watch');\n   process.exit(0);\n }\n \n \n if (mainCmd === 'w' || mainCmd === 'watch') {\n-  spawnInForeground('make watch');\n+  tyu.spawnInForeground('make watch');\n   process.exit(0);\n }\n \n@@ -239,7 +181,7 @@ if (mainCmd === 'u' || mainCmd === 'up') {\n \n   // If only starting some specific containers, skip Yarn and Make.\n   if (mainSubCmd) {\n-    spawnInForeground(`docker-compose up -d ${allSubCmdsSt}`);\n+    tyu.spawnInForeground(`docker-compose up -d ${allSubCmdsSt}`);\n     tailLogsThenExit();\n   }\n \n@@ -248,19 +190,19 @@ if (mainCmd === 'u' || mainCmd === 'up') {\n   // might decide to stop and restart just to pick up any soon newly built bundles?\n   // (Also, log messages from make and the app server get mixed up with each other.)\n   // Maybe  --no-bin-links?  [x_plat_offl_builds]\n-  spawnInForeground(`docker-compose run --rm nodejs yarn install ${yarnOfflineSt}`);\n-  let exitCode = spawnInForeground('make debug_asset_bundles');\n+  tyu.spawnInForeground(`docker-compose run --rm nodejs yarn install ${yarnOfflineSt}`);\n+  let exitCode: ExitCode = tyu.spawnInForeground('make debug_asset_bundles');\n   if (exitCode >= 1) {\n     logError(`Error building asset bundles, Make exit code: ${exitCode}`)\n     process.exit(exitCode);\n   }\n \n   // Run `up -d` in foreground, so we won't start the `logs -f` process too soon\n   // — that process would exit, if `up -d` hasn't yet started any containers.\n-  spawnInForeground('docker-compose up -d');\n+  tyu.spawnInForeground('docker-compose up -d');\n \n   // Just this:\n-  spawnInForeground('docker-compose logs -f --tail 0');\n+  tyu.spawnInForeground('docker-compose logs -f --tail 0');\n   // ... instead of the below,\n \n   // ... Skip this, because 'make watch' and assets rebuild problems\n@@ -290,12 +232,12 @@ if (mainCmd === 'u' || mainCmd === 'up') {\n   // on any change?\n   process.on('SIGINT', function() {\n     logMessage(`Caught SIGINT.`);\n-    // We'll continue after  spawnInForeground() below. (Need do nothing here.)\n+    // We'll continue after  tyu.spawnInForeground() below. (Need do nothing here.)\n   });\n \n   // Show logs until CTRL+C.\n   // (There's also:  process.on('SIGINT', function() { ... });\n-  spawnInForeground('docker-compose logs -f --tail 0');\n+  tyu.spawnInForeground('docker-compose logs -f --tail 0');\n \n   logMessage(`Stopping '${rebuildAssetsCmd}' ...`);\n   makeShouldExit = true;\n@@ -324,59 +266,59 @@ if (mainCmd === 'r' || mainCmd === 'restart') {\n function restartContainers(containers: St) {\n   const cs = (containers || '').trim();\n   logMessage(cs ? `Stopping containers: ${cs}...` : `Stopping all containers...`);\n-  spawnInForeground('sh', ['-c', `s/d kill ${cs}`]);\n+  tyu.spawnInForeground('sh', ['-c', `s/d kill ${cs}`]);\n \n   // If restarting the web/app, probably we want up-to-date assets?\n   if (!containers || containers.includes('web') || containers.includes('app')) {\n     logMessage(`Rebuilding assets if needed ...`);\n-    spawnInForeground('make debug_asset_bundles');\n+    tyu.spawnInForeground('make debug_asset_bundles');\n   }\n \n   logMessage(`Starting containers...`);\n-  spawnInForeground('sh', ['-c', `s/d start ${cs}`]);\n+  tyu.spawnInForeground('sh', ['-c', `s/d start ${cs}`]);\n   tailLogsThenExit();\n }\n \n \n if (mainCmd === 'recreate') {\n   const cs = allSubCmdsSt;  // which containers, e.g.  'web app'\n-  spawnInForeground('sh', ['-c', `s/d kill ${cs}; s/d rm -f ${cs}; s/d up -d ${cs}`]);\n+  tyu.spawnInForeground('sh', ['-c', `s/d kill ${cs}; s/d rm -f ${cs}; s/d up -d ${cs}`]);\n   tailLogsThenExit();\n }\n \n \n if (mainCmd === 'rebuild') {\n   rebuild();\n+  process.exit(0)\n }\n \n function rebuild() {\n   const cs = allSubCmdsSt;  // which containers, e.g.  'web app'\n   logMessage(`\\n**Removing: ${cs} **`)\n-  spawnInForeground('sh', ['-c', `s/d kill ${cs}; s/d rm -f ${cs}`]);\n+  tyu.spawnInForeground('sh', ['-c', `s/d kill ${cs}; s/d rm -f ${cs}`]);\n   logMessage(`\\n**Building: ${cs} **`)\n-  spawnInForeground('sh', ['-c', `s/d build ${cs}`]);\n+  tyu.spawnInForeground('sh', ['-c', `s/d build ${cs}`]);\n   logMessage(`\\n**Done rebuilding: ${cs}. Bye.**`)\n-  process.exit(0)\n }\n \n \n if (mainCmd === 'rs' || mainCmd === 'rebuildrestart') {\n   const cs = allSubCmdsSt;  // which containers\n   rebuild();\n   logMessage(`\\n**Starting: ${cs} **`)\n-  spawnInForeground('sh', ['-c', `s/d up -d ${cs}`]);\n+  tyu.spawnInForeground('sh', ['-c', `s/d up -d ${cs}`]);\n   tailLogsThenExit();\n }\n \n \n if (mainCmd === 'ka' || (mainCmd === 'kill' && mainSubCmd == 'app')) {\n-  spawnInForeground('s/d kill app');\n+  tyu.spawnInForeground('s/d kill app');\n   process.exit(0);\n }\n \n \n if (mainCmd === 'kw' || (mainCmd === 'kill' && mainSubCmd == 'web')) {\n-  spawnInForeground('s/d kill web');\n+  tyu.spawnInForeground('s/d kill web');\n   process.exit(0);\n }\n \n@@ -387,20 +329,20 @@ if (mainCmd === 'k' || mainCmd === 'kill') {\n }\n \n function killAllContainers() {\n-  spawnInForeground('make dead');\n+  tyu.spawnInForeground('make dead');\n }\n \n \n if (mainCmd === 'down') {\n   killAllContainers();\n-  spawnInForeground('s/d down');\n+  tyu.spawnInForeground('s/d down');\n   process.exit(0);\n }\n \n \n if (mainCmd === 'cleane2elogs') {\n-  spawnInForeground('rm -fr target/e2e-test-logs');\n-  spawnInForeground('mkdir target/e2e-test-logs');\n+  tyu.spawnInForeground('rm -fr target/e2e-test-logs');\n+  tyu.spawnInForeground('mkdir target/e2e-test-logs');\n   process.exit(1);\n }\n \n@@ -409,6 +351,7 @@ if (mainCmd === 'cleane2elogs') {\n //  E2E and API tests\n // -----------------------------------------------------------------------\n \n+\n const useHttps = argv.includes('--secure') || argv.includes('--https');\n \n if (useHttps) {\n@@ -417,6 +360,24 @@ if (useHttps) {\n }\n \n \n+{\n+  let wdioVersion: 6 | 7 = 7;\n+\n+  switch (mainCmd) {\n+    case 'e6':\n+    case 'e2e6':\n+      wdioVersion = 6;\n+      // Fall through.\n+    case 'e7':\n+    case 'e2e7':\n+      runE2eTestsExitIfErr({ wdioVersion, allSubCmdsSt, allSubCmds, opts });\n+      process.exit(0);\n+    default:\n+      // Continue below.\n+  }\n+}\n+\n+\n // -----------------------------------------------------------------------\n //  API and Typescript/Reactjs unit tests\n // -----------------------------------------------------------------------\n@@ -439,370 +400,18 @@ if (mainCmd === 'tapi' || mainCmd === 'testapi') {\n   // process.argv = ['node', 'jest', '--config', 'tests/api/jest.config.ts']\n   // — but won't work, if we switch to Deno instead, for this s/tyd.ts script?)\n \n-  spawnInForeground('./node_modules/.bin/jest',\n+  const exitCode = tyu.spawnInForeground('./node_modules/.bin/jest',\n         ['--config', 'tests/api/jest.config.ts'], jestTestEnv);\n \n-  process.exit(1);\n+  process.exit(exitCode);\n }\n \n-// -----------------------------------------------------------------------\n-// -----------------------------------------------------------------------\n-\n-\n-\n-if (mainCmd === 'e' || mainCmd === 'e2e') {\n-\n-// Cycle e2e test logs:  (dupl path, also in the reporter [693RMSDM3])\n-//   e2e-test-logs —> e2e-test-logs-old\n-// And, if -old non-empty:\n-//   e2e-test-logs-old —> e2e-test-logs-older\n-//   e2e-test-logs-older —> delete\n-const e2eLogsDir = 'target/e2e-test-logs';\n-const e2eLogsDirOld = e2eLogsDir + '-old';\n-const e2eLogsDirOlder = e2eLogsDir + '-older';\n-if (fs.existsSync(e2eLogsDirOld)) {\n-  const oldLogs = glob.sync(e2eLogsDirOld, {});\n-  if (!oldLogs.length) {\n-    spawnInForeground(`rmdir ${e2eLogsDirOld}`);\n-  }\n-  else {\n-    // Delete -older, rename -old to -older.\n-    // `mv -old -older` places -old *inside* -older/  — need to delete it first.\n-    // (Also with flag --no-target-directory.)\n-    spawnInForeground(`rm -fr ${e2eLogsDirOlder}`);\n-    spawnInForeground(`mv ${e2eLogsDirOld} ${e2eLogsDirOlder}`);\n-  }\n-}\n-if (fs.existsSync(e2eLogsDir)) {\n-  spawnInForeground(`mv -f ${e2eLogsDir} ${e2eLogsDirOld}`);\n-}\n-spawnInForeground(`mkdir ${e2eLogsDirOld}`);\n-\n-\n \n // -----------------------------------------------------------------------\n-//  E2E Tests  (move to other file?)\n // -----------------------------------------------------------------------\n \n-//const e2eSpecsPattern = `tests/e2e/specs/${subCmd ? `*${subCmd}*.ts` : '*.ts'}`;\n-//const allMatchingSpecs_old = glob.sync(e2eSpecsPattern, {});\n-\n-const allSpecs = glob.sync('tests/e2e/specs/*.ts', {});\n-let allMatchingSpecs: St[] = [...allSpecs];\n-\n-for (let pattern of allSubCmds) {\n-  // Dupl filter (987RM29565W)\n-  allMatchingSpecs = allMatchingSpecs.filter((fileName: St) => {\n-    // '!' and '0' (like, Nothing, Not) means exclude those tests.\n-    // (0 is simpler to type on the command line, need not be escaped).\n-    const shallInclude = pattern[0] !== '0' && pattern[0] !== '!';\n-    const p = shallInclude ? pattern : pattern.substr(1, 999);  // drop any '!'\n-    const matchesType = fileName.indexOf(p) >= 0;\n-    return matchesType === shallInclude;\n-  });\n-}\n-\n-\n-console.log(`Specs patterns:  ${allSubCmdsSt}`);\n-console.log(`Specs matching:\\n - ${allMatchingSpecs.join('\\n - ')}`);\n-\n-\n-// If we're run\n-// Let wdio handle signals — until it exits.\n-// But maybe exit directly on SIGINT if running >= 2 specs? Then probably not debugging.\n-process.on('SIGINT', function() {\n-  logMessage(`Caught SIGINT.`);\n-});\n-\n-// Can look at node_modules/@wdio/cli/build/launcher.js  to see\n-// ex of how handle async errs?\n-//\n-async function runE2eTests(): Promise<ExitCode> {\n-  let zeroOrFirstErrorCode: U | Nr;\n-\n-  // Command line arguments and the test runners?\n-  //\n-  // It seems the Wdio test runner child processes we launch here inherit our\n-  // command line incl arguments, and same working dir — in local-runner, there's\n-  // fork() with: { cwd: process.cwd(), env: runnerEnv, execArgv: this.execArgv },\n-  // see: ../node_modules/@wdio/local-runner/build/worker.js\n-\n-  async function withSpecsMatching(testTypes: St[] | St[][], run: (specs: St[]) =>\n-          Promise<ExitCode> | 'Skip') {\n-\n-    if (_.isString(testTypes[0])) {\n-      testTypes = [testTypes as St[]];\n-    }\n-    dieIf(!testTypes?.[0]?.length, 'TyE38590RTK');\n-    let specsNow = [];\n-    for (let tts of testTypes) {\n-      let moreSpecs = allMatchingSpecs;\n-      for (let tt of tts) {\n-        // Dupl filter (987RM29565W)\n-        moreSpecs = moreSpecs.filter((fileName: St) => {\n-          // '!' and '0' (like, Nothing, Not) means exclude those tests.\n-          const shallInclude = tt[0] !== '0' && tt[0] !== '!';\n-          const pattern = shallInclude ? tt : tt.substr(1, 999);  // drop any '!'\n-          const matchesType = fileName.indexOf(pattern) >= 0;\n-          return matchesType === shallInclude;\n-        });\n-      }\n-      specsNow = [...specsNow, ...moreSpecs];\n-    }\n-    const num = specsNow.length;\n-    if (num >= 1) {\n-      const sep = '\\n - ';\n-      const what = `'${testTypes.join(' ')}'`;\n-      logMessage(`Running ${num} specs matching ${what}:` + sep + specsNow.join(sep));\n-\n-      const exitCode = await run(specsNow);\n-      if (exitCode === 'Skip')\n-        return;\n-\n-      if (!zeroOrFirstErrorCode) {\n-        zeroOrFirstErrorCode = exitCode;\n-      }\n-      logErrorIf(exitCode !== 0, `ERROR exit code ${exitCode} from:  ${what}`);\n-      logMessageIf(exitCode === 0, `Done, fine, exit code 0 from:  ${what}`);\n-    }\n-  }\n-\n-\n-  // Run all variants (e.g. 1br, 2br, 3br) — so we'll find all failing tests\n-  // without having to restart over and over again:\n-\n-\n-  // Things that didn't work:\n-  //\n-  // 1) Use wdio programaticallly:\n-  //     import Launcher from '@wdio/cli'\n-  //     const args = { specs }\n-  //     const wdio = new Launcher('./tests/e2e/wdio.conf.js', args);\n-  //     return wdio.run();\n-  // But that's not flexible enough — the way wdio merges `args` into the\n-  // config obj from wdio.conf.js seems makes it impossible to configure\n-  // [number of browsers] from here? For example,\n-  // see: `merge(object = {}) {...}`\n-  // in: node_modules/@wdio/config/build/lib/ConfigParser.js\n-  // Docs: https://webdriver.io/docs/clioptions.html#run-the-test-runner-programmatically\n-  //\n-  // 2) Spawn wdio directly, and pipe directly to wdio:\n-  //\n-  //     const childProcess = spawnInBackground(\n-  //           'node_modules/.bin/wdio', ['tests/e2e/wdio.conf.js', '--parallel', '3']);\n-  //     childProcess.stdin.write(specs.join('\\n') + '\\n');\n-  //     childProcess.stdin.end();\n-  //     const promise = new Promise<ExitCode>(function(resolve, reject) {\n-  //       childProcess.once('exit', function(exitCode: ExitCode) {\n-  //         resolve(exitCode);\n-  //       });\n-  //     })\n-  //     const exitCode = await promise;\n-  //     return exitCode;\n-  //\n-  // Won't work, because wdio starts before we pipe to it — so wdio looks only\n-  // at the config file, starts the wrong tests, ignores the stdin pipe input,\n-  // and exits. But maybe there's a Wdio flag to wait for stdin?\n-  // I don't see anything in the docs:  https://webdriver.io/docs/clioptions.html\n-  // (About Nodejs and pipes, see: https://stackoverflow.com/a/52649324)\n-  //\n-  // Does work:\n-  // 3) By using sh -c  we can pipe to Wdio's stdio directly when it starts,\n-  // like this 'sh -c ... | ...', look:\n-  //\n-  //    bash$ sh -c 'echo \"aaa\\nbb\\ncc\\n\\ndd\\n\" | cat'\n-  //    aaa\n-  //    bb\n-  //    cc\n-  //    \n-  //    dd\n-\n-  const optsStr = stringifyOpts(opts) + ' --isInProjBaseDir';\n-\n-  async function runWdioInForeground(specs: St[], wdioArgs: St): Promise<Nr> {\n-    // Need to escape the backslask, like this:  `sh -c \"...\\\\n...\"`,\n-    // so that  sh   gets \"...\\n...\" instead of a real line break.\n-    const specsOnePerLine = specs.join('\\\\n');\n-    const commandLine = `echo \"${specsOnePerLine}\" ` +\n-              `| node_modules/.bin/wdio tests/e2e/wdio.conf.js ${optsStr} ${wdioArgs}`;\n-    const exitCode = await spawnInForeground('sh', ['-c', commandLine]);\n-    return exitCode;\n-  }\n-\n-\n-  // TODO   Don't run magic time tests in parallel — they mess up the\n-  // time for each other.\n-\n-  const serverAndDirByPort: { [portNr: string]: [ChildProcess, St] } = {};\n-\n-  function startStaticFileServer(portNr: Nr, relDir: St) {\n-    const anyOld = serverAndDirByPort[portNr];\n-    if (anyOld) {\n-      const oldDir = anyOld[1];\n-      if (oldDir === relDir) {\n-        // Already started.\n-        return;\n-      }\n-      const oldServer: ChildProcess = anyOld[0];\n-      oldServer.kill();\n-    }\n-    const cp = spawnInBackground(`node_modules/.bin/http-server -p${portNr} ${relDir}`);\n-    serverAndDirByPort[portNr] = [cp, relDir];\n-  }\n-\n-  function stopStaticFileServer(portNr: Nr) {\n-    const anyOld = serverAndDirByPort[portNr];\n-    if (anyOld) {\n-      const oldServer: ChildProcess = anyOld[0];\n-      oldServer.kill();\n-    }\n-  }\n \n-\n-  const skipAlways = ['!UNIMPL', '!-impl.', '!imp-exp-imp-exp-site'];\n-  const skipEmbAndAlways = ['!embcom', '!embedded-', '!embforum.', ...skipAlways]\n-  const skip2And3Browsers = ['!.2br', '!.3br'];\n-\n-\n-  // ----- 1 browser\n-\n-  let next: St[] | St[][] = [...skip2And3Browsers, ...skipEmbAndAlways];\n-\n-  await withSpecsMatching(next, async (specs: St[]): Promise<ExitCode> => {\n-    //const pipeSpecsToWdio__old =\n-    //        `echo \"${ specs.join('\\\\n') }\" ` +\n-    //          `| node_modules/.bin/wdio  tests/e2e/wdio.conf.js  --parallel 3`;\n-    return runWdioInForeground(specs, '');\n-  });\n-\n-\n-  // ----- 2 browsers\n-\n-  // This tests needs a static file server.\n-  // Should rename this test: incl ss8080 in the name? (static server port 8080)\n-  await withSpecsMatching(['sso-login-required-w-logout-url.2br'], (): 'Skip' => {\n-    startStaticFileServer(8080, 'target/');\n-    return 'Skip';\n-  });\n-\n-  // Tests that don't modify time can run in parallel.\n-  next = ['.2br', '!.mtime', '!__e2e-test-template__', ...skipEmbAndAlways];\n-\n-  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n-    return runWdioInForeground(specs, '--2browsers');\n-  });\n-\n-  // But tests that do modify time cannot run in parallel (on the same server).\n-  next = ['.2br', '.mtime', ...skipEmbAndAlways];\n-\n-  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n-    return runWdioInForeground(specs, '--2browsers --not-parallel');\n-  });\n-\n-\n-  // ----- 3 browsers\n-\n-  next = ['.3br', ...skipEmbAndAlways];\n-\n-  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n-    return runWdioInForeground(specs, '--3browsers');\n-  });\n-\n-\n-  // ----- 1 browser, embedded comments\n-\n-  const skip23BrAndUnusualEmb = ['!b3c.', '!gatsby', '!embforum.',\n-          ...skip2And3Browsers, ...skipAlways];\n-  // Accidentally different file names.\n-  next = [['embedded-', ...skip23BrAndUnusualEmb],\n-          ['embcom.', ...skip23BrAndUnusualEmb]];\n-\n-  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n-    // Note: 8080 eighty eighty.\n-    startStaticFileServer(8080, 'target/');\n-    return await runWdioInForeground(specs,\n-              // Doesn't work, why not? Disable via xx. (BADSTCSRV)\n-              // The server starts, lisens to 8080, but never replies to anything :-|\n-              // Just times out.\n-              '-xx-static-server-8080 -xx-verbose');\n-  });\n-\n-\n-  next = [['embcom.', '.b3c.', '.1br.', ...skipAlways]];\n-\n-  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n-    startStaticFileServer(8080, 'target/');\n-    return runWdioInForeground(specs, ' --b3c ' +\n-              // Doesn't work (BADSTCSRV)\n-              '-xx-static-server-8080');\n-  });\n-\n-\n-  // ----- 2 browsers, embedded comments\n-\n-  // (There're currently no emb comments tests that modify time.)\n-\n-  // Rename somehow to  'embcmt-...'?\n-  next = [\n-        ['.2br', 'embedded-', '!.b3c.', ...skipAlways],\n-        ['.2br', 'embcom', '!.b3c.', ...skipAlways],\n-        ];\n-\n-  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n-    startStaticFileServer(8080, 'target/');\n-    return runWdioInForeground(specs, ' --2browsers ' +\n-              // Doesn't work (BADSTCSRV)\n-              '-xx-static-server-8080');\n-  });\n-\n-\n-  // ----- Gatsby, embedded comments\n-\n-    // Note: 8080 eighty eighty.\n-  stopStaticFileServer(8080);\n-\n-  next = ['embedded-', 'gatsby', ...skip2And3Browsers, ...skipAlways];\n-\n-  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n-    // Note: 8000 eighty zero zero.\n-    startStaticFileServer(8000, 'modules/gatsby-starter-blog/public/');\n-    return runWdioInForeground(specs,\n-              // Doesn't work (BADSTCSRV)\n-              '-xx-static-server-gatsby-v1-8000');\n-  });\n-\n-  await withSpecsMatching(next, async (specs: St[]): Promise<Nr> => {\n-    startStaticFileServer(8000, 'modules/gatsby-starter-blog-ed-comments-0.4.4/public/');\n-    return runWdioInForeground(specs,\n-              // Doesn't work (BADSTCSRV)\n-              '-xx-static-server-gatsby-v1-old-ty-8000');\n-  });\n-\n-    // Note: 8000 eighty zero zero.\n-  stopStaticFileServer(8000);\n-\n-  return zeroOrFirstErrorCode;\n-}\n-\n-\n-\n-console.log(`Running e2e tests ...`);\n-\n-runE2eTests().then((code) => {\n-  const isFine = code === 0;\n-  const fineOrFailed = isFine ? 'fine' : 'tests FAILED';\n-  const logFn = isFine ? logMessage : logError;\n-  logFn(`\\n\\nDone running e2e tests, exit code: ${code}, ${fineOrFailed}\\n`);\n-  logErrorIf(code === undefined, `Error: Didn't run any tests at all [TyE0SPECSRUN]`);\n-  process.exit(code);\n-}, (error) => {\n-  console.error(`Error starting tests [TyEE2ESTART]`, error);  // error.stacktrace ?\n-  process.exit(1);\n-});\n-\n-\n-}\n-else if (!mainCmdIsOk) {\n+if (!mainCmdIsOk) {\n   console.error(`Werid main command: ${mainCmd}. Error. Bye.  [TyE30598256]`);\n   process.exit(1);\n }\n\\ No newline at end of file"
    },
    {
      "sha": "93ce7eb52a17d8c36c299602b061563e43f97a7f",
      "filename": "s/wdio",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/s/wdio",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/s/wdio",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/wdio?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -4,7 +4,8 @@ cd tests/e2e/\n \n \n # [E2EHTTPS]\n-cmd=\"../../node_modules/.bin/wdio  wdio.conf.js  $@\"\n+# This is old Webdriver 6, since we're in tests/e2e/ not e2e-wdio7/.  [wdio_6_to_7]\n+cmd=\"node_modules/.bin/wdio  wdio.conf.js  $@\"\n echo\n echo \"NODE_TLS_REJECT_UNAUTHORIZED=0  $cmd\"\n echo"
    },
    {
      "sha": "0301a6fa326cd3965cadbc5a07560913b2444994",
      "filename": "s/wdio-7",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/s/wdio-7",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/s/wdio-7",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/wdio-7?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,25 @@\n+#!/bin/bash\n+\n+cd tests/e2e-wdio7/\n+\n+\n+# [E2EHTTPS]\n+# This is new Webdriver 7, since we're in tests/e2e-wdio7/.  [wdio_6_to_7]\n+cmd=\"node_modules/.bin/wdio  wdio.conf.ts  $@\"\n+echo\n+echo \"NODE_TLS_REJECT_UNAUTHORIZED=0  $cmd\"\n+echo\n+NODE_TLS_REJECT_UNAUTHORIZED=0  $cmd\n+exit_code=$?\n+\n+if [ $exit_code -ne 0 ]; then\n+  echo\n+  echo\n+  echo \"Error. Webdriverio 7 E2E test failed, exit code: $exit_code\"\n+  echo\n+  echo \"Was started like so:\"\n+  echo \"    NODE_TLS_REJECT_UNAUTHORIZED=0  $cmd\"\n+fi\n+\n+echo\n+exit $exit_code"
    },
    {
      "sha": "061ef201767f2268cc840213540fc042c1ef5915",
      "filename": "tests/e2e-wdio7/package.json",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/package.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/package.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/package.json?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,21 @@\n+{\n+  \"name\": \"ty-e2e-wdio7\",\n+  \"description\": \"Talkyard's e2e tests in Webdriverio 7, slowly upgrading from v6\",\n+  \"version\": \"0.0.1\",\n+  \"author\": \"Kaj Magnus Lindberg\",\n+  \"license\": \"AGPL-3.0-or-later\",\n+  \"devDependencies\": {\n+    \"@wdio/cli\": \"^7.7.8\",\n+    \"@wdio/devtools-service\": \"^7.7.8\",\n+    \"@wdio/firefox-profile-service\": \"^7.7.7\",\n+    \"@wdio/local-runner\": \"^7.7.8\",\n+    \"@wdio/mocha-framework\": \"^7.7.7\",\n+    \"@wdio/reporter\": \"^7.7.7\",\n+    \"@wdio/spec-reporter\": \"^7.7.7\",\n+    \"@wdio/types\": \"^7.7.7\",\n+    \"chromedriver\": \"^91.0.1\",\n+    \"paseto.js\": \"^0.1.7\",\n+    \"ts-node\": \"^10.1.0\",\n+    \"wdio-chromedriver-service\": \"^7.2.0\"\n+  }\n+}"
    },
    {
      "sha": "2b476ad1c05cbf728195407ec28218188bbffd24",
      "filename": "tests/e2e-wdio7/pageobjects/login.page.ts",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/pageobjects/login.page.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/pageobjects/login.page.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/pageobjects/login.page.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,32 @@\n+import Page from './page';\n+\n+/**\n+ * sub page containing specific selectors and methods for a specific page\n+ */\n+class LoginPage extends Page {\n+    /**\n+     * define selectors using getter methods\n+     */\n+    get inputUsername () { return $('#username') }\n+    get inputPassword () { return $('#password') }\n+    get btnSubmit () { return $('button[type=\"submit\"]') }\n+\n+    /**\n+     * a method to encapsule automation code to interact with the page\n+     * e.g. to login using username and password\n+     */\n+    async login (username: string, password: string) {\n+        await (await this.inputUsername).setValue(username);\n+        await (await this.inputPassword).setValue(password);\n+        await (await this.btnSubmit).click();\n+    }\n+\n+    /**\n+     * overwrite specifc options to adapt it to page object\n+     */\n+    open () {\n+        return super.open('login');\n+    }\n+}\n+\n+export default new LoginPage();"
    },
    {
      "sha": "bccbd81fc843ed5facb04c1e6349c6a5ebdb8dc6",
      "filename": "tests/e2e-wdio7/pageobjects/page.ts",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/pageobjects/page.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/pageobjects/page.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/pageobjects/page.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,13 @@\n+/**\n+* main page object containing all methods, selectors and functionality\n+* that is shared across all page objects\n+*/\n+export default class Page {\n+    /**\n+    * Opens a sub page of the page\n+    * @param path path of the sub page (e.g. /path/to/page.html)\n+    */\n+    open (path: string) {\n+        return browser.url(`https://the-internet.herokuapp.com/${path}`)\n+    }\n+}"
    },
    {
      "sha": "6a0da9986cd579df4d62b21ce29699fa750d56a0",
      "filename": "tests/e2e-wdio7/pageobjects/secure.page.ts",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/pageobjects/secure.page.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/pageobjects/secure.page.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/pageobjects/secure.page.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,13 @@\n+import Page from './page';\n+\n+/**\n+ * sub page containing specific selectors and methods for a specific page\n+ */\n+class SecurePage extends Page {\n+    /**\n+     * define selectors using getter methods\n+     */\n+    get flashAlert () { return $('#flash') }\n+}\n+\n+export default new SecurePage();"
    },
    {
      "sha": "fb43ac97e7b61f625a582998019566a1635e0a43",
      "filename": "tests/e2e-wdio7/pub-api.ts",
      "status": "added",
      "additions": 865,
      "deletions": 0,
      "changes": 865,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/pub-api.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/pub-api.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/pub-api.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,865 @@\n+\n+// Public API Typescript types. [PUB_API]  [todoc_api]\n+//\n+// These shouldn't be used by the Talkyard client itself — because if\n+// the Ty client were to use the public stable API, there'd be a\n+// slightly higher risk that the Ty developers accidentally changed\n+// the public API just because the Talkyard client needed some\n+// API changes?  Instead, the Ty client uses an internal API that\n+// it's fine to change in any way at any time.\n+//\n+// ... So this file is placed in <root>/tests/... where the Talkyard\n+// client (located in <root>/client/) cannot access it.\n+\n+\n+// Dependent types, nice, see:\n+// https://www.javiercasas.com/articles/typescript-dependent-types\n+// section \"A first touch of Dependent Types in Typescript\".\n+// — Ty uses this to create an easy to remember, and type safe API,\n+// even works with VSCode's autocomplete.\n+//\n+// For example listQuery:s for different things: pages, posts, participants,\n+// have the same fields: { listWhat: ..., lookWhere: ..., ..., inclFields: ... }\n+// and thanks to the 'listWhat' type discriminator field,\n+// the other fields can be type safe, so if you specify e.g. a *page* field\n+// in inclFields, when asking for a *participant* — there'd be a compile time error.\n+//\n+// This is called Discriminated Unions or Tagged Unions:\n+// Only one type, of some specific types, can be in use at any one time,\n+// and a tag field (getWhat, listWhat, findWhat) decides which one is in use.\n+// https://en.wikipedia.org/wiki/Tagged_union\n+\n+\n+/// <reference path=\"./../../client/types-and-const-enums.ts\" />\n+\n+// Old, deprecated?\n+interface ListUsersApiResponse {\n+  // RENAME to thingsFound?\n+  users: UserFound[];\n+}\n+\n+\n+// Misc types\n+// -------------------------\n+\n+interface MaybePrettyApiRequest {\n+  pretty?: Bo;\n+}\n+\n+\n+type ApiResponse<R> = ApiErrorResponse | R;\n+\n+interface ApiErrorResponse {\n+  error: ResponseError;\n+}\n+\n+interface ResponseError extends ErrCodeMsg {\n+  httpStatusCode?: Nr;\n+}\n+\n+interface ErrCodeMsg {\n+  errCode?: St;\n+  errMsg?: St;\n+}\n+\n+\n+type ParticipantId = string;\n+\n+type MemberRef = string;\n+type GuestRef = string;\n+type PatRef = MemberRef | GuestRef;\n+type PageRef = string;\n+type TagRef = string;\n+type BadgeRef = string;\n+\n+type PageSortOrder = 'PopularFirst' | 'ActiveFirst' | 'NewestFirst';\n+type PageTypeSt = 'Question' | 'Problem' | 'Idea' | 'Discussion';\n+\n+type Unimplemented = undefined;\n+\n+\n+/*\n+// When finding, say, pages, the page authors are not included in the\n+// thingsFound[] list. Instead, the authors are  included in a\n+// ReferencedThings object — then, each author needs to be included\n+// only once, even though they might have written many of the pages found.\n+//\n+interface ReferencedThings {\n+  participantsById: { [id: string]: Participant_ };\n+}\n+\n+function testA() { return (null as Participant_).class === '' + Date.now(); }\n+function testB() { return (null as Participant_).interface === '' + Date.now(); }\n+function testC() { return (null as Participant_).type === '' + Date.now(); }\n+\n+interface Participant_ {\n+  interface: '123test is interface always a keyword?';\n+  type: 'im a type';\n+  class: 'hmm?';\n+  id: UserId;\n+  fullName?: string;\n+  username?: string;\n+  avatarUrl?: string;\n+  isGroup?: boolean;\n+  isGuest?: boolean;\n+} */\n+\n+\n+// What you're looking for\n+// -------------------------\n+\n+// The different things Search Queries and List Queries can find:\n+\n+type FindWhat =\n+  'Pages' |\n+\n+  'Posts' |\n+\n+  // Users and groups (not guests).  (Shorthand for 'Pats' + is-member-not-guest filter?)\n+  'Members' |\n+\n+  // Users, groups, guests.\n+  'Pats' |\n+\n+  // Maybe you don't remember if you invited someone, and want to find\n+  // any invite with the relevant email address.\n+  'Invites' |\n+\n+  // Maybe you wonder if a reply notification email got sent or not — maybe your\n+  // mail server was offline for a while.\n+  'EmailsSent' |\n+\n+  // If you have many tags, and want to find a tag via its About text or title.\n+  'Tags' |\n+\n+  // If you have many categories so you need to search & find.\n+  'Categories' |\n+\n+  // If you want to find a user badge, by searching badge titles or about texts.\n+  'Badges';\n+\n+\n+\n+// Where to search\n+// -------------------------\n+\n+// In which text fields or content sections to look, when searching for things,\n+// or listing things.\n+//\n+interface LookWhere {\n+  // E.g for autocompleting a username, when @mentioning someone.\n+  usernames?: boolean;\n+\n+  // Users, groups and guests can have full names.\n+  fullNames?: boolean;\n+\n+  emailAddresses?: boolean;\n+\n+  // Find members in these groups.\n+  // E.g.  { inGroups: ['username:some_group', 'patid:223344'] }   or 'groupid:...'  ?\n+  inGroups?: MemberRef[];\n+\n+  // Find members with these badges.\n+  withBadges?: BadgeRef[];\n+\n+  // About a user / group,  or category, or tag, or user badge.\n+  aboutText?: boolean;\n+\n+  // Search page titles, or tag titles, or user badge titles, or email subject lines.\n+  titleText?: boolean;\n+\n+  // Searches the page body (original post) only, not the title, not any replies.\n+  // Or an email body (not subject line).\n+  bodyText?: boolean;\n+\n+  // Searches replies, but not page title or body (original post).\n+  repliesText?: boolean;\n+\n+  // Searches everything: Page tite, body, and replies.\n+  pageText?: boolean;\n+\n+  // If you want to search only, say, pages of type Article and Question.\n+  pageTypes?: PageType[];\n+\n+  // List posts or participants in these pages.\n+  // E.g.  { inPages: 'pageid:112233' }  ?\n+  inPages?: PageRef[];\n+\n+  // Find pages in these categories.\n+  // E.g.  { inCategories: 'catid:112233' }  ?\n+  inCategories?: CategoryRef[];\n+\n+  // Pages with these tags.\n+  withTags?: TagRef[];\n+\n+  // Posts written by these users or groups.\n+  writtenBy?: MemberRef[];\n+};\n+\n+\n+// What you get back\n+// -------------------------\n+\n+type ThingFound = PageOptFields\n+                | PageFound\n+                | PageListed  // hmm, incl in  PageOptFields  above\n+                | PostListed\n+                | ParticipantFound | TagFound | CategoryFound;\n+\n+\n+\n+interface ParticipantFound {\n+  ppId: ParticipantId;  // RENAME to patId\n+  username?: string;\n+  fullName?: string;\n+  tinyAvatarUrl?: string;\n+  isGroup?: boolean;\n+  isGuest?: boolean;\n+}\n+\n+interface GuestFound extends ParticipantFound {\n+  username?: undefined; // guests don't have real accounts\n+  fullName: string;  // they always have a name or alias though\n+  isGroup?: false;\n+  isGuest: true;\n+}\n+\n+interface MemberFound extends ParticipantFound {\n+  username: string;  // members always have usernames\n+  isGuest?: false;\n+}\n+\n+interface UserFound extends MemberFound {\n+  isGroup?: false;\n+  // soId?: St;   later (sign-on id)\n+  // extId?: St;  later (external id)\n+}\n+\n+interface GroupFound extends MemberFound {\n+  isGroup: true;\n+}\n+\n+\n+interface PageOptFields {\n+  pageId?: PageId;\n+  title?: St;\n+  // Prefix with the origin (included in the response) to get the full URL.\n+  urlPath?: St;\n+  excerpt?: St;\n+  author?: ParticipantFound;\n+  categoriesMainFirst?: CategoryFound[];\n+  numOpLikeVotes?: Nr;\n+  numTotRepliesVisible?: Nr;\n+}\n+\n+\n+// Rename to PageDef(ault)Fields ?\n+interface PageFoundOrListed extends PageOptFields {\n+  pageId: PageId;\n+  title: string;\n+  // Prefix with the origin (included in the response) to get the full URL.\n+  urlPath: string;\n+  excerpt?: string;\n+  author?: ParticipantFound;\n+  categoriesMainFirst?: CategoryFound[];\n+}\n+\n+interface PageFound extends PageFoundOrListed {\n+  postsFound: PostFound[];\n+}\n+\n+type PageListed = PageFoundOrListed;\n+\n+\n+\n+interface PostFoundOrListed {\n+  isPageTitle?: boolean;\n+  isPageBody?: boolean;\n+  author?: ParticipantFound;\n+}\n+\n+interface PostFound extends PostFoundOrListed {\n+  // With <mark> tags and html escapes, like:\n+  //   [\"When you want to <mark>climb</mark> a tall\n+  //    &amp; exciting <mark>tree</tree> then\",\n+  //   ... ].\n+  htmlWithMarks: string[];\n+}\n+\n+interface PostListed extends PostFoundOrListed {\n+  id: number;\n+  nr: number;\n+  parentNr?: number;\n+  pageId: PageId;\n+  pageTitle: string;\n+  urlPath: string;\n+  author: UserFound,\n+  approvedHtmlSanitized?: string;\n+}\n+\n+\n+\n+type TagFound = Unimplemented;\n+\n+\n+\n+interface CategoryFound {\n+  categoryId: CategoryId;\n+  name: string;\n+  urlPath: string;\n+};\n+\n+\n+\n+// A  Get Query request\n+// -------------------------\n+\n+// When you know precisely what you want, you can use a Get Query, to look up\n+// directly by id / url / username / something. For each lookup key you specify,\n+// you'll get back exactly one thing, or null.\n+//\n+// But if you don't know the exact ids / something, e.g. you have a username\n+// *prefix* only, then you can use a List Query instead, to list all participants\n+// with matching usernames — now, you might get back 0, 1 or many matching things.\n+//\n+// Tech details: Looks up by database primary key. So you know you'll get 1 or 0.\n+// That's why the getWhat and ids (e.g. `getPages: [page-id-one, two, three]`)\n+// are one single same key-value. — Compare with ListQuery, which has two separate\n+// fields: listWhat: ... and lookWhere: .... E.g. listWhat: 'Posts' and\n+// lookWhere: category-ids, to find recent posts in those categories.\n+//\n+\n+interface GetQueryApiRequest extends MaybePrettyApiRequest {\n+  getQuery: GetPagesQuery | GetPatsQuery;\n+  pretty?: Bo;\n+}\n+\n+\n+interface GetQuery {\n+  getWhat: FindWhat;\n+  getRefs: Ref[];\n+  inclFields: Object;\n+}\n+\n+\n+interface GetPagesQuery extends GetQuery {\n+  getWhat: 'Pages',\n+  getRefs: PageRef[];\n+  inclFields: {\n+    // Only the orig post:\n+    //numOpRepliesVisible?: Bo;\n+    numOpLikeVotes?: Bo;\n+\n+    // Whole page:\n+    numTotRepliesVisible?: Bo;\n+    //numTotLikeVotesVisible?: Bo;\n+  };\n+}\n+\n+\n+interface GetPatsQuery extends GetQuery {   // not impl\n+  getWhat: 'Pats',\n+  getRefs: PatRef[];\n+  inclFields: {\n+    fullName?: Bo;\n+    username?: Bo;\n+    isGuest?: Bo;\n+  };\n+}\n+\n+\n+\n+\n+type GetQueryApiResponse<T extends ThingFound> = ApiResponse<GetQueryResults<T>>;\n+\n+interface GetQueryResults<T extends ThingFound> {\n+  origin: St;\n+\n+  // One item for each getRefs[] item, in the same order.\n+  thingsOrErrs: (T | ErrCodeMsg | null)[];\n+}\n+\n+// Examples:\n+//\n+// Get blog post comment counts:\n+//\n+//  /-/v0/get {\n+//    getQuery: {\n+//      getWhat: 'Pages',\n+//      getRefs: [\n+//        'emburl:https://blog/a-blog-post',\n+//        'emburl:https://blog/another',\n+//        'emburl:https://blog/a-third',\n+//      ],\n+//      inclFields: {\n+//        numOpLikeVotes: true,\n+//        numTotRepliesVisible: true,\n+//\n+//        // // Maybe later: Nested fields:\n+//        // author: {\n+//        //   fullName: true,\n+//        //   username: true,\n+//        //   smallAvatarUrl: true,\n+//        // }\n+//        // // Or sth like:\n+//        // whichPosts: { opAndNumTopReplies: 10 }\n+//        // inclPostAuthors: true,\n+//        // whichAuthorFields: { fullName: true, username: true }\n+//      },\n+//    }\n+//  }\n+//\n+// Sample response, assuming /a-blog-post  couldn't be found:\n+//\n+//   {\n+//     origin: \"https://example.com\",\n+//     thingsOrErrs: [\n+//       { error: { errCode: 'TyEPGNF', errMsg: ...,  } },\n+//       { numOpLikeVotes: 11, numTotRepliesVisible: 22 },\n+//       { numOpLikeVotes: 33, numTotRepliesVisible: 44 },\n+//     ],\n+//   }\n+//\n+// Or total request failure, no results back:\n+//\n+// {\n+//   error: {\n+//     httpStatusCode: NNN,\n+//     errCode: \"TyEMMMMMM\",\n+//     errMsg: \"...\",\n+//   }\n+// }\n+//\n+\n+\n+\n+// A  List Query request\n+// -------------------------\n+\n+\n+// List Queries are comparatively fast — they lookup things directly, via indexes in\n+// the PostgreSQL database.  However they cannot do full text search — for that,\n+// you need a Search Query.\n+//\n+// Tech details: Looks up by database index, often not the primary key.\n+// The index might be on table B, although you're finding things in table A.\n+// E.g. you might list the most recent topics in a category.\n+//\n+interface ListQueryApiRequest {\n+  // Either:\n+  listQuery?: ListQuery;\n+\n+  // Or:\n+  continueAtScrollCursor?: ListResultsScrollCursor;\n+\n+  limit?: Nr;\n+  pretty?: Bo;\n+}\n+\n+interface ListQuery {\n+  // Query type discriminator.\n+  // To find different types of things, e.g. a participant or tag or category\n+  // — something, but you don't remember precisely what —\n+  // then use a BatchQuery composed of many ListQuery:s ?\n+  listWhat: FindWhat;\n+\n+  // E.g. username prefix.\n+  exactPrefix?: St;\n+  lookWhere?: LookWhere;\n+  filter?: QueryFilter;\n+  sortOrder?;\n+  limit?: Nr;\n+}\n+\n+\n+type QueryFilter = PageFilter;  // for now\n+\n+\n+interface ListPagesQuery extends ListQuery {\n+  listWhat: 'Pages';\n+  lookWhere?: { inCategories: CategoryRef[] };\n+  filter?: PageFilter;\n+  sortOrder?: PageSortOrder;\n+}\n+\n+\n+interface PageFilter {\n+  isDeleted?: Bo;  // default: false\n+  isOpen?: Bo;\n+  isAuthorWaiting?: Bo;\n+  pageType?: { _in: PageTypeSt[] };\n+}\n+\n+// interface PatFilter {\n+//   isStaff?: Bo;\n+//   isMember?: Bo;\n+//   memberSinceMins?: { _ge: 60*24*31*3 }    // at least 3 months\n+//   trustLevel: { _ge?: Nr, _le?: Nr, ... }  // at least, at most\n+//   trustLevel: 4;   // exact\n+// }\n+\n+\n+type ListQueryApiResponse<T extends ThingFound> = ApiResponse<ListQueryResults<T>>;\n+\n+interface ListQueryResults<T extends ThingFound> {\n+  origin: string;\n+  thingsFound?: T[];\n+  scrollCursor?: ListResultsScrollCursor;\n+}\n+\n+type ListResultsScrollCursor = Unimplemented;\n+\n+\n+// Examples:\n+//\n+// Auto-complete username \"jane_doe\" when typing a username prefix:\n+//\n+//  /-/v0/list  {\n+//    listQuery: {\n+//      exactPrefix: 'jane_d',\n+//      listWhat: 'Members',\n+//      lookWhere: { usernames: true },\n+//\n+//      // Later:\n+//      // inclFields: { fullName: true, username: true }\n+//    }\n+//  }\n+//\n+//\n+//  /-/v0/list  {\n+//    listQuery: {\n+//      listWhat: 'Pats'\n+//      exactPrefix: 'jane_d',   // can use db index\n+//      lookWhere: { usernames: true },\n+//      inclFields: {\n+//        fullName: true,\n+//        username: true,\n+//      }\n+//      filter: {   // Filters<PatFilters>, [api_json_query]\n+//        isStaff: false,\n+//        something: { _isDef: true },         // field is defined (not absent or null)\n+//        sthelse:   { _isDef: false },        // field is absent or null\n+//        sthelse2:  { _ge: 100, _le: 200 } ,  // between 100 and 200 (inclusive)\n+//        sthelse3:  { _in: [1, 3, 5] },       // value is one of 1, 3 or 5.\n+//        livedIn:   { _contains: ['Alaska', 'Australia'] },\n+//\n+//        username:  { _regex: /.*kitten.*/ }, // cannot use db index, since starts\n+//                                             // with: '.*'; needs to be a filter\n+//        _not: {\n+//          username:  { _regex: /.*cruel.*/ },\n+//          eats: 'birds'\n+//        },\n+//\n+//        // Fuzzy match, per language values, here English and Swedish:\n+//        fullName:  { _fuzzyMatch: 'kitty', _langs: ['en', 'sv'] },\n+//\n+//\n+//        sth:  { _count: 8 },                 // exactly 8 something\n+//        sth:  { _count: { _ge: 10, _lt: 20 } // 10 - 19 something\n+//\n+//        _or: [\n+//          { memberSinceMins: { _ge: 60*24*7 } },  // at least one week\n+//          { trustLevel: { _ge: 3 } }]             // at least full member\n+//      }\n+//    }\n+//  }\n+//\n+// type OptOrFilter<T> = { _or?: OptOrFilter<T>[] };\n+// type Filter<T> = T | { _or: Filters<T>[] }\n+//\n+//\n+//\n+// List popular pages in a category:\n+//\n+//  /-/v0/list  {\n+//    listQuery: {\n+//      listWhat: 'Pages',\n+//      lookWhere: { inCategories: [categoryA, catB, catC] },\n+//      filter: {\n+//        isOpen: true,\n+//        pageType: { _in: ['Question', 'Problem'] },\n+//        // or, later, excl types?:\n+//        pageType: { _notIn: ['Question', 'Problem'] },\n+//\n+//        // No: onlyWaiting: true  — because, waiting for *what*?\n+//        // maybe for the OP author to reply with more info?\n+//        // then not interesting to see it in the Waiting list?\n+//        pageStatus: ['!Closed', '!Postponed'],\n+//\n+//        pageStatus: [{\n+//          // Probably won't do like this:\n+//          waitingForReplyBy: ...\n+//          waiting: { forReply: { notBy: 'Author' }}}\n+//          waiting: { forReplyBy: '!OP-Author' },\n+//          waiting: { forTopicDone: { 'pageid:1234' }}\n+//          waiting: { forTag: 'tagid:...' }\n+//\n+//          waiting: true,\n+//          not: { waiting: { forReplyBy: 'username:someone' }},\n+//          }]\n+//      },\n+//      asWho: ['username:all_members'],\n+//      // Later, like getQuery?:\n+//      //inclFields: {\n+//      //  numRepliesVisible: true,\n+//      //},\n+//      sortOrder: 'PopularFirst',\n+//      limit: 5,\n+//    }\n+//  }\n+//\n+// Response ex:\n+//\n+//   { origin: \"https://example.com\", thingsFound: [...]  }\n+//\n+\n+\n+\n+// A  Search Query request\n+// -------------------------\n+\n+// Finds things via the full text search / faceted serarch database —\n+// that is, ElasticSearch (currently), not PostgreSQL.\n+//\n+\n+interface SearchQueryApiRequest {\n+  // Either:\n+  searchQuery?: SearchQuery2;\n+\n+  // Or:\n+  continueAtScrollCursor?: SearchResultsScrollCursor;\n+\n+  limit?: number;\n+  pretty?: boolean;\n+}\n+\n+type SearchQuery2 = SinglSearchQuery | CompoundSearchQuery;\n+\n+// Not implemented.\n+type CompoundSearchQuery =\n+  // All must match.\n+  SinglSearchQuery[];\n+\n+interface SinglSearchQuery {\n+  // \"Freetext\" refers to free-form text, meaning, unstructured text:\n+  // The user can type anything. And the server interprets the meaning as best\n+  // it can, maybe interprets \"buy ice skating shoes\" as \"buy ice skates\".\n+  freetext?: string;\n+\n+  findWhat?: FindWhat,\n+  lookWhere?: LookWhere;\n+};\n+\n+type SearchQueryApiResponse<T extends ThingFound> = ApiResponse<SearchQueryResults<T>>;\n+\n+interface SearchQueryResults<T extends ThingFound> {\n+  origin: string;\n+  thingsFound?: T[];\n+  scrollCursor?: SearchResultsScrollCursor;\n+}\n+\n+type SearchResultsScrollCursor = Unimplemented;\n+\n+\n+// Examples:\n+//\n+//  /-/v0/search  {\n+//    searchQuery: { freetext: \"how climb a tree\" }\n+//  }\n+//\n+// The above is the same as:\n+//\n+//  /-/v0/search  {\n+//    searchQuery: {\n+//      freetext: 'how climb a tree',\n+//      findWhat: 'Pages',             // the default\n+//      lookWhere: { pageText: true }. // the default, when finding pages\n+//    }\n+//  }\n+//\n+// Response ex:\n+//\n+//   { origin: \"https://example.com\", thingsFound: [...]  }\n+//\n+//\n+// Find a user: (participant)\n+//\n+//  /-/v0/search  {\n+//    searchQuery: {\n+//      freetext: 'jane',\n+//      findWhat: 'Pats',\n+//      lookWhere: { usernames: true, fullNames: true }\n+//    }\n+//  }\n+//\n+// This compound query finds posts about how to climb a tree, written by someone\n+// with \"Doe\" in their name:\n+//\n+// No!:\n+//  /-/v0/search  {\n+//    searchQuery: [{\n+//      freetext: 'doe',\n+//      findWhat: 'Members',\n+//    }, {\n+//      freetext: 'trees',\n+//      findWhat: 'Pages',\n+//    }]\n+//  }\n+//\n+// Instead?  No, neither this:\n+//  /-/v0/search  {\n+//    searchQuery: {\n+//      findWhat: 'Posts',\n+//      matchAll: [{\n+//        freetext: 'doe',\n+//        lookWhere:  pat names\n+//      }, {\n+//        freetext: 'trees',\n+//        lookWhere:  post texts\n+//      }]\n+//    }\n+//  }\n+//\n+// The above is useful, if you remember that, say, someone with a name like \"Doe\"\n+// wrote something about trees. You might then find out that Jane Doe wrote an article\n+// about how to climb trees. The search result would include a UserFound\n+// and a PageFound, in the ThingsFound[] list — in the order the search engine\n+// thinks is the best.\n+//\n+// ( ElasticSearch compound queries docs:\n+//  https://www.elastic.co/guide/en/elasticsearch/reference/current/compound-queries.html\n+//  — the example above, Jane Doe and trees, is a query of type: bool must match.\n+//  Others, like Toshi + Tantivy — yes, supports compound queries:\n+//   https://github.com/toshi-search/Toshi#boolean-query\n+//  PostgreSQL built-in search: maybe by joining tables? But I think this\n+//  cannot work as well as ElasticSearch?\n+//  Meilisearch: https://www.meilisearch.com — no compound queries. )\n+//\n+// However if you already know who wrote something about trees, then, don't\n+// search for that person — instead use LookWhere.writtenBy:\n+//\n+//  /-/v0/search  {\n+//    searchQuery: {\n+//      freetext: 'climb trees',\n+//      lookWhere: { pageText: true, writtenBy: 'username:jane_doe' },\n+//    }\n+//  }\n+//\n+\n+\n+\n+\n+// An  Upsert  request  ?\n+// -------------------------\n+\n+//\n+//\n+/*\n+interface UpsertApiRequest extends MaybePrettyApiRequest {\n+  upsertCmd: UpsertCommand;\n+  pretty?: Bo;\n+}\n+\n+\n+interface UpsertCommand {\n+  upsertWhat: FindWhat;\n+}\n+\n+\n+interface UpsertPatsCommand extends UpsertCommand {\n+  upsertWhat: 'Pats';\n+  upsertThings: PatToUpsert[];\n+}\n+\n+\n+interface PatToUpsert {\n+  key: St;\n+  username?: St;\n+  fullName?: St;\n+  primaryEmailAddr?: St;\n+  primaryEmailAddrVerified?: Bo;\n+}\n+\n+\n+type UpsertApiResponse<T extends ThingFound> = ApiResponse<GetQueryResults<T>>;\n+\n+interface UpsertCommandResults<T extends ThingFound> {\n+  origin: St;\n+\n+  // One item for each upsertThings[] item, in the same order.\n+  thingsOrErrs: (T | ErrCodeMsg | null)[];\n+}\n+*/\n+\n+\n+\n+// Batch search/list/get requests?\n+// -------------------------\n+\n+// Should Not implement this, unless clearly needed.\n+// Still, good to think about in advance, so as not to paint oneself into a corner?\n+//\n+//   /-/v0/batch-query {\n+//     batchQuery: {\n+//       // Maybe sth like:\n+//       //perQueryLimit: NN,\n+//       //this: mergeResultsHow:  ... ?? ..,\n+//       //or?: perQuerySortOrder:\n+//       //     totalSortOrder:\n+//\n+//       queryList: [\n+//         getQuery: {\n+//           getWhat: 'Pages',\n+//           getRefs: [\n+//             'emburl:https://blog/a-blog-post':\n+//             'emburl:https://blog/another',\n+//             'emburl:https://blog/a-third',\n+//           ],\n+//           inclFields: {\n+//             numRepliesVisible: true,\n+//             numOrigPostLikeVotes: true,\n+//           },\n+//         },\n+//\n+//         getQuery: {\n+//           getWhat: 'Pages',\n+//           getRefs: [ ... ],\n+//           inclFields: {\n+//             someOtherField: true,\n+//           },\n+//         },\n+//\n+//         listQuery: {\n+//           listWhat: 'Members',\n+//           exactPrefix: 'jane_d',\n+//           lookWhere: { usernames: true },\n+//         },\n+//\n+//         listQuery: {\n+//           listWhat: 'Pages',\n+//           lookWhere: { inCategories: [catB, catC] },\n+//         },\n+//\n+//         searchQuery: {\n+//           findWhat: 'Posts',\n+//           freetext: \"how to feed an anteater that has climbed a tall tree\",\n+//         },\n+//       ],\n+//     },\n+//   }\n+//\n+// Response could be:\n+//\n+//   {\n+//     origin: \"https://example.com\",\n+//     batchQueryResults: [\n+//       { getResults: ... },\n+//       { getResults: ... },\n+//       { listResults: ... },\n+//       { listResults: ... },\n+//       { searchResults: ... },\n+//     ],\n+//   }\n+//\n+\n+"
    },
    {
      "sha": "e28d359987d4a6651145f4c5afb15bed01ae4a1d",
      "filename": "tests/e2e-wdio7/specs/__e2e-test-template__.2br.ts",
      "status": "added",
      "additions": 188,
      "deletions": 0,
      "changes": 188,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/__e2e-test-template__.2br.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/__e2e-test-template__.2br.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/__e2e-test-template__.2br.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,188 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings from '../utils/settings';\n+import { dieIf } from '../utils/log-and-die';\n+import c from '../test-constants';\n+\n+let allBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let mons: Member;\n+let mons_brA: TyE2eTestBrowser;\n+let modya: Member;\n+let modya_brA: TyE2eTestBrowser;\n+let corax: Member;\n+let corax_brA: TyE2eTestBrowser;\n+let regina: Member;\n+let regina_brB: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+let michael: Member;\n+let michael_brB: TyE2eTestBrowser;\n+let mallory: Member;\n+let mallory_brB: TyE2eTestBrowser;\n+let stranger_brB: TyE2eTestBrowser;\n+\n+// For embedded comments:  EMBCMTS\n+// const localHostname = 'comments-for-e2e-test-embsth-localhost-8080';\n+// const embeddingOrigin = 'http://e2e-test-embsth.localhost:8080';\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;  // or TwoPagesTestForum or EmptyTestForum or LargeTestForum\n+\n+let michaelsTopicUrl: St;\n+let mariasTopicUrl: St;\n+\n+const apiSecret: TestApiSecret = {\n+  nr: 1,\n+  userId: c.SysbotUserId,\n+  createdAt: c.MinUnixMillis,\n+  deletedAt: undefined,\n+  isDeleted: false,\n+  secretKey: 'publicE2eTestSecretKeyAbc123',\n+};\n+\n+\n+\n+describe(`some-e2e-test  TyTE2E1234ABC`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({ // or addTwoPagesForum, addEmptyForum, addLargeForum\n+      title: \"Some E2E Test\",\n+      members: undefined, // default = everyone\n+        // ['mons', 'modya', 'regina', 'corax', 'memah', 'maria', 'michael', 'mallory']\n+    });\n+\n+    // Change hostname\n+    //builder.getSite().meta.localHostname = 'e2e-test-something';  // at .localhost\n+    // Or for embedded comments:  EMBCMTS\n+    //builder.getSite().meta.localHostname = localHostname;\n+    //builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+\n+    // Adding a new member:\n+    const newMember: Member = builder.addMmember('hens_username');\n+\n+    const newPage: PageJustAdded = builder.addPage({\n+      id: 'extraPageId',\n+      folder: '/',\n+      showId: false,\n+      slug: 'extra-page',\n+      role: c.TestPageRole.Discussion,\n+      title: \"In the middle\",\n+      body: \"In the middle of difficulty lies opportunity\",\n+      categoryId: forum.categories.categoryA.id,\n+      authorId: forum.members.maria.id,\n+    });\n+\n+    builder.addPost({\n+      page: newPage,  // or e.g.: forum.topics.byMichaelCategoryA,\n+      nr: c.FirstReplyNr,\n+      parentNr: c.BodyNr,\n+      authorId: forum.members.maria.id,\n+      approvedSource: \"It's not always good to procrastinate\",\n+    });\n+\n+    // Disable notifications, or notf email counts will be off\n+    // (since Owen would get emails).\n+    builder.settings({\n+      numFirstPostsToApprove: 0,\n+      //maxPostsPendApprBefore: 0,\n+      numFirstPostsToReview: 0,\n+    });\n+    builder.getSite().pageNotfPrefs = [{\n+      memberId: forum.members.owen.id,\n+      notfLevel: c.TestPageNotfLevel.Muted,\n+      wholeSite: true,\n+    }];\n+\n+    // Enable API.\n+    builder.settings({ enableApi: true });\n+    builder.getSite().apiSecrets = [apiSecret];\n+\n+    // Add an ext id to a category.\n+    //forum.categories.specificCategory.extId = 'some-id'; // only in TwoPagesTestForum\n+\n+    allBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+    mons = forum.members.mons;\n+    mons_brA = brA;\n+    modya = forum.members.modya;\n+    modya_brA = brA;\n+    corax = forum.members.corax;\n+    corax_brA = brA;\n+\n+    regina = forum.members.regina;\n+    regina_brB = brB;\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+    michael = forum.members.michael;\n+    michael_brB = brB;\n+    mallory = forum.members.mallory;\n+    mallory_brB = brB;\n+    stranger_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+    michaelsTopicUrl = site.origin + '/' + forum.topics.byMichaelCategoryA.slug;\n+    mariasTopicUrl = site.origin + '/' + forum.topics.byMariaCategoryA.slug;\n+  });\n+\n+\n+  it(`Owen logs in to admin area, ... `, async () => {\n+    await owen_brA.adminArea.goToUsersEnabled(site.origin);\n+    await owen_brA.loginDialog.loginWithPassword(owen);\n+  });\n+\n+\n+  it(`Maria logs in`, async () => {\n+    await maria_brB.go2(michaelsTopicUrl);\n+    await maria_brB.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+\n+\n+  // For embedded comments:  EMBCMTS\n+  it(`Create embedding pages`, async () => {\n+    /*\n+    const dir = 'target';\n+    fs.writeFileSync(`${dir}/page-a-slug.html`, makeHtml('aaa', '#500'));\n+    fs.writeFileSync(`${dir}/page-b-slug.html`, makeHtml('bbb', '#040'));\n+    function makeHtml(pageName: string, bgColor: string): string {\n+      return utils.makeEmbeddedCommentsHtml({ pageName, discussionId: '', localHostname, bgColor});\n+    }\n+  });\n+\n+  it(`Maria opens embedding page aaa`, async () => {\n+    await maria_brB.go(embeddingOrigin + '/page-a-slug.html');\n+  });\n+\n+  it(`... logs in`, async () => {\n+    await maria_brB.complex.loginIfNeededViaMetabar(maria);\n+    */\n+  });\n+\n+  // ...\n+\n+});\n+"
    },
    {
      "sha": "e876f2f33bbfed3f3b98edf3307aa2bafaf69316",
      "filename": "tests/e2e-wdio7/specs/__embcom.e2e-test-template.2br.e2e__.ts",
      "status": "added",
      "additions": 94,
      "deletions": 0,
      "changes": 94,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/__embcom.e2e-test-template.2br.e2e__.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/__embcom.e2e-test-template.2br.e2e__.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/__embcom.e2e-test-template.2br.e2e__.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,94 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings from '../utils/settings';\n+import { dieIf } from '../utils/log-and-die';\n+import c from '../test-constants';\n+\n+let allBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+\n+const localHostname = 'comments-for-e2e-test-embdftpv-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-embdftpv.localhost:8080';\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+\n+\n+describe(`some-e2e-test.2br  TyTE1234ABC`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Some Emb Comments E2E Test\",\n+      members: undefined, // default = everyone\n+        // ['mons', 'modya', 'regina', 'corax', 'memah', 'maria', 'michael', 'mallory']\n+    });\n+\n+    builder.getSite().meta.localHostname = localHostname;\n+    builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+\n+    allBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Create embedding pages`, () => {\n+    const dir = 'target';\n+    fs.writeFileSync(`${dir}/page-a-slug.html`, makeHtml('aaa', '#500'));\n+    fs.writeFileSync(`${dir}/page-b-slug.html`, makeHtml('bbb', '#040'));\n+    function makeHtml(pageName: St, bgColor: St): St {\n+      return utils.makeEmbeddedCommentsHtml({\n+              pageName, discussionId: '', localHostname, bgColor});\n+    }\n+  });\n+\n+\n+  it(`Owen goes to emb page a`, async () => {\n+    await owen_brA.go2(embeddingOrigin + '/page-a-slug.html');\n+  });\n+  it(`... logs in`, async () => {\n+    await owen_brA.complex.loginIfNeededViaMetabar(owen);\n+  });\n+\n+\n+  it(`Maria goes there too`, async () => {\n+    await maria_brB.go2(embeddingOrigin + '/page-a-slug.html');\n+  });\n+\n+  it(`... logs in`, async () => {\n+    await maria_brB.complex.loginIfNeededViaMetabar(maria);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "769828296dc81f0e8ab738b14b780ab8612246a8",
      "filename": "tests/e2e-wdio7/specs/dir.manual.2br.e2e.ts",
      "status": "added",
      "additions": 87,
      "deletions": 0,
      "changes": 87,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/dir.manual.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/dir.manual.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/dir.manual.2br.e2e.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,87 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings from '../utils/settings';\n+import { dieIf } from '../utils/log-and-die';\n+\n+\n+let everyonesBrowsers: TyAllE2eTestBrowsers;\n+let richBrowserA: TyE2eTestBrowser;\n+let richBrowserB: TyE2eTestBrowser;\n+let owen: Member;\n+let owensBrowser: TyE2eTestBrowser;\n+let memah: Member;\n+let memahsBrowser: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+\n+let forum: TwoPagesTestForum;\n+\n+\n+\n+describe(\"some-e2e-test  TyT1234ABC\", () => {\n+\n+  it(\"import a site\", () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoPagesForum({  // or: builder.addLargeForum\n+      title: \"Some E2E Test\",\n+      members: ['maria', 'memah', 'michael'],\n+    });\n+    assert.refEq(builder.getSite(), forum.siteData);\n+\n+    if (settings.reuseOldSite) {\n+      dieIf(!settings.localHostname,\n+              `Don't know which site to reuse, when --localHostname\n+              not specified [TyE9395RKST4]`);\n+      // Maybe query the server?\n+      site = {\n+        id: -1,\n+        pubId: '?',\n+        origin: settings.proto2Slash + settings.localHostname + '.localhost',\n+        siteIdOrigin: '?',\n+        cdnOriginOrEmpty: '',\n+      };\n+    }\n+    else {\n+      site = server.importSiteData(forum.siteData);\n+      server.skipRateLimits(site.id);\n+    }\n+  });\n+\n+  it(\"initialize people\", () => {\n+    everyonesBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    richBrowserA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    richBrowserB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owensBrowser = richBrowserA;\n+    memah = forum.members.memah;\n+    memahsBrowser = richBrowserB;\n+  });\n+\n+  it(`Owen goes to the admin area, ... `, async () => {\n+    await owensBrowser.adminArea.goToUsersEnabled(site.origin);\n+  });\n+\n+  it(`... logs in`, async () => {\n+    await owensBrowser.loginDialog.loginWithPassword(owen);\n+  });\n+\n+  it(\"Memah logs in\", async () => {\n+    await memahsBrowser.go2(site.origin + '/' + forum.topics.byMichaelCategoryA.slug);\n+    await memahsBrowser.complex.loginWithPasswordViaTopbar(memah);\n+  });\n+\n+  it(\"Done\", () => {\n+    console.log(\"\\n\" +\n+          \"\\n\" +\n+          \"Now you can test manually: \" +\n+            \"Pass  --da  or  --debugAfter  to wdio, to pause here.\\n\");\n+  });\n+\n+});\n+"
    },
    {
      "sha": "83ccd00e598e201052ebfc9a0d533a89a1f8285a",
      "filename": "tests/e2e-wdio7/specs/embcom.drafts-previews-not-logged-in.2br.e2e.ts",
      "status": "added",
      "additions": 426,
      "deletions": 0,
      "changes": 426,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.drafts-previews-not-logged-in.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.drafts-previews-not-logged-in.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/embcom.drafts-previews-not-logged-in.2br.e2e.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,426 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as ut from '../utils/utils';\n+import { buildSite } from '../utils/site-builder';\n+import * as make from '../utils/make';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings from '../utils/settings';\n+import { dieIf } from '../utils/log-and-die';\n+import c from '../test-constants';\n+\n+\n+let maria;\n+let maria_brA: TyE2eTestBrowser;\n+\n+let idAddress: IdAddress;\n+\n+const mariasCommentOneOrig = 'mariasCommentOneOrig';\n+const mariasCommentOneEdited = 'mariasCommentOneEdited';\n+const mariasCommentTwo = 'mariasCommentTwo';\n+const mariasCommentThree = 'mariasCommentThree';\n+const mariasCommentFour = 'mariasCommentFour';\n+\n+const localHostname = 'comments-for-e2e-test-embddrft-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-embddrft.localhost:8080';\n+const pageDddSlug = 'emb-cmts-ddd.html';\n+const pageEeeSlug = 'emb-cmts-eee.html';\n+\n+let numReplies: NumReplies | U;\n+\n+describe(`embcom.drafts-previews-not-logged-in.2br  TyT2ZBKPW048`, () => {\n+\n+  it(\"initialize people\", async () => {\n+    maria_brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    maria = make.memberMaria();\n+  });\n+\n+  it(\"import a site\", async () => {\n+    const site: SiteData = make.forumOwnedByOwen('embddrft', { title: \"Emb Cmts Disc Id Test\" });\n+    site.meta.localHostname = localHostname;\n+    site.settings.allowEmbeddingFrom = embeddingOrigin;\n+    site.settings.requireVerifiedEmail = false;\n+    site.settings.mayComposeBeforeSignup = true;\n+    site.settings.mayPostBeforeEmailVerified = true;\n+    site.settings.allowGuestLogin = true;\n+    site.members.push(maria);\n+    idAddress = server.importSiteData(site);\n+  });\n+\n+  it(\"create two embedding pages ddd & eee\", async () => {\n+    const dir = 'target';\n+    fs.writeFileSync(`${dir}/${pageDddSlug}`, makeHtml('ddd', '', '#500'));\n+    fs.writeFileSync(`${dir}/${pageEeeSlug}`, makeHtml('eee', '', '#040'));\n+    function makeHtml(pageName: string, discussionId: string, bgColor: string): string {\n+      return ut.makeEmbeddedCommentsHtml({ pageName, discussionId, localHostname, bgColor });\n+    }\n+  });\n+\n+  it(\"Maria opens embedding page ddd\", async () => {\n+    await maria_brA.go2(embeddingOrigin + '/' + pageDddSlug);\n+  });\n+\n+  it(\"Starts writing a reply, when not logged in\", async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.clickReplyToEmbeddingBlogPost();\n+  });\n+\n+  it(\"... writes a comment\", async () => {\n+    await maria_brA.switchToEmbeddedEditorIrame();\n+    await maria_brA.editor.editText(mariasCommentOneOrig);\n+\n+    // Chrome 80, Feb 2020, stopped on-unload saving drafts, cannot\n+    // figure out why: it also won't stop on breakpoints. FF still works fine.\n+    if (settings.browserName === 'chrome') {  // [NOBEACON] [E2EBUG]\n+      await maria_brA.editor.waitForDraftSavedInBrowser();\n+    }\n+  });\n+\n+\n+  // ----- Beacon save, first reply\n+\n+  it(\"She reloads the page, without posting the comment — this saves the text in the browser\", async () => {\n+    await maria_brA.refresh2();\n+  });\n+\n+  it(`... there's a draft preview in the comments frame`, async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.waitForPostDraftDisplayed();\n+  });\n+  it(`... nothing else (no replies or previews)`, async () => {\n+    numReplies = await maria_brA.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numDrafts: 1 }));\n+  });\n+  it(`... the draft text is the text she drafted`, async () => {\n+    await maria_brA.drafts.waitForNthDraftWithText(1, mariasCommentOneOrig);\n+  });\n+\n+\n+  // ----- Resumeb draft by clicking Reply\n+\n+  it(\"Maria starts writing again, by clicking blog-post-Reply\", async () => {\n+    await maria_brA.topic.clickReplyToEmbeddingBlogPost();\n+  });\n+\n+  it(`... a reply preview appears, draft hidden`, async () => {\n+    await maria_brA.topic.waitForPostPreviewDisplayed();\n+    numReplies = await maria_brA.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numPreviews: 1 }));\n+  });\n+  it(`... the preview shows the draft text`, async () => {\n+    await maria_brA.waitForTextVisibleAssertIs(\n+            '.s_P-Prvw-IsEd .dw-p-bd', mariasCommentOneOrig);\n+  });\n+\n+  it(\"The draft text appears in the editor; was saved in browser's storage\", async () => {\n+    await maria_brA.switchToEmbeddedEditorIrame();\n+    await maria_brA.editor.waitForDraftTextToLoad(mariasCommentOneOrig);\n+  });\n+\n+\n+  // ----- Resumeb draft by clicking Resume Draft  TyTINPGDFTS\n+\n+  it(\"Maria closes the editor ...\", async () => {\n+    await maria_brA.editor.cancelNoHelp();\n+  });\n+  it(`... draft back`, async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.waitForPostDraftDisplayed();\n+  });\n+  it(`... preview gone`, async () => {\n+    numReplies = await maria_brA.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numDrafts: 1 }));\n+  });\n+  it(`Maria opens by clicking the Resume Draft button`, async () => {\n+    await maria_brA.drafts.resumeNthDraft(1);\n+  });\n+  it(`... a reply preview appears, draft hidden`, async () => {\n+    await maria_brA.topic.waitForPostPreviewDisplayed();\n+    numReplies = await maria_brA.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numPreviews: 1 }));\n+  });\n+  it(`... the draft text appears in the editor now too`, async () => {\n+    await maria_brA.switchToEmbeddedEditorIrame();\n+    await maria_brA.editor.waitForDraftTextToLoad(mariasCommentOneOrig);\n+  });\n+\n+\n+  // ----- Drafts are per page\n+\n+  it(\"she goes from page ddd to eee\", async () => {\n+    await maria_brA.switchToAnyParentFrame();\n+    let source = await maria_brA.getPageSource();\n+    assert.includes(source, 'ddd');\n+    await maria_brA.go2(embeddingOrigin + '/' + pageEeeSlug);\n+    source = await maria_brA.getPageSource();\n+    assert.includes(source, 'eee');\n+  });\n+\n+  it(`... there's no draft in this comments iframe — it's another page`, async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    numReplies = await maria_brA.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({}));\n+  });\n+\n+  it(\"... starts replying to page Eee's blog post\", async () => {\n+    await maria_brA.topic.clickReplyToEmbeddingBlogPost();\n+  });\n+\n+  it(\"... now there's no draft — because this is a different page, page Eee\", async () => {\n+    await maria_brA.switchToEmbeddedEditorIrame();\n+    await maria_brA.editor.waitForDraftTextToLoad('');\n+  });\n+\n+  it(\"she retunrs to ddd\", async () => {\n+    await maria_brA.go2(embeddingOrigin + '/' + pageDddSlug);\n+    const source = await maria_brA.getPageSource();\n+    assert.includes(source, 'ddd');\n+  });\n+\n+  it(`... her draft is here`, async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    numReplies = await maria_brA.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numDrafts: 1 }));\n+  });\n+\n+  it(\"Maria starts replying again\", async () => {\n+    await maria_brA.topic.clickReplyToEmbeddingBlogPost();\n+  });\n+\n+  it(\"... the draft text loads, again\", async () => {\n+    await maria_brA.switchToEmbeddedEditorIrame();\n+    await maria_brA.editor.waitForDraftTextToLoad(mariasCommentOneOrig);\n+  });\n+\n+  it(\"... she edits the reply draft\", async () => {\n+    await maria_brA.editor.editText(mariasCommentOneEdited);\n+  });\n+\n+\n+  // ----- Unmount save, first reply\n+\n+  it(\"And closes the editor — this unmount-saves a draft\", async () => {\n+    await maria_brA.editor.cancelNoHelp();\n+  });\n+\n+  it(\"She refreshes, and reopens the editor\", async () => {\n+    await maria_brA.refresh2();\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.clickReplyToEmbeddingBlogPost();\n+  });\n+\n+  it(\"... the text is there, edited\", async () => {\n+    await maria_brA.switchToEmbeddedEditorIrame();\n+    await maria_brA.editor.waitForDraftTextToLoad(mariasCommentOneEdited);\n+  });\n+\n+  it(\"She clicks Post Reply\", async () => {\n+    await maria_brA.editor.save();\n+  });\n+\n+  it(\"... logs in, to post the comment\", async () => {\n+    await maria_brA.loginDialog.loginWithPasswordInPopup(maria);\n+  });\n+\n+  it(\"The comment is there, as the first reply\", async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.waitForPostAssertTextMatches(c.FirstReplyNr, mariasCommentOneEdited);\n+  });\n+\n+  it(\"... the draft and preview are gone\", async () => {\n+    numReplies = await maria_brA.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numNormal: 1 }));\n+  });\n+\n+\n+  // ----- Beacon save, subsequent replies\n+\n+  it(\"Maria logs out\", async () => {\n+    await maria_brA.metabar.clickLogout();\n+  });\n+\n+  it(\"And starts typing a reply to herself, not logged in\", async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.clickReplyToPostNr(c.FirstReplyNr);\n+    await maria_brA.switchToEmbeddedEditorIrame();\n+    await maria_brA.editor.editText(mariasCommentTwo);\n+    if (settings.browserName === 'chrome') {  // [NOBEACON] [E2EBUG]\n+      await maria_brA.editor.waitForDraftSavedInBrowser();\n+    }\n+  });\n+\n+  it(\"Refreshs the page — this beacon saves\", async () => {\n+    await maria_brA.refresh2();\n+  });\n+\n+  it(\"She starts replying to herself again\", async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.clickReplyToPostNr(c.FirstReplyNr);\n+  });\n+\n+  // -- Break out test fns? --------------\n+  // Dupl test code [repl_pv_e2e]\n+  it(`A reply preview appears`, async () => {\n+    await maria_brA.topic.waitForPostPreviewDisplayed();\n+    numReplies = await maria_brA.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numNormal: 1, numPreviews: 1 }));\n+  });\n+  it(`... and a \"Replying to\" text at the comment she's replying to`, async () => {\n+    await maria_brA.waitUntilTextMatches(\n+            '.s_T-Prvw-IsEd .s_T_YourPrvw_ToWho', /Your reply to /);\n+  });\n+  it(`... the preview is just below the post being replied to TyTREPREVW`, async () => {\n+    await maria_brA.assertDisplayed(\n+            `#post-${c.FirstReplyNr\n+                } + .esPA + .dw-single-and-multireplies > .dw-res > .s_T-Prvw-IsEd`);\n+  });\n+  it(`... \"Replying to:\" is shown above the parent comment  TyTREPREVW`, async () => {\n+    await maria_brA.assertDisplayed(\n+            `.s_T_ReTo + .esAvtr + #post-${c.FirstReplyNr}`);\n+    await maria_brA.assertTextIs(\n+            `.s_T_ReTo .s_T_ReTo_Ttl`, \"Replying to:\");\n+  });\n+  // -------------------------------------\n+\n+  it(\"... the text is there, it got beacon-saved\", async () => {\n+    await maria_brA.switchToEmbeddedEditorIrame();\n+    await maria_brA.editor.waitForDraftTextToLoad(mariasCommentTwo);\n+  });\n+\n+\n+  // ----- Drafts are per post\n+\n+  it(\"She closes the editor\", async () => {\n+    await maria_brA.editor.cancelNoHelp();\n+  });\n+\n+  it(\"And clicks Reply, to the blog post (but not her own comment)\", async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.clickReplyToEmbeddingBlogPost();\n+  });\n+\n+  // -- Break out test fns? --------------\n+  // Dupl test code [repl_pv_e2e]\n+  it(`A blog post reply preview appears`, async () => {\n+    await maria_brA.topic.waitForPostPreviewDisplayed();\n+    numReplies = await maria_brA.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({\n+            numNormal: 1, numDrafts: 1, numPreviews: 1 }));\n+  });\n+  it(`... with the text \"Preview:\" above`, async () => {\n+    await maria_brA.waitForTextVisibleAssertIs(\n+            '.s_T-Prvw-IsEd > .s_T_YourPrvw', \"Preview:\");\n+  });\n+  it(`... it's placed after the other commets  TyTPOSTORDR`, async () => {\n+    await maria_brA.assertDisplayed(\n+          '.s_ThrDsc > .dw-single-and-multireplies > .dw-singlereplies ' +\n+          ' > li:last-child > .s_T-Prvw-IsEd > .s_T_YourPrvw');\n+  });\n+  // -------------------------------------\n+\n+  it(\"Now no draft text loads, because the draft is for a reply to Marias's comment\", async () => {\n+    await maria_brA.switchToEmbeddedEditorIrame();\n+    await maria_brA.editor.waitForDraftTextToLoad('');\n+  });\n+\n+\n+  it(`Maria submits a comment`, async () => {\n+    await maria_brA.switchToEmbeddedEditorIrame();\n+    await maria_brA.editor.editText(mariasCommentThree, { timeoutMs: 3000 });\n+    await maria_brA.editor.save();\n+  });\n+  it(`... needs to login again  TyTRELZYAUN`, async () => {\n+    await maria_brA.loginDialog.loginWithPasswordInPopup(maria);\n+  });\n+  it(`... the comment appears`, async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr + 1, mariasCommentThree);\n+  });\n+  it(`... at the bottom  TyTPOSTORDR`, async () => {   // dupl test code [repl_pv_e2e]\n+    await maria_brA.assertDisplayed(\n+          '.s_ThrDsc > .dw-single-and-multireplies > .dw-res > li:last-child ' +\n+          ` > .dw-t > #post-${c.FirstReplyNr + 1} > .dw-p-bd`);\n+  });\n+  it(`The comment preview is gone, but the draft still there`, async () => {\n+    numReplies = await maria_brA.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numNormal: 2, numDrafts: 1 }));\n+  });\n+\n+\n+  // ----- Delete drafts by clicking Delete Draft  TyTINPGDFTS\n+\n+  it(`Maria starts replying to the last comment`, async () => {\n+    await maria_brA.complex.startReplyingToPostNr(\n+            c.FirstReplyNr + 1, mariasCommentFour);\n+  });\n+  it(\"... cancels\", async () => {\n+    await maria_brA.editor.cancelNoHelp();\n+  });\n+  it(`... now there're two drafts`, async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.waitForNumReplies({ numNormal: 2, numDrafts: 2 });\n+  });\n+\n+  it(`Maria deletes the first draft`, async () => {\n+    await maria_brA.drafts.deleteNthDraft(1);\n+  });\n+  it(`... now there's just one draft`, async () => {\n+    await maria_brA.topic.waitForNumReplies({ numNormal: 2, numDrafts: 1 });\n+  });\n+  it(`... it's for the last reply`, async () => {   // dupl test code [repl_pv_e2e]\n+    await maria_brA.assertDisplayed(\n+            `#post-${c.FirstReplyNr + 1\n+              } + .esPA + .dw-single-and-multireplies > .dw-res > .s_T-Prvw-NotEd`);\n+  });\n+\n+  it(`Maria reloads the page`, async () => {\n+    await maria_brA.refresh2();\n+  });\n+  it(`... the draft is still there (but not the deleted one)`, async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.waitForNumReplies({ numNormal: 2, numDrafts: 1 });\n+  });\n+  it(`... still for the last reply`, async () => {   // dupl test code [repl_pv_e2e]\n+    await maria_brA.assertDisplayed(\n+            `#post-${c.FirstReplyNr + 1\n+              } + .esPA + .dw-single-and-multireplies > .dw-res > .s_T-Prvw-NotEd`);\n+  });\n+\n+  it(`Maria resumes and submits the draft`, async () => {\n+    await maria_brA.drafts.resumeNthDraft(1);\n+    await maria_brA.switchToEmbeddedEditorIrame();\n+    await maria_brA.editor.editText(\" EDITED\", { append: true});\n+    await maria_brA.editor.save();\n+  });\n+  it(`... a reply to the last comment appears`, async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr + 2, mariasCommentFour + \" EDITED\");\n+  });\n+  it(`... all drafts gone`, async () => {\n+    await maria_brA.topic.waitForNumReplies({ numNormal: 3 });\n+  });\n+\n+\n+  // ----- Deleted draft really gone\n+\n+  it(`Replying to the first comment, won't bring back the deleted draft`, async () => {\n+    await maria_brA.complex.startReplyingToPostNr(c.FirstReplyNr);\n+    await maria_brA.editor.waitForDraftTextToLoad('');\n+  });\n+  it(`... also won't, if logging out ...`, async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.metabar.clickLogout();\n+    await maria_brA.refresh2();\n+  });\n+  it(`... and starting to reply: there's no saved draft text`, async () => {\n+    await maria_brA.switchToEmbeddedCommentsIrame();\n+    await maria_brA.complex.startReplyingToPostNr(c.FirstReplyNr);\n+    await maria_brA.editor.waitForDraftTextToLoad('');\n+  });\n+});\n+"
    },
    {
      "sha": "62af40b84582a940ec4e970d39488a72c4bc1b30",
      "filename": "tests/e2e-wdio7/specs/embcom.manual.2br.e2e.ts",
      "status": "added",
      "additions": 97,
      "deletions": 0,
      "changes": 97,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.manual.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.manual.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/embcom.manual.2br.e2e.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,97 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import * as fs from 'fs';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import * as utils from '../utils/utils';\n+import settings from '../utils/settings';\n+\n+let everyonesBrowsers: TyAllE2eTestBrowsers;\n+let richBrowserA: TyE2eTestBrowser;\n+let richBrowserB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+\n+const localHostname = 'comments-for-e2e-test-embcomman-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-embcomman.localhost:8080';\n+let forum: TwoPagesTestForum;\n+\n+\n+\n+describe(`embcom.manual.2br.e2e.ts  TyTE2EEMBCOMMAN`, () => {\n+\n+  it(`construct site`, () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoPagesForum({\n+      title: \"Emb Comments Manual E2E Test\",\n+      members: undefined,\n+    });\n+\n+    builder.getSite().meta.localHostname = localHostname;\n+    builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+\n+    everyonesBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    richBrowserA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    richBrowserB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = richBrowserA;\n+    maria = forum.members.maria;\n+    maria_brB = richBrowserB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`import site`, async () => {\n+    if (settings.reuseOldSite) {\n+      // Maybe query the server?\n+      site = {\n+        id: -1,\n+        pubId: '?',\n+        origin: settings.proto2Slash + localHostname + '.localhost',\n+        siteIdOrigin: '?',\n+        cdnOriginOrEmpty: '',\n+      };\n+    }\n+    else {\n+      site = server.importSiteData(forum.siteData);\n+      server.skipRateLimits(site.id);\n+    }\n+  });\n+\n+\n+  it(`Owen logs in to admin area`, async () => {\n+    await owen_brA.adminArea.goToUsersEnabled(site.origin);\n+    await owen_brA.loginDialog.loginWithPassword(owen);\n+  });\n+\n+\n+  it(`Owen creates embedding pages`, async () => {\n+    const dir = 'target';\n+    fs.writeFileSync(`${dir}/page-a-slug.html`, makeHtml('aaa', '#500'));\n+    fs.writeFileSync(`${dir}/page-b-slug.html`, makeHtml('bbb', '#040'));\n+    function makeHtml(pageName: St, bgColor: St): St {\n+      return utils.makeEmbeddedCommentsHtml({\n+            pageName, discussionId: '', localHostname, bgColor});\n+    }\n+  });\n+\n+\n+  it(`Maria opens embedding page aaa`, async () => {\n+    await maria_brB.go2(embeddingOrigin + '/page-a-slug.html');\n+  });\n+\n+\n+  it(`... logs in`, async () => {\n+    await maria_brB.complex.loginIfNeededViaMetabar(maria);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "975ba815e91550e6ee3b5b9d1deabf094af0b64f",
      "filename": "tests/e2e-wdio7/specs/embcom.manyframes.basic.2br.e2e.ts",
      "status": "added",
      "additions": 351,
      "deletions": 0,
      "changes": 351,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.manyframes.basic.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.manyframes.basic.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/embcom.manyframes.basic.2br.e2e.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,351 @@\n+// CR_MISSING\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as ut from '../utils/utils';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings from '../utils/settings';\n+import { dieIf } from '../utils/log-and-die';\n+import c from '../test-constants';\n+\n+\n+let everyonesBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+let stranger_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+const localHostname = 'comments-for-e2e-test-manyifr-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-manyifr.localhost:8080';\n+\n+const slashSlug_c404_many2 = '/embcom-manyframes-basic-c404-many-2.html';\n+const slashSlug_c040_single1 = '/embcom-manyframes-basic-c040-single-1.html';\n+\n+const mariasReply_nr1_diid_222 = 'mariasReply_nr1_diid_222';\n+const mariasReply_nr2_diid_222 = 'mariasReply_nr2_diid_222';\n+const mariasReply_nr3_diid_111 = 'mariasReply_nr3_diid_111';\n+const mariasReply_nr4_diid_111 = 'mariasReply_nr4_diid_111';\n+const mariasReply_nr5_diid_222 = 'mariasReply_nr5_diid_222';\n+const mariasReply_nr6_diid_111 = 'mariasReply_nr6_diid_222';\n+\n+\n+describe(`embcom.manyframes.basic.2br  TyTEMANYCOMIFR01`, () => {\n+\n+  it(`construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Many Comment Iframes Basic\",\n+      members: undefined, // default = everyone\n+        // ['mons', 'modya', 'regina', 'corax', 'memah', 'maria', 'michael', 'mallory']\n+    });\n+\n+    builder.getSite().meta.localHostname = localHostname;\n+    builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+\n+\n+    everyonesBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+    stranger_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`import site`, async () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+  });\n+\n+\n+\n+  it(`Creates an embedding page`, async () => {\n+    const dir = 'target';\n+    fs.writeFileSync('target' + slashSlug_c404_many2, makeManyHtml('c404', '#404'));\n+    //fs.writeFileSync(`${dir}/page-b-slug.html`, makeHtml('bbb', '#040'));\n+\n+    function makeManyHtml(pageName: string, bgColor: string): string {\n+      return ut.makeManyEmbeddedCommentsHtml({\n+              pageName, discussionIds: ['111', '222'], localHostname, bgColor});\n+    }\n+\n+    fs.writeFileSync('target' + slashSlug_c040_single1, makeSingleHtml('c040', '#040'));\n+    function makeSingleHtml(pageName: St, bgColor: St): St {\n+      return ut.makeEmbeddedCommentsHtml({\n+            pageName, discussionId: '222', localHostname, bgColor});\n+    }\n+  });\n+\n+\n+  it(`Maria opens embedding page ${slashSlug_c404_many2}`, async () => {\n+    await maria_brB.go2(embeddingOrigin + slashSlug_c404_many2);\n+  });\n+\n+\n+  it(\"... logs in\", async () => {\n+    maria_brB.useCommentsIframe({ discussionId: '222' });\n+    await maria_brB.complex.loginIfNeededViaMetabar(maria);\n+  });\n+\n+\n+  it(\"... posts a comment\", async () => {\n+    await maria_brB.complex.replyToEmbeddingBlogPost(mariasReply_nr1_diid_222)\n+  });\n+  it(\"... another one\", async () => {\n+    await maria_brB.complex.replyToEmbeddingBlogPost(mariasReply_nr2_diid_222)\n+  });\n+  it(\"... now there are two comments\", async () => {\n+    await maria_brB.topic.assertNumRepliesVisible(2);\n+  });\n+\n+\n+  it(`Maria focuses the iframe with discussion 111`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+  });\n+  it(`She's logged in already, as Maria`, async () => {\n+    const actualUsername = await maria_brB.metabar.getMyUsernameInclAt();\n+    assert.eq(actualUsername, '@' + maria.username);\n+  });\n+\n+\n+  it(`There're no replies here`, async () => {\n+    await maria_brB.topic.assertNumRepliesVisible(0);\n+  });\n+  it(`Maria posts a reply`, async () => {\n+    await maria_brB.complex.replyToEmbeddingBlogPost(mariasReply_nr3_diid_111)\n+  });\n+  it(`... now there's one reply`, async () => {\n+    await maria_brB.topic.assertNumRepliesVisible(1);\n+  });\n+\n+\n+  it(`Back in discussion 222 though`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+  });\n+  it(`... there're still just 2 replies`, async () => {\n+    await maria_brB.topic.assertNumRepliesVisible(2);\n+  });\n+\n+\n+  it(`Nothing changes after page reload`, async () => {\n+    await maria_brB.refresh2();\n+  });\n+  it(`... in discussion 222`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+    await maria_brB.topic.assertNumRepliesVisible(2);\n+  });\n+  it(`... nor in 111`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+    await maria_brB.topic.assertNumRepliesVisible(1);\n+  });\n+\n+\n+  // ----- Drafts in multi iframes   TyTEMBDFT02\n+\n+  it(`Maria creates a comment draft in 111`, async () => {\n+    await maria_brB.topic.clickReplyToEmbeddingBlogPost();\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.editText(mariasReply_nr4_diid_111, { timeoutMs: 3000 });\n+  });\n+  it(`... cancels, so a draft gets saved`, async () => {\n+    await maria_brB.editor.cancelNoHelp();\n+  });\n+\n+  it(`Maria switches to discussion 222`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+  });\n+\n+  it(`Maria writes a a draft reply to the blog post`, async () => {\n+    await maria_brB.topic.clickReplyToEmbeddingBlogPost();\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.editText(mariasReply_nr5_diid_222, { timeoutMs: 3000 });\n+  });\n+  it(`... cancels, so a draft gets saved`, async () => {\n+    await maria_brB.editor.cancelNoHelp();\n+  });\n+  it(`... writes a draft reply to the 1st comment`, async () => {\n+    await maria_brB.topic.clickReplyToPostNr(c.FirstReplyNr);\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.editText(mariasReply_nr6_diid_111, { timeoutMs: 3000 });\n+  });\n+  it(`... a draft gets saved after some seconds`, async () => {\n+    await maria_brB.editor.waitForDraftSaved();\n+  });\n+  it(`... refreshes the page`, async () => {\n+    await maria_brB.refresh2();\n+  });\n+\n+\n+  let numReplies: NumReplies | U;\n+\n+  it(`In discussion 111, there's one comment and 1 draft`, async () => {\n+    maria_brB.useCommentsIframe({ discussionId: '111' });\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.eq(numReplies.numNormal, 1);\n+  });\n+  it(`... and one draft`, async () => {\n+    assert.eq(numReplies.numDrafts, 1);\n+    assert.eq(numReplies.numPreviews, 0);   // ttt\n+    assert.eq(numReplies.numUnapproved, 0); // ttt\n+    assert.eq(numReplies.numDeleted, 0);    // ttt\n+  });\n+\n+  it(`In discussion 222 there're two comments`, async () => {\n+    await maria_brB.switchToTheParentFrame();\n+    maria_brB.useCommentsIframe({ discussionId: '222' });\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.eq(numReplies.numNormal, 2);\n+  });\n+  it(`... and two drafts  UNIMPL TESTS_MISSING [many_ifr_my_page_data]`, async () => {\n+    //assert.eq(numReplies.numDrafts, 2);\n+  });\n+\n+\n+  it(`Maria opens the first draft`, async () => {\n+    // For now:   [many_ifr_my_page_data]\n+    await maria_brB.topic.clickReplyToEmbeddingBlogPost();\n+    // Later: await await maria_brB.drafts.resumeNthDraft(1);\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.waitForDraftTextToLoad(mariasReply_nr5_diid_222);\n+  });\n+  it(`... submits it`, async () => {\n+    await maria_brB.editor.save();\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr + 2, mariasReply_nr5_diid_222);\n+  });\n+  it(`Now there are 3 comments`, async () => {\n+    await maria_brB.topic.assertNumRepliesVisible(3);\n+  });\n+  it(`... one draft left  UNIMPL TESTS_MISSING [many_ifr_my_page_data]`, async () => {\n+    // await maria_brB.drafts.assertNumDrafts(1);\n+  });\n+\n+\n+  it(`In discussion 111 ...`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+  });\n+  it(`... the draft and one comment are still there`, async () => {\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numNormal: 1, numDrafts: 1}));\n+  });\n+  it(`Maria opens the draft`, async () => {\n+    await maria_brB.drafts.resumeNthDraft(1);\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.waitForDraftTextToLoad(mariasReply_nr4_diid_111);\n+  });\n+  it(`... submits it`, async () => {\n+    await maria_brB.editor.save();\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr + 1, mariasReply_nr4_diid_111);\n+  });\n+  it(`Now there are 2 comments`, async () => {\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.eq(numReplies.numNormal, 2);\n+  });\n+  it(`... no draft left`, async () => {\n+    await maria_brB.drafts.waitUntilNumDrafts(0);\n+    assert.eq(numReplies.numDrafts, 0);\n+  });\n+\n+\n+  it(`Maria opens page ${slashSlug_c040_single1} with emb disc 222`, async () => {\n+    await maria_brB.go2(embeddingOrigin + slashSlug_c040_single1);\n+  });\n+  it(`... she's logged in already, as Maria`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ theresOnlyOne: true });\n+    const actualUsername = await maria_brB.metabar.getMyUsernameInclAt();\n+    assert.eq(actualUsername, '@' + maria.username);\n+  });\n+  it(`... there're three comments`, async () => {\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.eq(numReplies.numNormal, 3);\n+  });\n+  it(`... and one draft`, async () => {\n+    assert.eq(numReplies.numDrafts, 1);\n+  });\n+\n+\n+  it(`Maria opens the remaining draft`, async () => {\n+    await maria_brB.drafts.resumeNthDraft(1);\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.waitForDraftTextToLoad(mariasReply_nr6_diid_111);\n+  });\n+  it(`... edits the text`, async () => {\n+    await maria_brB.editor.editText(\" EDITED\", { append: true });\n+  });\n+  it(`... submits it`, async () => {\n+    await maria_brB.editor.save();\n+  });\n+  it(`... it appears, incl the edits`, async () => {\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr + 3, mariasReply_nr6_diid_111 + \" EDITED\");\n+  });\n+\n+\n+  it(`Back on the many-iframes page`, async () => {\n+    await maria_brB.go2(embeddingOrigin + slashSlug_c404_many2);\n+  });\n+  it(`... she now sees 4 comments in discussion 222`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numNormal: 4 }));\n+  });\n+  it(`... incl the recently edited & submitted draft`, async () => {\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr + 3, mariasReply_nr6_diid_111 + \" EDITED\");\n+  });\n+\n+\n+  it(`Maria logs out`, async () => {\n+    await maria_brB.metabar.clickLogout();\n+  });\n+  it(`... she's not logged in in 222`, async () => {\n+    await maria_brB.metabar.waitUntilNotLoggedIn();\n+  });\n+  it(`... and not in 111`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+    await maria_brB.metabar.waitUntilNotLoggedIn();\n+  });\n+\n+  it(`After page reload, she's still not logged in ...`, async () => {\n+    await maria_brB.refresh2();\n+  });\n+  it(`... in 111`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+    await maria_brB.metabar.waitUntilNotLoggedIn();\n+  });\n+  it(`... nor in 222`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.metabar.waitUntilNotLoggedIn();\n+  });\n+\n+  it(`At page ${slashSlug_c040_single1} with only disc 222 ...`, async () => {\n+    await maria_brB.go2(embeddingOrigin + slashSlug_c040_single1);\n+  });\n+  it(`... she's logged out too`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ theresOnlyOne: true });\n+    await maria_brB.metabar.waitUntilNotLoggedIn();\n+  });\n+\n+});"
    },
    {
      "sha": "906d4493f8e65cd399d49df163d27a3190227101",
      "filename": "tests/e2e-wdio7/specs/embcom.manyframes.drafts-repl-to.2br.e2e.ts",
      "status": "added",
      "additions": 362,
      "deletions": 0,
      "changes": 362,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.manyframes.drafts-repl-to.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.manyframes.drafts-repl-to.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/embcom.manyframes.drafts-repl-to.2br.e2e.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,362 @@\n+// CR_MISSING\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as ut from '../utils/utils';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings from '../utils/settings';\n+import { dieIf } from '../utils/log-and-die';\n+import c from '../test-constants';\n+\n+\n+let everyonesBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+const localHostname = 'comments-for-e2e-test-mnyifre-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-manyifr.localhost:8080';\n+\n+const slashSlug_c052_many2 = '/embcom-manyframes-replyto-c052-many-2.html';\n+\n+const mariasReply_nr1_diid_222 = 'mariasReply_nr1_diid_222';\n+const mariasReply_nr2_diid_111 = 'mariasReply_nr2_diid_111';\n+const mariasReply_nr3_diid_333 = 'mariasReply_nr3_diid_333';\n+const mariasReply_nr4_did_222_toMaria = 'mariasReply_nr4_did_222_toMaria';\n+const mariasReply_nr4_did_222_edited = 'mariasReply_nr4_did_222_edited';\n+\n+let numReplies: NumReplies | U;\n+\n+describe(`embcom.manyframes.drafts-repl-to.2br  TyTEMANYCOMIFR02`, () => {\n+\n+  it(`construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Many Comment Iframes Repl To\",\n+      members: undefined, // default = everyone\n+        // ['mons', 'modya', 'regina', 'corax', 'memah', 'maria', 'michael', 'mallory']\n+    });\n+\n+    builder.getSite().meta.localHostname = localHostname;\n+    builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+\n+    everyonesBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`import site`, async () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+  });\n+\n+\n+\n+  it(`Creates an embedding page`, async () => {\n+    fs.writeFileSync('target' + slashSlug_c052_many2, makeManyHtml('c052', '#052'));\n+    function makeManyHtml(pageName: string, bgColor: string): string {\n+      return ut.makeManyEmbeddedCommentsHtml({\n+              pageName, discussionIds: ['111', '222', '333'], localHostname, bgColor});\n+    }\n+  });\n+\n+\n+  it(`Maria opens embedding page ${slashSlug_c052_many2}`, async () => {\n+    await maria_brB.go2(embeddingOrigin + slashSlug_c052_many2);\n+  });\n+\n+\n+  it(`... logs in`, async () => {\n+    maria_brB.useCommentsIframe({ discussionId: '222' });\n+    await maria_brB.complex.loginIfNeededViaMetabar(maria);\n+  });\n+\n+\n+\n+  it(`... starts typing a comment in discussion 222`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.complex.startReplyingToEmbBlogPost(mariasReply_nr1_diid_222);\n+  });\n+  it(`... a preview appears in disc 222`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.waitForPostPreviewDisplayed();\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numPreviews: 1 }));\n+  });\n+  it(`... but not in 111`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({}));\n+  });\n+  it(`... Maria cancels the reply`, async () => {\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.cancelNoHelp();\n+  });\n+  it(`... a draft gets saved in 222`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.waitForPostDraftDisplayed();\n+  });\n+  it(`... only the draft there`, async () => {\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numDrafts: 1 }));  // preview gone\n+  });\n+  it(`... she opens the draft`, async () => {\n+    await maria_brB.drafts.resumeNthDraft(1);\n+  });\n+  it(`... a preview appears instead of the draft`, async () => {\n+    await maria_brB.topic.waitForPostPreviewDisplayed();\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numPreviews: 1 }));\n+  });\n+  it(`... closes the editor`, async () => {\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.cancelNoHelp();\n+  });\n+  it(`... preview gone, draft back`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.waitForPostDraftDisplayed();\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numDrafts: 1 }));\n+  });\n+\n+\n+  it(`... Maria saves a draft in disc 111 too`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+    await maria_brB.complex.startReplyingToEmbBlogPost(mariasReply_nr2_diid_111);\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.cancelNoHelp();\n+  });\n+\n+\n+  it(`... and in disc 333`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '333' });\n+    await maria_brB.complex.startReplyingToEmbBlogPost(mariasReply_nr3_diid_333);\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.cancelNoHelp();\n+  });\n+\n+\n+  it(`Maria reloads the page`, async () => {\n+    await maria_brB.refresh2();\n+  });\n+\n+  it(`There's a draft in disc 111`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+    await maria_brB.topic.waitForNumReplies({ numDrafts: 1 });\n+  });\n+  it(`... one in 333`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '333' });\n+    await maria_brB.topic.waitForNumReplies({ numDrafts: 1 });\n+  });\n+  it(`... and one in disc 222`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    // This works because drafts saved in the browser, since page\n+    // not yet lazy created. Otherwise, if saving server side,\n+    // there'd be a bug [many_ifr_my_page_data]\n+    await maria_brB.topic.waitForNumReplies({ numDrafts: 1 });\n+  });\n+\n+  it(`Maria opens the 222 draft`, async () => {\n+    await maria_brB.drafts.resumeNthDraft(1);\n+  });\n+  it(`... a preview appears instead of the draft`, async () => {\n+    await maria_brB.topic.waitForPostPreviewDisplayed();\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numPreviews: 1 }));\n+  });\n+  it(`... she submits the post`, async () => {\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.waitForDraftTextToLoad(mariasReply_nr1_diid_222);\n+    await maria_brB.editor.save();\n+  });\n+  it(`... it appears`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });   // ttt OK\n+    await maria_brB.topic.waitForPostAssertTextMatches(   /// ttt ok\n+            c.FirstReplyNr, mariasReply_nr1_diid_222);\n+  });\n+  it(`... now there's 1 reply and 0 drafts`, async () => {\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numNormal: 1 }));\n+  });\n+\n+\n+  it(`Maria deletes the 333 draft`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '333' });\n+    await maria_brB.drafts.deleteNthDraft(1);\n+    // delete via editor instead?\n+  });\n+  it(`... it disappears`, async () => {\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({}));\n+  });\n+\n+\n+  it(`There's still a draft in disc 111`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numDrafts: 1 }));\n+  });\n+\n+\n+  it(`Maria reloads the page`, async () => {\n+    await maria_brB.refresh2();\n+  });\n+\n+  it(`Nothing changes. In disc 222 there's a reply`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 1 });\n+  });\n+  it(`... in 333, the draft is gone, nothing there to see`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '333' });\n+    await maria_brB.topic.waitForNumReplies({});\n+  });\n+  it(`... and the draft in 111 didn't disappear`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+    await maria_brB.topic.waitForNumReplies({ numDrafts: 1 });\n+  });\n+\n+\n+  it(`Maria submits the 111 draft`, async () => {\n+    await maria_brB.drafts.resumeNthDraft(1);\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.waitForDraftTextToLoad(mariasReply_nr2_diid_111);\n+    await maria_brB.editor.save();\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr, mariasReply_nr2_diid_111);\n+  });\n+  it(`There's now 1 reply and 0 drafts`, async () => {\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numNormal: 1 }));\n+  });\n+\n+\n+  // ---- Preview of a reply to a comment\n+\n+  it(`Maria starts replying to the comment in 222`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.complex.startReplyingToPostNr(\n+            c.FirstReplyNr, mariasReply_nr4_did_222_toMaria);\n+  });\n+  it(`... a reply preview appears in iframe 222`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.waitForPostPreviewDisplayed();\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numNormal: 1, numPreviews: 1 }));\n+  });\n+  // -- Break out test fns? --------------\n+  // Dupl test code [repl_pv_e2e]\n+  it(`... with the text \"Your reply to ...\"  TyTREPREVW`, async () => {\n+    await maria_brB.waitUntilTextMatches('.s_T_YourPrvw_ToWho', /Your reply to /);\n+  });\n+  it(`... to \"maria\" herself, plus Unicode up arrow  TyTREPREVW`, async () => {\n+    await maria_brB.assertTextIs('.s_T_YourPrvw_ToWho a.dw-rr', maria.username + '⬆');\n+  });\n+  it(`... with a link to the parent comment  TyTREPREVW`, async () => {\n+    await maria_brB.assertDisplayed(\n+            `.s_T_YourPrvw_ToWho a.dw-rr[href=\"#post-${c.FirstReplyNr}\"]`);\n+  });\n+  it(`... the preview is just below the post being replied to TyTREPREVW`, async () => {\n+    await maria_brB.assertDisplayed(\n+            '#post-2 + .esPA + .dw-single-and-multireplies > .dw-res > .s_T-Prvw-IsEd');\n+  });\n+  it(`... \"Replying to:\" is shown above the parent comments  TyTREPREVW`, async () => {\n+    await maria_brB.assertDisplayed(\n+            `.s_T_ReTo + .esAvtr + #post-${c.FirstReplyNr}`);\n+    await maria_brB.assertTextIs(\n+            `.s_T_ReTo .s_T_ReTo_Ttl`, \"Replying to:\");\n+  });\n+  it(`... there's a scroll-to-reply-preview button  TyTREPREVW`, async () => {\n+    await maria_brB.assertTextIs(\n+            `.s_T_ReTo .s_T_ReTo_Prvw`, \"Scroll to preview ⬇️\");\n+  });\n+  // -------------------------------------\n+  it(`Maria posts the reply`, async () => {\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.save();\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr + 1, mariasReply_nr4_did_222_toMaria);\n+  });\n+\n+\n+  // ---- Edits preview\n+\n+  it(`Maria starts editing the reply to the reply in 222`, async () => {\n+    await maria_brB.topic.clickEditPostNr(c.FirstReplyNr + 1);\n+  });\n+  it(`... an edits preview appears in disc 222`, async () => {\n+    await maria_brB.topic.waitForPostPreviewDisplayed();\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numNormal: 1, numPreviews: 1 }));\n+  });\n+  it(`... with the text \"Your edits\"  TyTEDPREVW`, async () => {\n+    await maria_brB.waitUntilTextMatches('.s_T_YourPrvw_ToWho', /Your edits:/);\n+  });\n+  it(`Maria edits the text`, async () => {\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.editText(mariasReply_nr4_did_222_edited);\n+  });\n+  it(`... draft saved (on editor close)`, async () => {\n+    await maria_brB.editor.cancelNoHelp();\n+  });\n+\n+\n+  // ---- Edit draft and preview works after reload\n+\n+  it(`Maria reloads the page`, async () => {\n+    await maria_brB.refresh2();\n+  });\n+  it(`She sees an \"Unfinished edits\" text next to the edit button   UNIMPL`, async () => {\n+    // Won't show up — only drafts etc for the 1st iframe currently loaded.\n+    // [many_ifr_my_page_data]\n+    // '.s_UnfinEd'\n+  });\n+  it(`... and starts editing again`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.clickEditPostNr(c.FirstReplyNr + 1);\n+  });\n+  it(`... the new edited text is therer`, async () => {\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.waitForDraftTextToLoad(mariasReply_nr4_did_222_edited);\n+  });\n+  it(`... an edits preview appears, like before the reload`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.waitForPostPreviewDisplayed();\n+    numReplies = await maria_brB.topic.countReplies();\n+    assert.deepEq(numReplies, ut.numReplies({ numNormal: 1, numPreviews: 1 }));\n+  });\n+  it(`... again with the text \"Your edits\"  TyTEDPREVW`, async () => {\n+    await maria_brB.waitUntilTextMatches('.s_T_YourPrvw_ToWho', /Your edits:/);\n+  });\n+  it(`Maria saves the changes`, async () => {\n+    await maria_brB.switchToEmbeddedEditorIrame();\n+    await maria_brB.editor.save();\n+  });\n+  it(`Now there're 2 posts, no previews`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 2 });\n+  });\n+  it(`The edits appear`, async () => {\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr + 1, mariasReply_nr4_did_222_edited);\n+  });\n+\n+\n+});"
    },
    {
      "sha": "a52e028433cc10c1ed44e8df1c11f18cde6890ab",
      "filename": "tests/e2e-wdio7/specs/embcom.manyframes.js-api.2br.e2e.ts",
      "status": "added",
      "additions": 249,
      "deletions": 0,
      "changes": 249,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.manyframes.js-api.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.manyframes.js-api.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/embcom.manyframes.js-api.2br.e2e.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,249 @@\n+// CR_MISSING\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings from '../utils/settings';\n+import { dieIf } from '../utils/log-and-die';\n+import c from '../test-constants';\n+import { IsWhere } from '../test-types';\n+\n+\n+let everyonesBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+let stranger_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+const localHostname = 'comments-for-e2e-test-manyifrapi-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-manyifrapi.localhost:8080';\n+\n+const embPage1SlashSlug = '/many-embcom-ifr-api-1.html';\n+const embPage123SlashSlug = '/many-embcom-ifr-api-123.html';\n+const embPageNoneSlashSlug = '/many-embcom-ifr-api-none.html';\n+\n+const mariasReply1_disc222 = 'mariasReply1_disc222';\n+const mariasReply2_disc222 = 'mariasReply2_disc222';\n+const mariasReply3_disc111 = 'mariasReply3_disc111';\n+\n+\n+describe(`embcom.manyframes.js-api.2br  TyTEMANYEMBDISAPI`, () => {\n+\n+  it(`construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Many Comment Iframes API\",\n+      members: undefined, // default = everyone\n+        // ['mons', 'modya', 'regina', 'corax', 'memah', 'maria', 'michael', 'mallory']\n+    });\n+\n+    builder.getSite().meta.localHostname = localHostname;\n+    builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+\n+\n+    everyonesBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+    stranger_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`import site`, async () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+  });\n+\n+\n+\n+  it(`Creates an embedding page`, async () => {\n+    fs.writeFileSync('target' + embPage1SlashSlug, makeHtml('manyfr-1', ['111'], '#500'));\n+    fs.writeFileSync('target' + embPage123SlashSlug, makeHtml('manyfr-123', ['111', '222', '333'], '#005'));\n+    fs.writeFileSync('target' + embPageNoneSlashSlug, makeHtml('manyfr-none', [], '#000'));\n+\n+    function makeHtml(pageName: St, discussionIds: St[], bgColor: St): St {\n+      return utils.makeManyEmbeddedCommentsHtml({\n+              pageName, discussionIds, localHostname, bgColor});\n+    }\n+  });\n+\n+  it(`Maria opens embedding page aaa`, async () => {\n+    await maria_brB.go2(embeddingOrigin + embPage1SlashSlug);\n+  });\n+\n+  it(`The embedding web app calls Ty's js API: `, async () => {\n+    await maria_brB.execute(function() {\n+      window['talkyardAddCommentsIframe']({\n+            appendInside: '#comment_iframes', discussionId: '222' });\n+    })\n+  });\n+\n+  it(`Maria logs in`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.complex.loginIfNeededViaMetabar(maria);\n+  });\n+\n+  it(`... posts a comment in disc 222`, async () => {\n+    await maria_brB.complex.replyToEmbeddingBlogPost(mariasReply1_disc222)\n+  });\n+\n+  it(`Maria goes to page 1 2 3`, async () => {\n+    await maria_brB.go2(embeddingOrigin + embPage123SlashSlug);\n+  });\n+  it(`... disc 222 with her comment is there`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr, mariasReply1_disc222);\n+  });\n+\n+  it(`Maria posts another reply in 222`, async () => {\n+    await maria_brB.complex.replyToEmbeddingBlogPost(mariasReply2_disc222);\n+  });\n+  it(`... and one in 111`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+    await maria_brB.complex.replyToEmbeddingBlogPost(mariasReply3_disc111);\n+  });\n+\n+\n+  it(`Maria goes to page none`, async () => {\n+    await maria_brB.go2(embeddingOrigin + embPageNoneSlashSlug, {\n+            willBeWhere: IsWhere.EmbeddingPage });\n+  });\n+  it(`There are no comments frames at all`, async () => {\n+    await waitForNumIframes(maria_brB, 2);\n+  });\n+\n+  async function waitForNumIframes(br, n: Nr) {\n+    let numNow = 0;\n+    await maria_brB.waitUntil(async (): Pr<Bo> => {\n+      numNow = await maria_brB.execute(function() {\n+        return document.querySelectorAll('iframe').length;\n+      });\n+      return numNow === n;  // session + editor, no discussions\n+    }, {\n+      message: () => `Waiting for ${n} iframes, num now: ${numNow}`,\n+    });\n+  }\n+\n+  it(`The embedding web app calls Ty's js API, creates discs 333, 222, 111`, async () => {\n+    // TyTAPNDIFR283\n+    await maria_brB.execute(function() {\n+      window['talkyardAddCommentsIframe']({\n+            appendInside: '#comment_iframes', discussionId: '333' });\n+    });\n+    await maria_brB.execute(function() {\n+      // Try with appendInside = an element instead of a selector.\n+      const elm = document.querySelector('#comment_iframes');\n+      window['talkyardAddCommentsIframe']({\n+            appendInside: elm, discussionId: '222' });\n+    });\n+    await maria_brB.execute(function() {\n+      window['talkyardAddCommentsIframe']({\n+            appendInside: '#comment_iframes', discussionId: '111' });\n+    });\n+  });\n+  it(`There are now 2 + 3 iframes`, async () => {\n+    await waitForNumIframes(maria_brB, 2 + 3);\n+  });\n+\n+  it(`The comments are theree, in 222`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr, mariasReply1_disc222);\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr + 1, mariasReply2_disc222);\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 2 });\n+  });\n+  it(`... and in 111`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '111' });\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr, mariasReply3_disc111);\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 1 });\n+  });\n+  it(`... but none in 333`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '333' });\n+    await maria_brB.topic.waitForNumReplies({});\n+  });\n+\n+\n+  it(`On the embedding page ...`, async () => {\n+    await maria_brB.switchToTheParentFrame();\n+  });\n+  it(`Talkyard knows there're 3 discussions: 111, 222, 333, on the page`, async () => {\n+    const numDiscussions = await maria_brB.execute(function() {\n+      return window['e2e_getNumEmbDiscs']();\n+    });\n+    assert.eq(numDiscussions, 3);\n+  });\n+  it(`... and 2 + 3 iframes`, async () => {\n+    await waitForNumIframes(maria_brB, 2 + 3);  // session, editor, 3 discussions\n+  });\n+  it(`The embedding web app removes an iframe`, async () => {\n+    await maria_brB.execute(function() {\n+      document.querySelector('iframe[name=edComments-2]').remove();\n+    });\n+  });\n+  it(`... tells Talkyard about it`, async () => {\n+    await maria_brB.execute(function() {\n+      window['talkyardForgetRemovedCommentIframes']();\n+    });\n+  });\n+  it(`... now Talkyard has resized its arrays`, async () => {\n+    const numDiscussions = await maria_brB.execute(function() {\n+      return window['e2e_getNumEmbDiscs']();\n+    });\n+    assert.eq(numDiscussions, 2);\n+  });\n+  it(`... there're 2 + 2 iframes  ttt`, async () => {\n+    await waitForNumIframes(maria_brB, 2 + 2);  // session, editor, 2 discussions\n+  });\n+\n+\n+  it(`The embedding web app adds back the removed discussion, 222`, async () => {\n+    await maria_brB.execute(function() {\n+      window['talkyardAddCommentsIframe']({\n+            appendInside: '#comment_iframes', discussionId: '222' });\n+    });\n+  });\n+  it(`The comments are theree again`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame({ discId: '222' });\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr, mariasReply1_disc222);\n+    await maria_brB.topic.waitForPostAssertTextMatches(\n+            c.FirstReplyNr + 1, mariasReply2_disc222);\n+    await maria_brB.topic.waitForNumReplies({ numNormal: 2 });\n+    await maria_brB.switchToTheParentFrame();\n+  });\n+\n+\n+  it(`... and the comments script has resized its arrays`, async () => {\n+    const numDiscussions = await maria_brB.execute(function() {\n+      return window['e2e_getNumEmbDiscs']();\n+    });\n+    assert.eq(numDiscussions, 3);\n+  });\n+  it(`... there're 2 + 3 iframes  ttt`, async () => {\n+    await waitForNumIframes(maria_brB, 2 + 3);  // session, editor, 3 discussions\n+  });\n+\n+});"
    },
    {
      "sha": "f17f94c22b725b31e0f482a483bd58ef8f642830",
      "filename": "tests/e2e-wdio7/specs/embcom.manyframes.manual.2br.e2e.ts",
      "status": "added",
      "additions": 109,
      "deletions": 0,
      "changes": 109,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.manyframes.manual.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.manyframes.manual.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/embcom.manyframes.manual.2br.e2e.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,109 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings from '../utils/settings';\n+import { dieIf } from '../utils/log-and-die';\n+import c from '../test-constants';\n+\n+\n+let everyonesBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+let stranger_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+const localHostname = 'comments-for-e2e-test-manyifr-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-manyifr.localhost:8080';\n+\n+const embPage404SlashSlug = '/many-embcom-iframes-404.html';\n+const embPage404FilePath = 'target' + embPage404SlashSlug;\n+\n+\n+describe(`embcom.many-comment-iframes-same-page.2br  TyTE2E50RMF24S`, () => {\n+\n+  it(`construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Many Comment Iframes\",\n+      members: undefined, // default = everyone\n+        // ['mons', 'modya', 'regina', 'corax', 'memah', 'maria', 'michael', 'mallory']\n+    });\n+\n+    builder.getSite().meta.localHostname = localHostname;\n+    builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+\n+\n+    everyonesBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+    stranger_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`import site`, async () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+  });\n+\n+\n+\n+  it(`Creates an embedding page`, async () => {\n+    const dir = 'target';\n+    fs.writeFileSync(embPage404FilePath, makeHtml('404', '#404'));\n+    //fs.writeFileSync(`${dir}/page-b-slug.html`, makeHtml('bbb', '#040'));\n+\n+    function makeHtml(pageName: string, bgColor: string): string {\n+      return utils.makeManyEmbeddedCommentsHtml({\n+              pageName, discussionIds: ['111', '222'], localHostname, bgColor});\n+    }\n+  });\n+\n+  it(\"Maria opens embedding page aaa\", async () => {\n+    await maria_brB.go2(embeddingOrigin + embPage404SlashSlug);\n+  });\n+\n+  it(\"... logs in\", async () => {\n+    await maria_brB.useCommentsIframe({ discussionId: '222' });\n+    await maria_brB.complex.loginIfNeededViaMetabar(maria);\n+  });\n+\n+});\n+\n+\n+// TESTS_MISSING\n+\n+\n+// uploadAnyFiles\n+\n+// Replying to:\n+// In reply to:\n+\n+// save draft in browser, frame 111, another in 222.\n+// delete draft,\n+// or post draft, in 111 — won't affect 222.\n+\n+\n+// forgetRemovedCommentIframes\n+// talkyardAddCommentsIframe(..)\n\\ No newline at end of file"
    },
    {
      "sha": "84e5be90bd543800f5262c36256447d02eb1bae3",
      "filename": "tests/e2e-wdio7/specs/embcom.reply-vote-report-bef-login.2br.e2e.ts",
      "status": "added",
      "additions": 189,
      "deletions": 0,
      "changes": 189,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.reply-vote-report-bef-login.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.reply-vote-report-bef-login.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/embcom.reply-vote-report-bef-login.2br.e2e.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,189 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings from '../utils/settings';\n+import { dieIf } from '../utils/log-and-die';\n+import c from '../test-constants';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+\n+const localHostname = 'comments-for-e2e-test-embdftpv-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-embdftpv.localhost:8080';\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+const owensComment = 'owensComment';\n+const mariasReply = 'mariasReply';\n+\n+\n+describe(`embcom.reply-vote-report-bef-login.2br  TyTEEMBCDOBEFAUN`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Emb Coms Vote Before Logged In E2e Test\",\n+      members: undefined, // default = everyone\n+        // ['mons', 'modya', 'regina', 'corax', 'memah', 'maria', 'michael', 'mallory']\n+    });\n+\n+    builder.getSite().meta.localHostname = localHostname;\n+    builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+    builder.getSite().settings.mayComposeBeforeSignup = true;\n+\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`There's embedding pages`, () => {\n+    const dir = 'target';\n+    fs.writeFileSync(`${dir}/page-a-slug.html`, makeHtml('aaa', '#500'));\n+    fs.writeFileSync(`${dir}/page-b-slug.html`, makeHtml('bbb', '#040'));\n+    function makeHtml(pageName: St, bgColor: St): St {\n+      return utils.makeEmbeddedCommentsHtml({\n+              pageName, discussionId: '', localHostname, bgColor});\n+    }\n+  });\n+\n+  it(`Owen goes to emb page a, without logging in`, async () => {\n+    await owen_brA.go2(embeddingOrigin + '/page-a-slug.html');\n+  });\n+\n+\n+  // ----- Post comment before logged in, & before embedded page lazy created\n+\n+  it(`Owen composes and submits a comment, but not yet logged in`, async () => {\n+    await owen_brA.switchToEmbeddedCommentsIrame();\n+    await owen_brA.topic.clickReplyToEmbeddingBlogPost();\n+    await owen_brA.switchToEmbeddedEditorIrame();\n+    await owen_brA.editor.editText(owensComment, { timeoutMs: 3000 });\n+    await owen_brA.editor.save();\n+  });\n+  it(`... he needs to login  TyTRELZYAUN`, async () => {\n+    await owen_brA.loginDialog.loginWithPasswordInPopup(owen);\n+  });\n+\n+\n+  // ----- Flag comment before logged in\n+\n+  it(`Maria sees Owen's comment, when not logged in herself`, async () => {\n+    await maria_brB.go2(embeddingOrigin + '/page-a-slug.html');\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+    await maria_brB.topic.waitForPostAssertTextMatches(c.FirstReplyNr, owensComment);\n+  });\n+\n+  it(`... she starts reporting Owen's comment`, async () => {\n+    await maria_brB.topic.clickFlagPost(c.FirstReplyNr, { needToClickMore: false });\n+  });\n+  it(`... needs to login`, async () => {\n+    await maria_brB.loginDialog.loginWithPasswordInPopup(maria);\n+  });\n+  it(`... back in the comments iframe`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+  });\n+  it(`... can now flag the comment as Inappropriate`, async () => {\n+    await maria_brB.flagDialog.waitUntilFadedIn();\n+    await maria_brB.flagDialog.clickInappropriate();\n+  });\n+  it(`... submit`, async () => {\n+    await maria_brB.flagDialog.submit();\n+  });\n+  it(`... close \"the staff will take a look\" dialog`, async () => {\n+    await maria_brB.stupidDialog.close();\n+  });\n+  it(`(Add test?: Owen gets an email)`, async () => {\n+  });\n+\n+\n+  // ----- Like vote before logged in\n+\n+  it(`Maria leaves`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+    await maria_brB.metabar.clickLogout();\n+  });\n+  it(`Maria clicks Like — a sudden change of mind. She needs to log in`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+    await maria_brB.topic.clickLikeVote(c.FirstReplyNr);\n+  });\n+  it(`... needs to log in in popup`, async () => {\n+    await maria_brB.loginDialog.loginWithPasswordInPopup(maria);\n+  });\n+  it(`... now the post is Like voted by Maria`, async () => {\n+    await maria_brB.switchToEmbCommentsIframeIfNeeded();\n+    await maria_brB.topic.waitForLikeVote(c.FirstReplyNr);\n+    assert.ok(await maria_brB.topic.isPostLikedByMe(c.FirstReplyNr));\n+  });\n+\n+\n+  // ----- Post comment before logged in  (after emb page created)\n+\n+  it(`Maria leaves again`, async () => {\n+    await maria_brB.metabar.clickLogout();\n+  });\n+  it(`But returns and replies to Owen`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+    await maria_brB.complex.startReplyingToPostNr(c.FirstReplyNr, mariasReply);\n+  });\n+  it(`... when she clicks Submit`, async () => {\n+    await maria_brB.editor.save();\n+  });\n+  it(`... she needs to login again  TyTRELZYAUN`, async () => {\n+    await maria_brB.loginDialog.loginWithPasswordInPopup(maria);\n+  });\n+  it(`... thereafter her reply to Owen appears`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+    await maria_brB.topic.waitForPostAssertTextMatches(c.FirstReplyNr + 1, mariasReply);\n+  });\n+\n+\n+  // ----- Disagree vote before logged in\n+\n+  // (Only Disagree — Bury and Unwant are hidden before logged in.)\n+\n+  it(`Maria leaves`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+    await maria_brB.metabar.clickLogout();\n+  });\n+  it(`Maria clicks Disagree`, async () => {\n+    await maria_brB.switchToEmbeddedCommentsIrame();\n+    await maria_brB.topic.toggleDisagreeVote(c.FirstReplyNr, { waitForModalGone: false });\n+  });\n+  it(`... needs to log in in popup`, async () => {\n+    await maria_brB.loginDialog.loginWithPasswordInPopup(maria);\n+  });\n+  it(`... now the post is Disagreed with by Maria`, async () => {\n+    await maria_brB.switchToEmbCommentsIframeIfNeeded();\n+    assert.ok(await maria_brB.topic.isPostDisagreVoted(c.FirstReplyNr));\n+  });\n+\n+});\n+"
    },
    {
      "sha": "0757d17d4e64ea35b7383c7eceb6a6fddd34a540",
      "filename": "tests/e2e-wdio7/specs/embcom.vote-bef-page-exists.1br.e2e.ts",
      "status": "added",
      "additions": 88,
      "deletions": 0,
      "changes": 88,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.vote-bef-page-exists.1br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/embcom.vote-bef-page-exists.1br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/embcom.vote-bef-page-exists.1br.e2e.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,88 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import * as make from '../utils/make';\n+import { TyE2eTestBrowser } from '../utils/pages-for';\n+import settings from '../utils/settings';\n+\n+let brA;\n+let michael;\n+let michal_brA: TyE2eTestBrowser;\n+\n+let idAddress: IdAddress;\n+\n+const michaelsComment = 'michaelsComment';\n+\n+const localHostname = 'comments-for-e2e-test-embvote1st-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-embvote1st.localhost:8080';\n+const pageSlug = 'emb-cmts-edit-and-vote.html';\n+const pageUrl = embeddingOrigin + '/' + pageSlug;\n+const pageName = \"The Page Name\";\n+const bgColor = \"#550\";\n+\n+\n+describe(`embcom.vote-bef-page-exists.1br  TyT2AKBS056`, () => {\n+\n+  it(\"initialize people\", async () => {\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    michal_brA = brA;\n+    michael = make.memberMichael();\n+  });\n+\n+  it(\"import a site\", async () => {\n+    const site: SiteData = make.forumOwnedByOwen('embvote1st', {\n+            title: \"Emb Cmts Vote First Test\" });\n+    site.meta.localHostname = localHostname;\n+    site.settings.allowEmbeddingFrom = embeddingOrigin;\n+    site.settings.requireVerifiedEmail = false;\n+    site.settings.mayPostBeforeEmailVerified = true;\n+    site.members.push(michael);\n+    idAddress = server.importSiteData(site);\n+  });\n+\n+  it(\"create embedding page\", async () => {\n+    const html = utils.makeEmbeddedCommentsHtml({\n+            pageName, discussionId: '', localHostname, bgColor });\n+    fs.writeFileSync(`target/${pageSlug}`, html);\n+  });\n+\n+  it(\"Michael opens the embedding page\", async () => {\n+    await michal_brA.go2(pageUrl);\n+    await michal_brA.switchToEmbeddedCommentsIrame();\n+    await michal_brA.disableRateLimits();\n+  });\n+\n+  it(\"... logs in\", async () => {\n+    await michal_brA.complex.loginWithPasswordViaMetabar(michael);\n+  });\n+\n+\n+  // ----- Like vote before page exists\n+\n+  it(\"... clicks Like, the very first thing, before page created\", async () => {\n+    // This previously resulted in a \"Page not found, id: `0'\" error, because the page had\n+    // not yet been created.\n+    await michal_brA.switchToEmbeddedCommentsIrame();\n+    await michal_brA.topic.clickLikeVoteForBlogPost();\n+  });\n+\n+  it(\"Michael replies, too\", async () => {\n+    await michal_brA.complex.replyToEmbeddingBlogPost(michaelsComment);\n+  });\n+\n+  it(\"After page reload, the reply is still there\", async () => {\n+    await michal_brA.refresh2();\n+    await michal_brA.switchToEmbeddedCommentsIrame();\n+    await michal_brA.topic.waitForPostNrVisible(2);\n+    await michal_brA.topic.assertPostTextMatches(2, michaelsComment);\n+  });\n+\n+  it(\"... and the like vote is there too\", async () => {\n+    await michal_brA.assertDisplayed('.dw-a-like.icon-heart.dw-my-vote');\n+  });\n+\n+\n+});\n+"
    },
    {
      "sha": "7d75ee7b6f4a5ed8ab35ac56aaf7a0174a42f7ba",
      "filename": "tests/e2e-wdio7/specs/example.e2e.ts",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/example.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/specs/example.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/example.e2e.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,29 @@\n+import LoginPage from  '../pageobjects/login.page';\n+import SecurePage from '../pageobjects/secure.page';\n+import tyAssert from '../utils/ty-assert';\n+import * as make from '../utils/make';\n+import { dj } from '../utils/log-and-die';\n+\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+\n+describe('My Login application', () => {\n+    it('should enjoy adding numbers', async () => {\n+        const maja = make.memberMaja();\n+        dj(\"maja: \", maja);\n+\n+        tyAssert.not(4 + 1 === 77788);\n+        tyAssert.includes(\"a small cat\", \"kitten\")\n+        await 1 + 3;\n+    });\n+\n+    it('should login with valid credentials', async () => {\n+        await LoginPage.open();\n+\n+        await LoginPage.login('tomsmith', 'SuperSecretPassword!');\n+        await expect(SecurePage.flashAlert).toBeExisting();\n+        await expect(SecurePage.flashAlert).toHaveTextContaining(\n+            'You logged into a secure area!');\n+    });\n+});\n+\n+"
    },
    {
      "sha": "c16f93e6a1dd8f41d426c76827866a92c8a431d0",
      "filename": "tests/e2e-wdio7/test-constants.ts",
      "status": "added",
      "additions": 156,
      "deletions": 0,
      "changes": 156,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/test-constants.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/test-constants.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/test-constants.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,156 @@\n+\n+\n+// Need to include here, for now, ? because client/app/ doesn't use any modules system,\n+// doesn't export any constants ?\n+// Name it 'TestPageRole' so name won't clash with enum 'PageRole' :-(\n+const TestPageRole = {  // dupl in client/app/constants.ts [5F8KW0P2]\n+  CustomHtmlPage: <PageRole> 1,\n+  WebPage: <PageRole> 2,  // rename to Info?\n+  Code: <PageRole> 3,\n+  SpecialContent: <PageRole> 4,\n+  EmbeddedComments: <PageRole> 5,\n+  Blog: <PageRole> 6,\n+  Forum: <PageRole> 7,\n+  About: <PageRole> 9,\n+  Question: <PageRole> 10,\n+  Problem: <PageRole> 14,\n+  Idea: <PageRole> 15,\n+  ToDo: <PageRole> 13,  // remove? [4YK0F24]\n+  MindMap: <PageRole> 11,\n+  Discussion: <PageRole> 12,\n+  FormalMessage: <PageRole> 17,\n+  OpenChat: <PageRole> 18,\n+  PrivateChat: <PageRole> 19,\n+    // DirectMessage: 20,\n+  Form: <PageRole> 20,  // try to remove?\n+  Critique: <PageRole> 16, // [plugin] CLEAN_UP REMOVE\n+};\n+\n+const TestTrustLevel = {\n+  New: <TrustLevel> 1,\n+  Basic: <TrustLevel> 2,\n+  FullMember: <TrustLevel> 3,\n+  Trusted: <TrustLevel> 4,\n+  Regular: <TrustLevel> 5,\n+  CoreMember: <TrustLevel> 6,\n+};\n+\n+const TestDraftStatus = {  // sync with real code [5ABXG20]\n+  NothingHappened: 1,\n+  EditsUndone: 2,\n+  Saved: 3,\n+  SavedInBrowser: 31,\n+  Deleted: 4,\n+  NeedNotSave: 4,\n+  ShouldSave: 5,\n+  SavingSmall: 6,\n+  SavingBig: 7,\n+  Deleting: 8,\n+  CannotSave: 10,\n+};\n+\n+const TestPostType = {  // sync with real code [26BKA01]\n+  Normal: 1,\n+  Flat: 2,\n+  ChatMessage: 3,\n+  BottomComment: 4,\n+  StaffWiki: 11,\n+  CommunityWiki: 12,\n+  CompletedForm: 21,\n+  MetaMessage: 31,\n+};\n+\n+const TestPageNotfLevel = {\n+  EveryPostAllEdits: 9,\n+  EveryPost: 8,\n+  TopicProgress: 7,\n+  TopicSolved: 6,\n+  NewTopics: 5,\n+  Tracking: 4,\n+  Normal: 3,\n+  Hushed: 2,\n+  Muted: 1,\n+};\n+\n+\n+export default {\n+  MinUnixMillis: 100000000000,  // [MINMILLIS]\n+  LowestTempImpId: 2 * 1000 * 1000 * 1000 + 1, //2000000001,\n+  JanOne2020HalfPastFive: 1577900000 * 1000,  // 2020-01-01T17:33:20 can use in tests\n+  TestPageRole,\n+  TestPageNotfLevel,\n+  TestPostType,\n+  TestTrustLevel,\n+  TestDraftStatus,\n+  MaxUsernameLength: 20,  // sync with Scala [6AKBR20Q]\n+  TitleNr: 0,\n+  MaxTitleLength: 200,    // sync with Scala\n+  BodyNr: 1,\n+  FirstReplyNr: 2,  // [5FKF0F2]\n+  UnknownUserId: -3,\n+  NoUserId: 0,\n+  SystemUserId: 1,\n+  SysbotUserId: 2,\n+  EveryoneFullName: 'Everyone',\n+  EveryoneId: 10,\n+  AllMembersId: 11,\n+  AllMembersUsername: 'all_members',\n+  BasicMembersId: 12,\n+  FullMembersId: 13,\n+  FullMembersFullName: 'Full Members',\n+  TrustedMembersId: 14,\n+  TrustedMembersFullName: 'Trusted Members',\n+  RegularMembersId: 15,\n+  //RegularMembersFullName: 'Regular Members', — or is it 'Trusted Regulars'?\n+  CoreMembersId: 16,\n+  StaffId: 17,\n+  ModeratorsId: 18,\n+  AdminsId: 19,\n+  DefaultDefaultCategoryId: 3,\n+  ReviewDecisionUndoTimoutSeconds: 12, // sync with Scala and React component [2PUKQB0]\n+  JanitorThreadIntervalMs: 250,  // [2YPBJ6L]\n+  MagicTimeoutPollMs: 500,  // [4GKB93RA]\n+\n+  // Including this in the hostname, tells the server to add a 3 seconds fake latency.\n+  Slow3gHostnamePart: 'slow-3g',\n+\n+  SsoTestPath: '/-/sso-test',\n+  UsersUrlPrefix: '/-/users/',\n+  GroupsUrlPrefix: '/-/groups/',\n+  WatchbarHomeLinkTitle: 'Home',\n+  // ' --viagra-test-123--' makes Akismet always claim the post is spam.\n+  AlwaysSpamText: '--viagra-test-123--',\n+  AlwaysSpamEmailAddr: 'akismet-guaranteed-spam@example.com',\n+  SafeBrowsingMalwareLink: 'http://malware.testing.google.test/testing/malware/*',\n+\n+  EmbCommentsJsonExport: 'target/emb-comments-site-dump.json',\n+  EmbCommentsJsonExportCopy: 'target/emb-comments-site-dump.COPY.json',\n+  EmbCommentsJsonExportCopyFileName: 'emb-comments-site-dump.COPY.json',\n+\n+  // Nice to easily find xss related tests?\n+  ScriptTagName: 'script',\n+  javascript: 'javascript',\n+\n+  FirstPageId: '1',\n+  SecondPageId: '2',\n+\n+  SortOrderBestFirst: 1,\n+  SortOrderOldestFirst: 3,\n+\n+  serverErrorCodes: {\n+    notAuthenticated: 'TyE0AUTHN_',\n+    accountSuspended: 'TyESUSPENDED_',\n+    accountSuspended2: 'TyEUSRSSPNDD_',\n+    notFound: 'TyE404_',\n+    mayNotSee: 'TyEM0SEE_',\n+    mayNotReplyBecauseMayNotSee: '-TyEM0RE0SEE_-TyMMBYSEE_',\n+    mayNotJoinChatBecauseMayNotSee: '-TyEM0SEEPG_-TyEM0SEE_-TyMMBYSEE_',\n+  },\n+\n+\n+  FiftyPrimes: [\n+    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n+    71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149,\n+    151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229],\n+};\n+"
    },
    {
      "sha": "a0032b667e3e3fc9cfb5371aa1e2c69897212783",
      "filename": "tests/e2e-wdio7/test-types.ts",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/test-types.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/test-types.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/test-types.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,49 @@\n+/// <reference path=\"./test-types2.ts\" />\n+/// <reference path=\"./pub-api.ts\" />\n+\n+\n+declare global {\n+\n+  // Unique hostname for the current test run, so sites won't overwrite each other.\n+  const __thisSpecLocalHostname: string | undefined;\n+  function getCidOrDie(): string;\n+\n+\n+\n+  // ----- WebdriverIO\n+\n+  // It's unclear if 'browser' refers to an instance of TyE2eTestBrowser\n+  // or WebdriverIO.BrowserObject, so let's avoid that name.\n+  const allWdioBrowsers: WebdriverIOAsync.MultiRemoteBrowser; // ... started\n+  const oneWdioBrowser: WebdriverIOAsync.MultiRemoteBrowser;\n+  const wdioBrowserA: WebdriverIOAsync.MultiRemoteBrowser;\n+  const wdioBrowserB: WebdriverIOAsync.MultiRemoteBrowser | U;\n+  const wdioBrowserC: WebdriverIOAsync.MultiRemoteBrowser | U;\n+\n+  type Sel = St // selector\n+  type SelOrEl = St | WebdriverIO.Element;\n+\n+}\n+\n+\n+export const enum IsWhere {\n+  Forum = 1,\n+  LoginPopup = 2,\n+\n+  EmbFirst = 3,\n+  EmbeddingPage = 3,\n+  EmbCommentsIframe = 4,\n+  EmbEditorIframe = 5,\n+  EmbLast = 5,\n+\n+  // E.g. a blog post index page, with <a href=...> to blog posts with emb comments.\n+  EmbeddedPagesListPage = 6,\n+\n+  // If switching to e.g. a link preview embedded iframe.\n+  UnknownIframe = 9,\n+\n+  // Another server, e.g. Google's OAuth login page. But not an\n+  // embedding blog post page.\n+  External = 10,\n+}\n+"
    },
    {
      "sha": "fea39695d6522155806aa50ed66228bb0c9f4d61",
      "filename": "tests/e2e-wdio7/test-types2.ts",
      "status": "added",
      "additions": 793,
      "deletions": 0,
      "changes": 793,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/test-types2.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/test-types2.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/test-types2.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,793 @@\n+/// <reference path=\"../../client/app-slim/constants.ts\" />\n+/// <reference path=\"../../client/types-and-const-enums.ts\" />\n+\n+\n+type BoolOrFn = boolean | (() => boolean);\n+type StringOrFn = string | (() => string);\n+\n+\n+interface TestSettings {\n+  debug: boolean;\n+  noDebug?: true;\n+  slow?: true;\n+  sloow?: true;\n+  slooow?: true;\n+  sloooow?: true;\n+  slooooow?: true;\n+  sloooooow?: true;\n+  slooooooow?: true;\n+  sloooooooow?: true;\n+  headless?: boolean;\n+  numBrowsers: number;\n+  specFileRetries?: Nr;\n+  staticServer8080?: boolean;\n+  staticServerGatsbyNew8000?: boolean;\n+  staticServerGatsbyOld8000?: boolean;\n+  useChromedriver?: boolean;\n+  useSelenium?: boolean;\n+  useDevtoolsProtocol?: boolean;\n+  parallel?: number;\n+  prod: boolean;\n+  https: Bo;  // alias for 'secure'; toggles 'secure' on\n+  secure: Bo;\n+  host: string;\n+  scheme: string;\n+  proto2Slash: St;\n+  block3rdPartyCookies?: boolean;\n+  reuseOldSite?: boolean;\n+  deleteOldSite: boolean;\n+  randomLocalHostname?: boolean;\n+  localHostname?: string; // must start with 'e2e-test-' (see settings.ts)\n+  testLocalHostnamePrefix: string;\n+  testEmailAddressPrefix: string;\n+  e2eTestPassword: string;\n+  forbiddenPassword: string;\n+  mainSiteOrigin: string;\n+  newSiteDomain: string;\n+  bail?: number;\n+  waitforTimeout: number;\n+  noTimeout?: boolean;\n+  // Should be: WebDriver.WebDriverLogTypes; — but missing in to-talkyard/.\n+  logLevel: 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'silent';\n+  debugEachStep: boolean;\n+  debugBefore: boolean;\n+  debugAfterwards: boolean;\n+  debugIfError: boolean;\n+  include3rdPartyDependentTests?: boolean;\n+  // To test only one. E.g. 'google' (OAuth2) or 'reddit' (oEmbed link previews).\n+  only3rdParty?: string;\n+  grep: string;\n+  only: string;\n+  isInProjBaseDir?: boolean;\n+  browserName: 'firefox' | 'chrome'; // won't work: Chromium, chromium\n+\n+\n+  // azureTalkyardLocalHostname?: St; — skip, instead, must be 'e2e-test-azure-oidc'\n+  azureOauAuthorizationUrl?: St;\n+  azureOauAccessTokenUrl?: St;\n+  azureOidcClientId?: St;\n+  azureOidcClientSecret?: St;\n+  azureOidcLogoutUrl?: St;\n+  azureEmailVerifiedDomains?: St;\n+\n+  azureUser01UsernameAndEmail?: St;\n+  azureUser01Password?: St;\n+  azureUser01FullName?: St;\n+\n+  azureUser02UsernameAndEmailDashDot?: St;\n+  azureUser02Password?: St;\n+  azureUser02FullName?: St;\n+\n+  azureUser03UsernameAndEmail?: St;\n+  azureUser03Password?: St;\n+\n+  azureUser04Username?: St;\n+  azureUser04Password?: St;\n+  azureUser04Email?: St;\n+\n+  azureUser06Username?: St;\n+  azureUser06Password?: St;\n+  azureUser06Email?: St;\n+\n+  azureUser11Username?: St;\n+  azureUser11Password?: St;\n+  azureUser11EmailWrongDomain?: St;\n+  azureUser11FullName?: St;\n+\n+  azureUser12Username?: St;\n+  azureUser12Password?: St;\n+  azureUser12EmailWrongDomain?: St;\n+\n+  azureUser13Username?: St;\n+  azureUser13Password?: St;\n+  azureUser13EmailWrongDomain?: St;\n+  azureUser13FullName?: St;\n+\n+  azureUser14Username?: St;\n+  azureUser14Password?: St;\n+  azureUser14EmailWrongDomain?: St;\n+  azureUser14FullName?: St;\n+\n+\n+  gmailEmail?: string;\n+  gmailPassword?: string;\n+  githubUsernameMixedCase?: string;\n+  githubEmailMixedCase?: string;\n+  githubPassword?: string;\n+  facebookAdminPassword?: string;\n+  facebookAdminEmail?: string;\n+  facebookUserPassword?: string;\n+  facebookUserEmail?: string;\n+  linkedinPassword?: string;\n+  linkedinEmail?: string;\n+}\n+\n+\n+interface TestCounters {\n+  numReportedSpamFalsePositives: number;\n+  numReportedSpamFalseNegatives: number;\n+}\n+\n+\n+\n+const enum SiteType {\n+  Forum = 1,\n+  EmbeddedCommments = 2,\n+}\n+\n+\n+interface NewSiteResult {\n+  data: NewSiteData;\n+  testId: string;\n+  siteId: number;\n+  talkyardSiteOrigin: string;\n+}\n+\n+\n+type NewSiteData = NewSiteDataForForum | NewSiteDataForEmbeddedComments;\n+\n+interface NewSiteDataSharedFields {\n+  testId: string;\n+  siteType: SiteType;\n+  localHostname?: string;\n+  orgName?: string;\n+  origin?: string;\n+  embeddingUrl?: string;\n+\n+  newSiteOwner: NewSiteOwnerType;\n+  alreadyLoggedInAtIdProvider?: boolean;\n+\n+  fullName: string;\n+  email: string;\n+  username: string;\n+  password: string;\n+}\n+\n+\n+interface NewSiteDataForForum extends NewSiteDataSharedFields {\n+  siteType: SiteType.Forum;\n+  embeddingUrl?: undefined;\n+}\n+\n+\n+interface NewSiteDataForEmbeddedComments extends NewSiteDataSharedFields {\n+  siteType: SiteType.EmbeddedCommments;\n+  embeddingUrl: string;\n+}\n+\n+\n+const enum NewSiteOwnerType {\n+  OwenOwner = 1,\n+  GmailAccount = 2,\n+  FacebookAccount = 3,\n+  GitHubAccount = 4,\n+  LinkedInAccount = 5,\n+}\n+\n+\n+\n+interface SiteData2 {   // [3SD5PB7]\n+  meta: SiteMeta;\n+  settings: TestSiteSettings;\n+  apiSecrets: TestApiSecret[];\n+  guests: TestGuest[];\n+  groups: GroupInclDetails[];\n+  groupPps: any[];\n+  members: Member[];\n+  ppStats: any[];\n+  ppVisitStats: any[];\n+  usernameUsages: any[];\n+  identities: any[];\n+  invites: any[];\n+  memberEmailAddresses: any[];\n+  blocks: any;\n+  categories: TestCategory[];\n+  pagePopularityScores: any[];\n+  pageNotfPrefs: any[];\n+  pageParticipants: any[];\n+  pages: Page[];\n+  pagePaths: PagePathWithId[];\n+  pageIdsByAltIds: { [lookupId: string]: string };\n+  permsOnPages: any[]; // PermsOnPage[];\n+  drafts: any[];\n+  posts: TestPost[];\n+  postActions: any[];\n+  emailsOut: any;\n+  notifications: any[];\n+  //uploads: any[];\n+  //auditLog: any[];\n+  reviewTasks: any[];\n+  isTestSiteOkDelete?: boolean;\n+  isTestSiteIndexAnyway?: boolean;\n+}\n+\n+\n+interface TestSiteSettings {\n+  companyFullName: string;\n+  allowEmbeddingFrom?: string;\n+  // inviteOnly?: boolean;\n+  allowSignup?: boolean;\n+  // allowLocalSignup?: boolean;\n+  allowGuestLogin?: boolean;\n+  userMustBeAuthenticated?: boolean;  // = loginRequired\n+  requireVerifiedEmail?: boolean;\n+  emailDomainBlacklist?: string;\n+  emailDomainWhitelist?: string;\n+  mayComposeBeforeSignup?: boolean;\n+  mayPostBeforeEmailVerified?: boolean;\n+  requireApprovalIfTrustLte?: TrustLevel;  // RENAME to apprBeforeIfTrustLte  ?\n+  reviewAfterIfTrustLte?: TrustLevel;\n+  numFirstPostsToReview?: number;\n+  numFirstPostsToApprove?: number;\n+  maxPostsPendApprBefore?: number;\n+  maxPostsPendRevwAftr?: number;\n+  numFlagsToHidePost?: number;\n+  numFlagsToBlockNewUser?: number;\n+  numFlaggersToBlockNewUser?: number;\n+  enableApi?: boolean;\n+  ssoUrl?: string;\n+  enableSso?: boolean;\n+\n+  discussionLayout?: Nr;\n+  discPostNesting?: Nr;\n+  discPostSortOrder?: Nr;\n+  progressLayout?: Nr;\n+  origPostReplyBtnTitle?: St;\n+  origPostVotes?: Nr;\n+  embComNesting?: Nr;\n+  embComSortOrder?: Nr;\n+}\n+\n+\n+interface TestApiSecret {\n+  nr: ApiSecretNr;\n+  userId?: UserId;\n+  createdAt: WhenMs;\n+  deletedAt?: WhenMs;\n+  isDeleted: boolean;\n+  secretKey: string;\n+}\n+\n+\n+interface TestApiSecret {\n+  nr: ApiSecretNr;\n+  userId?: UserId;\n+  createdAt: WhenMs;\n+  deletedAt?: WhenMs;\n+  isDeleted: boolean;\n+  secretKey: string;\n+}\n+\n+\n+interface GroupInclDetails {\n+  id: UserId;\n+  createdAtMs: WhenMs;\n+  isGroup: true;\n+  username: string;\n+  fullName?: string;\n+  summaryEmailIntervalMins?: number;\n+  summaryEmailIfActive?: boolean;\n+}\n+\n+\n+interface SiteMeta {\n+  id?: string;\n+  pubId: string;\n+  name: string;\n+  localHostname: string;\n+  creatorEmailAddress: string;\n+  status: SiteStatus;\n+  createdAtMs: number;\n+}\n+\n+\n+interface TestMyself {\n+  isLoggedIn?: Bo;\n+  id?;\n+  username?: St;\n+  fullName?: St;\n+}\n+\n+interface Member {   // see also TestGuest below\n+  id: number;\n+  ssoId?: St;\n+  username: string;\n+  fullName?: string;\n+  createdAtMs: number;\n+  emailAddress?: string;\n+  emailVerifiedAtMs?: number;\n+  emailNotfPrefs?: EmailNotfPrefs;\n+  passwordHash?: string;\n+  password?: string;\n+  bio?: string;\n+  websiteUrl?: string;\n+  location?: string;\n+  isOwner?: boolean;\n+  isAdmin?: boolean;\n+  isModerator?: boolean;\n+  trustLevel?: TrustLevel;\n+  threatLevel?: ThreatLevel;\n+}\n+\n+type WellKnownMemberUsername =\n+      'owen' | 'adam' | 'alice' | 'mons' | 'modya' | 'corax' |\n+      'regina' | 'trillian' | 'memah' | 'maria' | 'maja' | 'michael' |\n+      'mallory'  ;\n+\n+interface NameAndPassword {\n+  username: string;\n+  password?: string;\n+}\n+\n+interface UserWithPassword extends Member {\n+  password: string;\n+}\n+\n+interface MemberToCreate extends Member {\n+  email?: string;\n+  shallBecomeOwner?: true;\n+  willNeedToVerifyEmail?: true;\n+}\n+\n+interface TestGuest {  // try to rename to Guest?  See also  Member  above\n+  id: UserId;\n+  extId?: ExtId;\n+  fullName: string;\n+  emailAddress?: string;\n+  // emailNotfPrefs = EmailNotfPrefs.Unspecified\n+  createdAtMs: WhenMs;\n+  isGuest?: true;\n+  guestBrowserId?: string;\n+  bio?: string;\n+  websiteUrl?: string;\n+  location?: string;\n+  lockedThreatLevel?: ThreatLevel;\n+}\n+\n+\n+interface TestCategory {  // try to merge with Category in model.ts?\n+  id: number;\n+  extId?: string;\n+  sectionPageId: string;\n+  parentId?: number;\n+  defaultCategoryId?: number;\n+  name: string;\n+  slug: string;\n+  position?: number;\n+  description?: string;\n+  newTopicTypes?: number[]; // currently ignored, server side [962MRYPG]\n+  defaultTopicType: number;\n+  createdAtMs: number;\n+  updatedAtMs: number;\n+  lockedAtMs?: number;\n+  frozenAtMs?: number;\n+  deletedAtMs?: number;\n+  unlistCategory?: boolean;\n+  unlistTopics?: boolean;\n+}\n+\n+interface SimpleCategory extends TestCategory {\n+  urlPaths: {\n+    activeTopics: string;\n+    topTopics: string;\n+    newTopics: string;\n+  };\n+}\n+\n+interface TestCategoryPatch {  // or Partial<TestCategory>?\n+  id: number;\n+  extId?: ExtId;\n+  //sectionPageId: string;\n+  parentId?: number;\n+  parentRef?: string;\n+  defaultCategoryId?: number;\n+  name: string;\n+  slug: string;\n+  position?: number;\n+  description?: string;\n+  defaultTopicType: number;\n+}\n+\n+\n+interface PageToMake {\n+  id: PageId;\n+  role: PageRole;\n+  categoryId?: CategoryId;\n+  authorId: UserId;\n+  createdAtMs?: WhenMs;\n+  updatedAtMs?: WhenMs;  // remove? use bumpedAtMs instead\n+  publishedAtMs?: WhenMs;\n+  bumpedAtMs?: WhenMs;\n+  numChildPages?: number;\n+  numRepliesVisible?: number;\n+  numRepliesToReview?: number;\n+  numRepliesTotal?: number;\n+  numLikes?: number;\n+  numWrongs?: number;\n+  numBuryVotes?: number;\n+  numUnwantedVotes?: number;\n+  numOpLikeVotes?: number;\n+  numOpWrongVotes?: number;\n+  numOpBuryVotes?: number;\n+  numOpUnwantedVotes?: number;\n+  numOpRepliesVisible?: number;\n+  version?: number;\n+}\n+\n+\n+interface CategoryJustAdded {\n+  id: number;\n+  extId?: ExtId;\n+  parentId: number;\n+  name: string;\n+  slug: string;\n+  unlistCategory?: boolean;\n+  unlistTopics?: boolean;\n+  deletedAtMs?: number;\n+  aboutPageText?: string;\n+  aboutPage?: PageJustAdded;\n+  defaultTopicType?: PageRole;\n+}\n+\n+\n+interface PageJustAdded {\n+  id: string;\n+  folder: string;\n+  showId: boolean;\n+  slug: string;\n+  role: number;\n+  title: string;\n+  body: string;\n+  categoryId: number;\n+  authorId: number;\n+  createdAtMs: number;\n+  updatedAtMs: number;\n+}\n+\n+\n+interface PageIdWhen {\n+  id: string;\n+  createdAtMs: number;\n+  updatedAtMs: number;\n+}\n+\n+\n+interface Page {\n+  id: string;\n+  role: PageRole;      // deprecated ...\n+  pageType: PageRole;  // ... changing to this instead\n+  categoryId?: number;\n+  embeddingPageUrl?: string;\n+  authorId: number;\n+  createdAtMs: number;\n+  updatedAtMs: number;\n+  publishedAtMs?: number;\n+  bumpedAtMs?: number;\n+  lastReplyAtMs?: number;\n+  numChildPages?: number;\n+  numRepliesVisible?: number;\n+  numRepliesToReview?: number;\n+  numRepliesTotal?: number;\n+  pinOrder?: number;\n+  pinWhere?: PinPageWhere;\n+  numLikes?: number;\n+  numWrongs?: number;\n+  numBuryVotes?: number;\n+  numUnwantedVotes?: number;\n+  numOpLikeVotes?: number;\n+  numOpWrongVotes?: number;\n+  numOpBuryVotes?: number;\n+  numOpUnwantedVotes?: number;\n+  numOpRepliesVisible?: number;\n+  answeredAtMs?: number;\n+  answerPostId?: number;\n+  doneAtMs?: number;\n+  closedAtMs?: number;\n+  lockedAtMs?: number;\n+  frozenAt?: number;\n+  deletedAtMs?: number;\n+  deletedById?: number;\n+  unwantedAt?: number;\n+  plannedAt?: number;\n+  version: number;\n+  lastReplyById?: number;\n+  frequentPoster1Id?: number;\n+  frequentPoster2Id?: number;\n+  frequentPoster3Id?: number;\n+  frequentPoster4Id?: number;\n+}\n+\n+\n+interface PagePathWithId {\n+  folder: string;\n+  pageId: string;\n+  showId: boolean;\n+  slug: string;\n+  canonical: boolean;\n+}\n+\n+\n+/*\n+interface NewTestPost {\n+  id?: number;\n+  // Not just page id, because needs author, creation date, etc.\n+  page: Page | PageJustAdded;\n+  authorId?: UserId; // if absent, will be the page author\n+  nr: number;\n+  parentNr?: number;\n+  approvedSource: string;\n+  approvedHtmlSanitized?: string;\n+}*/\n+\n+\n+interface TestPost {  // later: try to unify with Post?\n+  id: number;\n+  pageId: string;\n+  nr: number;\n+  parentNr?: number;\n+  multireply?: string;\n+  createdAtMs: number;\n+  createdById: number;\n+  currRevStartedAtMs: number;\n+  currRevLastEditedAtMs?: number;\n+  currRevById: number;\n+  lastApprovedEditAtMs?: number;\n+  lastApprovedEditById?: number;\n+  numDistinctEditors: number;\n+  numEditSuggestions: number;\n+  lastEditSuggestionAtMs?: number;\n+  safeRevNr?: number;\n+  approvedSource?: string;\n+  approvedHtmlSanitized?: string;\n+  approvedAtMs?: number;\n+  approvedById?: number;\n+  approvedRevNr?: number;\n+  currRevSourcePatch?: string;\n+  currRevNr: number;\n+  /*\n+  collapsedStatus         | smallint                    | not null\n+  collapsed_at             | timestamp without time zone |\n+  collapsed_by_id          | integer                     |\n+  closed_status            | smallint                    | not null\n+  closed_at                | timestamp without time zone |\n+  closed_by_id             | integer                     |\n+  hidden_at                | timestamp without time zone |\n+  hidden_by_id             | integer                     |\n+  hidden_reason            | character varying           |\n+  */\n+  deletedStatus: number;\n+  deletedAtMs?: number;\n+  deletedById?: number;\n+  /*\n+  pinned_position          | smallint                    |\n+  pinned_at                | timestamp without time zone |\n+  pinned_by_id             | integer                     |\n+  */\n+  numPendingFlags?: number;\n+  numHandledFlags?: number;\n+  numLikeVotes: number;\n+  numWrongVotes: number;\n+  numTimesRead: number;\n+  numBuryVotes: number;\n+  numUnwantedVotes: number;\n+  postType?: number;\n+  prevRevNr?: number;\n+}\n+\n+\n+interface NumReplies {\n+  numNormal: number;\n+  numPreviews: number;\n+  numDrafts: number;\n+  numUnapproved: number;\n+  numDeleted: number;\n+}\n+\n+\n+interface EditHistoryEntry {\n+  authorUsername?: string;\n+  authorFullName?: string;\n+  diffHtml: string;\n+}\n+\n+\n+interface IdAddress {\n+  id: SiteId;\n+  pubId: string;\n+  origin?: string;      // e.g. https://kittens-forum.example.com\n+  siteIdOrigin: string; // e.g. https://site-123.example.com\n+  cdnOriginOrEmpty: St; // e.g. https://test-cdn.example.com  or ''\n+  cdnOrSiteOrigin?: St; // e.g. https://test-cdn.example.com or https://kittens.ex.co\n+}\n+\n+\n+interface EmailSubjectBody {\n+  subject: string;\n+  bodyHtmlText: string;\n+}\n+\n+\n+interface EmptyTestForum {\n+  siteData: SiteData;\n+  forumPage: any;\n+  members: {\n+    owen?: Member;\n+    adam?: Member;\n+    alice?: Member;\n+    mons?: Member;\n+    modya?: Member;\n+    corax?: Member;\n+    regina?: Member;\n+    trillian?: Member;\n+    memah?: Member;\n+    maria?: Member;\n+    maja?: Member;\n+    michael?: Member;\n+    mallory?: Member;\n+    // If adding really many users.\n+    minions?: Member[];\n+  };\n+  guests: {\n+  };\n+  topics: {};\n+  categories: {\n+    rootCat: { id: Nr },\n+    rootCategory: { id: number },\n+    catA: CategoryJustAdded;\n+    categoryA: CategoryJustAdded;\n+  };\n+}\n+\n+\n+interface TwoCatsTestForum extends EmptyTestForum {\n+  topics: {\n+    aboutCategoryA: { title: string };\n+    aboutStaffCat: { title: St };\n+    aboutStaffOnlyCategory: { title: string };\n+  };\n+  categories: {\n+    rootCat: { id: Nr },\n+    rootCategory: { id: number },\n+    catA: CategoryJustAdded;\n+    categoryA: CategoryJustAdded;\n+    staffCat: CategoryJustAdded;\n+    staffOnlyCategory: CategoryJustAdded;\n+  };\n+}\n+\n+\n+interface CatABTestForum extends TwoCatsTestForum {\n+  topics: {\n+    aboutCategoryA: { title: string };\n+    aboutStaffCat: { title: St };\n+    aboutStaffOnlyCategory: { title: string };\n+  };\n+  categories: {\n+    rootCat: { id: Nr },\n+    rootCategory: { id: number },\n+    catA: CategoryJustAdded;\n+    categoryA: CategoryJustAdded;\n+    catB: CategoryJustAdded;\n+    staffCat: CategoryJustAdded;\n+    staffOnlyCategory: CategoryJustAdded;\n+  };\n+}\n+\n+\n+interface TwoPagesTestForum extends TwoCatsTestForum {\n+  topics: {\n+    byMariaCatA: PageJustAdded;\n+    byMariaCategoryA: PageJustAdded;\n+    byMichaelCatA: PageJustAdded;\n+    byMichaelCategoryA: PageJustAdded;\n+    aboutCatA: { title: string };\n+    aboutCategoryA: { title: string };\n+    aboutStaffCat: { title: string };\n+    aboutStaffOnlyCategory: { title: string };\n+  };\n+  categories: {\n+    rootCat: { id: Nr },\n+    rootCategory: { id: number },\n+    catA: CategoryJustAdded;\n+    categoryA: CategoryJustAdded;\n+    staffCat: CategoryJustAdded;\n+    staffOnlyCategory: CategoryJustAdded;\n+    specificCat: CategoryJustAdded;\n+    specificCategory: CategoryJustAdded;\n+  };\n+}\n+\n+\n+interface LargeTestForum extends EmptyTestForum {\n+  topics: {\n+    byMariaCategoryA: PageJustAdded;\n+    byMariaCategoryANr2: PageJustAdded;\n+    byMariaCategoryANr3: PageJustAdded;\n+    byMariaCategoryB: PageJustAdded;\n+    byMariaStaffOnlyCat: PageJustAdded;\n+    byMariaUnlistedCat: PageJustAdded;\n+    byMariaDeletedCat: PageJustAdded;\n+    byMichaelCategoryA: PageJustAdded;\n+    aboutCatA: { title: St };\n+    aboutCategoryA: { title: string };\n+    aboutCatB: { title: St };\n+    aboutCategoryB: { title: string };\n+    aboutUnlistedCat: { title: St };\n+    aboutUnlistedCategory: { title: string };\n+    aboutStaffCat: { title: St };\n+    aboutStaffOnlyCategory: { title: string };\n+    aboutDeletedCat: { title: St };\n+    aboutDeletedCategory: { title: string };\n+  };\n+  categories: {\n+    rootCat: { id: Nr },\n+    rootCategory: { id: number },\n+    catA: CategoryJustAdded;\n+    categoryA: CategoryJustAdded;\n+    catB: CategoryJustAdded;\n+    categoryB: CategoryJustAdded;\n+    staffCat: CategoryJustAdded;\n+    staffOnlyCategory: CategoryJustAdded;\n+    unlistedCat: CategoryJustAdded;\n+    unlistedCategory: CategoryJustAdded;\n+    deletedCat: CategoryJustAdded;\n+    deletedCategory: CategoryJustAdded;\n+  };\n+}\n+\n+\n+// QUICK RENAME to SingleSignOnUser?  Because ExternalUser is instead nowadays for upserting\n+// users via API — might possibly evolve a bit differently from the SSO api.\n+interface ExternalUser {   // sync with Scala [7KBA24Y]\n+  ssoId: string;\n+  extId?: string;\n+  //externalUserId: string; //  deprecated, 2019-08-18, earlier name for ssoId (not extId)\n+  primaryEmailAddress: string;\n+  isEmailAddressVerified: boolean;\n+  username?: string;\n+  fullName?: string;\n+  avatarUrl?: string;\n+  aboutUser?: string;\n+  isAdmin?: boolean;\n+  isModerator?: boolean;\n+}\n+\n+\n+interface LinkPreviewProvider {\n+  name: St;\n+  inSandboxedIframe: Bo;  // default true\n+  inDoubleIframe?: Bo;    // default false\n+  lnPvClassSuffix?: St;\n+}\n+\n+\n+interface EmailMatchResult {\n+  matchedEmail: EmailSubjectBody;\n+  matchingString?: string;\n+  matchingStrings: string[];\n+}\n+\n+\n+// Right now, constraints like >= 1 aren't supported in Typescript, but this works, and, in test\n+// cases, probably won't ever need larger numbers?\n+type IntAtLeastOne = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19;"
    },
    {
      "sha": "80764bea711f0c331fe20c82c32b52835c0ab8cd",
      "filename": "tests/e2e-wdio7/tsconfig.json",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/tsconfig.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/tsconfig.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/tsconfig.json?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,13 @@\n+{\n+    \"compilerOptions\": {\n+        \"target\": \"es2019\",\n+        \"types\": [\n+            \"node\",\n+            \"webdriverio/sync\",\n+            \"@wdio/mocha-framework\",\n+            \"expect-webdriverio\",\n+            \"@wdio/devtools-service\",\n+            \"@wdio/firefox-profile-service\"]\n+    }\n+}\n+"
    },
    {
      "sha": "80d681c9955e904d27a098edf1eb44d13a4d0501",
      "filename": "tests/e2e-wdio7/utils/ext-cors-site.html",
      "status": "added",
      "additions": 156,
      "deletions": 0,
      "changes": 156,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/ext-cors-site.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/ext-cors-site.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/ext-cors-site.html?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,156 @@\n+<html>\n+<head>\n+<title>External Scripts E2E page</title>\n+<style>\n+body { background: black; color: #d3d; }\n+h1 { font-size: 20px; font-family: monospace }\n+pre { background: #222; color: #3ee; }\n+</style>\n+<script>\n+\n+// Fetches, via a POST requests, stuff from another server. [CORSPOST]\n+// Shows what went wrong (if anything).\n+// This will only work, if that other server has been configured to allow\n+// CORS requests from the current server (current origin).\n+//\n+/* Usage ex:\n+\n+corsFetch({ url: 'http://e2e-test-cid-0-0-now-2522.localhost/-/v0/search',\n+      POST: {}, function(rsp) { console.log(JSON.stringify(rsp, 0, 2)) }});\n+\n+*/\n+function corsFetch(ps) {\n+  const onError = function(statusCode, statusText, ex) {\n+    const message = `Error: ${statusCode} ${statusText}`;\n+    console.error(message, ex)\n+    logToPageAndConsole(`${message}: ${ex}`);\n+  }\n+\n+  const method = ps.POST ? 'POST' : 'GET';\n+\n+  const options = {\n+    // Could specify 'same-origin', but then harder to troubleshoot, when such\n+    // requests look different.\n+    credentials: 'omit',\n+    method,\n+    keepalive: true,\n+    // This makes the response body readable for this in-browser Javascript code.\n+    mode: 'cors',\n+    referrer: 'no-referrer',\n+    // Don't follow redirects.\n+    redirect: 'error',\n+    headers: ps.headers || {},\n+  };\n+\n+  if (method === 'POST') {\n+    options.headers['Content-Type'] = 'application/json';\n+    options.body = JSON.stringify(ps.POST);\n+  }\n+\n+  fetch(ps.url, options).then(function(response) {\n+    // We got the response http headers. Get the body too, also if we got an error\n+    // status code — so we can show details from the response body about what\n+    // went wrong. Use text() not json() so we can print the response body if it's\n+    // a plain text error message, or corrupt json that caused a parse error.\n+    console.trace(`Got fetch() response headers: ${response.status\n+          } ${response.statusText} [TyMGOTHDRS]`);\n+\n+    response.text().then(function(text) {\n+      console.trace(`Got fetch() response text [TyMGOTTXT]: ` + text);\n+\n+      if (response.status !== 200) {\n+        console.error(`fetch() error response, status ${response.status\n+                } ${response.statusText} [TyEFETCHERR], response text:\\n${text}`);\n+        onError(response.status, response.statusText, text);\n+        return;\n+      }\n+\n+      let json;\n+      try { json = JSON.parse(text) }\n+      catch (ex) {\n+        console.error(`Error parsing JSON in fetch() 200 ${response.statusText\n+              } response [TyEFETCH0JSN]:\\n${text}`, ex);\n+        onError(200, response.statusText, \"Error parsing response json\");\n+        return;\n+      }\n+\n+      try { ps.onDone(json) }\n+      catch (ex) {\n+        console.error(`Error in fetch() 200  ${response.statusText\n+              } response handler [TyERSPHNDL]`, ex);\n+      }\n+    }).catch(function(error) {\n+      console.error(`Error getting fetch() response body [TyEFETCH0BDY]: `, error);\n+      onError(response.status, response.statusText, error);\n+    });\n+  }).catch(function(error) {\n+    console.error(`fetch() failed, no response [TyEFETCHFAIL]: `, error);\n+    onError(0, '', error);\n+  });\n+}\n+\n+\n+function logToPageAndConsole(textOrObj) {\n+  const text = ((typeof textOrObj) === 'object') ?\n+      JSON.stringify(textOrObj, undefined, 4) : textOrObj;\n+  console.log(text);\n+  const textnode = document.createTextNode(text);\n+  const preNode = document.createElement(\"pre\");\n+  preNode.append(textnode);\n+  const logElem = document.getElementById('e2e_log');\n+  logElem.append(preNode);\n+}\n+\n+</script>\n+</head>\n+\n+<body>\n+<h1>Cross-Origin Resource Sharing E2E test page</h1>\n+\n+<p>Here's Javascript, you can run in Dev Tools here on this page: However, this\n+might not show the response status text or response body — so can be hard\n+to know what went wrong. Using cURL can be simpler, see below.\n+</p>\n+\n+<pre>\n+corsFetch({\n+    url: 'http://  host  /-/v0/search',\n+    POST: { searchQuery: { freetext: 'search phrase' }},\n+    onDone: function(rsp) { logToPageAndConsole(rsp) }});\n+</pre>\n+\n+<p>\n+Or use <b>cURL</b>, in a Linux shell — here's a pre-flight request:\n+(this is what the browser does to find out if Cross-Origin is allowed)\n+</p>\n+\n+<pre>\n+talkyard_server=\"http://localhost\"\n+\n+curl -v -v -X OPTIONS -H \"Origin: http://localhost:8080\" \\\n+    -H \"Access-Control-Request-Method: GET\" \\\n+    \"$talkyard_server/-/v0/ping\"\n+\n+# Two \"real\" requests — try both with the right and the wrong Origin header:\n+\n+curl -v -v -X GET -H \"Origin: http://localhost:8080\" \\\n+    \"$talkyard_server/-/v0/ping\"\n+\n+curl -v -v -X POST -H \"Origin: http://localhost:8080\" \\\n+    -H 'Content-Type: application/json' \\\n+    --data '{ \"searchQuery\": { \"freetext\": \"search phrase\" }}' \\\n+    \"$talkyard_server/-/v0/search\"\n+\n+\n+# ? -H \"Access-Control-Request-Headers: X-Requested-With\" \\\n+</pre>\n+\n+<p>\n+You can convert cURL to fetch(), there's: https://kigiri.github.io/fetch/,\n+https://stackoverflow.com/questions/31039629/convert-curl-get-to-javascript-fetch\n+</p>\n+\n+<p>Log: (most recent first)</p>\n+<div id=\"e2e_log\" style=\"color: #ddd\"></div>\n+</body>\n+</html>"
    },
    {
      "sha": "c161de2e936350d68b85cae1813e0e0c6c0d76e6",
      "filename": "tests/e2e-wdio7/utils/log-and-die.ts",
      "status": "added",
      "additions": 132,
      "deletions": 0,
      "changes": 132,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/log-and-die.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/log-and-die.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/log-and-die.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,132 @@\n+/// <reference path=\"../test-types2.ts\" />\n+\n+import * as _ from 'lodash';\n+const ansiColors = require('ansi-colors');\n+\n+const normalColor = ansiColors.white;\n+const boringColor = ansiColors.gray;\n+const errorColor = ansiColors.bold.yellow.bgRed;\n+const exceptionColor = ansiColors.bold.yellow;\n+const warningColor = ansiColors.bold.red;\n+const debugColor = ansiColors.bold.yellow;\n+export const unusualColor = ansiColors.black.bgGreen;\n+const serverRequestColor = ansiColors.bold.cyan;\n+const serverResponseColor = ansiColors.bold.blue;\n+\n+\n+export function getOrCall<V>(valueOrFn: U | V | (() => V)): U | V {\n+  return _.isFunction(valueOrFn) ? valueOrFn() : valueOrFn;\n+}\n+\n+/// \"dj\" = Debug log Json\n+export function dj(message: string, json: any, indentation?: number) {\n+  logMessage(`${message} ${JSON.stringify(json, undefined, indentation)}`);\n+}\n+\n+export function logMessage(message: StringOrFn) {\n+  console.log(normalColor(message));\n+}\n+\n+export function logMessageIf(test: boolean, message: StringOrFn) {\n+  if (test) console.log(normalColor(message));\n+}\n+\n+export function logBoring(message: StringOrFn) {\n+  console.log(boringColor(getOrCall(message)));\n+}\n+\n+export function logDebugIf(test: Bo, msg: StringOrFn) {\n+  if (test) logDebug(msg);\n+}\n+\n+export function logDebug(message: StringOrFn) {\n+  // Compilation error, `arguments` is not a real array:\n+  // const args = [...arguments];\n+  const args = [];\n+  for (let i = 0; i < arguments.length; ++i) {\n+    args[i] = arguments[i];\n+  }\n+  args[0] = debugColor(getOrCall(message));\n+  console.log.apply(console, args);\n+}\n+\n+export function logUnusual(message: StringOrFn) {\n+  console.log(unusualColor(getOrCall(message)));\n+}\n+\n+export function logWarningIf(test: BoolOrFn, message: StringOrFn) {\n+  if (getOrCall(test)) logWarning(message);\n+}\n+\n+export function logWarning(message: StringOrFn) {\n+  console.warn(warningColor(getOrCall(message)));\n+}\n+\n+export function logException(message: any, ex?: any) {\n+  if (!ex) {\n+    ex = message;\n+    message = \"The exception:\";\n+  }\n+  if (message) console.log(getOrCall(message));\n+  const exceptionIndented = '   ' + ex.toString().replace(/\\n/g, \"\\n   \");\n+  console.log(exceptionColor(exceptionIndented));\n+  console.trace();\n+}\n+\n+export function logErrorIf(test: boolean, message: string, ex?: any) {\n+  if (test) {\n+    logError(message, ex);\n+  }\n+}\n+\n+export function logErrorNoTraceIf(test: Bo, message: St, ex?: Ay) {\n+  if (test) {\n+    logErrorNoTrace(message, ex);\n+  }\n+}\n+\n+export function logErrorNoTrace(message: string, ex?: any) {\n+  const m = errorColor(message);\n+  // Avoid printing 'undefined' if ex is undefined.\n+  if (_.isUndefined(ex)) console.error(m);\n+  else console.error(m, ex);\n+}\n+\n+export function logError(message: string, ex?: any) {\n+  logErrorNoTrace(message, ex);\n+  console.trace();\n+}\n+\n+export function logServerRequest(message: string) {\n+  console.log(serverRequestColor(message));\n+}\n+\n+export function logServerResponse(text: string, ps: { boring: boolean } = { boring: true }) {\n+  console.log(\n+    serverResponseColor(`The server says:\\n----\\n` + `${text.trim()}` + `\\n----`));\n+}\n+\n+export function printBoringToStdout(message: string) {\n+  process.stdout.write(boringColor(getOrCall(message)));\n+}\n+\n+export function die(message: string, details?: string): never {\n+  logError('\\n' + message + (details ? '\\n' + details : '') + '\\n');\n+  throw Error(message);\n+}\n+\n+export function dieIf(test: boolean, message: string, details?: string) {\n+  if (test) {\n+    die(message, details);\n+  }\n+}\n+\n+export function dieAndExitIf(test: boolean, message: string, details?: string) {\n+  if (test) {\n+    logErrorNoTrace(`\\n\\n${message}${details ? '\\n' + details : ''}\\n` +\n+        `Exiting process, error status 1. Bye.\\n`);\n+    console.trace();\n+    process.exit(1);\n+  }\n+}\n+"
    },
    {
      "sha": "0913a1e8a8dc919186d3dfef335436b9525dd34f",
      "filename": "tests/e2e-wdio7/utils/make.ts",
      "status": "added",
      "additions": 652,
      "deletions": 0,
      "changes": 652,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/make.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/make.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/make.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,652 @@\n+/// <reference path=\"../test-types2.ts\"/>\n+/// <reference path=\"../../../to-talkyard/src/to-talkyard.d.ts\" />\n+\n+import * as log from './log-and-die';\n+\n+import * as _ from 'lodash';\n+import c from '../test-constants';\n+import * as utils from './utils';\n+\n+\n+// This is 2015-12-04T03:13:44+00:00, hmm, why?\n+export const DefaultCreatedAtMs = 1449198824000;\n+\n+\n+let nextPostId = 101;\n+function getAndBumpNextPostId() {\n+  nextPostId += 1;\n+  return nextPostId - 1;\n+}\n+\n+\n+let nextUserId = 101;\n+function getAndBumpNextUserId() {\n+  nextUserId += 1;\n+  return nextUserId - 1;\n+}\n+\n+\n+function makeEmptySite(ps: { okInitEarly?: boolean } = {}): SiteData {\n+  log.dieAndExitIf(!(global as any).wdioBeforeHookHasRun && !ps.okInitEarly,\n+      \"Calling makeEmptySite() before the wdio.conf.ts before() hook has run — \" +\n+      \"that means this spec hasn't been inited properly yet; variables might be \" +\n+      \"`undefined` [TyE8503SKDS46]\");\n+\n+  // Don't call getLocalHostname() too early (outside this function), because\n+  // it accesses global.__thisSpecLocalHostname which would be undefined.\n+  const localHostname = utils.getLocalHostname();\n+\n+  return {\n+  meta: {\n+    id: undefined,\n+    name: localHostname + '-' + Date.now(),\n+    localHostname: localHostname,\n+    creatorEmailAddress: \"e2e-test--owner@example.com\",\n+    status: 2,\n+    createdAtMs: DefaultCreatedAtMs,\n+  },\n+  settings: {\n+    companyFullName: \"E2E Test Org\",\n+  },\n+  groups: [],\n+  members: [],\n+  identities: [],\n+  guests: [],\n+  permsOnPages: [],\n+  blocks: [],\n+  invites: [],\n+  categories: [],\n+  pages: [],\n+  pagePaths: [],\n+  posts: [],\n+  emailsOut: [],\n+  notifications: [],\n+  uploads: [],\n+  auditLog: [],\n+  reviewTasks: [],\n+}};\n+\n+\n+export function emptySiteOwnedByOwen(ps: { okInitEarly?: boolean } = {}): SiteData {\n+    const site = _.cloneDeep(makeEmptySite(ps));\n+    const owner = memberOwenOwner();\n+    site.members.push(owner);\n+    site.meta.creatorEmailAddress = owner.emailAddress;\n+    return site;\n+}\n+\n+\n+export function memberOwenOwner(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"owen_owner\",\n+      fullName: \"Owen Owner\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--owen-owner@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-ow020\",\n+      password: \"publ-ow020\",\n+      isOwner: true,\n+      isAdmin: true,\n+    };\n+}\n+\n+\n+export function memberAdminAdam(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"admin_adam\",\n+      fullName: \"Admin Adam\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--admin-adam@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-ad020\",\n+      password: \"publ-ad020\",\n+      isAdmin: true,\n+    };\n+}\n+\n+\n+export function memberAdminAlice(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"admin_alice\",\n+      fullName: \"Admin Alice\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--admin-alice@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-al020\",\n+      password: \"publ-al020\",\n+      isAdmin: true,\n+    };\n+}\n+\n+\n+export function memberModeratorModya(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"mod_modya\",\n+      fullName: \"Mod Modya\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--mod-modya@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-mo020\",\n+      password: \"publ-mo020\",\n+      isModerator: true,\n+    };\n+}\n+\n+\n+export function memberModeratorMons(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"mod_mons\",\n+      fullName: \"Mod Mons\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--mod-mons@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-mo020\",\n+      password: \"publ-mo020\",\n+      isModerator: true,\n+    };\n+}\n+\n+\n+export function memberMaja(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"maja\",\n+      fullName: \"Maja Gräddnos\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--maja@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-ma020\",\n+      password: \"publ-ma020\",\n+    };\n+}\n+\n+\n+export function memberMemah(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"memah\",\n+      fullName: \"Memah\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--memah@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:pub-mem020\",\n+      password: \"pub-mem020\",\n+    };\n+}\n+\n+\n+export function memberMaria(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"maria\",\n+      fullName: \"Maria\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--maria@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-ma020\",\n+      password: \"publ-ma020\",\n+    };\n+}\n+\n+\n+export function memberMerche(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"merche\",\n+      fullName: \"Merche\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--merche@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-me020\",\n+      password: \"publ-me020\",\n+    };\n+}\n+\n+\n+export function memberMeilani(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"meilani\",\n+      fullName: \"Meilani\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--meilani@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-me020\",\n+      password: \"publ-me020\",\n+    };\n+}\n+\n+\n+export function memberMichael(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"michael\",\n+      fullName: \"Michael\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--michael@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-mi020\",\n+      password: \"publ-mi020\",\n+    };\n+}\n+\n+\n+export function memberTrillian(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"trillian\",\n+      fullName: \"Trillian Trusted Member\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--trillian@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-tr020\",\n+      password: \"publ-tr020\",\n+      trustLevel: c.TestTrustLevel.Trusted,\n+    };\n+}\n+\n+\n+export function memberRegina(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"regina\",\n+      fullName: \"Regina Regular Member\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--regina@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-re020\",\n+      password: \"publ-re020\",\n+      trustLevel: c.TestTrustLevel.Regular,\n+    };\n+}\n+\n+\n+export function memberCorax(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"Corax\",\n+      fullName: \"Corax Core Member\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--corax@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:publ-co020\",\n+      password: \"publ-co020\",\n+      trustLevel: c.TestTrustLevel.CoreMember,\n+    };\n+}\n+\n+\n+export function memberMallory(template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username: \"mallory\",\n+      fullName: \"Malicious Mallory\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--mallory@example.com\",\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      // As two chars from one's username, just after 'publ-', use 'ml' not 'ma',\n+      // so will be different from Maja's password.\n+      passwordHash: \"cleartext:publ-ml020\",\n+      password: \"publ-ml020\",\n+    };\n+}\n+\n+\n+export function member(username: string, template: Partial<Member> = {}): Member {\n+    return {\n+      ...template,\n+      id: getAndBumpNextUserId(),\n+      username,\n+      fullName: undefined,\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: `e2e-test--${username}@example.com`,\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: 'cleartext:pub-mem020',\n+      password: 'pub-mem020',\n+    };\n+}\n+\n+\n+export function minion(ps: { oneWordNameAndNumber: string,\n+          mixedCaseUsernameStartWithUpper: boolean }): Member {\n+    const nameLowercase = ps.oneWordNameAndNumber.toLowerCase();\n+    return {\n+      id: getAndBumpNextUserId(),\n+      username: ps.mixedCaseUsernameStartWithUpper\n+          ? `Minion_${ps.oneWordNameAndNumber}`\n+          : `minion_${nameLowercase}`,\n+      fullName: `Minion ${ps.oneWordNameAndNumber}`,\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: `e2e-test--minion-${nameLowercase}@example.com`,\n+      emailVerifiedAtMs: DefaultCreatedAtMs,\n+      passwordHash: \"cleartext:pub-min020\",\n+      password: \"pub-min020\",\n+    };\n+}\n+\n+\n+export function guestGunnar(): TestGuest {\n+    return {\n+      id: -10,\n+      fullName: \"Guest Gunnar\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--guest-gunnar@example.com\",\n+      guestBrowserId: 'guestBrowserIdGunnar',\n+      isGuest: true,\n+    };\n+}\n+\n+\n+export function guestGreta(): TestGuest {\n+    return {\n+      id: -11,\n+      fullName: \"Guest Greta\",\n+      createdAtMs: DefaultCreatedAtMs,\n+      emailAddress: \"e2e-test--guest-greta@example.com\",\n+      guestBrowserId: 'guestBrowserIdGreta',\n+      isGuest: true,\n+    };\n+}\n+\n+\n+export function page(values: PageToMake): Page {\n+    return <any> {\n+      id: values.id,\n+      role: values.role,\n+      categoryId: values.categoryId,\n+      authorId: values.authorId,\n+      createdAtMs: values.createdAtMs || DefaultCreatedAtMs,\n+      updatedAtMs: values.updatedAtMs || values.createdAtMs || DefaultCreatedAtMs,\n+      publishedAtMs: values.publishedAtMs,\n+      bumpedAtMs: values.bumpedAtMs,\n+      numChildPages: values.numChildPages,\n+      numRepliesVisible: values.numRepliesVisible,\n+      numRepliesToReview: values.numRepliesToReview,\n+      numRepliesTotal: values.numRepliesTotal,\n+      numLikes: values.numLikes,\n+      numWrongs: values.numWrongs,\n+      numBuryVotes: values.numBuryVotes,\n+      numUnwantedVotes: values.numUnwantedVotes,\n+      numOpLikeVotes: values.numOpLikeVotes,\n+      numOpWrongVotes: values.numOpWrongVotes,\n+      numOpBuryVotes: values.numOpBuryVotes,\n+      numOpUnwantedVotes: values.numOpUnwantedVotes,\n+      numOpRepliesVisible: values.numOpRepliesVisible,\n+      version: values.version || 1,\n+    };\n+}\n+\n+\n+export function pagePath(pageId: PageId, folder: string, showId: boolean, slug?: string): PagePathWithId {\n+    return {\n+      folder: folder,\n+      pageId: pageId,\n+      showId: showId,\n+      slug: slug || '',\n+      canonical: true,\n+    };\n+}\n+\n+\n+export function rootCategoryWithIdFor(id: CategoryId, forumPage: PageIdWhen): TestCategory {\n+    const category = categoryWithIdFor(id, forumPage);\n+    category.name = \"(Root Category)\";    // in Scala too [7UKPX5]\n+    category.slug =  `__root_cat_${id}`; //\n+    return category;\n+}\n+\n+\n+export function categoryWithIdFor(id: CategoryId, forumPage: PageIdWhen): TestCategory {\n+    return {\n+      id: id,\n+      sectionPageId: forumPage.id,\n+      parentId: undefined,\n+      defaultCategoryId: undefined,\n+      name: \"Unnamed Category\",\n+      slug: \"unnamed-category\",\n+      position: undefined,\n+      description: undefined,\n+      newTopicTypes: undefined,\n+      defaultTopicType: c.TestPageRole.Discussion,\n+      createdAtMs: forumPage.createdAtMs,\n+      updatedAtMs: forumPage.updatedAtMs,\n+      unlistCategory: false,\n+      unlistTopics: false,\n+    };\n+}\n+\n+\n+export function post(values: NewTestPost): TestPost {\n+    let approvedHtmlSanitized = values.approvedHtmlSanitized;\n+    if (!approvedHtmlSanitized) {\n+      // Unless it's the title, wrap in <p>.\n+      approvedHtmlSanitized = values.nr === c.TitleNr ?\n+          values.approvedSource : `<p>${values.approvedSource}</p>`;\n+    }\n+    const authorId = values.authorId || values.page.authorId;\n+    return {\n+      id: values.id || getAndBumpNextPostId(),\n+      pageId: values.page.id,\n+      nr: values.nr,\n+      parentNr: values.parentNr,\n+      multireply: undefined,\n+      createdAtMs: values.page.createdAtMs,\n+      createdById: authorId,\n+      currRevStartedAtMs: values.page.createdAtMs,\n+      currRevLastEditedAtMs: undefined,\n+      currRevById: authorId,\n+      lastApprovedEditAtMs: undefined,\n+      lastApprovedEditById: undefined,\n+      numDistinctEditors: 1,\n+      numEditSuggestions: undefined,\n+      lastEditSuggestionAtMs: undefined,\n+      safeRevNr: undefined,\n+      approvedSource: values.approvedSource,\n+      approvedHtmlSanitized: approvedHtmlSanitized,\n+      approvedAtMs: values.page.createdAtMs,\n+      approvedById: c.SystemUserId,\n+      approvedRevNr: 1,\n+      currRevSourcePatch: undefined,\n+      currRevNr: 1,\n+      deletedStatus: undefined,\n+      deletedAtMs: undefined,\n+      deletedById: undefined,\n+      numPendingFlags: undefined,\n+      numHandledFlags: undefined,\n+      numLikeVotes: undefined,\n+      numWrongVotes: undefined,\n+      numTimesRead: undefined,\n+      numBuryVotes: undefined,\n+      numUnwantedVotes: undefined,\n+      postType: values.postType,\n+      prevRevNr: undefined,\n+    };\n+}\n+\n+\n+export function findForumPage(pages: Page[]): Page {\n+    for (let i = 0; i < pages.length; ++i) {\n+      const page = pages[i];\n+      if (page.role === c.TestPageRole.Forum)\n+        return page;\n+    }\n+    log.die('EdE2KW055');\n+}\n+\n+\n+export function forumOwnedByOwen(name: string, options?: { title?: string }): SiteData {\n+    const site: SiteData = emptySiteOwnedByOwen();\n+    const now = Date.now();\n+    site.meta.localHostname = site.meta.localHostname || 'e2e-test-' + now;\n+    site.meta.name = 'e2e-test-' + name + '-' + now;\n+\n+    options = options || {};\n+\n+    // Dupl test code below [6FKR4D0]\n+    const rootCategoryId = 1;\n+\n+    const forumPage = page({\n+      id: c.FirstPageId,\n+      role: c.TestPageRole.Forum,\n+      categoryId: rootCategoryId,\n+      authorId: c.SystemUserId,\n+    });\n+    site.pages.push(forumPage);\n+\n+    site.pagePaths.push(pagePath(forumPage.id, '/', false));\n+\n+    // Forum title and intro text page.\n+    site.posts.push(post({\n+      page: forumPage,\n+      nr: c.TitleNr,\n+      approvedSource: options.title || \"Forum Title\",\n+      approvedHtmlSanitized: options.title || \"Forum Title\",\n+    }));\n+    site.posts.push(post({\n+      page: forumPage,\n+      nr: c.BodyNr,\n+      approvedSource: \"Forum intro text.\",\n+      approvedHtmlSanitized: \"<p>Forum intro text.</p>\",\n+    }));\n+\n+    const rootCategory = rootCategoryWithIdFor(rootCategoryId, forumPage);\n+    rootCategory.defaultCategoryId = 2;\n+    site.categories.push(rootCategory);\n+\n+    const uncategorizedCategory = categoryWithIdFor(2, forumPage);\n+    uncategorizedCategory.parentId = rootCategory.id;\n+    uncategorizedCategory.name = \"Uncategorized\";\n+    uncategorizedCategory.slug = \"uncategorized\";\n+    uncategorizedCategory.description = \"The default category.\";\n+    site.categories.push(uncategorizedCategory);\n+\n+    site.permsOnPages.push({\n+      id: 1,\n+      forPeopleId: c.EveryoneId,\n+      onCategoryId: uncategorizedCategory.id,\n+      mayEditOwn: true,\n+      mayCreatePage: true,\n+      mayPostComment: true,\n+      maySee: true,\n+      maySeeOwn: true,\n+    });\n+\n+    site.permsOnPages.push({\n+      id: 2,\n+      forPeopleId: c.StaffId,\n+      onCategoryId: uncategorizedCategory.id,\n+      mayEditPage: true,\n+      mayEditComment: true,\n+      mayEditWiki: true,\n+      mayEditOwn: true,\n+      mayDeletePage: true,\n+      mayDeleteComment: true,\n+      mayCreatePage: true,\n+      mayPostComment: true,\n+      maySee: true,\n+      maySeeOwn: true,\n+    });\n+\n+    return site;\n+}\n+\n+  // Creates this:\n+  //\n+  // - owner Owen\n+  // - moderator Modya\n+  // - moderator Mons\n+  // - member Maria\n+  // - member Michael\n+  // - member Mallory\n+  // - guest Gunnar\n+  //\n+  // - category DeletedCategory\n+  //   - topic About-DeletedCategory\n+  //   - topic TopicInDeletedCategory-by-Owen\n+  //   - topic TopicInDeletedCategory-by-Modya\n+  //   - topic TopicInDeletedCategory-by-Maria (-reply-by-Michael)\n+  //   - topic TopicInDeletedCategory-by-Guest\n+  // - category UnlistedCategory\n+  //   - topic About-UnlistedCategory\n+  //   - topic TopicInUnlistedCategory-by-Owen\n+  //   - topic TopicInUnlistedCategory-by-Modya\n+  //   - topic TopicInUnlistedCategory-by-Maria (-reply-by-Michael)\n+  //   - topic TopicInUnlistedCategory-by-Guest — category was unlisted after topic created\n+  // - category StaffOnlyCategory\n+  //   - topic About-StaffOnlyCategory\n+  //   - topic TopicInStaffOnlyCategory-by-Owen\n+  //   - topic TopicInStaffOnlyCategory-by-Modya\n+  //   - topic TopicInStaffOnlyCategory-by-Maria (-reply-by-Michael)\n+  //   - topic TopicInStaffOnlyCategory-by-Guest — category made staff-only after topic created\n+  // - category CategoryA\n+  //   - topic About-CategoryA\n+  //   - topic TopicInCategoryA-by-Owen\n+  //   - topic TopicInCategoryA-by-Modya\n+  //   - topic TopicInCategoryA-by-Maria (-reply-by-Michael)\n+  //   - topic TopicInCategoryA-by-Guest\n+  //   - topic DeletedTopicInCategoryA-by-Maria (-reply-by-Michael)\n+  //   - topic FlaggedHiddenTopicInCategoryA-by-Mallory\n+  // - category CategoryB\n+  //   - topic About-CategoryB\n+  //   - topic TopicInCategoryB-by-Owen\n+  //   - topic TopicInCategoryB-by-Modya\n+  //   - topic TopicInCategoryB-by-Maria\n+  //   - topic TopicInCategoryB-by-Guest\n+  //\n+  // - private message from Maria to Michael\n+  // - private message from Maria to Modya   (only Modya and Owen can see it)\n+  //\n+  // - topic TopicInNoCategory-by-Michael\n+  //\n+  /*\n+  largeForumOwnedByOwen: function(name: string, options?): SiteBuilder {\n+    let site = forumOwnedByOwen(name, options);\n+\n+    var modya = memberModeratorModya();\n+    site.members.push(modya);\n+\n+    let rootCategoryId = 1;\n+\n+    let deletedCategory = site_addCategory(site, {\n+      id: 3,\n+      parentId: rootCategoryId,\n+      name: 'DeletedCategory',\n+      slug: 'deleted-category',\n+      description: 'This category has been deleted.',\n+      deleted: true,\n+    });\n+\n+    site_addPage(site, {\n+      categoryId: deletedCategory.id,\n+      pageId: '',\n+      pageRole: '',\n+      folder: '',\n+      slug: '',\n+      authorId: '',\n+      title: '',\n+      body: '',\n+    });\n+\n+    return site;\n+  } */\n+"
    },
    {
      "sha": "74d9cd2174c49b1ad464f7fa1be52a104c31ee5e",
      "filename": "tests/e2e-wdio7/utils/pages-for.ts",
      "status": "added",
      "additions": 9237,
      "deletions": 0,
      "changes": 9237,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/pages-for.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad"
    },
    {
      "sha": "e20ec43d3b0db7b5b309783e039387847bd15460",
      "filename": "tests/e2e-wdio7/utils/server.ts",
      "status": "added",
      "additions": 655,
      "deletions": 0,
      "changes": 655,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/server.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,655 @@\n+// This file sends requests to the server we're testing. Doesn't start any server.\n+\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from './ty-assert';\n+import * as utils from './utils';\n+import c from '../test-constants';\n+import { logMessage, logWarning, logError, logServerRequest, die, dieIf,\n+        } from './log-and-die';\n+\n+const syncRequest = require('sync-request');\n+\n+let xsrfTokenAndCookies;\n+\n+let settings: TestSettings;\n+\n+/// Exits on failure — otherwise wdio prints a 100+ lines long help text,\n+/// so people wouldn't see any error messages logged below.\n+/// (Any e2e tests cannot run anyway, if this won't work.)\n+///\n+function initOrExit(theSettings) {\n+  settings = theSettings;\n+  let response;\n+  try {\n+    response = syncRequest('GET', settings.mainSiteOrigin);\n+  }\n+  catch (ex) {\n+    logError(`Error talking with:  ${settings.mainSiteOrigin}\\n` +\n+        `Is the server not running?  [TyEE2ESRVOFF]\\n\\n`, ex);\n+    process.exit(1);\n+  }\n+\n+  if (response.statusCode !== 200) {\n+    logError(`Error response from:  ${settings.mainSiteOrigin}  ` +\n+        `when requesting xsrf token and cookies [TyEE2ESRVSTS]\\n`);\n+    logError(showResponse(response));\n+    process.exit(1);\n+  }\n+\n+  let cookieString = '';\n+  let xsrfToken = '';\n+  const cookies = response.headers['set-cookie'];\n+  _.each(cookies, function(cookie) {\n+    // A Set-Cookie header value looks like so: \"name=value; options\"\n+    const nameValueStr = cookie.split(';')[0];\n+    const nameAndValue = nameValueStr.split('=');\n+    const name = nameAndValue[0];\n+    const value = nameAndValue[1];\n+    cookieString += nameValueStr + '; ';\n+    if (name == 'XSRF-TOKEN') {\n+      xsrfToken = value;\n+    }\n+  });\n+\n+  if (!xsrfToken) {\n+    logError(\n+        `Got no xsrf token from:  ${settings.mainSiteOrigin}   [TyEE2ESRVXSRF]\\n` +\n+        `Cookie headers:\\n` +\n+        `    ${JSON.stringify(cookies)}\\n`);\n+    process.exit(1);\n+  }\n+\n+  xsrfTokenAndCookies = [xsrfToken, cookieString];\n+}\n+\n+\n+function postOrDie(url, data, opts: { apiRequesterId?: number, apiSecret?: string,\n+      retryIfXsrfTokenExpired?: boolean, fail?: boolean } = {})\n+      : { statusCode: number, headers, bodyText: string, bodyJson: () => any } {\n+\n+  dieIf(!settings.e2eTestPassword, \"No E2E test password specified [EsE2WKG4]\");\n+  dieIf(!!opts.apiRequesterId !== !!opts.apiSecret,\n+        \"API user id or secret missing [TyE450KST]\");\n+\n+  const passwordParam =\n+      (url.indexOf('?') === -1 ? '?' : '&') + 'e2eTestPassword=' + settings.e2eTestPassword;\n+\n+  // Authentication headers.\n+  // Either use Bausic Authentication, if we're doing an API request with an API secret,\n+  // or include an xsrf cookie if something else.\n+  const headers = opts.apiRequesterId\n+    ? {\n+        'Authorization': 'Basic ' +\n+            utils.encodeInBase64(`talkyardId=${opts.apiRequesterId}:${opts.apiSecret}`)\n+      }\n+    : (!xsrfTokenAndCookies ? {} : {\n+        'X-XSRF-TOKEN': xsrfTokenAndCookies[0],\n+        'Cookie': xsrfTokenAndCookies[1]\n+      });\n+\n+  logServerRequest(`POST ${url}, headers: ${ JSON.stringify(headers) } ... [TyME2EPOST]`);\n+\n+  // Log the request as a copy-pasteable cURL command, so one can re-run this server request\n+  // manually, for testing & debugging.\n+  let curlHeadersTexts = []\n+  _.each(headers, (value, key) => {\n+    dieIf(value.indexOf(\"'\") >= 0, \"Header value contains ' [TyE305KTH3KTS]\");\n+    curlHeadersTexts.push(`-H '${key}: ${value}'`);\n+  });\n+  let curlDataText = JSON.stringify(data).replace(\"'\", \"'\\\\''\");\n+  if (curlDataText.length > 1000 && settings.logLevel != 'trace') {\n+    // This is a bit much json, makes the logs annoyingly verbose. So truncate. Won't be\n+    // copy-pasteable.\n+    curlDataText = curlDataText.substr(0, 1000) + '\\n       ...';\n+  }\n+  logServerRequest(`curl  \\\\\n+    -X POST  \\\\\n+    -H 'Content-Type: application/json'  \\\\\n+    ${curlHeadersTexts.join('  \\\\\\n    ')}  \\\\\n+    -d '${curlDataText}'  \\\\\n+    ${url}`);\n+\n+  const response = syncRequest('POST', url + passwordParam, { json: data, headers: headers });\n+  const responseBody = getResponseBodyString(response);\n+\n+  //console.log('\\n\\n' + url + '  ——>\\n' + responseBody + '\\n\\n');\n+  if (response.statusCode !== 200 && responseBody.indexOf('TyEXSRFEXP_') >= 0 &&\n+      opts.retryIfXsrfTokenExpired !== false) {\n+    // The xsrf token expires, if we playTime...() too much.\n+    logMessage(\"Getting a new xsrf token; the old one has expired ...\");\n+\n+    // If this won't work, the tests won't work anyway, feels ok to exit?\n+    initOrExit(settings);\n+\n+    logMessage(\"... Done getting new xsrf token.\");\n+    return postOrDie(url, data, { ...opts, retryIfXsrfTokenExpired: false });\n+  }\n+\n+  if (opts.fail) {\n+    dieIf(response.statusCode === 200,\n+      \"POST request should have gotten back an error code, to \" +\n+          url + \" [TyE507KDF2P]\", showResponse(response, true));\n+  }\n+  else {\n+    dieIf(response.statusCode !== 200,\n+        \"POST request failed to \" + url + \" [EsE5GPK02]\", showResponse(response));\n+  }\n+\n+  return {\n+    statusCode: response.statusCode,\n+    headers: response.headers,\n+    bodyText: responseBody,\n+    bodyJson: function() {\n+      let obj;\n+      try {\n+        obj = JSON.parse(responseBody);\n+      }\n+      catch (ex) {\n+        die(`Error parsing response json: ${ex.toString()} [TyE204GKRTH4]`,\n+          \"--- The server's response: ------\\n\" +\n+          responseBody + '\\n' +\n+          '---------------------------------\\n');\n+      }\n+      return obj;\n+    }\n+  };\n+}\n+\n+\n+function getOrDie(url) {\n+  dieIf(!settings.e2eTestPassword, \"No E2E test password specified [EsE2KU603]\");\n+  logServerRequest('GET ' + url);\n+\n+  const passwordParam =\n+      (url.indexOf('?') === -1 ? '?' : '&') + 'e2eTestPassword=' + settings.e2eTestPassword;\n+\n+  const headers = !xsrfTokenAndCookies ? {} : {\n+    'X-XSRF-TOKEN': xsrfTokenAndCookies[0],\n+    'Cookie': xsrfTokenAndCookies[1]\n+  };\n+\n+  const response = syncRequest('GET', url + passwordParam, { headers: headers });\n+\n+  dieIf(response.statusCode !== 200, \"GET request failed to \" + url + \" [EsE8JYT4]\",\n+      showResponse(response));\n+  return response;\n+}\n+\n+\n+function getResponseBodyString(response): string {  // dupl [304KWPD50]\n+  let bodyString = response.body;\n+  if (!_.isString(bodyString) && bodyString.toString) {\n+    bodyString = bodyString.toString('utf8');\n+  }\n+  if (!_.isString(bodyString)) {\n+    bodyString = \"(The response body is not a string, and has no toString function. \" +\n+        \"Don't know how to show it. [EdE7BXE2I])\";\n+  }\n+  return bodyString;\n+}\n+\n+\n+function showResponse(response, shouldHaveFailed?: boolean) {\n+  const bodyString = getResponseBodyString(response);\n+  const not = shouldHaveFailed ? \" *not*\" : '';\n+  return (\n+      `Response status code: ${response.statusCode} (should have been ${not} 200)\\n` +\n+      showResponseBodyJson(bodyString));\n+}\n+\n+\n+function showResponseBodyJson(body) {\n+  let text = body;\n+  if (!_.isString(text)) text = JSON.stringify(text);\n+  return (\n+  \"Response body: ———————————————————————————————————————————————————————————————————\\n\" +\n+  text +\n+  \"\\n——————————————————————————————————————————————————————————————————————————————————\\n\");\n+}\n+\n+\n+function importRealSiteData(siteData: SiteData2): IdAddress {\n+  // We're importing test data, to a \"real\" endpoint that works also\n+  // in Prod mode. [06KWFNDS2]\n+  const url = settings.mainSiteOrigin + '/-/import-site-json?deleteOldSite=true';\n+  const idAddr = postOrDie(url, { ...siteData, isTestSiteOkDelete: true }).bodyJson();\n+  dieIf(!idAddr.id, \"No site id in import-site response [TyE4STJ2]\",\n+      showResponseBodyJson(idAddr));\n+  return idAddr;\n+}\n+\n+\n+function importTestSiteData(siteData: SiteData): IdAddress {\n+  siteData.meta.nextPageId = 100; // for now\n+  siteData.meta.version = 1;      // for now\n+\n+  // Maybe remove this param? Now done automatically in most cases [DELTSTHOSTS].\n+  const deleteOldSite = settings.deleteOldSite ? '?deleteOldSite=true' : '';\n+\n+  const url = settings.mainSiteOrigin + '/-/import-test-site-json' + deleteOldSite;\n+  const idAddr = postOrDie(url, { ...siteData, isTestSiteOkDelete: true }).bodyJson();\n+  dieIf(!idAddr.id, \"No site id in import-site response [TyE7UGK2]\",\n+      showResponseBodyJson(idAddr));\n+  return idAddr;\n+}\n+\n+\n+function deleteOldTestSite(localHostname: string) {\n+  postOrDie(settings.mainSiteOrigin + '/-/delete-test-site', { localHostname });\n+}\n+\n+\n+function skipRateLimits(siteId: SiteId) {\n+  postOrDie(settings.mainSiteOrigin + '/-/skip-rate-limits', { siteId });\n+}\n+\n+\n+function playTimeSeconds(seconds: number) {\n+  const url = settings.mainSiteOrigin + '/-/play-time';\n+  postOrDie(url, { seconds: seconds });\n+}\n+\n+\n+function playTimeMinutes(minutes: number) { playTimeSeconds(minutes * 60); }\n+function playTimeHours(hours: number) { playTimeSeconds(hours * 3600); }\n+function playTimeDays(days: number) { playTimeSeconds(days * 3600 * 24); }\n+\n+\n+function deleteRedisKey(key: string) {\n+  postOrDie(settings.mainSiteOrigin + '/-/delete-redis-key', { key });\n+}\n+\n+\n+function getTestCounters(): TestCounters {\n+  const response = getOrDie(settings.mainSiteOrigin + '/-/test-counters');\n+  return JSON.parse(response.body);\n+}\n+\n+\n+function getLastEmailSenTo(siteId: SiteId, email: string,\n+      pause: any // CLEAN_UP: wrong type — was a wdio browser obj in the past.\n+      ): EmailSubjectBody | null {\n+  throw Error(\"Make async?\");\n+  for (let attemptNr = 1; attemptNr <= settings.waitforTimeout / 500; ++attemptNr) {\n+    const response = getOrDie(settings.mainSiteOrigin + '/-/last-e2e-test-email?sentTo=' + email +\n+      '&siteId=' + siteId);\n+    const lastEmails = JSON.parse(response.body);\n+    if (lastEmails.length) {\n+      logMessage(`${email} has gotten ${lastEmails.length} emails:`);\n+      for (let i = 0; i < lastEmails.length; ++i) {\n+        const oneLastEmail = lastEmails[i];\n+        logMessage(`  subject: \"${oneLastEmail.subject}\" ` + (\n+            i === lastEmails.length - 1 ? \" <— the last one, returning it\" : ''));\n+      }\n+      const lastEmail = lastEmails[lastEmails.length - 1];\n+      return lastEmail;\n+    }\n+    // Internal functions can pass false, if they pause themselves.\n+    if (pause !== false) {\n+      wdioBrowserA.pause(500 - 100); // 100 ms for a request, perhaps?\n+    }\n+    else {\n+      return null;\n+    }\n+  }\n+  die(`Timeout in getLastEmailSenTo, address: ${email} [EdE5JSRWG0]`)\n+}\n+\n+\n+/** Doesn't count all emails, only the last 15? so after many emails sent, becomes useless.\n+ */\n+function countLastEmailsSentTo(siteId: SiteId, email: string): number {\n+  const response = getOrDie(settings.mainSiteOrigin + '/-/last-e2e-test-email?sentTo=' + email +\n+    '&siteId=' + siteId + '&timeoutMs=1000');\n+  const lastEmails = JSON.parse(response.body);\n+  dieIf(lastEmails.length >= 14, 'TyE2ABKT0', \"Too many emails, e2e test won't work  [R2AB067]\");\n+  return lastEmails.length;\n+}\n+\n+\n+/** Counts emails sent, for a test site.\n+ */\n+function getEmailsSentToAddrs(siteId: SiteId): { num: number, addrsByTimeAsc: string[] } {\n+  const response = getOrDie(settings.mainSiteOrigin + `/-/num-e2e-test-emails-sent?siteId=${siteId}`);\n+  return JSON.parse(response.body);\n+}\n+\n+\n+function getLastVerifyEmailAddressLinkEmailedTo(siteId: SiteId, emailAddress: string,\n+      pauseOrLinkAccts?: Ay | 'LINKING_IDP_ACCT'): string {\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  dieIf(!email, `No email has yet been sent to ${emailAddress}. ` + (!browser ? '' :\n+    \"Include a 'browser' as 3rd arguement, to poll-wait for an email.  [TyE2ABKF057]\"));\n+  const regex = (pauseOrLinkAccts !== 'LINKING_IDP_ACCT'\n+          ? 'https?://.*/-/login-password-confirm-email'\n+          : 'https?://.*/-/authn/verif-email-ask-if-link-accounts');\n+  return utils.findFirstLinkToUrlIn(regex, email.bodyHtmlText);\n+}\n+\n+\n+// Note: for *an additional* email address, not for the initial signup.\n+function waitAndGetVerifyAnotherEmailAddressLinkEmailedTo(siteId: SiteId, emailAddress: string, browser,\n+     options?: { isOldAddr: boolean }): string {\n+  const textToMatch = options && options.isOldAddr\n+      ? \"To verify email\"   // [4GKQM2_]\n+      : \"To finish adding\"; // [B4FR20L_]\n+  waitUntilLastEmailMatches(\n+    siteId, emailAddress, [textToMatch, emailAddress], browser);\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findFirstLinkToUrlIn('https?://[^\"\\']*/-/confirm-email-address', email.bodyHtmlText);\n+}\n+\n+\n+function waitAndGetInviteLinkEmailedTo(siteId: SiteId, emailAddress: string, browser): string {\n+  const textToMatch = \"invites you to join\"; // [5FJBAW2_]\n+  waitUntilLastEmailMatches(siteId, emailAddress, [textToMatch], browser);\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findFirstLinkToUrlIn('https?://[^\"\\']*/-/accept-invite', email.bodyHtmlText);\n+}\n+\n+\n+function waitAndGetThanksForAcceptingInviteEmailResetPasswordLink(siteId, emailAddress, browser) {\n+  const textToMatch = \"thanks for accepting the invitation\"; // [5FJB2AZY_]\n+  waitUntilLastEmailMatches(siteId, emailAddress, [textToMatch], browser);\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findFirstLinkToUrlIn('https?://[^\"\\']*/-/reset-password', email.bodyHtmlText);\n+}\n+\n+\n+function waitForAlreadyHaveAccountEmailGetResetPasswordLink(\n+      siteId: SiteId, emailAddress: string, browser): string {\n+  const textToMatch = \"you already have such an account\"; // [2WABJDD4_]\n+  waitUntilLastEmailMatches(siteId, emailAddress, [textToMatch], browser);\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findFirstLinkToUrlIn('https?://[^\"\\']*/-/reset-password', email.bodyHtmlText);\n+}\n+\n+\n+function waitAndGetResetPasswordLinkEmailedTo(siteId: SiteId, emailAddress: string, browser): string {\n+  const textToMatch = 'reset-password';  // in the url\n+  waitUntilLastEmailMatches(siteId, emailAddress, [textToMatch], browser);\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findFirstLinkToUrlIn('https?://[^\"\\']*/-/reset-password', email.bodyHtmlText);\n+}\n+\n+\n+function waitAndGetOneTimeLoginLinkEmailedTo(siteId: SiteId, emailAddress: string, browser): string {\n+  const textToMatch = 'login-with-secret';  // in the url\n+  waitUntilLastEmailMatches(siteId, emailAddress, [textToMatch], browser);\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findFirstLinkToUrlIn('https?://[^\"\\']+/-/v0/login-with-secret', email.bodyHtmlText);\n+}\n+\n+\n+const unsubUrlRegexString = 'https?://[^\"\\']*/-/unsubscribe';\n+\n+function getLastUnsubscriptionLinkEmailedTo(siteId: SiteId, emailAddress: string, browser): string {\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findFirstLinkToUrlIn(unsubUrlRegexString, email.bodyHtmlText);\n+}\n+\n+\n+function getAnyUnsubscriptionLinkEmailedTo(siteId: SiteId, emailAddress: string, browser?): string {\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findAnyFirstLinkToUrlIn(unsubUrlRegexString, email.bodyHtmlText);\n+}\n+\n+\n+function waitForUnsubscriptionLinkEmailedTo(siteId: SiteId, emailAddress: string, browser): string {\n+  throw Error(\"Make async?\");\n+  for (let attemptNr = 1; attemptNr <= settings.waitforTimeout / 500; ++attemptNr) {\n+    const email = getLastEmailSenTo(siteId, emailAddress, false);\n+    const link = !email ? null : utils.findAnyFirstLinkToUrlIn(unsubUrlRegexString, email.bodyHtmlText);\n+    if (!link)\n+      wdioBrowserA.pause(500 - 100); // 100 ms for a request, perhaps?\n+    else\n+      return link;\n+  }\n+}\n+\n+\n+function waitUntilLastEmailIsActSumAndMatches(siteId: SiteId, emailAddress: string,\n+        textOrTextsToMatch: string | string[]): EmailMatchResult {\n+  return waitUntilLastEmailMatches(siteId, emailAddress, textOrTextsToMatch,\n+          { isActivitySummary: true });\n+}\n+\n+\n+function waitUntilLastEmailMatches(siteId: SiteId, emailAddress: string,\n+        textOrTextsToMatch: string | string[], opts?: { isActivitySummary?: Bo } | any)\n+        : EmailMatchResult {\n+  let textsToMatch: string[] =\n+      _.isString(textOrTextsToMatch) ? [textOrTextsToMatch] : textOrTextsToMatch;\n+  throw Error(\"Make async?\");\n+  if (opts?.isActivitySummary) {\n+    textsToMatch = [...textsToMatch, 'e_ActSumEm'];\n+  }\n+  const startMs = Date.now();\n+  let hasDebugLoggedLastEmail = false;\n+  const regexs = textsToMatch.map(text => new RegExp(utils.regexEscapeSlashes(text)));\n+  let misses: string[];\n+  for (let attemptNr = 1; attemptNr <= settings.waitforTimeout / 500; ++attemptNr) {\n+    const email: EmailSubjectBody | U = getLastEmailSenTo(siteId, emailAddress, false);\n+    misses = [];\n+    let matchingStrings: string[] = [];\n+    for (let i = 0; i < regexs.length; ++i) {\n+      const regex = regexs[i];\n+      const matches = !email ? null : email.bodyHtmlText.match(regex);\n+      if (matches) {\n+        matchingStrings.push(matches[0]);\n+      }\n+      else {\n+        misses.push(textsToMatch[i]);\n+      }\n+    }\n+    if (!misses.length) {\n+      return {\n+        matchedEmail: email,\n+        matchingString: _.isString(textOrTextsToMatch) ? matchingStrings[0] : undefined,\n+        matchingStrings,\n+      }\n+    }\n+\n+    // Debug log last email if after a while there're no matching email.\n+    const tenSecondsPassed = Date.now() > startMs + 10*1000;\n+    const testEndsSoon = Date.now() > startMs + settings.waitforTimeout*1000 - 3000;\n+    if (!hasDebugLoggedLastEmail && (tenSecondsPassed || testEndsSoon)) {\n+      //hasDebugLoggedLastEmail = true;\n+      logWarning(\n+        `Waiting for email to: ${emailAddress} to match: ${JSON.stringify(textsToMatch)} ` +\n+        (!email ? ` — but no email sent to that address` :\n+            `\\nLast email is:\\n${email.subject}\\n${email.bodyHtmlText}`) +\n+        '\\n');\n+    }\n+\n+    wdioBrowserA.pause(500 - 50);\n+  }\n+  const missesString = misses.join(', ');\n+  die(`Never got any email to ${emailAddress} matching ${missesString} [EdE5JGK2Q1]`);\n+}\n+\n+\n+function assertLastEmailMatches(siteId: SiteId, emailAddress: string,\n+      textOrTextsToMatch: string | string[], browser) {\n+  lastEmailMatches(siteId, emailAddress, textOrTextsToMatch, browser, true);\n+}\n+\n+\n+function lastEmailMatches(siteId: SiteId, emailAddress: string,\n+      textOrTextsToMatch: string | string[], browser?, assertMatches?: true): string | false {\n+  const textsToMatch: string[] =\n+    _.isString(textOrTextsToMatch) ? [textOrTextsToMatch] : textOrTextsToMatch;\n+  const regexs = textsToMatch.map(text => new RegExp(utils.regexEscapeSlashes(text)));\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  for (let i = 0; i < regexs.length; ++i) {\n+    const regex = regexs[i];\n+    const matches = email.bodyHtmlText.match(regex);\n+    if (matches) {\n+      return matches[0];\n+    }\n+  }\n+  if (assertMatches) {\n+    assert.fail(`Email text didn't match regex(s): '${JSON.stringify(textOrTextsToMatch)}',\\n` +\n+      `email sent to: ${emailAddress},\\n` +\n+      `email title: ${email.subject},\\n` +\n+      `email text: ${email.bodyHtmlText}`);\n+  }\n+  return false;\n+}\n+\n+\n+\n+// ----- API v0\n+\n+\n+const isApiErrorResponse = (response: ApiResponse<any>)\n+    : response is ApiErrorResponse =>\n+  (response as ApiErrorResponse).error !== undefined;\n+\n+\n+function fullTextSearch<T extends ThingFound>(ps: { origin: string, queryText: string })\n+      :  SearchQueryResults<T> {\n+  const url = ps.origin + '/-/v0/search';\n+  const requestBody: SearchQueryApiRequest = {\n+    searchQuery: { freetext: ps.queryText },\n+    pretty: true,\n+  };\n+  const responseObj = postOrDie(url, requestBody);\n+  const responseBody = responseObj.bodyJson() as SearchQueryApiResponse<T>;\n+  const result = responseObj.statusCode === 200 && !isApiErrorResponse(responseBody)\n+      ? responseBody\n+      : die(`POST request failed to ${url} [TyE35RKDH4]`, showResponse(responseObj));\n+\n+  assert.ok(result.thingsFound);\n+  assert.ok(_.isArray(result.thingsFound));\n+\n+  return result;\n+}\n+\n+\n+function listQuery<T extends ThingFound>(\n+      ps: { origin: string, listQuery: ListQuery, sortOrder?: PageSortOrder },\n+      postPs: { fail?: boolean, apiRequesterId?: UserId, apiSecret?: string } = {})\n+      : ListQueryResults<T> | string {\n+  const url = ps.origin + '/-/v0/list';\n+  const requestBody: ListQueryApiRequest = {\n+    listQuery: ps.listQuery,\n+    pretty: true,\n+  };\n+\n+  const responseObj = postOrDie(url, requestBody, postPs);\n+\n+  if (postPs.fail)\n+    return responseObj.bodyText;\n+\n+  const responseBody = responseObj.bodyJson() as ListQueryApiResponse<T>;\n+  const result = responseObj.statusCode === 200 && !isApiErrorResponse(responseBody)\n+      ? responseBody\n+      : die(`POST request failed to ${url} [TyE0WKHLS6M]`, showResponse(responseObj));\n+\n+  assert.ok(result.thingsFound);\n+  assert.ok(_.isArray(result.thingsFound));\n+\n+  return result;\n+}\n+\n+\n+function upsertUserGetLoginSecret(ps: { origin: string, apiRequesterId?: UserId, apiSecret: string,\n+      externalUser: ExternalUser, fail?: boolean }): string {\n+  const url = ps.origin + '/-/v0/sso-upsert-user-generate-login-secret';\n+  const response = postOrDie(\n+      url, ps.externalUser, {\n+        fail: ps.fail,\n+        apiRequesterId: ps.apiRequesterId || c.SysbotUserId,\n+        apiSecret: ps.apiSecret });\n+\n+  if (ps.fail)\n+    return response.bodyText;\n+\n+  const responseJson = response.bodyJson();\n+  dieIf(!responseJson.loginSecret, \"No login secret in API response [TyE4AKBA05]\",\n+      showResponseBodyJson(responseJson));\n+  logServerRequest(\"Now you can try:\\n    \" +\n+      ps.origin + '/-/v0/login-with-secret' +\n+      '?oneTimeSecret=' + responseJson.loginSecret +\n+      '&thenGoTo=/');\n+  return responseJson.loginSecret;\n+}\n+\n+\n+function upsertUser(ps: { origin: St, apiRequesterId?: UserId, apiSecret: St,\n+      externalUser: ExternalUser, fail?: Bo }): St {\n+  const url = ps.origin + '/-/v0/upsert-user';\n+  const response = postOrDie(url, ps.externalUser, {\n+    fail: ps.fail,\n+    apiRequesterId: ps.apiRequesterId || c.SysbotUserId,\n+    apiSecret: ps.apiSecret,\n+  });\n+  return response.bodyText;\n+}\n+\n+\n+function upsertSimple(ps: { origin: string, apiRequesterId: UserId, apiSecret: string, fail?: boolean,\n+      data }): string | any {\n+  const url = ps.origin + '/-/v0/upsert-simple';\n+  const response = postOrDie(\n+      url, ps.data, {\n+        fail: ps.fail,\n+        apiRequesterId: ps.apiRequesterId || c.SysbotUserId,\n+        apiSecret: ps.apiSecret });\n+  return ps.fail ? response.bodyText : response.bodyJson();\n+}\n+\n+\n+function listUsers(ps: { origin: string, usernamePrefix: string }): ListUsersApiResponse {\n+  const url = ps.origin + '/-/v0/list-users?usernamePrefix=' + ps.usernamePrefix;\n+  const response = getOrDie(url);\n+  return JSON.parse(response.body);\n+}\n+\n+\n+\n+// ----- Export functions\n+\n+export default {\n+  initOrExit: initOrExit,\n+  importRealSiteData,\n+  importSiteData: importTestSiteData,\n+  deleteOldTestSite,\n+  skipRateLimits,\n+  playTimeSeconds,\n+  playTimeMinutes,\n+  playTimeHours,\n+  playTimeDays,\n+  deleteRedisKey,\n+  getTestCounters,\n+  getLastEmailSenTo,\n+  countLastEmailsSentTo,\n+  getEmailsSentToAddrs,\n+  getLastVerifyEmailAddressLinkEmailedTo, // RENAME see next line.. No, nice name?\n+  getVerifyEmailAddressLinkFromLastEmailTo: getLastVerifyEmailAddressLinkEmailedTo,\n+  waitAndGetVerifyAnotherEmailAddressLinkEmailedTo,\n+  waitAndGetInviteLinkEmailedTo,\n+  waitAndGetThanksForAcceptingInviteEmailResetPasswordLink,\n+  waitForAlreadyHaveAccountEmailGetResetPasswordLink,\n+  waitAndGetResetPasswordLinkEmailedTo,\n+  waitAndGetOneTimeLoginLinkEmailedTo,\n+  getLastUnsubscriptionLinkEmailedTo,\n+  getAnyUnsubscriptionLinkEmailedTo,\n+  waitForUnsubscriptionLinkEmailedTo,\n+  waitUntilLastEmailMatches,\n+  waitUntilLastEmailIsActSumAndMatches,\n+  lastEmailMatches,\n+  assertLastEmailMatches,\n+  apiV0: {\n+    fullTextSearch,\n+    listQuery,\n+    upsertUser,\n+    upsertUserGetLoginSecret,\n+    upsertSimple,\n+    listUsers,\n+  },\n+};\n+"
    },
    {
      "sha": "e680cc0560e5511767122245966f22fd2f377107",
      "filename": "tests/e2e-wdio7/utils/settings-exp-def.ts",
      "status": "added",
      "additions": 203,
      "deletions": 0,
      "changes": 203,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/settings-exp-def.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/settings-exp-def.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/settings-exp-def.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,203 @@\n+/// <reference path=\"../test-types2.ts\"/>\n+\n+import * as _ from 'lodash';\n+// Won't work, results in error:  minimist is not a function\n+// import * as minimist from 'minimist';\n+// It's not available as an ES6 module? But this works:\n+const minimist = require('minimist');\n+import type { ParsedArgs as minimist_ParsedArgs } from 'minimist';\n+import { die, dieIf, logDebugIf, logWarning, unusualColor } from './log-and-die';\n+\n+let settings: Partial<TestSettings> = {\n+  host: 'localhost',\n+  testLocalHostnamePrefix: 'e2e-test--',\n+  testEmailAddressPrefix: 'e2e-test--',\n+  // Default passwords, for testing on localhost.\n+  e2eTestPassword: 'public',\n+  forbiddenPassword: 'public',\n+};\n+\n+\n+// ---- Analyze arguments\n+\n+// Jest disallows to it unknown command line opts, so then we use an env\n+// var instead: all opts concatenated in a string, space separated.\n+const argvFromEnvSt: St | U = process.env.TY_ENV_ARGV_ST;\n+// BUG, harmless: split()s also inside \"space quote\".\n+const argvFromEnv: St[] | U = argvFromEnvSt?.split(' ');\n+logDebugIf(!!argvFromEnvSt, `env.TY_ENV_ARGV_ST: ${argvFromEnvSt}`);\n+\n+\n+const args: minimist_ParsedArgs = minimist(argvFromEnv || process.argv.slice(2));\n+_.extend(settings, args);\n+\n+if (settings.randomLocalHostname) {\n+  dieIf(!!settings.localHostname, \"Both randomLocalHostname and localHostname defined\");\n+  settings.localHostname = `e2e-test-${Date.now().toString().substr(4)}`;\n+}\n+\n+if (settings.localHostname && !settings.localHostname.startsWith('e2e-test-')) {\n+  die(\"localHostname doesn't start with 'e2e-test-'\");\n+}\n+settings.secure = settings.secure || settings.https;\n+settings.scheme = settings.secure ? 'https' : 'http';  // [E2EHTTPS]\n+settings.mainSiteOrigin = settings.scheme + '://' + settings.host;\n+settings.proto2Slash = settings.scheme + '://';\n+settings.newSiteDomain = settings.newSiteDomain || settings.host;\n+\n+settings.reuseOldSite = settings.reuseOldSite || args.reuse;\n+\n+settings.specFileRetries = args.retry;\n+\n+settings.debugEachStep = args.debugEachStep || args.des;\n+settings.debugBefore = args.debugBefore || args.db;\n+// dant = debug afterwards, no timeout\n+settings.debugAfterwards = args.debugAfter || args.debugAfterwards || args.da || args.dant;\n+settings.debugIfError = args.debugIfError || args.de;\n+settings.debug = args.debug || args.d || settings.debugBefore ||\n+    settings.debugAfterwards || settings.debugIfError;\n+\n+// Quick way to disable all browser.debug():\n+settings.noDebug = args.nodebug || args.nd;\n+\n+settings.block3rdPartyCookies = args.block3rdPartyCookies || args.b3c;\n+\n+settings.only3rdParty = args.only3rdParty || args.o3;\n+\n+const parallelStr = args.parallel || args.p;\n+if (parallelStr) settings.parallel = parseInt(parallelStr);\n+\n+// But some tests cannot run in parallel — e.g. if they modify time.\n+const notParallelStr = args.notParallel || args['0p'];\n+if (notParallelStr) delete settings.parallel;\n+\n+if (args.v || args.verbose || args.t || args.trace) {\n+  settings.logLevel = 'trace';\n+}\n+\n+if (args.i || args.invisible) {\n+  settings.headless = true;\n+}\n+\n+if (args['ss]'] || args['static-server-8080']) {\n+  settings.staticServer8080 = true;\n+}\n+if (args['ssgn]'] || args['static-server-gatsby-v1-8000']) {\n+  settings.staticServerGatsbyNew8000 = true;\n+}\n+if (args['ssgo]'] || args['static-server-gatsby-v1-old-ty-8000']) {\n+  settings.staticServerGatsbyOld8000 = true;\n+}\n+\n+settings.numBrowsers = 1;\n+if (args['2br'] || args['2browsers']) {\n+  settings.numBrowsers = 2;\n+}\n+if (args['3br'] || args['3browsers']) {\n+  settings.numBrowsers = 3;\n+}\n+\n+if (args.cd || args.chromedrier) {\n+  settings.useChromedriver = true;\n+}\n+\n+if (args.se || args.selenium) {\n+  dieIf(settings.useChromedriver,\n+    `Cannot use Chromedriver and Selenium services at the same time [TyE03KTSLJG3]`);\n+  settings.useSelenium = true;\n+}\n+\n+if (args.dt || args.devtools) {\n+  dieIf(settings.useChromedriver,\n+    `Cannot use DevTools and Chromedriver services at the same time? [TyE395KRDG2]`);\n+  dieIf(settings.useSelenium,\n+    `Cannot use DevTools and Selenium services at the same time [TyE306RKTDH2]`);\n+  settings.useDevtoolsProtocol = true;\n+}\n+\n+// (The default 10 seconds timeout is not enough. When a fresh Docker JVM & Play Framework\n+// container is started for the very first time, it's rather slow — it takes 5-10 seconds\n+// for Nashorn to compile all JS,/ that could be why. Or some other Java JIT compilation?\n+// Also, the email sending background threads are sometimes rather slow. [5KF0WU2T4]\n+// Whatever. Wait 21 seconds by default.)\n+let waitforTimeout = args.waitforTimeout || args.wft;\n+if (waitforTimeout) waitforTimeout = parseInt(waitforTimeout);\n+settings.waitforTimeout = args.noTimeout || args.nt || args.dant ||\n+        settings.debugEachStep ?\n+    2147483647 : (waitforTimeout || (\n+      // Wait longer, in case many tests running at the same time,\n+      // on a slow core i5 laptop.\n+      settings.parallel && settings.parallel >= 2 ?\n+          42 : 27) * 1000);\n+\n+settings.browserName = 'chrome';\n+if (args.ff) settings.browserName = 'firefox';\n+if (args.firefox) settings.browserName = 'firefox';\n+\n+if (args['3'] || args.include3rdPartyDependentTests) {\n+  settings.include3rdPartyDependentTests = true;\n+}\n+\n+if (settings['password'] && !settings.e2eTestPassword) {\n+  settings.e2eTestPassword = settings['password'];\n+  delete settings['password'];\n+}\n+\n+\n+// ---- Setup secrets\n+\n+const secretsPath = args.secretsPath;\n+if (secretsPath) {\n+  const fs = require('fs');\n+  const fileText = fs.readFileSync(secretsPath, { encoding: 'utf8' });\n+  try {\n+    const secrets = JSON.parse(fileText);\n+    settings = _.extend({}, secrets, settings); // command line stuff overrides file\n+    if (settings.include3rdPartyDependentTests) {\n+      if (!settings.gmailEmail) logWarning(\"No gmailEmail in \" + secretsPath);\n+      if (!settings.gmailPassword) logWarning(\"No gmailPassword in \" + secretsPath);\n+      if (!settings.githubUsernameMixedCase) logWarning(\"No githubUsernameMixedCase in \" + secretsPath);\n+      if (!settings.githubPassword) logWarning(\"No githubPassword in \" + secretsPath);\n+      if (!settings.githubEmailMixedCase) logWarning(\"No githubEmailMixedCase in \" + secretsPath);\n+      if (!settings.facebookAdminPassword) logWarning(\"No facebookAdminPassword in \" + secretsPath);\n+      if (!settings.facebookAdminEmail) logWarning(\"No facebookAdminEmail in \" + secretsPath);\n+      if (!settings.facebookUserPassword) logWarning(\"No facebookUserPassword in \" + secretsPath);\n+      if (!settings.facebookUserEmail) logWarning(\"No facebookUserEmail in \" + secretsPath);\n+    }\n+  }\n+  catch (error) {\n+    die(\"Error parsing secret file: \" + error);\n+  }\n+}\n+else if (settings.include3rdPartyDependentTests) {\n+  die(\"--include3rdPartyDependentTests (or -3) specified, but no --secretsPath [EsE5G5P8]\");\n+}\n+\n+const interesting = settings.parallel && settings.parallel > 1;\n+if (interesting) {\n+  console.log(\"==================================================\");\n+  console.log(\"~~~~~~ Test settings:\");\n+  console.log(\"host: \" + settings.host);\n+  console.log(\"secure: \" + !!settings.secure);\n+  console.log('derived origin: ' + settings.mainSiteOrigin);\n+  console.log(\"~~~~~~ Parallel: \");\n+  console.log(settings.parallel + \" tests in parallel\");\n+  console.log(\"~~~~~~ Secrets:\");\n+  console.log(\"e2eTestPassword: \" + (settings.e2eTestPassword ? \"(yes)\" : \"undefined\"));\n+  console.log(\"gmailEmail: \" + settings.gmailEmail);\n+  console.log(\"facebookAdminEmail: \" + settings.facebookAdminEmail);\n+  console.log(\"facebookUserEmail: \" + settings.facebookUserEmail);\n+  console.log(\"~~~~~~ Extra magic:\");\n+  if (settings.debugAfterwards) {\n+    console.log(\"You said \" + unusualColor(\"--debugAfterwards\") +\n+      \", so I will pause so you can debug, after the first test.\");\n+  }\n+  if (settings.noTimeout) {\n+    console.log(\"You said \" + unusualColor(\"--noTimeout\") +\n+      \", so I might wait forever for something in the browser.\");\n+  }\n+  console.log(\"==================================================\");\n+}\n+\n+\n+export default <TestSettings> settings;"
    },
    {
      "sha": "e4fd32e3b8ef79a964005eed0399b1694b0f9d56",
      "filename": "tests/e2e-wdio7/utils/settings.ts",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/settings.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/settings.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/settings.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1 @@\n+settings-exp-def.ts\n\\ No newline at end of file"
    },
    {
      "sha": "e30c5c966be89a80cfb61b9f0c6b7aab9ec4e34f",
      "filename": "tests/e2e-wdio7/utils/site-builder.ts",
      "status": "added",
      "additions": 646,
      "deletions": 0,
      "changes": 646,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/site-builder.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/site-builder.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/site-builder.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,646 @@\n+/// <reference path=\"../test-types2.ts\"/>\n+/// <reference path=\"../../../to-talkyard/src/to-talkyard.d.ts\" />\n+\n+import assert from './ty-assert';\n+import * as log from './log-and-die';\n+import * as make from './make';\n+\n+import * as _ from 'lodash';\n+import c from '../test-constants';\n+import { dieIf } from './log-and-die';\n+\n+\n+export function makeSiteOwnedByOwenBuilder() {\n+  return buildSite();\n+}\n+\n+\n+export function buildSite(site: SiteData | U = undefined, ps: { okInitEarly?: boolean } = {}) {\n+  // Wdio seems to retry, if we just throw an exception here. So exit the process instead\n+  // (because the test is buggy, better fix the bug).\n+  log.dieAndExitIf(!(global as any).wdioBeforeHookHasRun && !ps.okInitEarly,\n+      \"Calling buildSite(site?) before the wdio.conf.ts before() hook has run — \" +\n+      \"that means this spec hasn't been inited properly yet; variables might be \" +\n+      \"`undefined` [TyE603AKRTDH24]\");\n+\n+  if (!site) {\n+    site = make.emptySiteOwnedByOwen(ps);\n+  }\n+\n+  const api = {\n+    theSite: site,\n+\n+    getSite: function(): SiteData2 {\n+      return site;\n+    },\n+\n+    settings: (settings: Partial<TestSiteSettings>) => {\n+      site.settings = { ...site.settings, ...settings };\n+    },\n+\n+    defaultCreatedAtMs: make.DefaultCreatedAtMs,  // oops, was small d —> undef\n+\n+    addForumPageAndRootCategory: function(opts: {\n+      id: string,\n+      folder?: string,\n+      rootCategoryId: number,\n+      defaultCategoryId: number,\n+      authorId?: number,\n+      title?: string,\n+      introText?: string,\n+    }): PageJustAdded {\n+      const forumPage = api.addPage({\n+        dbgSrc: 'StBldrFrm',\n+        id: opts.id,\n+        folder: opts.folder || '/',\n+        showId: false,\n+        slug: '',\n+        role: c.TestPageRole.Forum,\n+        title: opts.title || \"Forum Title\",\n+        body: opts.introText || \"Forum intro text.\",\n+        categoryId: opts.rootCategoryId,\n+        authorId: opts.authorId || c.SystemUserId,\n+      });\n+\n+      const rootCategory = make.rootCategoryWithIdFor(opts.rootCategoryId, forumPage);\n+      rootCategory.defaultCategoryId = opts.defaultCategoryId;\n+      site.categories.push(rootCategory);\n+\n+      return forumPage;\n+    },\n+\n+\n+    addCategoryNoAboutPage: function(forumPage: PageJustAdded, opts: {\n+      id: number,\n+      extId?: ExtId,\n+      parentCategoryId?: number,\n+      name: string,\n+      slug: string,\n+      description: string,\n+      unlistCategory?: boolean,\n+      unlistTopics?: boolean,\n+      deletedAtMs?: number,\n+    }): CategoryJustAdded {\n+      assert.ok(!opts.deletedAtMs || opts.deletedAtMs >= forumPage.createdAtMs);\n+      const category = make.categoryWithIdFor(opts.id, forumPage);\n+      category.extId = opts.extId;\n+      category.parentId = opts.parentCategoryId;  // note: different name\n+      category.name = opts.name;\n+      category.slug = opts.slug;\n+      category.description = opts.description;\n+      category.unlistCategory = opts.unlistCategory;\n+      category.unlistTopics = opts.unlistTopics;\n+      category.deletedAtMs = opts.deletedAtMs;\n+      site.categories.push(category);\n+      return <CategoryJustAdded> category;\n+    },\n+\n+\n+    addCategoryWithAboutPage: function(forumPage: PageJustAdded, opts: {\n+      id: number,\n+      extId?: ExtId,\n+      parentCategoryId: number,\n+      name: string,\n+      slug: string,\n+      unlistCategory?: boolean,\n+      unlistTopics?: boolean,\n+      deletedAtMs?: number,\n+      aboutPageText: string,\n+    }): CategoryJustAdded {\n+      // REMOVE optsWithDescr, instead, will load category description via PageStuff. [502RKDJWF5]\n+      const optsWithDescr: any = _.assign({ description: opts.aboutPageText }, opts);\n+      const category = api.addCategoryNoAboutPage(forumPage, optsWithDescr);\n+\n+      const page = api.addPage({\n+        dbgSrc: 'StBldrCatWAbt',\n+        // There's a small risk this id will collide with another page in the site,\n+        // duing import, if the tests includes many other pages.\n+        id: '' + (opts.id + 19000),\n+        folder: '/',\n+        showId: false,\n+        slug: `about-cat-${opts.slug}`,\n+        role: c.TestPageRole.About,\n+        title: `About category ${opts.name}`,\n+        body: opts.aboutPageText,\n+        categoryId: category.id,\n+        authorId: c.SystemUserId,\n+      });\n+\n+      category.aboutPage = page;\n+      return <CategoryJustAdded> category;\n+    },\n+\n+\n+    addPage: function(opts: PageToAdd): PageJustAdded {\n+      const page = make.page(opts);\n+      site.pages.push(page);\n+\n+      // Page path.\n+      let path: PagePathWithId;\n+      if (opts.folder || opts.slug) {\n+        path = make.pagePath(opts.id, opts.folder || '/', opts.showId, opts.slug);\n+        site.pagePaths.push(path);\n+      }\n+\n+      // Page title.\n+      site.posts.push(make.post({\n+        page: page,\n+        nr: c.TitleNr,\n+        approvedSource: opts.title,\n+        approvedHtmlSanitized: opts.title,\n+      }));\n+\n+      // Page body.\n+      site.posts.push(make.post({\n+        page: page,\n+        nr: c.BodyNr,\n+        approvedSource: opts.body,\n+        approvedHtmlSanitized: `<p>${opts.body}</p>`,\n+      }));\n+\n+      return <PageJustAdded> _.assign({}, opts, page, path || {});\n+    },\n+\n+\n+    addPost: function(testPostData: NewTestPost) {\n+      site.posts.push(make.post(testPostData));\n+    },\n+\n+\n+    addGuest: function(guest: any) {\n+      site.guests.push(guest);\n+    },\n+\n+\n+    addMmember: function(username: string): Member {\n+      const member = make.member(username, {});\n+      (site as SiteData2).members.push(member);\n+      return member;\n+    },\n+\n+\n+    addMinions: function(ps: { oneWordName: string, howMany: number,\n+          mixedCaseUsernameStartWithUpper: boolean }): Member[] {\n+      const newMinions = [];\n+      for (let i = 0; i < ps.howMany; ++i) {\n+        const minion = make.minion({\n+          oneWordNameAndNumber: ps.oneWordName + (ps.howMany >= 2 ? i + 1 : ''),\n+          mixedCaseUsernameStartWithUpper: ps.mixedCaseUsernameStartWithUpper,\n+        });\n+        site.members.push(minion);\n+        newMinions.push(minion);\n+      }\n+      return newMinions;\n+    },\n+\n+\n+    addEmptyForum: function(opts: { title: string, introText?: string,\n+          members?: WellKnownMemberUsername[], categoryPerms?: 'FullMembersMayEditWiki' })\n+          : EmptyTestForum {\n+      const members = opts.members ||\n+              ['mons', 'modya', 'regina', 'corax', 'memah', 'maria', 'michael', 'mallory'];\n+      const forum: Partial<EmptyTestForum> = {\n+        siteData: site,\n+        forumPage: <PageToMake> undefined,\n+        members: {\n+          owen: site.members[0],\n+          adam: _.includes(members, 'adam') ? make.memberAdminAdam() : undefined,\n+          alice: _.includes(members, 'alice') ? make.memberAdminAlice() : undefined,\n+          mons: _.includes(members, 'mons') ? make.memberModeratorMons() : undefined,\n+          modya: _.includes(members, 'modya') ? make.memberModeratorModya() : undefined,\n+          corax: _.includes(members, 'corax') ? make.memberCorax() : undefined,\n+          regina: _.includes(members, 'regina') ? make.memberRegina() : undefined,\n+          trillian: _.includes(members, 'trillian') ? make.memberTrillian() : undefined,\n+          memah: _.includes(members, 'memah') ? make.memberMemah() : undefined,\n+          maria: _.includes(members, 'maria') ? make.memberMaria() : undefined,\n+          maja: _.includes(members, 'maja') ? make.memberMaja() : undefined,\n+          michael: _.includes(members, 'michael') ? make.memberMichael() : undefined,\n+          mallory: _.includes(members, 'mallory') ? make.memberMallory() : undefined,\n+        },\n+        guests: {\n+        },\n+        topics: {},\n+        categories: <any> {},\n+      };\n+\n+      if (forum.members.adam) site.members.push(forum.members.adam);\n+      if (forum.members.alice) site.members.push(forum.members.alice);\n+      if (forum.members.mons) site.members.push(forum.members.mons);\n+      if (forum.members.modya) site.members.push(forum.members.modya);\n+      if (forum.members.corax) site.members.push(forum.members.corax);\n+      if (forum.members.regina) site.members.push(forum.members.regina);\n+      if (forum.members.trillian) site.members.push(forum.members.trillian);\n+      if (forum.members.memah) site.members.push(forum.members.memah);\n+      if (forum.members.maria) site.members.push(forum.members.maria);\n+      if (forum.members.maja) site.members.push(forum.members.maja);\n+      if (forum.members.michael) site.members.push(forum.members.michael);\n+      if (forum.members.mallory) site.members.push(forum.members.mallory);\n+\n+      // What? Only do if unspecified! Fix some other time ...\n+      _.each(site.members, (m: Member) => m.trustLevel = c.TestTrustLevel.Basic);\n+      // ... then can remove these 3 lines:\n+      if (forum.members.corax) forum.members.corax.trustLevel = c.TestTrustLevel.CoreMember;\n+      if (forum.members.regina) forum.members.regina.trustLevel = c.TestTrustLevel.Regular;\n+      if (forum.members.trillian) forum.members.trillian.trustLevel = c.TestTrustLevel.Trusted;\n+\n+      const rootCategoryId = 1;\n+      const defaultCategoryId = 2;\n+\n+      const forumPage = forum.forumPage = api.addForumPageAndRootCategory({\n+        id: c.FirstPageId,\n+        rootCategoryId: rootCategoryId,\n+        defaultCategoryId: defaultCategoryId,\n+        title: opts.title,\n+        introText: opts.introText,\n+      });\n+\n+      forum.categories.rootCat = forum.categories.rootCategory = { id: rootCategoryId };\n+\n+      // ---- Categories\n+\n+      forum.categories.catA =\n+            forum.categories.categoryA = api.addCategoryWithAboutPage(forumPage, {\n+        id: defaultCategoryId,\n+        parentCategoryId: rootCategoryId,\n+        name: \"CategoryA\",\n+        slug: 'category-a',\n+        aboutPageText: \"Category A description.\",\n+      });\n+      api.addDefaultCatPerms(site, forum.categories.categoryA.id, 1, opts.categoryPerms);\n+\n+      return forum as EmptyTestForum;\n+    },\n+\n+\n+    addTwoCatsForum: function(opts: { title: string, introText?: string,\n+          members?: WellKnownMemberUsername[], categoryExtId?: string,\n+          categoryPerms?: 'FullMembersMayEditWiki' }): TwoCatsTestForum {\n+\n+      const forum: TwoCatsTestForum = <TwoCatsTestForum> api.addEmptyForum(opts);\n+      const forumPage: PageJustAdded = forum.forumPage;\n+\n+      forum.categories.staffCat =\n+            forum.categories.staffOnlyCategory = api.addCategoryWithAboutPage(forumPage, {\n+        id: 3,  // 1 = root, 2 = default category A, 3 = this, staff\n+        parentCategoryId: forumPage.categoryId,\n+        name: \"Staff Only\",\n+        slug: 'staff-only',\n+        aboutPageText: \"Staff only category description.\",\n+      });\n+\n+      const morePerms = !!opts.categoryPerms;\n+\n+      // Staff only:\n+      // If 'FullMembersMayEditWiki', Category A has 3 perms:\n+      // 1) for Everyone, 2) for Full-members-to-edit-wiki, and 3) for Staff.\n+      // Then, the next availabe perm id is 3 + 1 = 4  (+ 1 is the root cat).\n+      // REFACTOR use fn findNextPermId() instead? [refctr_nxt_prmid]\n+      const staffPermsId = morePerms ? 4 : 3;\n+      site.permsOnPages.push({\n+        id: staffPermsId,\n+        forPeopleId: c.StaffId,\n+        onCategoryId: forum.categories.staffOnlyCategory.id,\n+        mayEditPage: true,\n+        mayEditComment: true,\n+        mayEditWiki: true,\n+        mayEditOwn: true,\n+        mayDeletePage: true,\n+        mayDeleteComment: true,\n+        mayCreatePage: true,\n+        mayPostComment: true,\n+        maySee: true,\n+        maySeeOwn: true,\n+      });\n+\n+      return forum;\n+    },\n+\n+\n+    addCatABForum: function(opts: { title: St, introText?: St,\n+          members?: WellKnownMemberUsername[], categoryAExtId?: St,\n+          categoryPerms?: 'FullMembersMayEditWiki' }): CatABTestForum {\n+\n+      const forum: CatABTestForum = api.addTwoCatsForum(opts) as CatABTestForum;\n+      const forumPage: PageJustAdded = forum.forumPage;\n+\n+      // If 'FullMembersMayEditWiki', Category A has 3 perms:\n+      // 1) for Everyone, 2) for Full-members-to-edit-wiki, and 3) for Staff.\n+      // Then, the next availabe perm id is 3 + 1 = 4  (+ 1 is the root cat).\n+      // REFACTOR use fn findNextPermId() instead? [refctr_nxt_prmid]\n+      const morePerms = !!opts.categoryPerms;\n+      const startPermsId = (morePerms ? 4 : 3) + 1;   // +1  is for the staff cat\n+\n+      forum.categories.catB = api.addCategoryWithAboutPage(forumPage, {\n+        id: 4,  // 1 = root, 2 = category A, 3 = staff, 4 = this\n+        parentCategoryId: forumPage.categoryId,\n+        name: \"CatB\",\n+        slug: 'cat-b',\n+        aboutPageText: \"Category B description.\",\n+      });\n+      api.addDefaultCatPerms(site, forum.categories.catB.id,\n+            startPermsId, opts.categoryPerms);\n+\n+      return forum;\n+    },\n+\n+\n+    addTwoPagesForum: function(opts: { title: string, introText?: string,\n+          members?: WellKnownMemberUsername[], categoryExtId?: string,\n+          categoryPerms?: 'FullMembersMayEditWiki' })\n+          : TwoPagesTestForum {\n+\n+      const forum: TwoPagesTestForum = <TwoPagesTestForum> api.addTwoCatsForum(opts);\n+      const forumPage: PageJustAdded = forum.forumPage;\n+\n+      // ---- A \"Specific Category\"\n+\n+      // id: 4, because 1 = root, 2 = default category A, 3 = staff cat.\n+      const specificCategoryId = 4;\n+      forum.categories.specificCat =\n+            forum.categories.specificCategory = api.addCategoryWithAboutPage(forumPage, {\n+        id: specificCategoryId,\n+        extId: opts.categoryExtId,\n+        parentCategoryId: forumPage.categoryId,\n+        name: \"Specific Category\",\n+        slug: 'specific-category',\n+        aboutPageText: \"The Specific Category description.\",\n+      });\n+\n+      // REFACTOR use fn findNextPermId() instead? [refctr_nxt_prmid]\n+      const morePerms = !!opts.categoryPerms;\n+      const staffPermsId = morePerms ? 4 : 3; // 1 & 2 = for the default category\n+\n+      api.addDefaultCatPerms(site, specificCategoryId, staffPermsId + 1,\n+              opts.categoryPerms);\n+\n+      // ---- Two pages\n+\n+      dieIf(!forum.members.michael, \"Add member Michael, he's a page author [TyE503MQS]\");\n+      dieIf(!forum.members.maria, \"Add member Maria, she's a page author [TyE503MQ7]\");\n+\n+      forum.topics.byMariaCatA = forum.topics.byMariaCategoryA = api.addPage({\n+        dbgSrc: 'LgFrmTstTpcs',\n+        id: 'byMariaCategoryA',\n+        folder: '/',\n+        showId: false,\n+        slug: 'by-maria-category-a',\n+        role: c.TestPageRole.Discussion,\n+        title: 'By Maria in CategoryA title',\n+        body: 'By Maria in CategoryA, text text text.',\n+        categoryId: forum.categories.categoryA.id,\n+        authorId: forum.members.maria.id,\n+      });\n+\n+      forum.topics.byMichaelCatA = forum.topics.byMichaelCategoryA = api.addPage({\n+        dbgSrc: 'LgFrmTstTpcs',\n+        id: 'byMichaelCategoryA',\n+        folder: '/',\n+        showId: false,\n+        slug: 'by-michael-category-a',\n+        role: c.TestPageRole.Question,\n+        title: 'By Michael in CategoryA title',\n+        body: 'By Michael in CategoryA, text text text.',\n+        categoryId: forum.categories.categoryA.id,\n+        authorId: forum.members.michael.id,\n+      });\n+\n+      return forum;\n+    },\n+\n+\n+    addLargeForum: function(opts: { title: string, introText?: string,\n+          members?: WellKnownMemberUsername[] })\n+          : LargeTestForum {\n+      const forum: LargeTestForum = <LargeTestForum> api.addEmptyForum(opts);\n+      const forumPage: PageJustAdded = forum.forumPage;\n+      const categoryBId = 3;\n+      const staffOnlyCategoryId = 4;\n+      const unlistedCategoryId = 5;\n+      const deletedCategoryId = 6;\n+\n+      forum.categories.catB =\n+            forum.categories.categoryB = api.addCategoryWithAboutPage(forumPage, {\n+        id: categoryBId,\n+        parentCategoryId: forumPage.categoryId,\n+        name: \"CategoryB\",\n+        slug: 'category-b',\n+        aboutPageText: \"Category B description.\",\n+      });\n+\n+      forum.categories.staffCat =\n+            forum.categories.staffOnlyCategory = api.addCategoryWithAboutPage(forumPage, {\n+        id: staffOnlyCategoryId,\n+        parentCategoryId: forumPage.categoryId,\n+        name: \"Staff Only\",\n+        slug: 'staff-only',\n+        aboutPageText: \"Staff only category description.\",\n+      });\n+\n+      forum.categories.unlistedCat =\n+            forum.categories.unlistedCategory = api.addCategoryWithAboutPage(forumPage, {\n+        id: unlistedCategoryId,\n+        parentCategoryId: forumPage.categoryId,\n+        name: \"Unlisted Cat\",\n+        slug: 'unlisted-cat',\n+        aboutPageText: \"Unlisted category description.\",\n+        unlistCategory: true,\n+      });\n+\n+      forum.categories.deletedCat =\n+            forum.categories.deletedCategory = api.addCategoryWithAboutPage(forumPage, {\n+        id: deletedCategoryId,\n+        parentCategoryId: forumPage.categoryId,\n+        name: \"Deleted Category\",\n+        slug: 'deleted-category',\n+        aboutPageText: \"Deleted category description.\",\n+        deletedAtMs: forumPage.createdAtMs + 1000 * 3600 * 24,\n+      });\n+\n+      // ---- Permissions on categories\n+\n+      api.addDefaultCatPerms(site, forum.categories.categoryB.id, 3);\n+      api.addDefaultCatPerms(site, forum.categories.unlistedCategory.id, 5);\n+      api.addDefaultCatPerms(site, forum.categories.deletedCategory.id, 7);\n+\n+      // Staff only:\n+      site.permsOnPages.push({\n+        id: 9,\n+        forPeopleId: c.StaffId,\n+        onCategoryId: forum.categories.staffOnlyCategory.id,\n+        mayEditPage: true,\n+        mayEditComment: true,\n+        mayEditWiki: true,\n+        mayEditOwn: true,\n+        mayDeletePage: true,\n+        mayDeleteComment: true,\n+        mayCreatePage: true,\n+        mayPostComment: true,\n+        maySee: true,\n+        maySeeOwn: true,\n+      });\n+\n+      // ---- Pages\n+\n+      forum.topics.aboutCatA =\n+      forum.topics.aboutCategoryA = { title: 'About category CategoryA' };\n+      forum.topics.aboutCatB =\n+      forum.topics.aboutCategoryB = { title: 'About category CategoryB' };\n+      forum.topics.aboutUnlistedCat =\n+      forum.topics.aboutUnlistedCategory = { title: 'About category Unlisted Cat' };\n+      forum.topics.aboutStaffCat = { title: 'About category Staff Only' };\n+      forum.topics.aboutStaffOnlyCategory = forum.topics.aboutStaffCat;\n+      forum.topics.aboutDeletedCat =\n+      forum.topics.aboutDeletedCategory = { title: 'About category Deleted Category' };\n+\n+      forum.topics.byMariaCategoryA = api.addPage({\n+        dbgSrc: 'LgFrmTstTpcs',\n+        id: 'byMariaCategoryA',\n+        folder: '/',\n+        showId: false,\n+        slug: 'by-maria-category-a',\n+        role: c.TestPageRole.Discussion,\n+        title: 'By Maria in CategoryA title',\n+        body: 'By Maria in CategoryA, text text text.',\n+        categoryId: forum.categories.categoryA.id,\n+        authorId: forum.members.maria.id,\n+      });\n+      forum.topics.byMariaCategoryANr2 = api.addPage({\n+        dbgSrc: 'LgFrmTstTpcs',\n+        id: 'byMariaCategoryA_2',\n+        folder: '/',\n+        showId: false,\n+        slug: 'by-maria-category-a-2',\n+        role: c.TestPageRole.Discussion,\n+        title: 'By Maria in CategoryA nr 2 title',\n+        body: 'By Maria in CategoryA nr 2, text text text, 2.',\n+        categoryId: forum.categories.categoryA.id,\n+        authorId: forum.members.maria.id,\n+      });\n+      forum.topics.byMariaCategoryANr3 = api.addPage({\n+        dbgSrc: 'LgFrmTstTpcs',\n+        id: 'byMariaCategoryA_3',\n+        folder: '/',\n+        showId: false,\n+        slug: 'by-maria-category-a-3',\n+        role: c.TestPageRole.Discussion,\n+        title: 'By Maria in CategoryA nr 3 title',\n+        body: 'By Maria in CategoryA nr 3, text text text, 3.',\n+        categoryId: forum.categories.categoryA.id,\n+        authorId: forum.members.maria.id,\n+      });\n+\n+      forum.topics.byMariaCategoryB = api.addPage({\n+        dbgSrc: 'LgFrmTstTpcs',\n+        id: 'byMariaCategoryB',\n+        folder: '/',\n+        showId: false,\n+        slug: 'by-maria-category-b',\n+        role: c.TestPageRole.Discussion,\n+        title: 'By Maria in CategoryB title',\n+        body: 'By Maria in CategoryB, text text text.',\n+        categoryId: forum.categories.categoryB.id,\n+        authorId: forum.members.maria.id,\n+      });\n+\n+      forum.topics.byMariaStaffOnlyCat = api.addPage({\n+        dbgSrc: 'LgFrmTstTpcs',\n+        id: 'byMariaStaffOnlyCat',\n+        folder: '/',\n+        showId: false,\n+        slug: 'by-maria-staff-only-cat',\n+        role: c.TestPageRole.Discussion,\n+        title: 'By Maria in Staff-Only cat title',\n+        body: 'By Maria in Staff-Only cat, text text text.',\n+        categoryId: forum.categories.staffOnlyCategory.id,\n+        authorId: forum.members.maria.id,\n+      });\n+\n+      forum.topics.byMariaUnlistedCat = api.addPage({\n+        dbgSrc: 'LgFrmTstTpcs',\n+        id: 'byMariaUnlistedCat',\n+        folder: '/',\n+        showId: false,\n+        slug: 'by-maria-unlisted-cat',\n+        role: c.TestPageRole.Discussion,\n+        title: 'By Maria in Unlisted cat title',\n+        body: 'By Maria in Unlisted cat, text text text.',\n+        categoryId: forum.categories.unlistedCategory.id,\n+        authorId: forum.members.maria.id,\n+      });\n+\n+      forum.topics.byMariaDeletedCat = api.addPage({\n+        dbgSrc: 'LgFrmTstTpcs',\n+        id: 'byMariaDeletedCat',\n+        folder: '/',\n+        showId: false,\n+        slug: 'by-maria-deleted-cat',\n+        role: c.TestPageRole.Discussion,\n+        title: 'By Maria in Deleted cat title',\n+        body: 'By Maria in Deleted cat, text text text.',\n+        categoryId: forum.categories.deletedCategory.id,\n+        authorId: forum.members.maria.id,\n+      });\n+\n+      forum.topics.byMichaelCategoryA = api.addPage({\n+        dbgSrc: 'LgFrmTstTpcs',\n+        id: 'byMichaelCategoryA',\n+        folder: '/',\n+        showId: false,\n+        slug: 'by-michael-category-a',\n+        role: c.TestPageRole.Question,\n+        title: 'By Michael in CategoryA title',\n+        body: 'By Michael in CategoryA, text text text.',\n+        categoryId: forum.categories.categoryA.id,\n+        authorId: forum.members.michael.id,\n+      });\n+\n+      return forum;\n+    },\n+\n+    addDefaultCatPerms: (site: SiteData, categoryId: CategoryId, startPermissionId: PermissionId,\n+            categoryPerms?: 'FullMembersMayEditWiki') => {\n+      const everyonesPerms = {\n+        id: startPermissionId,\n+        forPeopleId: c.EveryoneId,\n+        onCategoryId: categoryId,\n+        mayEditOwn: true,\n+        mayCreatePage: true,\n+        mayPostComment: true,\n+        maySee: true,\n+        maySeeOwn: true,\n+      };\n+      site.permsOnPages.push(everyonesPerms);\n+\n+      let nextPerm = startPermissionId + 1;\n+\n+      if (categoryPerms === 'FullMembersMayEditWiki') {\n+        site.permsOnPages.push({\n+          ...everyonesPerms,\n+          id: nextPerm,\n+          forPeopleId: c.FullMembersId,\n+          mayEditWiki: true,\n+        });\n+        nextPerm += 1;\n+      }\n+\n+      site.permsOnPages.push({\n+        id: nextPerm,\n+        forPeopleId: c.StaffId,\n+        onCategoryId: categoryId,\n+        mayEditPage: true,\n+        mayEditComment: true,\n+        mayEditWiki: true,\n+        mayEditOwn: true,\n+        mayDeletePage: true,\n+        mayDeleteComment: true,\n+        mayCreatePage: true,\n+        mayPostComment: true,\n+        maySee: true,\n+        maySeeOwn: true,\n+      });\n+    },\n+\n+  };\n+\n+  return api;\n+}"
    },
    {
      "sha": "208f0cade7a7f674dc2e884f3ef51fb48b91644b",
      "filename": "tests/e2e-wdio7/utils/ty-assert.ts",
      "status": "added",
      "additions": 124,
      "deletions": 0,
      "changes": 124,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/ty-assert.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/ty-assert.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/ty-assert.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,124 @@\n+import * as _ from 'lodash';\n+import * as assert from 'assert';\n+import { dieIf } from './log-and-die';\n+\n+// (Also see: https://www.npmjs.com/package/power-assert )\n+\n+\n+function toPrettyString(sth): string {\n+  if (_.isObject(sth)) return JSON.stringify(sth, undefined, 2);\n+  return `${sth}`;\n+}\n+\n+\n+const tyAssert = {\n+  ...assert,\n+\n+  that: (test, message?: St, sth?) => {\n+    tyAssert.ok(test, message, sth);\n+  },\n+\n+  ok: (test, message?: St, sth?) => {\n+    const wholeMessage = (message || '') + (sth ? toPrettyString(sth) : '');\n+    assert.ok(test, wholeMessage);\n+  },\n+\n+\n+  fail: (message: string, sth?) => {\n+    const wholeMessage = message + (sth ? toPrettyString(sth) : '');\n+    assert.fail(wholeMessage);\n+  },\n+\n+  deepEq: function<T>(actual: unknown, expected: T, message?: St) {\n+    assert.deepStrictEqual<T>(actual, expected, message);\n+  },\n+\n+  not: (what, message?) => {\n+    assert.ok(!what, message);\n+  },\n+\n+  notEq: (actual, wrongValue, message?) => {\n+    tyAssert.ok(actual !== wrongValue,\n+      `  assert.notEq: Equals the wrong value:\\n` +\n+      `           actual:  ${JSON.stringify(actual)}\\n` +\n+      `    should not be:  ${JSON.stringify(wrongValue)}\\n`);\n+  },\n+\n+  eq: (actual, expected, message?: string, detailsObj?) => {\n+    // Show the two values on two lines, aligned, so one sees at a glance\n+    // what's wrong.\n+    let wholeMessage = '\\n\\n' +\n+          `  assert.eq: Actual value differs from expected value:\\n` +\n+          `        actual:  ${actual}\\n` +\n+          `      expected:  ${expected}\\n`;\n+    if (message) {\n+      wholeMessage +=\n+          `  Details:\\n` +\n+          `    ${toPrettyString(message) +\n+                    (detailsObj ? toPrettyString(detailsObj) : '')\n+                }\\n`;\n+    }\n+    assert.strictEqual(actual, expected, wholeMessage);\n+  },\n+\n+  refEq: (actual, expected) => {\n+    assert.ok(actual === expected,\n+      `  assert.refEq: Not reference-equal:\\n` +\n+      `      actual:  ${JSON.stringify(actual)}\\n` +\n+      `    expected:  ${JSON.stringify(expected)}\\n`);\n+  },\n+\n+  greaterThan: (actual, min) => {\n+    assert.ok(actual > min,\n+      `Value too small: ${JSON.stringify(actual)}, ` +\n+          `should be at least: ${JSON.stringify(min)}`);\n+  },\n+\n+  matches: (text: string, regexOrString: RegExp | string) => {\n+    const regex = _.isString(regexOrString) ?\n+            new RegExp(regexOrString) : regexOrString;\n+    assert.ok(regex.test(text), '\\n\\n' +\n+        `  assert.matches:\\n` +\n+        `       This regex:  ${regex.toString()}\\n` +\n+        `       does not match:  ${inlineOrDashPara(text)}\\n`);\n+  },\n+\n+  includes: (text: string, expectedSubstring: string, message?: string) => {\n+    // Could make this work w regexs too.\n+\n+    dieIf(!_.isString(text), `\\`text\\` is not a string, here it is:  ${text}`);\n+    dieIf(!_.isString(expectedSubstring), `\\`expectedSubstring\\` is not a string, ` +\n+          `here it is:  ${expectedSubstring}`);\n+\n+    const ix = text.indexOf(expectedSubstring);\n+    assert.ok(ix >= 0, '\\n\\n' + (message ||\n+      `  assert.includes:\\n` +\n+      `     This text:  \"${expectedSubstring}\"\\n` +\n+      `     is missing from:  ${inlineOrDashPara(text)}\\n`));\n+  },\n+\n+  excludes: (text: string, unexpectedSubstring: string, message?: string) => {\n+    tyAssert.ok(text.length > 0, 'TyE4906895SK', 'text empty');\n+    const ix = text.indexOf(unexpectedSubstring);\n+    assert.ok(ix === -1,\n+      message || `This: \"${unexpectedSubstring}\" is incorrectly included in: \"${text}\"`);\n+  },\n+\n+  numSubstringsEq: (text: St, substringNoSpecialChars: St, numExpected: Nr) => {\n+    const regex = new RegExp(substringNoSpecialChars, 'gs');\n+    const numActual = (text.match(regex) || []).length;\n+    tyAssert.eq(numActual, numExpected,\n+          `Wrong num matches of:  ${regex}  in:  ${inlineOrDashPara(text)}`);\n+  }\n+};\n+\n+\n+function inlineOrDashPara(text: string): string {\n+  return text.indexOf('\\n') === -1 ? `\"${text}\"` : (\n+        `(between the ---)\\n` +\n+        `------------------------------------------------------------------------\\n` +\n+        `${text}\\n` +\n+        `------------------------------------------------------------------------\\n`);\n+}\n+\n+export default tyAssert;"
    },
    {
      "sha": "866ca6e054b92aa20611ab360f85322c3f15dd8e",
      "filename": "tests/e2e-wdio7/utils/utils.ts",
      "status": "added",
      "additions": 567,
      "deletions": 0,
      "changes": 567,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/utils.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/utils/utils.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/utils.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,567 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from './ty-assert';\n+import * as fs from 'fs';\n+import { logMessage, logUnusual, dieIf } from './log-and-die';\n+import settings from './settings';\n+import c from '../test-constants';\n+\n+\n+\n+export function firstDefinedOf(x, y, z?) {\n+  return !_.isUndefined(x) ? x : (!_.isUndefined(y) ? y : z);\n+}\n+\n+export function encodeInBase64(text: string): string {\n+  return Buffer.from(text, 'utf8').toString('base64');\n+}\n+\n+export function regexEscapeSlashes(origin: string): string {\n+  return origin.replace(/\\//g, '\\\\/');\n+}\n+\n+export function generateTestId(): string {\n+  return Date.now().toString().slice(3, 10);\n+}\n+\n+export function getLocalHostname(anyDefaultNameExclTestPrefix?: string): string {\n+  return settings.localHostname || (\n+      anyDefaultNameExclTestPrefix\n+          ? settings.testLocalHostnamePrefix + anyDefaultNameExclTestPrefix\n+          : (global as any).__thisSpecLocalHostname);\n+}\n+\n+export function makeSiteOrigin(localHostname: string): string {\n+  return settings.scheme + '://' + localHostname + '.' + settings.newSiteDomain;\n+}\n+\n+export function makeSiteOriginRegexEscaped(localHostname: string): string {\n+  return settings.scheme + ':\\\\/\\\\/' + localHostname + '.' + settings.newSiteDomain;\n+}\n+\n+export function makeCreateSiteWithFakeIpUrl(): St {\n+  return _makeCreateSiteUrlImpl(false);\n+}\n+\n+export function makeCreateEmbeddedSiteWithFakeIpUrl(): St {\n+  return _makeCreateSiteUrlImpl(true);\n+}\n+\n+function _makeCreateSiteUrlImpl(isEmbeddedSite: boolean): St {\n+  function randomIpPart() { return '.' + Math.floor(Math.random() * 256); }\n+  const ip = '0' + randomIpPart() + randomIpPart() + randomIpPart();\n+  const embedded = isEmbeddedSite ? '/embedded-comments' : '';\n+  return settings.mainSiteOrigin + `/-/create-site${embedded}?fakeIp=${ip}` +\n+      `&e2eTestPassword=${settings.e2eTestPassword}&testSiteOkDelete=true`;\n+}\n+\n+export function findFirstLinkToUrlIn(url: string, text: string): string {\n+  return _findFirstLinkToUrlImpl(url, text, true);\n+}\n+\n+export function findAnyFirstLinkToUrlIn(url: string, text: string): string | U {\n+  return _findFirstLinkToUrlImpl(url, text, false);\n+}\n+\n+function _findFirstLinkToUrlImpl(url: string, text: string, mustMatch: boolean): string | U {\n+  // Make sure ends with \", otherwise might find: <a href=\"..\">http://this..instead..of..the..href</a>.\n+  // This:  (?: ...)  is a non-capture group, so the trailing \" won't be incl in the match.\n+  const regexString = '(' + regexEscapeSlashes(url) + '[^\"\\']*)(?:[\"\\'])';\n+  const matches = text.match(new RegExp(regexString));\n+  dieIf(mustMatch && !matches,\n+      `No link matching /${regexString}/ found in email [EsE5GPYK2], text: ${text}`);\n+  return matches ? matches[1] : undefined;\n+}\n+\n+\n+export function numReplies(n: Partial<NumReplies>): NumReplies {\n+  return {\n+    numNormal: 0,\n+    numPreviews: 0,\n+    numDrafts: 0,\n+    numUnapproved: 0,\n+    numDeleted: 0,\n+    ...n,\n+  };\n+}\n+\n+\n+const __brokenPreview = '.s_LnPv-Err';\n+const __intLinkProvider: LinkPreviewProvider = { name: 'Int', inSandboxedIframe: false };\n+\n+\n+// REMOVE use makeLinkPreviewSelector(..) instead.\n+export function makePreviewOkSelector(provider: LinkPreviewProvider | 'InternalLink',\n+        opts: { url?: St } = {}): St {\n+  return makeLinkPreviewSelector(provider, { ...opts, broken: false });\n+}\n+\n+\n+// REMOVE use makeLinkPreviewSelector(..) instead.\n+export function makePreviewBrokenSelector(provider: LinkPreviewProvider | 'InternalLink',\n+        opts: { url?: St, errCode?: St } = {}): St {\n+  return makeLinkPreviewSelector(provider, { ...opts, broken: true });\n+}\n+\n+\n+export function makeLinkPreviewSelector(provider: LinkPreviewProvider | 'InternalLink',\n+          opts: { url?: St, broken?: Bo, errCode?: St } = {}): St {\n+\n+    // Internal broken links renders as normal links, in case some people\n+    // may actually see the linked page — maybe it's access restricted. Then\n+    // it'd be weird with a \"Not found\" error text.  [brkn_int_ln_pv]\n+    if (provider === 'InternalLink' && opts.broken) {\n+      // The error code might be longer than opts.errCode — so don't require\n+      // a full match.  It's not incl in prod builds.\n+      const dashErrCode = !opts.errCode || settings.prod ? '' : '-' + opts.errCode;\n+      let sel = `a[class^=\"c_LnPvNone${dashErrCode}\"]`;\n+      if (opts.url) {\n+        sel += `[href=\"${opts.url}\"]`;\n+      }\n+      return sel;\n+    }\n+\n+    if (provider === 'InternalLink') provider = __intLinkProvider;\n+    const colonNotPara = opts.broken ? '' : ':not(';\n+    const endPara      = opts.broken ? '' : ')';\n+    let sel = `.s_LnPv-${provider.lnPvClassSuffix || provider.name}${\n+          colonNotPara}${\n+            __brokenPreview}${\n+          endPara}`;\n+    if (opts.url) sel += ` a[href=\"${opts.url}\"]`;\n+    return sel;\n+}\n+\n+\n+export async function ssoLogin(ps: { member: Member, ssoId, browser,\n+        origin: string, server, apiSecret: string, apiRequesterId?: UserId,\n+        thenGoTo: string }) {\n+    const extUser = makeExternalUserFor(ps.member, { ssoId: ps.ssoId });\n+    logMessage(`SSO: Upserting @${ps.member.username}, getting a one time secret ...`);\n+    const oneTimeLoginSecret = await ps.server.apiV0.upsertUserGetLoginSecret({\n+        origin: ps.origin,\n+        apiRequesterId: ps.apiRequesterId || c.SysbotUserId,\n+        apiSecret: ps.apiSecret,\n+        externalUser: extUser });\n+    logMessage(`SSO: Logging in as @${ps.member.username}, using one time secret ...`);\n+    await ps.browser.apiV0.loginWithSecret({\n+        origin: ps.origin,\n+        oneTimeSecret: oneTimeLoginSecret,\n+        thenGoTo: ps.thenGoTo || '/' });\n+    logMessage(`SSO: Done`);\n+  }\n+\n+\n+export function makeExternalUserFor(member: Member, opts: {\n+    ssoId: string,\n+    primaryEmailAddress?: string,\n+    isEmailAddressVerified?: boolean,\n+    username?: string,\n+    fullName?: string,\n+    avatarUrl?: string,\n+    aboutUser?: string,\n+    isAdmin?: boolean,\n+    isModerator?: boolean,\n+  }): ExternalUser {\n+    return {\n+      ssoId: opts.ssoId,\n+      primaryEmailAddress: firstDefinedOf(opts.primaryEmailAddress, member.emailAddress),\n+      isEmailAddressVerified: firstDefinedOf(opts.isEmailAddressVerified, !!member.emailVerifiedAtMs),\n+      username: firstDefinedOf(opts.username, member.username),\n+      fullName: firstDefinedOf(opts.fullName, member.fullName),\n+      avatarUrl: opts.avatarUrl,\n+      aboutUser: opts.aboutUser,\n+      isAdmin: firstDefinedOf(opts.isAdmin, member.isAdmin),\n+      isModerator: firstDefinedOf(opts.isModerator, member.isModerator),\n+    };\n+}\n+\n+\n+export function makeEmbeddedCommentsHtml(ps: { pageName: string, discussionId?: string,\n+      talkyardPageId?: string, categoryRef?: string,\n+      localHostname?: string, color?: string, bgColor: string, htmlToPaste?: string,\n+      authnToken?: St | Ay }): St {\n+    // Dupl code [046KWESJJLI3].\n+    dieIf(!!ps.localHostname && !!ps.htmlToPaste, 'TyE502PK562');\n+    dieIf(!ps.localHostname && !ps.htmlToPaste, 'TyE7FHQJ45X');\n+    let htmlToPaste = ps.htmlToPaste;\n+\n+    const discIdAttr = `data-discussion-id=\"${ps.discussionId || ''}\"`;\n+    const catRefAttr = ps.categoryRef ? `data-category=\"${ps.categoryRef}\"` : '';\n+\n+    if (ps.discussionId && htmlToPaste) {\n+      htmlToPaste = htmlToPaste.replace(\n+        ` data-discussion-id=\"\"`, ` data-discussion-id=\"${ps.discussionId}\"`);\n+    }\n+\n+    const authnTokenScript = !ps.authnToken ? '' : `\n+<script>\n+talkyardAuthnToken = ${JSON.stringify(ps.authnToken)};\n+</script>`;\n+    const ieEmpty = !ps.discussionId ? ', i.e. <b>no</b> id' : '';\n+    let resultHtmlStr = `\n+<html>\n+<head><title>Embedded comments E2E test</title></head>\n+<body style=\"background: ${ps.bgColor || 'black'}; color: ${ps.color || '#ccc'}; font-family: monospace; font-weight: bold;\">\n+<p>Embedded comments E2E test page \"${ps.pageName}\".<br>\n+Discussion id: \"${ps.discussionId || ''}\"${ieEmpty}.<br>\n+Talkyard page id: \"${ps.talkyardPageId || ''}\".<br>\n+Category ref: \"${ps.categoryRef || ''}\"${ps.categoryRef ? '' : \" (none)\"}.<br>\n+Ok to delete. The comments: (generated by the admin js bundle [2JKWTQ0])</p>\n+<hr>\n+${ htmlToPaste ? htmlToPaste :\n+authnTokenScript + `\n+<script>talkyardServerUrl='${settings.scheme}://${ps.localHostname}.localhost';</script>\n+<script async defer src=\"${settings.scheme}://${ps.localHostname}.localhost/-/talkyard-comments.js\"></script>\n+<div class=\"talkyard-comments\" ${discIdAttr} ${catRefAttr} style=\"margin-top: 45px;\">\n+`}\n+<hr>\n+<p>/End of page.</p>\n+</body>\n+</html>`;\n+\n+    if (ps.talkyardPageId) {\n+      // The attribute  data-talkyard-page-id  isn't included by default.\n+      resultHtmlStr = resultHtmlStr.replace(\n+        ` data-discussion-id=`,\n+        ` data-talkyard-page-id=\"${ps.talkyardPageId}\" data-discussion-id=`);\n+    }\n+\n+    return resultHtmlStr;\n+  }\n+\n+\n+export function makeManyEmbeddedCommentsHtml(ps: { pageName: St, discussionIds: St[],\n+      localHostname?: St, color?: St, bgColor: St }): St {\n+    // Dupl code [046KWESJJLI3].\n+\n+    let multiCommentsHtml = '';\n+    for (let discId of ps.discussionIds) {\n+    multiCommentsHtml += `\n+<hr>\n+<p>Discussion id '${discId}':</p>\n+<div class=\"talkyard-comments\" data-discussion-id=\"${discId}\" style=\"\">\n+</div\n+`\n+    }\n+\n+    let resultHtmlStr = `\n+<html>\n+<head>\n+<title>Embedded comments many iframes E2E test</title>\n+<style>\n+body { background: ${ps.bgColor || 'black'}; color: ${ps.color || '#ccc'}; font-family: monospace; }\n+iframe { margin: 15px 0 25px; }\n+</style>\n+</head>\n+<body>\n+<div id=\"comment_iframes\">\n+<p>Embedded comments E2E test page \"${ps.pageName}\".<br>\n+Discussion ids: \"${JSON.stringify(ps.discussionIds)}.<br>\n+Ok to delete. The comments: (generated by the admin js bundle [603MRATE24])</p>\n+<hr>\n+<script>\n+talkyardManyCommentIframes = true;\n+talkyardServerUrl='${settings.scheme}://${ps.localHostname}.localhost';\n+</script>\n+<script async defer src=\"${settings.scheme}://${ps.localHostname}.localhost/-/talkyard-comments.js\"></script>\n+${multiCommentsHtml}\n+<hr>\n+</div>\n+<p>/End of page.</p>\n+</body>\n+</html>`;\n+\n+    return resultHtmlStr;\n+  }\n+\n+\n+export function makeBlogPostIndexPageHtml(ps: { localHostname?: St, urlA: St, urlB: St, urlC: St,\n+          urlD: St, urlE: St, urlF: St, urlG: St,\n+          urlH: 'NoHref', urlI: 'NoLinkTag' }): St {\n+    // For now:\n+    const tyServerOrigin = `${settings.scheme}://${ps.localHostname}.localhost`;\n+    const html = `\n+        <html>\n+        <head>\n+        <title>Embedded comments E2E test</title>\n+        <style>a { color: white }</style>\n+        </head>\n+        <body style=\"background: #000; color: #bbb; font-family: monospace;\">\n+        <p>Embedded comments E2E test page, for showing comment counts. [7J3RKHULWF4]<p>\n+\n+        <script>talkyardServerUrl='${tyServerOrigin}';</script>\n+        <script async defer src='${tyServerOrigin}/-/talkyard-comments.js'></script>\n+\n+        <h2>Test blog posts list</h2>\n+        <ol>${''\n+          /* Trying with a bit different HTML structure below, in each <li>\n+                  — everything should work fine  */}\n+          <li>\n+            <a href=\"${ps.urlA}\">\n+              A:\n+              <span class=\"ty_NumCmts\"></span> comments,\n+              <span class=\"ty_NumOpLikeVotes\"></span> likes, href: ${ps.urlA}<br>\n+            </a>\n+          </li>\n+          <li>\n+            <a href=\"${ps.urlB}\">\n+              <span>B: </span>\n+              <span class=\"ty_NumCmts\"></span> comments,\n+              <span class=\"ty_NumOpLikeVotes\"></span> likes, href: ${ps.urlB}<br>\n+            </a>\n+          </li>\n+          <li>\n+            <a href=\"${ps.urlC}\">C: </a>\n+            <a href=\"${ps.urlC}#comments-section\" class=\"ty_NumCmts\"></a> comments,\n+            <a href=\"${ps.urlC}#comments-section\" class=\"ty_NumOpLikeVotes\"></a> likes,\n+            href: ${ps.urlC}#comments-section\n+          </li>\n+          <li>\n+            ${''/*\n+            // Weird html structure: An enclosing elem with a href. (Cannot place\n+            // an <a> in an <a> so it'll be a div.href  not an  a.href)  */}\n+            <div href=\"http://wrong-url.example.com\">\n+              <a href=\"${ps.urlD}\">D: <span class=\"ty_NumCmts\"></span></a> comments,\n+              <a href=\"${ps.urlD}\"><span class=\"ty_NumOpLikeVotes\"></span></a> likes,\n+              url: ${ps.urlD}\n+            </div>\n+          </li>\n+          <li>\n+            <a href=\"${ps.urlE}\">E:\n+              <i><b><i><b><i class=\"ty_NumCmts\"> comments\n+              </i></b></i></b></i>\n+            </a>, url: ${ps.urlE}, deeply nested comments count.\n+          </li>\n+          <li>\n+             F: <a href=\"${ps.urlF}\" class=\"ty_NumCmts\"></a> at url ${ps.urlF}\n+          </li>\n+          <li>\n+            <a href=\"${ps.urlG}\" class=\"ty_NumCmts\"></a>\n+            <span>, at urlG: ${ps.urlG}</span>\n+          </li>\n+          <li>\n+            <span>urlH: NoHref — the <a> tag has no href attr: </span>\n+            <a class=\"ty_NumCmts\"></a>\n+          </li>\n+          <li>\n+            <span>urlI: NoLinkTag — there's no <a> tag </span>\n+            <span class=\"ty_NumCmts\"></span>\n+          </li>\n+        </ol>\n+        <p>/End of page.</p>\n+        </body>\n+        </html>`;\n+\n+    assert.eq(html.match(/ty_NumCmts/g).length, 9);  // ttt\n+    return html;\n+  }\n+\n+\n+export const ssoLoginPageSlug = 'sso-dummy-login.html';\n+export const ssoAfterLogoutPageSlug = 'after-logout-page.html';\n+export const ssoLogoutRedirPageSlug = 'logout-redir-page.html';\n+\n+export function createSingleSignOnPagesInHtmlDir() {\n+    // Chrome? Webdriverio? wants a 200 OK reply, so we need dummy pages.\n+    createPageInHtmlDirUnlessExists(ssoLoginPageSlug,\n+            '<html><body>\\n' +\n+            \"SSO Login Ty test page. [8906QKSHM40]\\n\" +\n+            '</body></html>\\n');\n+    createPageInHtmlDirUnlessExists(ssoAfterLogoutPageSlug,\n+            '<html><body>\\n' +\n+            \"After Logout Ty SSO test page. [AFT_LGO_TST_537503_]\\n\" +\n+            '</body></html>\\n');\n+    createPageInHtmlDirUnlessExists(ssoLogoutRedirPageSlug,\n+            '<html><body>\\n' +\n+            \"Logout Redir Ty SSO test page. [LGO_RDR_TST_865033_]\\n\" +\n+            '</body></html>\\n');\n+  }\n+\n+\n+export function createPageInHtmlDirUnlessExists(pageSlug: St, html: St) {\n+    const fileSysPath = './target/' + pageSlug;\n+    if (fs.existsSync(fileSysPath)) {\n+      logMessage(`Page already exists: ${fileSysPath}`);\n+      return;\n+    }\n+    logMessage(`Creating html page: ${fileSysPath}`);\n+    fs.writeFileSync(fileSysPath, html);\n+  }\n+\n+\n+export function checkNewPageFields(page, ps: {\n+     categoryId: CategoryId,\n+      authorId?: UserId,\n+      numPostsTotal?: number,\n+    }) {\n+\n+    // -2: Skip title and body posts.\n+    const numRepliesTotal = ps.numPostsTotal ? ps.numPostsTotal - 2 : 0;\n+\n+    assert.eq(page.htmlTagCssClasses, \"\");\n+    assert.eq(page.hiddenAt, null);\n+    assert.ok(!!page.createdAtMs);\n+    assert.ok(!!page.publishedAtMs);\n+    assert.ok(!!page.updatedAtMs);\n+    if (ps.authorId) assert.eq(page.authorId, ps.authorId);\n+    // The version number is 2 (not 1 becuse the page gets re-saved with correct\n+    // stats and a version bump, after the initial insert (with wrong stats)). [306MDH26]\n+    assert.eq(page.version, 2);\n+    assert.eq(page.categoryId, ps.categoryId);\n+    assert.eq(page.numLikes, 0);\n+    assert.eq(page.numWrongs, 0);\n+    assert.eq(page.numBurys, 0);\n+    assert.eq(page.numUnwanteds, 0);\n+    assert.eq(page.numOrigPostLikeVotes, 0);\n+    assert.eq(page.numOrigPostWrongVotes, 0);\n+    assert.eq(page.numOrigPostBuryVotes, 0);\n+    assert.eq(page.numOrigPostUnwantedVotes, 0);\n+    assert.eq(page.numPostsTotal, ps.numPostsTotal || 2);\n+    assert.eq(page.numRepliesTotal, numRepliesTotal);\n+    assert.eq(page.numRepliesVisible, numRepliesTotal);\n+    if (page.pageType === PageRole.PrivateChat || page.pageType === PageRole.OpenChat) {\n+      // Chat messages don't reply to any particular post.\n+      assert.eq(page.numOrigPostRepliesVisible, 0);\n+    }\n+    else {\n+      // For now. (Won't work if a post replies to not-the-OP.)\n+      assert.eq(page.numOrigPostRepliesVisible, numRepliesTotal);\n+    }\n+\n+    // Maybe shouldn't include the below things, + some things above, in the publ api?\n+    // So don't bother updating this test code — for now, just return instead,\n+    // if there're replies included on the page already.\n+    // And later, remove everything below? + some / most tests above.\n+    if (ps.numPostsTotal)\n+      return;\n+    assert.eq(page.lastApprovedReplyById, null);\n+    assert.eq(page.lastApprovedReplyAt, null);\n+    assert.eq(page.pinOrder, null);\n+    assert.eq(page.pinWhere, null);\n+    assert.eq(page.answeredAt, null);\n+    assert.eq(page.answerPostId, null);\n+    assert.eq(page.lockedAt, null);\n+    assert.eq(page.plannedAt, null);\n+    assert.eq(page.startedAt, null);\n+    assert.eq(page.bumpedAtMs, null);\n+    assert.eq(page.doingStatus, 1);\n+    assert.eq(page.doneAt, null);\n+    assert.eq(page.closedAt, null);\n+    assert.eq(page.unwantedAt, null);\n+    assert.eq(page.frozenAt, null);\n+    assert.eq(page.deletedAt, null);\n+    assert.eq(page.htmlHeadDescription, \"\");\n+    assert.eq(page.htmlHeadTitle, \"\");\n+    assert.eq(page.layout, 0);\n+    assert.eq(page.embeddingPageUrl, null);\n+    assert.ok(!!page.frequentPosterIds);\n+    assert.eq(page.frequentPosterIds.length, 0);\n+}\n+\n+\n+export function checkNewPostFields(post, ps: {\n+      postNr: PostNr,\n+      parentNr?: PostNr,\n+      postType: PostType,\n+      pageId: PageId,\n+      authorId?: UserId,\n+      approvedSource: string,\n+      approvedHtmlSanitized: string,\n+    }) {\n+\n+    assert.ok(!post.lastApprovedEditAt);\n+    assert.eq(post.closedStatus, 0);\n+    assert.eq(post.numPendingEditSuggestions, 0);\n+    assert.eq(post.nr, ps.postNr);\n+    if (ps.parentNr) assert.eq(ps.parentNr, post.parentNr);\n+    assert.ok(!post.bodyHiddenById);\n+    assert.ok(!post.currRevSourcePatch);\n+    assert.ok(!post.collapsedById);\n+    assert.eq(post.numUnwantedVotes, 0);\n+    assert.eq(post.numHandledFlags, 0);\n+    assert.eq(post.numWrongVotes, 0);\n+    assert.ok(!post.prevRevNr);\n+    assert.ok(!!post.createdAt);\n+    assert.ok(!post.closedById);\n+    assert.ok(!!post.currRevStartedAt);\n+    assert.eq(post.approvedRevNr, 1);\n+    assert.ok(!post.collapsedStatus);\n+    assert.eq(post.currRevNr, 1);\n+    assert.ok(!post.deletedById);\n+    assert.eq(post.numPendingFlags, 0);\n+    assert.ok(!!post.id);\n+    assert.eq(post.approvedById, c.SysbotUserId);\n+    assert.ok(!post.closedAt);\n+    assert.eq(post.numLikeVotes, 0);\n+    assert.eq(post.numTimesRead, 0);\n+    if (ps.authorId) assert.eq(post.createdById, ps.authorId);\n+    assert.ok(!post.branchSideways);\n+    assert.eq(post.deletedStatus, 0);\n+    assert.ok(!post.pinnedPosition);\n+    assert.ok(!post.safeRevNr);\n+    assert.eq(post.postType, ps.postType);\n+    //assert.eq(post.multireplyPostNrs, []);  not in use\n+    assert.eq(post.pageId, ps.pageId);\n+    assert.ok(!!post.approvedAt);\n+    assert.ok(!post.collapsedAt);\n+    assert.ok(!!post.urlPaths.canonical);\n+    assert.ok(post.urlPaths.canonical.endsWith('#post-' + post.nr));\n+    assert.ok(!post.deletedAt);\n+    assert.ok(!post.bodyHiddenAt);\n+    assert.eq(post.numDistinctEditors, 1);\n+    assert.eq(post.numBuryVotes, 0);\n+    assert.ok(!post.currRevLastEditedAt);\n+    assert.eq(post.approvedSource.trim(), ps.approvedSource.trim());\n+    assert.ok(!post.bodyHiddenReason);\n+    assert.eq(post.approvedHtmlSanitized.trim(), ps.approvedHtmlSanitized.trim());\n+    if (ps.authorId) assert.eq(post.currRevById, ps.authorId);\n+    assert.ok(!post.lastApprovedEditById);\n+}\n+\n+\n+export async function tryManyTimes<R>(what, maxNumTimes, fn: () => Pr<R>): Pr<R> {\n+    for (let retryCount = 0; retryCount < maxNumTimes - 1; ++retryCount) {\n+      try {\n+        return await fn();\n+      }\n+      catch (error) {\n+        logUnusual(`RETRYING: ${what}  [TyME2ERETRY], because error: ${error.toString()}`);\n+      }\n+    }\n+    return await fn();\n+}\n+\n+\n+export async function tryUntilTrue<R>(what: St, maxNumTimes: Nr | 'ExpBackoff',\n+        fn: 'ExpBackoff' | (() => Pr<Bo>), fn2?: () => Pr<Bo>) {\n+    let delayMs = 300;\n+\n+    const doExpBackoff = maxNumTimes === 'ExpBackoff' || fn === 'ExpBackoff';\n+    if (_.isString(fn)) {\n+      fn = fn2;\n+    }\n+\n+    for (let retryCount = 0; true; ++retryCount) {\n+      if (retryCount === maxNumTimes)\n+        throw Error(`Tried ${maxNumTimes} times but failed:  ${what}`)\n+\n+      try {\n+        const done = await fn();\n+        if (done)\n+          return;\n+\n+        logUnusual(`Retrying: ${what}  [TyME2ERETRYA]`);\n+      }\n+      catch (error) {\n+        logUnusual(`Retrying: ${what}  [TyME2ERETRYB], because error: ${error.toString()}`);\n+      }\n+\n+      if (doExpBackoff) {\n+        await oneWdioBrowser.pause(delayMs);\n+        delayMs = delayMs * 1.3\n+        delayMs = Math.min(2500, delayMs);\n+      }\n+    }\n+}"
    },
    {
      "sha": "bfb2b21126b51dc62a7cb94eb1b248de6c02b4f9",
      "filename": "tests/e2e-wdio7/wdio-progress-reporter.ts",
      "status": "added",
      "additions": 260,
      "deletions": 0,
      "changes": 260,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/wdio-progress-reporter.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/wdio-progress-reporter.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/wdio-progress-reporter.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,260 @@\n+import WDIOReporter from '@wdio/reporter';\n+import { WDIOReporterOptions, SuiteStats, HookStats, TestStats, RunnerStats\n+      } from '@wdio/reporter';\n+import * as ansiColors from 'ansi-colors';\n+import * as fs from 'fs';\n+\n+type TestStatsState = 'pending' | 'passed' | 'skipped' | 'failed';\n+\n+// cannot import why not\n+//import { dieIf } from 'utils/log-and-die.ts';\n+\n+\n+//import WDIOReporter from '@wdio/reporter';\n+//import { default as ansiColors } from 'ansi-colors';\n+\n+\n+function logProgr(message: string) {\n+  console.log(ansiColors.whiteBright(message));\n+}\n+\n+function logProgrBold(message: string) {\n+  console.log(ansiColors.bold.whiteBright(message));\n+}\n+\n+function logProgrBoldNormal(boldMsg: St, normalMsg: St) {\n+  console.log(ansiColors.bold.whiteBright(boldMsg) + ansiColors.whiteBright(normalMsg));\n+}\n+\n+\n+function nowString(): string {\n+  return (new Date()).toISOString();\n+}\n+\n+\n+// Dupl path, also in s/tyd.ts. [693RMSDM3]\n+const logFileDir = 'target/e2e-test-logs/';\n+\n+\n+// Prints the current test name, so if a test hangs, one sees which test\n+// (because if you terminate the hanged test via CTRL+C, you'll kill the whole\n+// process and it'll never get the chance to tell you which test hanged).\n+//\n+class TyWdioReporter extends WDIOReporter {\n+    #options: WDIOReporterOptions;\n+    #logFilePath: St | U;\n+    #logFileSuffix: St | U;\n+    #specFilePath: St | U;\n+    #specFileName: St | U;\n+\n+    constructor(options: WDIOReporterOptions) {\n+      super(options)\n+      this.#options = options;\n+\n+      if (!fs.existsSync(logFileDir)) {\n+        fs.mkdirSync(logFileDir, { recursive: true, mode: 0o777 });\n+      }\n+\n+      // Unique file name, so won't overwrite. (Don't want to try to find\n+      // any reliable Nodejs atomic-file-append lib. How would I know that\n+      // it actually works? (doesn't sometimes overwrite and lose test results))\n+      const randNrStr = Math.random().toString().substr(2, 15);  // substr drops '0.'\n+      this.#logFileSuffix = `ty-e2e-log-${Date.now()}-${randNrStr}.txt`;\n+    }\n+\n+    reporterName = 'TyWdioReporter';\n+\n+    // Could refactor all this.\n+\n+    #numSpecs = 0;\n+    #thisFileStartMs: number;\n+    #suiteStartMs: number;\n+    #suites: SuiteStats[] = [];\n+    #numTestsFailed = 0;\n+    #numTestsOk = 0;\n+\n+    #failedTests: TestStats[] = [];\n+\n+    onRunnerStart(runner) {\n+      // Is there always just 1 elem in the array? Then why is it an array?\n+      // https://github.com/webdriverio/webdriverio/blob/master/packages/wdio-reporter/README.md#onrunnerstart\n+      //dieIf(!runner.specs.length, 'TyE60AMG2GY', `Got no specs`);\n+      //dieIf(runner.specs.length >= 2, 'TyE60AMG2GX', `Got many specs: ${\n+      //      JSON.stringify(runner.specs.length)}`);\n+\n+      this.#specFilePath = runner.specs[0];\n+      this.#specFileName = this.#specFilePath.replace(/.*\\//, '');  // greedy by default\n+      this.#logFilePath = `${logFileDir}${this.#specFileName}--${this.#logFileSuffix}`\n+\n+      // See: https://github.com/webdriverio/webdriverio/blob/master/packages/wdio-reporter/README.md\n+      const arg: any = arguments[0];\n+      const cid: string = arg.cid;\n+      const cidNoBrackets = cid.replace(/[\\[\\]]/g, '');\n+      const now4seconds = Date.now().toString().substring(5, 9);  // last 4 seconds of now()\n+\n+      // Could use onWorkerStart() instead? [052RKTL40]\n+      (global as any).__thisSpecLocalHostname =\n+          `e2e-test-cid-${cidNoBrackets}-now-${now4seconds}`;\n+\n+      // Hack, better send cid via the worker hook somehow? [052RKTL40]\n+      (global as any).getCidOrDie = () => cidNoBrackets;\n+\n+      this.#thisFileStartMs = Date.now();\n+    }\n+\n+    onRunnerEnd(runner) {\n+      //this.printToFile();\n+      //this.printToConsole();\n+    }\n+\n+    printToConsole() {\n+      logProgrBold(`\\n` +\n+          `---------------------------------------------------------------------\\n` +\n+          `Done running ${this.#numSpecs} specs, results:\\n` +\n+          `---------------------------------------------------------------------`);\n+\n+      const endMs = Date.now();\n+      const durSecs = (endMs - this.#thisFileStartMs) / 1000;\n+      const durMins = Math.floor(durSecs / 60);\n+      const remRoundSecs = Math.round(durSecs - durMins * 60);\n+\n+      let numSuitesOk = 0;\n+      let numSuitesFailed = 0;\n+\n+      for (let suite of this.#suites) {\n+        let ok = true;\n+        let test: TestStats;\n+        for (test of suite['tests']) {\n+          if (test.state === 'failed') {\n+            ok = false;\n+            console.log(`----- Failed:  ${suite.title}:  ${test.title}`);\n+            for (let error of test.errors) {\n+              console.log(`  Stack trace: ${error.stack}`);\n+            }\n+          }\n+        }\n+        if (ok) {\n+          console.log(`----- Ok:  ${suite.title}`);\n+        }\n+      }\n+\n+      logProgrBold(\n+          `---------------------------------------------------------------------\\n` +\n+          `These ${this.#numSpecs} specs took ${durMins} min ${remRoundSecs} se  [TyME2EREPRT]\\n` +\n+          `      Num suites ok: ${numSuitesOk}\\n` +\n+          `  Num suites failed: ${numSuitesFailed}\\n` +\n+          `       Num tests ok: ${this.#numTestsOk}\\n` +\n+          `   Num tests failed: ${this.#numTestsFailed}\\n` +\n+          `---------------------------------------------------------------------`);\n+    }\n+\n+    printToFile() {\n+      // A bug in WebdriverIO?  let suite of this.#suites  is always the same\n+      // suite, and *before* it starts — also when running many.  [WDIOREPTRBUG]\n+      let text = '';\n+      for (let suite of this.#suites) {\n+        text += `SUITE: ${suite.title}\\n`;\n+        let ok = true;\n+        let test: TestStats;\n+        let worstState:  TestStatsState | U;\n+        for (test of suite['tests']) {\n+          // State is:  'passed' | 'pending' | 'failed' | 'skipped'\n+          if (test.state === 'failed') {\n+            worstState = test.state;\n+            ok = false;\n+            text += `----- FAILED:  ${suite.title}:  ${test.title}\\n`;\n+            for (let error of test.errors) {\n+              text += `  Stack trace: ${error.stack}\\n`;\n+            }\n+          }\n+          else if (test.state === 'skipped' || test.state === 'pending') {\n+            if (worstState !== 'failed') {\n+              worstState = test.state;\n+            }\n+          }\n+          else {\n+            worstState = test.state;\n+          }\n+        }\n+        if (ok) {\n+          // For now:\n+          text += `----- ${worstState}:  ${suite.title}\\n`;\n+        }\n+      }\n+\n+      fs.writeFileSync(this.#logFilePath, text);\n+    }\n+\n+    onSuiteStart(suite: SuiteStats) {\n+      /*\n+      // Don't log this, for nested suites (a  describe(){...} inside a test file).\n+      // if (suite.parentUid !== suite.uid) return;  — is the same, also for nested suites.\n+      // suite.title and .parent and .fullTitle are different though:\n+      if (suite.title !== suite.parent) return;\n+      */\n+      this.#numSpecs += 1;\n+      /*\n+      console.log('title: ' + suite.title + ' parent: ' + suite.parent + ' fullTtl: ' + suite.fullTitle);\n+      console.log('parentUid: ' + suite.parentUid +  '   uid: ' + suite.uid); *  /\n+      */\n+      this.#suiteStartMs = Date.now();\n+      logProgrBoldNormal(`Suite start: ${this.#specFileName}: \"${suite.fullTitle}\"`,\n+            ` ${nowString()}`);\n+    }\n+\n+    onSuiteEnd(suite: SuiteStats) {\n+      //[WDIOREPTRBUG] wdio bug? this is always the same suite, and: \"type\": \"suite:start\"\n+      // but this is on-End?\n+      // console.log(`\\n\\nSUITE END:\\n${JSON.stringify(suite, undefined, 2)}\\n`);\n+      this.#suites.push(suite);\n+      //if (suite.title !== suite.parent) return;\n+      const endMs = Date.now();\n+      const durSecs = Math.round((endMs - this.#suiteStartMs) / 1000);\n+      logProgrBoldNormal(`Suite ended: ${this.#specFileName}: \"${suite.fullTitle}\"`,\n+            ` ${nowString()} took ${durSecs}s`);\n+    }\n+\n+    onTestStart(test: TestStats) {\n+      logProgr(`${test.title}`);\n+    }\n+\n+    onTestEnd(test: TestStats) {\n+    }\n+\n+    onHookStart(test: HookStats) {\n+    }\n+\n+    onHookEnd(test: HookStats) {\n+    }\n+\n+    onTestPass(test: TestStats) {\n+      this.#numTestsOk += 1;\n+    }\n+\n+    onTestFail(test: TestStats) {\n+      this.#failedTests.push(test);\n+      this.#numTestsFailed += 1;\n+      const endMs = Date.now();\n+      const durSecs = Math.round((endMs - this.#suiteStartMs) / 1000);\n+      const failedFileAndTest = `FAILED: ${this.#specFileName}: ${test.title}`;\n+      logProgrBoldNormal('\\n' + failedFileAndTest + `  [TyEE2EFAIL] `,\n+            `${nowString()} took ${durSecs}s\\n`);\n+            // Hmm already printed by wdio:\n+            //`Stack trace:\\n` +\n+            //`${test.error.stack}\\n`);\n+\n+      // For now, instead of printToFile() above:    [WDIOREPTRBUG]\n+      let text = failedFileAndTest + `\\n`;\n+      for (let error of test.errors) {\n+        text += `${error.stack}\\n`;\n+      }\n+      text += `\\n==============================================================\\n`\n+      fs.writeFileSync(this.#logFilePath, text + '\\n');\n+    }\n+\n+    onTestSkip(test: TestStats) {\n+      logProgr(`SKIPPING: ${test.title}`);\n+    }\n+};\n+\n+export default TyWdioReporter;\n\\ No newline at end of file"
    },
    {
      "sha": "f1ed89e0c3c265fa1b502b59a9f9699f6c7adbf6",
      "filename": "tests/e2e-wdio7/wdio.conf.autogen-webdriver-7.ts",
      "status": "added",
      "additions": 279,
      "deletions": 0,
      "changes": 279,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/wdio.conf.autogen-webdriver-7.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/wdio.conf.autogen-webdriver-7.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/wdio.conf.autogen-webdriver-7.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,279 @@\n+export const config: WebdriverIO.Config = {\n+    //\n+    // ====================\n+    // Runner Configuration\n+    // ====================\n+    //\n+    // WebdriverIO allows it to run your tests in arbitrary locations (e.g. locally or\n+    // on a remote machine).\n+    runner: 'local',\n+    //\n+    // ==================\n+    // Specify Test Files\n+    // ==================\n+    // Define which test specs should run. The pattern is relative to the directory\n+    // from which `wdio` was called.\n+    //\n+    // The specs are defined as an array of spec files (optionally using wildcards\n+    // that will be expanded). The test for each spec file will be run in a separate\n+    // worker process. In order to have a group of spec files run in the same worker\n+    // process simply enclose them in an array within the specs array.\n+    //\n+    // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n+    // then the current working directory is where your `package.json` resides, so `wdio`\n+    // will be called from there.\n+    //\n+    specs: [\n+        './specs/**/*.ts'\n+    ],\n+    // Patterns to exclude.\n+    exclude: [\n+        // 'path/to/excluded/files'\n+    ],\n+    //\n+    // ============\n+    // Capabilities\n+    // ============\n+    // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n+    // time. Depending on the number of capabilities, WebdriverIO launches several test\n+    // sessions. Within your capabilities you can overwrite the spec and exclude options in\n+    // order to group specific specs to a specific capability.\n+    //\n+    // First, you can define how many instances should be started at the same time. Let's\n+    // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n+    // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n+    // files and you set maxInstances to 10, all spec files will get tested at the same time\n+    // and 30 processes will get spawned. The property handles how many capabilities\n+    // from the same test should run tests.\n+    //\n+    maxInstances: 10,\n+    //\n+    // If you have trouble getting all important capabilities together, check out the\n+    // Sauce Labs platform configurator - a great tool to configure your capabilities:\n+    // https://docs.saucelabs.com/reference/platforms-configurator\n+    //\n+    capabilities: [{\n+    \n+        // maxInstances can get overwritten per capability. So if you have an in-house Selenium\n+        // grid with only 5 firefox instances available you can make sure that not more than\n+        // 5 instances get started at a time.\n+        maxInstances: 5,\n+        //\n+        browserName: 'chrome',\n+        acceptInsecureCerts: true\n+        // If outputDir is provided WebdriverIO can capture driver session logs\n+        // it is possible to configure which logTypes to include/exclude.\n+        // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs\n+        // excludeDriverLogs: ['bugreport', 'server'],\n+    }],\n+    //\n+    // ===================\n+    // Test Configurations\n+    // ===================\n+    // Define all options that are relevant for the WebdriverIO instance here\n+    //\n+    // Level of logging verbosity: trace | debug | info | warn | error | silent\n+    logLevel: 'info',\n+    //\n+    // Set specific log levels per logger\n+    // loggers:\n+    // - webdriver, webdriverio\n+    // - @wdio/applitools-service, @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n+    // - @wdio/mocha-framework, @wdio/jasmine-framework\n+    // - @wdio/local-runner\n+    // - @wdio/sumologic-reporter\n+    // - @wdio/cli, @wdio/config, @wdio/utils\n+    // Level of logging verbosity: trace | debug | info | warn | error | silent\n+    // logLevels: {\n+    //     webdriver: 'info',\n+    //     '@wdio/applitools-service': 'info'\n+    // },\n+    //\n+    // If you only want to run your tests until a specific amount of tests have failed use\n+    // bail (default is 0 - don't bail, run all tests).\n+    bail: 0,\n+    //\n+    // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n+    // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n+    // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n+    // gets prepended directly.\n+    baseUrl: 'http://localhost',\n+    //\n+    // Default timeout for all waitFor* commands.\n+    waitforTimeout: 10000,\n+    //\n+    // Default timeout in milliseconds for request\n+    // if browser driver or grid doesn't send response\n+    connectionRetryTimeout: 120000,\n+    //\n+    // Default request retries count\n+    connectionRetryCount: 3,\n+    //\n+    // Test runner services\n+    // Services take over a specific job you don't want to take care of. They enhance\n+    // your test setup with almost no effort. Unlike plugins, they don't add new\n+    // commands. Instead, they hook themselves up into the test process.\n+    services: ['chromedriver','devtools','firefox-profile'], // 'docker'],\n+    \n+    // Framework you want to run your specs with.\n+    // The following are supported: Mocha, Jasmine, and Cucumber\n+    // see also: https://webdriver.io/docs/frameworks\n+    //\n+    // Make sure you have the wdio adapter package for the specific framework installed\n+    // before running any tests.\n+    framework: 'mocha',\n+    //\n+    // The number of times to retry the entire specfile when it fails as a whole\n+    // specFileRetries: 1,\n+    //\n+    // Delay in seconds between the spec file retry attempts\n+    // specFileRetriesDelay: 0,\n+    //\n+    // Whether or not retried specfiles should be retried immediately or deferred to the end of the queue\n+    // specFileRetriesDeferred: false,\n+    //\n+    // Test reporter for stdout.\n+    // The only one supported by default is 'dot'\n+    // see also: https://webdriver.io/docs/dot-reporter\n+    reporters: ['spec'],\n+\n+\n+    \n+    //\n+    // Options to be passed to Mocha.\n+    // See the full list at http://mochajs.org/\n+    mochaOpts: {\n+        ui: 'bdd',\n+        timeout: 60000\n+    },\n+    //\n+    // =====\n+    // Hooks\n+    // =====\n+    // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n+    // it and to build services around it. You can either apply a single function or an array of\n+    // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n+    // resolved to continue.\n+    /**\n+     * Gets executed once before all workers get launched.\n+     * @param {Object} config wdio configuration object\n+     * @param {Array.<Object>} capabilities list of capabilities details\n+     */\n+    // onPrepare: function (config, capabilities) {\n+    // },\n+    /**\n+     * Gets executed before a worker process is spawned and can be used to initialise specific service\n+     * for that worker as well as modify runtime environments in an async fashion.\n+     * @param  {String} cid      capability id (e.g 0-0)\n+     * @param  {[type]} caps     object containing capabilities for session that will be spawn in the worker\n+     * @param  {[type]} specs    specs to be run in the worker process\n+     * @param  {[type]} args     object that will be merged with the main configuration once worker is initialised\n+     * @param  {[type]} execArgv list of string arguments passed to the worker process\n+     */\n+    // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n+    // },\n+    /**\n+     * Gets executed just before initialising the webdriver session and test framework. It allows you\n+     * to manipulate configurations depending on the capability or spec.\n+     * @param {Object} config wdio configuration object\n+     * @param {Array.<Object>} capabilities list of capabilities details\n+     * @param {Array.<String>} specs List of spec file paths that are to be run\n+     */\n+    // beforeSession: function (config, capabilities, specs) {\n+    // },\n+    /**\n+     * Gets executed before test execution begins. At this point you can access to all global\n+     * variables like `browser`. It is the perfect place to define custom commands.\n+     * @param {Array.<Object>} capabilities list of capabilities details\n+     * @param {Array.<String>} specs        List of spec file paths that are to be run\n+     * @param {Object}         browser      instance of created browser/device session\n+     */\n+    // before: function (capabilities, specs) {\n+    // },\n+    /**\n+     * Runs before a WebdriverIO command gets executed.\n+     * @param {String} commandName hook command name\n+     * @param {Array} args arguments that command would receive\n+     */\n+    // beforeCommand: function (commandName, args) {\n+    // },\n+    /**\n+     * Hook that gets executed before the suite starts\n+     * @param {Object} suite suite details\n+     */\n+    // beforeSuite: function (suite) {\n+    // },\n+    /**\n+     * Function to be executed before a test (in Mocha/Jasmine) starts.\n+     */\n+    // beforeTest: function (test, context) {\n+    // },\n+    /**\n+     * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\n+     * beforeEach in Mocha)\n+     */\n+    // beforeHook: function (test, context) {\n+    // },\n+    /**\n+     * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\n+     * afterEach in Mocha)\n+     */\n+    // afterHook: function (test, context, { error, result, duration, passed, retries }) {\n+    // },\n+    /**\n+     * Function to be executed after a test (in Mocha/Jasmine).\n+     */\n+    // afterTest: function(test, context, { error, result, duration, passed, retries }) {\n+    // },\n+\n+\n+    /**\n+     * Hook that gets executed after the suite has ended\n+     * @param {Object} suite suite details\n+     */\n+    // afterSuite: function (suite) {\n+    // },\n+    /**\n+     * Runs after a WebdriverIO command gets executed\n+     * @param {String} commandName hook command name\n+     * @param {Array} args arguments that command would receive\n+     * @param {Number} result 0 - command success, 1 - command error\n+     * @param {Object} error error object if any\n+     */\n+    // afterCommand: function (commandName, args, result, error) {\n+    // },\n+    /**\n+     * Gets executed after all tests are done. You still have access to all global variables from\n+     * the test.\n+     * @param {Number} result 0 - test pass, 1 - test fail\n+     * @param {Array.<Object>} capabilities list of capabilities details\n+     * @param {Array.<String>} specs List of spec file paths that ran\n+     */\n+    // after: function (result, capabilities, specs) {\n+    // },\n+    /**\n+     * Gets executed right after terminating the webdriver session.\n+     * @param {Object} config wdio configuration object\n+     * @param {Array.<Object>} capabilities list of capabilities details\n+     * @param {Array.<String>} specs List of spec file paths that ran\n+     */\n+    // afterSession: function (config, capabilities, specs) {\n+    // },\n+    /**\n+     * Gets executed after all workers got shut down and the process is about to exit. An error\n+     * thrown in the onComplete hook will result in the test run failing.\n+     * @param {Object} exitCode 0 - success, 1 - fail\n+     * @param {Object} config wdio configuration object\n+     * @param {Array.<Object>} capabilities list of capabilities details\n+     * @param {<Object>} results object containing test results\n+     */\n+    // onComplete: function(exitCode, config, capabilities, results) {\n+    // },\n+    /**\n+    * Gets executed when a refresh happens.\n+    * @param {String} oldSessionId session ID of the old session\n+    * @param {String} newSessionId session ID of the new session\n+    */\n+    //onReload: function(oldSessionId, newSessionId) {\n+    //}\n+}"
    },
    {
      "sha": "822c18bcb96b9ed6187f317d986702950b9c03c4",
      "filename": "tests/e2e-wdio7/wdio.conf.ts",
      "status": "added",
      "additions": 771,
      "deletions": 0,
      "changes": 771,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/wdio.conf.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/wdio.conf.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/wdio.conf.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,771 @@\n+declare const global: any;\n+\n+import * as _ from 'lodash';\n+import TyWdioReporter from './wdio-progress-reporter';\n+import settings from './utils/settings';\n+import server from './utils/server';\n+import * as lad from './utils/log-and-die';\n+\n+\n+server.initOrExit(settings);\n+\n+\n+let wasError = false;\n+\n+\n+// --------------------------------------------------------------------\n+//  Which specs?\n+// --------------------------------------------------------------------\n+\n+// Unfortunately, cannot access stdin. Wdio reads stdin here:\n+//  https://github.com/webdriverio/webdriverio/blob/7919ff09d4d52f26a38c02649e044508af500c6a/packages/wdio-cli/src/commands/run.js#L109\n+// and launches a 'Launcher' with the specs to run from stdin:\n+//  https://github.com/webdriverio/webdriverio/blob/7919ff09d4d52f26a38c02649e044508af500c6a/packages/wdio-cli/src/commands/run.js#L120\n+// the Launcher then reads the config file:\n+//  https://github.com/webdriverio/webdriverio/blob/7919ff09d4d52f26a38c02649e044508af500c6a/packages/wdio-cli/src/launcher.js#L20\n+// but here in the config file, apparently stdin has been consumed,\n+// and we don't know which files were specified.\n+// So cannot look at the file names, to determine which capabilities we need.\n+// Instead, we need to use the command line args, i.e. `settings` (USESTNGS).\n+\n+const specsPathPrefix = settings.isInProjBaseDir ? './tests/e2e' : '.';\n+\n+let specs = [`${specsPathPrefix}/specs/**/*.ts`];\n+\n+// This now not needed? wdio v6 has  --spec\n+if (settings.only) {\n+  const o = settings.only;\n+  const globTs = o.endsWith('.test.ts') || o.endsWith('.e2e.ts') ? '' : '*.ts';\n+  specs = [`${specsPathPrefix}/specs/**/*${settings.only}${globTs}`];\n+}\n+\n+\n+\n+// --------------------------------------------------------------------\n+//  Which browser?\n+// --------------------------------------------------------------------\n+\n+\n+interface BrowserNameAndOpts {\n+  browserName: string;\n+  acceptInsecureCerts?: boolean;\n+  'goog:chromeOptions'?: any;\n+  browserVersion?: string;\n+  platformName?: string;\n+  'sauce:options'?: any;\n+}\n+\n+let browserNameAndOpts: BrowserNameAndOpts = {\n+  browserName: settings.browserName,\n+};\n+\n+// If adding chromeOptions when the browserName is 'firefox', then *Chrome* will get used.\n+// So don't. Webdriver.io/Selenium bug? (April 29 2018)\n+if (browserNameAndOpts.browserName === 'chrome'\n+        || browserNameAndOpts.browserName.toLowerCase() === 'chromium') {\n+  const opts = {\n+    args: [\n+      '--disable-notifications',\n+\n+      // Make HTTPS snake oil cert work: [E2EHTTPS]\n+\n+      // Seems this is enough:\n+      // (from https://deanhume.com/testing-service-workers-locally-with-self-signed-certificates/ )\n+      '--ignore-certificate-errors',\n+\n+      // Seems this isn't needed:\n+      // See: https://www.chromium.org/blink/serviceworker/service-worker-faq\n+      //'--allow-insecure-localhost',\n+\n+      // Apparently also not needed: (good because the hostname is \"never\" the same)\n+      //'--unsafely-treat-insecure-origin-as-secure=https://comments-for-...-localhost-8080.localhost'\n+    ],\n+    // --- Trying to disable \"Save password?\" popup --------\n+    prefs: {\n+      //'profile.password_manager_enabled': false,\n+      //credentials_enable_service: false,\n+      //password_manager_enabled: false,\n+    } as any,\n+    //profile: {\n+    //  password_manager_enabled: false\n+    //},\n+    // --------------------------------------------------\n+\n+    // There's also:\n+    // download: {\n+    //   default_directory: process.env.REMOTE_DOWNLOAD_DIR,\n+    //   prompt_for_download: false,\n+    //   directory_upgrade: true,\n+    //   extensions_to_open: '',\n+    // },\n+  };\n+  if (settings.block3rdPartyCookies) {\n+    // Seems `profile.block_third_party_cookies` isn't documented anywhere on the Internet,\n+    // but you'll find it in your Chrome preferences file. On Linux, it can be in:\n+    //   ~/.config/google-chrome/Default/Preferences\n+    // (see:\n+    //   http://chromedriver.chromium.org/capabilities\n+    //   https://chromium.googlesource.com/chromium/src/+/lkgr/docs/user_data_dir.md#linux )\n+    // It's a json file, with lots of settings, one of which is for 3rd party cookies.\n+    opts.prefs.profile = {\n+      block_third_party_cookies: true,\n+    };\n+  }\n+\n+  if (settings.headless) {\n+    // Use --disable-gpu to avoid an error from a missing Mesa library,\n+    // see: https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md.\n+    opts.args.push('--headless', '--disable-gpu');\n+  }\n+\n+  browserNameAndOpts['goog:chromeOptions'] = opts;\n+  // If the Talkyard server runs https: (the --secure flag [E2EHTTPS])\n+  browserNameAndOpts.acceptInsecureCerts = true;\n+}\n+else if (browserNameAndOpts.browserName === 'safari-12') {\n+  browserNameAndOpts = {\n+    \"browserName\": 'safari',\n+    \"browserVersion\": '12.0',\n+    \"platformName\": 'macOS 10.14',\n+    \"sauce:options\": {}\n+  };\n+}\n+else if (browserNameAndOpts.browserName === 'safari-13') {\n+  browserNameAndOpts = {\n+    \"browserName\": 'safari',\n+    \"browserVersion\": '13.0',\n+    \"platformName\": 'macOS 10.15',\n+    \"sauce:options\": {}\n+  };\n+}\n+else {\n+  // This supposedly works in FF: \"network.cookie.cookieBehavior\": 1\n+  // but where is 'network'?  https://stackoverflow.com/a/48670137/694469\n+  // Read this?: https://help.crossbrowsertesting.com/selenium-testing/general/running-selenium-test-cookies-turned-off-remote-browser/\n+  if (settings.block3rdPartyCookies) {\n+    lad.logWarning(\n+      \"'--block3rdPartyCookies' specified, but I don't know how to do that in this browser\");\n+  }\n+}\n+\n+\n+\n+// --------------------------------------------------------------------\n+// Browser drivers\n+// --------------------------------------------------------------------\n+\n+// Recent Chromedriver versions list:\n+// https://sites.google.com/a/chromium.org/chromedriver/downloads\n+// (linked from: https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver )\n+\n+// Also upgrade Selenium. [upd_chromedriver_ffdriver]\n+const chromeDriverVersion = '86.0.4240.22';  // later:  87.0.4280.20\n+\n+// Minimum Firefox version >= 60\n+const firefoxDriverVersion = '0.26.0';\n+\n+\n+\n+\n+// --------------------------------------------------------------------\n+// The config\n+// --------------------------------------------------------------------\n+\n+\n+export const config = { // doesn't work: WebdriverIO.Config = {\n+\n+  // ====================\n+  // Runner Configuration\n+  // ====================\n+\n+  // WebdriverIO allows it to run your tests in arbitrary locations (e.g. locally or\n+  // on a remote machine).\n+  runner: 'local',\n+\n+  // ==================\n+  // Specify Test Files\n+  // ==================\n+  // Define which test specs should run. The pattern is relative to the directory\n+  // from which `wdio` was called.\n+  //\n+  // The specs are defined as an array of spec files (optionally using wildcards\n+  // that will be expanded). The test for each spec file will be run in a separate\n+  // worker process. In order to have a group of spec files run in the same worker\n+  // process simply enclose them in an array within the specs array.\n+  //\n+  // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n+  // then the current working directory is where your `package.json` resides, so `wdio`\n+  // will be called from there.\n+\n+  specs,\n+\n+  exclude: [\n+    specsPathPrefix + './specs/**/*__e2e-test-template__*.ts',\n+  ],\n+\n+\n+  // ============\n+  // Capabilities\n+  // ============\n+  // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n+  // time. Depending on the number of capabilities, WebdriverIO launches several test\n+  // sessions. Within your capabilities you can overwrite the spec and exclude options in\n+  // order to group specific specs to a specific capability.\n+\n+  // First, you can define how many instances should be started at the same time. Let's\n+  // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n+  // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n+  // files and you set maxInstances to 10, all spec files will get tested at the same time\n+  // and 30 processes will get spawned. The property handles how many capabilities\n+  // from the same test should run tests.\n+  //\n+  maxInstances: settings.parallel || 1,\n+\n+  // If you have trouble getting all important capabilities together, check out the\n+  // Sauce Labs platform configurator - a great tool to configure your capabilities:\n+  // https://docs.saucelabs.com/reference/platforms-configurator\n+\n+  capabilities: [\n+    browserNameAndOpts as any\n+    // For Firefox to work, you need to make http://wildcard.localhost addresses work\n+    // (where 'wildcard' can be anything).\n+    // See: <../../../docs/wildcard-dot-localhost.md>.\n+  ],\n+  /* Default:\n+    capabilities: [{\n+\n+        // maxInstances can get overwritten per capability. So if you have an in-house Selenium\n+        // grid with only 5 firefox instances available you can make sure that not more than\n+        // 5 instances get started at a time.\n+        maxInstances: 5,\n+\n+        browserName: 'chrome',\n+        acceptInsecureCerts: true\n+        // If outputDir is provided WebdriverIO can capture driver session logs\n+        // it is possible to configure which logTypes to include/exclude.\n+        // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs\n+        // excludeDriverLogs: ['bugreport', 'server'],\n+    }], */\n+\n+\n+  // ===================\n+  // Test Configurations\n+  // ===================\n+  // Define all options that are relevant for the WebdriverIO instance here\n+\n+  // Level of logging verbosity: trace | debug | info | warn | error | silent\n+  logLevel: settings.logLevel || 'warn',\n+\n+  // Set specific log levels per logger\n+  // loggers:\n+  // - webdriver, webdriverio\n+  // - @wdio/applitools-service, @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n+  // - @wdio/mocha-framework, @wdio/jasmine-framework\n+  // - @wdio/local-runner\n+  // - @wdio/sumologic-reporter\n+  // - @wdio/cli, @wdio/config, @wdio/sync, @wdio/utils\n+  // Level of logging verbosity: trace | debug | info | warn | error | silent\n+  // logLevels: {\n+  //     webdriver: 'info',\n+  //     '@wdio/applitools-service': 'info'\n+  // },\n+\n+  // If you only want to run your tests until a specific amount of tests have failed use\n+  // bail (default is 0 - don't bail, run all tests).\n+  bail: settings.bail || 0,\n+\n+  // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n+  // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n+  // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n+  // gets prepended directly.\n+  baseUrl: settings.mainSiteOrigin,\n+\n+  // Default timeout for all waitFor* commands.\n+  waitforTimeout: settings.waitforTimeout || 10000,\n+\n+  // Default timeout in milliseconds for request\n+  // if browser driver or grid doesn't send response\n+  connectionRetryTimeout: Math.max(settings.waitforTimeout || 90000),\n+\n+  // Default request retries count\n+  connectionRetryCount: 3,\n+\n+  // Test runner services\n+  // Services take over a specific job you don't want to take care of. They enhance\n+  // your test setup with almost no effort. Unlike plugins, they don't add new\n+  // commands. Instead, they hook themselves up into the test process.\n+\n+  /* Default:\n+  services: ['chromedriver','devtools','firefox-profile'], // 'docker'],\n+  */\n+\n+  // This makes wdio/something hang, and spin the CPU to 100% \"forever\",\n+  // when a login popup tab closes itself (which they do, after login).\n+  // I think this makes WebdriverIO use Puppeteer?\n+  //\n+  // services: undefined\n+\n+  // This doens't need Java, doesn't use Selenium. But works only with Chrome; talks\n+  // directly with Chrome. Uses the Chromedriver NPM package, which:\n+  //   \"\"\"grabbing a particular \"blessed\" (by this module) version\n+  //   of ChromeDriver. As new versions are released and vetted, this module\n+  //   will be updated accordingly\"\"\"  https://www.npmjs.com/package/chromedriver\n+  // Also, cannot be invisible? Won't use any Docker container, and ignores --headless.\n+  //\n+  //services: ['chromedriver'],\n+\n+  //services: ['devtools'],\n+\n+  // This requires Java — will start Selenium, listens on port 4444.\n+  // (This binary: node_modules/selenium-standalone/.selenium/selenium-server/3.141.5-server.jar )\n+  // Does use a Docker container with Chrome — so, can be invisible.\n+  //\n+  services: [\n+    settings.useChromedriver ? 'chromedriver' : (    // if script flag:  --cd\n+      settings.useDevtoolsProtocol ? 'devtools' : (  // if script flag:  --dt\n+        ['selenium-standalone', {                    // else the default\n+        logPath: 'logs',\n+        installArgs: {\n+          drivers: {\n+            chrome: { version: chromeDriverVersion },\n+            firefox: { version: firefoxDriverVersion }\n+          }\n+        },\n+        args: {\n+          drivers: {\n+            chrome: { version: chromeDriverVersion },\n+            firefox: { version: firefoxDriverVersion }\n+          }\n+        }}])),\n+\n+  //   'sauce',\n+  //\n+  //    // https://webdriver.io/docs/wdio-chromedriver-service.html\n+  //    // Would need to install Chromedriver: npm install chromedriver --save-dev\n+  //   'wdio-chromedriver-service',\n+\n+  //   // https://webdriver.io/docs/selenium-standalone-service.html\n+  //   'selenium-standalone',\n+  //\n+  //   // https://webdriver.io/docs/devtools-service.html\n+  //   'devtools',\n+  //\n+  //   // https://webdriver.io/docs/firefox-profile-service.html\n+  //   'firefox-profile',\n+  //\n+  //   // https://webdriver.io/docs/wdio-docker-service.html\n+  //   'docker',\n+  //\n+  //   'intercept'],\n+\n+  ],\n+\n+  // Framework you want to run your specs with.\n+  // The following are supported: Mocha, Jasmine, and Cucumber\n+  // see also: https://webdriver.io/docs/frameworks\n+\n+  // Make sure you have the wdio adapter package for the specific framework installed\n+  // before running any tests.\n+\n+  // I like Mocha because it has no built-in shold.not.be.a.what.not.equal.bää assertion lib.\n+  framework: 'mocha',\n+\n+  // The number of times to retry the entire specfile when it fails as a whole\n+  specFileRetries: settings.specFileRetries,\n+\n+  // Whether or not retried specfiles should be retried immediately or deferred to the end of the queue\n+  // specFileRetriesDeferred: true,\n+\n+  // Delay in seconds between the spec file retry attempts\n+  // Set to some seconds, because ofen the problem is that the server is\n+  // recompiling and restarting, because of someone/you edit the source code.\n+  specFileRetriesDelay: 4,  // default: 0\n+\n+  // Test reporter for stdout.\n+  // The only one supported by default is 'dot'\n+  // see also: https://webdriver.io/docs/dot-reporter.html\n+  reporters: [TyWdioReporter],\n+  //  also: 'spec' or 'dot',  or 'concise' — but won't print which file failed :- (\n+\n+\n+  // Options to be passed to Mocha.\n+  // See the full list at http://mochajs.org/\n+  mochaOpts: {\n+    ui: 'bdd',\n+    timeout: settings.waitforTimeout,\n+    grep: settings.grep,\n+    // Bail after first test failure. Saves time, and can inspect the Selenium logs.\n+    bail: true,\n+  },\n+\n+\n+  // =====\n+  // Hooks\n+  // =====\n+  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n+  // it and to build services around it. You can either apply a single function or an array of\n+  // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n+  // resolved to continue.\n+\n+  /**\n+   * Gets executed once before all workers get launched.\n+   * @param {Object} config wdio configuration object\n+   * @param {Array.<Object>} capabilities list of capabilities details\n+   */\n+  // onPrepare: function (config, capabilities) {\n+  // },\n+\n+  /**\n+   * Gets executed before a worker process is spawned and can be used to initialise specific service\n+   * for that worker as well as modify runtime environments in an async fashion.\n+   * @param  {String} cid      capability id (e.g 0-0)\n+   * @param  {[type]} caps     object containing capabilities for session that will be spawn in the worker\n+   * @param  {[type]} specs    specs to be run in the worker process\n+   * @param  {[type]} args     object that will be merged with the main configuration once worker is initialised\n+   * @param  {[type]} execArgv list of string arguments passed to the worker process\n+   */\n+  onWorkerStart: function (cid: string, caps: WebDriver.DesiredCapabilities,\n+        specs: string[], args: WebdriverIO.Config, execArgv: string[]) {\n+    // This is in the main wdio process (not one of the worker processes that\n+    // actually runs the tests).\n+    // Maybe pass local hostname, and the cid, to the worker here?\n+    //     ... instead of this hack, in the reporter: [052RKTL40]\n+  },\n+\n+  /**\n+   * Gets executed just before initialising the webdriver session and test framework. It allows you\n+   * to manipulate configurations depending on the capability or spec.\n+   * @param {Object} config wdio configuration object\n+   * @param {Array.<Object>} capabilities list of capabilities details\n+   * @param {Array.<String>} specs List of spec file paths that are to be run\n+   */\n+  // beforeSession: function (config, capabilities, specs) {\n+  // },\n+\n+  /**\n+   * Gets executed before test execution begins. At this point you can access to all global\n+   * variables like `browser`. It is the perfect place to define custom commands.\n+   * @param {Array.<Object>} capabilities list of capabilities details\n+   * @param {Array.<String>} specs        List of spec file paths that are to be run\n+   * @param {Object}         browser      instance of created browser/device session\n+   */\n+  before: function (capabilities: WebDriver.DesiredCapabilities, specs: string[], browser) {\n+    // Any way to get the 'cid' here?\n+\n+    // This is in a wdio worker process — it has different 'global.*' than the main process,\n+    // and any local variables from the main wdio process are \"gone\" here.\n+\n+    global.wdioBeforeHookHasRun = true;\n+\n+    // In case configured in some other way than via --devtools flag.\n+    settings.useDevtoolsProtocol =\n+        !!config.services.find(s => s === 'devtools' || s[0] === 'devtools');\n+    global.settings = settings;\n+\n+    // Unless otherwise specified on the command line, generate unique hostnames\n+    // for eacch spec, so they won't overite / try-to-use each other's sites.\n+    // (I wonder if overwriting `settings.localHostname`, that would affect other\n+    // specs we're running in parallel with the current one? — No, wouldn't;\n+    // they run in different Nodejs processes.)\n+    // Update: Now done here:  [052RKTL40]  instead, where the  cid  is available.\n+    //if (!settings.localHostname) {\n+    //  global.localHostname = nextLocalHostname();\n+    //  console.log(`Generated local hostname: ${global.localHostname}`);\n+    //}\n+\n+    // It's nice if browserA is available also in not-multiremote tests with one browser.\n+    // so there's a way to refer to just *one* browser instead of \n+    if (!global.browserA && _.isArray(capabilities) && capabilities.length === 1) {\n+      global.browserA = global.browser;  // or use the new 'browser' param instead?\n+    }\n+    // Let's do this instead: (if the test uses only one browser, then,\n+    // browserA is undefined, and .browser is the only browser. But, in multiremote,\n+    // browserA is one single browser, .browser runs each command in *all* browsers.)\n+    global.oneWdioBrowser = global.browserA || global.browser;\n+    global.allWdioBrowsers = global.browser;\n+\n+    global.wdioBrowserA = global.oneWdioBrowser;\n+    global.wdioBrowserB = global.browserB; // only in multiremote tests\n+    global.wdioBrowserC = global.browserC; //  — \"\" —\n+\n+    // Extremely confusing if calling the wrong $, e.g.:\n+    //   $('#e_TermsL').getHTML();\n+    // instead of:\n+    //   this.$('#e_TermsL').getHTML();\n+    // The former silently blocks forever, waiting for a  #e_TermsL  elem to appear\n+    // — in the wrong browser session.  (But with trace log level one can study the\n+    // logs and eventually find out it's a different browser session.)\n+    //\n+    global.$ = (selector) => {\n+      lad.die(`You called the global $ but it might be bound to the wrong browser session; ` +\n+          `use:  this.$(...)  instead.  You did:  $('${selector}')  [TyEBADDOLLAR]`);\n+    }\n+\n+    global.$$ = (selector) => {\n+      lad.die(`You called the global $$ but it might be bound to the wrong browser session; ` +\n+          `use:  this.$$(...)  instead.  You did:  $$('${selector}')  [TyEBADDOLLARS]`);\n+    }\n+\n+    if (settings.debugBefore) {\n+      console.log(\"*** Paused, just before starting test. Now you can connect a debugger. ***\");\n+      global.browser.debug();\n+    }\n+  },\n+\n+  /**\n+   * Runs before a WebdriverIO command gets executed.\n+   * @param {String} commandName hook command name\n+   * @param {Array} args arguments that command would receive\n+   */\n+  // beforeCommand: function (commandName, args) {\n+  // },\n+\n+  /**\n+   * Hook that gets executed before the suite starts\n+   * @param {Object} suite suite details\n+   */\n+  // beforeSuite: function (suite) {\n+  // },\n+\n+  /**\n+   * Function to be executed before a test (in Mocha/Jasmine) starts.\n+   */\n+  beforeTest: async function (test, context) {\n+    const oneBrowser = global.browserA || global.browser;\n+    if (settings.debugEachStep) {\n+      await oneBrowser.debug();\n+    }\n+    else if (settings.sloooooooow) {\n+      await oneBrowser.pause(9000);\n+    }\n+    else if (settings.slooooooow) {\n+      await oneBrowser.pause(6500);\n+    }\n+    else if (settings.sloooooow) {\n+      await oneBrowser.pause(4500);\n+    }\n+    else if (settings.slooooow) {\n+      await oneBrowser.pause(3000);\n+    }\n+    else if (settings.sloooow) {\n+      await oneBrowser.pause(2000);\n+    }\n+    else if (settings.slooow) {\n+      await oneBrowser.pause(1500);\n+    }\n+    else if (settings.sloow) {\n+      await oneBrowser.pause(1000);\n+    }\n+    else if (settings.slow) {\n+      await oneBrowser.pause(500);\n+    }\n+  },\n+\n+  /**\n+   * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\n+   * beforeEach in Mocha)\n+   */\n+  // beforeHook: function (test, context) {\n+  // },\n+\n+  /**\n+   * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\n+   * afterEach in Mocha)\n+   */\n+  // afterHook: function (test, context, { error, result, duration, passed, retries }) {\n+  // },\n+\n+  /**\n+   * Function to be executed after a test (in Mocha/Jasmine).\n+   */\n+  afterTest: function(test, context,\n+        result: { error?: any, result?: any, duration: number, passed: boolean,\n+                  retries: { limit: number, attempts: number } }) {\n+    //  Seems isn't called if timeout, weird. So, we also check 'result' below (852RS).\n+    if (!result.passed) {\n+      wasError = true;\n+    }\n+  },\n+\n+  /**\n+   * Hook that gets executed after the suite has ended\n+   * @param {Object} suite suite details\n+   */\n+  afterSuite: function (suite) {\n+    // The typescript interface is just {} (empty obj), but it looks like:  (852RS)\n+    // type: 'afterSuite', error?: { message: string, type: 'AssertionError' | string },\n+    // title: string, parent: string, fullTitle: string, pending: B, file: string }\n+    if ((suite as any).error) {\n+      wasError = true;\n+    }\n+  },\n+\n+  /**\n+   * Runs after a WebdriverIO command gets executed\n+   * @param {String} commandName hook command name\n+   * @param {Array} args arguments that command would receive\n+   * @param {Number} result 0 - command success, 1 - command error\n+   * @param {Object} error error object if any\n+   */\n+  // afterCommand: function (commandName, args, result, error) {\n+  // },\n+\n+  /**\n+   * Gets executed after all tests are done. You still have access to all global variables from\n+   * the test.\n+   * @param {Number} result 0 - test pass, 1 - test fail\n+   * @param {Array.<Object>} capabilities list of capabilities details\n+   * @param {Array.<String>} specs List of spec file paths that ran\n+   */\n+  after: async function (result, capabilities, specs) {\n+    // This works right now, when there's just 1 spec per Webdriverio runner.  (852RS)\n+    const aTestFailed = result === 1;\n+    if (settings.debugAfterwards || settings.debugEachStep\n+          || (wasError || aTestFailed) && settings.debugIfError) {\n+      console.log(\"\");\n+      console.log(\"*** Paused, before exiting test. You can connect a debugger ***\");\n+      await global.browser.debug();\n+    }\n+  },\n+\n+  /**\n+   * Gets executed right after terminating the webdriver session.\n+   * @param {Object} config wdio configuration object\n+   * @param {Array.<Object>} capabilities list of capabilities details\n+   * @param {Array.<String>} specs List of spec file paths that ran\n+   */\n+  // afterSession: function (config, capabilities, specs) {\n+  // },\n+\n+  /**\n+   * Gets executed after all workers got shut down and the process is about to exit. An error\n+   * thrown in the onComplete hook will result in the test run failing.\n+   * @param {Object} exitCode 0 - success, 1 - fail\n+   * @param {Object} config wdio configuration object\n+   * @param {Array.<Object>} capabilities list of capabilities details\n+   * @param {<Object>} results object containing test results\n+   */\n+  // onComplete: function(exitCode, config, capabilities, results) {\n+  // },\n+\n+  /**\n+  * Gets executed when a refresh happens.\n+  * @param {String} oldSessionId session ID of the old session\n+  * @param {String} newSessionId session ID of the new session\n+  */\n+  //onReload: function(oldSessionId, newSessionId) {\n+  //}\n+\n+};\n+\n+\n+// Options to be passed to Mocha. See the full list at http://mochajs.org.\n+// (There's a WebdriverIO MochaOptsConfig interface somewhere, but how import it?)\n+/* included above\n+(config as any).mochaOpts = {\n+  ui: 'bdd',\n+  timeout: settings.waitforTimeout,\n+  grep: settings.grep,\n+  // Bail after first test failure. Saves time, and can inspect the Selenium logs.\n+  bail: true,\n+}; */\n+\n+\n+\n+// --------------------------------------------------------------------\n+//  Static file server?\n+// --------------------------------------------------------------------\n+\n+// We need a static file server, for blog comments tests:\n+// Embedded comments tests generate their own \"dummy blogs\" with\n+// blog posts that embed Talkyard's comments.\n+\n+// This won't work if files piped via stdin — then, specs won't include those files.\n+// (USESTNGS)\n+//const anyEmbCommentsTestNotGatsby =\n+//    config.specs.find(path =>\n+//        path.indexOf('emmbedded-') >= 0 && path.indexOf('gatsby-') === -1);\n+\n+if (settings.staticServer8080) {\n+  // https://webdriver.io/docs/static-server-service.html\n+  console.log(`\\n\\nCWD: ${process.cwd()}\\n`);\n+  const server: WebdriverIO.ServiceEntry = ['static-server', {\n+    port: 8080,  // note: eighty-eighy\n+    folders: [\n+      { path: 'target/', mount: '/' }],\n+  }];\n+  console.log(`I'll start a static server:  ${JSON.stringify(server)}`)\n+  config.services.push(server);\n+}\n+\n+if (settings.staticServerGatsbyNew8000) {\n+  // TODO use port 8081 instead of colliding with 8000, so can run in prallel.\n+  console.log(`\\n\\nCWD: ${process.cwd()}\\n`);\n+  const server: WebdriverIO.ServiceEntry = ['static-server', {\n+    port: 8000, // eight thousand\n+    folders: [\n+      { path: 'modules/gatsby-starter-blog/public/', mount: '/' }],\n+  }];\n+  console.log(`I'll start a static server for Gatsby:  ${JSON.stringify(server)}`)\n+  config.services.push(server);\n+}\n+\n+if (settings.staticServerGatsbyOld8000) {\n+  // TODO use port 8082 instead of colliding with 8000\n+  console.log(`\\n\\nCWD: ${process.cwd()}\\n`);\n+  const server: WebdriverIO.ServiceEntry = ['static-server', {\n+    port: 8000, // eight thousand\n+    folders: [\n+      { path: 'modules/gatsby-starter-blog-ed-comments-0.4.4/public/', mount: '/' }],\n+  }];\n+  console.log(`I'll start a static server for Gatsby, old:  ${JSON.stringify(server)}`)\n+  config.services.push(server);\n+}\n+\n+// --------------------------------------------------------------------\n+//  Many browsers?\n+// --------------------------------------------------------------------\n+\n+// We can have Webdriver.io start 2 or 3 browser instances, doing different things\n+// at the same time, e.g. two browsers typing different chat messages to each other.\n+\n+const maybeInvisible = settings.headless ? ' invisible' : '';\n+const browserName = config.capabilities[0].browserName;\n+\n+// onlyAndSpec won't work with files from stdin unfortunately. (USESTNGS)\n+// 2br and 3br is how many browsers the tests need — 2 or 3 browsers, default 1.\n+const onlyAndSpec = (settings.only || '') + ((settings as any).spec || '');\n+const needsNumBrowsers =\n+    onlyAndSpec.indexOf('3br') >= 0 || settings.numBrowsers >= 3\n+        ? 3\n+        : (onlyAndSpec.indexOf('2br') >= 0 || settings.numBrowsers === 2\n+            ? 2\n+            : 1);\n+\n+if (needsNumBrowsers >= 2) {\n+  const theCaps = config.capabilities[0];\n+\n+  config.capabilities = {\n+    browserA: {\n+      capabilities: { ...theCaps }\n+    },\n+    browserB: {\n+      capabilities: { ...theCaps }\n+    },\n+  };\n+\n+  // Needs to be in own if block — because undefined keys (browserC: undefined)\n+  // causes an error \"TypeError: Cannot convert undefined or null to object\"\n+  // in @wdio/selenium-standalone-service/build/launcher.js (v6.0.15, April 2020).\n+  if (needsNumBrowsers >= 3) {\n+    config.capabilities.browserC = {\n+      capabilities: { ...theCaps }\n+    };\n+  };\n+\n+  console.log(`I'll start ${needsNumBrowsers}${maybeInvisible} ${browserName} browsers.`);\n+}\n+else {\n+  console.log(`I'll start one${maybeInvisible} ${browserName} browser.`);\n+}\n+"
    },
    {
      "sha": "e4c0699b74da41b4f0259de6c223876c7464b3f9",
      "filename": "tests/e2e-wdio7/yarn.lock",
      "status": "added",
      "additions": 4757,
      "deletions": 0,
      "changes": 4757,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/yarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e-wdio7/yarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/yarn.lock?ref=636270da549d2ecec1ef235d11635101742ae8ad"
    },
    {
      "sha": "0714f991066db8ba21579574c3e469d24b1ebcdc",
      "filename": "tests/e2e/package.json",
      "status": "modified",
      "additions": 16,
      "deletions": 3,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/package.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/package.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/package.json?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1,10 +1,23 @@\n {\n   \"author\": \"Kaj Magnus Lindberg\",\n-  \"name\": \"tye2e\",\n-  \"license\": \"AGPL-3.0\",\n+  \"name\": \"ty-e2e-wdio6\",\n+  \"description\": \"Talkyard's e2e tests in Webdriverio 6\",\n+  \"license\": \"AGPL-3.0-or-later\",\n   \"dependencies\": {\n   },\n   \"devDependencies\": {\n-    \"paseto.js\": \"^0.1.7\"\n+    \"@wdio/cli\": \"=6.10.10\",\n+    \"@wdio/devtools-service\": \"=6.10.10\",\n+    \"@wdio/dot-reporter\": \"=6.10.6\",\n+    \"@wdio/firefox-profile-service\": \"=6.10.6\",\n+    \"@wdio/local-runner\": \"=6.10.10\",\n+    \"@wdio/mocha-framework\": \"=6.10.10\",\n+    \"@wdio/selenium-standalone-service\": \"=6.10.10\",\n+    \"@wdio/spec-reporter\": \"=6.10.6\",\n+    \"@wdio/static-server-service\": \"=6.10.10\",\n+    \"@wdio/sync\": \"=6.10.10\",\n+    \"chromedriver\": \"^91.0.0\",\n+    \"paseto.js\": \"^0.1.7\",\n+    \"wdio-chromedriver-service\": \"=6.0.4\"\n   }\n }"
    },
    {
      "sha": "7f2af20da0bacc17e19823051ee7500576993516",
      "filename": "tests/e2e/specs/embcom.sso.token-direct-w-logout-url.2br.test.ts",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/specs/embcom.sso.token-direct-w-logout-url.2br.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/specs/embcom.sso.token-direct-w-logout-url.2br.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embcom.sso.token-direct-w-logout-url.2br.test.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -14,6 +14,8 @@ import c = require('../test-constants');\n import * as Paseto from 'paseto.js';\n \n \n+// Dupl code  [embcom_sso_e2e_dupl]\n+\n let brA: TyE2eTestBrowser;\n let brB: TyE2eTestBrowser;\n let owen: Member;\n@@ -313,6 +315,9 @@ describe(`embcom.sso.token-direct-w-logout-url.2br.test.ts  TyTE2EEMBSSO1`, () =\n   });\n \n \n+\n+  // ----- Good token\n+\n   it(`Selina opens embedding page aaa`, () => {\n     selina_brB.go2(embeddingOrigin + '/so-as-selina.html');\n   });\n@@ -331,6 +336,9 @@ describe(`embcom.sso.token-direct-w-logout-url.2br.test.ts  TyTE2EEMBSSO1`, () =\n   });\n \n \n+\n+  // ----- No token\n+\n   it(`Selina goes to a page without any token`, () => {\n     selina_brB.go2('/so-no-token.html');\n     selina_brB.switchToEmbeddedCommentsIrame();\n@@ -341,7 +349,7 @@ describe(`embcom.sso.token-direct-w-logout-url.2br.test.ts  TyTE2EEMBSSO1`, () =\n         across page reloads`, () => {\n     // ttt  [.648927]\n     selina_brB.complex.waitForNotLoggedInInEmbeddedCommentsIframe({\n-          willBeLogoutBtn: false });\n+          willBeLoginBtn: false });\n     selina_brB.switchToEmbeddedCommentsIrame();\n     assert.not(selina_brB.metabar.isMyUsernameVisible());\n   });\n@@ -372,7 +380,7 @@ describe(`embcom.sso.token-direct-w-logout-url.2br.test.ts  TyTE2EEMBSSO1`, () =\n   it(`... still not logged in ...`, () => {\n     // test code tested above  [.648927]\n     selina_brB.complex.waitForNotLoggedInInEmbeddedCommentsIframe({\n-          willBeLogoutBtn: false });\n+          willBeLoginBtn: false });\n     selina_brB.switchToEmbeddedCommentsIrame();\n     assert.not(selina_brB.metabar.isMyUsernameVisible());\n   });\n@@ -610,6 +618,8 @@ describe(`embcom.sso.token-direct-w-logout-url.2br.test.ts  TyTE2EEMBSSO1`, () =\n   });\n   it(`... doesn't work, she's still logged in afterwards:\n             the embedding site still includes the PASETO authn token`, () => {\n+    selina_brB.refresh2();\n+    selina_brB.switchToEmbCommentsIframeIfNeeded();\n     selina_brB.metabar.waitUntilLoggedIn();\n   });\n   // ----------------"
    },
    {
      "sha": "8e2c571f7a693f55c964eff87006b82e4ecca046",
      "filename": "tests/e2e/specs/embcom.sso.token-in-cookie.2br.test.ts",
      "status": "added",
      "additions": 334,
      "deletions": 0,
      "changes": 334,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/specs/embcom.sso.token-in-cookie.2br.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/specs/embcom.sso.token-in-cookie.2br.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embcom.sso.token-in-cookie.2br.test.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -0,0 +1,334 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('../utils/ty-assert');\n+import fs = require('fs');\n+import server = require('../utils/server');\n+import u = require('../utils/utils');\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings = require('../utils/settings');\n+import lad = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+import * as Paseto from 'paseto.js';\n+\n+\n+// Dupl code  [embcom_sso_e2e_dupl]\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+\n+let selina_brB: TyE2eTestBrowser;\n+const selinaExtUser: ExternalUser = {\n+  ssoId: 'selina-soid',\n+  username: 'selina_un',\n+  fullName: 'Selina Full Name',\n+  primaryEmailAddress: 'e2e-test-selina@x.co',\n+  isEmailAddressVerified: true,\n+}\n+\n+const selinaAutnhMsg = {\n+  //sub: 'ject',\n+  //exp: '2021-05-01T00:00:00Z',\n+  //iat: '2021-05-01T00:00:00Z',\n+  data: {\n+    //ifExists: 'DoNothing', // or 'Update'\n+    //lookupKey: 'soid:selina_sign_on_id',\n+    user: {\n+      ...selinaExtUser,\n+    },\n+  },\n+};\n+\n+\n+const localHostname = 'comments-for-e2e-test-embsth-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-embsth.localhost:8080';\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+\n+const ssoUrl =\n+    `http://localhost:8080/${u.ssoLoginPageSlug}?returnPath=\\${talkyardPathQueryEscHash}`;\n+\n+const ssoUrlVarsReplaced = (path: string): string =>\n+    `http://localhost:8080/${u.ssoLoginPageSlug}?returnPath=${path}`;\n+\n+\n+let pasetoV2LocalSecret = '';\n+\n+\n+\n+describe(`embcom.sso.token-in-cookie.2br.test.ts  TyTE2EEMBSSO2`, () => {\n+\n+  it(`Construct site`, () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Some E2E Test\",\n+      members: ['memah', 'maria', 'michael']\n+    });\n+\n+    builder.getSite().meta.localHostname = localHostname;\n+    builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+\n+    // Disable notifications, or notf email counts will be off\n+    // (since Owen would get emails).\n+    builder.settings({\n+      numFirstPostsToApprove: 0,\n+      numFirstPostsToReview: 0,\n+      enableApi: true,\n+    });\n+\n+    builder.getSite().pageNotfPrefs = [{\n+      memberId: forum.members.owen.id,\n+      notfLevel: c.TestPageNotfLevel.EveryPost,\n+      wholeSite: true,\n+    }];\n+\n+    brA = new TyE2eTestBrowser(wdioBrowserA);\n+    brB = new TyE2eTestBrowser(wdioBrowserB);\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    maria_brB = brB;\n+    maria = forum.members.maria;\n+\n+    selina_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Owen logs in to admin area, ... `, () => {\n+    owen_brA.adminArea.settings.login.goHere(site.origin, { loginAs: owen });\n+  });\n+\n+  it(`... and types an SSO login URL`, () => {\n+    owen_brA.scrollToBottom(); // just speeds the test up slightly\n+    owen_brA.adminArea.settings.login.typeSsoUrl(ssoUrl);\n+  });\n+\n+  it(`... and enables SSO`, () => {\n+    owen_brA.adminArea.settings.login.setEnableSso(true);\n+  });\n+\n+  it(`... generates a PASETO v2.local shared secret`, () => {\n+    owen_brA.adminArea.settings.login.generatePasetoV2LocalSecret();\n+  });\n+\n+  it(`... copies the secret`, () => {\n+    pasetoV2LocalSecret = owen_brA.adminArea.settings.login.copyPasetoV2LocalSecret();\n+  });\n+\n+  it(`... and saves the new settings`, () => {\n+    owen_brA.adminArea.settings.clickSaveAll();\n+  });\n+\n+  it(`There are external SSO login pages`, () => {\n+    u.createSingleSignOnPagesInHtmlDir();\n+  });\n+\n+\n+  let sharedSecretKeyBytes;\n+\n+\n+  let selinasToken: St | U;\n+\n+  it(`An external server converts the symmetric secret to bytes`, () => {\n+    const pasetoV2LocalSecretNoHexPrefix = pasetoV2LocalSecret.replace(/^hex:/, '');\n+    sharedSecretKeyBytes = Buffer.from(\n+            pasetoV2LocalSecretNoHexPrefix, 'hex');\n+            // 'deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 'hex');\n+  });\n+\n+  it(`The external server generates a login token for Selina`, async () => {\n+    // Dupl code [.e2e_encr_paseto]\n+    const messageAsSt = JSON.stringify(selinaAutnhMsg);\n+    const sharedSecretKey  = new Paseto.SymmetricKey(new Paseto.V2());\n+    selinasToken = await sharedSecretKey.inject(sharedSecretKeyBytes).then(() => {\n+      const encoder = sharedSecretKey.protocol();\n+      return encoder.encrypt(messageAsSt, sharedSecretKey);\n+    }).then(token => {\n+      console.log(`Generated PASETO token for Selina:  ${token}`);\n+      // E.g. \"v2.local.kBENRnu2p2.....JKJZB9Lw\"\n+      return 'paseto:' + token;\n+    });;\n+  });\n+\n+\n+\n+  let badAuthnToken: St | U;\n+\n+  it(`... a bad login token appears from nowhere (!)`, async () => {\n+    // Dupl code [.e2e_encr_paseto]\n+    const messageAsSt = JSON.stringify(selinaAutnhMsg);\n+    const badKeyBytes = Buffer.from(\n+            'bad00bad00bad00bad00beefdeadbeefdeadbeefdeadbeefdeadbeefbaadbeef', 'hex');\n+    const wrongKey  = new Paseto.SymmetricKey(new Paseto.V2());\n+    badAuthnToken = await wrongKey.inject(badKeyBytes).then(() => {\n+      const encoder = wrongKey.protocol();\n+      return encoder.encrypt(messageAsSt, wrongKey);\n+    }).then(token => {\n+      console.log(`Generated bad PASETO token:  ${token}`);\n+      return 'paseto:' + token;\n+    });;\n+  });\n+\n+\n+\n+  it(`There's a website with embedding pages`, () => {\n+    const dir = 'target';\n+    fs.writeFileSync(`${dir}/so-as-selina-cookie.html`,\n+            makeHtml('aaa', '#050', selinasToken));\n+    fs.writeFileSync(`${dir}/so-no-token-cookie.html`,\n+            makeHtml('bbb', '#500'));\n+    fs.writeFileSync(`${dir}/so-bad-token-cookie.html`,\n+            makeHtml('bbb', '#500', badAuthnToken));\n+    fs.writeFileSync(`${dir}/so-as-selina-var-and-cookie.html`,\n+            makeHtml('bbb', '#520', selinasToken, selinasToken));\n+    fs.writeFileSync(`${dir}/so-different-var-cookie-token.html`,\n+            makeHtml('bbb', '#502', selinasToken, 'v2.local.DIFFERENT_AND_WRONG'));\n+\n+    function makeHtml(pageName: St, bgColor: St, authnTokenCookie?: St,\n+              authnToken?: St): St {\n+      return u.makeEmbeddedCommentsHtml({\n+              pageName, discussionId: '', authnTokenCookie, authnToken,\n+              localHostname, bgColor});\n+    }\n+  });\n+\n+\n+  // To ttt (tests the tests).\n+  function assertAuthnToken(ps: { html: St, inCookie?: true, inVar?: true }) {\n+    const cookieMatch =\n+            ps.html.match(/^\\s*document\\.cookie\\s*=.*TalkyardAuthnToken\\s*=.*$/gm);\n+    const varMatch =\n+            ps.html.match(/^(\\s*var)?\\s*talkyardAuthnToken\\s*=.*$/gm);\n+    let ok = true;\n+    if (ps.inCookie) ok &&= !!cookieMatch;\n+    else ok &&= cookieMatch === null;\n+    if (ps.inVar) ok &&= !!varMatch;\n+    else ok &&= varMatch === null;\n+    assert.that(ok, `Broken test: HTML source has/hasn't cookie or var token:\\n` +\n+          `Expected: ${JSON.stringify({ inCookie: ps.inCookie, inVar: ps.inVar })}\\n` +\n+          `Actual: ${JSON.stringify({ cookieMatch, varMatch })}\\n` +\n+          `Source: -----------\\n` +\n+          ps.html + '\\n' +\n+          `-------------------\\n\\n`);\n+  }\n+\n+\n+\n+  // ----- Good token\n+\n+  it(`Selina opens embedding page aaa`, () => {\n+    selina_brB.go2(embeddingOrigin + '/so-as-selina-cookie.html');\n+  });\n+  it(`There's no authn token variable, instead, a cookie  ttt`, () => {\n+    const html = selina_brB.getPageSource();\n+    assertAuthnToken({ html, inCookie: true });\n+  });\n+  it(`... can reply directly, auto logged in via PASETO token *in cookie*`, () => {\n+    selina_brB.complex.replyToEmbeddingBlogPost(\"I logged_in_via_a_PASETO_token cookie\");\n+  });\n+\n+  it(`There's no logout button — not included, when auto logged in via token,\n+          then, the embedd*ing* page manages login/out\n+          by including/excluding a PASETO token   UNIMPL   [hide_authn_btns]`, () => {\n+    // assert.not(selina_brB.metabar.isLogoutBtnDisplayed());\n+  });\n+  it(`... and no login button  (already logged in)`, () => {\n+    assert.not(selina_brB.metabar.isLoginButtonDisplayed());\n+  });\n+\n+\n+\n+  // ----- No token\n+\n+  it(`Selina goes to a page without any token — not in var, nor in cookie`, () => {\n+    selina_brB.go2('/so-no-token-cookie.html');\n+    selina_brB.switchToEmbeddedCommentsIrame();\n+    selina_brB.metabar.waitForDisplayed();\n+  });\n+  it(`... there's no authn token anywhere   ttt`, () => {\n+    const html = selina_brB.getPageSource();\n+    assertAuthnToken({ html });\n+  });\n+  it(`... she's NOT logged in, because auto token sessions are NOT remembered\n+        across page reloads`, () => {\n+    // ttt  [.648927]\n+    selina_brB.complex.waitForNotLoggedInInEmbeddedCommentsIframe({\n+          willBeLoginBtn: false });  // hmm [.is_or_isnt] [hide_authn_btns]\n+    selina_brB.switchToEmbeddedCommentsIrame();\n+    assert.not(selina_brB.metabar.isMyUsernameVisible());\n+  });\n+  it(`... there's a Login button`, () => {\n+    assert.ok(selina_brB.metabar.isLoginButtonDisplayed());  // hmm [.is_or_isnt]\n+  });\n+  it(`... no logout button  UNIMPL   [hide_authn_btns]`, () => {\n+    //assert.not(selina_brB.metabar.isLogoutBtnDisplayed());\n+  });\n+\n+\n+\n+  // ----- Bad token\n+\n+  it(`Selina goes to a page but The Token is Bad In The Cookie!`, () => {\n+    selina_brB.go2(embeddingOrigin + '/so-bad-token-cookie.html');\n+  });\n+  it(`... there's a cookie token   ttt`, () => {\n+    const html = selina_brB.getPageSource();\n+    assertAuthnToken({ html, inCookie: true });\n+  });\n+  it(`... it's bad; there's a server error dialog`, () => {\n+    selina_brB.switchToEmbeddedCommentsIrame();\n+    selina_brB.serverErrorDialog.waitAndAssertTextMatches('TyEPASSECEX_');\n+  });\n+\n+\n+  // ----- Token in both var and cookie\n+\n+  it(`Selina goes to a page ...`, () => {\n+    selina_brB.go2(embeddingOrigin + '/so-as-selina-var-and-cookie.html');\n+  });\n+  it(`... with both a cookie token and a var token — they're the same`, () => {\n+    const html = selina_brB.getPageSource();\n+    assertAuthnToken({ html, inCookie: true, inVar: true });\n+  });\n+  it(`... she's logged in, can reply`, () => {\n+    selina_brB.switchToEmbeddedCommentsIrame();\n+    selina_brB.me.waitUntilLoggedIn();\n+  });\n+  it(`... can reply`, () => {\n+    selina_brB.complex.replyToEmbeddingBlogPost(\n+            \"I logged_in_via_a_PASETO_token in both js var, and cookie\");\n+  });\n+\n+\n+  // ----- Two different tokens\n+\n+  it(`Selina goes to a page w both cookie and var token, they're different`, () => {\n+    selina_brB.go2(embeddingOrigin + '/so-different-var-cookie-token.html');\n+    const html = selina_brB.getPageSource();\n+    assertAuthnToken({ html, inCookie: true, inVar: true });\n+  });\n+  it(`... she does not get logged in — Ty doesn't know which token to use`, () => {\n+    selina_brB.switchToEmbeddedCommentsIrame();\n+    selina_brB.me.waitUntilKnowsNotLoggedIn();\n+  });\n+\n+\n+});\n+"
    },
    {
      "sha": "b0d895cfea11dc8174b6a51bb519ba0171b158bf",
      "filename": "tests/e2e/specs/embedded-comments-drafts-not-logged-in.test.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 222,
      "changes": 222,
      "blob_url": "https://github.com/debiki/talkyard/blob/15177b939c6bf33cf7456c7cb24ea4a41fdb5d65/tests/e2e/specs/embedded-comments-drafts-not-logged-in.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/15177b939c6bf33cf7456c7cb24ea4a41fdb5d65/tests/e2e/specs/embedded-comments-drafts-not-logged-in.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-comments-drafts-not-logged-in.test.ts?ref=15177b939c6bf33cf7456c7cb24ea4a41fdb5d65",
      "patch": "@@ -1,222 +0,0 @@\n-/// <reference path=\"../test-types.ts\"/>\n-\n-import * as _ from 'lodash';\n-import assert = require('assert');\n-import fs = require('fs');\n-import server = require('../utils/server');\n-import utils = require('../utils/utils');\n-import { TyE2eTestBrowser } from '../utils/pages-for';\n-import settings = require('../utils/settings');\n-import make = require('../utils/make');\n-import logAndDie = require('../utils/log-and-die');\n-import c = require('../test-constants');\n-let browser: TyE2eTestBrowser;\n-\n-let everyonesBrowsers;\n-let maria;\n-let mariasBrowser: TyE2eTestBrowser;\n-let strangersBrowser: TyE2eTestBrowser;\n-\n-let data;\n-let idAddress: IdAddress;\n-let siteId: any;\n-\n-const mariasCommentOneOrig = 'mariasCommentOneOrig';\n-const mariasCommentOneEdited = 'mariasCommentOneEdited';\n-const mariasCommentTwo = 'mariasCommentTwo';\n-\n-const localHostname = 'comments-for-e2e-test-embddrft-localhost-8080';\n-const embeddingOrigin = 'http://e2e-test-embddrft.localhost:8080';\n-const pageDddSlug = 'emb-cmts-ddd.html';\n-const pageEeeSlug = 'emb-cmts-eee.html';\n-\n-\n-describe(\"emb cmts drafts when not logged in  TyT2ZBKPW048\", () => {\n-\n-  it(\"initialize people\", () => {\n-    everyonesBrowsers = new TyE2eTestBrowser(wdioBrowser);\n-    mariasBrowser = everyonesBrowsers;\n-    maria = make.memberMaria();\n-  });\n-\n-  it(\"import a site\", () => {\n-    const site: SiteData = make.forumOwnedByOwen('embddrft', { title: \"Emb Cmts Disc Id Test\" });\n-    site.meta.localHostname = localHostname;\n-    site.settings.allowEmbeddingFrom = embeddingOrigin;\n-    site.settings.requireVerifiedEmail = false;\n-    site.settings.mayComposeBeforeSignup = true;\n-    site.settings.mayPostBeforeEmailVerified = true;\n-    site.settings.allowGuestLogin = true;\n-    site.members.push(maria);\n-    idAddress = server.importSiteData(site);\n-    siteId = idAddress.id;\n-  });\n-\n-  it(\"create two embedding pages ddd & eee\", () => {\n-    const dir = 'target';\n-    fs.writeFileSync(`${dir}/${pageDddSlug}`, makeHtml('ddd', '', '#500'));\n-    fs.writeFileSync(`${dir}/${pageEeeSlug}`, makeHtml('eee', '', '#040'));\n-    function makeHtml(pageName: string, discussionId: string, bgColor: string): string {\n-      return utils.makeEmbeddedCommentsHtml({ pageName, discussionId, localHostname, bgColor });\n-    }\n-  });\n-\n-  it(\"Maria opens embedding page ddd\", () => {\n-    mariasBrowser.go(embeddingOrigin + '/' + pageDddSlug);\n-  });\n-\n-  it(\"Starts writing a reply, when not logged in\", () => {\n-    mariasBrowser.switchToEmbeddedCommentsIrame();\n-    mariasBrowser.topic.clickReplyToEmbeddingBlogPost();\n-  });\n-\n-  it(\"... writes a comment\", () => {\n-    mariasBrowser.switchToEmbeddedEditorIrame();\n-    mariasBrowser.editor.editText(mariasCommentOneOrig);\n-\n-    // Chrome 80, Feb 2020, stopped on-unload saving drafts, cannot\n-    // figure out why: it also won't stop on breakpoints. FF still works fine.\n-    if (settings.browserName === 'chrome') {  // [NOBEACON] [E2EBUG]\n-      mariasBrowser.editor.waitForDraftSavedInBrowser();\n-    }\n-  });\n-\n-\n-  // ----- Beacon save, first reply\n-\n-  it(\"She reloads the page, without posting the comment — this saves the text in the browser\", () => {\n-    mariasBrowser.refresh();\n-  });\n-\n-  it(\"... she starts writing again\", () => {\n-    mariasBrowser.switchToEmbeddedCommentsIrame();\n-    mariasBrowser.topic.clickReplyToEmbeddingBlogPost();\n-  });\n-\n-  it(\"... the text is still there; it was saved in the browser's sessionStorage\", () => {\n-    mariasBrowser.switchToEmbeddedEditorIrame();\n-    mariasBrowser.editor.waitForDraftTextToLoad(mariasCommentOneOrig);\n-  });\n-\n-\n-  // ----- Drafts are per page\n-\n-  it(\"she goes from page ddd to eee\", () => {\n-    let source = mariasBrowser.getSource();\n-    assert(source.indexOf('ddd') > 0);\n-    mariasBrowser.go(embeddingOrigin + '/' + pageEeeSlug);\n-    source = mariasBrowser.getSource();\n-    assert(source.indexOf('eee') > 0);\n-  });\n-\n-  it(\"... starts replying to page Eee's blog post\", () => {\n-    mariasBrowser.switchToEmbeddedCommentsIrame();\n-    mariasBrowser.topic.clickReplyToEmbeddingBlogPost();\n-  });\n-\n-  it(\"... now there's no draft — because this is a different page, page Eee\", () => {\n-    mariasBrowser.switchToEmbeddedEditorIrame();\n-    mariasBrowser.editor.waitForDraftTextToLoad('');\n-  });\n-\n-  it(\"she retunrs to ddd\", () => {\n-    mariasBrowser.go(embeddingOrigin + '/' + pageDddSlug);\n-    const source = mariasBrowser.getSource();\n-    assert(source.indexOf('ddd') > 0);\n-  });\n-\n-  it(\"... starts replying again\", () => {\n-    mariasBrowser.switchToEmbeddedCommentsIrame();\n-    mariasBrowser.topic.clickReplyToEmbeddingBlogPost();\n-  });\n-\n-  it(\"... the draft text loads, again\", () => {\n-    mariasBrowser.switchToEmbeddedEditorIrame();\n-    mariasBrowser.editor.waitForDraftTextToLoad(mariasCommentOneOrig);\n-  });\n-\n-  it(\"... she edits the reply draft\", () => {\n-    mariasBrowser.editor.editText(mariasCommentOneEdited);\n-  });\n-\n-\n-  // ----- Unmount save, first reply\n-\n-  it(\"And closes the editor — this unmound-saves the reply\", () => {\n-    mariasBrowser.editor.cancelNoHelp();\n-  });\n-\n-  it(\"She refreshes, and reopens the editor\", () => {\n-    mariasBrowser.refresh();\n-    mariasBrowser.switchToEmbeddedCommentsIrame();\n-    mariasBrowser.topic.clickReplyToEmbeddingBlogPost();\n-  });\n-\n-  it(\"... the text is there, edited\", () => {\n-    mariasBrowser.switchToEmbeddedEditorIrame();\n-    mariasBrowser.editor.waitForDraftTextToLoad(mariasCommentOneEdited);\n-  });\n-\n-  it(\"She clicks Post Reply\", () => {\n-    mariasBrowser.editor.save();\n-  });\n-\n-  it(\"... logs in, to post the comment\", () => {\n-    mariasBrowser.loginDialog.loginWithPasswordInPopup(maria);\n-  });\n-\n-  it(\"The comment is there, as the first reply\", () => {\n-    mariasBrowser.switchToEmbeddedCommentsIrame();\n-    mariasBrowser.topic.waitForPostAssertTextMatches(c.FirstReplyNr, mariasCommentOneEdited);\n-  });\n-\n-\n-  // ----- Beacon save, subsequent replies\n-\n-  it(\"Maria logs out\", () => {\n-    mariasBrowser.metabar.clickLogout();\n-  });\n-\n-  it(\"And starts typing a reply to herself, not logged in\", () => {\n-    mariasBrowser.switchToEmbeddedCommentsIrame();\n-    mariasBrowser.topic.clickReplyToPostNr(c.FirstReplyNr);\n-    mariasBrowser.switchToEmbeddedEditorIrame();\n-    mariasBrowser.editor.editText(mariasCommentTwo);\n-    if (settings.browserName === 'chrome') {  // [NOBEACON] [E2EBUG]\n-      mariasBrowser.editor.waitForDraftSavedInBrowser();\n-    }\n-  });\n-\n-  it(\"Refreshs the page — this beacon saves\", () => {\n-    mariasBrowser.refresh();\n-  });\n-\n-  it(\"She starts replying to herself again\", () => {\n-    mariasBrowser.switchToEmbeddedCommentsIrame();\n-    mariasBrowser.topic.clickReplyToPostNr(c.FirstReplyNr);\n-  });\n-\n-  it(\"... the text is there, it got beacon-saved\", () => {\n-    mariasBrowser.switchToEmbeddedEditorIrame();\n-    mariasBrowser.editor.waitForDraftTextToLoad(mariasCommentTwo);\n-  });\n-\n-\n-  // ----- Drafts are per post\n-\n-  it(\"She closes the editor\", () => {\n-    mariasBrowser.editor.cancelNoHelp();\n-  });\n-\n-  it(\"And clicks Reply, to the blog post (but not her own comment)\", () => {\n-    mariasBrowser.switchToEmbeddedCommentsIrame();\n-    mariasBrowser.topic.clickReplyToEmbeddingBlogPost();\n-  });\n-\n-  it(\"Now no draft text loads, because the draft is for a reply to Marias's comment\", () => {\n-    mariasBrowser.switchToEmbeddedEditorIrame();\n-    mariasBrowser.editor.waitForDraftTextToLoad('');\n-  });\n-\n-});\n-"
    },
    {
      "sha": "c28ff5fa00ca837de366c283a15ac60664f5d3c1",
      "filename": "tests/e2e/specs/embedded-comments-scroll-embedding-page.test.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/specs/embedded-comments-scroll-embedding-page.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/specs/embedded-comments-scroll-embedding-page.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-comments-scroll-embedding-page.test.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -102,7 +102,10 @@ ${ extraHeight > 500 ? \"<br><br><i>SCROLL DOWN\\n:\\n:\\n:</i>\" : \"\"}\n       mariasBrowser.switchToEmbeddedCommentsIrame();\n       mariasBrowser.metabar.waitForDisplayed();\n       mariasBrowser.switchToTheParentFrame();\n-      assert.ok(mariasBrowser.isVisible('.ty_CmtsIfr'));\n+      // Weird, fails:  assert.ok(mariasBrowser.isVisible('.ty_CmtsIfr'));\n+      // although it's there already. Chromedriver or Webdriverio bug?\n+      // Works:\n+      mariasBrowser.waitForVisible('.ty_CmtsIfr');\n     });\n \n     it(prefix + \"... Ty still didn't scroll down to the comments\", () => {"
    },
    {
      "sha": "2be78780da184ac3e90e343b554f58cb3e9157ab",
      "filename": "tests/e2e/specs/embedded-comments-vote-first.test.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 87,
      "changes": 87,
      "blob_url": "https://github.com/debiki/talkyard/blob/15177b939c6bf33cf7456c7cb24ea4a41fdb5d65/tests/e2e/specs/embedded-comments-vote-first.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/15177b939c6bf33cf7456c7cb24ea4a41fdb5d65/tests/e2e/specs/embedded-comments-vote-first.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-comments-vote-first.test.ts?ref=15177b939c6bf33cf7456c7cb24ea4a41fdb5d65",
      "patch": "@@ -1,87 +0,0 @@\n-/// <reference path=\"../test-types.ts\"/>\n-\n-import * as _ from 'lodash';\n-import assert = require('assert');\n-import fs = require('fs');\n-import server = require('../utils/server');\n-import { TyE2eTestBrowser } from '../utils/pages-for';\n-import utils = require('../utils/utils');\n-import make = require('../utils/make');\n-\n-let browser: TyE2eTestBrowser;\n-\n-let everyonesBrowsers;\n-let michael;\n-let michaelsBrowser: TyE2eTestBrowser;\n-\n-let idAddress: IdAddress;\n-let siteId: any;\n-\n-const michaelsComment = 'michaelsComment';\n-\n-const localHostname = 'comments-for-e2e-test-embvote1st-localhost-8080';\n-const embeddingOrigin = 'http://e2e-test-embvote1st.localhost:8080';\n-const pageSlug = 'emb-cmts-edit-and-vote.html';\n-const pageUrl = embeddingOrigin + '/' + pageSlug;\n-const pageName = \"The Page Name\";\n-const bgColor = \"#550\";\n-\n-\n-describe(\"emb cmts vote first  TyT2AKBS056\", () => {\n-\n-  it(\"initialize people\", () => {\n-    everyonesBrowsers = new TyE2eTestBrowser(wdioBrowser);\n-    michaelsBrowser = everyonesBrowsers;\n-    michael = make.memberMichael();\n-  });\n-\n-  it(\"import a site\", () => {\n-    const site: SiteData = make.forumOwnedByOwen('embvote1st', { title: \"Emb Cmts Vote First Test\" });\n-    site.meta.localHostname = localHostname;\n-    site.settings.allowEmbeddingFrom = embeddingOrigin;\n-    site.settings.requireVerifiedEmail = false;\n-    site.settings.mayPostBeforeEmailVerified = true;\n-    site.members.push(michael);\n-    idAddress = server.importSiteData(site);\n-    siteId = idAddress.id;\n-  });\n-\n-  it(\"create embedding page\", () => {\n-    const html = utils.makeEmbeddedCommentsHtml({ pageName, discussionId: '', localHostname, bgColor });\n-    fs.writeFileSync(`target/${pageSlug}`, html);\n-  });\n-\n-  it(\"Michael opens the embedding page\", () => {\n-    michaelsBrowser.go(pageUrl);\n-    michaelsBrowser.switchToEmbeddedCommentsIrame();\n-    michaelsBrowser.disableRateLimits();\n-  });\n-\n-  it(\"... logs in\", () => {\n-    michaelsBrowser.complex.loginWithPasswordViaMetabar(michael);\n-  });\n-\n-  it(\"... clicks Like, the very first thing, before page created\", () => {\n-    // This previously resulted in a \"Page not found, id: `0'\" error, because the page had\n-    // not yet been created.\n-    michaelsBrowser.switchToEmbeddedCommentsIrame();\n-    michaelsBrowser.topic.clickLikeVoteForBlogPost();\n-  });\n-\n-  it(\"Michael replies, too\", () => {\n-    michaelsBrowser.complex.replyToEmbeddingBlogPost(michaelsComment);\n-  });\n-\n-  it(\"After page reload, the reply is still there\", () => {\n-    michaelsBrowser.refresh();\n-    michaelsBrowser.switchToEmbeddedCommentsIrame();\n-    michaelsBrowser.topic.waitForPostNrVisible(2);\n-    michaelsBrowser.topic.assertPostTextMatches(2, michaelsComment);\n-  });\n-\n-  it(\"... and the like vote is there too\", () => {\n-    assert(michaelsBrowser.isVisible('.dw-a-like.icon-heart.dw-my-vote'));\n-  });\n-\n-});\n-"
    },
    {
      "sha": "f27cb4243bffe143091627c452b5e817983738d8",
      "filename": "tests/e2e/specs/votes-and-best-first.test.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/specs/votes-and-best-first.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/specs/votes-and-best-first.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/votes-and-best-first.test.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -62,7 +62,7 @@ const postNrAA = 7;\n  * Staff Unwants AA, it gets placed last.\n  * Unwanted vote cancelled, AA gets placed first again.\n  */\n-describe(\"votes and best first\", () => {\n+describe(`votes-and-best-first  TyTESORTBEST`, () => {\n \n   it(\"import a site\", () => {\n     forum = buildSite().addLargeForum({ title: \"Votes Forum\" });\n@@ -73,7 +73,7 @@ describe(\"votes and best first\", () => {\n     // Add AA, BB, CC, XX, YY, ZZ, but not in that order, instead, an a bit random\n     // order: AA, BB, CC reversed and inserted in between the others. Then, when\n     // adding votes, we'll notice if AA, BB, CC will get sorted correctly.\n-    siteData.posts.push(make.post({\n+    siteData.posts.push(make.post({  // Nice!\n       nr: postNrXX,\n       parentNr: c.BodyNr,\n       page: forum.topics.byMariaCategoryA,"
    },
    {
      "sha": "33da76118692e96e5e2bf4723890c52f3f389132",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/pages-for.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -8580,13 +8580,14 @@ export class TyE2eTestBrowser {\n       },\n \n       waitForNotLoggedInInEmbeddedCommentsIframe: (\n-              ps: { willBeLogoutBtn?: false } = {}) => {\n+              ps: { willBeLoginBtn?: false } = {}) => {\n         this.switchToEmbeddedCommentsIrame();\n         this.waitForMyDataAdded();\n-        if (ps.willBeLogoutBtn !== false) {\n+        if (ps.willBeLoginBtn !== false) {\n           this.metabar.waitForLoginButtonVisible();  // ok? or is this a race?\n         }\n         else {\n+          // Could do always, but looking for the login button (above) is enough.\n           const me = this.me.waitAndGetMyself();\n           tyAssert.not(me.isLoggedIn);\n           tyAssert.not(me.id);"
    },
    {
      "sha": "32bc8f0777153295cb48ad7bc8fac21b1c2e5b72",
      "filename": "tests/e2e/utils/utils.ts",
      "status": "modified",
      "additions": 56,
      "deletions": 1,
      "changes": 57,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/utils/utils.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/utils/utils.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/utils.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -84,18 +84,21 @@ const utils = {\n   __brokenPreview: '.s_LnPv-Err',\n   __intLinkProvider: { name: 'Int', inSandboxedIframe: false } as LinkPreviewProvider,\n \n+\n   // REMOVE use makeLinkPreviewSelector(..) instead.\n   makePreviewOkSelector: (provider: LinkPreviewProvider | 'InternalLink',\n           opts: { url?: St } = {}) => {\n     return utils.makeLinkPreviewSelector(provider, { ...opts, broken: false });\n   },\n \n+\n   // REMOVE use makeLinkPreviewSelector(..) instead.\n   makePreviewBrokenSelector: (provider: LinkPreviewProvider | 'InternalLink',\n           opts: { url?: St, errCode?: St } = {}) => {\n     return utils.makeLinkPreviewSelector(provider, { ...opts, broken: true });\n   },\n \n+\n   makeLinkPreviewSelector: (provider: LinkPreviewProvider | 'InternalLink',\n           opts: { url?: St, broken?: Bo, errCode?: St } = {}) => {\n \n@@ -143,6 +146,7 @@ const utils = {\n     logMessage(`SSO: Done`);\n   },\n \n+\n   makeExternalUserFor: (member: Member, opts: {\n     ssoId: string,\n     primaryEmailAddress?: string,\n@@ -167,10 +171,11 @@ const utils = {\n     };\n   },\n \n+\n   makeEmbeddedCommentsHtml(ps: { pageName: string, discussionId?: string,\n       talkyardPageId?: string, categoryRef?: string,\n       localHostname?: string, color?: string, bgColor: string, htmlToPaste?: string,\n-      authnToken?: St | Ay }): St {\n+      authnToken?: St | Ay, authnTokenCookie?: St | Ay }): St {\n     // Dupl code [046KWESJJLI3].\n     dieIf(!!ps.localHostname && !!ps.htmlToPaste, 'TyE502PK562');\n     dieIf(!ps.localHostname && !ps.htmlToPaste, 'TyE7FHQJ45X');\n@@ -184,10 +189,16 @@ const utils = {\n         ` data-discussion-id=\"\"`, ` data-discussion-id=\"${ps.discussionId}\"`);\n     }\n \n+    const authnTokenCookieScript = !ps.authnTokenCookie ? '' : `\n+<script>\n+document.cookie = 'TalkyardAuthnToken=${ps.authnTokenCookie}; Max-Age=3600; path=/';\n+</script>`;\n+\n     const authnTokenScript = !ps.authnToken ? '' : `\n <script>\n talkyardAuthnToken = ${JSON.stringify(ps.authnToken)};\n </script>`;\n+\n     const ieEmpty = !ps.discussionId ? ', i.e. <b>no</b> id' : '';\n     let resultHtmlStr = `\n <html>\n@@ -200,6 +211,7 @@ Category ref: \"${ps.categoryRef || ''}\"${ps.categoryRef ? '' : \" (none)\"}.<br>\n Ok to delete. The comments: (generated by the admin js bundle [2JKWTQ0])</p>\n <hr>\n ${ htmlToPaste ? htmlToPaste :\n+authnTokenCookieScript +\n authnTokenScript + `\n <script>talkyardServerUrl='${settings.scheme}://${ps.localHostname}.localhost';</script>\n <script async defer src=\"${settings.scheme}://${ps.localHostname}.localhost/-/talkyard-comments.js\"></script>\n@@ -221,6 +233,49 @@ authnTokenScript + `\n   },\n \n \n+  makeManyEmbeddedCommentsHtml(ps: { pageName: St, discussionIds: St[],\n+      localHostname?: St, color?: St, bgColor: St }): St {\n+    // Dupl code [046KWESJJLI3].\n+\n+    let multiCommentsHtml = '';\n+    for (let discId of ps.discussionIds) {\n+    multiCommentsHtml += `\n+<hr>\n+<p>Discussion id '${discId}':</p>\n+<div class=\"talkyard-comments\" data-discussion-id=\"${discId}\" style=\"\">\n+</div\n+`\n+    }\n+\n+    let resultHtmlStr = `\n+<html>\n+<head>\n+<title>Embedded comments many iframes E2E test</title>\n+<style>\n+body { background: ${ps.bgColor || 'black'}; color: ${ps.color || '#ccc'}; font-family: monospace; }\n+iframe { margin: 15px 0 25px; }\n+</style>\n+</head>\n+<body>\n+<p>Embedded comments E2E test page \"${ps.pageName}\".<br>\n+Discussion ids: \"${JSON.stringify(ps.discussionIds)}.<br>\n+Ok to delete. The comments: (generated by the admin js bundle [603MRATE24])</p>\n+<hr>\n+<script>\n+talkyardManyCommentIframes = true;\n+talkyardServerUrl='${settings.scheme}://${ps.localHostname}.localhost';\n+</script>\n+<script async defer src=\"${settings.scheme}://${ps.localHostname}.localhost/-/talkyard-comments.js\"></script>\n+${multiCommentsHtml}\n+<hr>\n+<p>/End of page.</p>\n+</body>\n+</html>`;\n+\n+    return resultHtmlStr;\n+  },\n+\n+\n   makeBlogPostIndexPageHtml(ps: { localHostname?: St, urlA: St, urlB: St, urlC: St,\n           urlD: St, urlE: St, urlF: St, urlG: St,\n           urlH: 'NoHref', urlI: 'NoLinkTag' }): St {"
    },
    {
      "sha": "a498e35934a06e8b0b4ec6a23aba098a4f8792f5",
      "filename": "tests/e2e/yarn.lock",
      "status": "modified",
      "additions": 4728,
      "deletions": 15,
      "changes": 4743,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/yarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/tests/e2e/yarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/yarn.lock?ref=636270da549d2ecec1ef235d11635101742ae8ad"
    },
    {
      "sha": "f1de19f1de15d3afa60df536036758042e1cc9a9",
      "filename": "translations/en_US/i18n.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/translations/en_US/i18n.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/translations/en_US/i18n.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations/en_US/i18n.ts?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -463,7 +463,8 @@ var t_en_US: TalkyardTranslations = t = {\n \n     // This explains how the Recent tab in the sidebar works.\n \n-    RepliesToTheLeft: \"The replies to the left are sorted by \",\n+    // MISSING \"are sorted by\" —> \"might be\"\n+    RepliesToTheLeft: \"The replies to the left might be sorted by \",\n     bestFirst: \"best-first.\",\n     ButBelow: \"But below \",\n     insteadBy: \" the same replies are instead sorted by \","
    },
    {
      "sha": "4fecfc3278dd89721100ceddeb3012b9f5b3139b",
      "filename": "vendors/jars",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/vendors/jars?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1 +1 @@\n-Subproject commit 24d628b96785af5438905956c1404f39194229b4\n+Subproject commit 4fecfc3278dd89721100ceddeb3012b9f5b3139b"
    },
    {
      "sha": "eda35cc805f0d300588f104df000323cf4d4b5a8",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=636270da549d2ecec1ef235d11635101742ae8ad",
      "patch": "@@ -1 +1 @@\n-v0.2021.21\n+v0.2021.22"
    },
    {
      "sha": "2c9e9f431a74449373eb232ec68708308ba68d08",
      "filename": "yarn.lock",
      "status": "modified",
      "additions": 107,
      "deletions": 3384,
      "changes": 3491,
      "blob_url": "https://github.com/debiki/talkyard/blob/636270da549d2ecec1ef235d11635101742ae8ad/yarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/636270da549d2ecec1ef235d11635101742ae8ad/yarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/yarn.lock?ref=636270da549d2ecec1ef235d11635101742ae8ad"
    }
  ]
}
