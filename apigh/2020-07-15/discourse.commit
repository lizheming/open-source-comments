{
  "sha": "a37a19b55ced25372df56e92b0f6089f7021dddb",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODphMzdhMTliNTVjZWQyNTM3MmRmNTZlOTJiMGY2MDg5ZjcwMjFkZGRi",
  "commit": {
    "author": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2020-07-14T17:07:54Z"
    },
    "committer": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2020-07-15T15:48:55Z"
    },
    "message": "REFACTOR: Remove less effective method of injecting `siteSettings`",
    "tree": {
      "sha": "21ff904385a37202854620a51dd7e5d2e94112ec",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/21ff904385a37202854620a51dd7e5d2e94112ec"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/a37a19b55ced25372df56e92b0f6089f7021dddb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/a37a19b55ced25372df56e92b0f6089f7021dddb",
  "html_url": "https://github.com/discourse/discourse/commit/a37a19b55ced25372df56e92b0f6089f7021dddb",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/a37a19b55ced25372df56e92b0f6089f7021dddb/comments",
  "author": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ca13160435c7865f94499ed29a0786facceb1212",
      "url": "https://api.github.com/repos/discourse/discourse/commits/ca13160435c7865f94499ed29a0786facceb1212",
      "html_url": "https://github.com/discourse/discourse/commit/ca13160435c7865f94499ed29a0786facceb1212"
    }
  ],
  "stats": {
    "total": 94,
    "additions": 55,
    "deletions": 39
  },
  "files": [
    {
      "sha": "585fa7a868f1a40c8b40938cd725f48275aa4226",
      "filename": "app/assets/javascripts/discourse/app/models/bookmark.js",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/a37a19b55ced25372df56e92b0f6089f7021dddb/app/assets/javascripts/discourse/app/models/bookmark.js",
      "raw_url": "https://github.com/discourse/discourse/raw/a37a19b55ced25372df56e92b0f6089f7021dddb/app/assets/javascripts/discourse/app/models/bookmark.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/bookmark.js?ref=a37a19b55ced25372df56e92b0f6089f7021dddb",
      "patch": "@@ -171,7 +171,6 @@ const Bookmark = RestModel.extend({\n Bookmark.reopenClass({\n   create(args) {\n     args = args || {};\n-    args.siteSettings = args.siteSettings || Discourse.SiteSettings;\n     args.currentUser = args.currentUser || Discourse.currentUser;\n     return this._super(args);\n   }"
    },
    {
      "sha": "571cfe268c027033a073171238a82cd9893aadaa",
      "filename": "app/assets/javascripts/discourse/app/models/composer.js",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/a37a19b55ced25372df56e92b0f6089f7021dddb/app/assets/javascripts/discourse/app/models/composer.js",
      "raw_url": "https://github.com/discourse/discourse/raw/a37a19b55ced25372df56e92b0f6089f7021dddb/app/assets/javascripts/discourse/app/models/composer.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/composer.js?ref=a37a19b55ced25372df56e92b0f6089f7021dddb",
      "patch": "@@ -1211,7 +1211,6 @@ Composer.reopenClass({\n     args = args || {};\n     args.user = args.user || User.current();\n     args.site = args.site || Site.current();\n-    args.siteSettings = args.siteSettings || Discourse.SiteSettings;\n     return this._super(args);\n   },\n "
    },
    {
      "sha": "18bc421fea474f6358e06813e37b0e613fafae8e",
      "filename": "app/assets/javascripts/discourse/app/models/post.js",
      "status": "modified",
      "additions": 1,
      "deletions": 13,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/a37a19b55ced25372df56e92b0f6089f7021dddb/app/assets/javascripts/discourse/app/models/post.js",
      "raw_url": "https://github.com/discourse/discourse/raw/a37a19b55ced25372df56e92b0f6089f7021dddb/app/assets/javascripts/discourse/app/models/post.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/post.js?ref=a37a19b55ced25372df56e92b0f6089f7021dddb",
      "patch": "@@ -1,6 +1,6 @@\n import I18n from \"I18n\";\n import discourseComputed from \"discourse-common/utils/decorators\";\n-import EmberObject, { computed, get } from \"@ember/object\";\n+import EmberObject, { get } from \"@ember/object\";\n import { isEmpty } from \"@ember/utils\";\n import { equal, and, or, not } from \"@ember/object/computed\";\n import { ajax } from \"discourse/lib/ajax\";\n@@ -18,18 +18,6 @@ import User from \"discourse/models/user\";\n import showModal from \"discourse/lib/show-modal\";\n \n const Post = RestModel.extend({\n-  // TODO: Remove this once one instantiate all `Discourse.Post` models via the store.\n-  siteSettings: computed({\n-    get() {\n-      return Discourse.SiteSettings;\n-    },\n-\n-    // prevents model created from json to overridde this property\n-    set() {\n-      return Discourse.SiteSettings;\n-    }\n-  }),\n-\n   @discourseComputed(\"url\")\n   shareUrl(url) {\n     const user = User.current();"
    },
    {
      "sha": "5322a8113b651d1a9b9c9b0e3c5fd703c3cdeafc",
      "filename": "test/javascripts/helpers/component-test.js",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/a37a19b55ced25372df56e92b0f6089f7021dddb/test/javascripts/helpers/component-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/a37a19b55ced25372df56e92b0f6089f7021dddb/test/javascripts/helpers/component-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/helpers/component-test.js?ref=a37a19b55ced25372df56e92b0f6089f7021dddb",
      "patch": "@@ -4,6 +4,7 @@ import { autoLoadModules } from \"discourse/initializers/auto-load-modules\";\n import TopicTrackingState from \"discourse/models/topic-tracking-state\";\n import User from \"discourse/models/user\";\n import Site from \"discourse/models/site\";\n+import { currentSettings } from \"helpers/site-settings\";\n \n export default function(name, opts) {\n   opts = opts || {};\n@@ -15,7 +16,7 @@ export default function(name, opts) {\n   test(name, function(assert) {\n     this.site = Site.current();\n \n-    this.registry.register(\"site-settings:main\", Discourse.SiteSettings, {\n+    this.registry.register(\"site-settings:main\", currentSettings(), {\n       instantiate: false\n     });\n     this.registry.register(\"capabilities:main\", EmberObject);\n@@ -25,7 +26,7 @@ export default function(name, opts) {\n     this.registry.injection(\"component\", \"capabilities\", \"capabilities:main\");\n     this.registry.injection(\"component\", \"site\", \"site:main\");\n \n-    this.siteSettings = Discourse.SiteSettings;\n+    this.siteSettings = currentSettings();\n \n     autoLoadModules(this.registry, this.registry);\n "
    },
    {
      "sha": "c47581650985cc8b51b44644d1d388fcad7dffe7",
      "filename": "test/javascripts/helpers/create-store.js",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/discourse/discourse/blob/a37a19b55ced25372df56e92b0f6089f7021dddb/test/javascripts/helpers/create-store.js",
      "raw_url": "https://github.com/discourse/discourse/raw/a37a19b55ced25372df56e92b0f6089f7021dddb/test/javascripts/helpers/create-store.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/helpers/create-store.js?ref=a37a19b55ced25372df56e92b0f6089f7021dddb",
      "patch": "@@ -4,6 +4,7 @@ import KeyValueStore from \"discourse/lib/key-value-store\";\n import TopicListAdapter from \"discourse/adapters/topic-list\";\n import TopicTrackingState from \"discourse/models/topic-tracking-state\";\n import { buildResolver } from \"discourse-common/resolver\";\n+import { currentSettings } from \"helpers/site-settings\";\n \n const CatAdapter = RestAdapter.extend({\n   primaryKey: \"cat_id\"\n@@ -40,7 +41,7 @@ export default function(customLookup = () => {}) {\n           return this._tracker;\n         }\n         if (type === \"site-settings:main\") {\n-          this._settings = this._settings || Discourse.SiteSettings;\n+          this._settings = this._settings || currentSettings();\n           return this._settings;\n         }\n         return customLookup(type);"
    },
    {
      "sha": "aed99d6634d182902eea79849595064fd885f518",
      "filename": "test/javascripts/helpers/qunit-helpers.js",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/discourse/discourse/blob/a37a19b55ced25372df56e92b0f6089f7021dddb/test/javascripts/helpers/qunit-helpers.js",
      "raw_url": "https://github.com/discourse/discourse/raw/a37a19b55ced25372df56e92b0f6089f7021dddb/test/javascripts/helpers/qunit-helpers.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/helpers/qunit-helpers.js?ref=a37a19b55ced25372df56e92b0f6089f7021dddb",
      "patch": "@@ -25,6 +25,7 @@ import { resetCustomPostMessageCallbacks } from \"discourse/controllers/topic\";\n import { _clearSnapshots } from \"select-kit/components/composer-actions\";\n import User from \"discourse/models/user\";\n import { mapRoutes } from \"discourse/mapping-router\";\n+import { currentSettings, mergeSettings } from \"helpers/site-settings\";\n \n export function currentUser() {\n   return User.create(sessionFixtures[\"/session/current.json\"].current_user);\n@@ -107,7 +108,7 @@ export function controllerModule(name, args = {}) {\n     setup() {\n       this.registry.register(\"router:main\", mapRoutes());\n       let controller = this.subject();\n-      controller.siteSettings = Discourse.SiteSettings;\n+      controller.siteSettings = currentSettings();\n       if (args.setupController) {\n         args.setupController(controller);\n       }\n@@ -119,8 +120,7 @@ export function controllerModule(name, args = {}) {\n export function discourseModule(name, hooks) {\n   QUnit.module(name, {\n     beforeEach() {\n-      // Give us an API to change site settings without `Discourse.SiteSettings` in tests\n-      this.siteSettings = Discourse.SiteSettings;\n+      this.siteSettings = currentSettings();\n       if (hooks && hooks.beforeEach) {\n         hooks.beforeEach.call(this);\n       }\n@@ -161,16 +161,12 @@ export function acceptance(name, options) {\n       }\n \n       if (options.settings) {\n-        Discourse.SiteSettings = jQuery.extend(\n-          true,\n-          Discourse.SiteSettings,\n-          options.settings\n-        );\n+        mergeSettings(options.settings);\n       }\n-      this.siteSettings = Discourse.SiteSettings;\n+      this.siteSettings = currentSettings();\n \n       if (options.site) {\n-        resetSite(Discourse.SiteSettings, options.site);\n+        resetSite(currentSettings(), options.site);\n       }\n \n       clearOutletCache();\n@@ -186,7 +182,7 @@ export function acceptance(name, options) {\n       flushMap();\n       localStorage.clear();\n       User.resetCurrent();\n-      resetSite(Discourse.SiteSettings);\n+      resetSite(currentSettings());\n       resetExtraClasses();\n       clearOutletCache();\n       clearHTMLCache();"
    },
    {
      "sha": "477dbefcd0ee647f353cacc8fd0d353d07a6525a",
      "filename": "test/javascripts/helpers/site-settings.js",
      "status": "modified",
      "additions": 38,
      "deletions": 8,
      "changes": 46,
      "blob_url": "https://github.com/discourse/discourse/blob/a37a19b55ced25372df56e92b0f6089f7021dddb/test/javascripts/helpers/site-settings.js",
      "raw_url": "https://github.com/discourse/discourse/raw/a37a19b55ced25372df56e92b0f6089f7021dddb/test/javascripts/helpers/site-settings.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/helpers/site-settings.js?ref=a37a19b55ced25372df56e92b0f6089f7021dddb",
      "patch": "@@ -1,6 +1,4 @@\n-// discourse-skip-module\n-\n-Discourse.SiteSettingsOriginal = {\n+const ORIGINAL_SETTINGS = {\n   title: \"QUnit Discourse Tests\",\n   site_logo_url: \"/assets/logo.png\",\n   site_logo_url: \"/assets/logo.png\",\n@@ -103,8 +101,40 @@ Discourse.SiteSettingsOriginal = {\n   secure_media: false\n };\n \n-Discourse.SiteSettings = jQuery.extend(\n-  true,\n-  {},\n-  Discourse.SiteSettingsOriginal\n-);\n+let siteSettings = Object.assign({}, ORIGINAL_SETTINGS);\n+Discourse.SiteSettings = siteSettings;\n+\n+export function currentSettings() {\n+  return siteSettings;\n+}\n+\n+// In debug mode, Ember will decorate objects with setters that remind you to use\n+// this.set() because they are bound (even if you use `unbound` or `readonly` in templates!).\n+// Site settings are only ever changed in tests and these warnings are not wanted, so we'll\n+// strip them when resetting our settings between tests.\n+function setValue(k, v) {\n+  let desc = Object.getOwnPropertyDescriptor(siteSettings, k);\n+  if (desc && !desc.writable) {\n+    Object.defineProperty(siteSettings, k, { writable: true });\n+  }\n+  siteSettings[k] = v;\n+}\n+\n+export function mergeSettings(other) {\n+  for (let p in other) {\n+    if (other.hasOwnProperty(p)) {\n+      setValue(p, other[p]);\n+    }\n+  }\n+  return siteSettings;\n+}\n+\n+export function resetSettings() {\n+  for (let p in siteSettings) {\n+    if (siteSettings.hasOwnProperty(p)) {\n+      let v = ORIGINAL_SETTINGS[p];\n+      typeof v !== \"undefined\" ? setValue(p, v) : delete siteSettings[p];\n+    }\n+  }\n+  return siteSettings;\n+}"
    },
    {
      "sha": "256ed45c8b497f00355f9812fc1e4db3398dced5",
      "filename": "test/javascripts/test_helper.js",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/a37a19b55ced25372df56e92b0f6089f7021dddb/test/javascripts/test_helper.js",
      "raw_url": "https://github.com/discourse/discourse/raw/a37a19b55ced25372df56e92b0f6089f7021dddb/test/javascripts/test_helper.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/test_helper.js?ref=a37a19b55ced25372df56e92b0f6089f7021dddb",
      "patch": "@@ -42,6 +42,8 @@\n //\n //= require jquery.magnific-popup.min.js\n \n+let resetSettings = require(\"helpers/site-settings\").resetSettings;\n+\n const buildResolver = require(\"discourse-common/resolver\").buildResolver;\n window.setResolver(buildResolver(\"discourse\").create({ namespace: Discourse }));\n \n@@ -104,6 +106,7 @@ function resetSite(siteSettings, extras) {\n }\n \n QUnit.testStart(function(ctx) {\n+  resetSettings();\n   server = createPretender.default;\n   createPretender.applyDefaultHandlers(server);\n   server.handlers = [];\n@@ -149,8 +152,7 @@ QUnit.testStart(function(ctx) {\n     );\n   }\n \n-  // Allow our tests to change site settings and have them reset before the next test\n-  Discourse.SiteSettings = dup(Discourse.SiteSettingsOriginal);\n+  resetSettings();\n \n   let getURL = require(\"discourse-common/lib/get-url\");\n   getURL.setupURL(null, \"http://localhost:3000\", \"\");"
    }
  ]
}
