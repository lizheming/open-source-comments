{
  "sha": "879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6ODc5ZWYzZmUxZTYyMmM2ZDE2OWVkNzc1YWYzMmExOTk5YzRjYjZjNQ==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2021-01-15T08:10:15Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2021-01-15T08:10:15Z"
    },
    "message": "Merge v0.2021.02 into 'release'.",
    "tree": {
      "sha": "24c827437eb6ade71b98862292d26cfc380f7cf1",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/24c827437eb6ade71b98862292d26cfc380f7cf1"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
  "html_url": "https://github.com/debiki/talkyard/commit/879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "923ae76d3873743b1be142ec67ce59f73dfc5d7e",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/923ae76d3873743b1be142ec67ce59f73dfc5d7e",
      "html_url": "https://github.com/debiki/talkyard/commit/923ae76d3873743b1be142ec67ce59f73dfc5d7e"
    },
    {
      "sha": "37d5335c5a8fde41678e14973d2b7fcd60940fd8",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/37d5335c5a8fde41678e14973d2b7fcd60940fd8",
      "html_url": "https://github.com/debiki/talkyard/commit/37d5335c5a8fde41678e14973d2b7fcd60940fd8"
    }
  ],
  "stats": {
    "total": 3829,
    "additions": 2781,
    "deletions": 1048
  },
  "files": [
    {
      "sha": "cfa56877703365cc6a14de600127212ee961b76e",
      "filename": "Makefile",
      "status": "modified",
      "additions": 17,
      "deletions": 9,
      "changes": 26,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/Makefile",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/Makefile",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/Makefile?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -196,6 +196,7 @@ debug_asset_bundles_files: \\\n   images/web/assets/talkyard-comments.js.gz \\\n   images/web/assets/talkyard-service-worker.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/editor-bundle.js.gz \\\n+  images/web/assets/$(TALKYARD_VERSION)/head-bundle.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/more-bundle.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/slim-bundle.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/staff-bundle.js.gz \\\n@@ -270,6 +271,13 @@ images/web/assets/$(TALKYARD_VERSION)/editor-bundle.js.gz: \\\n \ts/d-gulp  compileEditorTypescript-concatScripts\n \n \n+# Sync w gulpfile.js. [head_js_files]\n+images/web/assets/$(TALKYARD_VERSION)/head-bundle.js.gz: \\\n+       $(shell find client/app-head/ -type f  \\(  -name '*.ts'  -o  -name '*.js'  \\))\n+\t@echo \"\\nRegenerating: $@ ...\"\n+\ts/d-gulp  compileHeadTypescript-concatScripts\n+\n+\n # Sync with gulpfile.ts [more_js_files].\n images/web/assets/$(TALKYARD_VERSION)/more-bundle.js.gz: \\\n        $(shell find client/app-more/ -type f  \\(  -name '*.ts'  -o  -name '*.js'  \\)) \\\n@@ -281,6 +289,7 @@ images/web/assets/$(TALKYARD_VERSION)/more-bundle.js.gz: \\\n \t@echo \"\\nRegenerating: $@ ...\"\n \ts/d-gulp  compileMoreTypescript-concatScripts\n \n+\n # Sync with gulpfile.ts [slim_js_files].\n images/web/assets/$(TALKYARD_VERSION)/slim-bundle.js.gz: \\\n        $(shell find client/app-slim/ -type f  \\(  -name '*.ts'  -o  -name '*.js'  \\)) \\\n@@ -290,22 +299,16 @@ images/web/assets/$(TALKYARD_VERSION)/slim-bundle.js.gz: \\\n        node_modules/create-react-class/create-react-class.js \\\n        node_modules/react-router-dom/umd/react-router-dom.js \\\n        node_modules/react-dom-factories/index.js \\\n-       client/app-slim/utils/calcScrollRectIntoViewCoords.js \\\n        client/third-party/smoothscroll-tiny.js \\\n        client/third-party/bliss.shy.js \\\n-       client/app-slim/util/stupid-lightbox.js \\\n        node_modules/keymaster/keymaster.js \\\n        client/third-party/rename-key-to-keymaster.js \\\n        client/third-party/lodash-custom.js \\\n        node_modules/eventemitter3/umd/eventemitter3.min.js \\\n        client/third-party/tiny-querystring.umd.js \\\n        client/third-party/gifffer/gifffer.js \\\n        client/third-party/get-set-cookie.js \\\n-       client/app-slim/utils/util.js \\\n-       client/app-slim/utils/util-browser.js \\\n-       client/third-party/popuplib.js \\\n-       client/app-slim/login/login-popup.js \\\n-       client/app-slim/start-stuff.js\n+       client/third-party/popuplib.js\n \t@echo \"\\nRegenerating: $@ ...\"\n \ts/d-gulp  compileSlimTypescript-concatScripts\n \n@@ -367,9 +370,9 @@ transl_dev_bundles: ${transl_dev_web_bundle_files} ${transl_dev_app_bundle_files\n \n # Sync 'open-sans-v1' with gulpfile.js and images/web/Dockerfile. [sync_fonts]\n \n-fonts: images/web/fonts/open-sans-v1/open-sans.min.css.gz\n+fonts: images/web/fonts/open-sans-v2/open-sans.min.css.gz\n \n-images/web/fonts/open-sans-v1/open-sans.min.css.gz:\n+images/web/fonts/open-sans-v2/open-sans.min.css.gz:\n \t@echo \"\\nRegenerating: $@ ...\"\n \ts/d-gulp  bundleFonts\n \n@@ -548,6 +551,11 @@ prod-images:  _kill_old_prod_build_project\n \ts/build-prod-images.sh\n \n \n+prod-images-only-e2e-tests:  _kill_old_prod_build_project\n+\t@# This runs the e2e tests only.\n+\ts/build-prod-images.sh --skip-build\n+\n+\n tag-and-push-latest-images:  \\\n        tag-latest-images  push-tagged-images  _print_push_git_tag_command\n "
    },
    {
      "sha": "828116be101e456dc2ca9ef8778fd7213daed184",
      "filename": "app/controllers/AdminController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/AdminController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/AdminController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/AdminController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -29,6 +29,7 @@ import play.api.libs.json.Json\n import play.api.mvc.{Action, ControllerComponents, Result}\n import scala.concurrent.Future\n import talkyard.server.JsX\n+import talkyard.server.authn.LoginReason\n \n \n \n@@ -53,9 +54,10 @@ class AdminController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     dieIfAssetsMissingIfDevTest()\n \n     if (!apiReq.user.exists(_.isStaff)) {\n+      CSP_MISSING\n       Future.successful(Ok(views.html.authn.authnPage(\n         SiteTpi(apiReq, isAdminArea = true),\n-        mode = \"LoginToAdministrate\",\n+        loginReasonInt = LoginReason.LoginToAdministrate.toInt,\n         serverAddress = s\"//${apiReq.host}\",\n         returnToUrl = apiReq.uri)) as HTML)\n     }\n@@ -92,6 +94,7 @@ class AdminController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n \n   def showAdminOneTimeLoginPage: Action[Unit] = GetActionAllowAnyone { request =>\n+    CSP_MISSING\n     Ok(views.html.adminlogin.adminLoginPage(\n       SiteTpi(request, isAdminArea = true),\n       xsrfToken = request.xsrfToken.value,"
    },
    {
      "sha": "ce3a1f23fe0156790b98682aebe978c9a8287fb7",
      "filename": "app/controllers/CreateSiteController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/CreateSiteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/CreateSiteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/CreateSiteController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -73,6 +73,7 @@ class CreateSiteController @Inject()(cc: ControllerComponents, edContext: EdCont\n       }\n     }\n \n+    CSP_MISSING\n     Ok(views.html.createsite.createSitePage(isTestBool, SiteTpi(request)).body) as HTML\n   }\n \n@@ -142,8 +143,8 @@ class CreateSiteController @Inject()(cc: ControllerComponents, edContext: EdCont\n \n     val goToUrl: String =\n       try {\n-        // Not dangerous: We'll use a new site id.\n-        globals.systemDao.dangerous_readWriteTransaction { sysTx =>\n+        COULD_OPTIMIZE // maybe can skip lock?\n+        globals.systemDao.writeTxLockAllSites { sysTx =>\n           globals.systemDao.createAdditionalSite(\n             anySiteId = None,\n             pubId = Site.newPubId(),\n@@ -207,8 +208,8 @@ class CreateSiteController @Inject()(cc: ControllerComponents, edContext: EdCont\n         request =>\n     val localHostname = (request.body \\ \"localHostname\").as[String]\n     throwForbiddenUnless(Hostname.isE2eTestHostname(localHostname), \"EdE7UKFW2\", \"Not a test site\")\n-    request.dao.readWriteTransaction { tx =>\n-      tx.asSystem.deleteAnyHostname(localHostname)\n+    request.systemDao.writeTxLockAllSites { tx =>\n+      tx.deleteAnyHostname(localHostname)\n     }\n     Ok\n   }"
    },
    {
      "sha": "9119d49b4a0351f86b4bdd507b64da1e210c7231",
      "filename": "app/controllers/EditController.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 7,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/EditController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/EditController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/EditController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -229,13 +229,11 @@ class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     * and gets back Twitter tweet json that shows how to embed the tweet,\n     * then creates and returns sanitized onebox html.\n     */\n-  def fetchLinkPreview(url: St, curPageId: PageId): Action[U] = AsyncGetActionRateLimited(\n-        RateLimits.FetchLinkPreview) { request =>\n+  def fetchLinkPreview(url: St, curPageId: PageId, inline: Bo): Action[U] =\n+        AsyncGetActionRateLimited(RateLimits.FetchLinkPreview) { request =>\n     import edContext.globals\n     import request.{siteId, requesterOrUnknown}\n \n-    val inline = false  // later, query param\n-\n     throwBadRequestIf(url.isEmpty, \"TyELNPVEMPTYURL\",\n           \"Weird URL: Empty string\")\n \n@@ -266,13 +264,20 @@ class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n           requesterId = requesterOrUnknown.id)\n \n     val response = renderer.fetchRenderSanitize(uri, inline = inline).transform(\n-          html => Ok(html),\n+          result => {\n+            val jsob = Json.obj(  // ts: LinkPreviewResp\n+                \"safeTitleCont\" -> JsString(result.safeTitleCont.getOrElse(\"\")),\n+                \"classAtr\" -> result.classAtr,\n+                \"safeHtml\" -> result.safeHtml,\n+                \"errCode\" -> JsStringOrNull(result.errCode))\n+             OkSafeJson(jsob)\n+          },\n           throwable => throwable match {\n             case ex: DebikiException =>\n-              ResultException(BadReqResult(\n+              RespEx(BadReqResult(\n                     \"TyELNKPVWEXC\", s\"Cannot preview that link: ${ex.getMessage}\"))\n             case _ =>\n-              ResultException(BadReqResult(\n+              RespEx(BadReqResult(\n                     \"TyELNKPVWUNK\", \"Cannot preview that link\"))\n           })(execCtx)\n "
    },
    {
      "sha": "04ec390feecb6921db229b4a73d004108f2c0b5f",
      "filename": "app/controllers/LegalController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/LegalController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/LegalController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/LegalController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -17,6 +17,7 @@\n \n package controllers\n \n+import com.debiki.core.CSP_MISSING\n import debiki._\n import ed.server.{EdContext, EdController}\n import javax.inject.Inject\n@@ -37,6 +38,7 @@ class LegalController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     val customToU = request.siteSettings.termsOfUseUrl\n     if (customToU.isEmpty) {\n       // Use default terms-of-use page.\n+      CSP_MISSING\n       Ok(views.html.legal.termsOfUse(SiteTpi(request)).body) as HTML\n     }\n     else {\n@@ -51,6 +53,7 @@ class LegalController @Inject()(cc: ControllerComponents, edContext: EdContext)\n   def viewPrivacyPolicyPage() = GetActionAllowAnyone { request =>\n     val customPrivacy = request.siteSettings.privacyUrl\n     if (customPrivacy.isEmpty) {\n+      CSP_MISSING\n       Ok(views.html.legal.privacyPolicy(SiteTpi(request)).body) as HTML\n     }\n     else {"
    },
    {
      "sha": "62e665ea62edf57f3f7fbc0cb02e8240a68b29d4",
      "filename": "app/controllers/LoginController.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/LoginController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/LoginController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/LoginController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -26,6 +26,7 @@ import javax.inject.Inject\n import play.api.libs.json.{JsNull, JsString, Json}\n import play.api.mvc._\n import talkyard.server.TyLogging\n+import talkyard.server.authn.LoginReason\n \n \n /** Logs in and out.\n@@ -46,26 +47,26 @@ class LoginController @Inject()(cc: ControllerComponents, edContext: EdContext)\n       throwForbidden(\"EsE5YK02\", s\"Bad next URL: $path\")\n \n     var toAdminArea = true\n-    val loginReason =\n+    val loginReason: LoginReason =\n       if (as.contains(AsSuperadmin)) {\n-        \"LoginToAdministrate\"  // later: LoginReason.SuperAdminArea   xx\n+        LoginReason.LoginToAdministrate  // later: LoginReason.SuperAdminArea   xx\n       }\n       else if (as.contains(AsAdmin)) {\n-        \"LoginToAdministrate\"\n+        LoginReason.LoginToAdministrate\n       }\n       else if (as.contains(AsStaff)) {\n-        \"LoginToAdministrate\"  // COULD add LoginReason.StaffOnly\n+        LoginReason.LoginToAdministrate  // COULD add LoginReason.StaffOnly\n       }\n       else if (as.contains(\"member\")) {\n         toAdminArea = false\n         throwNotImplemented(\"EsE5ES20\", \"Not impl: ?as=member\")\n       }\n       else if (path.startsWith(\"/-/admin/\")) {\n-        \"LoginToAdministrate\"\n+        LoginReason.LoginToAdministrate\n       }\n       else if (path.startsWith(\"/-/superadmin/\")) {\n         COULD // check if is superadmin site id, if not, throw forbidden\n-        \"LoginToAdministrate\"  // later: LoginReason.SuperAdminArea   xx\n+        LoginReason.LoginToAdministrate  // later: LoginReason.SuperAdminArea   xx\n       }\n       else { // incl if (path.startsWith(\"/-/users/\")) {\n         // Old comment, isGuestLoginAllowed() is deleted now:\n@@ -79,9 +80,10 @@ class LoginController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     COULD // find out if already logged in with enough perms, then go to `path` directly instead.\n \n     dieIfAssetsMissingIfDevTest()\n+    CSP_MISSING\n     Ok(views.html.authn.authnPage(\n       SiteTpi(apiReq, isAdminArea = toAdminArea),\n-      mode = loginReason,\n+      loginReasonInt = loginReason.toInt,\n       serverAddress = s\"//${apiReq.host}\",  // try to remove\n       returnToUrl = apiReq.origin + path)) as HTML\n   }\n@@ -106,12 +108,13 @@ class LoginController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     * is doing in the main window (e.g. having expanded / collapsed threads,\n     * maybe started composing a reply) won't disappear.\n     */\n-  def showLoginPopup(mode: St, returnToUrl: St): Action[U] =\n+  def showLoginPopup(mode: Int, returnToUrl: St): Action[U] =\n         GetActionAllowAnyoneRateLimited(\n           RateLimits.NoRateLimits, avoidCookies = mode == EmbCommentsModeStr) { request =>\n+    CSP_MISSING\n     Ok(views.html.authn.authnPage(\n       SiteTpi(request),\n-      mode = mode,\n+      loginReasonInt = mode,\n       serverAddress = s\"//${request.host}\",  // try to remove\n       returnToUrl = returnToUrl,\n       isInLoginPopup = true)) as HTML"
    },
    {
      "sha": "0077cbd12f9776bb743c3a25002fe8f3d4d90f6e",
      "filename": "app/controllers/LoginWithOpenAuthController.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/LoginWithOpenAuthController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/LoginWithOpenAuthController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/LoginWithOpenAuthController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1612,6 +1612,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n         maybeCannotUseCookies ||=\n           request.cookies.get(AvoidCookiesCookieName).map(_.value) is EdSecurity.Avoid\n \n+        CSP_MISSING\n         def handleResultInWinOpener: p_Result =\n           Ok(views.html.authn.sendAuthnResultToOpenerCloseCurWin(\n                 origNonceBack = authnState.browserNonce,\n@@ -1696,6 +1697,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     // + origNonceBack, would be good to check the nonce browser side,   [br_authn_nonce]\n     // before sending the email?\n \n+    CSP_MISSING\n     Ok(views.html.login.verifyYourEmailAddr(\n           tpi = SiteTpi(request,\n                 // Not yet translated, no RTL support, so pretend is adm area —> English\n@@ -1753,6 +1755,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     //\n     // That's why we incl oldEmailVerified = ...  below.\n     //\n+    CSP_MISSING\n     Ok(views.html.login.askIfLinkAccounts(\n           tpi = SiteTpi(request,\n                 // Not yet translated, no RTL support, so pretend is adm area —> English\n@@ -1810,6 +1813,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n       // Send the user back to the IDP authn page, where hen can login\n       // using a different IDP account or maybe create a new account.\n       // What else is there to do?\n+      CSP_MISSING\n       Ok(views.html.login.accountsNotLinkedPleaseLoginAgain(\n             tpi = SiteTpi(request,\n                 // Not yet translated, no RTL support, so pretend is adm area —> English\n@@ -1827,6 +1831,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n \n       dao.saveIdentityLinkToUser(extIdentity, matchingTyUser)\n \n+      CSP_MISSING\n       Ok(views.html.login.accountsLinkedPleaseLoginAgain(\n             tpi = SiteTpi(request,\n                 // Not yet translated, no RTL support, so pretend is adm area —> English\n@@ -1862,6 +1867,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n       // login required site, or 4) we're visiting an embedded comments\n       // site and attempted to login, then a login popup window opens (better than\n       // showing a login dialog somewhere inside the iframe). ))\n+      CSP_MISSING\n       Ok(views.html.authn.showCreateUserDialogInThisWin(\n         SiteTpi(request, isAdminArea = authnState.isAdminArea),\n         origNonceBack = authnState.browserNonce,\n@@ -1878,6 +1884,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n       // The request is from an OAuth provider login popup. Run some Javascript in the\n       // popup that continues execution in the main window (the popup's window.opener)\n       // and closes the popup.  [2ABKW24T]\n+      CSP_MISSING\n       Ok(views.html.authn.showCreateUserDialogInOpenerCloseCurWin(\n         origNonceBack = authnState.browserNonce,\n         idpName = idpName,"
    },
    {
      "sha": "da0cced126a6c32e7ff49188182f830ed69c4ac2",
      "filename": "app/controllers/LoginWithPasswordController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/LoginWithPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/LoginWithPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/LoginWithPasswordController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -357,6 +357,7 @@ class LoginWithPasswordController @Inject()(cc: ControllerComponents, edContext:\n         (sidAndXsrfCookies, anyReturnToUrl)\n       }\n \n+    CSP_MISSING\n     Ok(views.html.createaccount.welcomePage(SiteTpi(request), anyReturnToUrl))\n       .withCookies(newCookies: _*)\n   }"
    },
    {
      "sha": "b1cdc0aa827df24fdd38d0d764ca8264dc35c785",
      "filename": "app/controllers/ResetPasswordController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/ResetPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/ResetPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/ResetPasswordController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -47,6 +47,7 @@ class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: EdC\n     import request.dao\n     throwForbiddenIf(!dao.getWholeSiteSettings().canLoginWithPassword,\n           \"TyE0PWDLGI210\", \"Password login disabled\")\n+    CSP_MISSING\n     Ok(views.html.resetpassword.specifyEmailAddress(\n       SiteTpi(request), xsrfToken = request.xsrfToken.value))\n   }\n@@ -161,6 +162,7 @@ class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: EdC\n \n \n   def showEmailSentPage(isEmailAddress: String): Action[Unit] = GetActionAllowAnyone { request =>\n+    CSP_MISSING\n     Ok(views.html.resetpassword.emailSent(SiteTpi(request), isEmailAddress == \"true\"))\n   }\n \n@@ -172,6 +174,7 @@ class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: EdC\n     val loginGrant = loginByEmailOrThrow(resetPasswordEmailId, request,\n       // So the request to handleNewPasswordForm() below works:\n       mayLoginAgain = true)\n+    CSP_MISSING\n     Ok(views.html.resetpassword.chooseNewPassword(\n       SiteTpi(request),\n       user = loginGrant.user,\n@@ -194,8 +197,9 @@ class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: EdC\n     request.dao.pubSub.userIsActive(request.siteId, loginGrant.user, request.theBrowserIdData)\n     val (_, _, sidAndXsrfCookies) = createSessionIdAndXsrfToken(request.siteId, loginGrant.user.id)\n     val newSessionCookies = sidAndXsrfCookies\n+    CSP_MISSING\n     Ok(views.html.resetpassword.passwordHasBeenChanged(SiteTpi(request)))\n-      .withCookies(newSessionCookies: _*)\n+          .withCookies(newSessionCookies: _*)\n   }\n \n "
    },
    {
      "sha": "411513257eebf7b1d38609eefe61de2bcfae7915",
      "filename": "app/controllers/SuperAdminController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/SuperAdminController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/SuperAdminController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/SuperAdminController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -41,6 +41,7 @@ class SuperAdminController @Inject()(cc: ControllerComponents, edContext: EdCont\n   def superAdminApp(clientRoute: String): Action[Unit] = SuperAdminGetAction { apiReq =>\n     _root_.controllers.dieIfAssetsMissingIfDevTest()\n     val siteTpi = SiteTpi(apiReq)\n+    CSP_MISSING\n     val pageBody = views.html.adminPage(siteTpi, appId = \"theSuperAdminApp\").body\n     Ok(pageBody) as HTML\n   }"
    },
    {
      "sha": "d547b03163dafc6349e560b5940e1c03a4b47a6e",
      "filename": "app/controllers/TagsController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/TagsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/TagsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/TagsController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -39,6 +39,7 @@ class TagsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n   def tagsApp(clientRoute: String): Action[Unit] = GetAction { apiReq =>\n     _root_.controllers.dieIfAssetsMissingIfDevTest()\n     val siteTpi = SiteTpi(apiReq)\n+    CSP_MISSING\n     val pageBody = views.html.adminPage(siteTpi, appId = \"theTagsApp\").body\n     Ok(pageBody) as HTML\n   }"
    },
    {
      "sha": "727f6f98de8d405840d878374d23089c50675c57",
      "filename": "app/controllers/UnsubscriptionController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/UnsubscriptionController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/UnsubscriptionController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/UnsubscriptionController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -72,6 +72,7 @@ class UnsubscriptionController @Inject()(cc: ControllerComponents, edContext: Ed\n \n \n   def showForm(emailId: EmailId): Action[Unit] = ExceptionAction(cc.parsers.empty) { request =>\n+    CSP_MISSING\n     Ok(views.html.unsubscribePage(emailId, doWhat(request), nextPage(request)))\n   }\n \n@@ -107,6 +108,7 @@ class UnsubscriptionController @Inject()(cc: ControllerComponents, edContext: Ed\n \n \n   def showHasBeenUnsubscribed(): Action[Unit] = ExceptionAction(cc.parsers.empty) { _ =>\n+    CSP_MISSING\n     Ok(views.html.unsubscribe.youHaveBeenUnsubscribed().body) as HTML\n   }\n "
    },
    {
      "sha": "ac8e187e62b3c9b15b639304c8270fc54905cf64",
      "filename": "app/controllers/UploadsController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/UploadsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/UploadsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/UploadsController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -84,10 +84,12 @@ class UploadsController @Inject()(cc: ControllerComponents, edContext: EdContext\n           \"TyESVUPLSZCK_\", s\"File too large: ${sizeBytes.toFloat / Mebibyte\n               } MiB; max size is ${maxUploadSizeBytes.toFloat / Mebibyte} MiB\")\n \n-    // Check file type.\n+    // Check file type.  [ck_upl_ftp]\n \n     // For now, just look at the extension — maybe later look at mime type too.\n     // Then need to make mime type configurable too.\n+    // '** matches alnum and punctuation.  \"*\" would match alnum only — that is,\n+    // '*' would allow files with no '.ext' dot-extension.  [tyglobs]\n \n     if (perms.allowedUploadExtensions contains  \"**\")\n       return\n@@ -99,7 +101,7 @@ class UploadsController @Inject()(cc: ControllerComponents, edContext: EdContext\n     // allowedUploadExtensions allowlist:\n     SECURITY // Later: Check any other dot \".\" separated parts against a blocklist?\n     val fileExt = fileName.takeRightWhile(_ != '.')\n-    val isOk = perms.allowedUploadExtensions contains fileExt\n+    val isOk = perms.allowedUploadExtensions contains fileExt.toLowerCase\n     throwForbiddenIf(!isOk, \"TyE503RMT2\",\n           s\"Not an allowed file extension: '$fileExt' in file name: '$fileName'\")\n   }"
    },
    {
      "sha": "8ab6d6a9a06577cbe08c6fd4106e93393f6f589f",
      "filename": "app/controllers/UserController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/UserController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/UserController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/UserController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -730,6 +730,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     val needsToLogin = requester.isEmpty && dao.getWholeSiteSettings().loginRequired\n \n     val emailsPath = requester.isDefined ? \"/preferences/account\" | \"\"  // [4JKT28TS]\n+    CSP_MISSING\n     Ok(views.html.emailVerified(\n         SiteTpi(request),\n         userProfileUrl = s\"/-/users/${member.username}$emailsPath\","
    },
    {
      "sha": "8410cd292d0e4eb94a0e466ab2b2266c92926126",
      "filename": "app/controllers/ViewPageController.scala",
      "status": "modified",
      "additions": 58,
      "deletions": 17,
      "changes": 75,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/ViewPageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/controllers/ViewPageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/ViewPageController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -32,6 +32,7 @@ import ViewPageController._\n import debiki.dao.UsersOnlineStuff\n import ed.server.auth.MaySeeOrWhyNot\n import ed.server.security.EdSecurity\n+import talkyard.server.authn.LoginReason\n \n \n \n@@ -213,9 +214,10 @@ class ViewPageController @Inject()(cc: ControllerComponents, edContext: EdContex\n     // If page not found, or access not allowed, show the same login dialog, so the user\n     // won't know if the page exists or not.\n     def makeLoginDialog(exception: ResultException): Result = {\n+      CSP_MISSING\n       NotFound(views.html.authn.authnPage(\n         SiteTpi(request),\n-        mode = \"LoginBecauseNotFound\",\n+        loginReasonInt = LoginReason.LoginBecauseNotFound.toInt,\n         // error =  result.body\n         serverAddress = s\"//${request.host}\",\n         returnToUrl = request.uri,\n@@ -266,9 +268,10 @@ class ViewPageController @Inject()(cc: ControllerComponents, edContext: EdContex\n         // could redirect here directly to the SSO url. However, then we'd need\n         // a certain makeSsoUrl() here too — but it's in Javascript only.\n         // So instead we do any such redirect in Javascript. [COULDSSOREDIR]\n+        CSP_MISSING\n         return Future.successful(Ok(views.html.authn.authnPage(\n           SiteTpi(request),\n-          mode = \"LoginToAuthenticate\",\n+          loginReasonInt = LoginReason.AuthnRequiredToRead.toInt,\n           serverAddress = s\"//${request.host}\",\n           returnToUrl = request.uri)) as HTML)\n       }\n@@ -368,11 +371,12 @@ object ViewPageController {\n     \"\\\"__html_encoded_volatile_json__\\\"\"\n \n   val ContSecPolHeaderName = \"Content-Security-Policy\"\n-  val XContSecPolHeaderName = s\"X-$ContSecPolHeaderName\"\n+  val objectSrcNonePolicy = \"object-src 'none'; \"\n   val frameAncestorsSpace = \"frame-ancestors \"\n   val frameAncestorsNone = s\"$frameAncestorsSpace'none'\"\n \n \n+  RENAME // to addVolatileJsonAndContentSecurityPolicy\n   def addVolatileJsonAndPreventClickjacking(renderedPage: RenderedPage, request: PageRequest[_],\n         embeddingUrl: Option[String] = None,\n         skipUsersOnline: Boolean = false, xsrfTokenIfNoCookies: Option[String] = None): Future[Result] = {\n@@ -383,6 +387,7 @@ object ViewPageController {\n   }\n \n \n+  RENAME // to addVolatileJsonAndContentSecurityPolicy\n   def addVolatileJsonAndPreventClickjacking2(pageHtmlNoVolData: String,\n         unapprovedPostAuthorIds: Set[UserId], request: DebikiRequest[_],\n         embeddingUrl: Option[String] = None,\n@@ -434,12 +439,12 @@ object ViewPageController {\n     SECURITY // should one check for more weird chars? If evil admin attacks hens own site?\n     // \"':/*\" are ok, because one may include protocol and/or port, in CSP frame-ancestors,\n     // and \"'self'\", and wildcar '*'.\n-    def allowEmbeddingIsWeird = allowEmbeddingFrom.exists(\"\\r\\t\\n,;?&#\\\"\\\\\" contains _)\n+    def allowEmbeddingIsWeird: Bo = allowEmbeddingFrom.exists(\"\\r\\t\\n,;?&#\\\"\\\\\" contains _)\n+\n+    val framePolicy: St = {  // reindent later\n     if (allowEmbeddingFrom.isEmpty || allowEmbeddingIsWeird) {\n-      response = response.withHeaders(\n-          \"X-Frame-Options\" -> \"DENY\",  // For old browsers.\n-          ContSecPolHeaderName -> frameAncestorsNone,\n-          XContSecPolHeaderName -> frameAncestorsNone) // IE11\n+      response = response.withHeaders(\"X-Frame-Options\" -> \"DENY\")  // for old browsers\n+      frameAncestorsNone\n     }\n     else {\n       // People sometimes try out the blog comments, on localhost; let them do that,\n@@ -456,21 +461,57 @@ object ViewPageController {\n         // also be https\"\"\"\n         \" http://localhost:* https://localhost:*\"\n       }\n-      val framePolicy = frameAncestorsSpace + allowEmbeddingFrom + allowIfLocalhost\n-      SECURITY; COULD // +=\n-      //  \"; object-src 'none'; script-src 'self' https://cdn.polyfill.io\"\n-      // See: https://csp-evaluator.withgoogle.com/\n-      // Need to add a feature flag, so can disable if accidentally breaks sth.\n-      // Also, how backw compat is this? with older browsers? Ask at SO?\n-      response = response.withHeaders(\n-          ContSecPolHeaderName -> framePolicy,  // [7ACKRQ20]\n-          XContSecPolHeaderName -> framePolicy) // IE11\n       // Also update: [4GUYQC0]\n+      frameAncestorsSpace + allowEmbeddingFrom + allowIfLocalhost\n+    }\n     }\n \n+    val globals = request.context.globals\n+    val featureFlags = globals.config.featureFlags\n+\n+    val scriptSrcPolicy: St =\n+          if (!featureFlags.contains(\"ffUseScriptSrcSelfCsp\")) \"\"\n+          else {\n+            var okOrigins = \"\"\n+            if (!featureFlags.contains(\"ffNoPolyfillDotIo\")) {\n+              okOrigins += \"https://cdn.polyfill.io \"\n+            }\n+            globals.anyCdnOrigin foreach { cdnOrigin =>\n+              okOrigins += cdnOrigin\n+            }\n+            s\"script-src 'self' $okOrigins; \"\n+          }\n+\n+    // Maybe need:\n+    // style-src    — inline styles supposedly blocked by default.\n+    // https://content-security-policy.com/examples/allow-inline-style\n+    // > When you enable CSP, it will block inline styles\n+    // e.g.: <div style=\"...\"> or <style>...</style>\n+\n+    SECURITY; SHOULD // use an even more strict policy:  default-src 'none';\n+    // and then 'self' and any CDN for some of:\n+    //    script-src  connect-src  img-src  style-src  base-uri  form-action\n+\n+    // Could add a Report-top attr, to get to know about violations:\n+    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to\n+    // Sends violation info via POST & JSON to specified uri.\n+    val objSrcPolicy =\n+          if (featureFlags contains \"ffNoObjSrcCsp\") \"\"\n+          else objectSrcNonePolicy\n+\n+    // You can check the CSP with: https://csp-evaluator.withgoogle.com/\n+    val contSecPolicy = objSrcPolicy + scriptSrcPolicy + framePolicy\n+\n+    response = response.withHeaders(\n+          ContSecPolHeaderName -> contSecPolicy)  // [7ACKRQ20]\n+\n+    // IE11 supports only \"X-Content-Security-Policy\" and the \"sandbox\" value,\n+    // but we shouldn't use it here (it's like <iframe sandbox=...>).\n+\n     Future.successful(response as play.api.http.ContentTypes.HTML)\n   }\n \n+\n   def makeEmptyPageRequest(request: DebikiRequest[Unit], pageId: PageId, showId: Boolean,\n         pageRole: PageType, now: When): PageGetRequest = {\n     val pagePath = PagePath("
    },
    {
      "sha": "38de39501b0b590aada2eea5cbbe95f11fa15d8d",
      "filename": "app/debiki/Globals.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/Globals.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/Globals.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/Globals.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -337,7 +337,7 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n     * Should be set to the Unix second when one thinks the maintenance will be done,\n     * or to 1 if one isn't sure. A change requires a Play app server restart to get picked up.\n     */\n-  val mainWorkUntilSecs: Option[Long] = conf.getOptional[Long](\"talkyard.maintenanceUntilUnixSeconds\")\n+  val maintWorkUntilSecs: Option[Long] = conf.getOptional[Long](\"talkyard.maintenanceUntilUnixSeconds\")\n \n   /* Add configurable support email address?  [CONFADDRS]\n   val supportEmailAddress: Option[String] ="
    },
    {
      "sha": "23959fbffb1a9fef404da8875bb2659a8a9e029b",
      "filename": "app/debiki/HtmlUtils.scala",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/HtmlUtils.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/HtmlUtils.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/HtmlUtils.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -17,12 +17,6 @@\n \n package debiki\n \n-import com.debiki.core._\n-//import com.twitter.ostrich.stats.Stats\n-import java.{util => ju, io => jio}\n-import scala.collection.JavaConversions._\n-import _root_.scala.xml.{NodeSeq, Node, Elem, Text, XML, Attribute}\n-import Prelude._\n \n \n object HtmlUtils {"
    },
    {
      "sha": "9739b5837dc58c6d6a7493395c025103712a6df7",
      "filename": "app/debiki/PageTpi.scala",
      "status": "modified",
      "additions": 86,
      "deletions": 24,
      "changes": 110,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/PageTpi.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/PageTpi.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/PageTpi.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -148,32 +148,93 @@ class SiteTpi protected (\n   def xsrfToken: String = debikiRequest.xsrfToken.value\n \n \n-  def debikiStyles = xml.Unparsed(views.html.debikiStyles(this).body)\n+  def debikiStyles: xml.Unparsed =\n+    xml.Unparsed(views.html.debikiStyles(this).body)\n \n   CLEAN_UP // isAdminApp not needed? already has isAdminArea.\n-  def debikiScriptsInHead(isInLoginWindow: Boolean = false, isInLoginPopup: Boolean = false,\n-        isAdminApp: Boolean = false) = xml.Unparsed(\n-    views.html.debikiScriptsHead(\n-      this, // Could remove all params below, use 'this' instead in the template.\n-      siteId = siteId,\n-      reactStoreSafeJsonString = reactStoreSafeJsonString,\n-      isInLoginWindow = isInLoginWindow,\n-      isInLoginPopup = isInLoginPopup,\n-      isAdminApp = isAdminApp,\n-      minMaxJs = minMaxJs,\n-      minMaxCss = minMaxCss).body)\n-\n-  def debikiScriptsEndOfBody(loadStaffBundle: Boolean = false): Unparsed =\n-    debikiScriptsEndOfBodyCustomStartupCode(\n-      \"debiki.internal.renderPageInBrowser();\", loadStaffBundle = loadStaffBundle)\n-\n-  def debikiScriptsEndOfBodyNoStartupCode =\n-    debikiScriptsEndOfBodyCustomStartupCode(\"\")\n-\n-  def debikiScriptsEndOfBodyCustomStartupCode(startupCode: String,\n-        loadStaffBundle: Boolean = false) = xml.Unparsed(\n-    views.html.debikiScriptsEndOfBody(\n-      this, startupCode = startupCode, loadStaffBundle = loadStaffBundle).body)\n+  def debikiScriptsInHead(\n+        isCreateSitePage: Bo = false,\n+        isInLoginWindow: Bo = false,\n+        isInLoginPopup: Bo = false,\n+        isAdminApp: Bo = false,\n+        isInEmbeddedEditor: Bo = false,\n+        anyEmbeddedPageId: Opt[PageId] = None,\n+        resetPasswordPageData: Option[(User, EmailId)] = None,\n+        ): xml.Unparsed = {\n+\n+    import play.api.libs.json.{Json, JsString, JsNumber}\n+    import talkyard.server.JsX.{JsStringOrNull, JsLongOrNull, JsNumberOrNull}\n+\n+    val doWhat = {\n+      if (isInEmbeddedEditor) \"Noop\"\n+      else if (resetPasswordPageData.isDefined) \"ResetPwd\"\n+      else \"StartPage\"\n+    }\n+\n+    var safeStaticJson = Json.obj(\n+          \"doWhat\" -> doWhat,\n+          \"siteId\" -> siteId,\n+          \"currentVersion\" -> currentVersionString,\n+          \"cachedVersion\" -> cachedVersionString,\n+          \"wantsServiceWorker\" -> globals.config.useServiceWorker,\n+          \"secure\" -> globals.secure,\n+          \"isDev\" -> globals.isDev,\n+\n+          \"testNowMs\" -> JsLongOrNull(anyTestNowMs),   // or undef\n+          \"minMaxJs\" -> minMaxJs,\n+          \"debugOrigin\" -> s\"$httpsColonOrEmpty//$serverAddress\", // [INLTAGORIG]\n+          \"cdnOriginOrEmpty\" -> JsString(cdnOrigin.getOrElse(\"\")),\n+          \"cdnOrServerOrigin\" -> cdnOrServerOrigin, // for admin page embedded comments code\n+          \"isInLoginWindow\" -> isInLoginWindow, // @isInLoginWindowBoolStr,\n+          \"isInLoginPopup\" -> isInLoginPopup,  // @isInLoginPopupBoolStr,\n+          \"isInAdminArea\" -> isAdminApp, // @{ if (isAdminApp) \"true\" else \"false\" },\n+          \"isInEmbeddedEditor\" -> isInEmbeddedEditor,\n+          \"isRtl\" -> isRtlLanguage, // @{ if (tpi.isRtlLanguage) \"true\" else \"false\" },\n+\n+          \"embeddingOrigin\" -> JsStringOrNull(anyEmbeddingOrigin), //  @Html(embeddingOriginOrUndefined),\n+          \"embeddingUrl\" -> JsStringOrNull(anyEmbeddingUrl),  //  @Html(embeddingUrlOrUndefined),\n+          \"embeddedPageId\" -> JsStringOrNull(anyEmbeddedPageId),\n+          \"embeddedPageAltId\" -> JsStringOrNull(anyDiscussionId), // @Html(discussionIdOrUndefined),\n+          \"lazyCreatePageInCatId\" -> JsNumberOrNull(lazyCreatePageInCatId), //@Html(lazyCreatePageInCatId),\n+\n+          \"assetUrlPrefix\" -> assetUrlPrefix,\n+          \"uploadsUrlPrefixCommonmark\" -> uploadsUrlPrefix,\n+          \"isTestSite\" -> site.isTestSite,  // .toString },\n+          \"loadGlobalAdminScript\" -> globals.loadGlobalAdminScript, // .toString },\n+          \"loadGlobalStaffScript\" -> globals.loadGlobalStaffScript, // .toString },\n+          \"mainWorkUntilSecs\" -> {\n+            // Extra line to avoid weird compil err.\n+            val s: Long = globals.maintWorkUntilSecs.getOrElse(0L)\n+            JsNumber(s)\n+          })\n+\n+    if (isCreateSitePage) {\n+      safeStaticJson += \"baseDomain\" -> JsString(globals.baseDomainNoPort)\n+    }\n+\n+    resetPasswordPageData foreach { patAndEmailId =>\n+      val pat = patAndEmailId._1\n+      val anyResetPasswordEmailId = patAndEmailId._2\n+      safeStaticJson += \"newPasswordData\" -> Json.obj(  // ts: NewPasswordData\n+        \"fullName\" -> JsString(pat.fullName.getOrElse(\"\")),\n+        \"username\" -> JsString(pat.theUsername),\n+        \"email\" -> JsString(pat.email),\n+        \"minLength\" -> JsNumber(globals.minPasswordLengthAllSites),\n+        \"resetPasswordEmailId\" -> JsString(anyResetPasswordEmailId))\n+    }\n+\n+    xml.Unparsed(views.html.debikiScriptsHead(\n+          tpi = this,\n+          safeStaticJsonSt = safeStaticJson.toString,\n+          reactStoreSafeJsonString = reactStoreSafeJsonString).body)\n+  }\n+\n+\n+  def scriptBundlesEndOfBody(loadStaffBundle: Bo = false): xml.Unparsed =\n+    xml.Unparsed(\n+          views.html.debikiScriptsEndOfBody(\n+              this, loadStaffBundle = loadStaffBundle).body)\n+\n \n   /** Resources starting with '//' should be prefixed with this, so they'll be fetched via https,\n     * even if there is a {{{<base href='http://...>}}} tag (i.e. not https).\n@@ -243,6 +304,7 @@ class SiteTpi protected (\n     }\n   }\n \n+  RENAME // to anySiteCustomScriptsBundle\n   def anyScriptsBundle(): xml.NodeSeq = {\n     val version = debikiRequest.dao.getAssetBundleVersion(\"scripts\", \"js\") getOrElse {\n       return <span></span>"
    },
    {
      "sha": "982b0a54229a21c91a09fccc0d2b39ea0aeea70f",
      "filename": "app/debiki/ReactJson.scala",
      "status": "modified",
      "additions": 23,
      "deletions": 18,
      "changes": 41,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/ReactJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/ReactJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/ReactJson.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -26,6 +26,8 @@ import ed.server.auth.Authz\n import ed.server.http._\n import java.{lang => jl, util => ju}\n import org.jsoup.Jsoup\n+import org.jsoup.nodes.{Element => jsoup_Element}\n+import org.jsoup.nodes.{Attribute => jsoup_Attribute}\n import play.api.libs.json._\n import scala.collection.{immutable, mutable}\n import scala.collection.mutable.ArrayBuffer\n@@ -288,7 +290,9 @@ class JsonMaker(dao: SiteDao) {\n           includeDescendantCategories = true,\n           authzCtx,\n           limit = ForumController.NumTopicsToList)\n-        val pageStuffById = dao.getPageStuffById(topics.map(_.pageId))\n+        RACE // got an 1 version old page stuff. So, now looking up by id *and version*,\n+        // instead.\n+        val pageStuffById = dao.getPageStuffsByIdVersion(topics.map(_.idAndVersion))\n         topics.foreach(_.meta.addUserIdsTo(userIdsToLoad))\n         JsArray(topics.map(controllers.ForumController.topicToJson(_, pageStuffById)))\n       }\n@@ -1386,11 +1390,12 @@ object JsonMaker {\n     var includesTitleTag = false\n     var includesDescription = false\n \n-    import scala.collection.JavaConversions._\n+    import scala.collection.JavaConverters._\n \n-    val anyTitleTag: Option[org.jsoup.nodes.Element] = head.getElementsByTag(\"title\").headOption\n+    val anyTitleTag: Opt[jsoup_Element] =\n+          head.getElementsByTag(\"title\").asScala.headOption\n     anyTitleTag foreach { titleTag =>\n-      for (attribute: org.jsoup.nodes.Attribute <- titleTag.attributes()) {\n+      for (attribute: jsoup_Attribute <- titleTag.attributes().asScala) {\n         titleTag.removeAttr(attribute.getKey)\n       }\n       resultBuilder append titleTag.toString append \"\\n\"\n@@ -1399,11 +1404,11 @@ object JsonMaker {\n \n     // Could break out fn, these 3 blocks are similar:\n \n-    val metaTags: ju.ArrayList[org.jsoup.nodes.Element] = head.getElementsByTag(\"meta\")\n-    for (metaTag: org.jsoup.nodes.Element <- metaTags) {\n+    val metaTags: MutBuf[jsoup_Element] = head.getElementsByTag(\"meta\").asScala\n+    for (metaTag: jsoup_Element <- metaTags) {\n       // Remove all attrs except for name, content, and proptype (used by Facebook Open Graph).\n-      val attributes: jl.Iterable[org.jsoup.nodes.Attribute] = metaTag.attributes()\n-      for (attribute: org.jsoup.nodes.Attribute <- attributes) {\n+      val attributes: Iterable[jsoup_Attribute] = metaTag.attributes().asScala\n+      for (attribute: jsoup_Attribute <- attributes) {\n         attribute.getKey match {\n           case \"property\" | \"content\" => // fine\n           case \"name\" => // fine\n@@ -1415,10 +1420,10 @@ object JsonMaker {\n       resultBuilder append metaTag.toString append \"\\n\"\n     }\n \n-    val linkTags: ju.ArrayList[org.jsoup.nodes.Element] = head.getElementsByTag(\"link\")\n-    for (linkTag: org.jsoup.nodes.Element <- linkTags) {\n-      val attributes: jl.Iterable[org.jsoup.nodes.Attribute] = linkTag.attributes()\n-      for (attribute: org.jsoup.nodes.Attribute <- attributes) {\n+    val linkTags: MutBuf[jsoup_Element] = head.getElementsByTag(\"link\").asScala\n+    for (linkTag: jsoup_Element <- linkTags) {\n+      val attributes: Iterable[jsoup_Attribute] = linkTag.attributes().asScala\n+      for (attribute: jsoup_Attribute <- attributes) {\n         attribute.getKey match {\n           case \"rel\" | \"href\" => // fine\n           case notAllowedAttr => linkTag.removeAttr(notAllowedAttr)\n@@ -1429,12 +1434,12 @@ object JsonMaker {\n \n     // Only allow  type=\"application/ld+json\"  which is some structured data description of the\n     // website.\n-    val scriptTags: ju.ArrayList[org.jsoup.nodes.Element] = head.getElementsByTag(\"script\")\n-    for (scriptTag: org.jsoup.nodes.Element <- scriptTags) {\n-      val attributes: jl.Iterable[org.jsoup.nodes.Attribute] = scriptTag.attributes()\n+    val scriptTags: MutBuf[jsoup_Element] = head.getElementsByTag(\"script\").asScala\n+    for (scriptTag: jsoup_Element <- scriptTags) {\n+      val attributes: jl.Iterable[jsoup_Attribute] = scriptTag.attributes()\n       var foundLdJson = false\n       var foundAnythingElse = false\n-      for (attribute: org.jsoup.nodes.Attribute <- attributes) {\n+      for (attribute: jsoup_Attribute <- attributes.asScala) {\n         attribute.getKey match {\n           case \"type\" =>\n             if (attribute.getValue == \"application/ld+json\") foundLdJson = true\n@@ -1993,8 +1998,8 @@ object JsonMaker {\n \n     val imageElems: org.jsoup.select.Elements = jsoupDoc.select(\"img[src]\")\n     var imageUrls = Vector[String]()\n-    import collection.JavaConversions._\n-    for (elem <- imageElems) {\n+    import collection.JavaConverters._\n+    for (elem <- imageElems.asScala) {\n       imageUrls :+= elem.attr(\"src\")\n     }\n     imageUrls"
    },
    {
      "sha": "96495c54afb6123b271ec0724d54244ffddb54b7",
      "filename": "app/debiki/TextAndHtml.scala",
      "status": "modified",
      "additions": 23,
      "deletions": 10,
      "changes": 33,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/TextAndHtml.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/TextAndHtml.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/TextAndHtml.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -226,12 +226,17 @@ object TextAndHtml {\n     Jsoup.clean(unsafeHtml, \"\", whitelist, compactJsoupOutputSettings).trim()\n   }\n \n-  private def compactJsoupOutputSettings: org.jsoup.nodes.Document.OutputSettings =\n+  def compactJsoupOutputSettings: org.jsoup.nodes.Document.OutputSettings =\n     new org.jsoup.nodes.Document.OutputSettings().indentAmount(0).prettyPrint(false)\n }\n \n \n-object TextAndHtmlMaker {\n+case class JsoupLinkElems(\n+  hrefAttrElems: mutable.Buffer[org.jsoup.nodes.Element],\n+  srcAttrElems: mutable.Buffer[org.jsoup.nodes.Element])\n+\n+\n+object TextAndHtmlMaker {   MOVE // to just  TextAndHtml\n \n   val Ipv4AddressRegex: Regex = \"\"\"[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\"\"\".r\n \n@@ -243,14 +248,9 @@ object TextAndHtmlMaker {\n \n     val document = org.jsoup.Jsoup.parse(html)\n \n-    // There're  <a hre=...>, and also <area href=...> (that's a clickable map, its\n-    // contents defined by href links.)\n-    val hrefAttrElems: org.jsoup.select.Elements = document.select(\"[href]\")\n-\n-    // There're  <img> <video> <iframe> etc elems with src=...  links.\n-    val srcAttrElems: org.jsoup.select.Elements = document.select(\"[src]\")\n-\n-    import scala.collection.JavaConversions._\n+    val JsoupLinkElems(\n+          hrefAttrElems,\n+          srcAttrElems) = jsoupFindLinks(document)\n \n     for (elem: org.jsoup.nodes.Element <- hrefAttrElems) {\n       addUrl(elem.attr(\"href\"))\n@@ -270,6 +270,19 @@ object TextAndHtmlMaker {\n     result.toVector\n   }\n \n+  def jsoupFindLinks(doc: org.jsoup.nodes.Document): JsoupLinkElems = {\n+    // There're  <a hre=...>, and also <area href=...> (that's a clickable map, its\n+    // contents defined by href links.)\n+    val hrefAttrElems: org.jsoup.select.Elements = doc.select(\"[href]\")\n+\n+    // There're  <img> <video> <iframe> etc elems with src=...  links.\n+    val srcAttrElems: org.jsoup.select.Elements = doc.select(\"[src]\")\n+\n+    import scala.collection.JavaConverters._\n+    JsoupLinkElems(\n+          hrefAttrElems = hrefAttrElems.asScala,\n+          srcAttrElems = srcAttrElems.asScala)\n+  }\n }\n \n "
    },
    {
      "sha": "b546f8ea45169e8630151cc0cce9c525416969cf",
      "filename": "app/debiki/dao/CategoriesDao.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/dao/CategoriesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/dao/CategoriesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/CategoriesDao.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -701,7 +701,9 @@ trait CategoriesDao {\n     permissions foreach { p =>\n       dieIf(p.onCategoryId != newCategoryData.anyId, \"EdE7UKW02\")\n     }\n-    val permsWithCatId = permissions.map(_.copy(onCategoryId = Some(categoryId)))\n+\n+    val effPerms = permissions.filter(_.hasSomeEffect)\n+    val permsWithCatId = effPerms.map(_.copy(onCategoryId = Some(categoryId)))\n     val permsWithId = addRemovePermsOnCategory(categoryId, permsWithCatId)(tx)._1\n \n     if (byWho.isSystem) {\n@@ -772,30 +774,37 @@ trait CategoriesDao {\n     val oldPermissionsById: mutable.Map[PermissionId, PermsOnPages] =\n       tx.loadPermsOnCategory(categoryId).map(p => (p.id, p))(collection.breakOut)\n     var wasChangesMade = false\n+\n     permissions foreach { permission =>\n       var alreadyExists = false\n       if (permission.id >= PermissionAlreadyExistsMinId) {\n         oldPermissionsById.remove(permission.id) foreach { oldPerm =>\n           alreadyExists = true\n           if (oldPerm != permission) {\n             wasChangesMade = true\n-            if (permission.isEverythingUndefined) {\n+            if (permission.hasNoEffect) {\n               // latent BUG: not incl info about this deleted perm in the fn result [0YKAG25L]\n               tx.deletePermsOnPages(Seq(permission.id))\n             }\n             else {\n+              // If in the user interface we added perms for the same group twice,\n+              // that'd violate permsonpages_on_cat_u — but the UI doesn't allow that.\n+              COULD // be nice to return 403 Forbidden instead of Internal Error\n+              // if that somehow still happened.\n               tx.updatePermsOnPages(permission)\n               permsWithIds.append(permission)\n             }\n           }\n         }\n       }\n-      if (!alreadyExists) {\n+\n+      if (!alreadyExists && permission.hasSomeEffect) {\n         wasChangesMade = true\n         val permWithId = tx.insertPermsOnPages(permission)\n         permsWithIds.append(permWithId)\n       }\n     }\n+\n     // latent BUG: not incl info about these deleted perms in the fn result [0YKAG25L]\n     tx.deletePermsOnPages(oldPermissionsById.keys)\n     wasChangesMade ||= oldPermissionsById.nonEmpty"
    },
    {
      "sha": "029f03c6ca35e80813cf188116faee56a8d86958",
      "filename": "app/debiki/dao/PageStuffDao.scala",
      "status": "modified",
      "additions": 15,
      "deletions": 4,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/dao/PageStuffDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/dao/PageStuffDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/PageStuffDao.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -41,6 +41,8 @@ case class PageStuff(\n   lastReplyerId: Option[UserId],\n   frequentPosterIds: Seq[UserId]) extends PageTitleRole {\n \n+  def pageVersion: PageVersion = pageMeta.version\n+\n   def titleMaybeUnapproved: Option[String] =\n     approvedTitleSource orElse currTitleSource\n \n@@ -90,18 +92,27 @@ trait PageStuffDao {\n \n   RENAME // to getPageStuffsById\n   def getPageStuffById(pageIds: Iterable[PageId]): Map[PageId, PageStuff] = {\n+    getPageStuffsByIdVersion(pageIds.map(id => PageIdVersion(id, NoVersion)))\n+  }\n+\n+\n+  def getPageStuffsByIdVersion(pageIdVersions: Iterable[PageIdVersion])\n+        : Map[PageId, PageStuff] = {\n     // Somewhat dupl code [5KWE02], PagePathMetaDao.getPageMetasAsMap() and UserDao are similar.\n     // Break out helper function getManyById[K, V](keys) ?\n \n     var pageStuffById = Map[PageId, PageStuff]()\n     val idsNotCached = ArrayBuffer[PageId]()\n \n-    // Look up in cache.\n-    for (pageId <- pageIds) {\n+    // Look up in cache — but ignore any out-of-date entries (in case there's a race).\n+    for (idVersion <- pageIdVersions) {\n+      import idVersion.pageId\n       val anyStuff = memCache.lookup[PageStuff](cacheKey(pageId))\n       anyStuff match {\n-        case Some(stuff) => pageStuffById += pageId -> stuff\n-        case None => idsNotCached.append(pageId)\n+        case Some(stuff) if idVersion.version <= stuff.pageVersion =>\n+          pageStuffById += pageId -> stuff\n+        case None =>\n+          idsNotCached.append(pageId)\n       }\n     }\n "
    },
    {
      "sha": "0c809fe525789c0b287bc55ef3bf119fcd197328",
      "filename": "app/debiki/dao/SiteDao.scala",
      "status": "modified",
      "additions": 24,
      "deletions": 18,
      "changes": 42,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/dao/SiteDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/dao/SiteDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/SiteDao.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -279,20 +279,14 @@ class SiteDao(\n \n   @deprecated(\"now\", \"use writeTx { (tx, staleStuff) => ... } instead\")\n   def readWriteTransaction[R](fn: SiteTransaction => R, allowOverQuota: Boolean = false): R = {\n-    // Serialize writes per site. This avoids all? transaction rollbacks because of\n+    // Serialize writes per site. This reduces transaction rollbacks because of\n     // serialization errors in Postgres (e.g. if 2 people post 2 comments at the same time).\n-    // Later: Send a message to a per-site actor instead which handles all writes for that site,\n-    // one at a time. Wait for a reply for at most ... 1? 5? (Right now we might block\n-    // forever though, bad bad bad.)\n-    SECURITY // this makes a DoS attack possible? By posting comments all the time, one can make\n-    // all threads block, waiting for the per-site lock. There's rate limiting stuff though\n-    // so doing this takes some effort.\n+\n     DB_CONFICT // ? there're other ways to create per-site Dao:s too: by starting with a SystemDao.\n-    synchronizeOnSiteId(siteId) {\n+    withSiteWriteLock(siteId) {\n       dbDao2.readWriteSiteTransaction(siteId, allowOverQuota) {\n         fn(_)\n       }\n-      // If serialization error, try once? twice? again?\n     }\n   }\n \n@@ -631,41 +625,53 @@ object SiteDao extends TyLogging {\n   private val SoftMaxOldHostnames = 5\n   private val WaitUntilAnotherHostnameInterval = 60\n \n-  private val locksBySiteId = mutable.HashMap[SiteId, ReentrantLock]()\n+  private val locksBySiteId =\n+        scala.collection.concurrent.TrieMap[SiteId, ReentrantLock]()\n \n-  def siteCacheKey(siteId: SiteId) = MemCacheKey(siteId, \"|SiteId\")\n+  def siteCacheKey(siteId: SiteId): MemCacheKey = MemCacheKey(siteId, \"|SiteId\")\n \n \n-  def synchronizeOnManySiteIds[R](siteIds: Set[SiteId])(block: => R): R = {\n+  /*\n+  def withManySiteWriteLocks_Real_[R](siteIds: Set[SiteId])(block: => R): R = {\n     // Lock in same order, to avoid deadlocks.\n     val idsSorted = siteIds.toSeq.sorted\n-    syncManyImpl(idsSorted) {\n+    lockManyImpl(idsSorted) {\n       block\n     }\n   }\n \n \n-  private def syncManyImpl[R](siteIds: Seq[SiteId])(block: => R): R = {\n+  private def lockManyImpl[R](siteIds: Seq[SiteId])(block: => R): R = {\n     if (siteIds.isEmpty) {\n       block\n     }\n     else {\n       val lockNowId = siteIds.head\n       val lockLaterIds = siteIds.tail\n-      synchronizeOnSiteId(lockNowId) {\n-        syncManyImpl(lockLaterIds) {\n+      siteWriteLockIdImpl(lockNowId) {\n+        lockManyImpl(lockLaterIds) {\n           block\n         }\n       }\n     }\n+  } */\n+\n+\n+  def withSiteWriteLock[R](siteId: SiteId)(block: => R): R = {\n+    // Prevent the SystemDao from getting any whole db write lock.\n+    SystemDao.withWholeDbReadLock {\n+      // Then lock the desired site only — letting other threads write lock\n+      // other unrelated sites in parallel.\n+      siteWriteLockIdImpl(siteId)(block)\n+    }\n   }\n \n \n-  def synchronizeOnSiteId[R](siteId: SiteId)(block: => R): R = {\n+  private def siteWriteLockIdImpl[R](siteId: SiteId)(block: => R): R = {\n     val lock = locksBySiteId.getOrElseUpdate(siteId, new ReentrantLock)\n     // Wait for fairly long (some seconds) in case a garbage collection takes long.\n     // (Previously we waited forever here — so a few seconds should be fine.)\n-    if (lock.tryLock(3L, TimeUnit.SECONDS)) {\n+    if (lock.tryLock(5L, TimeUnit.SECONDS)) {\n       try {\n         block\n       }"
    },
    {
      "sha": "95b013f95d64d6df66efd478cad4acff883651e9",
      "filename": "app/debiki/dao/SystemDao.scala",
      "status": "modified",
      "additions": 121,
      "deletions": 39,
      "changes": 160,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/dao/SystemDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/dao/SystemDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/SystemDao.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -26,6 +26,7 @@ import scala.collection.{immutable, mutable}\n import SystemDao._\n import debiki.{ForgetEndToEndTestEmails, Globals}\n import ed.server.spam.ClearCheckingSpamNowCache\n+import java.util.concurrent.TimeUnit\n import play.api.libs.json.JsObject\n import talkyard.server.JsX\n import talkyard.server.TyLogger\n@@ -46,25 +47,53 @@ class SystemDao(\n \n   val memCache = new MemCache(NoSiteId, cache, globals.mostMetrics)\n \n-  private def readOnlyTransaction[R](fn: SystemTransaction => R): R =\n+\n+  // [Scala_3] Opaque type: SysTx —> SysTxRead\n+  RENAME\n+  private def readOnlyTransaction[R](fn: SysTx => R): R =\n+    readTx(fn)\n+  private def readTx[R](fn: SysTx => R): R =\n     dbDao2.readOnlySystemTransaction(fn)\n \n-  // WARNING: [PGSERZERR] Causes transaction rollbacks, rarely and infrequently, if writing\n+\n+  // [Scala_3] Opaque type: SysTx —> SysTxWriteAllSites\n+  def writeTxLockAllSites[R](fn: SysTx => R): R =\n+    SystemDao.withWholeDbWriteLock {\n+      dbDao2.readWriteSystemTransaction(fn, allSitesWriteLocked = true)\n+    }\n+\n+\n+  // Note: [PGSERZERR] Would cause transaction rollbacks, rarely and infrequently, if writing\n   // to the same parts of the same tables, at the same time as per site transactions.\n   // Even if the app server code is otherwise fine and bug free. It's a database thing.\n   // So, don't use this for updating per-site things. Instead, create a site specific\n   // dao and site specific transactions — they do the database writes under mutex,\n   // and so avoids any tx rollbacks.\n-  def dangerous_readWriteTransaction[R](fn: SystemTransaction => R): R =\n-    dbDao2.readWriteSystemTransaction(fn)\n+  // Edit: Now instead we just write lock all sites instead.\n+  def writeTxLockManySites[R](siteIds_ignored: Set[SiteId])(fn: SysTx => R): R = {\n+    // For now:\n+    writeTxLockAllSites(fn)\n+    // Earlier, but can cause rollbacks: (see comment above)\n+    // SiteDao.withManySiteWriteLocks(siteIdsToDelete)(fn)\n+  }\n \n-  def dangerous_readWriteTransactionReuseOld[R](\n-        anyOldTx: Option[SystemTransaction])(fn: SystemTransaction => R): R =\n-    if (anyOldTx.isDefined) fn(anyOldTx.get)\n-    else dbDao2.readWriteSystemTransaction(fn)\n \n-  def applyEvolutions(): Unit = {\n-    dangerous_readWriteTransaction(_.applyEvolutions())\n+  // [Scala_3] Opaque type: anyOldTx must be a SysTxWriteAllSites\n+  def writeTxLockAllSitesReuseAnyOldTx[R](\n+        anyOldTx: Opt[SysTx])(fn: SysTx => R): R = {\n+    anyOldTx match {\n+      case Some(oldTx) =>\n+        DO_AFTER // 2021-08-01 enable dieIf in Prod\n+        dieIf(Globals.isDevOrTest && !oldTx.allSitesWriteLocked,\n+              \"TyE502MSK\", \"Trying to reuse old tx but it hasn't a complete write lock\")\n+        fn(oldTx)\n+      case None =>\n+        writeTxLockAllSites(fn)\n+    }\n+  }\n+\n+  def applyEvolutions(): U = {\n+    writeTxLockAllSites(_.applyEvolutions())\n   }\n \n \n@@ -138,7 +167,11 @@ class SystemDao(\n         sitesToClear.add(patch.siteId)\n       }\n     }\n-    dangerous_readWriteTransaction(_.updateSites(sites))  // BUG tx race, rollback risk\n+    COULD_OPTIMIZE // clearDatabaseCacheAndMemCache() does:\n+    // `readWriteTransaction(_.bumpSiteVersion())`, but could instead pass\n+    // a param `bumpSiteVersion = true` to updateSites(), so won't need\n+    // two separate transactions.\n+    writeTxLockAllSites(_.updateSites(sites))\n     for (siteId <- sitesToClear) {\n       globals.siteDao(siteId).clearDatabaseCacheAndMemCache()\n     }\n@@ -147,10 +180,9 @@ class SystemDao(\n \n   private def createFirstSite(): Site = {\n     val pubId =\n-      if (globals.isOrWasTest) Site.FirstSiteTestPublicId\n-      else Site.newPubId()\n-    // Not dangerous: The site doesn't yet exist, so no other transactions can access it.\n-    dangerous_readWriteTransaction { sysTx =>\n+          if (globals.isOrWasTest) Site.FirstSiteTestPublicId\n+          else Site.newPubId()\n+    writeTxLockAllSites { sysTx =>\n       val firstSite = sysTx.createSite(Some(FirstSiteId),\n         pubId = pubId, name = \"Main Site\", SiteStatus.NoAdmin,\n         creatorIp = \"0.0.0.0\",\n@@ -210,11 +242,8 @@ class SystemDao(\n     val siteIdsToDelete = sitesToDeleteMaybeDupls.map(_.id).toSet\n     logger.info(s\"Deleting sites: $siteIdsToDelete\")  ; AUDIT_LOG\n \n-    SiteDao.synchronizeOnManySiteIds(siteIdsToDelete) {\n-      // Not dangerous — we locked these site ids (the line above).\n-      globals.systemDao.dangerous_readWriteTransaction { sysTx =>\n-        deleteSites(siteIdsToDelete, sysTx)\n-      }\n+    globals.systemDao.writeTxLockManySites(siteIdsToDelete) { sysTx =>\n+      deleteSites(siteIdsToDelete, sysTx)\n     }\n   }\n \n@@ -312,8 +341,8 @@ class SystemDao(\n     // anySiteId must have been locked already, by the caller. So things\n     // always get locked in the same order (avoids deadlocks).\n \n-    SiteDao.synchronizeOnManySiteIds(anySiteId.toSet) {\n-          globals.systemDao.dangerous_readWriteTransactionReuseOld(anySysTx) { sysTx =>\n+    // (Could lock only anySiteId, if no tx to reuse.)\n+    globals.systemDao.writeTxLockAllSitesReuseAnyOldTx(anySysTx) { sysTx =>\n               try {\n       // Keep all this in sync with createFirstSite(). (5DWSR42)\n \n@@ -419,7 +448,7 @@ class SystemDao(\n         logger.warn(o\"\"\"Cannot create site, dupl key error [TyE4ZKTP01]: $site,\n            details: $details\"\"\")\n         throw ex\n-    } } }\n+    } }\n   }\n \n \n@@ -487,15 +516,15 @@ class SystemDao(\n     }\n   }\n \n-  def deleteFromIndexQueue(post: Post, siteId: SiteId): Unit = {\n-    dangerous_readWriteTransaction { transaction =>  // BUG tx race, rollback risk\n-      transaction.deleteFromIndexQueue(post, siteId)\n+  def deleteFromIndexQueue(post: Post, siteId: SiteId): U = {\n+    writeTxLockAllSites { tx =>\n+      tx.deleteFromIndexQueue(post, siteId)\n     }\n   }\n \n-  def addEverythingInLanguagesToIndexQueue(languages: Set[String]): Unit = {\n-    dangerous_readWriteTransaction { transaction =>  // BUG tx race, rollback risk\n-      transaction.addEverythingInLanguagesToIndexQueue(languages)\n+  def addEverythingInLanguagesToIndexQueue(languages: Set[St]): U = {\n+    writeTxLockAllSites { tx =>\n+      tx.addEverythingInLanguagesToIndexQueue(languages)\n     }\n   }\n \n@@ -626,34 +655,34 @@ class SystemDao(\n \n   // ----- The janitor actor\n \n-  def deletePersonalDataFromOldAuditLogEntries(): Unit = {\n-    dangerous_readWriteTransaction { tx =>  // BUG tx race, rollback risk\n+  def deletePersonalDataFromOldAuditLogEntries(): U = {\n+    writeTxLockAllSites { tx =>\n       tx.deletePersonalDataFromOldAuditLogEntries()\n     }\n   }\n \n-  def deletePersonalDataFromOldSpamCheckTasks(): Unit = {\n-    dangerous_readWriteTransaction { tx =>  // BUG tx race, rollback risk\n+  def deletePersonalDataFromOldSpamCheckTasks(): U = {\n+    writeTxLockAllSites { tx =>\n       tx.deletePersonalDataFromOldSpamCheckTasks()\n     }\n   }\n \n-  def deleteOldUnusedUploads(): Unit =  {\n-    dangerous_readWriteTransaction { tx =>  // BUG tx race, rollback risk\n+  def deleteOldUnusedUploads(): U =  {\n+    writeTxLockAllSites { tx =>\n       tx.deleteOldUnusedUploads()\n     }\n   }\n \n   def purgeOldDeletedSites(): U = {\n-    dangerous_readWriteTransaction { tx =>  // BUG tx race, rollback risk\n+    writeTxLockAllSites { tx =>\n       val sites = tx.loadSitesDeletedNotPurged()\n       logger.debug(s\"Could purge some of these deleted sites: ${sites.map(_.toLogSt)}\")\n       // also:  [enb_req_ltr]\n     }\n   }\n \n-  def executePendingReviewTasks(): Unit =  {\n-    val taskIdsBySite: Map[SiteId, immutable.Seq[ReviewTaskId]] = readOnlyTransaction { tx =>\n+  def executePendingReviewTasks(): U =  {\n+    val taskIdsBySite: Map[SiteId, immutable.Seq[ReviewTaskId]] = readTx { tx =>\n       tx.loadReviewTaskIdsToExecute()\n     }\n     taskIdsBySite foreach { case (siteId, taskIds) =>\n@@ -690,7 +719,7 @@ class SystemDao(\n   // ----- Testing\n \n   def emptyDatabase(): Unit = {\n-    dangerous_readWriteTransaction { transaction =>\n+    writeTxLockAllSites { transaction =>\n       dieIf(!globals.isOrWasTest, \"EsE500EDB0\")\n       transaction.emptyDatabase()\n     }\n@@ -725,6 +754,59 @@ class SystemDao(\n \n object SystemDao {\n \n+  /** A mutex, to avoid PostgreSQL serialization errors.\n+    *\n+    * The SystemDao write-locks it, when writing to the database,\n+    * because it writes to \"anywhere\", often many sites at once.\n+    *\n+    * Whilst SiteDao:s only read-locks it — they restrict their writes\n+    * to specific sites only, and it's ok if many SiteDao:s have write transactions\n+    * open at the same time, to different sites.\n+    */\n+  private val wholeDbLock = new java.util.concurrent.locks.ReentrantReadWriteLock()\n+\n+  private val wholeDbWriteLock = wholeDbLock.writeLock()\n+  private val wholeDbReadLock = wholeDbLock.readLock()\n+\n+  // Wait for some seconds — maybe there's a JVM garbage collection pause.\n+  private val lockTimeoutSecs = 5L\n+\n+  // This is for the SystemDao to write lock the whole PostgreSQL database.\n+  private def withWholeDbWriteLock[R](block: => R): R = {\n+    if (wholeDbWriteLock.tryLock(lockTimeoutSecs, TimeUnit.SECONDS)) {\n+      try {\n+        block\n+      }\n+      finally {\n+        wholeDbWriteLock.unlock()\n+      }\n+    }\n+    else {\n+      throw new RuntimeException(o\"\"\"SystemDao couldn't lock wholeDbWriteLock,\n+            timed out after $lockTimeoutSecs seconds [TyE0SYSDAOLOCK]\"\"\")\n+    }\n+  }\n+\n+\n+  /** This is for SiteDao's to prevent the SystemDao from write locking the\n+    * whole PostgreSQL database, when a SiteDao has write locked a single site.\n+    */\n+  def withWholeDbReadLock[R](block: => R): R = {\n+    if (wholeDbReadLock.tryLock(lockTimeoutSecs, TimeUnit.SECONDS)) {\n+      try {\n+        block\n+      }\n+      finally {\n+        wholeDbReadLock.unlock()\n+      }\n+    }\n+    else {\n+      throw new RuntimeException(o\"\"\"SystemDao or a SiteDao couldn't lock\n+            wholeDbReadLock, timed out after $lockTimeoutSecs seconds [TyE0SYSDAOLOCK]\"\"\")\n+    }\n+  }\n+\n+\n   private def canonicalHostKey(host: String) =\n     // Site id unknown, that's what we're about to lookup.\n     MemCacheKeyAnySite(s\"$host|SiteByOrigin\")"
    },
    {
      "sha": "69c6fd697fa41ba51c9ea374e41533a859197d31",
      "filename": "app/debiki/dao/UploadsDao.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/dao/UploadsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/dao/UploadsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/UploadsDao.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -64,7 +64,7 @@ trait UploadsDao {\n       \"DwE5KFY9\", \"File uploads disabled, config value missing: \" +\n         Globals.LocalhostUploadsDirConfValName)\n \n-    val uploadedDotSuffix = '.' + checkAndGetFileSuffix(uploadedFileName)\n+    val uploadedDotSuffix = '.' + checkAndGetFileSuffixLowercase(uploadedFileName)\n \n     // java.nio.file.Files.probeContentType doesn't work in Alpine Linux + JRE 8. Instead, use Tika.\n     // (This detects mime type based on actual document content, not just the suffix.) dupl [7YKW23]\n@@ -418,7 +418,16 @@ object UploadsDao {\n   }\n \n \n-  def checkAndGetFileSuffix(fileName: String): String = {\n+  def checkAndGetFileSuffixLowercase(fileNameMixedCase: St): St = {\n+    val fileName: St = fileNameMixedCase.toLowerCase\n+\n+    REMOVE // this whole fn? Just get the file extension, lowercase, e.g.:\n+    //   if (exists '.') takeRightWhile(...).toLowerCase?\n+    // Because now the allowed file extensions is per group configurable, [ck_upl_ftp].\n+    // However! The file extensions lists below are nice\n+    // — can move them to the group permissions config page, and add\n+    // shortcut buttons for allowing all types of images, or videos, sound, etc?\n+\n     // For now, require exactly 1 dot. Later: don't store the suffix at all?\n     // Instead, derive it based on the mime type. Could use Apache Tika.\n     // See: http://stackoverflow.com/questions/13650372/\n@@ -443,7 +452,7 @@ object UploadsDao {\n       return suffix\n \n     if (!fileName.exists(_ == '.'))\n-      throwForbidden(\"DwE6UPM5\", \"The file has no suffix\")\n+      throwForbidden(\"DwE6UPM5\", \"The file has no suffix\")  // [upl_ext_req]\n \n     if (suffix.length > MaxSuffixLength)\n       throwBadRequest(\"DwE7F3P5\", o\"\"\"File has too long suffix: '$fileName'"
    },
    {
      "sha": "619d90503ff2580ca8c4706dbd37deb62cd6fc2c",
      "filename": "app/debiki/onebox/LinkPreviewHtml.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/LinkPreviewHtml.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/LinkPreviewHtml.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/onebox/LinkPreviewHtml.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -27,7 +27,7 @@ import debiki.TextAndHtml.safeEncodeForHtml\n object LinkPreviewHtml {\n \n \n-  def safeAside(safeHtml: St, extraLnPvCssClasses: St,\n+  def wrapInSafeAside(safeHtml: St, extraLnPvCssClasses: St,\n         unsafeUrl: St, unsafeProviderName: Opt[St],\n         addViewAtLink: Bo): St = {\n \n@@ -42,7 +42,7 @@ object LinkPreviewHtml {\n     // rel=nofollow also added here: [rel_nofollow].\n     val relAttrs = \"nofollow noopener ugc\"\n \n-    <aside class={s\"s_LnPv $extraLnPvCssClasses clearfix\"}>{\n+    <aside class={s\"s_LnPv s_LnPv-Blk $extraLnPvCssClasses clearfix\"}>{\n         // The html should have been sanitized already (that's why the param\n         // name is *safe*Html).\n         scala.xml.Unparsed(safeHtml)"
    },
    {
      "sha": "a19c142c137eb0cd55c824ae0e9f4581d3d92e50",
      "filename": "app/debiki/onebox/Onebox.scala",
      "status": "modified",
      "additions": 233,
      "deletions": 98,
      "changes": 331,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/Onebox.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/Onebox.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/onebox/Onebox.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -19,7 +19,7 @@ package debiki.onebox   // RENAME QUICK to talkyard.server.linkpreviews.LinkPrev\n \n import com.debiki.core._\n import com.debiki.core.Prelude._\n-import debiki.{Globals, TextAndHtml}\n+import debiki.{Globals, TextAndHtml, TextAndHtmlMaker, JsoupLinkElems}\n import debiki.onebox.engines._\n import debiki.TextAndHtml.safeEncodeForHtml\n import debiki.dao.RedisCache\n@@ -46,11 +46,11 @@ object RenderPreviewResult {\n   /** If a preview was cached already (in link_previews_t),\n     * or no external HTTP request needed.\n     */\n-  case class Done(safeHtml: String, placeholder: String) extends RenderPreviewResult\n+  case class Done(result: PreviewResult, placeholder: String) extends RenderPreviewResult\n \n   /** If we sent a HTTP request to download a preview, e.g. an oEmbed request.\n     */\n-  case class Loading(futureSafeHtml: Future[String], placeholder: String)\n+  case class Loading(futureSafeHtml: Future[PreviewResult], placeholder: String)\n     extends RenderPreviewResult\n }\n \n@@ -70,6 +70,36 @@ class RenderPreviewParams(\n }\n \n \n+case class PreviewResult(\n+  safeTitleCont: Opt[St] = None,\n+  classAtr: St = \"\",\n+  errCode: Opt[ErrCode] = None,\n+  safeHtml: St,\n+) {\n+  // Some previews have an unknown title. But there cannot be both a title\n+  // (indicating that fetching the preview went fine) and an error code.\n+  require(safeTitleCont.isEmpty || errCode.isEmpty, \"TyE60TFRM5\")\n+}\n+\n+\n+object PreviewResult {\n+  val Nothing: PreviewResult = PreviewResult(safeHtml = \"\")\n+  def error(errCode: St): PreviewResult = Nothing.copy(errCode = Some(errCode))\n+}\n+\n+\n+/**\n+*\n+* @param safeTitleCont — cannot be used in an attribute value though.\n+* @param maybeUnsafeHtml\n+*/\n+case class PreviewTitleHtml(\n+  safeTitleCont: Opt[St] = None,\n+  maybeUnsafeHtml: St,\n+  // alreadySanitized: Bo,  use instead of LinkPreviewRenderEngine.sandboxInIframe  ?\n+  followLinksSkipNoopener: Bo = false,\n+  )\n+\n \n case class LinkPreviewProblem(\n   unsafeProblem: St,\n@@ -78,6 +108,106 @@ case class LinkPreviewProblem(\n \n \n \n+object LinkPreviewRenderer {\n+\n+  val MaxUrlLength = 470  // link_url_c max len is 500\n+\n+\n+  // What if this is a link to *another* Talkyard site, which uses a different\n+  // CDN or no CDN? Then shouldn't point the links to the current server's CDN.\n+  // Harmless today, 2020-07 and today 2021-03.\n+  BUG; FIX_AFTER // 2021-07-01 Skip links with different pub site id or origin. [cdn_nls]\n+  //\n+  // (?:...) is a non-capturing group.  (for local dev search: /-/u/ below.)\n+  private val uplLinkRegex: Regex =\n+    \"\"\"(?:(?:(?:https?:)?//[^/]+)?/-/(?:u|uploads/public)/)([a-zA-Z0-9/\\._-]+)\"\"\".r\n+\n+  private val noOpenerRegex: Regex =\n+    \"\"\"^(.* )?noopener( .*)?$\"\"\".r\n+\n+  /** Changes links to https:, if server uses https.\n+    * This might break some links, but that's better than http-not-secure\n+    * linking to resources, in the cases where https would have worked\n+    * — which is nowadays close to always? (thanks to LetsEncrypt)\n+    *\n+    * Also rewrites any links to images etc on the same site,\n+    * so they'll point to any CDN in use.\n+    *\n+    * And adds 'noopener' if target is _blank.\n+    */\n+  def tweakLinks(htmlSt: St, toHttps: Bo, uploadsUrlCdnPrefix: Opt[St],\n+          followLinksSkipNoopener: Bo = false,\n+          siteId_unused: SiteId, sitePubId_unused: PubSiteId): St = {\n+    // Tests: LinkPreviewRendererSpec\n+\n+    val doc = org.jsoup.Jsoup.parse(htmlSt)\n+    val JsoupLinkElems(\n+          hrefAttrElems,\n+          srcAttrElems) = TextAndHtmlMaker.jsoupFindLinks(doc)\n+\n+    def tweak(url: St): St = {\n+      var tweakedUrl = url.trim\n+      if (toHttps && tweakedUrl.startsWith(\"http:\")) {\n+        tweakedUrl = \"https\" + tweakedUrl.drop(\"http\".length)\n+      }\n+      tweakedUrl = uploadsUrlCdnPrefix match {\n+        case None => tweakedUrl\n+        case Some(prefix) =>\n+          uplLinkRegex.replaceAllIn(tweakedUrl, s\"$prefix$$1\")\n+      }\n+      tweakedUrl\n+    }\n+\n+    var anyTweaked = false\n+\n+    for (elem: org.jsoup.nodes.Element <- hrefAttrElems) {\n+      // attr() returns \"\" not null.\n+      val origUrl = elem.attr(\"href\")\n+      val tweakedUrl = tweak(origUrl)\n+      if (tweakedUrl != origUrl) {\n+        elem.attr(\"href\", tweakedUrl)\n+        anyTweaked = true\n+      }\n+\n+      // Add rel=\"noopener\" if target is _blank [reverse_tabnabbing], so any\n+      // target=\"_blank\" linked page cannot access window.opener and change\n+      // it's location to e.g. a phishing site, e.g.:\n+      //    window.opener.location = 'https://www.example.com';\n+      // See: https://web.dev/external-anchors-use-rel-noopener/\n+      // > when you use target=\"_blank\", always add rel=\"noopener\" or rel=\"noreferrer\"\n+      //\n+      if (!followLinksSkipNoopener) {\n+        val isAreaOrA = elem.tagName == \"a\" || elem.tagName == \"area\"\n+        if (isAreaOrA && elem.attr(\"target\").contains(\"_blank\")) {\n+          val relAtrVal = elem.attr(\"rel\")\n+          if (!noOpenerRegex.matches(relAtrVal)) {\n+            val space = if (relAtrVal.isEmpty) \"\" else \" \"\n+            elem.attr(\"rel\", relAtrVal + space + \"noopener\")\n+            anyTweaked = true\n+          }\n+        }\n+      }\n+    }\n+\n+    for (elem: org.jsoup.nodes.Element <- srcAttrElems) {\n+      // attr() returns \"\" not null.\n+      val origUrl = elem.attr(\"src\")\n+      val tweakedUrl = tweak(origUrl)\n+      if (tweakedUrl != origUrl) {\n+        elem.attr(\"src\", tweakedUrl)\n+        anyTweaked = true\n+      }\n+    }\n+\n+    val result = if (!anyTweaked) htmlSt else {\n+      doc.outputSettings(TextAndHtml.compactJsoupOutputSettings)\n+      doc.body.html\n+    }\n+    result\n+  }\n+}\n+\n+\n /** Renders link previews for one type of links — e.g. YouTube,\n   * or Reddit, or maybe generic oEmed links.\n   *\n@@ -88,18 +218,18 @@ abstract class LinkPreviewRenderEngine(globals: Globals) extends TyLogging {  CL\n   def regex: Regex =\n     die(\"TyE603RKDJ35\", \"Please implement 'handles(url): Boolean' or 'regex: Regex'\")\n \n-  def providerName: Option[String]\n+  def providerName: Opt[St]\n \n-  def extraLnPvCssClasses: String\n+  def extraLnPvCssClasses: St\n \n-  def handles(uri: j_URI): Bo = handles(uri.toString)\n-  def handles(url: St): Bo = regex matches url\n+  def handles(uri: j_URI, inline: Bo): Bo = !inline && handles(uri.toString)\n+  def handles(url: St): Bo = regex.matches(url)\n \n   /** If an engine needs to include an iframe or any \"uexpected thing\",\n     * then it'll have to sanitize everything itself, because\n     * TextAndHtml.sanitizeRelaxed() removes iframes and other uexpected things.\n     */\n-  protected def alreadySanitized = false\n+  protected def alreadySanitized = false  ; REMOVE // use PreviewTitleHtml.alreadySanitized instead\n \n   /** An engine can set this to true, to get iframe-sandboxed instead of\n     * html-sanitized.\n@@ -112,39 +242,14 @@ abstract class LinkPreviewRenderEngine(globals: Globals) extends TyLogging {  CL\n \n   protected def cachePreview = true\n \n-  // (?:...) is a non-capturing group.  (for local dev search: /-/u/ below.)\n-  private def makeUploadsLinkRegexStr(q: Char) = s\"=$q\" +\n-        \"\"\"(?:(?:(?:https?:)?//[^/]+)?/-/(?:u|uploads/public)/)([a-zA-Z0-9/\\._-]+)\"\"\" + q\n-\n-  private val uploadsLinkRegexSingleQuote: Regex = makeUploadsLinkRegexStr('\\'').r\n-  private val uploadsLinkRegexDoubleQuote: Regex = makeUploadsLinkRegexStr('\"').r\n \n-\n-  private def pointUrlsToCdn(safeHtml: String): String = {\n-    val prefix = globals.config.cdn.uploadsUrlPrefix getOrElse {\n-      return safeHtml\n-    }\n-\n-    // What if this is a link to *another* Talkyard site, which uses a different\n-    // CDN or no CDN? Then shouldn't point the links to our CDN. Harmless today, 2020-07.\n-    BUG; FIX_AFTER // 2021-01 Skip links with different pub site id or origin. [cdn_nls]\n-\n-    SEC_TESTS_MISSING; NEXT // Better keep single / double quote style — otherwise, look:\n-    //    <div attr=\" ='upl-url' > <script>alert(1)</script>\">\n-    // would become:\n-    //    <div attr=\" =\"upl-url\" > <script>alert(1)</script>\">\n-    // looks as if that could have been an xss vuln?\n-    var result = uploadsLinkRegexSingleQuote.replaceAllIn(safeHtml, s\"\"\"='$prefix$$1'\"\"\")\n-    result = uploadsLinkRegexDoubleQuote.replaceAllIn(result, s\"\"\"=\"$prefix$$1\"\"\"\")\n-    result\n-  }\n-\n-\n-  final def fetchRenderSanitize(urlAndFns: RenderPreviewParams): Future[String] = {\n+  final def fetchRenderSanitize(urlAndFns: RenderPreviewParams): Future[PreviewResult] = {\n \n     // ----- Any cached preview?\n \n     // This prevents pg storage DoS.  [ln_pv_netw_err]\n+\n+    unimplIf(cachePreview && urlAndFns.inline, \"TyE592MSRHG2\")\n     val anyRedisCache = if (!cachePreview) None else Some {\n       COULD_OPTIMIZE // As Redis key, use a url hash, so shorter?\n       val redisCache = new RedisCache(urlAndFns.siteId, globals.redisClient, globals.now)\n@@ -153,7 +258,7 @@ abstract class LinkPreviewRenderEngine(globals: Globals) extends TyLogging {  CL\n         // retry, although cache entry still here.\n         // E.g. was netw err,\n         // but at most X times per minute? Otherwise return the cached broken html.\n-        return Future.successful(safeHtml)\n+        return Future.successful(PreviewResult(safeHtml = safeHtml))\n       }\n       redisCache\n     }\n@@ -162,19 +267,27 @@ abstract class LinkPreviewRenderEngine(globals: Globals) extends TyLogging {  CL\n \n     // Or generate instantly.\n \n-    val futureHtml: Future[String Or LinkPreviewProblem] = loadAndRender(urlAndFns)\n+    val futureHtml: Future[PreviewTitleHtml Or LinkPreviewProblem] =\n+          loadAndRender(urlAndFns)\n \n     // ----- Sanitize\n \n-    def sanitizeAndWrap(htmlOrError: String Or LinkPreviewProblem): String = {\n+    def sanitizeAndWrap(previewOrProblem: PreviewTitleHtml Or LinkPreviewProblem)\n+          : PreviewResult = {\n+\n       // <aside> class:    s_LnPv (-Err)    means Link Preview (Error)\n       // <aside><a> class: s_LnPv_L (-Err)  means the actual <a href=..> link\n+      var anyErrCode: Opt[ErrCode] = None\n+      var followLinksSkipNoopener = false\n \n-      var safeHtml = htmlOrError match {\n+      val safeHtmlMaybeBadLinks = previewOrProblem match {\n         case Bad(problem) =>\n+          anyErrCode = Some(problem.errorCode)\n           LinkPreviewHtml.safeProblem(unsafeProblem = problem.unsafeProblem,\n                 unsafeUrl = urlAndFns.unsafeUrl, errorCode = problem.errorCode)\n-        case Good(maybeUnsafeHtml) =>\n+        case Good(previewTitleHtml) =>\n+          import previewTitleHtml.maybeUnsafeHtml\n+          followLinksSkipNoopener = previewTitleHtml.followLinksSkipNoopener\n           if (alreadySanitized) {\n             maybeUnsafeHtml\n           }\n@@ -187,54 +300,41 @@ abstract class LinkPreviewRenderEngine(globals: Globals) extends TyLogging {  CL\n           }\n       }\n \n-      // But also need to add rel=\"noopener\" (or \"noopener\"), so any\n-      // target=\"_blank\" linked page cannot access window.opener and change\n-      // it's location to e.g. a phishing site, e.g.:\n-      //    window.opener.location = 'https://www.example.com';\n-      //\n-      // https://web.dev/external-anchors-use-rel-noopener/\n-      //  when you use target=\"_blank\", always add rel=\"noopener\" or rel=\"noopener\"\n-      //\n-      // Extra security check:\n-      DO_AFTER // 2020-11-01 remove this extra check.\n-      // This might break previews with '_blank' in any text / description loaded\n-      // via OpenGraph or html tags — but Talkyard doesn't support that yet,\n-      // so, for now, this is fine:\n-      if (!sandboxInIframe && safeHtml.contains(\"_blank\")\n-            && !safeHtml.contains(\"noopener\")\n-            && !this.isInstanceOf[InternalLinkPrevwRendrEng]) {\n-        logger.warn(s\"Forgot to add noopener to _blank link: ${urlAndFns.unsafeUrl\n-              } [TyEFORGTNORFR]\")\n-        return <pre>{\"Talkyard bug: _blank but no 'noopener' [TyE402RKDHF46]:\\n\" +\n-                  safeHtml}</pre>.toString\n-      }\n-\n-      SECURITY; SHOULD; NEXT // do with Jsoup, from TextAndHtml.sanitizeRelaxed, [cdn_nls]\n-      // or a  fix-links  fn if sanitized already.\n-      // So won't affect 'http' in a code block for example.\n-      //\n       // Don't link to insecure HTTP resources from safe HTTPS pages,  [no_insec_emb]\n       // e.g. don't link to <img src=\"http://...\">. Change to https instead — even if\n       // the image/whatever then breaks; security is more important, plus, browsers\n       // show security warnings if there are insecure http resources in an\n       // https-secure page.\n-      if (globals.secure) {\n-        safeHtml = safeHtml.replaceAllLiterally(\"http:\", \"https:\")\n-      }\n-      safeHtml = pointUrlsToCdn(safeHtml)\n+      // And make uploaded files links point to any CDN, and add 'noopener' if needed.\n+      val safeHtmlOkLinks = LinkPreviewRenderer.tweakLinks(\n+            safeHtmlMaybeBadLinks,\n+            toHttps = globals.secure,\n+            uploadsUrlCdnPrefix = globals.config.cdn.uploadsUrlPrefix,\n+            followLinksSkipNoopener = followLinksSkipNoopener,\n+            siteId_unused = urlAndFns.siteId,\n+            sitePubId_unused = \"\") // later\n+            // Maybe a follow-links param?  [WHENFOLLOW]\n \n-      val lnPvErr = if (htmlOrError.isBad) \"s_LnPv-Err \" else \"\"\n+      val lnPvErr = if (previewOrProblem.isBad) \"s_LnPv-Err \" else \"\"\n+\n+      val inlineClasses = s\"s_LnPv s_LnPv-Inl $lnPvErr$extraLnPvCssClasses\"\n \n       BUG // here urlAndFns.unsafeUrl won't point to the CDN? Doesn't really matter [cdn_nls]\n-      safeHtml = LinkPreviewHtml.safeAside(   // [lnpv_aside]\n-            safeHtml = safeHtml, extraLnPvCssClasses = lnPvErr + extraLnPvCssClasses,\n-            unsafeUrl = urlAndFns.unsafeUrl, unsafeProviderName = providerName,\n+      val safeHtmlWrapped = LinkPreviewHtml.wrapInSafeAside(   // [lnpv_aside]\n+            safeHtml = safeHtmlOkLinks,\n+            extraLnPvCssClasses = lnPvErr + extraLnPvCssClasses,\n+            unsafeUrl = urlAndFns.unsafeUrl,\n+            unsafeProviderName = providerName,\n             addViewAtLink = addViewAtLink)\n \n       anyRedisCache.foreach(\n-            _.putLinkPreviewSafeHtml(urlAndFns.unsafeUrl, safeHtml))\n+            _.putLinkPreviewSafeHtml(urlAndFns.unsafeUrl, safeHtmlWrapped))\n \n-      safeHtml\n+      PreviewResult(\n+            safeTitleCont = previewOrProblem.toOption.flatMap(_.safeTitleCont),\n+            classAtr = inlineClasses,\n+            safeHtml = safeHtmlWrapped,\n+            errCode = anyErrCode)\n     }\n \n     // Use if-isCompleted to get an instant result, if possible — Future.map()\n@@ -249,7 +349,7 @@ abstract class LinkPreviewRenderEngine(globals: Globals) extends TyLogging {  CL\n \n \n   protected def loadAndRender(urlAndFns: RenderPreviewParams)\n-        : Future[String Or LinkPreviewProblem]\n+        : Future[PreviewTitleHtml Or LinkPreviewProblem]\n \n }\n \n@@ -277,11 +377,19 @@ abstract class InstantLinkPrevwRendrEng(globals: Globals)\n   def providerLnPvCssClassName: String\n \n   protected final def loadAndRender(urlAndFns: RenderPreviewParams)\n-        : Future[String Or LinkPreviewProblem] = {\n-    Future.successful(renderInstantly(urlAndFns.unsafeUri))\n+        : Future[PreviewTitleHtml Or LinkPreviewProblem] = {\n+    Future.successful(renderInstantly2(urlAndFns))\n+  }\n+\n+  protected def renderInstantly2(linkToRender: RenderPreviewParams)\n+        : PreviewTitleHtml Or LinkPreviewProblem = {\n+    renderInstantly(linkToRender).map((maybeUnsafeHtml: St) =>\n+          PreviewTitleHtml(maybeUnsafeHtml = maybeUnsafeHtml))\n   }\n \n-  protected def renderInstantly(unsafeUri: j_URI): St Or LinkPreviewProblem\n+  // REMOVE\n+  protected def renderInstantly(linkToRender: RenderPreviewParams)\n+        : St Or LinkPreviewProblem\n }\n \n \n@@ -334,10 +442,9 @@ class LinkPreviewRenderer(\n     new RedditPrevwRendrEng(globals, siteId, mayHttpFetch),\n     )\n \n-  def fetchRenderSanitize(uri: j_URI, inline: Bo): Future[St] = {\n+  def fetchRenderSanitize(uri: j_URI, inline: Bo): Future[PreviewResult] = {\n     val url = uri.toString\n     require(url.length <= MaxUrlLength, s\"Too long url: $url TyE53RKTKDJ5\")\n-    unimplementedIf(inline, \"TyE50KSRDH7\")\n \n     def loadPreviewFromDatabase(downloadUrl: String): Option[LinkPreview] = {\n       // Don't create a write tx — could cause deadlocks, because unfortunately\n@@ -349,7 +456,7 @@ class LinkPreviewRenderer(\n     }\n \n     for (engine <- engines) {\n-      if (engine.handles(uri)) {\n+      if (engine.handles(uri, inline = inline)) {\n         val args = new RenderPreviewParams(\n               siteId = siteId,\n               fromPageId = NoPageId, // later  [ln_pv_az]\n@@ -384,25 +491,21 @@ class LinkPreviewRenderer(\n     if (uri.toString.length > MaxUrlLength)\n       return RenderPreviewResult.NoPreview\n \n-    def placeholder = PlaceholderPrefix + nextRandomString()\n+    def placeholder: St = PlaceholderPrefix + nextRandomString()\n \n-    val futureSafeHtml = fetchRenderSanitize(uri, inline = inline)\n-    if (futureSafeHtml.isCompleted)\n-      return futureSafeHtml.value.get match {\n+    val result: Future[PreviewResult] = fetchRenderSanitize(uri, inline = inline)\n+    if (result.isCompleted)\n+      return result.value.get match {\n         case Success(safeHtml) => RenderPreviewResult.Done(safeHtml, placeholder)\n         case Failure(throwable) => RenderPreviewResult.NoPreview\n       }\n \n-    RenderPreviewResult.Loading(futureSafeHtml, placeholder)\n+    RenderPreviewResult.Loading(result, placeholder)\n   }\n \n }\n \n \n-object LinkPreviewRenderer {\n-  val MaxUrlLength = 470  // link_url_c max len is 500\n-}\n-\n \n /** Used when rendering link previwes from inside Javascript code run by Nashorn.\n   */\n@@ -417,12 +520,43 @@ class LinkPreviewRendererForNashorn(val linkPreviewRenderer: LinkPreviewRenderer\n   private val donePreviews: ArrayBuffer[RenderPreviewResult.Done] = ArrayBuffer()\n   private def globals = linkPreviewRenderer.globals\n \n+\n   /** Called from javascript running server side in Nashorn.  [js_scala_interop]\n+    *\n+    * Returns a json string.\n     */\n-  def renderAndSanitizeOnebox(unsafeUrl: String): String = {\n+  def renderAndSanitizeInlineLinkPreview(unsafeUrl: St): St = {\n+    import play.api.libs.json.{Json, JsString}\n+\n+    // Allow hash frag, so can #post-123 link to specific posts. [int_ln_hash]\n+    val unsafeUri = Validation.parseUri(unsafeUrl, allowQuery = true, allowHash = true)\n+          .getOrIfBad { _ =>\n+      return Json.obj(\"errCode\" -> JsString(\"TyELNPVURL\")).toString\n+    }\n+\n+    val result = linkPreviewRenderer.fetchRenderSanitizeInstantly(\n+          unsafeUri, inline = true) match {\n+      case RenderPreviewResult.NoPreview =>\n+        // Fine.\n+        PreviewResult.Nothing\n+      case donePreview: RenderPreviewResult.Done =>\n+        donePreview.result\n+      case _: RenderPreviewResult.Loading =>\n+        PreviewResult.error(errCode = \"TyELNPV0CACH1\")\n+    }\n+\n+    val resultSt = Json.obj(  // ts: InlineLinkPreview\n+          \"safeTitleCont\" -> JsString(result.safeTitleCont.getOrElse(\"\")),\n+          \"classAtr\" -> JsString(result.classAtr)).toString\n+          // Not needed here:  safeHtml, errCode\n+\n+    resultSt\n+  }\n+\n+\n+  def renderAndSanitizeBlockLinkPreview(unsafeUrl: St): St = {\n     lazy val safeUrlInAtr = org.owasp.encoder.Encode.forHtmlAttribute(unsafeUrl)\n     lazy val safeUrlInTag = org.owasp.encoder.Encode.forHtmlContent(unsafeUrl)\n-    val inline = false // for now\n \n     if (!globals.isInitialized) {\n       // Also see the comment for Nashorn.startCreatingRenderEngines()\n@@ -447,7 +581,7 @@ class LinkPreviewRendererForNashorn(val linkPreviewRenderer: LinkPreviewRenderer\n       return noPreviewHtmlSt()\n     }\n \n-    linkPreviewRenderer.fetchRenderSanitizeInstantly(unsafeUri, inline = inline) match {\n+    linkPreviewRenderer.fetchRenderSanitizeInstantly(unsafeUri, inline = false) match {\n       case RenderPreviewResult.NoPreview =>\n         noPreviewHtmlSt()\n       case donePreview: RenderPreviewResult.Done =>\n@@ -459,7 +593,7 @@ class LinkPreviewRendererForNashorn(val linkPreviewRenderer: LinkPreviewRenderer\n       case pendingPreview: RenderPreviewResult.Loading =>\n         // We cannot http fetch from external servers from here. That should have been\n         // done already, and the results saved in link_previews_t.\n-        logger.warn(s\"No cached preview for: '$unsafeUrl' [TyE306KUT5]\")\n+        logger.warn(s\"No cached preview for: '$unsafeUrl' [TyELNPV0CACH2]\")\n         noPreviewHtmlSt(\" class=\\\"s_LnPvErr-NotCached\\\"\")\n     }\n   }\n@@ -468,7 +602,8 @@ class LinkPreviewRendererForNashorn(val linkPreviewRenderer: LinkPreviewRenderer\n   def replacePlaceholders(html: String): String = {\n     var htmlWithBoxes = html\n     for (donePreview <- donePreviews) {\n-      htmlWithBoxes = htmlWithBoxes.replace(donePreview.placeholder, donePreview.safeHtml)\n+      htmlWithBoxes = htmlWithBoxes.replace(\n+            donePreview.placeholder, donePreview.result.safeHtml)\n     }\n     htmlWithBoxes\n   }"
    },
    {
      "sha": "beaafa52cbec7eeaff03fc7390834f8ddfb0ab84",
      "filename": "app/debiki/onebox/engines/GiphyOnebox.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/GiphyOnebox.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/GiphyOnebox.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/onebox/engines/GiphyOnebox.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -44,8 +44,8 @@ class GiphyPrevwRendrEng(globals: Globals)\n   override val alreadySanitized = true\n \n \n-  def renderInstantly(unsafeUri: j_URI): St Or LinkPreviewProblem = {\n-    val unsafeUrl = unsafeUri.toString\n+  def renderInstantly(linkToRender: RenderPreviewParams): St Or LinkPreviewProblem = {\n+    val unsafeUrl = linkToRender.unsafeUrl\n     val unsafeId = findIdRegex.findGroupIn(unsafeUrl) getOrElse {\n       return Bad(LinkPreviewProblem(\n             \"Cannot find Giphy video id in URL\", unsafeUrl = unsafeUrl, \"TyEGIPHYURL\"))"
    },
    {
      "sha": "f08841388e6b3a97f746ab5a5a62e7f5aba0bea0",
      "filename": "app/debiki/onebox/engines/ImageOnebox.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/ImageOnebox.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/ImageOnebox.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/onebox/engines/ImageOnebox.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -42,8 +42,8 @@ class ImagePrevwRendrEng(globals: Globals)\n   override val alreadySanitized = true\n   override val addViewAtLink = false\n \n-  def renderInstantly(unsafeUri: j_URI): Good[St] = {\n-    val unsafeUrl = unsafeUri.toString\n+  def renderInstantly(linkToRender: RenderPreviewParams): Good[St] = {\n+    val unsafeUrl = linkToRender.unsafeUrl\n     // Fix Dropbox image links.\n     val betterUrl =\n           if (unsafeUrl startsWith \"https://www.dropbox.com/\")"
    },
    {
      "sha": "f54caedc9d4fa46154158833003d1a03df5cd131",
      "filename": "app/debiki/onebox/engines/OEmbedLinkPrevwRendrEng.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/OEmbedLinkPrevwRendrEng.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/OEmbedLinkPrevwRendrEng.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/onebox/engines/OEmbedLinkPrevwRendrEng.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -107,10 +107,12 @@ abstract class OEmbedLinkPrevwRendrEng(\n   override def sandboxInIframe = true\n \n \n-  def loadAndRender(params: RenderPreviewParams): Future[String Or LinkPreviewProblem] = {\n-    val unsafeUrl: String = params.unsafeUrl\n+  def loadAndRender(params: RenderPreviewParams)\n+        : Future[PreviewTitleHtml Or LinkPreviewProblem] = {\n \n-    def provdrOrUnk = providerName getOrElse \"oEmbed provider\"  // I18N\n+    val unsafeUrl: St = params.unsafeUrl\n+\n+    def provdrOrUnk: St = providerName getOrElse \"oEmbed provider\"  // I18N\n     def providerWidget = s\"$provdrOrUnk $widgetName\"\n \n     // This'll look like e.g. \"Twitter tweet not found: ... url ...\".  I18N\n@@ -151,7 +153,7 @@ abstract class OEmbedLinkPrevwRendrEng(\n                   noHtmlInOEmbed, unsafeUrl = unsafeUrl, errorCode = \"TyELNPV0HTML\"))\n       }\n \n-      return FutGood(unsafeHtml)\n+      return FutGood(PreviewTitleHtml(maybeUnsafeHtml = unsafeHtml))\n     }\n \n \n@@ -213,7 +215,7 @@ abstract class OEmbedLinkPrevwRendrEng(\n         problem = noHtmlInOEmbed\n       }\n \n-      val result: String Or LinkPreviewProblem = {\n+      val result: PreviewTitleHtml Or LinkPreviewProblem = {\n         if (problem.nonEmpty) {\n           // Make the response.body visible to site/server admins? [admin_log]\n           // But don't include in the reply — e.g. Reddit returned a 38k large\n@@ -239,7 +241,8 @@ abstract class OEmbedLinkPrevwRendrEng(\n                 contentJson = unsafeJsObj)\n           params.savePreviewInDb(preview)\n \n-          Good(anyUnsafeHtml getOrDie \"TyE6986SK\")\n+          Good(PreviewTitleHtml(\n+                maybeUnsafeHtml = anyUnsafeHtml getOrDie \"TyE6986SK\"))\n         }\n       }\n "
    },
    {
      "sha": "69f500f01c3219e3e6dd2d02237487aa231826eb",
      "filename": "app/debiki/onebox/engines/VideoOnebox.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/VideoOnebox.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/VideoOnebox.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/onebox/engines/VideoOnebox.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -42,8 +42,8 @@ class VideoPrevwRendrEng(globals: Globals)\n \n   override def alreadySanitized = true\n \n-  def renderInstantly(unsafeUri: j_URI): Good[St] = {\n-    val unsafeUrl = unsafeUri.toString\n+  def renderInstantly(linkToRender: RenderPreviewParams): Good[St] = {\n+    val unsafeUrl = linkToRender.unsafeUrl\n     val safeUrl: St = safeEncodeForHtml(unsafeUrl)\n     Good(o\"\"\"\n      <video width='100%' height='100%' controls src='$safeUrl'>"
    },
    {
      "sha": "512cf550b345da01d7a5761b6c1a8386b47908af",
      "filename": "app/debiki/onebox/engines/YouTubeOnebox.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/YouTubeOnebox.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/YouTubeOnebox.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/onebox/engines/YouTubeOnebox.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -43,7 +43,8 @@ class YouTubePrevwRendrEng(globals: Globals) extends InstantLinkPrevwRendrEng(gl\n \n   override val alreadySanitized = true\n \n-  def renderInstantly(unsafeUri: j_URI): St Or LinkPreviewProblem = {\n+  def renderInstantly(linkToRender: RenderPreviewParams): St Or LinkPreviewProblem = {\n+    val unsafeUri = linkToRender.unsafeUri\n     val unsafeUrl = unsafeUri.toString\n     findVideoId(unsafeUri) match {\n       case Some(unsafeVideoId) =>"
    },
    {
      "sha": "782bfec386790a62c745fae120fe4e5b74dd89b8",
      "filename": "app/debiki/onebox/engines/linkPreviewEngines.scala",
      "status": "modified",
      "additions": 36,
      "deletions": 18,
      "changes": 54,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/linkPreviewEngines.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/debiki/onebox/engines/linkPreviewEngines.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/onebox/engines/linkPreviewEngines.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -21,7 +21,7 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.{Globals, TextAndHtml, JsonMaker}\n import debiki.dao.{PageStuffDao, UseCache}\n-import debiki.onebox.{InstantLinkPrevwRendrEng, LinkPreviewProblem}\n+import debiki.onebox.{InstantLinkPrevwRendrEng, LinkPreviewProblem, RenderPreviewParams, PreviewTitleHtml}\n import ed.server.auth.MaySeeOrWhyNot.{YesMaySee, NopeNoSuchPage, NopeNoPostWithThatNr}\n import org.scalactic.{Bad, Good, Or}\n import scala.util.matching.Regex\n@@ -239,8 +239,7 @@ class InstagramPrevwRendrEng(globals: Globals, siteId: SiteId, mayHttpFetch: Boo\n \n // Talkayrd internal links, i.e. to other pages within the same site.\n \n-class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId) // TESTS_MISSING TyTINTLNPRVW\n-                                  // add tests later, when implementing inline links?\n+class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId)\n   extends InstantLinkPrevwRendrEng(globals) {\n \n   def providerLnPvCssClassName: String = \"s_LnPv-Int\"\n@@ -256,7 +255,8 @@ class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId) // TESTS_MISSI\n   // change so often — more okay to cache?)\n   override def cachePreview = false\n \n-  override def handles(uri: j_URI): Bo = {\n+  override def handles(uri: j_URI, inline: Bo): Bo = {\n+    // inline: Yes, can handle.\n     val domainOrAddress: String = uri.getHost  // can be null, fine\n \n     // If no hostname, then it's a local link (right?).\n@@ -271,7 +271,14 @@ class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId) // TESTS_MISSI\n   }\n \n \n-  protected def renderInstantly(unsafeUri: j_URI): St Or LinkPreviewProblem = {\n+  // Will remove, later\n+  def renderInstantly(linkToRender: RenderPreviewParams)\n+        : St Or LinkPreviewProblem = die(\"TyE602RMMDK35\")\n+\n+\n+  override def renderInstantly2(renderParams: RenderPreviewParams)\n+        : PreviewTitleHtml Or LinkPreviewProblem = {\n+    import renderParams.unsafeUri\n     val unsafeUrl = unsafeUri.toString\n \n     val unsafeUrlPath: St = unsafeUri.getPathEmptyNotNull\n@@ -297,6 +304,17 @@ class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId) // TESTS_MISSI\n       case Some(postPath: PostPathWithIdNr) =>\n         postNr = postPath.postNr\n \n+        // AuthZ\n+        //\n+        // For now: Only create internal link previews, if Everyone (pat = None)\n+        // may see the linked page.\n+        // Otherwise an attacker could type urls to various page ids and post nrs\n+        // and get to see parts of private discussions — via link previews.\n+        //\n+        // Later: Load groups and permissions for the linking page (where the\n+        // link preview is to appear), and iff everyone who can see that page,\n+        // can also see the linked page, generate a link preview.\n+        //\n         val (maySeeOrWhyNot, dbgCode) = dao.maySeePostUseCache(   // [ln_pv_az]\n               pageId = postPath.pageId, postNr = postPath.postNr, user = None)\n \n@@ -310,6 +328,7 @@ class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId) // TESTS_MISSI\n             // Suddenly gone? Fine, we're not in a db tx.\n             pageFound = false\n           case Some(pageStuff) =>\n+            // Linked post title.\n             unsafeTitle = pageStuff.title\n             val anyLinkedReply =\n                   if (postPath.postNr == BodyNr) {\n@@ -318,6 +337,7 @@ class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId) // TESTS_MISSI\n                     None\n                   }\n                   else {\n+                    unsafeTitle += s\" #post-${postPath.postNr}\"\n                     // Linking to a reply.\n                     COULD_OPTIMIZE // makes any sense to cache this?\n                     val anyPost = dao.loadPostByPageIdNr(\n@@ -326,11 +346,8 @@ class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId) // TESTS_MISSI\n                     anyPost\n                   }\n \n-            val inline = false  // for now\n-            if (inline) {\n-              // Show title only.\n-            }\n-            else if (anyLinkedReply.isDefined) {\n+            // Orig post or reply excerpt.\n+            if (anyLinkedReply.isDefined) {\n               val replyPost = anyLinkedReply.get\n               replyPost.approvedHtmlSanitized foreach { html =>\n                 // This also for orig posts, see: [post_excerpts].\n@@ -373,13 +390,11 @@ class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId) // TESTS_MISSI\n     }\n \n     val safeUrlAttr = TextAndHtml.safeEncodeForHtmlAttrOnly(unsafeUrl)\n-    val safeTitle = TextAndHtml.safeEncodeForHtmlContentOnly(unsafeTitle)\n-    val safeLink = s\"\"\"<a href=\"$safeUrlAttr\">$safeTitle</a>\"\"\"\n+    val safeTitleCont = TextAndHtml.safeEncodeForHtmlContentOnly(unsafeTitle)\n+    val safeLink = s\"\"\"<a href=\"$safeUrlAttr\">$safeTitleCont</a>\"\"\"\n     var safePreview: St =\n           if (unsafeExcerpt.isEmpty) {\n-            // This is either an inline link inside a paragraph — then just\n-            // show the title. Or a link to a page that apparently is empty,\n-            // no excerpt — weird.\n+            // Empty page, no text to show? Then skip the blockquote.\n             safeLink\n           }\n           else {\n@@ -391,7 +406,10 @@ class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId) // TESTS_MISSI\n     // Not needed, do anyway:\n     safePreview = TextAndHtml.sanitizeInternalLinksAndQuotes(safePreview)\n \n-    Good(safePreview)\n+    Good(PreviewTitleHtml(\n+          safeTitleCont = Some(safeTitleCont),\n+          maybeUnsafeHtml = safePreview,\n+          followLinksSkipNoopener = true))\n   }\n \n }\n@@ -465,8 +483,8 @@ class TelegramPrevwRendrEng(globals: Globals) extends InstantLinkPrevwRendrEng(g\n   override def alreadySanitized = true\n \n \n-  def renderInstantly(unsafeUri: j_URI): St Or LinkPreviewProblem = {\n-    val unsafeUrl: St = unsafeUri.toString\n+  def renderInstantly(linkToRender: RenderPreviewParams): St Or LinkPreviewProblem = {\n+    val unsafeUrl = linkToRender.unsafeUrl\n     val messageId = (regex findGroupIn unsafeUrl) getOrElse {\n       return Bad(LinkPreviewProblem(\n             \"Couldn't find message id in Telegram link\","
    },
    {
      "sha": "44b20d1a2196ddb9a6ec113d79025c9b1eaf7a07",
      "filename": "app/ed/server/http/DebikiRequest.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/ed/server/http/DebikiRequest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/ed/server/http/DebikiRequest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/http/DebikiRequest.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -22,7 +22,7 @@ import com.debiki.core.PageOrderOffset\n import com.debiki.core.Prelude._\n import controllers.Utils.ValidationImplicits._\n import debiki._\n-import debiki.dao.SiteDao\n+import debiki.dao.{SiteDao, SystemDao}\n import debiki.EdHttp._\n import ed.server.EdContext\n import ed.server.auth.ForumAuthzContext\n@@ -57,6 +57,7 @@ abstract class AuthnReqHeader extends SomethingToRateLimit {\n   def user: Option[Participant] // REFACTOR RENAME to 'requester' (and remove 'def requester' below)\n                         // COULD? add a 'Stranger extends User' and use instead of None ?\n   def dao: SiteDao\n+  def systemDao: SystemDao = globals.systemDao\n \n   def theSiteUserId: SiteUserId = SiteUserId(site.id, theUser.id)\n "
    },
    {
      "sha": "11ee42c1554216561dd841503da4c7f2935d2f17",
      "filename": "app/ed/server/http/PlainApiActions.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/ed/server/http/PlainApiActions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/ed/server/http/PlainApiActions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/http/PlainApiActions.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -155,7 +155,7 @@ class PlainApiActions(\n       // logout or login, so people can login and read (OpenAuth login is GET only).\n       def logoutPath: String = controllers.routes.LoginController.logout(None).url\n       def loginPasswordPath: String = controllers.routes.LoginWithPasswordController.login().url\n-      if (globals.mainWorkUntilSecs.isDefined && request.method == \"POST\"\n+      if (globals.maintWorkUntilSecs.isDefined && request.method == \"POST\"\n           && request.path != logoutPath\n           && request.path != loginPasswordPath) {\n         throwServiceUnavailable(\"TyMMAINTWORK\", o\"\"\"The server is under maintenance:"
    },
    {
      "sha": "05a93f7704ecd6221243dbd88fcab6527bc911f8",
      "filename": "app/ed/server/summaryemails/UnsubFromSummariesController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/ed/server/summaryemails/UnsubFromSummariesController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/ed/server/summaryemails/UnsubFromSummariesController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/summaryemails/UnsubFromSummariesController.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -61,6 +61,7 @@ class UnsubFromSummariesController @Inject()(cc: ControllerComponents, edContext\n     val site = globals.lookupSiteOrThrow(request)\n     val dao = globals.siteDao(site.id)\n     val email = dao.loadEmailById(emailId) getOrElse throwForbidden(\"EdE5JGKW0\", \"Bad email id\")\n+    CSP_MISSING\n     Ok(views.html.summaryemails.unsubFromSummariesPage(emailId, emailAddress = email.sentTo))\n   }\n \n@@ -105,6 +106,7 @@ class UnsubFromSummariesController @Inject()(cc: ControllerComponents, edContext\n \n \n   def showHasBeenUnsubscribed(): Action[Unit] = ExceptionAction(cc.parsers.empty) { _ =>\n+    CSP_MISSING\n     Ok(views.html.summaryemails.unsubFromSummariesDonePage())\n   }\n "
    },
    {
      "sha": "6eca0641c44159d607cae286435920f24fb90e4a",
      "filename": "app/talkyard/server/JsX.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/talkyard/server/JsX.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/talkyard/server/JsX.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/talkyard/server/JsX.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -667,13 +667,13 @@ object JsX {\n   def JsBoolOrNull(value: Option[Boolean]): JsValue =\n     value.map(JsBoolean).getOrElse(JsNull)\n \n-  def JsNumberOrNull(value: Option[Int]): JsValue =  // RENAME to JsNumOrNull\n+  def JsNumberOrNull(value: Option[Int]): JsValue =  // RENAME to JsNum32OrNull\n     JsI32OrNull(value)\n \n   def JsI32OrNull(value: Opt[i32]): JsValue =  // Scala 3: union types:  i32 | i64  ?\n     value.map(JsNumber(_)).getOrElse(JsNull)\n \n-  def JsLongOrNull(value: Option[Long]): JsValue =\n+  def JsLongOrNull(value: Option[Long]): JsValue =   // RENAME to JsNum64OrNull ?\n     value.map(JsNumber(_)).getOrElse(JsNull)\n \n   def JsFloatOrNull(value: Option[Float]): JsValue ="
    },
    {
      "sha": "cd9f4defdca0795eb266400fb50584e5478ae1ea",
      "filename": "app/talkyard/server/authn/package.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/talkyard/server/authn/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/talkyard/server/authn/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/talkyard/server/authn/package.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -25,6 +25,14 @@ package object authn {   REFACTOR; MOVE // most of this to an object UserInfoPar\n \n   private val logger: p_Logger = TyLogger(\"talkyard.server.authn\")\n \n+  // Sync w ts: LoginReason (but no need to repeat all enum values.)\n+  sealed abstract class LoginReason(val IntVal: i32) { def toInt: i32 = IntVal }\n+  object LoginReason {\n+    case object LoginBecauseNotFound extends LoginReason(21)\n+    case object AuthnRequiredToRead extends LoginReason(22)\n+    case object LoginToAdministrate extends LoginReason(24)\n+  }\n+\n   // Aliases for better readability.\n   type JoinOrLeave = AddOrRemove\n   val Join: Add.type = Add"
    },
    {
      "sha": "a3aba89bbf7e009191dac89fc4686ba8c8def5dc",
      "filename": "app/talkyard/server/sitepatch/SitePatcher.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/talkyard/server/sitepatch/SitePatcher.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/talkyard/server/sitepatch/SitePatcher.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/talkyard/server/sitepatch/SitePatcher.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1107,9 +1107,7 @@ case class SitePatcher(globals: debiki.Globals) {\n     dieIf(siteData.isTestSiteOkDelete && siteIdToOverwrite.exists(_ > MaxTestSiteId),\n       \"TyE5032FPKJ63\", s\"Trying to e2e-test overwrite real site: $anySiteToOverwrite\")\n \n-    val newSite = SiteDao.synchronizeOnManySiteIds(siteIdToOverwrite) {\n-        // Not dangerous: We've locked any site to overwrite, already.\n-        globals.systemDao.dangerous_readWriteTransaction { sysTx =>\n+    val newSite = globals.systemDao.writeTxLockManySites(siteIdToOverwrite) { sysTx =>\n \n       // It's good to delete the old site and create the new one, in the same\n       // transaction — so we won't be left without any site at all, if something\n@@ -1351,7 +1349,7 @@ case class SitePatcher(globals: debiki.Globals) {\n       }\n \n       theNewSite\n-    }}\n+    }\n \n     // If we restored a site, then there're already things in the mem cache and Redis cache,\n     // for the site we're overwriting when restoring. Remove any such stuff — or Talkyard"
    },
    {
      "sha": "878e76b5e4e3f506c5bfedbae30e5b3bba6569d8",
      "filename": "app/views/adminPage.scala.html",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/adminPage.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/adminPage.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/adminPage.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -37,6 +37,6 @@\n <div id=\"esWatchbarColumn\"></div>\n <div id=\"esThisbarColumn\"><div id=\"dw-any-sidebar\"></div></div>\n \n-@tpi.debikiScriptsEndOfBody(loadStaffBundle = true)\n+@tpi.scriptBundlesEndOfBody(loadStaffBundle = true)\n </body>\n </html>"
    },
    {
      "sha": "d8b3e072ac9e039a4d9edbeba52c40aa75787a43",
      "filename": "app/views/authn/authnPage.scala.html",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/authn/authnPage.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/authn/authnPage.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/authn/authnPage.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -15,16 +15,17 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  *@\n \n-@(tpi: debiki.SiteTpi, mode: String, serverAddress: String,\n+@(tpi: debiki.SiteTpi, loginReasonInt: Int, serverAddress: String,\n   returnToUrl: String, isInLoginPopup: Boolean = false, debugMessage: String = \"\")\n \n @authnPageHtmlDoc(tpi, serverAddress, isInLoginPopup = isInLoginPopup) {\n   <!-- views/authn/authnPage.scala.html -->\n   @if(debugMessage.nonEmpty) {\n   <pre style=\"font-size: 14px; margin: 5px; display: inline-block; z-index: 9999; position: relative;\">@debugMessage</pre>\n   }\n-  <script>\n-  debiki2.login.getLoginDialog().openToSignUp('@mode', '@returnToUrl', null @* callback *@,\n+  <script>@* [script_src_self] *@\n+  debiki2.login.getLoginDialog().openToSignUp(\n+      @loginReasonInt, '@returnToUrl', null @* callback *@,\n       true @*preventClose*@ );\n   </script>\n }"
    },
    {
      "sha": "6db6987f82abb65b239ef50bb56c0c93f9636b36",
      "filename": "app/views/authn/sendAuthnResultToOpenerCloseCurWin.scala.html",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/authn/sendAuthnResultToOpenerCloseCurWin.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/authn/sendAuthnResultToOpenerCloseCurWin.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/authn/sendAuthnResultToOpenerCloseCurWin.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -20,6 +20,7 @@\n <!DOCTYPE html>\n <html>\n <head>\n+@* [script_src_self] *@\n <script type='text/javascript'>\n   window.opener.debiki.internal.handleLoginResponse({@* [login_cont_in_opnr] *@\n     @* Typescript interface: LoginPopupLoginResponse  *@"
    },
    {
      "sha": "a97e9c10d69a1a89cfeb703fe8c45eb1db6fd0ec",
      "filename": "app/views/authn/showCreateUserDialogInOpenerCloseCurWin.scala.html",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/authn/showCreateUserDialogInOpenerCloseCurWin.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/authn/showCreateUserDialogInOpenerCloseCurWin.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/authn/showCreateUserDialogInOpenerCloseCurWin.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -17,7 +17,8 @@\n \n @(origNonceBack: String, idpName: String, idpHasVerifiedEmail: Boolean,\n     newUserUsername: String, newUserFullName: String, newUserEmail: String,\n-    authDataCacheKey: String, anyContinueToUrl: Option[String])\n+    authDataCacheKey: String, anyContinueToUrl: Option[String],\n+    winOpenerParamsJsonSt: String = \"\")\n \n @* Closes the Identity Provider authentication popup window, and opens a\n  * create user dialog in the window.opener instead (which should be the\n@@ -36,6 +37,13 @@\n <html>\n <body>\n <!-- views/authn/showCreateUserDialogInOpenerCloseCurWin.scala.html -->\n+@* [script_src_self] *@\n+@* \n+<script id=\"winOpenerParams\" type=\"application/json\">\n+@Html(Encode.forHtmlContent(winOpenerParamsJsonSt))\n+</script>\n+<script type='text/javascript' src='call-win-opener-and-close.js'></script>\n+*@\n <script type='text/javascript'>\n     window.opener.debiki2.morebundle.showCreateUserDialog({\n       origNonceBack: '@origNonceBack',"
    },
    {
      "sha": "8dc58300193228a9827bd194552581adaa4f857c",
      "filename": "app/views/authn/showCreateUserDialogInThisWin.scala.html",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/authn/showCreateUserDialogInThisWin.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/authn/showCreateUserDialogInThisWin.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/authn/showCreateUserDialogInThisWin.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -40,7 +40,7 @@\n \n @authnPageHtmlDoc(tpi, serverAddress) {\n   <!-- views/authn/showCreateUserDialogInThisWin.scala.html -->\n-  <script>\n+  <script>@* [script_src_self] *@\n     debiki2.morebundle.showCreateUserDialog({\n       origNonceBack: '@origNonceBack',\n       idpName: '@idpName',"
    },
    {
      "sha": "54dad8c2c36ebfc443ae14296eeb62d711ba3918",
      "filename": "app/views/createsite/createSitePage.scala.html",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/createsite/createSitePage.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/createsite/createSitePage.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/createsite/createSitePage.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -23,10 +23,7 @@\n <head>\n @tpi.debikiMeta\n @tpi.debikiStyles\n-@tpi.debikiScriptsInHead()\n-<script>\n-eds.baseDomain = '@{ tpi.globals.baseDomainNoPort }';\n-</script>\n+@tpi.debikiScriptsInHead(isCreateSitePage = true)\n </head>\n <body style=\"overflow: auto\">\n <!-- createSitePage.scala.html -->\n@@ -45,6 +42,6 @@\n   <div id=\"dw-react-create-site\"></div>\n </div>\n \n-@tpi.debikiScriptsEndOfBody(loadStaffBundle = true)\n+@tpi.scriptBundlesEndOfBody(loadStaffBundle = true)\n </body>\n </html>"
    },
    {
      "sha": "54ad92d6b31848ab40fafd5b2c1cb521b3d66dbc",
      "filename": "app/views/debikiScriptsEndOfBody.scala.html",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/debikiScriptsEndOfBody.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/debikiScriptsEndOfBody.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/debikiScriptsEndOfBody.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -15,11 +15,13 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  *@\n \n-@(tpi: debiki.SiteTpi, startupCode: String, loadStaffBundle: Boolean)\n+\n+@(tpi: debiki.SiteTpi, loadStaffBundle: Boolean)\n \n @* SECURITY try removing polyfill.io — it's a supply chain attack security risk.\n Now soon mostly gone (feature flag) — only old browser will download a polyfill.\n *@\n+@* [script_src_self] *@\n @if(tpi.noPolyfillDotIo) {\n } else if(tpi.avoidPolyfillDotIo) {\n <script>{\n@@ -62,7 +64,3 @@\n <script src=\"@tpi.assetUrl(s\"editor-bundle.${tpi.minMaxJs}\")\"></script>\n <script src=\"@tpi.assetUrl(s\"staff-bundle.${tpi.minMaxJs}\")\"></script>\n }\n-\n-<script>\n-@startupCode\n-</script>"
    },
    {
      "sha": "409e05e09b844019ee8709eca8962abb97dc613f",
      "filename": "app/views/debikiScriptsHead.scala.html",
      "status": "modified",
      "additions": 5,
      "deletions": 230,
      "changes": 235,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/debikiScriptsHead.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/debikiScriptsHead.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/debikiScriptsHead.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1,5 +1,5 @@\n @**\n- * Copyright (c) 2013-2019 Kaj Magnus Lindberg\n+ * Copyright (c) 2013-2020 Kaj Magnus Lindberg\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU Affero General Public License as\n@@ -15,45 +15,10 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  *@\n \n-@(tpi: debiki.SiteTpi, siteId: Int, isInLoginWindow: Boolean, isInLoginPopup: Boolean,\n-  isAdminApp: Boolean, reactStoreSafeJsonString: String, minMaxJs: String, minMaxCss: String)\n+@(tpi: debiki.SiteTpi, safeStaticJsonSt: String, reactStoreSafeJsonString: String)\n \n-@import tpi.globals\n-@import com.debiki.core.PageType.InfoPageMaxId\n-@import com.debiki.core.PageType.EmbeddedComments\n @import org.owasp.encoder.Encode\n \n-@discussionIdOrUndefined = @{\n-  tpi.anyDiscussionId.map(id => s\"'${ Encode.forJavaScript(id) }'\") getOrElse \"undefined\"\n-}\n-\n-@lazyCreatePageInCatId = @{\n-  tpi.lazyCreatePageInCatId.map((id: Int) => s\"${id}\") getOrElse \"undefined\"\n-}\n-\n-@embeddingUrlOrUndefined = @{\n-  tpi.anyEmbeddingUrl.map(url => s\"'${ Encode.forJavaScript(url) }'\") getOrElse \"undefined\"\n-}\n-\n-@embeddingOriginOrUndefined = @{\n-  tpi.anyEmbeddingOrigin.map(url => s\"'${ Encode.forJavaScript(url) }'\") getOrElse \"undefined\"\n-}\n-\n-@isInLoginWindowBoolStr = @{\n-  if (isInLoginWindow) \"true\" else \"false\"\n-}\n-\n-@isInLoginPopupBoolStr = @{\n-  if (isInLoginPopup) \"true\" else \"false\"\n-}\n-\n-@testNowMs = @{\n-  tpi.anyTestNowMs match {\n-    case None => \"undefined\"\n-    case Some(nowMs) => nowMs\n-  }\n-}\n-\n <script id=\"theVolatileJson\" type=\"application/json\">\n @* Here we place quickly changing data and user specific data. Note that\n this tag is placed before #thePageJson below, so if e.g. a comment contains\n@@ -67,198 +32,8 @@\n @Html(Encode.forHtmlContent(reactStoreSafeJsonString))\n </script>\n \n-@* All Debiki's stuff is placed somewhere inside `debiki`.\n- - The debiki.scriptLoad $.Deferred is resolved later by debiki.js.\n- - Use $.extend in case any window.opener has already specified some\n-   debiki.v0 callbacks. (Example: an admin page specifies an\n-   on-save callback, to be notified when a newly created page is saved.)\n-*@\n-<script>\n-@* This <html> class helps us avoid flashes-of-whatever. (Moderinzr won't run until later.) *@\n-var _doc = document.documentElement;\n-_doc.className += ' js';\n-\n-@* So that we can avoid iOS CSS bugs, and the-iPhone-keyboard-covers-half-the-screen problems. *@\n-var _ios = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n-var _iphone = _ios && /iPhone|iPod/.test(navigator.userAgent);\n-if (_ios) _doc.className += ' ios';@* RENAME to s_ios so can grep & find, & for naming consistency. *@\n-if (_iphone) _doc.className += ' s_iphone';\n-\n-@* See https://stackoverflow.com/a/1912522/694469. The <div> isn't added to the document\n- so no <script> would be executed. — But yes it would indeed?\n- Test this in Dev Tools:\n-   document.createElement('div').innerHTML =\n-      '<img src=http://broken.example.com onerror=alert(1337)>';\n- the image will be requested, that fails, so the script runs.\n- (See http://stackoverflow.com/a/430240/694469)\n- However, we have already escaped the HTML, so any < are already escaped and will be\n- converted back to text only. Search for \"Encode.forHtmlContent\" above.\n- *@\n-function _unencodeHtmlContent(escapedHtml) {\n-  var elem = document.createElement('div');\n-  elem.innerHTML = escapedHtml;\n-  var result = '';\n-  @* Chrome splits innerHTML into many child nodes, each one at most 65536. Whereas\n-  FF creates just one single huge child node. *@\n-  for (var i = 0; i < elem.childNodes.length; ++i) {\n-    result = result + elem.childNodes[i].nodeValue;\n-  }\n-  return result;\n-}\n-\n-var _store = JSON.parse(_unencodeHtmlContent(document.getElementById('thePageJson').text));\n-var _volatileData = JSON.parse(_unencodeHtmlContent(document.getElementById('theVolatileJson').text)) || {};\n-var _me = _volatileData.me || _store.me || {};@* also used when constructing routes [7UKWBA2] *@\n-\n-@* [4GKRW02] *@\n-var _pageId = _store.currentPageId;\n-var _cp = _store.pagesById[_pageId];\n-_store.currentPage = _cp; @* Is set to {} in the embedded editor [2BK4P3R] *@\n-\n-\n-var _isInIframe;\n-try { _isInIframe = window.self !== window.top; }\n-catch (e) { _isInIframe = true; }\n-\n-var _isInEmbCmtsIframe = (_cp || {}).pageRole === @{ EmbeddedComments.toInt } && _isInIframe;\n-\n-@* This css class hides the topbar and sidebars — they'd be confusing in an embedded\n-blog comments discussion section.  COULD RENAME to s_InEmbCmtsIframe ? *@\n-if (_isInEmbCmtsIframe) _doc.className += ' s_InIframe';\n-\n-@* In FF, in an embedded comments iframe, this error might happen, when doing getItem(..):  [7IWD20ZQ1]\n-  \"SecurityError: The operation is insecure\"\n-This happens if the user has disabled cookies from third-party websites: the iframe isn't\n-the website being visited, so cookies are blocked, and apparently FF then also blocks localStorage.\n-See: https://bugzilla.mozilla.org/show_bug.cgi?id=1233964\n-Just ignore localStorage then, not so important anyway. *@\n-function _getLocal(what) {\n-  var result;\n-  try { result = localStorage.getItem(what); }\n-  catch (ignored) {}\n-  return result;\n-}\n-\n-var _hideIntro = _getLocal('hideForumIntro');\n-_store.hideForumIntro = _hideIntro && _hideIntro !== 'false';\n-if (_store.hideForumIntro) {\n-  _doc.className += ' dw-hide-forum-intro';\n-}\n-\n-var _narrow = window.innerWidth < 780 || _ios;@* dupl constant, see ReactStore.ts [5YKT42] *@\n-if (_narrow) {\n-  _doc.className += ' esSidebarsOverlayPage';\n-  _store.shallSidebarsOverlayPage = true;\n-}\n-\n-@* This lets an embedding page, e.g. a blog post, add a CSS class to the HTML tag,\n-so the embedding page can change the colors, e.g. use a dark or a bright theme —\n-which might be per user customizable over at the blog. Won't work in IE: no URL object.\n-COULD use a polyfill: https://github.com/ungap/url-search-params,\n-see: https://stackoverflow.com/a/979995/694469  for more details. *@\n-try {\n-  var _searchParams = new URLSearchParams(location.search);\n-  var _class = _searchParams.get('htmlClass');\n-  if (_class) {\n-    _doc.className += ' ' + _class.replace(/[^a-zA-Z0-9_-]/g, ' ');\n-  }\n-}\n-catch (ignored) {\n-}\n-\n-@* Show the watchbar, unless we're on an info page. But do show it, if it's open already,\n- also on info pages. Otherwise people get confused when they click a recent page in the\n- watchbar, and then it (the watchbar) just disappears (closes). *@\n-var _infoPage = !_cp || !_cp.pageRole || _cp.pageRole <= @InfoPageMaxId;\n-\n-@* The watchbar = important, because quickly sees new direct messages / chat messages, +\n-recent topic list (which is very useful). Try to show it, always, if screen wide enough.\n-iPad pro = 1366 wide; then, always watchbar = OK *@\n-var edAlwaysWatchbar = !_infoPage && window.innerWidth > 1350;\n-\n-var _wbOpen = _getLocal('isWatchbarOpen');\n-var _queryHideWb = location.search.search('&hideWatchbar') >= 0;\n-var _showWb = false;\n-if (_store.isEmbedded) {\n-  @* Don't show the watchbar in the embedded comments iframe. *@\n-}\n-else if (_store.settings.watchbarStartsOpen === false) {\n-  _showWb = _wbOpen === 'true' && !_narrow && !_queryHideWb;\n-}\n-else if ((_wbOpen !== 'false' && !_narrow && !_queryHideWb && (\n-    !_infoPage || _wbOpen === 'true')) || edAlwaysWatchbar) {\n-  _showWb = true;\n-}\n-if (_showWb) {\n-  _doc.className += ' es-watchbar-open';\n-  _store.isWatchbarOpen = true;\n-}\n-\n-@* Hide the contextbar  by default, or new users will be overwhelmed by everything there is\n-to see. But do show the Admin Getting Started Guide (it's in the sidebar [8YKFW32]) for\n-new admins. *@\n-var _cbOpen = _getLocal('isContextbarOpen');\n-var _showAdmGuide = _getLocal('showAdminGuide') !== 'false' && _me.isAdmin &&\n-      !_store.isEmbedded && _cbOpen !== 'false' && !_me.isEmbeddedCommentsSite;\n-if (_showAdmGuide || (!_narrow && _cbOpen === 'true' &&\n-    location.search.search('&hideContextbar') === -1)) {\n-  _doc.className += ' es-pagebar-open';\n-  _store.isContextbarOpen = true;\n-}\n-\n-@* EffectiveDiscussions Static data = 'eds', RENAME to 'tys' (Talkyard static)\n- is included in the initial response from the server.\n- Add an entry in server-vars.d.ts whenever adding sth here. [5JWKA27]\n- CLEAN_UP REFACTOR: Move everything that affects server side rendering to the store instead; [7AKBQ2]\n-  having it here is a bit error prone: need to init when rendering server side too, dupl code.\n- And make eds = undefined when type checking server side, to catch buggy access. *@\n-var eds = {\n-  pubSiteId: '@tpi.pubSiteId',\n-  siteId: @siteId,@* LATER remove in Prod mode [5UKFBQW2] *@\n-  currentVersion: '@tpi.currentVersionString',\n-  cachedVersion: '@tpi.cachedVersionString',\n-  wantsServiceWorker: @{ globals.config.useServiceWorker },\n-  useServiceWorker: @{ globals.config.useServiceWorker } && ('serviceWorker' in navigator),\n-  secure: @{globals.secure},\n-  pageDataFromServer: _store,\n-  volatileDataFromServer: _volatileData,\n-  isDev: @{ if (globals.isDev) \"true\" else \"false\" },\n-  testNowMs: @testNowMs,\n-  minMaxJs: '@minMaxJs',\n-  debugOrigin: '@{tpi.httpsColonOrEmpty}//@tpi.serverAddress',@* [INLTAGORIG] *@\n-  cdnOriginOrEmpty: '@{tpi.cdnOrigin getOrElse \"\"}',\n-  cdnOrServerOrigin: '@tpi.cdnOrServerOrigin',@* for admin page embedded comments code *@\n-  isIos: _ios,\n-  isInLoginWindow: @isInLoginWindowBoolStr,\n-  isInLoginPopup: @isInLoginPopupBoolStr,\n-  isInIframe: _isInIframe,\n-  isInEmbeddedCommentsIframe: _isInEmbCmtsIframe,\n-  isInAdminArea: @{ if (isAdminApp) \"true\" else \"false\" },\n-  isRtl: @{ if (tpi.isRtlLanguage) \"true\" else \"false\" },\n-  embeddingOrigin: @Html(embeddingOriginOrUndefined),\n-  embeddingUrl: @Html(embeddingUrlOrUndefined),\n-  embeddedPageId: _isInIframe ? _pageId : undefined,\n-  embeddedPageAltId: @Html(discussionIdOrUndefined),\n-  lazyCreatePageInCatId: @Html(lazyCreatePageInCatId),\n-  assetUrlPrefix: '@tpi.assetUrlPrefix',\n-  uploadsUrlPrefixCommonmark: '@tpi.uploadsUrlPrefix',\n-  isTestSite: @{ tpi.site.isTestSite.toString },\n-  loadGlobalAdminScript: @{ tpi.globals.loadGlobalAdminScript.toString },\n-  loadGlobalStaffScript: @{ tpi.globals.loadGlobalStaffScript.toString },\n-  mainWorkUntilSecs: @{ tpi.globals.mainWorkUntilSecs getOrElse 0 }\n-};\n-\n-@* Backw compat CLEAN_UP convert old js code in these 'namespaces' to Typescript instead [4KSWPY]\n-  RENAME to tyd (\"Talkyard Dynamic\" things, like is-sth-ready promises?, remove 'internal' and 'v0' *@\n-var debiki = { internal: {}, v0: { util: {}} };\n-\n-@* Talkyard per page load session data (if we avoid cookies). [NOCOOKIES]   rename to  tyd?  see above *@\n-var typs = {\n-  xsrfTokenIfNoCookies: _volatileData.xsrfTokenIfNoCookies,\n-  canUseCookies: navigator.cookieEnabled\n-};\n-\n-@* API, for custom scripts, e.g. MathJax. Type declaration in model.ts [5ABJH72]. *@\n-var talkyard = {};\n+<script id=\"theStaticJson\" type=\"application/json\">\n+@Html(Encode.forHtmlContent(safeStaticJsonSt))\n </script>\n \n+<script src=\"@tpi.assetUrl(s\"head-bundle.${tpi.minMaxJs}\")\"></script>"
    },
    {
      "sha": "df4a93ac46f87b657c10b7d491d3a47aea8881a7",
      "filename": "app/views/debikiStyles.scala.html",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/debikiStyles.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/debikiStyles.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/debikiStyles.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -29,8 +29,8 @@\n en_US letters anyway.\n Sync with font weights [sync_fonts] so we're preloading the correct files.\n *@\n-<link rel=\"preload\" href=\"@tpi.fontUrl(\"open-sans-v1/files/open-sans-latin-400-normal.woff2\")\" as=\"font\" type=\"font/woff2\" crossorigin>\n-<link rel=\"preload\" href=\"@tpi.fontUrl(\"open-sans-v1/files/open-sans-latin-600-normal.woff2\")\" as=\"font\" type=\"font/woff2\" crossorigin>\n-<link rel=\"preload\" href=\"@tpi.fontUrl(\"open-sans-v1/files/open-sans-latin-400-italic.woff2\")\" as=\"font\" type=\"font/woff2\" crossorigin>\n-<link rel=\"stylesheet\" href=\"@tpi.fontUrl(s\"open-sans-v1/open-sans.${tpi.minMaxCss}\")\"/>\n+<link rel=\"preload\" href=\"@tpi.fontUrl(\"open-sans-v2/files/open-sans-latin-400-normal.woff2\")\" as=\"font\" type=\"font/woff2\" crossorigin>\n+<link rel=\"preload\" href=\"@tpi.fontUrl(\"open-sans-v2/files/open-sans-latin-600-normal.woff2\")\" as=\"font\" type=\"font/woff2\" crossorigin>\n+<link rel=\"preload\" href=\"@tpi.fontUrl(\"open-sans-v2/files/open-sans-latin-400-italic.woff2\")\" as=\"font\" type=\"font/woff2\" crossorigin>\n+<link rel=\"stylesheet\" href=\"@tpi.fontUrl(s\"open-sans-v2/open-sans.${tpi.minMaxCss}\")\"/>\n "
    },
    {
      "sha": "9f18e2da54fd3682e5895e90a649284fe0633d3f",
      "filename": "app/views/embeddedEditor.scala.html",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/embeddedEditor.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/embeddedEditor.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/embeddedEditor.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -17,29 +17,27 @@\n \n @(tpi: debiki.EditPageTpi)\n \n-@import org.owasp.encoder.Encode\n-\n-@embeddedPageIdOrUndefined = @{\n-  tpi.anyEmbeddedPageId.map(id => s\"'${ Encode.forJavaScript(id) }'\") getOrElse \"undefined\"\n-}\n \n <html class=\"DW dw-pri dw-embedded-editor\">\n <head>\n @tpi.debikiMeta\n @tpi.debikiStyles\n @tpi.stylesheetBundle(\"styles.css\")\n-@tpi.debikiScriptsInHead()\n+@tpi.debikiScriptsInHead(isInEmbeddedEditor = true, anyEmbeddedPageId = tpi.anyEmbeddedPageId)\n+@* [script_src_self]\n <script>\n eds.isInEmbeddedEditor = true;\n eds.isInEmbeddedCommentsIframe = false;\n-eds.embeddedPageId = @Html(embeddedPageIdOrUndefined);\n-_store.currentPage = {}; @* Avoids null errors when editor accesses the current page. [2BK4P3R] *@\n-_store.me = _volatileData.me;\n+eds.embeddedPageId = @Html(embeddedPageIdOrUndefined);    [6932867RMS]\n+  was: tpi.anyEmbeddedPageId.map(id => s\"'${ Encode.forJavaScript(id) }'\") getOrElse \"undefined\"\n+_store.currentPage = {};    Avoids null errors when editor accesses the current page. [2BK4P3R]\n+_store.me = _volatileData.me;   [603WMSRKD3]\n </script>\n+*@\n </head>\n <body>\n   <!-- embeddedEditor.scala.html -->\n   <div id=\"dw-editor\"></div>\n-  @tpi.debikiScriptsEndOfBodyNoStartupCode\n+  @tpi.scriptBundlesEndOfBody()\n </body>\n </html>"
    },
    {
      "sha": "32feabee256c519ec9f64da01e421085d4f56c74",
      "filename": "app/views/resetpassword/chooseNewPassword.scala.html",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/resetpassword/chooseNewPassword.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/resetpassword/chooseNewPassword.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/resetpassword/chooseNewPassword.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -23,7 +23,7 @@\n <head>\n @tpi.debikiMeta\n @tpi.debikiStyles\n-@tpi.debikiScriptsInHead()\n+@tpi.debikiScriptsInHead(resetPasswordPageData = Some((user, anyResetPasswordEmailId)))\n </head>\n <body>\n <!-- chooseNewPassword.scala.html -->\n@@ -35,7 +35,7 @@ <h1>Choose New Password</h1>\n   <div id=\"dw-react-new-password\"></div>\n </div>\n \n-<script>\n+@* <script>[script_src_self]\n var newPasswordData = {\n   fullName: '@(user.fullName.getOrElse(\"\"))',\n   username: '@(user.theUsername)',\n@@ -45,5 +45,8 @@ <h1>Choose New Password</h1>\n };\n </script>\n @tpi.debikiScriptsEndOfBodyCustomStartupCode(\"debiki2.login.renderNewPasswordPage();\")\n+*@\n+\n+@tpi.scriptBundlesEndOfBody()\n </body>\n </html>"
    },
    {
      "sha": "e0955324d3c921ca06b8d3fd01a35678d9e52805",
      "filename": "app/views/specialpages/createSomethingHerePage.scala.html",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/specialpages/createSomethingHerePage.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/specialpages/createSomethingHerePage.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/specialpages/createSomethingHerePage.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -34,6 +34,6 @@\n     <div id=\"dw-non-existing-page\"></div>\n </div>\n \n-@tpi.debikiScriptsEndOfBody()\n+@tpi.scriptBundlesEndOfBody()\n </body>\n </html>"
    },
    {
      "sha": "b019c65029e5cdf778510700e262b3fd5fb56153",
      "filename": "app/views/templates/wrapper.scala.html",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/templates/wrapper.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/app/views/templates/wrapper.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/templates/wrapper.scala.html?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -59,7 +59,7 @@\n <div id=\"esWatchbarColumn\"></div>\n <div id=\"esThisbarColumn\"><div id=\"dw-any-sidebar\"></div></div>\n \n-@tpi.debikiScriptsEndOfBody()\n+@tpi.scriptBundlesEndOfBody()\n @Html(tpi.siteSettings.headScriptsHtml)\n @tpi.anyScriptsBundle()\n @Html(tpi.siteSettings.endOfBodyHtml)"
    },
    {
      "sha": "a5791c20e991a8e4cc544c33cf681f76cd425181",
      "filename": "client/app-editor/editor-prelude.editor.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-editor/editor-prelude.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-editor/editor-prelude.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-editor/editor-prelude.editor.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1,4 +1,4 @@\n-/// <reference path=\"../app-slim/server-vars.d.ts\" />\n+/// <reference path=\"../app-slim/server-vars.ts\" />\n /// <reference path=\"../app-slim/translations.d.ts\" />\n /// <reference path=\"../app-slim/slim-bundle.d.ts\" />\n /// <reference path=\"../app-more/more-bundle-already-loaded.d.ts\" />\n\\ No newline at end of file"
    },
    {
      "sha": "0723d45b6883c9197f7a4d3fdd1a5d482bdb9c42",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-editor/editor/editor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-editor/editor/editor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-editor/editor/editor.editor.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -381,12 +381,13 @@ export const Editor = createFactory<any, EditorState>({\n       // '**' can mean all allowed, for backw compat with old sites\n       // that don't expect any upload file type restrictions.\n       // ('*' would be files with no suffix (no dot) at all,\n-      // and '*.*' would be whatever with just one dot?\n+      // and '*.*' would be whatever with just one dot?  [tyglobs]\n       // and '**.*' would be whatever with >= 1 dot?)\n       if (!_.includes(me.effAlwUplExts, '**')) {\n         const dotParts = file.name.split('.');\n         const ext = dotParts.length >= 2 ? dotParts[dotParts.length - 1] : '';\n-        const isOk = _.includes(me.effAlwUplExts, ext);\n+        const extLowercase = ext.toLowerCase();\n+        const isOk = _.includes(me.effAlwUplExts, extLowercase);\n         if (!isOk) {\n           util.openDefaultStupidDialog({\n             dialogClassName: 's_UplErrD e_BadUplExt',"
    },
    {
      "sha": "47e5fc115803e5fa64badb0588285955341a94db",
      "filename": "client/app-editor/editor/link-previews-markdown-it-plugin.editor.ts",
      "status": "modified",
      "additions": 161,
      "deletions": 11,
      "changes": 172,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-editor/editor/link-previews-markdown-it-plugin.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-editor/editor/link-previews-markdown-it-plugin.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-editor/editor/link-previews-markdown-it-plugin.editor.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -15,10 +15,151 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-// NEXT seems ok simple to create an IntLnRndr for internal link titles?\n-// And [[wiki style]] links and later #[tags]?  Check out TiddlyWiki?\n+// Later: [[wiki style]] links and later #[tags]?  Check out TiddlyWiki?  [wiki_links]\n \n \n+// Relevant docs:\n+// - How Markdown-it works\n+//   https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md\n+// - How to replace part of text token with link?\n+//   https://github.com/markdown-it/markdown-it/blob/master/docs/development.md#how-to-replace-part-of-text-token-with-link\n+// - A simple way to replace link text: Example 2\n+//   https://github.com/markdown-it/markdown-it-for-inline\n+// - Replacing link attributes (but we replace the whole link / link text instead)\n+//   https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md#renderer,\n+//   see e.g. the \"how to add target=\"_blank\" to all links:\" example.\n+\n+\n+interface Token {  // why won't tsconfig types: \"markdown-it\" work?\n+  type: St;\n+  // attrs[ix][0 = AtrNameIx] is the name of attr nr ix, and attrs[ix][1 = AtrValIx]\n+  // is its value.\n+  attrs: [St, St][] | Nl;\n+  attrIndex: (atrName: St) => Nr;\n+  attrPush: (atrNameAndValue: [St, St]) => U;\n+  content;\n+  markup?: St;\n+  tag?: St;\n+  map;\n+  nesting: Nr;\n+  level: Nr;\n+  children;\n+  info?: St;\n+  meta;\n+  block: Bo;\n+  hidden: Bo;\n+}\n+\n+\n+interface BlockLinkPreviewToken extends Token {\n+  link: St;\n+  level: Nr;\n+}\n+\n+\n+// In Markdown-it, an attribute is a two elems array: [attr-name, attr-value].\n+const AtrNameIx = 0;\n+const AtrValIx = 1;\n+\n+\n+// We replace the link-open fn, to show inline link previews.\n+let origLinkOpenRenderFn: (tokens: Token[], idx: Nr, options, env, self) => St;\n+\n+\n+function renderLinkOpen(tokens: Token[], idx: Nr, options, env, self): St {\n+  //console.debug('TOKENS: ' + JSON.stringify(tokens, undefined, 4));\n+\n+  // See the docs: https://github.com/markdown-it/markdown-it-for-inline#use\n+  // example 2, to see how one can replace the text in a link\n+  // — the approach taken below.\n+\n+  // The link-open will get rendered as: <a herf=... >.\n+  const linkOpenToken: Token = tokens[idx];\n+  const classAtrIx = linkOpenToken.attrIndex('class');\n+  const linkHrefAtrIx: Nr = linkOpenToken.attrIndex('href');\n+  const hrefAtr = linkHrefAtrIx >= 0 && linkOpenToken.attrs[linkHrefAtrIx];\n+  const linkUrl = hrefAtr && hrefAtr[AtrValIx];\n+\n+  // The text to show in the <a> tag — typically tne same as the href attr.\n+  // But we want to replace it with the title of the linked page.\n+  const textToken: Token | U = tokens[idx + 1];\n+\n+  // Will appear as: </a>.\n+  const linkCloseToken: Token | U = tokens[idx + 2];\n+\n+  // We'll generate previews only for links that don't already have a title\n+  // explicitly specified. E.g.:  \"https://site/some/thing\" or \"www.example.com\",\n+  // but not:  \"[link title](https://url\")  and not:  \"<a href=... >Link Title</a>\"\n+  // (title already specified).\n+  // Apparently Markdown-it sets Token.markup to 'linkify', for such auto-detected\n+  // links (the Markdown-it plugin Linkify-it does this?).\n+  const isAutoLink = linkOpenToken.markup === 'linkify';\n+\n+  if (isAutoLink && linkUrl && textToken?.type === 'text' &&\n+        linkCloseToken?.type === 'link_close') {\n+    const serverRenderer = debiki.internal.serverSideLinkPreviewRenderer;\n+    if (serverRenderer) {\n+      // We're server side. In case the string is a Nashorn ConsString,\n+      // which won't work now when calling back out to Scala/Java code\n+      // — change to a Java string:\n+      const linkJavaSt = String(linkUrl);\n+      const resultJsonSt = serverRenderer.renderAndSanitizeInlineLinkPreview( // [js_scala_interop]\n+              linkJavaSt);\n+      // There were annoying runtime errors when trying to invoke a Scala\n+      // class instance method, so let's just use JSON instead (for now at least).\n+      const result: InlineLinkPreview = JSON.parse(resultJsonSt);\n+      if (result.safeTitleCont) {\n+        textToken.content = result.safeTitleCont;\n+      }\n+      if (result.classAtr) {\n+        if (classAtrIx >= 0) {\n+          const curClass = linkOpenToken.attrs[classAtrIx][AtrValIx];\n+          const newClass = (curClass ? curClass + ' ' : '') + result.classAtr;\n+          linkOpenToken.attrs[classAtrIx][AtrValIx] = newClass;\n+        }\n+        else {\n+          linkOpenToken.attrPush(['class', result.classAtr]);\n+        }\n+      }\n+    }\n+    else {\n+      const randomClass = 'c_LnPv-' + Math.random().toString(36).slice(2);  // [js_rand_val]\n+      const loadingClasses = `icon icon-loading ${randomClass}`;\n+      if (classAtrIx >= 0) {\n+        const curClass = linkOpenToken.attrs[classAtrIx][AtrValIx];\n+        linkOpenToken.attrs[classAtrIx][AtrValIx] = `${curClass} ${loadingClasses}`;\n+      } else {\n+        linkOpenToken.attrPush(['class', loadingClasses]);\n+      }\n+\n+      // console.log(`Fetching page title for: ${linkUrl}`)\n+\n+      debiki2.Server.fetchLinkPreview(linkUrl, true /*inline*/,\n+              function(preview: LinkPreviewResp | Nl) {\n+        const placeholders = debiki2.$all('.' + randomClass);\n+        // The placeholders might have disappeared, if the editor was closed or the\n+        // text deleted, for example.\n+        _.each(placeholders, function(ph: HElm) {\n+          debiki2.$h.removeClasses(ph, loadingClasses);\n+          if (preview) {\n+            if (preview.classAtr) {\n+              debiki2.$h.addClasses(ph, preview.classAtr);\n+            }\n+            if (preview.safeTitleCont) {\n+              ph.innerText = preview.safeTitleCont;\n+            }\n+          }\n+        });\n+      });\n+    }\n+\n+    //console.log('3 tokens: ' +\n+    //      JSON.stringify([linkOpenToken, textToken, linkCloseToken], undefined, 3));\n+  }\n+\n+  return origLinkOpenRenderFn(tokens, idx, options, env, self);\n+};\n+\n const pluginId = 'LnPvRndr';  // means LinkPreviewRenderer\n \n \n@@ -29,7 +170,14 @@ const pluginId = 'LnPvRndr';  // means LinkPreviewRenderer\n  */\n debiki.internal.LinkPreviewMarkdownItPlugin = function(md) {\n   md.block.ruler.before('paragraph', pluginId, tryParseLink);\n-  md.renderer.rules[pluginId] = renderLinkPreview;\n+  md.renderer.rules[pluginId] = renderLinkPreviewBlock;\n+\n+\n+  origLinkOpenRenderFn = md.renderer.rules.link_open ||\n+        function(tokens: Token[], idx: Nr, options, env, self): St {\n+          return self.renderToken(tokens, idx, options);\n+        }\n+  md.renderer.rules.link_open = renderLinkOpen;\n };\n \n \n@@ -62,33 +210,35 @@ function tryParseLink(state, startLineIndex, endLineIndex, whatIsThis) {\n   var link = match[0];\n   state.line += 1;\n \n-  var token = state.push(pluginId, '');\n+  var token = state.push(pluginId, '') as BlockLinkPreviewToken;\n   token.link = link;\n   token.level = state.level;\n   return true;\n }\n \n \n-function renderLinkPreview(tokens, index, options, env, renderer_unused) {\n+function renderLinkPreviewBlock(tokens: BlockLinkPreviewToken[], index: Nr,\n+        options, env, renderer_unused) {\n   var token = tokens[index];\n   var previewHtml;\n   var serverRenderer = debiki.internal.serverSideLinkPreviewRenderer;\n   if (serverRenderer) {\n     // We're server side. In case the string is a Nashorn ConsString,\n     // which won't work now when calling back out to Scala/Java code:\n-    var linkAsJavaString = String(token.link);\n-    previewHtml =\n-          serverRenderer.renderAndSanitizeOnebox(linkAsJavaString); // [js_scala_interop]\n+    const linkJavaSt = String(token.link);\n+    previewHtml = serverRenderer.renderAndSanitizeBlockLinkPreview( // [js_scala_interop]\n+          linkJavaSt);\n   }\n   else {\n     var randomClass = 'c_LnPv-' + Math.random().toString(36).slice(2);  // [js_rand_val]\n-    debiki2.Server.loadOneboxSafeHtml(token.link, function(safeHtml) {\n+    debiki2.Server.fetchLinkPreview(token.link, false /*inline*/,\n+            function(preview: LinkPreviewResp | Nl) {\n       const Bliss: Ay = window['Bliss'];\n \n       function makeReplacement() {\n         let repl;\n-        if (safeHtml) {\n-          repl = debiki2.$h.parseHtml(safeHtml)[0];\n+        if (preview && preview.safeHtml) {\n+          repl = debiki2.$h.parseHtml(preview.safeHtml)[0];\n         }\n         else {\n           // No link preview available; show a plain <a href=...> link instead."
    },
    {
      "sha": "c1ec976ec5874f54c62620aa5e438aaa8e12150a",
      "filename": "client/app-editor/tsconfig.json",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-editor/tsconfig.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-editor/tsconfig.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-editor/tsconfig.json?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -3,7 +3,8 @@\n         \"target\": \"ES5\",\n         \"removeComments\": false,\n         \"lib\": [\"es5\", \"es2015\", \"dom\"],\n-        \"types\": [\"react\", \"react-dom\", \"lodash\", \"core-js\"],\n+        \"types\": [\"react\", \"react-dom\", \"lodash\", \"core-js\", \"markdown-it\"],\n+                  // highlight.js, linkify-it, mdurl\n         \"outFile\": \"editor-typescript.js\",\n         \"sourceMap\": true,\n         \"inlineSources\": true  // include source code in mapping file"
    },
    {
      "sha": "05636646c5f670a00952060318a8d9c939e5e028",
      "filename": "client/app-head/head-bundle.ts",
      "status": "added",
      "additions": 298,
      "deletions": 0,
      "changes": 298,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-head/head-bundle.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-head/head-bundle.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-head/head-bundle.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -0,0 +1,298 @@\n+/**\n+ * Copyright (c) 2013-2020 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+/// <reference path=\"../types-and-const-enums.ts\" />\n+/// <reference path=\"../app-slim/model.ts\" />\n+/// <reference path=\"../app-slim/server-vars.d.ts\" />\n+\n+ /*\n+@(tpi: debiki.SiteTpi, siteId: Int, isInLoginWindow: Boolean, isInLoginPopup: Boolean,\n+  isAdminApp: Boolean, reactStoreSafeJsonString: String, minMaxJs: String, minMaxCss: String)\n+\n+@import tpi.globals\n+@import com.debiki.core.PageType.InfoPageMaxId\n+@import com.debiki.core.PageType.EmbeddedComments\n+@import org.owasp.encoder.Encode\n+\n+@discussionIdOrUndefined = @{\n+  tpi.anyDiscussionId.map(id => s\"'${ Encode.forJavaScript(id) }'\") getOrElse \"undefined\"\n+}\n+\n+@lazyCreatePageInCatId = @{\n+  tpi.lazyCreatePageInCatId.map((id: Int) => s\"${id}\") getOrElse \"undefined\"\n+}\n+\n+@embeddingUrlOrUndefined = @{\n+  tpi.anyEmbeddingUrl.map(url => s\"'${ Encode.forJavaScript(url) }'\") getOrElse \"undefined\"\n+}\n+\n+@embeddingOriginOrUndefined = @{\n+  tpi.anyEmbeddingOrigin.map(url => s\"'${ Encode.forJavaScript(url) }'\") getOrElse \"undefined\"\n+}\n+\n+@isInLoginWindowBoolStr = @{\n+  if (isInLoginWindow) \"true\" else \"false\"\n+}\n+\n+@isInLoginPopupBoolStr = @{\n+  if (isInLoginPopup) \"true\" else \"false\"\n+}\n+\n+@testNowMs = @{\n+  tpi.anyTestNowMs match {\n+    case None => \"undefined\"\n+    case Some(nowMs) => nowMs\n+  }\n+}\n+\n+<script id=\"theVolatileJson\" type=\"application/json\">\n+@* Here we place quickly changing data and user specific data. Note that\n+this tag is placed before #thePageJson below, so if e.g. a comment contains\n+the below magic string then that won't matter because we replace only the very first\n+occurrence of the magic string with volatile + user specific data. [8BKAZ2G] *@\n+@Html(controllers.ViewPageController.HtmlEncodedVolatileJsonMagicString)\n+</script>\n+\n+<script id=\"thePageJson\" type=\"application/json\">\n+@* Play Framework escapes too much (it escapes '\"'), so use @Html and OWASP instead. *@\n+@Html(Encode.forHtmlContent(reactStoreSafeJsonString))\n+</script>\n+\n+@* All Debiki's stuff is placed somewhere inside `debiki`.\n+ - The debiki.scriptLoad $.Deferred is resolved later by debiki.js.\n+ - Use $.extend in case any window.opener has already specified some\n+   debiki.v0 callbacks. (Example: an admin page specifies an\n+   on-save callback, to be notified when a newly created page is saved.)\n+*@\n+<script> */\n+\n+// This <html> class helps us avoid flashes-of-whatever. (Moderinzr won't run until later.)\n+var _doc = document.documentElement;\n+_doc.className += ' js';\n+\n+// So that we can avoid iOS CSS bugs, and the-iPhone-keyboard-covers-half-the-screen problems.\n+var _ios = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n+var _iphone = _ios && /iPhone|iPod/.test(navigator.userAgent);\n+if (_ios) _doc.className += ' ios';  // RENAME to s_ios so can grep & find, & for naming consistency.\n+if (_iphone) _doc.className += ' s_iphone';\n+\n+// See https://stackoverflow.com/a/1912522/694469. The <div> isn't added to the document\n+// so no <script> would be executed. — But yes it would indeed?\n+// Test this in Dev Tools:\n+//   document.createElement('div').innerHTML =\n+//      '<img src=http://broken.example.com onerror=alert(1337)>';\n+// the image will be requested, that fails, so the script runs.\n+// (See http://stackoverflow.com/a/430240/694469)\n+// However, we have already escaped the HTML, so any < are already escaped and will be\n+// converted back to text only. Search for \"Encode.forHtmlContent\" above.\n+//\n+function _unencodeHtmlContent(escapedHtml) {\n+  var elem = document.createElement('div');\n+  elem.innerHTML = escapedHtml;\n+  var result = '';\n+  // Chrome splits innerHTML into many child nodes, each one at most 65536. Whereas\n+  // FF creates just one single huge child node.\n+  for (var i = 0; i < elem.childNodes.length; ++i) {\n+    result = result + elem.childNodes[i].nodeValue;\n+  }\n+  return result;\n+}\n+\n+const pageJsonElm = document.getElementById('thePageJson') as HTMLScriptElement;\n+const volatileJsonElm = document.getElementById('theVolatileJson') as HTMLScriptElement;\n+const staticJsonElm = document.getElementById('theStaticJson') as HTMLScriptElement;\n+\n+var _store: Store = JSON.parse(_unencodeHtmlContent(pageJsonElm.text));\n+var _volatileData = JSON.parse(_unencodeHtmlContent(volatileJsonElm.text)) || {};\n+var eds: ServerVars = JSON.parse(_unencodeHtmlContent(staticJsonElm.text)) || {};\n+\n+var _me = _volatileData.me || _store.me || {}; // also used when constructing routes [7UKWBA2]\n+\n+// [4GKRW02]\n+var _pageId = _store.currentPageId;\n+var _cp = _store.pagesById[_pageId];\n+_store.currentPage = _cp; // Is set to {} in the embedded editor [2BK4P3R]\n+\n+if (eds.isInEmbeddedEditor) {\n+  // This avoids null errors when editor accesses the current page. [2BK4P3R]\n+  _store.currentPage = {} as Page;\n+  // CLEAN_UP: Why this needed? Can remove, or do always? Previously: [603WMSRKD3]\n+  _store.me = _volatileData.me;\n+}\n+\n+\n+var _isInIframe;\n+try { _isInIframe = window.self !== window.top; }\n+catch (e) { _isInIframe = true; }\n+\n+// RENAME to isInEmbComOrEditorIframe\n+var _isInEmbCmtsIframe = (_cp || {}).pageRole === PageRole.EmbeddedComments && _isInIframe;\n+\n+// This css class hides the topbar and sidebars — they'd be confusing in an embedded\n+// blog comments discussion section.  COULD RENAME to s_InEmbCmtsIframe ?\n+if (_isInEmbCmtsIframe) _doc.className += ' s_InIframe';\n+\n+// In FF, in an embedded comments iframe, this error might happen, when doing getItem(..):  [7IWD20ZQ1]\n+// \"SecurityError: The operation is insecure\"\n+// This happens if the user has disabled cookies from third-party websites: the iframe isn't\n+// the website being visited, so cookies are blocked, and apparently FF then also blocks localStorage.\n+// See: https://bugzilla.mozilla.org/show_bug.cgi?id=1233964\n+// Just ignore localStorage then, not so important anyway.\n+function _getLocal(what) {\n+  var result;\n+  try { result = localStorage.getItem(what); }\n+  catch (ignored) {}\n+  return result;\n+}\n+\n+var _hideIntro = _getLocal('hideForumIntro');\n+_store.hideForumIntro = _hideIntro && _hideIntro !== 'false';\n+if (_store.hideForumIntro) {\n+  _doc.className += ' dw-hide-forum-intro';\n+}\n+\n+var _narrow = window.innerWidth < 780 || _ios; // dupl constant, see ReactStore.ts [5YKT42]\n+if (_narrow) {\n+  _doc.className += ' esSidebarsOverlayPage';\n+  _store.shallSidebarsOverlayPage = true;\n+}\n+\n+// This lets an embedding page, e.g. a blog post, add a CSS class to the HTML tag,\n+// so the embedding page can change the colors, e.g. use a dark or a bright theme —\n+// which might be per user customizable over at the blog. Won't work in IE: no URL object.\n+// COULD use a polyfill: https://github.com/ungap/url-search-params,\n+// see: https://stackoverflow.com/a/979995/694469  for more details.\n+try {\n+  var _searchParams = new URLSearchParams(location.search);\n+  var _class = _searchParams.get('htmlClass');\n+  if (_class) {\n+    _doc.className += ' ' + _class.replace(/[^a-zA-Z0-9_-]/g, ' ');\n+  }\n+}\n+catch (ignored) {\n+}\n+\n+// Show the watchbar, unless we're on an info page. But do show it, if it's open already,\n+// also on info pages. Otherwise people get confused when they click a recent page in the\n+// watchbar, and then it (the watchbar) just disappears (closes).\n+var _infoPage = !_cp || !_cp.pageRole || _cp.pageRole <= PageRole.InfoPageMaxId;\n+\n+// The watchbar = important, because quickly sees new direct messages / chat messages, +\n+// recent topic list (which is very useful). Try to show it, always, if screen wide enough.\n+// iPad pro = 1366 wide; then, always watchbar = OK\n+var edAlwaysWatchbar = !_infoPage && window.innerWidth > 1350;\n+\n+var _wbOpen = _getLocal('isWatchbarOpen');\n+var _queryHideWb = location.search.search('&hideWatchbar') >= 0;\n+var _showWb = false;\n+if (_store.isEmbedded) {\n+  // Don't show the watchbar in the embedded comments iframe.\n+}\n+else if (_store.settings.watchbarStartsOpen === false) {\n+  _showWb = _wbOpen === 'true' && !_narrow && !_queryHideWb;\n+}\n+else if ((_wbOpen !== 'false' && !_narrow && !_queryHideWb && (\n+    !_infoPage || _wbOpen === 'true')) || edAlwaysWatchbar) {\n+  _showWb = true;\n+}\n+if (_showWb) {\n+  _doc.className += ' es-watchbar-open';\n+  _store.isWatchbarOpen = true;\n+}\n+\n+// Hide the contextbar  by default, or new users will be overwhelmed by everything there is\n+// to see. But do show the Admin Getting Started Guide (it's in the sidebar [8YKFW32]) for\n+// new admins.\n+var _cbOpen = _getLocal('isContextbarOpen');\n+var _showAdmGuide = _getLocal('showAdminGuide') !== 'false' && _me.isAdmin &&\n+      !_store.isEmbedded && _cbOpen !== 'false' && !_me.isEmbeddedCommentsSite;\n+if (_showAdmGuide || (!_narrow && _cbOpen === 'true' &&\n+    location.search.search('&hideContextbar') === -1)) {\n+  _doc.className += ' es-pagebar-open';\n+  _store.isContextbarOpen = true;\n+}\n+\n+// EffectiveDiscussions Static data = 'eds', RENAME to 'tys' (Talkyard static)\n+// is included in the initial response from the server.\n+// Add an entry in server-vars.d.ts whenever adding sth here. [5JWKA27]\n+// CLEAN_UP REFACTOR: Move everything that affects server side rendering to the store instead; [7AKBQ2]\n+// having it here is a bit error prone: need to init when rendering server side too, dupl code.\n+// And make eds = undefined when type checking server side, to catch buggy access.\n+//\n+eds.pubSiteId = _store.pubSiteId; // '@tpi.pubSiteId',\n+  /*\n+  siteId: @siteId, // LATER remove in Prod mode [5UKFBQW2]\n+  currentVersion: '@tpi.currentVersionString',\n+  cachedVersion: '@tpi.cachedVersionString',\n+  wantsServiceWorker: @{ globals.config.useServiceWorker },\n+  */\n+eds.useServiceWorker = eds.wantsServiceWorker && ('serviceWorker' in navigator);\n+  /*\n+  secure: @{globals.secure},\n+  */\n+eds.pageDataFromServer = _store;\n+eds.volatileDataFromServer = _volatileData;\n+  /*\n+  isDev: @{ if (globals.isDev) \"true\" else \"false\" },\n+  testNowMs: @testNowMs,\n+  minMaxJs: '@minMaxJs',\n+  debugOrigin: '@{tpi.httpsColonOrEmpty}//@tpi.serverAddress', // [INLTAGORIG]\n+  cdnOriginOrEmpty: '@{tpi.cdnOrigin getOrElse \"\"}',\n+  cdnOrServerOrigin: '@tpi.cdnOrServerOrigin', // for admin page embedded comments code\n+  */\n+eds.isIos = _ios;\n+  /*\n+  isInLoginWindow: @isInLoginWindowBoolStr,\n+  isInLoginPopup: @isInLoginPopupBoolStr,\n+  */\n+eds.isInIframe = _isInIframe;\n+eds.isInEmbeddedCommentsIframe = _isInEmbCmtsIframe && !eds.isInEmbeddedEditor;\n+  /*\n+  isInAdminArea: @{ if (isAdminApp) \"true\" else \"false\" },\n+  isRtl: @{ if (tpi.isRtlLanguage) \"true\" else \"false\" },\n+  embeddingOrigin: @Html(embeddingOriginOrUndefined),\n+  embeddingUrl: @Html(embeddingUrlOrUndefined),\n+  */\n+if (!eds.isInEmbeddedEditor) {  // [6932867RMS]\n+  // CLEAN_UP use sth like:  getMainWin().theStore.currentPageId  instead?\n+  eds.embeddedPageId = _isInIframe ? _pageId : undefined;\n+}\n+// Else: Already incl in eds, leave as is.\n+  /*\n+  embeddedPageAltId: @Html(discussionIdOrUndefined),\n+  lazyCreatePageInCatId: @Html(lazyCreatePageInCatId),\n+  assetUrlPrefix: '@tpi.assetUrlPrefix',\n+  uploadsUrlPrefixCommonmark: '@tpi.uploadsUrlPrefix',\n+  isTestSite: @{ tpi.site.isTestSite.toString },\n+  loadGlobalAdminScript: @{ tpi.globals.loadGlobalAdminScript.toString },\n+  loadGlobalStaffScript: @{ tpi.globals.loadGlobalStaffScript.toString },\n+  mainWorkUntilSecs: @{ tpi.globals.mainWorkUntilSecs getOrElse 0 }\n+  */\n+\n+\n+// Backw compat CLEAN_UP convert old js code in these 'namespaces' to Typescript instead [4KSWPY]\n+// RENAME to tyd (\"Talkyard Dynamic\" things, like is-sth-ready promises?, remove 'internal' and 'v0'\n+var debiki = { internal: {}, v0: { util: {}} };\n+\n+// Talkyard per page load session data (if we avoid cookies). [NOCOOKIES]   rename to  tyd?  see above *@\n+var typs: PageSession = {\n+  xsrfTokenIfNoCookies: _volatileData.xsrfTokenIfNoCookies,\n+  canUseCookies: navigator.cookieEnabled\n+};\n+\n+// API, for custom scripts, e.g. MathJax. Type declaration in model.ts [5ABJH72].\n+var talkyard = {};"
    },
    {
      "sha": "a0859c678c1caa3a8b0f576ea1137f6a6200cb2f",
      "filename": "client/app-head/tsconfig.json",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-head/tsconfig.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-head/tsconfig.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-head/tsconfig.json?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -0,0 +1,18 @@\n+{\n+    \"compilerOptions\": {\n+        \"target\": \"ES5\",\n+        \"removeComments\": false,\n+        \"lib\": [\"es5\", \"es2015\", \"dom\"],\n+        \"types\": [\"core-js\"],\n+        \"outFile\": \"head-typescript.js\",\n+        \"sourceMap\": true,\n+        \"inlineSources\": true  // include source code in mapping file\n+    },\n+    \"include\": [\n+        \"**/*.ts\"\n+    ],\n+    \"exclude\": [\n+        \"**/*.spec.ts\",\n+        \"**/*.test.ts\"\n+    ]\n+}"
    },
    {
      "sha": "67729e32ac1578774bb6aa0c98d3bb8ff86c074e",
      "filename": "client/app-more/forum/create-category-dialog.more.ts",
      "status": "modified",
      "additions": 37,
      "deletions": 13,
      "changes": 50,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/forum/create-category-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/forum/create-category-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/forum/create-category-dialog.more.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -506,7 +506,10 @@ const CategorySecurity = createClassAndFactory({\n function PermissionItemWithKey(allPerms: PermsOnPage[], thisPerm: PermsOnPage, forGroup: Group,\n       allGroups: Group[], updatePermissions) {\n \n-  const selectGroupDropdown = SelectGroupDropdown({ groups: allGroups, selectedGroup: forGroup,\n+  const groupIdsInUse: PatId[] = allPerms.map(p => p.forPeopleId);\n+\n+  const selectGroupDropdown = SelectGroupDropdown({ groups: allGroups,\n+      selectedGroup: forGroup, groupIdsInUse,\n       onSelect: (peopleId: PeopleId) => {\n         const allPerms2: PermsOnPage[] = allPerms.slice(); // clones\n         const thisPerm2: PermsOnPage = { ...thisPerm, forPeopleId: peopleId };\n@@ -608,35 +611,54 @@ function PermissionItemWithKey(allPerms: PermsOnPage[], thisPerm: PermsOnPage, f\n }\n \n \n+interface SelectGroupDropdownProps {\n+  groups: Group[];\n+  selectedGroup?: Group;\n+  groupIdsInUse: PatId[];\n+  onSelect;\n+}\n+\n+\n+interface SelectGroupDropdownState {\n+  open?: Bo;\n+  windowWidth?: Nr;\n+  buttonRect?: Rect;\n+}\n+\n+\n const SelectGroupDropdown = createClassAndFactory({\n   displayName: 'SelectGroupDropdown',\n \n   getInitialState: function() {\n-    return { open: false };\n+    return {};\n   },\n \n   open: function() {\n-    this.setState({\n+    const newState: SelectGroupDropdownState = {\n       open: true,\n       windowWidth: window.innerWidth,\n       buttonRect: reactGetRefRect(this.refs.btn),\n-    });\n+    };\n+    this.setState(newState);\n   },\n \n   close: function() {\n-    this.setState({ open: false });\n+    const newState: SelectGroupDropdownState = { open: false };\n+    this.setState(newState);\n   },\n \n   onSelect: function(listItem) {\n-    this.props.onSelect(listItem.eventKey);\n+    const props: SelectGroupDropdownProps = this.props;\n+    props.onSelect(listItem.eventKey);\n     this.close();\n   },\n \n   render: function() {\n-    const props = this.props;\n-    const state = this.state;\n+    const props: SelectGroupDropdownProps = this.props;\n+    const state: SelectGroupDropdownState = this.state;\n     const groupsUnsorted: Group[] = props.groups;\n-    const selectedGroup: Group = props.selectedGroup;\n+    const selectedGroup: Group | U = props.selectedGroup;\n+    const selectedGroupId: PatId = selectedGroup ? selectedGroup.id : NoId;\n \n     // The 'selectedGroup' should be in 'groups'.\n     // @ifdef DEBUG\n@@ -663,18 +685,20 @@ const SelectGroupDropdown = createClassAndFactory({\n     const groupsSorted = _.sortBy(groupsUnsorted, g => g.id);\n \n     const listItems = groupsSorted.map((group: Group) => {\n+      const canSelect = group.id === selectedGroupId ||\n+              props.groupIdsInUse.indexOf(group.id) === -1;\n       return ExplainingListItem({ onSelect: this.onSelect,\n-        activeEventKey: selectedGroup ? selectedGroup.id : NoId, eventKey: group.id, key: group.id,\n-        title: nameOf(group) });\n+        activeEventKey: selectedGroupId, eventKey: group.id, key: group.id,\n+        title: nameOf(group), disabled: !canSelect });\n     });\n \n     listItems.unshift(ExplainingListItem({ onSelect: this.onSelect,\n-        activeEventKey: selectedGroup ? selectedGroup.id : NoId, eventKey: NoId, key: NoId,\n+        activeEventKey: selectedGroupId, eventKey: NoId, key: NoId,\n         title: \"Select group ...\" }));\n \n     const dropdownModal =\n       DropdownModal({ show: state.open, onHide: this.close, showCloseButton: true,\n-          atRect: this.state.buttonRect, windowWidth: this.state.windowWidth },\n+          atRect: state.buttonRect, windowWidth: state.windowWidth },\n         r.ul({},\n           listItems));\n "
    },
    {
      "sha": "95ed449e7b25c604b2dc0ffe1994b6459bb321b5",
      "filename": "client/app-more/login/create-user-dialog.more.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 24,
      "changes": 31,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/login/create-user-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/login/create-user-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/login/create-user-dialog.more.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -97,7 +97,7 @@ interface CreateUserPostData extends CreateUserParams {\n  * and via a link in that email.\n  */\n debiki.internal._showCreateUserDialog = function(params: CreateUserParams) {\n-  const loginDialog = login.getLoginDialog();\n+  const loginDialog = debiki2.login.getLoginDialog();\n   const [anyAfterLoginCallback, anyReturnToUrl] = loginDialog.getDoAfter();\n   // In case any login dialog is still open: (this resets the after-login-callback\n   // copied above, and return-to-url)\n@@ -143,8 +143,11 @@ const CreateUserDialog = createClassAndFactory({\n         closeDialog: this.close,\n       };\n       if (store.siteStatus === SiteStatus.NoAdmin) {\n-        childProps.loginReason = LoginReason.BecomeAdmin;\n+        childProps.loginReason = LoginReason.BecomeOwner;\n       }\n+      // @ifdef DEBUG\n+      dieIf(childProps.isForGuest, 'TyE2603MRJ85');\n+      // @endif\n       content = CreateUserDialogContent(childProps);\n     }\n \n@@ -284,7 +287,7 @@ export var CreateUserDialogContent = createClassAndFactory({\n     const props: CreateUserDialogContentProps = this.props;\n     const returnToUrl: St | U = props.anyReturnToUrl;\n     const postData: CreateUserPostData = { ...this.state.userData, returnToUrl };\n-    waitUntilAcceptsTerms(props.store, props.loginReason === LoginReason.BecomeAdmin, () => {\n+    waitUntilAcceptsTerms(props.store, props.loginReason === LoginReason.BecomeOwner, () => {\n       if (props.authDataCacheKey) { // [4WHKTP06]\n         postData.authDataCacheKey = props.authDataCacheKey;\n         Server.createOauthUser(postData, this.handleCreateUserResponse, this.handleErrorResponse);\n@@ -314,7 +317,7 @@ export var CreateUserDialogContent = createClassAndFactory({\n       // directly without reading the message about checking their email inbox. Then\n       // they don't know what to do, and are stuck.\n       // (Probably this email verif step needs to be totally removed. [SIMPLNEWSITE]\n-      const mayCloseDialog = props.loginReason !== LoginReason.BecomeAdmin;\n+      const mayCloseDialog = props.loginReason !== LoginReason.BecomeOwner;\n       getAddressVerificationEmailSentDialog().sayVerifEmailSent(mayCloseDialog); // [new_user_verif_eml]\n     }\n     else if (props.afterLoginCallback || (\n@@ -416,24 +419,6 @@ export var CreateUserDialogContent = createClassAndFactory({\n         id: 'e2eFullName', defaultValue: props.fullName, tabIndex: 1,\n         onChangeValueOk: (value, isOk) => this.updateValueOk('fullName', value, isOk) });\n \n-    // Show an \"Or create a real account with username and password\" button.\n-    const orCreateAccountMaybe = !isForGuest ? null :\n-        r.div({ className: 's_LD_OrCreateAccount' },\n-          t.cud.OrCreateAcct_1,\n-          r.a({ className: 's_LD_CreateAccount',\n-                onClick: props.switchBetweenGuestAndPassword },\n-            t.cud.OrCreateAcct_2),\n-          t.cud.OrCreateAcct_3,\n-          r.code({}, t.cud.OrCreateAcct_4),\n-          t.cud.OrCreateAcct_5);\n-\n-    // For now, skip making it possible to change from create-account to login-as-guest.\n-    // People wouldn't find that text & button anyway? & in embedded comments, if guest\n-    // login is enabled, it's the default way to signup anyway, no need to switch. [8UKBTQ2]\n-     /* const orLoginAsGuestMaybe\n-          = isForGuest || props.loginReason === LoginReason.LoginToChat ? null :\n-        r.div({},  ... switch to guest login text & button ...); */\n-\n     const disableSubmit = _.includes(_.values(this.state.okayStatuses), false);\n \n     return (\n@@ -446,8 +431,6 @@ export var CreateUserDialogContent = createClassAndFactory({\n         // the full-name-input was a password verification field.\n         !isForGuest ? fullNameInput : null,\n         passwordInputMaybe,\n-        orCreateAccountMaybe,\n-        //orLoginAsGuestMaybe,\n         PrimaryButton({ onClick: this.doCreateUser, disabled: disableSubmit, id: 'e2eSubmit',\n             tabIndex: 2 }, isForGuest ? t.Submit : t.cud.CreateAccount)));\n   }"
    },
    {
      "sha": "c6ac523dc12f52401d0c4a17b52c9d76d3a77c4c",
      "filename": "client/app-more/login/login-dialog.more.ts",
      "status": "modified",
      "additions": 151,
      "deletions": 86,
      "changes": 237,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/login/login-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/login/login-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/login/login-dialog.more.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -35,16 +35,6 @@ const ModalTitle = rb.ModalTitle;\n const FullNameInput = util.FullNameInput;\n const EmailInput = util.EmailInput;\n \n-/* All login reasons? — no, there're more now, right.\n-  'LoginBecomeAdmin'\n-  'LoginAsAdmin'\n-  'LoginToAuthenticate'\n-  'LoginToSubmit'\n-  'LoginToComment'\n-  LoginReason.PostEmbeddedComment\n-  'LoginToLogin'\n-  'LoginToCreateTopic'\n-*/\n \n let loginDialog;\n \n@@ -57,22 +47,40 @@ export function getLoginDialog() {   // also called from Scala template\n }\n \n \n+/// One can click buttons to switch the authn dialog to a login dialog ('2LgI'),\n+/// a \"just type your name\" guest ('2Gst') login dialog (not always enabled),\n+/// or a create-account Sign Up dialog ('2SgU').\n+///\n+type SwitchAuthnDialogTo = '2LgI' | '2Gst' | '2SgU';\n+\n+\n+interface LoginDialogState {\n+  store: Store;\n+  isOpen?: Bo;\n+  preventClose?: Bo;\n+  isSignUp?: Bo;\n+  isForGuest?: Bo;\n+  loginReason?: LoginReason;\n+  anyReturnToUrl?: St;\n+  afterLoginCallback?;\n+  childDialog?;\n+  isLoggedIn?: Bo;\n+}\n+\n+\n const LoginDialog = createClassAndFactory({\n   displayName: 'LoginDialog',\n   mixins: [debiki2.StoreListenerMixin],\n \n-  getInitialState: function () {\n+  getInitialState: function (): LoginDialogState {\n     return {\n-      isOpen: false,\n-      childDialog: null,\n-      logInOrSignUp: null,  // CLEAN_UP REMOVE\n       store: debiki2.ReactStore.allData(),\n     };\n   },\n \n   onChange: function() {\n     const newStore: Store = debiki2.ReactStore.allData();\n-    this.setState({ store: newStore });\n+    this.setState({ store: newStore } as LoginDialogState);\n     const loggedInUser = newStore.me;\n     if (loggedInUser) {\n       // Might have just logged in in another tab. Then cancel any login happening in this tab.\n@@ -81,29 +89,33 @@ const LoginDialog = createClassAndFactory({\n       this.setState({\n         isOpen: false,\n         childDialog: null\n-      });\n+      } as LoginDialogState);\n     }\n   },\n \n-  openToLogIn: function(loginReason: LoginReason | string,\n+  openToLogIn: function(loginReason: LoginReason,\n         anyReturnToUrl?: string, callback?: () => void, preventClose?: boolean) {\n     this.open(false, loginReason, anyReturnToUrl, callback, preventClose);\n   },\n \n   // Called from Scala template.\n-  openToSignUp: function(loginReason: LoginReason | string,\n+  openToSignUp: function(loginReason: LoginReason,\n         anyReturnToUrl?: string, callback?: () => void, preventClose?: boolean) {\n     // CLEAN_UP replace openToLogIn and openToSignUp with just one open(loginReason, ..) that\n     // decides if to log in or sig up? For now:\n-    const reallySignup = loginReason !== 'LoginToAdministrate';\n+    const reallySignup =\n+            loginReason !== LoginReason.LoginToAdministrate &&\n+            loginReason !== LoginReason.LoginToLogin;\n+            // Hmm some enum vals missing .. Not important.\n     this.open(reallySignup, loginReason, anyReturnToUrl, callback, preventClose);\n   },\n \n-  open: function(isSignUp: boolean, loginReason: LoginReason | string,\n+  open: function(isSignUp: boolean, loginReason: LoginReason,\n         anyReturnToUrl?: string, callback?: () => void, preventClose?: boolean) {\n \n     dieIf(isInSomeEmbCommentsIframe(), 'Login dialog in some emb cmnts iframe [EdE5KER2]');\n-    const store: Store = this.state.store;\n+    const state: LoginDialogState = this.state;\n+    const store: Store = state.store;\n \n     // The login reason might be a stringified number from the url, so try to convert to enum.\n     // Some login reasons are enums, others are strings. CLEAN_UP: Change the strings to enums.\n@@ -142,7 +154,7 @@ const LoginDialog = createClassAndFactory({\n       isSignUp = false;\n \n     // When logging in to an embedded comments discussion, if guest login is enabled,\n-    // then assume that's what most people want to use. [8UKBTQ2]\n+    // then assume that's what most people want to use.\n     const isForGuest = isSignUp && loginReason === LoginReason.PostEmbeddedComment &&\n         store.settings.allowGuestLogin;\n \n@@ -153,25 +165,30 @@ const LoginDialog = createClassAndFactory({\n         loginReason,\n         afterLoginCallback: callback,\n         anyReturnToUrl,\n-        preventClose: preventClose || loginReason === 'LoginToAuthenticate' ||\n-            loginReason === 'LoginToAdministrate',\n+        preventClose: preventClose || loginReason === LoginReason.AuthnRequiredToRead ||\n+            loginReason === LoginReason.LoginToAdministrate,\n         isLoggedIn: !!getSetCookie('dwCoSid'),\n       });\n   },\n \n+\n   /// Returns: [anyAfterLoginCallback, anyReturnToUrl]\n   getDoAfter: function(): [() => U | U, St | U] {\n-    return [this.state.afterLoginCallback, this.state.anyReturnToUrl];\n+    const state: LoginDialogState = this.state;\n+    return [state.afterLoginCallback, state.anyReturnToUrl];\n   },\n \n-  switchBetweenLoginAndSignUp: function() {\n-    // Don't switch back to guest login, after a \"sign up instead\" click\n-    // — that'd be confusing? Guest login is no real signup.\n-    this.setState({ isSignUp: !this.state.isSignUp, isForGuest: false });\n-  },\n \n-  switchBetweenGuestAndPassword: function() {\n-    this.setState({ isForGuest: !this.state.isForGuest });\n+  switchDialog: function(toWhat: SwitchAuthnDialogTo) {\n+    const state: LoginDialogState = this.state;\n+    // @ifdef DEBUG\n+    dieIf(toWhat === '2Gst' && state.isForGuest, 'TyE602MRKD3');\n+    dieIf(toWhat === '2LgI' && !state.isSignUp, 'TyE602MRKD4');\n+    dieIf(toWhat === '2SgU' && state.isSignUp && !state.isForGuest, 'TyE602MRKD5');\n+    // @endif\n+    // Guest \"login\" creates a new account, so it's actually a sign up thing.\n+    const isSignUp = toWhat === '2SgU' || toWhat === '2Gst';\n+    this.setState({ isSignUp, isForGuest: toWhat === '2Gst' });\n   },\n \n   /**\n@@ -207,32 +224,38 @@ const LoginDialog = createClassAndFactory({\n   },\n \n   render: function () {\n-    const state = this.state;\n+    const state: LoginDialogState = this.state;\n     const fade = state.childDialog ? ' dw-modal-fade' : '';\n \n+    /*\n     let title;\n     switch (state.loginReason) {\n-      case 'LoginToAuthenticate':\n+      case LoginReason.AuthnRequiredToRead:\n         title = t.ld.AuthRequired;\n         break;\n       case LoginReason.LoginToLike:\n         title = t.ld.LogInToLike;\n         break;\n       default:\n         title = this.state.isSignUp ? t.ld.CreateAcconut : t.ld.LogIn;\n-    }\n+    } */\n \n     const content = LoginDialogContent({\n-        isSignUp: state.isSignUp, isForGuest: state.isForGuest, loginReason: state.loginReason,\n-        anyReturnToUrl: state.anyReturnToUrl, afterLoginCallback: state.afterLoginCallback,\n+        isSignUp: state.isSignUp,\n+        isForGuest: state.isForGuest,\n+        allowGuestLogin: state.store.settings.allowGuestLogin,\n+        loginReason: state.loginReason,\n+        anyReturnToUrl: state.anyReturnToUrl,\n+        afterLoginCallback: state.afterLoginCallback,\n         setChildDialog: this.setChildDialog,\n-        childDialog: state.childDialog, close: this.close, isLoggedIn: state.isLoggedIn,\n-        switchBetweenLoginAndSignUp: this.switchBetweenLoginAndSignUp,\n-        switchBetweenGuestAndPassword: this.switchBetweenGuestAndPassword,\n-        store: state.store });\n+        childDialog: state.childDialog,\n+        closeDialog: this.close,\n+        isLoggedIn: state.isLoggedIn,\n+        switchDialog: this.switchDialog,\n+        store: state.store } as LoginDialogContentProps);\n \n     /* UX SHOULD show this close [x] in 'content' instead, so can be closed easily.\n-    var modalHeader = state.loginReason === LoginReason.BecomeAdmin\n+    var modalHeader = state.loginReason === LoginReason.BecomeOwner\n       ? null // then there's an instruction text, that's enough\n       : ModalHeader({ closeButton: !state.preventClose },\n           ModalTitle({ id: 'e2eLoginDialogTitle' }, title));\n@@ -253,15 +276,15 @@ const LoginDialog = createClassAndFactory({\n \n interface LoginDialogContentProps {\n   store: Store;\n-  loginReason;\n+  loginReason: LoginReason;\n   anyReturnToUrl?: St;\n   isSignUp: Bo;\n   isLoggedIn: Bo;\n   isForGuest: Bo;\n-  close;\n-  closeDialog;\n+  allowGuestLogin?: Bo;\n+  closeDialog: (_?: 'CloseAllLoginDialogs') => Vo;\n   setChildDialog;\n-  switchBetweenLoginAndSignUp;\n+  switchDialog: (toWhat: SwitchAuthnDialogTo) => Vo;\n }\n \n \n@@ -324,17 +347,20 @@ export const LoginDialogContent = createClassAndFactory({\n     const store: Store = props.store;\n     const loginReason = props.loginReason;\n     const isSignUp = props.isSignUp;\n+    const isLogin = !isSignUp;\n     const settings: SettingsVisibleClientSide = store.settings;\n \n     const closeChildDialog = (closeAll) => {\n       props.setChildDialog(null);\n       if (closeAll === 'CloseAllLoginDialogs') {\n-        props.close();\n+        props.closeDialog();\n       }\n     };\n \n     const childDialogProps = _.clone(props);\n-    childDialogProps.closeDialog = closeChildDialog;  // CLEAN_UP can REMOVE?\n+\n+    // So can close, once authenticated (e.g. after user account created).\n+    childDialogProps.closeDialog = closeChildDialog;\n \n     const [nonce, lastsAcrossReload] = login.getOrCreateAuthnNonce();\n \n@@ -351,7 +377,7 @@ export const LoginDialogContent = createClassAndFactory({\n       };\n     };\n \n-    const isForFirstOwner = loginReason === LoginReason.BecomeAdmin;\n+    const isForFirstOwner = loginReason === LoginReason.BecomeOwner;\n     const becomeOwnerInstructions = !isForFirstOwner ? null :\n         r.div({ className: 'esLoginDlg_becomeAdminInstr' },\n           r.p({},\n@@ -369,7 +395,7 @@ export const LoginDialogContent = createClassAndFactory({\n           LinkButton({ href: location.href.replace(/^http:/, 'https:') },\n             \"Reload as HTTPS\"));\n \n-    const notFound = loginReason === 'LoginBecauseNotFound';\n+    const notFound = loginReason === LoginReason.LoginBecauseNotFound;\n     const notFoundInstructions = !notFound ? null :\n         r.div({ className: 'esLoginDlg_becomeAdminInstr' },\n           r.h1({ className: 's_LD_NotFound_Title' }, t.ld.NotFoundOrPrivate),\n@@ -379,50 +405,82 @@ export const LoginDialogContent = createClassAndFactory({\n             t.ld.ElseGoToHome_1, r.a({ className: 's_LD_NotFound_HomeL', href: '/' },\n               t.ld.ElseGoToHome_2)));\n \n-    const loginForm = isSignUp ? null :\n+    const loginDlg = isSignUp ? null :\n         PasswordLoginDialogContent(childDialogProps);\n \n-    const isForGuest = props.isForGuest;\n-    const isForPasswordUser = !isForGuest;\n-    const createUserForm = !isSignUp || settings.allowLocalSignup === false ? null :\n+    const isGuestSignUp = props.isForGuest;\n+\n+    const signupOrGuestDlg = isLogin || settings.allowLocalSignup === false ? null :\n         CreateUserDialogContent({\n-            ...childDialogProps, isForPasswordUser, isForGuest\n+            ...childDialogProps,\n+            isForPasswordUser: !isGuestSignUp,  // <—— remove? Don't need ...\n+            isForGuest: isGuestSignUp,          //     ... both\n           } as CreateUserDialogContentProps);\n \n-    let switchToOtherDialogInstead;\n+    let switchToLoginOrGuestDlg: RElm | U;\n+    let switchToSignupOrGuestDlg: RElm | U;\n+\n+    const switchDiag = function(toWhat: SwitchAuthnDialogTo) {\n+      return () => props.switchDialog(toWhat);\n+    }\n+\n+    const createAccountInstead = () =>\n+        r.i({ className: 'c_AuD_2SgU' },\n+          t.ld.SignUpInstead_1,\n+          r.a({ className: 'c_AuD_SwitchB', onClick: switchDiag('2SgU') },\n+            t.ld.SignUpInstead_2),\n+          t.ld.SignUpInstead_3);\n+\n+    const orLoginInstead = (isTextBefore?: Bo) =>\n+        r.i({ className: 'c_AuD_2LgI' },\n+          debiki2.firstToLower(t.ld.OrLogIn_1, isTextBefore),\n+          r.a({ className: 'c_AuD_SwitchB', onClick: switchDiag('2LgI') },\n+            t.ld.OrLogIn_2),\n+          t.ld.OrLogIn_3);\n+\n+    const orJustTypeName = () => !props.allowGuestLogin || isGuestSignUp ? null :\n+        r.i({ className: 'c_AuD_2Gst' },\n+          t.ld.OrTypeName_1,\n+          r.a({ className: 'c_AuD_SwitchB', onClick: switchDiag('2Gst') },\n+            t.ld.OrTypeName_2),\n+          t.ld.OrTypeName_3)\n+\n     if (isForFirstOwner) {\n       // Don't show any switch-between-login-and-signup buttons.\n     }\n-    else if (isSignUp) {\n+    else if (isSignUp && !isGuestSignUp) {\n+      // We're in the Create Account (aka Sign Up) dialog.\n+      // Show \"Log in instead, or just type your name\" dialog switch buttons.\n       // If no signup fields above, center align the \"Or log in instead\" text, else looks weird.\n       const style = settings.allowLocalSignup === false ? { textAlign: 'center' } : null;\n-      switchToOtherDialogInstead =\n-        r.div({ className: 'form-group esLD_Switch', style },\n-          \"(\", r.i({}, t.ld.AlreadyHaveAcctQ,\n-            t.ld.LogInInstead_1,\n-            r.a({ className: 'esLD_Switch_L', onClick: props.switchBetweenLoginAndSignUp },\n-              t.ld.LogInInstead_2),\n-            t.ld.LogInInstead_3), \" )\");\n+      switchToLoginOrGuestDlg =\n+          r.div({ className: 'form-group c_AuD_Switch', style }, '(',\n+            orLoginInstead(),\n+            orJustTypeName(),\n+            ')');\n     }\n     else if (store.siteStatus > SiteStatus.Active) {\n       // Right now, don't allow creation of new accounts, for deactivated sites. Later, though,\n       // let admins invite new staff, if the site is in ReadAndCleanOnly mode. [5PY8FD2]\n       // BUG currently no store data is included on /-/login, so even if siteStatus > Active,\n       // the \"Create account\" link inserted below (in `else`) will be added, nevertheless.\n     }\n-    else if (settings.allowSignup === false) {\n-      // Then don't show any switch-to-signup button.\n-    }\n     else {\n-      // The login dialog opens not only via the Log In button, but also if one clicks\n-      // e.g. Create Topic. So it's important to be able to switch to sign-up.\n-      switchToOtherDialogInstead =\n-        r.div({ className: 'form-group esLD_Switch' },\n-          \"(\", r.i({}, t.ld.NewUserQ,\n-          t.ld.SignUpInstead_1,\n-          r.a({ className: 'esLD_Switch_L', onClick: props.switchBetweenLoginAndSignUp },\n-            t.ld.SignUpInstead_2),\n-          t.ld.SignUpInstead_3), \" )\");\n+      // We're in the Log In dialog, or the \"just type your name\" guest login.\n+      // Show \"Or Create Account instead, or just type your name\" dialog switchers.\n+      // @ifdef DEBUG\n+      // DO_AFTER 2021-03-01  remove the (..||..) below.\n+      dieIf(!(isLogin || isGuestSignUp), 'TyE37MRHW20');\n+      // @endif\n+      const createAcct = settings.allowSignup !== false && (isLogin || isGuestSignUp) ?\n+              createAccountInstead() : null;\n+      const isTextBefore = !!createAcct;\n+\n+      switchToSignupOrGuestDlg =\n+          r.div({ className: 'form-group c_AuD_Switch' },\n+            createAcct,\n+            isSignUp ? orLoginInstead(isTextBefore) : null,\n+            orJustTypeName());\n     }\n \n     const ss = store.settings;\n@@ -504,19 +562,27 @@ export const LoginDialogContent = createClassAndFactory({\n           r.p({ id: 'dw-lgi-or-login-using' },\n             anyOpenAuth\n               ? (isSignUp\n-                  ? (isForGuest ? t.ld.OrTypeName : t.ld.OrCreateAcctHere)\n+                  ? (isGuestSignUp ? t.ld.OrTypeName : t.ld.OrCreateAcctHere)\n                   : t.ld.OrLogIn)\n               : (isSignUp\n-                  ? (isForGuest ? t.ld.YourNameQ : t.ld.SignUp)\n+                  ? (isGuestSignUp ? t.ld.YourNameQ : t.ld.SignUp)\n                   : t.ld.LogIn))),\n \n-        switchToOtherDialogInstead,\n-        loginForm,\n-        createUserForm);\n+        // Either:\n+        switchToLoginOrGuestDlg,\n+        signupOrGuestDlg,\n+\n+        // Or:\n+        // (place the \"or Create Account\" button below the username and password\n+        // inputs — because that's just two fields, so one somewhat easily sees\n+        // the Create Account button below.)\n+        loginDlg,\n+        switchToSignupOrGuestDlg,\n+        );\n     }\n \n     return (\n-      r.div({ className: 'esLD' },\n+      r.div({ className: 'c_AuD' },\n         notHttpsErr,\n         notFoundInstructions,\n         content));\n@@ -697,11 +763,10 @@ const PasswordLoginDialogContent = createClassAndFactory({\n /**\n  * Text to append to the login button so it reads e.g. \"Log in to write a comment\".\n  */\n-function loginToWhat(loginReason: string): string {\n+function loginToWhat(loginReason: LoginReason): St {\n   switch (loginReason) {\n-    case 'LoginToSubmit': return t.ld.LogInToSubmit;\n-    case 'LoginToComment': return t.ld.LogInToComment;\n-    case 'LoginToCreateTopic': return t.ld.LogInToCreateTopic;\n+    case LoginReason.PostReply: return t.ld.LogInToComment;\n+    case LoginReason.CreateTopic: return t.ld.LogInToCreateTopic;\n     default: return t.ld.LogIn;\n   }\n }"
    },
    {
      "sha": "dda6c6ba0f72abc5c0163ae14ef4ca5dc57d5981",
      "filename": "client/app-more/login/login-dialog.styl",
      "status": "modified",
      "additions": 38,
      "deletions": 25,
      "changes": 63,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/login/login-dialog.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/login/login-dialog.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/login/login-dialog.styl?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -12,7 +12,7 @@\n   font-size: 18px;\n   text-decoration: underline;\n   font-weight: bold;\n-  color: hsl(207,100%,42%);\n+  color: hsl($uiHue,100%,42%);\n \n .esLoginDlg_becomeAdminInstr\n   margin: 25px 5px;\n@@ -29,28 +29,32 @@\n     opacity: 0.4;\n     transition: opacity 0.7s linear;\n \n-.dw-login-modal\n-  max-width: 520px; // else like 600, too wide\n-\n \n // On small screens, like iPhone 5 and login popup windows, make the dialog full-screen.\n-@media (max-width: 590px) // $veryNarrowLimit)\n+@media (max-width: $modalDialogBreakpoint - 1)\n   .dw-login-modal\n     margin: 0;\n-    width: 100%;\n-    height: 100%;\n+    padding: 0;\n+    width: 100%;  // can remove? or are there  position: fixed (used below) iOS bugs?\n+    height: 100%; //\n     max-width: none;\n     max-height: none;\n+    position: fixed;\n+    top: 0;\n+    bottom: 0;\n+    left: 0;\n+    right: 0;\n     .modal-content\n       border: none !important;\n       border-radius: 0;\n       height: 100%;\n     .modal-body\n-      // Place dialog title closer to top of window, & make narrower to avoid unneded horizontal scroll.\n+      // Reduce padding so gets closer to top of window, and so there's more\n+      // horizontal space for the ext IDP authn buttons (e.g. Continue with Google).\n       padding: 8px 5px;\n \n \n-.esLD\n+.c_AuD\n   padding-top: 4px;\n \n   #dw-lgi-other-sites\n@@ -62,7 +66,8 @@\n     width: 19em;\n \n   $width = 323px;\n-  .esLD_Switch\n+  .c_AuD_Switch\n+    font-style: italic;\n     max-width: $width;\n     margin: 17px auto;\n     &:last-child\n@@ -146,25 +151,33 @@\n     &:hover\n       opacity: 0.85; // would be better if could make them darker on hover, instead of brighter\n \n-.esLD_Switch_L\n+.c_AuD_SwitchB\n   font-weight: bold;\n+  background: hsl($uiHue 80% 55%);\n+  color: white;\n+  padding: 0px 3px 2px 5px;\n+  margin: 0 3px 0 2px;\n+  box-shadow: 2px 2px 4px rgba(0,0,0,0.35);\n+  min-width: 60px;\n+  display: inline-block;\n+  text-align: center;\n+  &:hover\n+    color: white;\n+    text-decoration: none;\n+    background: hsl($uiHue 100% 65%);\n+\n+.c_AuD_2SgU .c_AuD_SwitchB   // switch to Create Account button\n+  padding-right: 5px;\n+\n+.c_AuD_2LgI .c_AuD_SwitchB   // switch to Log In\n+  // Make the \"Log in\" text a bit wider — it's otherwise short, compared to\n+  // \"just type a name\". Hmm but this might not make sense in some languages\n+  // other than English, where \"Log in\" is longer. Oh well.\n   letter-spacing: 0.5px;\n   word-spacing: 1px;\n-  padding: 0 1px 0 2px;\n-  color: hsl(207, 100%, 45%);\n-\n-.s_LD_OrCreateAccount\n-  margin: 25px 0 8px;\n-  font-style: italic;\n \n-.s_LD_CreateAccount\n-  display: inline-block;\n-  background: hsl(207, 80%, 56%);\n-  color: white;\n-  font-weight: bold;\n-  padding: 3px 6px 4px;\n-  margin: 0 5px 6px 4px;\n-  box-shadow: 3px 3px 3px rgba(0,0,0,0.29);\n+.c_AuD_2Gst .c_AuD_SwitchB   // switch to Guest login (\"just type a name\")\n+  margin-right: 5px;\n \n .s_LD_LoginB\n   font-weight: bold;"
    },
    {
      "sha": "44ae8aea08e86fd7d0b8423bcaf519b4406d1a5b",
      "filename": "client/app-more/login/new-password-page.more.ts",
      "status": "modified",
      "additions": 23,
      "deletions": 10,
      "changes": 33,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/login/new-password-page.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/login/new-password-page.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/login/new-password-page.more.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -25,27 +25,40 @@\n \n const r = ReactDOMFactories;\n \n+interface Props extends NewPasswordData {\n+  xsrfToken: St;\n+}\n+\n+interface State {\n+  passwordOk: Bo;\n+}\n+\n \n export function renderNewPasswordPage(secretKey: string) {\n-  const props = window['newPasswordData'];\n-  props.xsrfToken = getSetCookie('XSRF-TOKEN');\n+  const props: Props = {\n+    ...eds.newPasswordData,\n+    xsrfToken: getSetCookie('XSRF-TOKEN'),\n+  };\n   ReactDOM.render(NewPasswordPage(props),\n       document.getElementById('dw-react-new-password'));\n }\n \n \n const NewPasswordPage = createClassAndFactory({\n   getInitialState: function() {\n-    return { passwordOk: false };\n+    return { passwordOk: false } as State;\n   },\n \n-  setPasswordOk: function(passwordOk: boolean) {\n-    this.setState({ passwordOk: passwordOk });\n+  setPasswordOk: function(passwordOk: Bo) {\n+    this.setState({ passwordOk } as State);\n   },\n \n   render: function () {\n+    const props: Props = this.props;\n+    const state: State = this.state;\n+\n     let oldPasswordInput;\n-    if (!this.props.resetPasswordEmailId) {\n+    if (!props.resetPasswordEmailId) {\n       oldPasswordInput = r.p({}, '__ old pwd here, unimplemented [DwE4KGE30] __');\n       // label for=\"oldPassword\">Enter your current password:</label>  // I18N\n       // input type=\"password\" id=\"oldPassword\" name=\"oldPassword\" value=\"\" class=\"form-control\">\n@@ -56,12 +69,12 @@ const NewPasswordPage = createClassAndFactory({\n \n     return (\n       r.form({ method: 'POST' },\n-        Input({ type: 'hidden', name: 'dw-fi-xsrf', value: this.props.xsrfToken }),\n-        Input({ type: 'hidden', name: 'emailId', value: this.props.resetPasswordEmailId }),\n+        Input({ type: 'hidden', name: 'dw-fi-xsrf', value: props.xsrfToken }),\n+        Input({ type: 'hidden', name: 'emailId', value: props.resetPasswordEmailId }),\n         oldPasswordInput,\n-        NewPasswordInput({ newPasswordData: this.props, minLength: this.props.minLength,\n+        NewPasswordInput({ newPasswordData: props, minLength: props.minLength,\n             setPasswordOk: this.setPasswordOk }),\n-        InputTypeSubmit({ disabled: !this.state.passwordOk, value: t.Submit,\n+        InputTypeSubmit({ disabled: !state.passwordOk, value: t.Submit,\n             className: 'e_SbmNewPwB' })));\n   }\n });"
    },
    {
      "sha": "d026e78c6bfc6c6a29635ed4402e6f032e9f195a",
      "filename": "client/app-more/more-prelude.more.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/more-prelude.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/more-prelude.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/more-prelude.more.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1,3 +1,3 @@\n-/// <reference path=\"../app-slim/server-vars.d.ts\" />\n+/// <reference path=\"../app-slim/server-vars.ts\" />\n /// <reference path=\"../app-slim/translations.d.ts\" />\n /// <reference path=\"../app-slim/slim-bundle.d.ts\" />\n\\ No newline at end of file"
    },
    {
      "sha": "d4d8f07a690ee6dfc254f31ebad2fd2e73b9832f",
      "filename": "client/app-more/no-page/non-existing-page.more.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/no-page/non-existing-page.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-more/no-page/non-existing-page.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/no-page/non-existing-page.more.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -105,7 +105,7 @@ const SignUpAsAdmin = createComponent({\n     // later on verifying their email address.\n     const loginBtn =\n         PrimaryButton({ id: 't_OwnerSignupB', disabled: !!anyEmailProblem,\n-            onClick: () => login.getLoginDialog().openToSignUp(LoginReason.BecomeAdmin) },\n+            onClick: () => debiki2.login.getLoginDialog().openToSignUp(LoginReason.BecomeOwner) },\n           \"Continue\");\n \n     // If this is a self hosted server, one needs to login with the email in the\n@@ -167,7 +167,8 @@ const LoginToCreateSomething = createComponent({\n         r.p({}, \"If you haven't done this already: Please click the link in the \" +\n             \"email address verification email I have sent you.\"),\n         r.br(),\n-        reactelements.NameLoginBtns({ title: \"Login\", purpose: 'LoginAsAdmin' }),\n+        reactelements.NameLoginBtns({\n+              title: \"Login\", purpose: LoginReason.NeedToBeAdmin }),\n         sendEmailAgainButton));\n   }\n });"
    },
    {
      "sha": "c837d1105d78ccd247007a393efe099e913bd91f",
      "filename": "client/app-slim/ReactActions.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/ReactActions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/ReactActions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/ReactActions.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -279,8 +279,8 @@ export function showForumIntro(visible: boolean) {\n }\n \n \n-export function editPostWithNr(postNr: number) {\n-  login.loginIfNeededReturnToPost('LoginToEdit', postNr, () => {\n+export function editPostWithNr(postNr: PostNr) {\n+  login.loginIfNeededReturnToPost(LoginReason.LoginToEdit, postNr, () => {\n     if (eds.isInEmbeddedCommentsIframe) {\n       sendToEditorIframe(['editorEditPost', postNr]);\n     }"
    },
    {
      "sha": "ffc92b183df3586864ad71ba81f4eb3db6c6e123",
      "filename": "client/app-slim/ReactStore.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/ReactStore.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/ReactStore.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/ReactStore.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -178,8 +178,9 @@ ReactDispatcher.register(function(payload) {\n         publicCategories: action.publicCategories,\n         restrictedCategories: action.restrictedCategories,\n       });\n-      // COULD sort perms somehow, how? And remove dupls? [4JKT2W1]\n-      store.me.permsOnPages = store.me.permsOnPages.concat(action.myNewPermissions);\n+\n+      store.me.permsOnPages =\n+            perms_addNew(store.me.permsOnPages, action.myNewPermissions);\n \n       // If creating a new cat, remember it, so can highlight it in the category list:\n       store.newCategorySlug = action.newCategorySlug;\n@@ -562,13 +563,12 @@ ReactStore.activateMyself = function(anyNewMe: Myself) {\n     $h.addClasses(htmlElem, 'dw-is-authenticated');\n   }\n \n-  // Add Everyone's permissions to newMe's permissions (Everyone's permissions aren't included\n-  // in the per-user data). [8JUYW4B]\n-  // COULD sort perms somehow, how? [4JKT2W1]\n+  // Add Everyone's permissions to newMe's permissions (Everyone's permissions aren't\n+  // included in the per-user data). [8JUYW4B]\n   const oldMe: Myself = store.me;\n-  const everyonesPerms =\n-      _.filter(oldMe.permsOnPages, (p: PermsOnPage) => p.forPeopleId === Groups.EveryoneId);\n-  newMe.permsOnPages = everyonesPerms.concat(newMe.permsOnPages);\n+  const everyonesPerms = _.filter(oldMe.permsOnPages,\n+          (p: PermsOnPage) => p.forPeopleId === Groups.EveryoneId);\n+  newMe.permsOnPages = perms_addNew(everyonesPerms, newMe.permsOnPages);\n \n   store.user = newMe; // try to remove the .user field, use .me instead\n   store.me = newMe;"
    },
    {
      "sha": "d043b397879589558a7f66227897d990b5a6f1a9",
      "filename": "client/app-slim/Server.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/Server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/Server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/Server.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1626,10 +1626,11 @@ export function deleteDrafts(draftNrs: DraftNr[], onOk: (() => void) | UseBeacon\n }\n \n \n-const cachedLinkPreviewHtml = {};\n+const cachedLinkPreviewHtml: { [url: string]: LinkPreviewResp } = {};\n \n-export function loadOneboxSafeHtml(url: St, /* later: curPageId: PageId, */\n-        onOk: (safeHtml: St) => Vo) {\n+\n+export function fetchLinkPreview(url: St, inline: Bo, /* later: curPageId: PageId, */\n+        onOk: (resp: LinkPreviewResp | Nl) => Vo) {\n   const curPageId = '123'; // whatever, for now\n   // People often accidentally append spaces, so trim spaces.\n   // But where's a good palce to trim spaces? The caller or here? Here, for now.\n@@ -1641,20 +1642,18 @@ export function loadOneboxSafeHtml(url: St, /* later: curPageId: PageId, */\n     return;\n   }\n   const encodedUrl = encodeURIComponent(url);\n-  get(`/-/fetch-link-preview?url=${encodedUrl}&curPageId=${curPageId}`,\n-        (previewHtml: St) => {\n+  get(`/-/fetch-link-preview?url=${encodedUrl}&curPageId=${curPageId}&inline=${inline}`,\n+        (resp: LinkPreviewResp) => {\n     // Later: Return '' instead if no preview available? So won't be lots of\n     // annoying 40X \"failed\" requests in the dev tools console.\n-    cachedLinkPreviewHtml[url] = previewHtml;\n-    onOk(previewHtml);\n+    cachedLinkPreviewHtml[url] = resp;\n+    onOk(resp);\n   }, function() {\n     cachedLinkPreviewHtml[url] = null;\n     // Pass null to tell the editor to show no link preview (and just show a plain link).\n     onOk(null);\n     // It'd be annoying if error dialogs popped up, whilst typing.\n     return IgnoreThisError;\n-  }, {\n-    dataType: 'html',\n   });\n }\n "
    },
    {
      "sha": "524f9c204a9c7406076c18130ba09c94d2380fe1",
      "filename": "client/app-slim/call-start-stuff.js",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/call-start-stuff.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/call-start-stuff.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/call-start-stuff.js?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -0,0 +1 @@\n+debiki.startStuff();"
    },
    {
      "sha": "6675387a18a09a192aec5900d4a5f39ca392601f",
      "filename": "client/app-slim/editor/onebox.styl",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/editor/onebox.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/editor/onebox.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/editor/onebox.styl?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1,6 +1,6 @@\n // RENAME this file to link-previews.styl\n \n-.s_LnPv\n+.s_LnPv-Blk\n   padding: 24px 24px 9px;\n   margin: 15px 0 20px 2px;  // margin-left leaves space for the drop-shadow\n   //background: hsl(0, 0%, 94.5%);\n@@ -19,15 +19,15 @@\n // Make it simpler to see where one link preview ends and the next start,\n // if there're many after each other, by adding more margin.\n // But not internal link preview — they have no box-shadow so need less space.\n-.s_LnPv:not(.s_LnPv-Int) + .s_LnPv\n+.s_LnPv-Blk:not(.s_LnPv-Int) + .s_LnPv-Blk\n   margin-top: 27px;\n \n-.dw-id2 .s_LnPv\n+.dw-id2 .s_LnPv-Blk\n   // Less padding, maybe column more narrow?\n   padding-left: 18px;\n   padding-right: 18px;\n \n-.s_LnPv iframe\n+.s_LnPv-Blk iframe\n   margin: 0 auto;\n   display: block;\n   width: calc(100% - 40px);\n@@ -48,7 +48,7 @@\n   margin: 9px auto 5px;\n   text-align: center;\n \n-.s_LnPv-Int\n+.s_LnPv-Blk.s_LnPv-Int\n   padding: 15px 16px 17px;\n   margin-bottom: 16px;\n   // Make *internal* link previews look different — good to know they're to the same\n@@ -68,7 +68,7 @@\n     // Darker color, since light gray background.\n     color: hsl(0, 0%, 11%);\n \n-.s_LnPv-oEmb.s_LnPv_ViewAt\n+.s_LnPv-oEmb .s_LnPv_ViewAt\n   margin: 7px auto 7px;  // already 10px extra margin-top: [oemb_extr_height]\n \n "
    },
    {
      "sha": "3376b76dd975a7e47b5ec690c270ff36413b8616",
      "filename": "client/app-slim/forum/forum.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/forum/forum.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/forum/forum.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/forum/forum.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -421,7 +421,7 @@ const ForumButtons = createComponent({\n \n   createTopic: function(category: Category) {\n     const anyReturnToUrl = window.location.toString().replace(/#/, '__dwHash__');\n-    login.loginIfNeeded('LoginToCreateTopic', anyReturnToUrl, () => {\n+    login.loginIfNeeded(LoginReason.CreateTopic, anyReturnToUrl, () => {\n       if (this.isGone) return;\n       const newTopicTypes = category.newTopicTypes || [];\n       if (newTopicTypes.length === 0) {"
    },
    {
      "sha": "9f7eb629b700333637889fee117760475d218a2a",
      "filename": "client/app-slim/login/login-if-needed.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/login/login-if-needed.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/login/login-if-needed.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/login/login-if-needed.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -52,7 +52,7 @@ export let anyContinueAfterLoginCallback = null;\n \n \n export function loginIfNeededReturnToPost(\n-      loginReason: LoginReason | string, postNr: PostNr, success: () => void,\n+      loginReason: LoginReason, postNr: PostNr, success: () => void,\n       willCompose?: boolean) {\n   // If posting a progress post, then, after login, scroll to the bottom, so one\n   // can click that button again — it's at the bottom.\n@@ -69,7 +69,7 @@ export function loginIfNeededReturnToPost(\n \n \n export function loginIfNeededReturnToAnchor(\n-      loginReason: LoginReason | string, anchor: string, success?: () => void, willCompose?: boolean) {\n+      loginReason: LoginReason, anchor: string, success?: () => void, willCompose?: boolean) {\n   const returnToUrl = makeReturnToPageHashForVerifEmail(anchor);\n   success = success || function() {};\n   const store: Store = ReactStore.allData();\n@@ -98,26 +98,26 @@ export function loginIfNeededReturnToAnchor(\n \n // Later, merge with loginIfNeededReturnToAnchor() above, and rename to loginIfNeeded, and use only\n // that fn always — then will work also in iframe (will open popup).\n-export function loginIfNeeded(loginReason, returnToUrl: string, onDone?: () => void,\n-     willCompose?: boolean) {\n+export function loginIfNeeded(loginReason: LoginReason, returnToUrl: St, onOk?: () => Vo,\n+     willCompose?: Bo) {\n   if (ReactStore.getMe().isLoggedIn || (willCompose && ReactStore.mayComposeBeforeSignup())) {\n-    if (onDone) onDone();\n+    if (onOk) onOk();\n   }\n   else {\n-    goToSsoPageOrElse(returnToUrl, loginReason, onDone, function() {\n+    goToSsoPageOrElse(returnToUrl, loginReason, onOk, function() {\n       Server.loadMoreScriptsBundle(() => {\n         // People with an account, are typically logged in already, and won't get to here often.\n         // Instead, most people here, are new users, so show the signup dialog.\n         // (Why won't this result in a compil err? (5BKRF020))\n         debiki2.login.getLoginDialog().openToSignUp(\n-              loginReason, returnToUrl, onDone || function() {});\n+              loginReason, returnToUrl, onOk || function() {});\n       });\n     });\n   }\n }\n \n \n-export function openLoginDialogToSignUp(purpose) {\n+export function openLoginDialogToSignUp(purpose: LoginReason) {\n   goToSsoPageOrElse(location.toString(), purpose, null, function() {\n     Server.loadMoreScriptsBundle(() => {\n       debiki2.login.getLoginDialog().openToSignUp(purpose);\n@@ -126,7 +126,7 @@ export function openLoginDialogToSignUp(purpose) {\n }\n \n \n-export function openLoginDialog(purpose) {\n+export function openLoginDialog(purpose: LoginReason) {\n   goToSsoPageOrElse(location.toString(), purpose, null, function() {\n     Server.loadMoreScriptsBundle(() => {\n       debiki2.login.getLoginDialog().openToLogIn(purpose);\n@@ -135,7 +135,7 @@ export function openLoginDialog(purpose) {\n }\n \n \n-function goToSsoPageOrElse(returnToUrl: St, toDoWhat: LoginReason | St | U,\n+function goToSsoPageOrElse(returnToUrl: St, toDoWhat: LoginReason | U,\n         doAfterLogin: () => void | U, orElse: () => void) {\n   // Dupl code? [SSOINSTAREDIR]\n   const store: Store = ReactStore.allData();"
    },
    {
      "sha": "0f91d8013395399974b86959cfc50b1878605887",
      "filename": "client/app-slim/login/login-popup.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/login/login-popup.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/login/login-popup.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/login/login-popup.js?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -23,8 +23,8 @@ var d = { i: debiki.internal };\n d.i.createLoginPopup = function(url) {\n   // Based on popupManager.createPopupOpener, from popuplib.js.\n \n-  var width = 550;\n-  var height = 630;\n+  var width = 560;\n+  var height = 670;\n   var coordinates = popupManager.getCenteredCoords(width, height);\n   var windowName = 'TyLoginPopup';\n "
    },
    {
      "sha": "dbbeb149fc15e2a8e077114b1622f8e78c89ddde",
      "filename": "client/app-slim/model.ts",
      "status": "modified",
      "additions": 34,
      "deletions": 9,
      "changes": 43,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/model.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/model.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/model.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1276,12 +1276,10 @@ interface CreateUserParams {\n interface CreateUserDialogContentProps extends CreateUserParams {\n   store: Store;\n   afterLoginCallback?;\n-  closeDialog: (_?: St) => Vo;\n-  loginReason?;\n+  closeDialog: (_?: 'CloseAllLoginDialogs') => Vo;\n+  loginReason?: LoginReason;\n   isForGuest?: Bo;\n   isForPasswordUser?: Bo;\n-\n-  switchBetweenGuestAndPassword?: () => Vo;\n }\n \n \n@@ -1342,15 +1340,24 @@ const enum EditMemberAction {\n }\n \n \n+// Sync w Scala: LoginReason.\n const enum LoginReason {\n-  SignUp = 13,\n+  LoginToEdit = 9,\n   LoginToChat = 10,\n   LoginToLike = 11,\n-  BecomeAdmin = 12, // COULD rename to BecomeOwner\n+  BecomeOwner = 12,\n+  SignUp = 13,\n   TryToAccessNotFoundPage = 14,\n   SubmitEditorText = 15,\n   PostEmbeddedComment = 16,  // dupl [8UKBR2AD5]\n   PostProgressPost = 17,\n+  PostReply = 18,     // was: 'LoginToComment'\n+  CreateTopic = 19,   // was: 'LoginToCreateTopic'\n+  LoginToLogin = 20,  // was: 'LoginToLogin' RENAME to ClickedLoginBtn\n+  LoginBecauseNotFound = 21,\n+  AuthnRequiredToRead = 22,  // was: 'LoginToAuthenticate'\n+  NeedToBeAdmin = 23, // was: 'LoginAsAdmin'\n+  LoginToAdministrate = 24,\n }\n \n \n@@ -1734,7 +1741,7 @@ interface CatsTreeCat extends Category {\n interface ExplainingTitleText {\n   iconUrl?: St;\n   title: St;\n-  text: any;\n+  text?: any;\n   key?: any;\n   subStuff?: any;\n }\n@@ -1749,9 +1756,9 @@ interface ExplainingListItemProps extends ExplainingTitleText {\n   onClick?: any;\n   onSelect?: (item: ExplainingTitleText) => void;\n   eventKey?: any;\n-  active?;\n+  active?: Bo;\n   activeEventKey?;\n-\n+  disabled?: Bo;\n }\n \n \n@@ -2062,6 +2069,24 @@ interface PageNotfPrefsResponse extends OwnPageNotfPrefs {\n }\n \n \n+/// Any title might not be available — then, safeTitleCont is \"\" (empty);\n+/// there'd be only safeHtml.\n+interface LinkPreviewResp {\n+  safeTitleCont: St;\n+  classAtr: St;\n+  safeHtml: St;\n+  errCode?: St;\n+}\n+\n+\n+/// If no title, then cannot render any inline link preview — because\n+/// the title is what we'd show.\n+interface InlineLinkPreview {\n+  safeTitleCont: St;\n+  classAtr: St;\n+}\n+\n+\n interface IframeOffsetWinSize {\n   top: number;\n   height: number;"
    },
    {
      "sha": "77c29c167cf8178d90b9f0d16b0f8ab60a334b6e",
      "filename": "client/app-slim/oop-methods.ts",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/oop-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/oop-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/oop-methods.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1208,6 +1208,41 @@ export function store_makeDeletePostPatch(post: Post): StorePatch {\n //----------------------------------\n \n \n+/// Joins oldPerms and newPerms. Any new perm replaces any old\n+/// perm for the same thing (e.g. category) and group (participant).\n+///\n+export function perms_addNew(oldPerms: PermsOnPage[], newPerms: PermsOnPage[])\n+        : PermsOnPage[] {\n+  const result = [...newPerms];\n+  for (let old of oldPerms) {\n+    const dupl = _.find(result, newerPerm => perm_samePatAndThing(old, newerPerm));\n+    if (!dupl) {\n+      result.push(old);\n+    }\n+  }\n+  // COULD delete perms with all !may....\n+  // Currently the server sorts by permission id, ascending  [SORTCATPERMS]\n+  // — let's do here to.\n+  result.sort((a, b) => a.id - b.id);\n+  return result;\n+}\n+\n+\n+function perm_samePatAndThing(a: PermsOnPage, b: PermsOnPage): Bo {\n+  // @ifdef DEBUG\n+  dieIf(a.onWholeSite === null || a.onCategoryId === null ||\n+        a.onPageId === null || a.onPostId === null ||\n+        b.onWholeSite === null || b.onCategoryId === null ||\n+        b.onPageId === null || b.onPostId === null, 'TyE602MRSKDP34');\n+  // @endif\n+  return (a.forPeopleId === b.forPeopleId\n+          && a.onWholeSite  === b.onWholeSite\n+          && a.onCategoryId === b.onCategoryId\n+          && a.onPageId     === b.onPageId\n+          && a.onPostId     === b.onPostId);\n+}\n+\n+\n export function perms_join(pA: PermsOnPage, pB?: PermsOnPageNoIdOrPp): PermsOnPageNoIdOrPp {\n   if (!pB) return pA;\n   return {"
    },
    {
      "sha": "dc36735d67b5cf620552cefaea52bd55b64b7a2f",
      "filename": "client/app-slim/page/discussion.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/page/discussion.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/page/discussion.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/discussion.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -586,12 +586,12 @@ const RootPostAndComments = createComponent({\n     const store: Store = this.props.store;\n     const page: Page = store.currentPage;\n \n-    const loginToWhat =\n+    const loginToWhat: LoginReason =\n         postType === PostType.BottomComment\n           ? LoginReason.PostProgressPost\n           : (page.pageRole === PageRole.EmbeddedComments\n               ? LoginReason.PostEmbeddedComment\n-              : 'LoginToComment');\n+              : LoginReason.PostReply);\n \n     login.loginIfNeededReturnToPost(loginToWhat, BodyNr, () => {    // SSO E2E TESTS_MISSSING\n       if (this.isGone) return;"
    },
    {
      "sha": "e3f5ced066fc6d81a127f847bd4393326599f9e1",
      "filename": "client/app-slim/page/post-actions.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/page/post-actions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/page/post-actions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/post-actions.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -197,7 +197,7 @@ export const PostActions = createComponent({\n     }\n \n     const loginToWhat = page.pageRole === PageRole.EmbeddedComments ?\n-        LoginReason.PostEmbeddedComment : 'LoginToComment';\n+        LoginReason.PostEmbeddedComment : LoginReason.PostReply;\n \n     login.loginIfNeededReturnToPost(loginToWhat, post.nr, () => {\n       if (this.isGone) return;"
    },
    {
      "sha": "a4a143b78687a4b035a733c30a796ece4dda0839",
      "filename": "client/app-slim/prelude.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/prelude.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/prelude.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/prelude.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -17,7 +17,7 @@\n \n /// <reference path=\"../types-and-const-enums.ts\" />\n /// <reference path=\"../reactjs-types.ts\" />\n-/// <reference path=\"server-vars.d.ts\" />\n+/// <reference path=\"server-vars.ts\" />\n /// <reference path=\"model.ts\" />\n /// <reference path=\"constants.ts\" />\n /// <reference path=\"translations.d.ts\" />\n@@ -110,6 +110,14 @@ export function toStr(x: any, indentation: number = 2): string {\n // x endif\n \n \n+/// Lowercases the 1st char.\n+///\n+export function firstToLower(text: St, doIt: Bo = true): St {\n+  if (!doIt || !text) return text;\n+  const firstButLowercase = text[0].toLowerCase();\n+  return firstButLowercase + text.substr(1);\n+}\n+\n // If in an embedded comments iframe.\n export let iframeOffsetWinSize: IframeOffsetWinSize | undefined;\n "
    },
    {
      "sha": "cbaa0d3ffceac3eb7c0b2583bfde3c096ea10f98",
      "filename": "client/app-slim/react-elements/name-login-btns.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/react-elements/name-login-btns.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/react-elements/name-login-btns.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/react-elements/name-login-btns.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -45,7 +45,7 @@ export const NameLoginBtns = createComponent({\n   },\n \n   onLoginClick: function() {\n-    login.loginIfNeededReturnToAnchor(this.props.purpose || 'LoginToLogin', '');\n+    login.loginIfNeededReturnToAnchor(this.props.purpose || LoginReason.LoginToLogin, '');\n   },\n \n   onLogoutClick: function() {"
    },
    {
      "sha": "54ce47f707870e236cc96162a6a1344000362bce",
      "filename": "client/app-slim/server-vars.d.ts",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/server-vars.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/server-vars.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/server-vars.d.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1,7 +1,5 @@\n /// <reference path=\"model.ts\" />\n \n-declare const talkyard: TalkyardApi;\n-\n \n interface PageSession  {\n   xsrfTokenIfNoCookies: string | undefined;\n@@ -19,13 +17,9 @@ interface PageSession  {\n   //\n   // ADD_TO_DOCS\n   //\n-  weakSessionId: string | undefined;\n+  weakSessionId?: St;\n }\n \n-// REMOVE? shouldn't access, if in emb cmts editor or login popup,\n-// instead, should use getMainWin().typs.\n-declare const typs: PageSession;\n-\n interface __MainWinInterface extends Window {\n   typs: PageSession;\n }\n@@ -36,6 +30,7 @@ type MainWin = __MainWinInterface & typeof globalThis;\n // These variables are initialized in a certain <head><script>.  [5JWKA27]\n \n interface ServerVars {\n+  doWhat: 'Noop' | 'StartPage' | 'ResetPwd';\n   pubSiteId: string;\n   siteId: SiteId;  // only in Dev mode  — repl w isFirstSite: boolean?\n   secure: boolean;\n@@ -56,6 +51,7 @@ interface ServerVars {\n   cdnOriginOrEmpty: string;\n   cdnOrServerOrigin: string;\n   assetUrlPrefix: string;\n+  debugOrigin: St;\n \n   // To be used only when rendering commonmark to html. (But when running React,\n   // the store Origin fields should be used instead. There is, hovewer,\n@@ -92,12 +88,18 @@ interface ServerVars {\n   // When creating new site.\n   baseDomain?: string;\n \n+  newPasswordData?: NewPasswordData;\n+\n   // Is non-zero, if the server is read-only, because of maintenance work. The value\n   // is the Unix second when the maintenance work is believed to be done, or 1 if unspecified.\n   mainWorkUntilSecs?: number;\n }\n \n-declare const eds: ServerVars;  // RENAME to tys  ?  And is there any way to make all fields 'const' ?\n \n-// Old:\n-declare const debiki: any;\n+interface NewPasswordData {\n+  fullName: St;\n+  username: St;\n+  email: St;\n+  minLength: Nr;\n+  resetPasswordEmailId: St;\n+}"
    },
    {
      "sha": "7be6579677b3092841e75ae05577d92a69e93e6c",
      "filename": "client/app-slim/server-vars.ts",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/server-vars.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/server-vars.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/server-vars.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -0,0 +1,12 @@\n+/// <reference path=\"server-vars.d.ts\" />\n+\n+declare const talkyard: TalkyardApi;\n+\n+// REMOVE? shouldn't access, if in emb cmts editor or login popup,\n+// instead, should use getMainWin().typs.\n+declare const typs: PageSession;\n+\n+declare const eds: ServerVars;  // RENAME to tys  ?  And is there any way to make all fields 'const' ?\n+\n+// Old:\n+declare const debiki: any;"
    },
    {
      "sha": "7c5071ab627c669b5b090730a70d104a8d529904",
      "filename": "client/app-slim/slim-bundle.d.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/slim-bundle.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/slim-bundle.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/slim-bundle.d.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1,5 +1,5 @@\n \n-/// <reference path=\"server-vars.d.ts\" />\n+/// <reference path=\"server-vars.ts\" />\n /// <reference path=\"model.ts\" />\n /// <reference path=\"translations.d.ts\" />\n /// <reference path=\"../reactjs-types.ts\" />\n@@ -134,6 +134,7 @@ declare namespace debiki2 {\n \n   let iframeOffsetWinSize;\n \n+  function firstToLower(text: St, doIt?: Bo): St;\n   function oneIfDef(x: any): number;\n \n   function $first(selector: string): HTMLElement;\n@@ -188,7 +189,8 @@ declare namespace debiki2 {\n   }\n \n   namespace util {\n-    var ExplainingListItem;\n+    // var ExplainingListItem;\n+    function ExplainingListItem(props: ExplainingListItemProps): RElm;\n   }\n \n   namespace help {\n@@ -198,7 +200,7 @@ declare namespace debiki2 {\n \n   namespace topbar {\n     function getTopbarHeightInclShadow(): number;\n-    const TopBar: any;\n+    function TopBar(props): RElm; // TopbarProps\n   }\n \n   namespace sidebar {\n@@ -226,9 +228,9 @@ declare namespace debiki2 {\n     var anyContinueAfterLoginCallback;\n     function continueAfterLogin(anyReturnToUrl?: string);\n     function loginIfNeededReturnToAnchor(\n-        loginReason: LoginReason | string, anchor: string, success?: () => void, willCompose?: boolean);\n+        loginReason: LoginReason, anchor: St, success?: () => Vo, willCompose?: Bo);\n     function loginIfNeededReturnToPost(\n-        loginReason: LoginReason | string, postNr: PostNr, success?: () => void, willCompose?: boolean);\n+        loginReason: LoginReason, postNr: PostNr, success?: () => Vo, willCompose?: Bo);\n \n     function loginIfNeeded(loginReason, returnToUrl: string, onDone?: () => void);\n     function openLoginDialogToSignUp(purpose);"
    },
    {
      "sha": "0bd5a4fb2d98e639bf9d926e00086188fe5da21b",
      "filename": "client/app-slim/start-stuff.ts",
      "status": "renamed",
      "additions": 23,
      "deletions": 6,
      "changes": 29,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/start-stuff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/start-stuff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/start-stuff.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -15,7 +15,8 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-(function() {\n+\n+debiki.startStuff = function() {\n \n var d = { i: debiki.internal, u: debiki.v0.util };\n \n@@ -25,7 +26,6 @@ if (eds.isInEmbeddedCommentsIframe || eds.isInEmbeddedEditor) {\n   debiki2.startIframeMessages();\n }\n \n-var allPostsNotTitleSelector = '.debiki .dw-p:not(.dw-p-ttl)';\n \n // Debiki convention: Dialog elem tabindexes should vary from 101 to 109.\n // HTML generation code assumes this, too. See Debiki for Developers, #7bZG31.\n@@ -37,15 +37,16 @@ debiki2.rememberBackUrl();\n debiki2.utils.highlightActiveLinkInHeader();\n \n // Replace gifs with static images that won't play until clicked.\n-Gifffer();\n+window['Gifffer']();\n \n // Show large images on click.\n-StupidLightbox.start('.dw-p-bd', '.giffferated, .no-lightbox');\n+window['StupidLightbox'].start('.dw-p-bd', '.giffferated, .no-lightbox');\n \n \n // Open about-user dialog if one clicks a @username mention (instead of navigating away to\n // the about-user page).\n-debiki2.ifEventOnNotThen('click', 'a.esMention', '', function(linkElem, event) {\n+debiki2.ifEventOnNotThen('click', 'a.esMention', '',\n+        function(linkElem: HTMLAnchorElement, event: MouseEvent) {\n   event.preventDefault();\n   var username = linkElem.href.replace(/^.*\\/-\\/users\\//, '');\n   debiki2.morebundle.openAboutUserDialog(username, linkElem);\n@@ -67,5 +68,21 @@ debiki2.dieIf(location.port && eds.debugOrigin.indexOf(':' + location.port) ===\n   \"But you're accessing the server via \" + location.host + \". [EsE7YGK2]\");\n \n \n-})();\n+  switch (eds.doWhat) {\n+    case 'StartPage':\n+      d.i.renderPageInBrowser();\n+      break;\n+    case 'ResetPwd':\n+      debiki2.Server.loadMoreScriptsBundle(function() {\n+        debiki2.login['renderNewPasswordPage']();\n+      });\n+      break;\n+    case 'Noop':\n+      break;\n+    default:\n+      debiki2.die(`Bad doWhat: ${eds.doWhat} [TyE503RSMT]`);\n+  }\n+\n+}\n+\n // vim: fdm=marker et ts=2 sw=2 fo=tcqwn list\n\\ No newline at end of file",
      "previous_filename": "client/app-slim/start-stuff.js"
    },
    {
      "sha": "c981468495f38ce681d3f6c21b47f00620b38ccf",
      "filename": "client/app-slim/theme.styl",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/theme.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/theme.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/theme.styl?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -143,11 +143,11 @@ a\n   &:active\n     text-decoration:underline;\n \n-  color: hsl($uiHue, 83%, 45%);\n+  color: hsl($uiHue, 100%, 43%);\n   &:link\n-    color: hsl($uiHue, 83%, 45%);\n+    color: hsl($uiHue, 100%, 43%);\n   &:visited\n-    color: hsl($uiHue, 90%, 35%);\n+    color: hsl($uiHue, 90%, 40%);\n \n \n /* Make placeholder text darker == more readable. Do not combine this placeholde stuff to"
    },
    {
      "sha": "443998880a54003b4a9633297bd9616a7e0fbfe8",
      "filename": "client/app-slim/third-party.styl",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/third-party.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/third-party.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/third-party.styl?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -287,6 +287,11 @@ input, textarea {\n .modal-backdrop\n   z-index: 1050;\n \n+// Make dialogs slightly wider.\n+@media (min-width: $modalDialogBreakpoint)\n+  .modal-dialog\n+    width: 630px;  // else 600, Bootstrap's default\n+\n // Scrollbars appear sometimes although not needed, in the editor dialog, when full screen,\n // and opening the category dropdown. (Sep 2016)\n .modal.fade.in"
    },
    {
      "sha": "243a7966e6812b994df5dd51f7b77707167cffb8",
      "filename": "client/app-slim/topbar/topbar.ts",
      "status": "modified",
      "additions": 20,
      "deletions": 7,
      "changes": 27,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/topbar/topbar.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/topbar/topbar.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/topbar/topbar.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -48,6 +48,16 @@ export function getTopbarHeightInclShadow(): Nr {\n }\n \n \n+interface TopbarProps {\n+  purpose?: LoginReason;\n+  location: { pathname: string };\n+  extraMargin?: Bo;\n+  customTitle?: St;\n+  backToSiteButtonTitle?: St;\n+  showBackToSite?: Bo;\n+}\n+\n+\n interface TopbarState {\n   store: Store;\n   fixed: Bo;\n@@ -218,18 +228,21 @@ export const TopBar = createComponent({\n   },\n \n   onSignUpClick: function() {\n-    login.openLoginDialogToSignUp(this.props.purpose || 'LoginToLogin');\n+    const props: TopbarProps = this.props;\n+    login.openLoginDialogToSignUp(props.purpose || LoginReason.SignUp);\n   },\n \n   onLoginClick: function() {\n-    login.openLoginDialog(this.props.purpose || 'LoginToLogin');\n+    const props: TopbarProps = this.props;\n+    login.openLoginDialog(props.purpose || LoginReason.LoginToLogin);\n   },\n \n   showTools: function() {\n     morebundle.openPageToolsDialog();\n   },\n \n   render: function() {\n+    const props: TopbarProps = this.props;\n     const state: TopbarState = this.state;\n     const store: Store = state.store;\n     const page: Page = store.currentPage;\n@@ -249,7 +262,7 @@ export const TopBar = createComponent({\n     if (pageRole === PageRole.CustomHtmlPage && (!state.fixed || !me || !me.isLoggedIn))\n       return r.div();\n \n-    const autoPageType = location_autoPageType(this.props.location);\n+    const autoPageType = location_autoPageType(props.location);\n \n     // No custom navigation or menus, when in the admin area\n     // — bad if a bug breaks the admin area.\n@@ -413,9 +426,9 @@ export const TopBar = createComponent({\n     // ------- Custom title & Back to site button\n \n     // CLEAN_UP remove the props? Use if(path.search..) also for the admin area?\n-    let extraMargin = this.props.extraMargin;\n-    let customTitle = this.props.customTitle;\n-    let backToSiteButton = this.props.backToSiteButtonTitle;\n+    let extraMargin = props.extraMargin;\n+    let customTitle: St | U | RElm = props.customTitle;\n+    let backToSiteButton = props.backToSiteButtonTitle;\n \n     const backToGroups = autoPageType !== AutoPageType.GroupProfilePage ? null :\n             LinkUnstyled({ to: GroupsRoot,\n@@ -446,7 +459,7 @@ export const TopBar = createComponent({\n       customTitle = r.h1({ className: 'esTopbar_custom_title' }, customTitle);\n     }\n \n-    if (this.props.showBackToSite || backToSiteButton) {\n+    if (props.showBackToSite || backToSiteButton) {\n       backToSiteButton = LinkUnstyled({ className: 's_Tb_Ln s_Tb_Ln-Bck btn icon-reply',\n           href: linkBackToSite() }, backToSiteButton || t.tb.BackFromAdm);\n       extraMargin = true;"
    },
    {
      "sha": "1fcfc416c07e35f8732646ae715cbe31a77bf614",
      "filename": "client/app-slim/translations.d.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/translations.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/translations.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/translations.d.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -863,12 +863,6 @@ interface TalkyardTranslations {\n     FullNameC: string;\n     optName: string;\n \n-    OrCreateAcct_1: string,\n-    OrCreateAcct_2: string,\n-    OrCreateAcct_3: string,\n-    OrCreateAcct_4: string,\n-    OrCreateAcct_5: string,\n-\n     DoneLoggedIn: string;\n     AlmostDone: string;\n   },\n@@ -925,16 +919,18 @@ interface TalkyardTranslations {\n     LogInToComment: string;\n     LogInToCreateTopic: string;\n \n-    AlreadyHaveAcctQ: string;\n-    LogInInstead_1: string;\n-    LogInInstead_2: string;\n-    LogInInstead_3: string;\n+    OrLogIn_1: string;\n+    OrLogIn_2: string;\n+    OrLogIn_3: string;\n \n-    NewUserQ: string;\n     SignUpInstead_1: string;\n     SignUpInstead_2: string;\n     SignUpInstead_3: string;\n \n+    OrTypeName_1: string;\n+    OrTypeName_2: string;\n+    OrTypeName_3: string;\n+\n     OrCreateAcctHere: string;\n     OrTypeName: string;\n     OrLogIn: string;"
    },
    {
      "sha": "4d712f66a128a9aaa34edb5ef7e61017331642d5",
      "filename": "client/app-slim/util/ExplainingDropdown.styl",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/util/ExplainingDropdown.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/util/ExplainingDropdown.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/util/ExplainingDropdown.styl?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -38,10 +38,14 @@ $sideSpace = 20px;\n     @media (max-width: 500px)\n       padding-right: 0; // the DropModal has padding-right itself already [5YKF20]\n \n-  &:hover\n+  &:hover&:not(.c_Dis)\n     background: hsl($uiHue, 100%, 97%);\n     border: 2px solid hsl($uiHue, 100%, 78%);\n \n+  &.c_Dis a\n+    opacity: 0.5;\n+    cursor: default;\n+\n .esExplDrp_entry.active\n   $bgColor = hsl($uiHue, 95%, 92%);\n   background: $bgColor;"
    },
    {
      "sha": "481de5be2b2986622739dd3c773be4c504423d4a",
      "filename": "client/app-slim/util/ExplainingDropdown.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/util/ExplainingDropdown.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/util/ExplainingDropdown.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/util/ExplainingDropdown.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -56,11 +56,14 @@ export var ExplainingListItem = createComponent({\n         props.active || _.isUndefined(props.active) && (\n           props.onSelect && props.activeEventKey === props.eventKey) ?\n         ' active' : '';\n+    const disabledClass = props.disabled ? ' c_Dis' : '';\n     const subStuff = !entry.subStuff ? null :\n             r.div({ className: 'esExplDrp_entry_sub' }, entry.subStuff);\n+    const onClick = props.disabled ? undefined : this.onClick;\n+\n     return (\n-      r.li({ className: 'esExplDrp_entry' + activeClass },\n-        r.a({ onClick: this.onClick, id: props.id, className: props.className },\n+      r.li({ className: 'esExplDrp_entry' + activeClass + disabledClass},\n+        r.a({ onClick, id: props.id, className: props.className },\n           r.div({ className: 'esExplDrp_entry_title' }, entry.title),\n           r.div({ className: 'esExplDrp_entry_expl' }, entry.text)),\n         subStuff));"
    },
    {
      "sha": "3b5b30620f0e09dbb7d60c146b7794f3137a183b",
      "filename": "client/app-slim/variables.styl",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/variables.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-slim/variables.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/variables.styl?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -4,6 +4,9 @@\n $veryNarrowLimit = 370px;\n $narrowLimit = 500px;\n \n+// 768px is from node_modules/bootstrap/dist/css/bootstrap.css\n+$modalDialogBreakpoint = 768px;\n+\n $postFontSize = 14px;\n \n $h1Color = #454545;"
    },
    {
      "sha": "f69c7e2ceddc05348dd72bb9e2878a6b48bf873a",
      "filename": "client/app-staff/create-site/create-site.staff.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-staff/create-site/create-site.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-staff/create-site/create-site.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-staff/create-site/create-site.staff.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -260,6 +260,9 @@ const LocalHostnameInput = createClassAndFactory({\n     // -some-version-for-which-the-docs-works.\n     const testSitePrefix = // dupl code [5UKF03]\n         location.pathname.indexOf('create-test-site') !== -1 ? 'test--' : '';\n+    // @ifdef DEBUG\n+    dieIf(!eds.baseDomain, 'No base domain [TyE5295RM]');\n+    // @endif\n     return (\n       r.div({ className: 'form-group' + (anyError ? ' has-error' : ''), style: this.props.style },\n         r.label({ htmlFor: 'dwLocalHostname' }, this.props.label),"
    },
    {
      "sha": "803e9799388255e9d7d5bbeae1c6d6d44536ca95",
      "filename": "client/app-staff/staff-prelude.staff.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-staff/staff-prelude.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/app-staff/staff-prelude.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-staff/staff-prelude.staff.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1,5 +1,5 @@\n /// <reference path=\"../reactjs-types.ts\" />\n-/// <reference path=\"../app-slim/server-vars.d.ts\" />\n+/// <reference path=\"../app-slim/server-vars.ts\" />\n /// <reference path=\"../app-slim/translations.d.ts\" />\n /// <reference path=\"../app-slim/slim-bundle.d.ts\" />\n /// <reference path=\"../app-more/more-bundle-already-loaded.d.ts\" />"
    },
    {
      "sha": "f340b429f550b25ac5b0b8be4c92de7bcd982222",
      "filename": "client/server/server-vars.ts",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/server/server-vars.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/server/server-vars.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/server/server-vars.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -0,0 +1 @@\n+../app-slim/server-vars.ts\n\\ No newline at end of file"
    },
    {
      "sha": "840254b908559f728b792ed5f67bcd77182c95ee",
      "filename": "client/server/tsconfig.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/server/tsconfig.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/server/tsconfig.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/server/tsconfig.json?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -4,7 +4,7 @@\n         \"removeComments\": false,\n         \"lib\": [\"es5\", \"es2015\", \"dom\"],\n         // react-dom needed to compile, but isn't actually used, server side.\n-        \"types\": [\"react\", \"react-dom\", \"lodash\", \"core-js\"],\n+        \"types\": [\"react\", \"react-dom\", \"lodash\", \"core-js\", \"markdown-it\"],\n         \"outFile\": \"server-bundle.js\",\n         \"sourceMap\": true,\n         \"inlineSources\": true  // include source code in mapping file"
    },
    {
      "sha": "6d3fe5e9c3e904a78fe0dd4aae798b1e0773582f",
      "filename": "client/types-and-const-enums.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/types-and-const-enums.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/client/types-and-const-enums.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/types-and-const-enums.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -310,6 +310,7 @@ type PageType = PageRole;\n const enum PageRole { // dupl in client/e2e/test-types.ts [5F8KW0P2]  RENAME to PageType\n   CustomHtmlPage = 1,\n   WebPage = 2,  // rename to Info?\n+  InfoPageMaxId = WebPage,\n   Code = 3,\n   SpecialContent = 4,\n   EmbeddedComments = 5,"
    },
    {
      "sha": "db4c12f194fa6725a672b67e0d3b05ebb303eacb",
      "filename": "conf/logback.xml",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/conf/logback.xml",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/conf/logback.xml",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf/logback.xml?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -18,7 +18,7 @@\n      - Commit cdbd41fa \"Remove ed-logging, to simplify build\" in this repo.\n     So don't use ed.stackdriver.StackdriverLayout, in dev-test mode. Instead: -->\n     <encoder>\n-      <pattern>%date{HH:mm:ss.SSS} %coloredLevel %logger{15} %message%n%xException{30}</pattern>\n+      <pattern>%date{HH:mm:ss.SSS} %coloredLevel %logger{15} %message%n%xException{50}</pattern>\n     </encoder>\n   </appender>\n \n@@ -33,7 +33,7 @@\n     </rollingPolicy>\n     <!-- Don't use ed.stackdriver.StackdriverLayout [2ABKR05]  -->\n     <encoder>\n-      <pattern>%coloredLevel %logger{15} - %message%n%xException{30}</pattern>\n+      <pattern>%date{HH:mm:ss.SSS} %coloredLevel %logger{15} - %message%n%xException{50}</pattern>\n     </encoder>\n   </appender>\n "
    },
    {
      "sha": "8929fef097a7ef7ad750d0e08dd526b630a5f7aa",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/conf/routes",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/conf/routes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf/routes?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -20,7 +20,7 @@\n #   https://groups.google.com/forum/?fromgroups=#!topic/play-framework/cVqBvywCs4k\n \n GET   /-/login                  controllers.LoginController.showLoginPage(as: Option[String], to: Option[String])\n-GET   /-/login-popup            controllers.LoginController.showLoginPopup(mode, returnToUrl)\n+GET   /-/login-popup            controllers.LoginController.showLoginPopup(mode: Int, returnToUrl)\n GET   /-/logout                 controllers.LoginController.logout(currentUrlPath: Option[String])\n POST  /-/logout                 controllers.LoginController.logout(currentUrlPath: Option[String])\n POST  /-/resend-owner-email-addr-verif-email controllers.LoginController.resendSiteOwnerAddrVerifEmail\n@@ -229,7 +229,7 @@ GET   /-/load-draft-and-guidelines controllers.EditController.loadDraftAndGuidel\n GET   /-/load-draft-and-text    controllers.EditController.loadDraftAndText(pageId, postNr: Int)\n POST  /-/edit                   controllers.EditController.edit\n POST  /-/edit-title-save-settings controllers.PageTitleSettingsController.editTitleSaveSettings\n-GET   /-/fetch-link-preview     controllers.EditController.fetchLinkPreview(url, curPageId)\n+GET   /-/fetch-link-preview     controllers.EditController.fetchLinkPreview(url, curPageId, inline: Boolean)\n POST  /-/change-post-type       controllers.EditController.changePostType\n POST  /-/edit-post-settings     controllers.EditController.editPostSettings\n POST  /-/delete-post            controllers.EditController.deletePost\n@@ -366,7 +366,7 @@ OPTIONS  /*whatever             controllers.ApiV0Controller.getFromApi(whatever)\n \n # ----- PWA\n \n-#GET   /manifest.webmanifest     controllers.Application.mobileAppWebmanifest\n+#GET   /talkyard.webmanifest     controllers.Application.mobileAppWebmanifest\n \n \n # ----- View pages/posts"
    },
    {
      "sha": "6cf8058b83e3b87f79a08cba60f929ab36dbacb1",
      "filename": "docs/bem-blocks.txt",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/docs/bem-blocks.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/docs/bem-blocks.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/bem-blocks.txt?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -18,6 +18,7 @@ w_X   = wraps X. Always a class, not an id.\n In-the-middle or at-a-word-end abbreviations: (but not at the start of the selector)\n Ab  = about\n Alw = allow(ed)\n+AuD = authentication dialog (create account / log in / just type a name)\n Em  = email\n Ena = enabled, Dis = disabled\n B   = button, e.g. ReplyB\n@@ -52,8 +53,7 @@ Cr = create\n Cu = Custom, e.g. CuNav = custom navigation links\n L   = list, when at the end, e.g.:  '..._IdpsL' for Identity Providers list\n Ld  = load, Ldng = loading\n-LD  = Log in Dialog, RENAME to LiD\n-LiD = Log in Dialog\n+LD  = Log in Dialog, RENAME to AuD = Authn Dialog\n Lg  = large (screen), also: Sm, Md Xl\n Ls  = list\n Lt  = less than, Gt = greater than\n@@ -205,7 +205,7 @@ esH             = help\n \n s_InvD          = invites dialog\n \n-esLD            = login/signup dialog\n+c_AuD           = authn (login/signup) dialog\n \n s_MB            = topic metabar (just below the Orig Post, before all replies)  RENAME: Mb not MB\n "
    },
    {
      "sha": "c230f9fc4a41ba205666cfb70bacd4d7b065e12b",
      "filename": "docs/e2e-tests-map.txt",
      "status": "modified",
      "additions": 20,
      "deletions": 4,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/docs/e2e-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/docs/e2e-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-map.txt?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -266,6 +266,9 @@ security:\n   edit wiki topics permission:\n           - permissions-edit-wiki-posts.2browsers.test.ts  TyT603RKDEJ46.TyTWIKIPRMS\n   misc security: SEC_TEST_MISSING\n+  xss:\n+          - coed tag: [e2e_xss] — but at other places too, didn't tag at the time\n+            search for \"<script>\" or \"javascript:\" to find?\n \n suspended users:\n   gets no email notfs,\n@@ -530,22 +533,32 @@ link previews:\n           - TESTS_MISSING\n   misc providers:\n           - link-previews-all-others.test.ts  TyT550RMHJ25\n-  internal block quote preview,\n-  internal inline title preview:\n-          - TESTS_MISSING  TyTINTLNPRVW\n+  internal links:  # (687295)\n   to page/post one may not see:\n     restricted category:\n           - link-previews-internal-not-see-cat.2br  TyTE2ELNPVIN4837\n     private message:\n     private chat:\n     whisper post:\n     deleted post:\n+  changed to https if server uses https:   # [E2EHTTPS]\n+          - link-previews-http-to-https.1br.test.ts  TyTE2ELNPVHTTPS\n+          - embedded-comments-uploads-origin.test.ts  TyT603RKDJA6.TyT6930MRDN4\n+            # both tests emb coms, and not emb\n+    for embedded comments: (HTTP2S)\n+  changed to any CDN:\n+          - embedded-comments-uploads-origin.test.ts  TyT603RKDJA6\n+          - TESTS_MISSING: CDN w/o emb coms.\n+          (Not tested here: upload-images-and-files  TyT50E6KTDU7 )\n \n backlinks,\n-internal links:\n+internal links:  # (687295)\n+  blockquote:\n           - links-internal.2browsers.test.ts  TyTINTLNS54824\n           - link-previews-internal-may-see.2br  TyTE2ELNPVIN7252.TyT606SRTR3\n           - link-previews-internal-not-see-cat.2br TyTE2ELNPVIN4837.TyT60T6SRTR3\n+  inline, just title:\n+          - TESTS_MISSING\n \n discussion -\n   users on page:\n@@ -694,6 +707,7 @@ embedded comments:\n           - embedded-comments-category-refs.2browsers.test.ts   TyT03RKHJF59.TyT063AKDGW60\n \n \n+upload links,\n uploads -  (7KFC2)\n   upload posts with pics:\n           - upload-images-and-files.test.ts  TyT50E6KTDU7\n@@ -703,6 +717,8 @@ uploads -  (7KFC2)\n           - TESTS_MISSING  embedded-comments-create-site-export-json.2browsers.test.ts  [402KGS4RQ]\n   upload video:\n   upload pdf, tar.gz:\n+  changed to https if server uses https:  (HTTP2S)  # [E2EHTTPS]\n+          - embedded-comments-uploads-origin.test.ts  TyT603RKDJA6.TyT6930MRDN4\n   embedded origin added,  (EMBORG)\n   pub site id added:\n           - embedded-comments-uploads-origin.test.ts  TyT603RKDJA6"
    },
    {
      "sha": "40af6ef65856b89f63ff94952889520badc06efb",
      "filename": "docs/e2e-tests-readme.md",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/docs/e2e-tests-readme.md",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/docs/e2e-tests-readme.md",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-readme.md?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1,7 +1,7 @@\n End-to-End tests Readme\n ===================\n \n-To do: Document variations, `my.conf`: `\n+To do: Document variations, `my.conf`: `E2ECDN`, `E2EHTTPS`\n \n ```\n talkyard.secure=true    RENAME to talkyard.https ?"
    },
    {
      "sha": "8537f3b6123215a2fe8bd1a9bd9ec0fdfb1252c8",
      "filename": "docs/maybe-do-later.txt",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/docs/maybe-do-later.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/docs/maybe-do-later.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/maybe-do-later.txt?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -14,6 +14,8 @@ Primary button colors, secondary, background, arrows, fonts,\n and embedded widgets, e.g. Twitter's oEmbed has a 'link_color: #223344' attr,\n                             and  theme=light/dark.\n \n+[wiki_links] — link to Ty page via its name, like at Wikipedia etc.\n+\n [staff_can_see]\n Add a black hanglock next to things one can see, because of one's extra\n access permissions? E.g. editing category settings, or backlinks from\n@@ -62,6 +64,8 @@ Rename \"indie\" to user\" and \"people\" to \"members\"\n prevent usernames from being displayed in Unicode, if mixed charsets used,\n e.g. Latin + Cryllic = facebooĸ.com  (homograph attacks).\n \n+Add CSP to all page types / routes: CSP_MISSING, [script_src_self].\n+\n ZAProxy auto scan.\n https://docs.gitlab.com/ee/user/application_security/dast/index.html\n "
    },
    {
      "sha": "933b82a7e5d165610828d0b907321451f773b392",
      "filename": "gulpfile.js",
      "status": "modified",
      "additions": 20,
      "deletions": 3,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/gulpfile.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/gulpfile.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/gulpfile.js?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -259,7 +259,7 @@ var slimJsFiles = [\n       'client/third-party/popuplib.js',\n       'client/app-slim/login/login-popup.js',\n       'target/client/slim-typescript.js',\n-      'client/app-slim/start-stuff.js'];\n+      'client/app-slim/call-start-stuff.js'];\n \n // Sync with Makefile [more_js_files].\n var moreJsFiles = [\n@@ -429,6 +429,7 @@ function compileServerTypescriptConcatJavascript() {\n }\n \n var swTypescriptProject = typeScript.createProject(\"client/serviceworker/tsconfig.json\");\n+var headTypescriptProject = typeScript.createProject(\"client/app-head/tsconfig.json\");\n var slimTypescriptProject = typeScript.createProject(\"client/app-slim/tsconfig.json\");\n var moreTypescriptProject = typeScript.createProject(\"client/app-more/tsconfig.json\");\n var staffTypescriptProject = typeScript.createProject(\"client/app-staff/tsconfig.json\");\n@@ -484,6 +485,17 @@ gulp.task('compileSwTypescript-concatScripts',\n }));\n \n \n+gulp.task('compileHeadTypescript', () => {\n+  return compileOtherTypescript(headTypescriptProject);\n+});\n+gulp.task('compileHeadTypescript-concatScripts',\n+        gulp.series('compileHeadTypescript',() => {\n+  return makeConcatStream('head-bundle.js',\n+          // Sync w Makefile. [head_js_files]\n+          ['target/client/head-typescript.js'], 'DoCheckNewer');\n+}));\n+\n+\n gulp.task('compileSlimTypescript', () => {\n   return compileSlimTypescript();\n });\n@@ -570,6 +582,7 @@ gulp.task('bundleZxcvbn', () => {\n gulp.task('compileConcatAllScripts', gulp.series(  // speed up w gulp.parallel? (GLPPPRL)\n   'compileServerTypescriptConcatJavascript',\n   'compileSwTypescript-concatScripts',\n+  'compileHeadTypescript-concatScripts',\n   'compileSlimTypescript-concatScripts',\n   'compileMoreTypescript-concatScripts',\n   // _2dTypescriptProject: disabled\n@@ -752,8 +765,8 @@ gulp.task('bundleFonts', () => {\n   };\n \n   // Change to only 300 and 700, skip 400 and 600?\n-  // Sync -v1 and font sizes with Makefile and Dockerfile woff2 file list. [sync_fonts]\n-  const fontDir = webDestFonts + '/open-sans-v1';\n+  // Sync -vN and font sizes with Makefile and Dockerfile woff2 file list. [sync_fonts]\n+  const fontDir = webDestFonts + '/open-sans-v2';\n   const fontFiles = [\n         'images/web/node_modules/fontsource-open-sans/300.css',\n         'images/web/node_modules/fontsource-open-sans/400.css',\n@@ -823,6 +836,9 @@ gulp.task('watch', gulp.series((done) => {\n       gulp.series('compileSwTypescript-concatScripts'))\n     .on('change', logChangeFn('Service worker typescript'));\n \n+  // Missing: Watch 'compileHeadTypescript-concatScripts',\")\n+  // See throw Error below.\n+\n   gulp.watch(\n       ['client/app-slim/**/*.js', 'client/app-slim/**/*.ts'],\n          // ...slimJsFiles], — maybe generating the typescript.js would trigger a 2nd build?\n@@ -867,6 +883,7 @@ gulp.task('watch', gulp.series((done) => {\n   //    gulp.series('build-security-tests'))\n   //  .on('change', logChangeFn('security test files'));\n \n+  throw Error(\"Missing: Watch 'compileHeadTypescript-concatScripts',\");\n   done();\n }));\n "
    },
    {
      "sha": "485738f9b7a76a3f977efee08e39ae69afe7000d",
      "filename": "images/web/Dockerfile.or",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/images/web/Dockerfile.or",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/images/web/Dockerfile.or",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/images/web/Dockerfile.or?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -297,8 +297,8 @@ COPY \\\n     node_modules/fontsource-open-sans/files/open-sans-????*-300-*.woff* \\\n     node_modules/fontsource-open-sans/files/open-sans-????*-400-*.woff* \\\n     node_modules/fontsource-open-sans/files/open-sans-????*-600-*.woff* \\\n-    # Sync 'open-sans-v1' with Makefile and gulpfile.js. [sync_fonts]\n-    /opt/talkyard/fonts/open-sans-v1/files/\n+    # Sync 'open-sans-vN' with Makefile and gulpfile.js. [sync_fonts]\n+    /opt/talkyard/fonts/open-sans-v2/files/\n \n \n "
    },
    {
      "sha": "b5e008e9998bbf6e1a5caca2398ff5186602f4e7",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/DbDao2.scala",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/DbDao2.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/DbDao2.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/DbDao2.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -82,31 +82,33 @@ class DbDao2(val dbDaoFactory: DbDaoFactory) {\n   }\n \n \n-  def readOnlySystemTransaction[R](fn: (SystemTransaction) => R): R = {\n-    val transaction = dbDaoFactory.newSystemTransaction(readOnly = true)\n+  def readOnlySystemTransaction[R](fn: SysTx => R): R = {\n+    val tx = dbDaoFactory.newSystemTransaction(\n+          readOnly = true, allSitesWriteLocked = false)\n     try {\n-      fn(transaction)\n+      fn(tx)\n     }\n     finally {\n-      transaction.rollback()\n+      tx.rollback()\n     }\n   }\n \n \n   /** Unlike readWriteSiteTransaction, this one doesn't throw OverQuotaException.\n     */\n-  def readWriteSystemTransaction[R](fn: (SystemTransaction) => R): R = {\n-    val transaction = dbDaoFactory.newSystemTransaction(readOnly = false)\n+  def readWriteSystemTransaction[R](fn: SysTx => R, allSitesWriteLocked: Bo): R = {\n+    val tx = dbDaoFactory.newSystemTransaction(\n+          readOnly = false, allSitesWriteLocked = allSitesWriteLocked)\n     var committed = false\n     try {\n-      val result = fn(transaction)\n-      transaction.commit()\n+      val result = fn(tx)\n+      tx.commit()\n       committed = true\n       result\n     }\n     finally {\n       if (!committed) {\n-        transaction.rollback()\n+        tx.rollback()\n       }\n     }\n   }"
    },
    {
      "sha": "6d5dd846110de29fa4bd6efa247bcdf7a537a5ed",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/Page.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/Page.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/Page.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/Page.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -68,6 +68,7 @@ case class PagePathAndMeta(\n \n   def id: PageId = meta.pageId\n   def pageId: PageId = meta.pageId\n+  def idAndVersion: PageIdVersion = meta.idVersion\n   def pathSt: St = path.value\n   def categoryId: Opt[CategoryId] = meta.categoryId\n   def pageType: PageType = meta.pageType\n@@ -331,7 +332,7 @@ case class PageMeta( // ?RENAME to Page? And rename Page to PageAndPosts?  [exp]\n     lastApprovedReplyById.foreach(ids += _)\n   }\n \n-  def idVersion = PageIdVersion(pageId, version = version)\n+  def idVersion: PageIdVersion = PageIdVersion(pageId, version = version)\n \n \n   def copyWithNewVersion: PageMeta = copy(version = version + 1)"
    },
    {
      "sha": "080d917f4b3856956e24d4c9e2a64187c3cb7149",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/SystemTransaction.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/SystemTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/SystemTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/SystemTransaction.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -20,7 +20,9 @@ package com.debiki.core\n import scala.collection.immutable\n \n \n-trait SystemTransaction {\n+trait SystemTransaction {  RENAME // to SysTx, started already\n+  def allSitesWriteLocked: Bo\n+\n   def commit(): Unit\n   def rollback(): Unit\n "
    },
    {
      "sha": "cb98d674103a4d37aed84c77ce1ab533efbf4529",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/dao-db.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/dao-db.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/dao-db.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/dao-db.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -31,10 +31,10 @@ abstract class DbDaoFactory {  CLEAN_UP; // Delete this class? And rename DbDao2\n   final def newDbDao2(): DbDao2 =\n     new DbDao2(this)\n \n-  protected[core] def newSiteTransaction(siteId: SiteId, readOnly: Boolean,\n-    mustBeSerializable: Boolean): SiteTransaction\n+  protected[core] def newSiteTransaction(siteId: SiteId, readOnly: Bo,\n+    mustBeSerializable: Bo): SiteTx\n \n-  protected[core] def newSystemTransaction(readOnly: Boolean): SystemTransaction\n+  protected[core] def newSystemTransaction(readOnly: Bo, allSitesWriteLocked: Bo): SysTx\n \n }\n "
    },
    {
      "sha": "ac8db8a028b4af0cb49f9472cf6417f286424d54",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/package.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -81,6 +81,7 @@ package object core {\n   type ImmSeq[+A] = immutable.Seq[A]\n   val ImmSeq: immutable.Seq.type = immutable.Seq\n \n+  type MutBuf[A] = mutable.Buffer[A]\n   type MutArrBuf[A] = mutable.ArrayBuffer[A]\n   val MutArrBuf: mutable.ArrayBuffer.type = mutable.ArrayBuffer\n \n@@ -124,7 +125,8 @@ package object core {\n   // ... But this should be a string.\n   type AltPageId = String\n \n-  type PageVersion = Int\n+  type PageVersion = Int  // [Scala_3] opaque type ... And so many more here!\n+  val NoVersion: PageVersion = 0\n \n   type CategoryId = Int\n   val NoCategoryId = 0\n@@ -172,6 +174,7 @@ package object core {\n   val NoPermissionId = 0\n   val PermissionAlreadyExistsMinId = 1\n \n+  type SysTx = SystemTransaction\n   type SiteTx = SiteTransaction  // renaming it, wip\n \n   type ConfFileIdpId = St\n@@ -1334,6 +1337,7 @@ package object core {\n   // [weakness] means an issues not yet handled, might lead to a 'vulnerability'\n   // that an attacker / 'threat actor' can 'exploit'.\n   def SECURITY = ()       // Some security issue, not necessarily so very important\n+  def CSP_MISSING = ()    // Content-Security-Policy missing on this page / route\n \n   def SELF_DOS = ()\n   def ASTROTURFING = ()   // Someone creates many accounts and pretends to be many people"
    },
    {
      "sha": "1051915338bd9e689e301cc4bb70397265168b8f",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/permissions.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/permissions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ed-core/src/main/scala/com/debiki/core/permissions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/permissions.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -136,11 +136,12 @@ case class PermsOnPages(  // [exp] ok use. Missing, fine: may_see_private_flagge\n   /** Tells if this permission neither grants nor revokes any rights — if it doesn't, it might\n     * as well be deleted.\n     */\n-  def isEverythingUndefined: Boolean =\n+  def hasNoEffect: Bo =\n     mayEditPage.isEmpty && mayEditComment.isEmpty && mayEditWiki.isEmpty && mayEditOwn.isEmpty &&\n     mayDeletePage.isEmpty && mayDeleteComment.isEmpty && mayCreatePage.isEmpty &&\n     mayPostComment.isEmpty && maySee.isEmpty && maySeeOwn.isEmpty\n \n+  def hasSomeEffect: Bo = !hasNoEffect\n }\n \n "
    },
    {
      "sha": "def9cbb89b1d3a74af862a83c4342cab44f24079",
      "filename": "modules/ed-versions",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-versions?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1 +1 @@\n-Subproject commit b0880b0f187794ea27da2e05344982796e406f98\n+Subproject commit def9cbb89b1d3a74af862a83c4342cab44f24079"
    },
    {
      "sha": "8b5e175c0b2b617c195d213255a5339ce264d04b",
      "filename": "modules/ty-cla",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ty-cla?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1 +1 @@\n-Subproject commit dc4f2e6de25ec2320d92f2052b0aea32a96cb8d1\n+Subproject commit 8b5e175c0b2b617c195d213255a5339ce264d04b"
    },
    {
      "sha": "82f1f9d027b5f79d5e140b16e7774752721f0018",
      "filename": "modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/LinksSiteTxMixin.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/LinksSiteTxMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/LinksSiteTxMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/LinksSiteTxMixin.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -86,7 +86,8 @@ trait LinksSiteTxMixin extends SiteTransaction {\n     val query = s\"\"\"\n           select * from link_previews_t\n           where site_id_c = ?\n-            and link_url_c = ?  \"\"\"\n+            and link_url_c = ?\n+          order by site_id_c, link_url_c, fetched_from_url_c  -- ix: pk  \"\"\"\n     val values = List(siteId.asAnyRef, linkUrl)\n     runQueryFindMany(query, values, rs => {\n       parseLinkPreview(rs)\n@@ -169,6 +170,7 @@ trait LinksSiteTxMixin extends SiteTransaction {\n           select * from links_t\n           where site_id_c = ?\n             and from_post_id_c = ?\n+          order by site_id_c, from_post_id_c, link_url_c  -- ix: pk\n           \"\"\"\n     val values = List(siteId.asAnyRef, postId.asAnyRef)\n     runQueryFindMany(query, values, rs => {\n@@ -179,6 +181,7 @@ trait LinksSiteTxMixin extends SiteTransaction {\n \n   override def loadLinksToPage(pageId: PageId): Seq[Link] = {\n     val query = s\"\"\"\n+        select * from (\n           -- Post to page links.\n           select * from links_t\n           where site_id_c = ?\n@@ -190,8 +193,9 @@ trait LinksSiteTxMixin extends SiteTransaction {\n             and po.unique_post_id = ls.to_post_id_c\n           where po.site_id = ?\n             and po.page_id = ?\n+          ) as lns\n           order by\n-            from_post_id_c, link_url_c \"\"\"\n+            lns.from_post_id_c, lns.link_url_c \"\"\"\n     val values = List(siteId.asAnyRef, pageId, siteId.asAnyRef, pageId)\n     runQueryFindMany(query, values, rs => {\n       parseLink(rs)"
    },
    {
      "sha": "e42b09d4a9e3da594e5126527c420170c76a9748",
      "filename": "modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/Rdb.scala",
      "status": "modified",
      "additions": 45,
      "deletions": 2,
      "changes": 47,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/Rdb.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/Rdb.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/Rdb.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -449,6 +449,46 @@ class Rdb(val readOnlyDataSource: jxs.DataSource, val readWriteDataSource: jxs.D\n   }\n \n \n+  /** If sequential scans are allowed, Postgres sometimes takes whole table locks,\n+    * when not needed — e.g. when 2 different transactions update 2 different\n+    * sites (one each). And this can cause serialization failures,  [PGSERZERR]\n+    * this error text:\n+    *\n+    *   ERROR:  could not serialize access due to read/write dependencies among transactions\n+    *   DETAIL:  Reason code: Canceled on identification as a pivot,\n+    *            during conflict out checking.\n+    *   HINT:  The transaction might succeed if retried.\n+    *\n+    * Maybe enable_seqscan could be a config value — but when a site is huge, indexes\n+    * are \"always\" needed anyway, so, allowing seq scans would just optimize for the\n+    * case when the database is small? which should be fast enough in any case?\n+    *\n+    * See:\n+    *\n+    *   \"\"\"A sequential scan will always necessitate a relation-level predicate lock.\n+    *     This can result in an increased rate of serialization failures\"\"\"\n+    *   https://www.postgresql.org/docs/current/transaction-iso.html#XACT-SERIALIZABLE\n+    *\n+    *   https://stackoverflow.com/q/42288808/694469\n+    *\n+    *   https://stackoverflow.com/questions/12837708/\n+    *        predicate-locking-in-postgresql-9-2-1-with-serializable-isolation\n+    *\n+    * This should be combined with retrying failed transactions (not yet\n+    * implemented) — they have SQLSTATE '40001'.\n+    *\n+    *   \"\"\"[apps that use Serializable isolation level should]  have a generalized way\n+    *     of handling serialization failures (which always return with a SQLSTATE\n+    *     value of '40001'), because it will be very hard to predict exactly which\n+    *     transactions might contribute to the read/write dependencies and need\n+    *     to be rolled back to prevent serialization anomalies\"\"\"\n+    *   https://www.postgresql.org/docs/current/transaction-iso.html#XACT-SERIALIZABLE\n+    */\n+  private def disableSequentialScan(connection: js.Connection): Unit = {\n+    update(\"set enable_seqscan = off\")(connection)\n+  }\n+\n+\n   def query[T](sql: String, binds: List[AnyRef],\n                resultSetHandler: js.ResultSet => T)\n               (implicit conn: js.Connection): T = {\n@@ -650,8 +690,11 @@ class Rdb(val readOnlyDataSource: jxs.DataSource, val readWriteDataSource: jxs.D\n   }\n \n   def getConnection(readOnly: Boolean, mustBeSerializable: Boolean): js.Connection = {\n-    if (readOnly) readOnlyDataSource.getConnection()\n-    else readWriteDataSource.getConnection()\n+    val connection =\n+          if (readOnly) readOnlyDataSource.getConnection()\n+          else readWriteDataSource.getConnection()\n+    disableSequentialScan(connection)\n+    connection\n   }\n \n   def closeConnection(connection: js.Connection) {"
    },
    {
      "sha": "214fdc89b0a9d007b55a593a8e146914da85266f",
      "filename": "modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbDaoFactory.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbDaoFactory.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbDaoFactory.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbDaoFactory.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -18,6 +18,7 @@\n package com.debiki.dao.rdb\n \n import com.debiki.core._\n+import com.debiki.core.Prelude.dieIf\n \n \n /** Constructs per site data access objects, and one global.\n@@ -30,18 +31,20 @@ class RdbDaoFactory(\n   val isTest: Boolean = false) extends DbDaoFactory {\n \n \n-  override def newSiteTransaction(siteId: SiteId, readOnly: Boolean, mustBeSerializable: Boolean)\n-      : SiteTransaction = {\n-    val transaction = new RdbSiteTransaction(siteId, this, getCurrentTime())\n-    transaction.createTheOneAndOnlyConnection(readOnly, mustBeSerializable = mustBeSerializable)\n-    transaction\n+  override def newSiteTransaction(siteId: SiteId, readOnly: Bo, mustBeSerializable: Bo)\n+      : SiteTx = {\n+    val tx = new RdbSiteTransaction(siteId, this, getCurrentTime())\n+    tx.createTheOneAndOnlyConnection(readOnly, mustBeSerializable = mustBeSerializable)\n+    tx\n   }\n \n \n-  override def newSystemTransaction(readOnly: Boolean): SystemTransaction = {\n-    val transaction = new RdbSystemTransaction(this, getCurrentTime())\n-    transaction.createTheOneAndOnlyConnection(readOnly = readOnly)\n-    transaction\n+  override def newSystemTransaction(readOnly: Bo, allSitesWriteLocked: Bo): SysTx = {\n+    dieIf(readOnly && allSitesWriteLocked, \"TyE603MRP23\")\n+    val tx = new RdbSystemTransaction(\n+          this, getCurrentTime(), allSitesWriteLocked = allSitesWriteLocked)\n+    tx.createTheOneAndOnlyConnection(readOnly = readOnly)\n+    tx\n   }\n \n }"
    },
    {
      "sha": "21890007593d4dc0225f632030ab157b2eba6971",
      "filename": "modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbSiteTransaction.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbSiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbSiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbSiteTransaction.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -66,10 +66,13 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n \n   def db: Rdb = daoFactory.db\n \n-  /** Lets us call SystemTransaction functions, in the same transaction.\n+  /** Lets us call SystemTransaction functions, in the same transaction. ...\n     */\n   lazy val asSystem: RdbSystemTransaction = {\n-    val transaction = new RdbSystemTransaction(daoFactory, now)\n+    val transaction = new RdbSystemTransaction(\n+          // ... but we won't accidentally call fns that assume we have\n+          // a whole db write lock?\n+          daoFactory, now, allSitesWriteLocked = false)\n     transaction.setTheOneAndOnlyConnection(theOneAndOnlyConnection)\n     transaction\n   }\n@@ -105,8 +108,8 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n   // COULD move to new superclass?\n   def createTheOneAndOnlyConnection(readOnly: Boolean, mustBeSerializable: Boolean) {\n     require(_theOneAndOnlyConnection.isEmpty)\n-    _theOneAndOnlyConnection = Some(db.getConnection(\n-      readOnly = readOnly, mustBeSerializable = mustBeSerializable))\n+    _theOneAndOnlyConnection = Some(\n+          db.getConnection(readOnly = readOnly, mustBeSerializable = mustBeSerializable))\n   }\n \n   // COULD move to new superclass?"
    },
    {
      "sha": "9e5370593e1583375ee3c800a7e8a4ac14982245",
      "filename": "modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -29,9 +29,14 @@ import RdbUtil._\n \n \n \n-class RdbSystemTransaction(val daoFactory: RdbDaoFactory, val now: When)\n+class RdbSystemTransaction(\n+  val daoFactory: RdbDaoFactory,\n+  val now: When,\n+  val allSitesWriteLocked: Bo,\n+  )\n   extends SystemTransaction with CreateSiteSystemDaoMixin {\n \n+\n   def db: Rdb = daoFactory.db\n \n \n@@ -60,7 +65,8 @@ class RdbSystemTransaction(val daoFactory: RdbDaoFactory, val now: When)\n \n   def createTheOneAndOnlyConnection(readOnly: Boolean) {\n     require(_theOneAndOnlyConnection.isEmpty, \"DwE8PKW2\")\n-    _theOneAndOnlyConnection = Some(db.getConnection(readOnly, mustBeSerializable = true))\n+    _theOneAndOnlyConnection = Some(\n+          db.getConnection(readOnly, mustBeSerializable = true))\n   }\n \n "
    },
    {
      "sha": "17fcf98a84b4dd6c3c06f206f93af4748978d86b",
      "filename": "node_modules",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/node_modules?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1 +1 @@\n-Subproject commit 1c4d3d66b5887ef65cf0198d48a29abfd419b4a5\n+Subproject commit 17fcf98a84b4dd6c3c06f206f93af4748978d86b"
    },
    {
      "sha": "d31ecd97972d29e3bfd451803e34d54862a53fec",
      "filename": "package.json",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/package.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/package.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/package.json?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -43,6 +43,7 @@\n   \"devDependencies\": {\n     \"@types/assert\": \"^1.4.7\",\n     \"@types/jest\": \"^26.0.19\",\n+    \"@types/markdown-it\": \"^12.0.1\",\n     \"@types/minimist\": \"^1.2.1\",\n     \"@types/node\": \"^14.14.13\",\n     \"@types/supertest\": \"^2.0.10\","
    },
    {
      "sha": "b3f384aa5fa69036113cfad071f20a1b3d3a78fd",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -310,13 +310,14 @@ function runAllE2eTests {\n \n   $r s/wdio --only votes-and-best-first $args\n \n-  # RENAME to internal-backlinks.2br? (but not link-previews)\n+  # RENAME to internal-inline-link-previews-and-backlinks.2br?\n   $r s/wdio --only links-internal.2browsers $args\n \n   $r s/wdio --only link-previews-internal-may-see.2br $args\n   $r s/wdio --only link-previews-internal-not-see-cat.2br $args\n-  $r s/wdio --only embed-images-mp4-youtube.1br.extln $args\n-  $r s/wdio --only embed-twitter-tweets-etc.1br.extln $args\n+  $r s/wdio --only link-previews-http-to-https.1br $args\n+  $r s/wdio --only link-previews-images-mp4-youtube.1br.extln $args\n+  $r s/wdio --only link-previews-twitter-max-editor.1br.extln $args\n   $r s/wdio --only link-previews-all-others.1br.extln $args\n \n "
    },
    {
      "sha": "ee9f36a6cd9e18f562381871cff5dd18ecc8370b",
      "filename": "tests/app/debiki/dao/CreateSiteDaoAppSpec.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/app/debiki/dao/CreateSiteDaoAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/app/debiki/dao/CreateSiteDaoAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/debiki/dao/CreateSiteDaoAppSpec.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -95,7 +95,7 @@ class CreateSiteDaoAppSpec extends DaoAppSuite(maxSitesTotal = Some(75)) {\n     }\n \n     \"lookup site by public id, name and hostname\" in {\n-      globals.systemDao.dangerous_readWriteTransaction { tx =>\n+      globals.systemDao.writeTxLockAllSites { tx =>\n         info(\"by public id\")\n         tx.loadSiteByPubId(sitePubId1000.pubId).map(_.id) mustBe Some(sitePubId1000.id)\n \n@@ -117,7 +117,7 @@ class CreateSiteDaoAppSpec extends DaoAppSuite(maxSitesTotal = Some(75)) {\n     }\n \n     \"lookup many sites\" in {\n-      globals.systemDao.dangerous_readWriteTransaction { tx =>\n+      globals.systemDao.writeTxLockAllSites { tx =>\n         tx.loadSitesByIds(Nil).length mustBe 0\n         tx.loadSitesByIds(Seq(345678)).length mustBe 0\n \n@@ -131,13 +131,13 @@ class CreateSiteDaoAppSpec extends DaoAppSuite(maxSitesTotal = Some(75)) {\n     }\n \n     \"update and read back\" in {\n-      globals.systemDao.dangerous_readWriteTransaction { tx =>\n+      globals.systemDao.writeTxLockAllSites { tx =>\n         tx.updateSites(Seq(SuperAdminSitePatch(\n               sitePubId1000.id, SiteStatus.HiddenUnlessAdmin,\n               newNotes = Some(\"notes_notes\"),\n               featureFlags = \"ffTestFlagOne ffTestFlag2\")))\n       }\n-      globals.systemDao.dangerous_readWriteTransaction { tx =>\n+      globals.systemDao.writeTxLockAllSites { tx =>\n         val site = tx.loadSiteInclDetailsById(sitePubId1000.id).get\n         site.superStaffNotes mustBe Some(\"notes_notes\")\n         site.featureFlags mustBe \"ffTestFlagOne ffTestFlag2\"\n@@ -146,7 +146,7 @@ class CreateSiteDaoAppSpec extends DaoAppSuite(maxSitesTotal = Some(75)) {\n     }\n \n     \"load all sites incl details, and staff\" in {\n-      globals.systemDao.dangerous_readWriteTransaction { tx =>\n+      globals.systemDao.writeTxLockAllSites { tx =>\n         // Just run the queries? for now\n \n         info(\"all sites\")"
    },
    {
      "sha": "0619dacd44ed6507821650c59e3329fd20e47dda",
      "filename": "tests/app/talkyard/server/linkpreview/LinkPreviewRendererSpec.scala",
      "status": "added",
      "additions": 142,
      "deletions": 0,
      "changes": 142,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/app/talkyard/server/linkpreview/LinkPreviewRendererSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/app/talkyard/server/linkpreview/LinkPreviewRendererSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/talkyard/server/linkpreview/LinkPreviewRendererSpec.scala?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2021 Debiki AB\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package talkyard.server.linkpreview\n+\n+\n+import org.scalatest._\n+import org.scalatest.matchers.must\n+import com.debiki.core.Prelude._\n+import com.debiki.core._\n+import debiki.onebox.engines.TwitterPrevwRendrEng\n+\n+\n+class LinkPreviewRendererSpec extends FreeSpec with must.Matchers {\n+\n+  def tweakLinks(htmlSt: St, toHttps: Bo, uploadsUrlCdnPrefix: Opt[St],\n+        followLinksSkipNoopener: Bo = false,\n+        siteId_unused: SiteId = NoSiteId, sitePubId_unused: PubSiteId = \"\"): St = {\n+    debiki.onebox.LinkPreviewRenderer.tweakLinks(htmlSt, toHttps,\n+          uploadsUrlCdnPrefix = uploadsUrlCdnPrefix,\n+          followLinksSkipNoopener = followLinksSkipNoopener,\n+          siteId_unused = siteId_unused, sitePubId_unused = sitePubId_unused)\n+  }\n+\n+\n+  \"LinkPreviewRenderer.tweakLinks can\" - {\n+    \"leave non-links as is\" in {\n+      tweakLinks(\"\", toHttps = true, uploadsUrlCdnPrefix = None) mustBe \"\"\n+      tweakLinks(\"abc\", toHttps = true, uploadsUrlCdnPrefix = None) mustBe \"abc\"\n+\n+      // Not a link — just plain text:\n+      tweakLinks(\"http://ex.co\", toHttps = true, uploadsUrlCdnPrefix = None\n+            ) mustBe \"http://ex.co\"\n+    }\n+\n+\n+    \"change to https\" in {\n+      def htmlWithLink(https: Bo): St = {\n+        val scheme = if (https) \"https\" else \"http\"\n+        o\"\"\"bla blah\n+        <a href=\"$scheme://ex.co\">http://not.link.co</a>\n+        <a name=\"http://not.link.ex.co\"></a>\n+        <area href=\"$scheme://ex.co\">\n+        <img src=\"$scheme://ex.co\">\n+        <img alt=\"http://not_link.ex.co\">\n+        blah\n+        \"\"\"\n+      }\n+\n+      tweakLinks(htmlWithLink(false), toHttps = true,\n+            uploadsUrlCdnPrefix = None) mustBe htmlWithLink(true)\n+\n+      tweakLinks(htmlWithLink(false), toHttps = false,\n+            uploadsUrlCdnPrefix = None) mustBe htmlWithLink(false)\n+    }\n+\n+\n+    \"re-point to CDN\" in {\n+      def htmlWithUplLink(https: Bo, uplPath: St = \"/-/u/\"): St = {\n+        o\"\"\"bla blah\n+        <img src=\"${uplPath}3/a/bc/defg1234.jpg\">\n+        bla2 blah2\n+        \"\"\"\n+      }\n+\n+      tweakLinks(htmlWithUplLink(https = false), toHttps = false,\n+            uploadsUrlCdnPrefix = None) mustBe htmlWithUplLink(false)\n+\n+      tweakLinks(htmlWithUplLink(https = false), toHttps = false,\n+            uploadsUrlCdnPrefix = Some(\"https://cdn.ex.co/-/u/\")\n+            ) mustBe htmlWithUplLink(false, \"https://cdn.ex.co/-/u/\")\n+    }\n+\n+\n+    \"add rel='noopener' to <a>\" in {\n+      tweakLinks(\"\"\"<a href=\"https://ex.co\" target=\"_blank\">title</a>\"\"\",\n+          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+                       target=\"_blank\" rel=\"noopener\">title</a>\"\"\"\n+\n+      tweakLinks(\"\"\"<a href=\"https://ex.co\" target=\"_blank\" rel=\"nofollow\">title</a>\"\"\",\n+          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+                       target=\"_blank\" rel=\"nofollow noopener\">title</a>\"\"\"\n+\n+      tweakLinks(\"\"\"<a href=\"https://ex.co\" target=\"_blank\" rel=\"zznoopener\">title</a>\"\"\",\n+          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+                       target=\"_blank\" rel=\"zznoopener noopener\">title</a>\"\"\"\n+\n+      tweakLinks(\"\"\"<a href=\"https://ex.co\" target=\"_blank\" rel=\"noopenerzz\">title</a>\"\"\",\n+          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+                       target=\"_blank\" rel=\"noopenerzz noopener\">title</a>\"\"\"\n+\n+      tweakLinks(\"\"\"<a href=\"https://ex.co\" target=\"_blank\" rel=\"noOPEner\">title</a>\"\"\",\n+          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+                       target=\"_blank\" rel=\"noOPEner noopener\">title</a>\"\"\"\n+    }\n+\n+\n+    \"can skip add rel='noopener'\" in {\n+      val aHref = \"\"\"<a href=\"https://ex.co\" target=\"_blank\">title</a>\"\"\"\n+      tweakLinks(aHref, toHttps = true, uploadsUrlCdnPrefix = None,\n+            followLinksSkipNoopener = true) mustBe aHref\n+    }\n+\n+\n+    \"both rel='noopener' and https\" in {\n+      tweakLinks(\"\"\"<a href=\"http://ex.co\" target=\"_blank\">title</a>\"\"\",\n+          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+                       target=\"_blank\" rel=\"noopener\">title</a>\"\"\"\n+    }\n+\n+    \"both rel='noopener' and CDN\" in {\n+      tweakLinks(\"\"\"<a href=\"/-/u/3/a/bc/defg1234.doc\" target=\"_blank\">lnk</a>\"\"\",\n+            toHttps = true, uploadsUrlCdnPrefix = Some(\"https://cdn2.co/-/u/\"),\n+            ) mustBe o\"\"\"<a href=\"https://cdn2.co/-/u/3/a/bc/defg1234.doc\"\n+                           target=\"_blank\" rel=\"noopener\">lnk</a>\"\"\"\n+    }\n+\n+\n+    \"add rel='noopener' to <area>\" in {\n+      tweakLinks(\"\"\"<area href=\"https://ex.co\" target=\"_blank\"> abc\"\"\",\n+            toHttps = true, uploadsUrlCdnPrefix = None\n+            ) mustBe o\"\"\"<area href=\"https://ex.co\" target=\"_blank\" rel=\"noopener\"> abc\"\"\"\n+    }\n+  }\n+\n+}\n+\n+"
    },
    {
      "sha": "da8e1cf979c438077cbbb4849a96f81d337b9034",
      "filename": "tests/e2e/specs/__e2e-test-template__.2br.test.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/__e2e-test-template__.2br.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/__e2e-test-template__.2br.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/__e2e-test-template__.2br.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -36,7 +36,7 @@ let mallory_brB: TyE2eTestBrowser;\n let stranger_brB: TyE2eTestBrowser;\n \n let site: IdAddress;\n-let forum: TwoPagesTestForum;  // or EmptyTestForum or LargeTestForum\n+let forum: TwoCatsTestForum;  // or TwoPagesTestForum or EmptyTestForum or LargeTestForum\n \n let michaelsTopicUrl: St;\n let mariasTopicUrl: St;\n@@ -56,7 +56,7 @@ describe(`some-e2e-test  TyTE2E1234ABC`, () => {\n \n   it(`construct site`, () => {\n     const builder = buildSite();\n-    forum = builder.addTwoPagesForum({  // or addEmptyForum or addLargeForum\n+    forum = builder.addTwoCatsForum({ // or addTwoPagesForum, addEmptyForum, addLargeForum\n       title: \"Some E2E Test\",\n       members: undefined, // default = everyone\n         // ['mons', 'modya', 'regina', 'corax', 'memah', 'maria', 'michael', 'mallory']"
    },
    {
      "sha": "f7a7618cf01972677a4e95c66db10726b0c3219f",
      "filename": "tests/e2e/specs/create-site-github-uppercase-email.1br.extidp.test.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/create-site-github-uppercase-email.1br.extidp.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/create-site-github-uppercase-email.1br.extidp.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/create-site-github-uppercase-email.1br.extidp.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -25,6 +25,10 @@ describe('create-site-github-oauth-uppercase-email  @createsite  @login @github\n     return;\n   }\n \n+  if (settings.secure) {\n+    die(\"GitHub authn e2e test creds currently use http [TyE8020756SRM]\");\n+  }\n+\n   it('initialize', () => {\n     browser = new TyE2eTestBrowser(wdioBrowser);\n   });"
    },
    {
      "sha": "b1220c87548bb411f8f90c7e79c17a9d338df896",
      "filename": "tests/e2e/specs/create-site-linkedin.1br.extidp.test.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/create-site-linkedin.1br.extidp.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/create-site-linkedin.1br.extidp.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/create-site-linkedin.1br.extidp.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -20,6 +20,10 @@ describe('create-site-linkedin  @createsite @login @linkedin  TyT402KDTT5Z', ()\n     return;\n   }\n \n+  if (settings.secure) {\n+    die(\"LinkedIn authn e2e test creds currently use http [TyE8020756PM3]\");\n+  }\n+\n   it('initialize', () => {\n     browser = new TyE2eTestBrowser(wdioBrowser);\n   });"
    },
    {
      "sha": "d21b6d8fc3c90b95f9c194570842cc4d9a7d8bf2",
      "filename": "tests/e2e/specs/embcom.manua.2br.test.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/embcom.manua.2br.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/embcom.manua.2br.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embcom.manua.2br.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -58,8 +58,9 @@ describe(`embcom.manual.2br.test.ts  TyTE2EEMBCOMMAN`, () => {\n       site = {\n         id: -1,\n         pubId: '?',\n-        origin: 'http://' + localHostname + '.localhost',\n+        origin: settings.proto2Slash + localHostname + '.localhost',\n         siteIdOrigin: '?',\n+        cdnOriginOrEmpty: '',\n       };\n     }\n     else {"
    },
    {
      "sha": "584f0b310e02e65ad497aca2b74fe5d1efbd8e85",
      "filename": "tests/e2e/specs/embedded-comments-uploads-origin.test.ts",
      "status": "modified",
      "additions": 46,
      "deletions": 8,
      "changes": 54,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/embedded-comments-uploads-origin.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/embedded-comments-uploads-origin.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-comments-uploads-origin.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -2,6 +2,7 @@\n \n import * as _ from 'lodash';\n import assert = require('assert');\n+import tyAssert = require('../utils/ty-assert');\n import fs = require('fs');\n import server = require('../utils/server');\n import utils = require('../utils/utils');\n@@ -10,6 +11,7 @@ import settings = require('../utils/settings');\n import make = require('../utils/make');\n import logAndDie = require('../utils/log-and-die');\n import c = require('../test-constants');\n+import { dieIf } from '../utils/log-and-die';\n \n let everyonesBrowsers;\n let maria: Member;\n@@ -27,15 +29,17 @@ const uplFileLinkOne = (origin: string, sitePubId: string) =>\n const uplFileLinkTwo = (origin: string, sitePubId: string) =>\n   `${origin}/-/u/${sitePubId ? sitePubId + '/' : ''}dummyfilepathtwo.pdf`;\n \n-const extImgLink  = 'https://elsewhere.example.com/ext-img.jpg';\n+const extImgHttp  = 'http://elsewhere.example.com/ext-img.jpg'\n+const extImgHttps  = extImgHttp.replace('http:', 'https');\n+const extImgHttpsMaybe = settings.secure ? extImgHttps : extImgHttp; // https iff server https\n const extFileLink = 'https://elsewhere.example.com/document.pdf';\n const extFile2Link = 'https://galaxytwo.example.com/doctwo.odf';\n \n \n const mariasImageLinksOrig = `\n ![uploaded img descr](${uplImgLink('', '')})\n \n-![external img descr](${extImgLink})\n+![external img descr](${extImgHttps})\n \n [uploaded-doc-one.pdf](${uplFileLinkOne('', '')})\n \n@@ -103,8 +107,8 @@ describe(\"emb cmts uploads origin  TyT603RKDJA6\", () => {\n \n   it(`... which, in the preview, get prefixed w any CDN, or the Ty site origin`, () => {\n     correctLinksRegexStr =\n-      'src=\"' + uplImgLink(site.cdnOrSiteOrigin, site.pubId) + '\".*' +\n-      'src=\"' + extImgLink + '\".*' +\n+      'src=\"' + uplImgLink(site.cdnOrSiteOrigin, site.pubId) + '\".*' +   // [E2ECDN]\n+      'src=\"' + extImgHttps + '\".*' +\n       'href=\"' + uplFileLinkOne(site.cdnOrSiteOrigin, site.pubId) + '\".*' +\n       'href=\"' + uplFileLinkTwo(site.cdnOrSiteOrigin, site.pubId) + '\".*' +\n       'href=\"' + extFileLink + '\".*' +\n@@ -128,7 +132,7 @@ describe(\"emb cmts uploads origin  TyT603RKDJA6\", () => {\n   });\n \n   it(\"... also after reload\", () => {\n-    mariasBrowser.refresh();\n+    mariasBrowser.refresh2();\n     mariasBrowser.switchToEmbeddedCommentsIrame();\n     mariasBrowser.topic.waitUntilPostHtmlMatches(c.FirstReplyNr, correctLinksRegexStr);\n   });\n@@ -153,13 +157,32 @@ describe(\"emb cmts uploads origin  TyT603RKDJA6\", () => {\n   });\n \n   it(\"... also after reload, this time too\", () => {\n-    mariasBrowser.refresh();\n+    mariasBrowser.refresh2();\n     mariasBrowser.switchToEmbeddedCommentsIrame();\n     mariasBrowser.topic.waitUntilPostHtmlMatches(c.FirstReplyNr,\n         correctLinksRegexStr + '.*Extra_text');\n   });\n \n \n+  // ----- HTTP and HTTPS\n+\n+  // http upload links changed to https?  TyT6930MRDN4\n+\n+  it(`She posts an uploads link with http:`, () => {\n+    mariasBrowser.complex.replyToEmbeddingBlogPost(extImgHttp);\n+  });\n+\n+  it(`... image url changed to https, iff Ty server uses https  1/2`, () => {\n+    tyAssert.eq(site.origin.startsWith('https:'),  // ttt\n+          extImgHttpsMaybe.startsWith('https:'));\n+    tyAssert.eq(site.origin.startsWith('http:'),  // ttt\n+          extImgHttpsMaybe.startsWith('http:'));\n+\n+    mariasBrowser.topic.waitUntilPostHtmlMatches(   // [E2EHTTPS]\n+          c.FirstReplyNr + 1, `src=\"${extImgHttpsMaybe}\"`);\n+  });\n+\n+\n   // ----- Add image, directly via Talkyards server\n \n   it(\"Maria goes to the Talkard server, the topics list\", () => {\n@@ -180,8 +203,8 @@ describe(\"emb cmts uploads origin  TyT603RKDJA6\", () => {\n           — not needed; relative URLs work fine, since not embedded in an iframe.\n           However, if we use a CDN, they'll point to the CDN`, () => {\n     correctLinksRegexStrNoOrigin =\n-        'src=\"' + uplImgLink(site.cdnOriginOrEmpty, site.pubId) + '\".*' +\n-        'src=\"' + extImgLink + '\".*' +\n+        'src=\"' + uplImgLink(site.cdnOriginOrEmpty, site.pubId) + '\".*' +  // [E2ECDN]\n+        'src=\"' + extImgHttps + '\".*' +\n         'href=\"' + uplFileLinkOne(site.cdnOriginOrEmpty, site.pubId) + '\".*' +\n         'href=\"' + uplFileLinkTwo(site.cdnOriginOrEmpty, site.pubId) + '\".*' +\n         'href=\"' + extFileLink + '\".*' +\n@@ -197,5 +220,20 @@ describe(\"emb cmts uploads origin  TyT603RKDJA6\", () => {\n     mariasBrowser.topic.waitUntilPostHtmlMatches(c.FirstReplyNr, correctLinksRegexStrNoOrigin);\n   });\n \n+\n+  // ----- HTTP and HTTPS\n+\n+  // Now directly via the Ty server, not the embedding website / blog.  TyT6930MRDN4\n+\n+  it(`She posts an uploads link with http:`, () => {\n+    mariasBrowser.complex.replyToOrigPost(extImgHttp);\n+  });\n+\n+  it(`... image url changed to https, iff Ty server uses https  2/2`, () => {\n+    mariasBrowser.topic.waitUntilPostHtmlMatches(\n+          c.FirstReplyNr + 1, `src=\"${extImgHttpsMaybe}\"`); // [E2EHTTPS]\n+  });\n+\n+\n });\n "
    },
    {
      "sha": "26adb056c28186344ecd4bf1008c2d37fa886eb4",
      "filename": "tests/e2e/specs/link-previews-http-to-https.1br.test.ts",
      "status": "added",
      "additions": 262,
      "deletions": 0,
      "changes": 262,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/link-previews-http-to-https.1br.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/link-previews-http-to-https.1br.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/link-previews-http-to-https.1br.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -0,0 +1,262 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('../utils/ty-assert');\n+// import fs = require('fs');  EMBCMTS\n+import server = require('../utils/server');\n+import utils = require('../utils/utils');\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings = require('../utils/settings');\n+import lad = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+\n+///\n+/// Tests that a Ty server changes a http://link-preview.ex.co url to https:\n+/// iff the server uses https.\n+///\n+\n+\n+let everyonesBrowsers: TyAllE2eTestBrowsers;\n+let richBrowserA: TyE2eTestBrowser;\n+let owen: Member;\n+let maria: Member;\n+let maria_brA: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+const mariasTopicTitle = \"HTTPS and CDN link previews test\";\n+\n+let owensTopicUrl: St;\n+\n+const owensTopicTitle =\n+        'Title with http://not.title.link.com and ' +\n+        '<a href=\"http://not.title.link2.co\">http://not.title.link.co</a> ' +\n+        'and https://https-link.ex.co';\n+\n+// These link looking things in the title were handled as plain text\n+// — because the whole title itself is a link to the preview-linked topic.\n+// So didn't get changed to https:.\n+const expectedTopicLinkPreviewTitleHtml = (postNr: Nr): St =>\n+        '>Title with http://not.title.link.com and ' +\n+        '&lt;a href=\"http://not.title.link2.co\"&gt;' +\n+        'http://not.title.link.co&lt;/a&gt; and ' +\n+        'https://https-link.ex.co' +\n+        (postNr === c.BodyNr ? '' : ` #post-${postNr}`) +\n+        '</a>';\n+\n+const owensTopicBody = `\n+Body with http://real.body.link.com and\n+<a href=\"http://real.body.link2.com\">http://not.body.link.co</a>\n+and https://https-link.ex.co\n+and a script? <script>alert(1)</script> gone?`;   // [e2e_xss]\n+\n+// This is the post excerpt, just plain text (in a quote tag) — any\n+// link <a> tags gone, but the text content (inside the <a>) is here.\n+const expectedTopicLinkPreviewBlockquoteHtml =\n+        '<blockquote>Body with http://real.body.link.com and ' +\n+        'http://not.body.link.co and https://https-link.ex.co ' +\n+        'and a script? gone?</blockquote>';\n+\n+\n+const owensReplyUrl = () => `${owensTopicUrl}#post-${c.FirstReplyNr}`;\n+\n+const linkMaybeInCode = '<a href=\"http://linkone.ex.co\">ln_txt</a>';\n+const owensReply = `owensReply\n+http://not-link-1.ex.co\n+\n+${linkMaybeInCode}\n+<code>${linkMaybeInCode}</code>\n+<pre><code>${linkMaybeInCode}\n+</code></pre>\n+\n+http: http:// not links.\n+\n+&lt;a href=\"http://teeext.ex.co\"&gt;http://not.link.ex.co&lt;/a&gt;\n+\n+<a href=\"http://real-link-2.ex.co\">http://not.link.ex.co</a>\n+<a href=\"#\" name=\"http://not.link.ex.co\">http://not.ex.co</a>\n+\n+<img src=\"http://real-link.example.com/img.jpg\">\n+<img src=\"\" alt=\"http://not-link.example.com/img.jpg\">\n+another script: <script>alert(1)</script> banished?`;   // [e2e_xss]\n+\n+const expectedReplyLinkPreviewBlockquoteHtml =\n+        '<blockquote>owensReply http://not-link-1.ex.co ' +\n+        'ln_txt ln_txt ln_txt' +\n+        '\\n ' + // there's a newline in the <pre>\n+        'http: http:// not links. ' +\n+        '&lt;a href=\"http://teeext.ex.co\"&gt;http://not.link.ex.co&lt;/a&gt; ' +\n+        'http://not.link.ex.co http://not.ex.co another script: banished?' +\n+        '</blockquote>';\n+\n+\n+\n+describe(`link-previews-http-to-https.1br.test.ts  TyTE2ELNPVHTTPS`, () => {\n+\n+  it(`construct site`, () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Internal Link Previews E2E Test\",\n+      members: ['owen', 'maria']\n+    });\n+\n+    const newPage: PageJustAdded = builder.addPage({\n+      id: 'owens_http_text_page',\n+      folder: '/',\n+      showId: false,\n+      slug: 'owens-http-text-page',\n+      role: c.TestPageRole.Discussion,\n+      title: owensTopicTitle,\n+      body: owensTopicBody,\n+      categoryId: forum.categories.categoryA.id,\n+      authorId: forum.members.owen.id,\n+    });\n+\n+    builder.addPost({\n+      page: newPage,\n+      nr: c.FirstReplyNr,\n+      parentNr: c.BodyNr,\n+      authorId: forum.members.owen.id,\n+      approvedSource: owensReply,\n+    });\n+\n+    everyonesBrowsers = new TyE2eTestBrowser(allWdioBrowsers);\n+    richBrowserA = new TyE2eTestBrowser(wdioBrowserA);\n+\n+    owen = forum.members.owen;\n+\n+    maria = forum.members.maria;\n+    maria_brA = richBrowserA;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`import site`, () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+    owensTopicUrl = site.origin + '/owens-http-text-page';\n+  });\n+\n+\n+  it(`Maria logs in to the topic index page`, () => {\n+    maria_brA.go2(site.origin);\n+    maria_brA.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+\n+\n+  it(`Maria starts composing a new topic`, () => {\n+    maria_brA.forumButtons.clickCreateTopic();\n+    maria_brA.editor.editTitle(mariasTopicTitle);\n+  });\n+\n+\n+\n+  // ----- Test http —> https in preview\n+\n+\n+  it(`She adds a link to Owen's topic — but http not https;\n+          the server will change to https iff it uses https`, () => {\n+    const owensTopicUrlButHttp = owensTopicUrl.replace('https:', 'http:'); // (to_http)\n+    assert.ok(owensTopicUrlButHttp.startsWith('http:')); // ttt\n+    maria_brA.editor.editText(owensTopicUrlButHttp);\n+  });\n+\n+\n+  it(`... a link preview appears, in the new topic preview`, () => {\n+    const previewOkSelector = utils.makeLinkPreviewSelector('InternalLink');\n+    maria_brA.preview.waitForExist(previewOkSelector, { where: 'InEditor' });\n+  });\n+\n+  let linkPreviewHtml: St;\n+\n+  it(`... the http: plain text in the preview wasn't changed to https:`, () => {\n+    linkPreviewHtml = maria_brA.waitAndGetVisibleHtml(\n+          utils.makePreviewOkSelector('InternalLink'));\n+\n+    assert.includes(linkPreviewHtml, expectedTopicLinkPreviewTitleHtml(c.BodyNr));\n+    assert.includes(linkPreviewHtml, expectedTopicLinkPreviewBlockquoteHtml);\n+  });\n+\n+\n+  it(`... but the link to the topic got changed to https: — iff https in use`, () => {\n+    // owensTopicUrl is https already, if the server runs https\n+    // — although we saved it as http see: (to_http).\n+    assert.ok(owensTopicUrl.startsWith('https:') === !!settings.secure, // ttt\n+          `Wrong scheme: ${owensTopicUrl}`);\n+    assert.includes(linkPreviewHtml, `<a href=\"${owensTopicUrl}\"`);\n+  });\n+\n+\n+\n+  // ----- Test http —> https in new topic\n+\n+\n+  it(`Maria submits the new topic`, () => {\n+    maria_brA.complex.saveTopic({ title: mariasTopicTitle });\n+  });\n+\n+\n+  it(`In the new topic, there're 1 ok internal link previews`, () => {\n+    const previewOkSelector = utils.makeLinkPreviewSelector('InternalLink');\n+    maria_brA.topic.waitForExistsInPost(c.BodyNr, previewOkSelector, { howMany: 1 });\n+  });\n+\n+\n+  it(`... and there's the previewed topic's title and body — with any http: inside\n+        unchanged, since that's plain text, not links`, () => {\n+    linkPreviewHtml = maria_brA.topic.getPostHtml(c.BodyNr);\n+    assert.includes(linkPreviewHtml, expectedTopicLinkPreviewTitleHtml(c.BodyNr));\n+    assert.includes(linkPreviewHtml, expectedTopicLinkPreviewBlockquoteHtml);\n+  });\n+\n+\n+  it(`... the actual link to the topic got changed to https (if server https)`, () => {\n+    assert.includes(linkPreviewHtml, `<a href=\"${owensTopicUrl}\"`);\n+  });\n+\n+\n+\n+  // ----- Test http —> https in new reply\n+\n+\n+  it(`Maria posts a http (not https) link to Owen's reply`, () => {\n+    const replyUrlHttp = owensReplyUrl().replace('https:', 'http:'); // (to_http)\n+    assert.ok(replyUrlHttp.startsWith('http:')); // ttt\n+    maria_brA.complex.replyToOrigPost(replyUrlHttp);\n+  });\n+\n+\n+  it(`In Maria's reply, there's a preview of the linked page title and Owen's reply\n+        — with any http: inside unchanged, since is plain text`, () => {\n+    const html = maria_brA.topic.getPostHtml(c.FirstReplyNr);\n+    assert.includes(html, expectedTopicLinkPreviewTitleHtml(c.FirstReplyNr));\n+    assert.includes(html, expectedReplyLinkPreviewBlockquoteHtml);\n+\n+    // Is https if the server runs https.\n+    assert.ok(owensReplyUrl().startsWith('https:') === !!settings.secure, // ttt\n+          `Wrong scheme: ${owensReplyUrl()}`);\n+    assert.includes(html, `<a href=\"${owensReplyUrl()}\"`);\n+  });\n+\n+\n+  const owensReplyHttps = (): St => owensReplyUrl().replace('http:', 'https:');\n+\n+  it(`Maria posts a https link to Owen's reply`, () => {\n+    assert.ok(owensReplyHttps().startsWith('https:'), owensReplyHttps()); // ttt\n+    maria_brA.complex.replyToOrigPost(owensReplyHttps());\n+  });\n+\n+\n+  it(`... the resulting reply html uses https: (not changed to http:\n+            even if the server uses http not https)`, () => {\n+    const html = maria_brA.topic.getPostHtml(c.FirstReplyNr + 1);\n+    // (Owen's reply is FirstReplyNr — but Maria's, on this different page, is +1).\n+    assert.includes(html, expectedTopicLinkPreviewTitleHtml(c.FirstReplyNr));\n+    assert.includes(html, expectedReplyLinkPreviewBlockquoteHtml);\n+    assert.includes(html, `<a href=\"${owensReplyHttps()}\"`);\n+  });\n+\n+});"
    },
    {
      "sha": "47759f856bb5f6bf066e211f0478defff11757d1",
      "filename": "tests/e2e/specs/link-previews-images-mp4-youtube.1br.extln.test.ts",
      "status": "renamed",
      "additions": 82,
      "deletions": 28,
      "changes": 110,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/link-previews-images-mp4-youtube.1br.extln.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/link-previews-images-mp4-youtube.1br.extln.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/link-previews-images-mp4-youtube.1br.extln.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -10,6 +10,7 @@ import settings = require('../utils/settings');\n import make = require('../utils/make');\n import logAndDie = require('../utils/log-and-die');\n import c = require('../test-constants');\n+import * as tyAssert from '../utils/ty-assert';\n \n let browser: TyE2eTestBrowser;\n \n@@ -31,6 +32,7 @@ const dotOneboxClass = '.s_LnPv';\n // [no_insec_emb] [E2EHTTPS]\n const slashImageJpgUrl = '//www.example.com/image.jpg';\n const httpImageJpgUrl = `http:${slashImageJpgUrl}`;\n+const httpsImageJpgUrl = `https:${slashImageJpgUrl}`;\n const imageJpgUrl = `${settings.scheme}:${slashImageJpgUrl}`;\n \n // Let's use some more http links, unless the server uses https. [E2EHTTPS]\n@@ -50,6 +52,34 @@ const videoYouTubeOnebox =\n     `aside.s_LnPv.s_LnPv-YouTube iframe[src^=\"https://www.youtube.com/embed/${videoYouTubeId}\"]`;\n \n \n+// Don't change http: outside any links:\n+const httpButNotALinkSource = `\n+Don't change http: in plain text, e.g.: http://not_a_link, or in code blocks,\n+or in the wrong attributes:\n+\n+\\`\\`\\`\n+http://url-in-code-block.ex.co/img.jpg?q=http://sth.ex.co\n+\\`\\`\\`\n+\n+<a name=\"http://wrong-attr.ex.co/img.jpg\" href=\"#\">http://wrong.ex.co</a>\n+\n+But yes, do change real links:\n+\n+<a href=\"${httpImageJpgUrl}\">text</a>\n+\n+${httpImageJpgUrl}\n+`;\n+\n+const httpButNotALinkRegexs = [\n+      'http: in plain text',\n+      'http://not_a_link,',\n+      'http://url-in-code-block.ex.co/img.jpg?q=http://sth.ex.co',\n+      'name=\"http://wrong-attr.ex.co/img.jpg\"',\n+      '>http://wrong.ex.co</a>'];\n+      // However, httpImageJpgUrl gets changed to: imageJpgUrl   [E2EHTTPS]\n+\n+\n+\n const inPagePreviewSelector = '.s_P-Prvw ';\n const inEditorPreviewSelector = '#debiki-editor-controller .preview ';\n \n@@ -148,64 +178,88 @@ describe(\"link-previews-images-mp4-youtube.1br.extln  TyTE2E2G3MAWKT4\", () => {\n   });\n \n   it(\"She can also post image urls, which get converted to preview <img> tags\", () => {\n+    const nr = c.FirstReplyNr;\n     mariasBrowser.complex.replyToOrigPost(imageJpgUrl);\n-    mariasBrowser.topic.waitUntilPostHtmlMatches(2, /\\.jpg/);\n-    mariasBrowser.topic.assertPostNrContains(2, dotOneboxClass);\n-    mariasBrowser.topic.assertPostNrContains(2, imageJpgOnebox);\n+    mariasBrowser.topic.waitUntilPostHtmlMatches(nr, /\\.jpg/);\n+    mariasBrowser.topic.assertPostNrContains(nr, dotOneboxClass);\n+    mariasBrowser.topic.assertPostNrContains(nr, imageJpgOnebox);\n+  });\n+\n+  it(`Links get changed to https: if the server uses https:\n+       — but http: outside any links, is left as is`, () => {\n+    const nr = 3;\n+    tyAssert.eq(nr, c.FirstReplyNr + 1);\n+    mariasBrowser.complex.replyToOrigPost(httpButNotALinkSource);\n+    mariasBrowser.topic.waitUntilPostHtmlMatches(nr, /Don't change http/);\n+    const postHtml = mariasBrowser.topic.getPostHtml(nr);\n+    httpButNotALinkRegexs.forEach(substrWithHttp => {\n+      tyAssert.includes(postHtml, substrWithHttp);\n+    });\n+    // This was a real link:\n+    mariasBrowser.topic.assertPostNrContains(nr, imageJpgOnebox);\n+    tyAssert.includes(postHtml, settings.secure ? httpsImageJpgUrl : httpImageJpgUrl);\n+    tyAssert.excludes(postHtml, settings.secure ? httpImageJpgUrl : httpsImageJpgUrl);\n   });\n \n   it(\"But unknown links won't get converted to oneboxes\", () => {\n+    const nr = 4;\n     const weirdUrl = 'https://www.example.com/what.is.this.weirdweird';\n     mariasBrowser.complex.replyToOrigPost(weirdUrl);\n-    mariasBrowser.topic.waitUntilPostTextMatches(3, 'weirdweird');\n-    mariasBrowser.topic.assertPostNrNotContains(3, dotOneboxClass);\n-    mariasBrowser.topic.assertPostNrContains(3, `a[href=\"${weirdUrl}\"]`);\n+    mariasBrowser.topic.waitUntilPostTextMatches(nr, 'weirdweird');\n+    mariasBrowser.topic.assertPostNrNotContains(nr, dotOneboxClass);\n+    mariasBrowser.topic.assertPostNrContains(nr, `a[href=\"${weirdUrl}\"]`);\n   });\n \n   it(\"A media url inside a text paragraph is converted to a plain link\", () => {\n+    const nr = 5;\n     mariasBrowser.complex.replyToOrigPost('zzz ' + imageJpgUrl + ' qqq');\n-    mariasBrowser.topic.waitUntilPostTextMatches(4, 'zzz .* qqq');\n-    mariasBrowser.topic.assertPostNrNotContains(4, dotOneboxClass);\n-    mariasBrowser.topic.assertPostNrContains(4, `a[href=\"${imageJpgUrl}\"]`);\n+    mariasBrowser.topic.waitUntilPostTextMatches(nr, 'zzz .* qqq');\n+    mariasBrowser.topic.assertPostNrNotContains(nr, dotOneboxClass);\n+    mariasBrowser.topic.assertPostNrContains(nr, `a[href=\"${imageJpgUrl}\"]`);\n   });\n \n   it(\"A link preview can be inserted between two text paragraphs\", () => {\n+    const nr = 6;\n     mariasBrowser.complex.replyToOrigPost(\"Paragraph one.\\n\\n\" + imageJpgUrl + \"\\n\\nPara two.\");\n-    mariasBrowser.topic.waitUntilPostTextMatches(5, \"Paragraph one\");\n-    mariasBrowser.topic.assertPostTextMatches(5, \"Para two\");\n+    mariasBrowser.topic.waitUntilPostTextMatches(nr, \"Paragraph one\");\n+    mariasBrowser.topic.assertPostTextMatches(nr, \"Para two\");\n     // Failed once.\n-    mariasBrowser.topic.assertPostNrContains(5, dotOneboxClass);\n-    mariasBrowser.topic.assertPostNrContains(5, imageJpgOnebox);\n+    mariasBrowser.topic.assertPostNrContains(nr, dotOneboxClass);\n+    mariasBrowser.topic.assertPostNrContains(nr, imageJpgOnebox);\n   });\n \n+  const nr7 = 7;\n+\n   it(\"Jpg, png, gif, mp4 link previews work fine\", () => {\n+    const nr = nr7;\n     // This happens to be 5 x 2 links, = 10, < max which is 11 [TyT603RTDJ43].\n     // (Each link preview has a widget link, and also a \"View at ...\" clickable link.)\n     mariasBrowser.complex.replyToOrigPost(\n         httpImageJpgUrl + '\\n\\n' + // <— should get changed to https -.\n-        imagePngUrl + '\\n\\n' +     //                                 |\n-        imageGifUrl + '\\n\\n' +     //                                 |\n-        videoMp4Url + '\\n\\n' +     //                                 |\n-        videoYouTubeUrl);          //                                 |\n-    mariasBrowser.topic.waitUntilPostHtmlMatches(6, /\\.jpg/);    //   |\n-    mariasBrowser.topic.assertPostNrContains(6, dotOneboxClass); //   |\n-    mariasBrowser.topic.assertPostNrContains(6, imageJpgOnebox); // <-'  here\n-    mariasBrowser.topic.assertPostNrContains(6, imagePngOnebox);\n-    mariasBrowser.topic.assertPostNrContains(6, imageGifOnebox);\n-    mariasBrowser.topic.assertPostNrContains(6, videoMp4Onebox);\n+        imagePngUrl + '\\n\\n' +     //                                  |\n+        imageGifUrl + '\\n\\n' +     //                                  |\n+        videoMp4Url + '\\n\\n' +     //                                  |\n+        videoYouTubeUrl);          //                                  |\n+    mariasBrowser.topic.waitUntilPostHtmlMatches(nr, /\\.jpg/);    //   |\n+    mariasBrowser.topic.assertPostNrContains(nr, dotOneboxClass); //   |\n+    mariasBrowser.topic.assertPostNrContains(nr, imageJpgOnebox); // <-'  here\n+    mariasBrowser.topic.assertPostNrContains(nr, imagePngOnebox);\n+    mariasBrowser.topic.assertPostNrContains(nr, imageGifOnebox);\n+    mariasBrowser.topic.assertPostNrContains(nr, videoMp4Onebox);\n   });\n \n   it(\"... and YouTube links too\", () => {\n-    mariasBrowser.topic.assertPostNrContains(6, videoYouTubeOnebox);\n+    mariasBrowser.topic.assertPostNrContains(nr7, videoYouTubeOnebox);\n   });\n \n   it(\"The server survives an invalid YouTube video id\", () => {\n+    const nr = 8;\n     // Reply to the previous post because we've now scrolled down so the orig post isn't visible.\n     mariasBrowser.complex.replyToPostNr(6, videoYouTubeUrlInvalidId + '\\n\\n\\nPlain text.');\n-    mariasBrowser.topic.waitUntilPostTextMatches(7, \"Plain text\");\n-    mariasBrowser.topic.assertPostNrContains(7, '.s_LnPv-Err');\n-    mariasBrowser.topic.assertPostNrContains(7, `a[href=\"${videoYouTubeUrlInvalidId}\"]`);\n-    mariasBrowser.topic.assertPostTextMatches(7, 'TyEYOUTBID_');\n+    mariasBrowser.topic.waitUntilPostTextMatches(nr, \"Plain text\");\n+    mariasBrowser.topic.assertPostNrContains(nr, '.s_LnPv-Err');\n+    mariasBrowser.topic.assertPostNrContains(nr, `a[href=\"${videoYouTubeUrlInvalidId}\"]`);\n+    mariasBrowser.topic.assertPostTextMatches(nr, 'TyEYOUTBID_');\n   });\n \n });",
      "previous_filename": "tests/e2e/specs/embed-images-mp4-youtube.1br.extln.test.ts"
    },
    {
      "sha": "58b7f5bd866f4be198c57bce8ac7c74e8e97aa13",
      "filename": "tests/e2e/specs/link-previews-twitter-max-editor.1br.extln.test.ts",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/link-previews-twitter-max-editor.1br.extln.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/link-previews-twitter-max-editor.1br.extln.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/link-previews-twitter-max-editor.1br.extln.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "previous_filename": "tests/e2e/specs/embed-twitter-tweets-etc.1br.extln.test.ts"
    },
    {
      "sha": "3eb76e14830de2c2deeaa32a80b9ddcbec9631d7",
      "filename": "tests/e2e/specs/links-internal.2browsers.test.ts",
      "status": "modified",
      "additions": 52,
      "deletions": 9,
      "changes": 61,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/links-internal.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/links-internal.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/links-internal.2browsers.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -36,8 +36,8 @@ const apiSecret: TestApiSecret = {\n };\n \n \n-\n-describe(\"internal links, backlinks   TyTINTLNS54824\", () => {   // RENAME this file to  backlinks-basic.2browsers.test.ts\n+// RENAME this file to  internal-inline-link-previews-and-backlinks.2br?\n+describe(\"internal links, backlinks   TyTINTLNS54824\", () => {\n \n   it(\"import a site\", () => {\n     const builder = buildSite();\n@@ -109,26 +109,41 @@ describe(\"internal links, backlinks   TyTINTLNS54824\", () => {   // RENAME this\n   // ------ Simple backlinks\n \n   const michelsTopicUrl = () => `${site.origin}/${forum.topics.byMichaelCategoryA.slug}`;\n+  const michelsTopicTitle = () => forum.topics.byMichaelCategoryA.title;\n   const mariasTopicUrl = () => `${site.origin}/${forum.topics.byMariaCategoryA.slug}`;\n+  const mariasTopicTitle = () => forum.topics.byMariaCategoryA.title;\n \n   // We'll edit and then delete topic A.\n   let topicAUrl: string;\n   let topicAId: string;\n+\n   const topicA_title = 'topicA_title';\n+\n   const topicA_body_link2MiTpc_link2MaTpc = () =>\n       `topicA_body_link2MiTpc_link2MaTpc ${michelsTopicUrl()} ${mariasTopicUrl()}`;\n-  const topicA_body_link2MiTpc = () =>\n+  const topicA_body_link2MiTpc_link2MaTpc_withPreviews = (): St =>\n+      `topicA_body_link2MiTpc_link2MaTpc ${michelsTopicTitle()} ${mariasTopicTitle()}`;\n+\n+  const topicA_body_link2MiTpc = (): St =>\n       `topicA_body_link2MiTpc ${michelsTopicUrl()}`;\n+  const topicA_body_link2MiTpc_withPreviews = (): St =>\n+      `topicA_body_link2MiTpc ${michelsTopicTitle()}`;\n+\n   const topicA_body_noLinks = `topicA_body_noLinks`;\n \n-  const topicAReply_link2MaTpc = () => `topicAReply_link2MaTpc ${mariasTopicUrl()}`;\n+  const topicAReply_link2MaTpc = () =>\n+        `topicAReply_link2MaTpc ${mariasTopicUrl()}`;\n+  const topicAReply_link2MaTpc_withPreviews = () =>\n+        `topicAReply_link2MaTpc ${mariasTopicTitle()}`;\n+\n \n   // Topic B will disappear when we delete its whole category.\n   let topicBUrl: string;\n   let topicBId: string;\n   const topicB_title = 'topicB_title';\n   const topicB_body_link2MiTpc = () => `topicB_body_link2MiTpc ${michelsTopicUrl()}`;\n-  const topicB_body_noLink = `topicB_body_noLink`;\n+  const topicB_body_link2MiTpc_withPreviews = () =>\n+          `topicB_body_link2MiTpc ${michelsTopicTitle()}`;\n \n \n   it(\"Memah posts a topic A that links to Michael's and Maria's pages\", () => {\n@@ -140,6 +155,11 @@ describe(\"internal links, backlinks   TyTINTLNS54824\", () => {   // RENAME this\n     topicAId = '2';  // how know?\n   });\n \n+  it(\"... inline link previews appear\", () => {\n+    memahsBrowser.topic.waitUntilPostTextIs(c.BodyNr,\n+          topicA_body_link2MiTpc_link2MaTpc_withPreviews());\n+  });\n+\n   it(\"Owen goes to Memah's new topic\", () => {\n     owensBrowser.go2(topicAUrl);\n     owensBrowser.complex.loginWithPasswordViaTopbar(owen);\n@@ -200,7 +220,13 @@ describe(\"internal links, backlinks   TyTINTLNS54824\", () => {   // RENAME this\n \n   it(\"Memah deletes the link to Maria's topic\", () => {\n     // But keeps the link to Michael's topic.\n-    memahsBrowser.complex.editPageBody(topicA_body_link2MiTpc());\n+    memahsBrowser.complex.editPageBody(topicA_body_link2MiTpc(),\n+          { textAfterMatches: 'topicA_body_link2MiTpc' });\n+  });\n+\n+  it(\"... now there's only one inline link preview — to Michael's topic\", () => {\n+    memahsBrowser.topic.waitUntilPostTextIs(c.BodyNr,\n+          topicA_body_link2MiTpc_withPreviews());\n   });\n \n   it(\"Owen refreshes Maria's page until the backlink is gone\", () => {\n@@ -229,6 +255,11 @@ describe(\"internal links, backlinks   TyTINTLNS54824\", () => {   // RENAME this\n     memahsBrowser.complex.replyToOrigPost(topicAReply_link2MaTpc());\n   });\n \n+  it(\"... a block link preview appears\", () => {\n+    const text = memahsBrowser.topic.getPostText(c.FirstReplyNr);\n+    assert.includes(text, topicAReply_link2MaTpc_withPreviews());\n+  });\n+\n   it(\"Owen goes there\", () => {\n     owensBrowser.go2(mariasTopicUrl());\n     owensBrowser.topic.waitUntilPostTextMatches(c.BodyNr, forum.topics.byMariaCategoryA.body);\n@@ -277,9 +308,16 @@ describe(\"internal links, backlinks   TyTINTLNS54824\", () => {   // RENAME this\n \n   it(\"... posts a topic B that links to Michael's page\", () => {\n     memahsBrowser.complex.createAndSaveTopic({\n-          title: topicB_title, body: topicB_body_link2MiTpc() });\n+          title: topicB_title, body: topicB_body_link2MiTpc(),\n+          bodyMatchAfter: 'topicB_body_link2MiTpc' });\n     topicBUrl = memahsBrowser.getUrl();\n-    topicBId = '3';  // how know?\n+    topicBId = memahsBrowser.getPageId();\n+    assert.eq(topicBId, '3');\n+  });\n+\n+  it(\"... a link preview appears\", () => {\n+    const text = memahsBrowser.topic.getPostText(c.BodyNr);\n+    assert.eq(text, topicB_body_link2MiTpc_withPreviews())\n   });\n \n   it(\"Owen refreshes Micheal's page\", () => {\n@@ -357,7 +395,11 @@ describe(\"internal links, backlinks   TyTINTLNS54824\", () => {   // RENAME this\n   const owensTopicId = '4'; // how know?\n   const owensTopicTitle = 'owensTopicTitle';\n   const owensTopic_link2MiTpc = () => `owensTopic_link2MiTpc ${michelsTopicUrl()}`;\n+  const owensTopic_link2MiTpc_previews = () =>\n+          `owensTopic_link2MiTpc ${michelsTopicTitle()}`;\n   const owensReply_link2MaTpc = () => `owensReply_link2MaTpc ${mariasTopicUrl()}`;\n+  const owensReply_link2MaTpc_previews = () =>\n+          `owensReply_link2MaTpc ${mariasTopicTitle()}`;\n \n   it(\"Owen wants his own backlinks!  He goes to the staff cateory\", () => {\n     owensBrowser.forumTopicList.goHere({\n@@ -366,7 +408,8 @@ describe(\"internal links, backlinks   TyTINTLNS54824\", () => {   // RENAME this\n \n   it(\"... posts a staff-only topic with a link to Michael's page\", () => {\n     owensBrowser.complex.createAndSaveTopic({\n-          title: owensTopicTitle, body: owensTopic_link2MiTpc() })\n+          title: owensTopicTitle, body: owensTopic_link2MiTpc(),\n+          bodyMatchAfter: 'owensTopic_link2MiTpc' });\n   });\n \n   it(\"... and a reply linking to Maria's page\", () => {"
    },
    {
      "sha": "8f672999b44d84e16e411e00962372c55f5acd4e",
      "filename": "tests/e2e/specs/manual.2browsers.test.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/manual.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/manual.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/manual.2browsers.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -46,6 +46,7 @@ describe(\"some-e2e-test  TyT1234ABC\", () => {\n         pubId: '?',\n         origin: settings.proto2Slash + settings.localHostname + '.localhost',\n         siteIdOrigin: '?',\n+        cdnOriginOrEmpty: '',\n       };\n     }\n     else {"
    },
    {
      "sha": "150c9f4e0d9ce732e32d033a3eff0c6f006f42e4",
      "filename": "tests/e2e/specs/modn-review-after.2br.mtime.test.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/modn-review-after.2br.mtime.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/modn-review-after.2br.mtime.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/modn-review-after.2br.mtime.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -367,6 +367,10 @@ describe(\"modn-review-after  TyTE2E402GRM\", () => {\n           numDeleted: 0 });\n   });\n \n+  it(`Owen refreshes the page`, () => {\n+    owensBrowser.refresh2(); // [E2EBUG]  why this needed? Only sometimes.\n+  });\n+\n   it(\"Nothing more to review for Owen\", () => {\n     owensBrowser.adminArea.review.hideCompletedTasks();\n     assert.eq(owensBrowser.adminArea.review.countThingsToReview(), numToModerate);"
    },
    {
      "sha": "109a566f0f8b25d6405805cfc9d2b03b7b435a34",
      "filename": "tests/e2e/specs/spam-basic-local.2browsers.test.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/spam-basic-local.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/spam-basic-local.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/spam-basic-local.2browsers.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -89,7 +89,7 @@ describe(\"spam test, no external services  TyT530KRM1R\", () => {\n     mallorysBrowser.forumButtons.clickCreateTopic();\n     mallorysBrowser.editor.editTitle(topicTitleOne);\n     mallorysBrowser.editor.editText(tooManyLinks);\n-    mallorysBrowser.editor.save();\n+    mallorysBrowser.editor.clickSave();\n     mallorysBrowser.serverErrorDialog.waitAndAssertTextMatches(/links.*EdE4KFY2_/);\n     mallorysBrowser.serverErrorDialog.close();\n   });"
    },
    {
      "sha": "6db01e7628d754ce2ebe4ebc9b500aeffd46cf4f",
      "filename": "tests/e2e/specs/upload-images-and-files.2br.test.ts",
      "status": "modified",
      "additions": 54,
      "deletions": 9,
      "changes": 63,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/upload-images-and-files.2br.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/specs/upload-images-and-files.2br.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/upload-images-and-files.2br.test.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -99,6 +99,12 @@ describe(\"upload-images-and-files  TyT50E6KTDU7\", () => {\n     maria_brB.editor.uploadFile('TestMediaDir', 'otters-looking.jpeg');\n   });\n \n+  it(\"... and a red panda, with many dots in the file name\", () => {\n+    maria_brB.editor.editText(\"Is it dangerous?\\n\", { append: true });\n+    maria_brB.editor.uploadFile(\n+        'TestMediaDir', 'red-panda-resting.wow.so.tired.jpeg');\n+  });\n+\n   it(\"... saves the topic\", () => {\n     maria_brB.editor.saveWaitForNewPage();\n   });\n@@ -112,13 +118,20 @@ describe(\"upload-images-and-files  TyT50E6KTDU7\", () => {\n     maria_brB.topic.clickReplyToOrigPost();\n   });\n \n-  it(\"... and uploads a red panda, with many dots in the file name\", () => {\n-    maria_brB.editor.editText(\"Is it dangerous?\\n\\n\");\n+  it(`She uploads an uppercase .JPG pic — mobile phones tend to use uppercase`, () => {\n+    maria_brB.editor.editText(\"Panda lives here? Red house?\");\n     maria_brB.editor.uploadFile(\n-        'TestMediaDir', 'red-panda-resting.wow.so.tired.jpeg');\n+          'TestMediaDir', 'MOBILE_PHONE.JPG');\n   });\n \n-  it(\"Maria tries to upload a doc Word document, but cannot\", () => {\n+  it(\"... '.JPG' extension got converted to lowrecase '.jpg'\", () => {\n+    const text = maria_brB.editor.getText();\n+    assert.includes(text, '<!-- Uploaded file name:  MOBILE_PHONE.JPG  -->');\n+    assert.matches(text,\n+          /<img src=\"\\/-\\/u\\/[0-9]\\/[a-z0-9]\\/[a-z0-9]{2}\\/[a-z0-9]+.jpg\">/);\n+  });\n+\n+  it(\"Maria tries to upload a .doc Word document, but cannot\", () => {\n     maria_brB.editor.uploadFile(\n           'TestMediaDir', 'fakeword.doc', { waitForBadExtErr: true });\n   });\n@@ -151,6 +164,12 @@ describe(\"upload-images-and-files  TyT50E6KTDU7\", () => {\n           { waitForBadExtErr: true });\n   });\n \n+  it(\"... and not files with no extension\", () => {\n+    maria_brB.editor.uploadFile(\n+          'TestMediaDir', 'file-without-dot-ext',\n+          { waitForBadExtErr: true });\n+  });\n+\n \n   it(\"... until Owen allows anything\", () => {\n     owen_brA.waitAndSetValue('.s_PP_PrmsTb_UplExts textarea', \"**\");\n@@ -165,15 +184,41 @@ describe(\"upload-images-and-files  TyT50E6KTDU7\", () => {\n           'TestMediaDir', 'word-doc.very-x-files.TOP.SECRET.docx');\n   });\n \n-  it(\"... she posts the reply\", () => {\n+  /* No, won't work. Maybe better wait? Or what mime-type should the\n+     server use, when people download the file?\n+     Currently the server says No, here: [upl_ext_req].\n+  it(\"... and files with no extensions\", () => {\n+    maria_brB.editor.uploadFile('TestMediaDir', 'file-without-dot-ext');\n+  });  */\n+\n+  it(\"Maria posts the reply\", () => {\n     maria_brB.editor.save();\n   });\n \n-  it(\"TESTS_MISSING: Veriy uploaded images look ok: Visual regression tests\", () => {\n-    // Use  https://webdriver.io/blog/2019/05/18/visual-regression-for-v5.html\n+  it(\"TESTS_MISSING Links to the uploaded files appear\", () => {\n+  });\n+\n+  let html;\n+\n+  it(\"File uploaded as .JPG is instead lowrecase .jpg\", () => {\n+    html = maria_brB.topic.getPostHtml(c.FirstReplyNr);\n+    assert.includes(html, '.jpg\"');\n+    assert.excludes(html, '.JPG\"');\n+    assert.includes(html, '.docx\"');\n+    assert.excludes(html, '.DOCX\"');\n   });\n \n-  it(\"TESTS_MISSING: Files with no suffix — currently not allowed, hmm\", () => {\n+  it(\"... the links are url hash paths\", () => {\n+    // Test just one, for now.\n+    assert.matches(html,\n+          // Won't work, if any CDN url prefix:\n+          // /<img src=\"\\/-\\/u\\/[0-9]\\/[a-z0-9]\\/[a-z0-9]{2}\\/[a-z0-9]+.jpg\">/);\n+          // Instead, for now:\n+          /\\/[0-9]\\/[a-z0-9]\\/[a-z0-9]{2}\\/[a-z0-9]+.jpg\">/);\n+  });\n+\n+  it(\"TESTS_MISSING: Uploaded images look ok: Visual regression tests\", () => {\n+    // Use  https://webdriver.io/blog/2019/05/18/visual-regression-for-v5.html\n   });\n \n \n@@ -190,7 +235,7 @@ describe(\"upload-images-and-files  TyT50E6KTDU7\", () => {\n   });\n \n   it(\"... tries to upload a too large file: 4 MiB\", () => {\n-    maria_brB.editor.uploadFile('TargetDir', zerosFileFourMebibyte);\n+    maria_brB.editor.uploadFile('TargetDir', zerosFileFourMebibyte, { allFine: false });\n   });\n \n   it(\"... there's an upload-files problem\", () => {"
    },
    {
      "sha": "60b50c4406c6edfc861763084aa8dd421d61f2f2",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 31,
      "deletions": 12,
      "changes": 43,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/pages-for.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -3281,7 +3281,7 @@ export class TyE2eTestBrowser {\n \n     loginDialog = {\n       isVisible: () => {\n-        return this.isVisible('.dw-login-modal') && this.isVisible('.esLD');\n+        return this.isVisible('.dw-login-modal') && this.isVisible('.c_AuD');\n       },\n \n       refreshUntilFullScreen: () => {\n@@ -3303,7 +3303,7 @@ export class TyE2eTestBrowser {\n \n       waitAssertFullScreen: () => {\n         this.waitForVisible('.dw-login-modal');\n-        this.waitForVisible('.esLD');\n+        this.waitForVisible('.c_AuD');\n         // Forum not shown.\n         assert(!this.isVisible('.dw-forum'));\n         assert(!this.isVisible('.dw-forum-actionbar'));\n@@ -3341,8 +3341,8 @@ export class TyE2eTestBrowser {\n \n         // Switch from the guest login form to the create-real-account form, if needed.\n         this.waitForVisible('#e2eFullName');\n-        if (this.isVisible('.s_LD_CreateAccount')) {\n-          this.waitAndClick('.s_LD_CreateAccount');\n+        if (this.isVisible('.c_AuD_2SgU')) {\n+          this.waitAndClick('.c_AuD_2SgU .c_AuD_SwitchB');\n           this.waitForVisible('#e2ePassword');\n         }\n \n@@ -3530,7 +3530,7 @@ export class TyE2eTestBrowser {\n       },\n \n       clickCreateAccountInstead: () => {\n-        this.waitAndClick('.esLD_Switch_L');\n+        this.waitAndClick('.c_AuD_2SgU .c_AuD_SwitchB');\n         this.waitForVisible('.esCreateUser');\n         this.waitForVisible('#e2eUsername');\n         this.waitForVisible('#e2ePassword');\n@@ -3540,7 +3540,7 @@ export class TyE2eTestBrowser {\n         // Switch to login form, if we're currently showing the signup form.\n         while (true) {\n           if (this.isVisible('.esCreateUser')) {\n-            this.waitAndClick('.esLD_Switch_L');\n+            this.waitAndClick('.c_AuD_2LgI .c_AuD_SwitchB');\n             // Don't waitForVisible('.dw-reset-pswd') — that can hang forever (weird?).\n           }\n           else if (this.isVisible('.dw-reset-pswd')) {\n@@ -4723,7 +4723,8 @@ export class TyE2eTestBrowser {\n       },\n \n       uploadFile: (whichDir: 'TargetDir' | 'TestMediaDir', fileName: St,\n-            ps: { waitForBadExtErr?: Bo, waitForTooLargeErr?: Bo } = {}) => {\n+            ps: { waitForBadExtErr?: Bo, waitForTooLargeErr?: Bo, allFine?: false } = {}\n+            ) => {\n         //this.waitAndClick('.e_UplB');\n         // There'll be a file <input> not interactable error, unless we change\n         // its size to sth larger than 0 x 0.\n@@ -4736,13 +4737,21 @@ export class TyE2eTestBrowser {\n         });\n         this.waitAndSelectFile('.e_EdUplFI', whichDir, fileName);\n         if (ps.waitForBadExtErr) {\n-          this.waitForVisibleText('.s_UplErrD .s_UplErrD_UplNm');\n+          // If there's no extension, then waitForExist(), not waitForVisibleText().\n+          const sel = '.s_UplErrD .s_UplErrD_UplNm';\n+          const lastIx = fileName.lastIndexOf('.')\n+          0 <= lastIx && lastIx <= fileName.length - 2\n+                ? this.waitForVisibleText(sel)\n+                : this.waitForExist(sel);\n           this.stupidDialog.close();\n         }\n-        if (ps.waitForTooLargeErr) {\n+        else if (ps.waitForTooLargeErr) {\n           this.waitForVisibleText('.s_UplErrD .e_FlTooLg');\n           this.stupidDialog.close();\n         }\n+        else if (ps.allFine !== false) {\n+          tyAssert.not(this.isVisible('.s_UplErrD'), `Unexpected file upload error`);\n+        }\n       },\n \n       cancelNoHelp: () => {  // REMOVE just use cancel() now, help dialog removed\n@@ -8240,17 +8249,27 @@ export class TyE2eTestBrowser {\n         this.assertPageTitleMatches(newTitle);\n       },\n \n-      editPageBody: (newText: string, opts: { append?: boolean } = {}) => {\n+      editPageBody: (newText: string, opts: { append?: Bo, textAfterIs?: St,\n+              textAfterMatches?: St } = {}) => {\n         this.topic.clickEditOrigPost();\n         this.editor.editText(newText, opts);\n         this.editor.save();\n-        if (opts.append) {\n+        if (opts.textAfterMatches || opts.textAfterIs) {\n+          if (opts.textAfterMatches) {\n+            this.topic.waitUntilPostTextMatches(c.BodyNr, opts.textAfterMatches);\n+          }\n+          if (opts.textAfterIs) {\n+            this.topic.waitUntilPostTextIs(c.BodyNr, opts.textAfterIs);\n+            this.topic.assertPostTextIs(c.BodyNr, newText);  // why this too?\n+          }\n+        }\n+        else if (opts.append) {\n           this.topic.waitUntilPostTextMatches(c.BodyNr, newText);  // includes!\n           this.assertPageBodyMatches(newText);  // includes!\n         }\n         else {\n           this.topic.waitUntilPostTextIs(c.BodyNr, newText);\n-          this.topic.assertPostTextIs(c.BodyNr, newText);\n+          this.topic.assertPostTextIs(c.BodyNr, newText);  // why this too?\n         }\n       },\n "
    },
    {
      "sha": "e6b77743729767d889c1f8179994d5d4beb8b3af",
      "filename": "tests/e2e/utils/utils.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/utils/utils.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/tests/e2e/utils/utils.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/utils.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -84,17 +84,19 @@ const utils = {\n   __brokenPreview: '.s_LnPv-Err',\n   __intLinkProvider: { name: 'Int', inSandboxedIframe: false } as LinkPreviewProvider,\n \n+  // REMOVE use makeLinkPreviewSelector(..) instead.\n   makePreviewOkSelector: (provider: LinkPreviewProvider | 'InternalLink',\n           opts: { url?: St } = {}) => {\n-    return utils.__makePreviewSelImpl(provider, { ...opts, broken: false });\n+    return utils.makeLinkPreviewSelector(provider, { ...opts, broken: false });\n   },\n \n+  // REMOVE use makeLinkPreviewSelector(..) instead.\n   makePreviewBrokenSelector: (provider: LinkPreviewProvider | 'InternalLink',\n           opts: { url?: St } = {}) => {\n-    return utils.__makePreviewSelImpl(provider, { ...opts, broken: true });\n+    return utils.makeLinkPreviewSelector(provider, { ...opts, broken: true });\n   },\n \n-  __makePreviewSelImpl: (provider: LinkPreviewProvider | 'InternalLink',\n+  makeLinkPreviewSelector: (provider: LinkPreviewProvider | 'InternalLink',\n           opts: { url?: St, broken?: Bo } = {}) => {\n     if (provider === 'InternalLink') provider = utils.__intLinkProvider;\n     const colonNotPara = opts.broken ? '' : ':not(';"
    },
    {
      "sha": "d354b1e9e8ef6e78d498a8f52cfe18a8759d979a",
      "filename": "to-talkyard/src/to-talkyard.ts",
      "status": "modified",
      "additions": 57,
      "deletions": 11,
      "changes": 68,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/to-talkyard/src/to-talkyard.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/to-talkyard/src/to-talkyard.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/to-talkyard/src/to-talkyard.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1,3 +1,10 @@\n+//  To run this script: Install Nodejs and Yarn,\n+//  then:  yard build\n+//  then, in Ty's base dir:\n+//      nodejs to-talkyard/dist/to-talkyard/src/to-talkyard.js --help\n+//\n+\n+\n /// <reference path=\"to-talkyard.d.ts\" />\n \n /*\n@@ -54,6 +61,46 @@ function throwTooManyParamsIfDefined(value: string | undefined) {\n   }\n }\n \n+function logAndExit(msg: string, exitCode: Nr = 1): void {\n+  console.log(msg);\n+  process.exit(exitCode);\n+}\n+\n+\n+function logAndExitIf(test: boolean, msg: string): void {\n+  if (test) logAndExit(msg);\n+}\n+\n+\n+logAndExitIf(args.help || args.h, `\n+Usage:\n+\n+  First convert the Disqus (or WordPress, later) export file\n+  to Talkyard JSON format:\n+\n+      nodejs to-talkyard/dist/to-talkyard/src/to-talkyard.js \\\\\n+          --disqusXmlExportFile path/to/file.xml \\\\\n+          --writeTo disqus-to-talkyard.typatch.json\n+\n+  Then, at your Talkyard site, go to the Admin Area, the Settings | Features tab,\n+  and enable the API, click Save. Now an API tab appears — go there and generate\n+  an API secret; copy it.\n+\n+  Thereafter you can import the JSON file:  (and change the --sendTo server\n+  address to your Talkyard site's address)\n+\n+      nodejs to-talkyard/dist/to-talkyard/src/to-talkyard.js \\\\\n+          --talkyardJsonPatchFile disqus-to-talkyard.typatch.json  \\\\\n+          --sendTo https://your-talkyard-site.example.com  \\\\\n+          --sysbotApiSecret 'THE_SECRET_YOU_COPIED'\n+\n+  Back in the browser, go to https://your-talkyard-site.example.com\n+  and see if your imported topics have appeared.\n+\n+  Afterwards, delete the API secret.\n+  \\n`);\n+\n+\n if (_.isString(wordpressXmlFilePath)) {\n   throwTooManyParamsIfDefined(disqusXmlFilePath);\n   throwTooManyParamsIfDefined(jsonDumpFilePath);\n@@ -70,9 +117,9 @@ else if (_.isString(jsonDumpFilePath)) {\n   talkyardSiteData = JSON.parse(jsonString);\n }\n else {\n-  throw (\n+  logAndExit(\n     \"No export file or json dump specified, one of:\\n\" +\n-    \"  --wordpressCoreXmlExportFile=...\\n\" +\n+ // \"  --wordpressCoreXmlExportFile=...\\n\" +  // later\n     \"  --disqusXmlExportFile=...\\n\" +\n     \"  --talkyardJsonPatchFile=...\");\n }\n@@ -81,18 +128,17 @@ const writeToPath: string | undefined = args.writeTo;\n const sendToOrigin: string | undefined = args.sendTo;\n const sysbotApiSecret: string | undefined = args.sysbotApiSecret;\n \n-if (!_.isString(writeToPath) && !_.isString(sendToOrigin))\n-  throw \"Missing: --writeTo=... or --sendTo=...\";\n-\n+logAndExitIf(!_.isString(writeToPath) && !_.isString(sendToOrigin),\n+      \"Missing: --writeTo=... or --sendTo=...\");\n \n-if (_.isString(sendToOrigin) && !_.isString(sysbotApiSecret))\n-  die(\"Missing: --sysbotApiSecret=..., required together with --sendTo=...\");\n+logAndExitIf(_.isString(sendToOrigin) && !_.isString(sysbotApiSecret),\n+      \"Missing: --sysbotApiSecret=..., required together with --sendTo=...\");\n \n-if (primaryOrigin && !primaryOrigin.startsWith('http'))\n-  die(\"The --primaryOrigin should be like http(s)://server.address\");\n+logAndExitIf(primaryOrigin && !primaryOrigin.startsWith('http'),\n+      \"The --primaryOrigin should be like http(s)://server.address\");\n \n-if (primaryOrigin && _.filter(primaryOrigin, c => c === '/').length >= 3)\n-  die(\"The --primaryOrigin should not include any URL path, only http(s)://host.\");\n+logAndExitIf(primaryOrigin && _.filter(primaryOrigin, c => c === '/').length >= 3,\n+      \"The --primaryOrigin should not include any URL path, only http(s)://host.\");\n \n \n if (!talkyardSiteData) {"
    },
    {
      "sha": "e2c874300f2408402ba654f7c7b02252e81eb992",
      "filename": "translations/en_US/i18n.ts",
      "status": "modified",
      "additions": 16,
      "deletions": 12,
      "changes": 28,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/translations/en_US/i18n.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/translations/en_US/i18n.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations/en_US/i18n.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -997,11 +997,11 @@ var t_en_US: TalkyardTranslations = t = {\n     FullNameC: \"Full name:\",\n     optName: \"optional\",\n \n-    OrCreateAcct_1: \"Or \",\n-    OrCreateAcct_2: \"create an account\",\n-    OrCreateAcct_3: \" with \",\n-    OrCreateAcct_4: \"@username\",\n-    OrCreateAcct_5: \" & password\",\n+    // OrCreateAcct_1: \"Or \",\n+    // OrCreateAcct_2: \"create an account\",\n+    // OrCreateAcct_3: \" with \",\n+    // OrCreateAcct_4: \"@username\",\n+    // OrCreateAcct_5: \" & password\",\n \n     DoneLoggedIn: \"Account created. You have been logged in.\",  // COULD say if verif email sent too?\n     AlmostDone:\n@@ -1080,15 +1080,19 @@ var t_en_US: TalkyardTranslations = t = {\n     LogInToComment: \"Log in to write a comment\",\n     LogInToCreateTopic: \"Log in to create topic\",\n \n-    AlreadyHaveAcctQ: \"You have an account? \",  // MISSING changed \"Already have...?\" to \"You have...?\"\n-    LogInInstead_1: \"\",\n-    LogInInstead_2: \"Log in\",   // \"Log in\" (this is a button)\n-    LogInInstead_3: \" instead\", // \"instead\"\n+    //AlreadyHaveAcctQ: \"You have an account? \",  // MISSING changed \"Already have...?\" to \"You have...?\"\n+    OrLogIn_1: \"Or \",         // \"Or \"\n+    OrLogIn_2: \"Log in\",      // \"Log in\" (this is a button)\n+    OrLogIn_3: \" instead\",    // \" instead\"\n \n-    NewUserQ: \"New user? \",\n-    SignUpInstead_1: \"\",\n+    //NewUserQ: \"New user? \",\n+    SignUpInstead_1: \"Or \",\n     SignUpInstead_2: \"Create account\", // (this is a button)\n-    SignUpInstead_3: \" instead\",\n+    SignUpInstead_3: \"\",\n+\n+    OrTypeName_1: \", or just \",\n+    OrTypeName_2: \"type a name\",   // is a button\n+    OrTypeName_3: \"\",\n \n     OrCreateAcctHere: \"Or create account:\",\n     OrTypeName: \"Or type your name:\","
    },
    {
      "sha": "da0f3650a6101d7910aaa01af7bb07cf328eac06",
      "filename": "translations/pt_BR/i18n.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 10,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/translations/pt_BR/i18n.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/translations/pt_BR/i18n.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations/pt_BR/i18n.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -992,11 +992,11 @@ var t_pt_BR: TalkyardTranslations = t = {\n     FullNameC: \"Nome completo:\",\n     optName: \"opcional\",\n \n-    OrCreateAcct_1: \"Ou \",\n-    OrCreateAcct_2: \"crie uma conta\",\n-    OrCreateAcct_3: \" com \",\n-    OrCreateAcct_4: \"@nomedeusuario\",\n-    OrCreateAcct_5: \" & senha\",\n+    //OrCreateAcct_1: \"Ou \",\n+    //OrCreateAcct_2: \"crie uma conta\",\n+    //OrCreateAcct_3: \" com \",\n+    //OrCreateAcct_4: \"@nomedeusuario\",\n+    //OrCreateAcct_5: \" & senha\",\n \n     DoneLoggedIn: \"Conta criada. Você está logado.\",  // COULD say if verif email sent too?\n     AlmostDone:\n@@ -1075,16 +1075,21 @@ var t_pt_BR: TalkyardTranslations = t = {\n     LogInToComment: \"Faça login para escrever um comentário\",\n     LogInToCreateTopic: \"Faça login para criar um tópico\",\n \n-    AlreadyHaveAcctQ: \"Já tem uma conta? \",\n-    LogInInstead_1: \"\",\n-    LogInInstead_2: \"Fazer login\",   // \"Log in\" (this is a button)\n-    LogInInstead_3: \" em vez disso\", // \"instead\"\n+    //AlreadyHaveAcctQ: \"Já tem uma conta? \",\n+    OrLogIn_1: \"\",\n+    OrLogIn_2: \"Fazer login\",   // \"Log in\" (this is a button)\n+    OrLogIn_3: \" em vez disso\", // \"instead\"\n \n-    NewUserQ: \"Novo usuário? \",\n+    //NewUserQ: \"Novo usuário? \",\n     SignUpInstead_1: \"\",\n     SignUpInstead_2: \"Cadastre-se\",\n     SignUpInstead_3: \" em vez disso\",\n \n+    // MAYBE x3:\n+    OrTypeName_1: \", ou apenas \",\n+    OrTypeName_2: \"digite seu nome\",   // is a button\n+    OrTypeName_3: \"\",\n+\n     OrCreateAcctHere: \"Ou crei uma conta:\",\n     OrTypeName: \"Ou digite seu nome:\",\n     OrLogIn: \"Ou faça login:\", // was: \"Ou preencha:\"\" = \"fill in\".  MAYBE"
    },
    {
      "sha": "378d0b7164b8d7f381c277bf1556970c5e3533cb",
      "filename": "translations/ru_RU/i18n.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 10,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/translations/ru_RU/i18n.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/translations/ru_RU/i18n.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations/ru_RU/i18n.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -991,11 +991,11 @@ var t_ru_RU: TalkyardTranslations = t = {\n     FullNameC: \"Полное имя:\",\n     optName: \"по желанию\",\n \n-    OrCreateAcct_1: \"Или \",\n-    OrCreateAcct_2: \"завести аккаунт\",\n-    OrCreateAcct_3: \" с участием \",\n-    OrCreateAcct_4: \"@username\",\n-    OrCreateAcct_5: \" & пароль\",\n+    //OrCreateAcct_1: \"Или \",\n+    //OrCreateAcct_2: \"завести аккаунт\",\n+    //OrCreateAcct_3: \" с участием \",\n+    //OrCreateAcct_4: \"@username\",\n+    //OrCreateAcct_5: \" & пароль\",\n \n     DoneLoggedIn: \"Аккаунт создан. Вы вошли.\",  // COULD say if verif email sent too?\n     AlmostDone:\n@@ -1074,16 +1074,21 @@ var t_ru_RU: TalkyardTranslations = t = {\n     LogInToComment: \"Войдите, чтобы оставить комментарий\",\n     LogInToCreateTopic: \"Войдите, чтобы создать тему\",\n \n-    AlreadyHaveAcctQ: \"У вас есть аккаунт? \",  // MISSING changed \"Already have...?\" to \"You have...?\"\n-    LogInInstead_1: \"\",\n-    LogInInstead_2: \"Войти\",   // \"Log in\" (this is a button)\n-    LogInInstead_3: \" вместо\", // \"instead\"\n+    //AlreadyHaveAcctQ: \"У вас есть аккаунт? \",  // MISSING changed \"Already have...?\" to \"You have...?\"\n+    OrLogIn_1: \"\",\n+    OrLogIn_2: \"Войти\",   // \"Log in\" (this is a button)\n+    OrLogIn_3: \" вместо\", // \"instead\"\n \n-    NewUserQ: \"Новый пользователь? \",\n+    //NewUserQ: \"Новый пользователь? \",\n     SignUpInstead_1: \"\",\n     SignUpInstead_2: \"Зарегистрироваться\",\n     SignUpInstead_3: \" вместо\",\n \n+    // MAYBE x3:\n+    OrTypeName_1: \", или просто \",\n+    OrTypeName_2: \"введите свое имя\",   // is a button\n+    OrTypeName_3: \"\",\n+\n     OrCreateAcctHere: \"Или создать аккаунт:\",\n     OrTypeName: \"Или введите свое имя:\",\n     OrLogIn: \"Или войти:\","
    },
    {
      "sha": "405669d69b8225c2fcb4d2c4d7f5d0acbdb58b04",
      "filename": "translations/sv_SE/i18n.ts",
      "status": "modified",
      "additions": 17,
      "deletions": 13,
      "changes": 30,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/translations/sv_SE/i18n.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/translations/sv_SE/i18n.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations/sv_SE/i18n.ts?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -990,11 +990,11 @@ var t_sv_SE: TalkyardTranslations = t = {\n     FullNameC: \"Full name:\",\n     optName: \"optional\",\n \n-    OrCreateAcct_1: \"Or \",\n-    OrCreateAcct_2: \"create an account\",\n-    OrCreateAcct_3: \" with \",\n-    OrCreateAcct_4: \"@username\",\n-    OrCreateAcct_5: \" & password\",\n+    //OrCreateAcct_1: \"Or \",\n+    //OrCreateAcct_2: \"create an account\",\n+    //OrCreateAcct_3: \" with \",\n+    //OrCreateAcct_4: \"@username\",\n+    //OrCreateAcct_5: \" & password\",\n \n     DoneLoggedIn: \"Account created. You have been logged in.\",  // COULD say if verif email sent too?\n     AlmostDone:\n@@ -1073,15 +1073,19 @@ var t_sv_SE: TalkyardTranslations = t = {\n     LogInToComment: \"Log in to write a comment\",\n     LogInToCreateTopic: \"Log in to create topic\",\n \n-    AlreadyHaveAcctQ: \"Already have an account? \",\n-    LogInInstead_1: \"\",\n-    LogInInstead_2: \"Log in\",   // \"Log in\" (this is a button)\n-    LogInInstead_3: \" instead\", // \"instead\"\n+    //AlreadyHaveAcctQ: \"Already have an account? \",\n+    OrLogIn_1: \"Eller \",\n+    OrLogIn_2: \"Logga in\",   // \"Log in\" (this is a button)\n+    OrLogIn_3: \" istället\",  // \"instead\"\n \n-    NewUserQ: \"New user? \",\n-    SignUpInstead_1: \"\",\n-    SignUpInstead_2: \"Sign up\",\n-    SignUpInstead_3: \" instead\",\n+    //NewUserQ: \"New user? \",\n+    SignUpInstead_1: \"Eller \",\n+    SignUpInstead_2: \"Skapa konto\",\n+    SignUpInstead_3: \" istället\",\n+\n+    OrTypeName_1: \", eller bara \",\n+    OrTypeName_2: \"skriv ditt namn\",   // is a button\n+    OrTypeName_3: \"\",\n \n     OrCreateAcctHere: \"Or create account:\",\n     OrTypeName: \"Or type your name:\","
    },
    {
      "sha": "1c5fbecedd79659babcc2e1409cd05d6e93447d7",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -1 +1 @@\n-v0.2021.01\n+v0.2021.02"
    },
    {
      "sha": "38b4e8d8e27a21291259da8851de4e41d5b16ac6",
      "filename": "yarn.lock",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/yarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/879ef3fe1e622c6d169ed775af32a1999c4cb6c5/yarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/yarn.lock?ref=879ef3fe1e622c6d169ed775af32a1999c4cb6c5",
      "patch": "@@ -756,6 +756,11 @@\n   dependencies:\n     \"@types/node\" \"*\"\n \n+\"@types/highlight.js@^9.7.0\":\n+  version \"9.12.4\"\n+  resolved \"https://registry.yarnpkg.com/@types/highlight.js/-/highlight.js-9.12.4.tgz#8c3496bd1b50cc04aeefd691140aa571d4dbfa34\"\n+  integrity sha512-t2szdkwmg2JJyuCM20e8kR2X59WCE5Zkl4bzm1u1Oukjm79zpbiAv+QjnwLnuuV0WHEcX2NgUItu0pAMKuOPww==\n+\n \"@types/http-cache-semantics@*\":\n   version \"4.0.0\"\n   resolved \"https://registry.yarnpkg.com/@types/http-cache-semantics/-/http-cache-semantics-4.0.0.tgz#9140779736aa2655635ee756e2467d787cfe8a2a\"\n@@ -812,6 +817,11 @@\n   dependencies:\n     \"@types/node\" \"*\"\n \n+\"@types/linkify-it@*\":\n+  version \"3.0.0\"\n+  resolved \"https://registry.yarnpkg.com/@types/linkify-it/-/linkify-it-3.0.0.tgz#c0ca4c253664492dbf47a646f31cfd483a6bbc95\"\n+  integrity sha512-x9OaQQTb1N2hPZ/LWJsqushexDvz7NgzuZxiRmZio44WPuolTZNHDBCrOxCzRVOMwamJRO2dWax5NbygOf1OTQ==\n+\n \"@types/lodash.clonedeep@^4.5.6\":\n   version \"4.5.6\"\n   resolved \"https://registry.yarnpkg.com/@types/lodash.clonedeep/-/lodash.clonedeep-4.5.6.tgz#3b6c40a0affe0799a2ce823b440a6cf33571d32b\"\n@@ -878,6 +888,20 @@\n   resolved \"https://registry.yarnpkg.com/@types/lodash/-/lodash-4.14.165.tgz#74d55d947452e2de0742bad65270433b63a8c30f\"\n   integrity sha512-tjSSOTHhI5mCHTy/OOXYIhi2Wt1qcbHmuXD1Ha7q70CgI/I71afO4XtLb/cVexki1oVYchpul/TOuu3Arcdxrg==\n \n+\"@types/markdown-it@^12.0.1\":\n+  version \"12.0.1\"\n+  resolved \"https://registry.yarnpkg.com/@types/markdown-it/-/markdown-it-12.0.1.tgz#8391e19fea4796ff863edda55800c7e669beb358\"\n+  integrity sha512-mHfT8j/XkPb1uLEfs0/C3se6nd+webC2kcqcy8tgcVr0GDEONv/xaQzAN+aQvkxQXk/jC0Q6mPS+0xhFwRF35g==\n+  dependencies:\n+    \"@types/highlight.js\" \"^9.7.0\"\n+    \"@types/linkify-it\" \"*\"\n+    \"@types/mdurl\" \"*\"\n+\n+\"@types/mdurl@*\":\n+  version \"1.0.2\"\n+  resolved \"https://registry.yarnpkg.com/@types/mdurl/-/mdurl-1.0.2.tgz#e2ce9d83a613bacf284c7be7d491945e39e1f8e9\"\n+  integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==\n+\n \"@types/mime@*\":\n   version \"2.0.3\"\n   resolved \"https://registry.yarnpkg.com/@types/mime/-/mime-2.0.3.tgz#c893b73721db73699943bfc3653b1deb7faa4a3a\""
    }
  ]
}
