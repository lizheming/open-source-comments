{
  "sha": "6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6NmU1MGIyOGQ4YjM1MTY2YWY4NGVjZWI1Nzg2YWM2MWVmNmU1YmE0Yw==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2020-07-28T16:34:05Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-07-28T16:34:05Z"
    },
    "message": "[CORL-1149] Active Stories (#3040)\n\n* fix: removed type assertions in place of stricter types\r\n\r\n* fix: fixed bug with module ordering\r\n\r\n* feat: support for story activity jsonp route",
    "tree": {
      "sha": "4a697c7dccaba8ce963ff5d319a829d35eeb5621",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/4a697c7dccaba8ce963ff5d319a829d35eeb5621"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIFN9CRBK7hj4Ov3rIwAAdHIIAAgYY92XEvpeulyi88ODcRXE\nwgzJdBYA4SyBmVbuqdC3BkgoJllK1GpfLEDQwWOM/MOfJs7dQg8GESco4VZ+hRfl\nKjvayuB1skBiyEiLK0i39xspahUAdcnofOq+HzUO3TI8aKdAFDXX5gQRuGk5XSCR\nftWUy3bV83HZ+kwmkPQe+muk5FJrRsz2MYZReIeVJpcou1JnwTyop0XcQhxcvvU1\njDTC1vllryYZ1WbjHth7B6hMVx3kVWWE7krjksa1ARL7UrLLvND446HunoiElebo\nt8bUOC1wUPYQ2lfmnuo+ZWQ7oj7Z+6hPMIsCGvkB3He+T6DdWeoTcEZWAwQHv0Q=\n=Fkqq\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 4a697c7dccaba8ce963ff5d319a829d35eeb5621\nparent 1f72cdbfb36a5435360f16f67d25e8dbb89eeb68\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1595954045 +0000\ncommitter GitHub <noreply@github.com> 1595954045 +0000\n\n[CORL-1149] Active Stories (#3040)\n\n* fix: removed type assertions in place of stricter types\r\n\r\n* fix: fixed bug with module ordering\r\n\r\n* feat: support for story activity jsonp route"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
  "html_url": "https://github.com/coralproject/talk/commit/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1f72cdbfb36a5435360f16f67d25e8dbb89eeb68",
      "url": "https://api.github.com/repos/coralproject/talk/commits/1f72cdbfb36a5435360f16f67d25e8dbb89eeb68",
      "html_url": "https://github.com/coralproject/talk/commit/1f72cdbfb36a5435360f16f67d25e8dbb89eeb68"
    }
  ],
  "stats": {
    "total": 658,
    "additions": 382,
    "deletions": 276
  },
  "files": [
    {
      "sha": "6735efc6acf435412e01892e6f6680146ab40d69",
      "filename": "src/core/client/count/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/client/count/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/client/count/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/count/index.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -71,9 +71,9 @@ function detectAndInject(opts: DetectAndInjectArgs = {}) {\n     const { url, id, notext } = queryMap[ref];\n \n     // Compile the arguments used to generate the\n-    const args: Record<string, string | number | undefined> = {\n-      url,\n+    const args: Record<string, string | undefined> = {\n       id,\n+      url,\n       notext: notext ? \"true\" : \"false\",\n       ref,\n     };"
    },
    {
      "sha": "a4a6095d68b3814bf4899cdd8809191e810bdffc",
      "filename": "src/core/server/app/handlers/api/account/confirm.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 17,
      "changes": 28,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/account/confirm.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/account/confirm.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/account/confirm.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -15,7 +15,7 @@ import {\n   sendConfirmationEmail,\n   verifyConfirmTokenString,\n } from \"coral-server/services/users/auth/confirm\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n import { GQLUSER_ROLE } from \"coral-server/graph/schema/__generated__/types\";\n \n@@ -38,7 +38,7 @@ export const confirmRequestHandler = ({\n   mongo,\n   mailerQueue,\n   signingConfig,\n-}: ConfirmRequestOptions): RequestHandler => {\n+}: ConfirmRequestOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -59,9 +59,7 @@ export const confirmRequestHandler = ({\n       // Rate limit based on the IP address and user agent.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, logger, now } = req.coral;\n \n       // Grab the requesting user.\n       const requestingUser = req.user;\n@@ -99,7 +97,7 @@ export const confirmRequestHandler = ({\n \n       await userIDLimiter.test(req, targetUserID);\n \n-      const log = coral.logger.child(\n+      const log = logger.child(\n         {\n           targetUserID,\n           requestingUserID: requestingUser.id,\n@@ -122,7 +120,7 @@ export const confirmRequestHandler = ({\n         signingConfig,\n         // TODO: (wyattjoh) evaluate the use of required here.\n         targetUser as Required<User>,\n-        coral.now\n+        now\n       );\n \n       log.trace(\"sent confirm email with token\");\n@@ -144,7 +142,7 @@ export const confirmCheckHandler = ({\n   mongo,\n   signingConfig,\n   config,\n-}: ConfirmCheckOptions): RequestHandler => {\n+}: ConfirmCheckOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -165,9 +163,7 @@ export const confirmCheckHandler = ({\n       // Rate limit based on the IP address and user agent.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, now } = req.coral;\n \n       // TODO: evaluate verifying if the Tenant allows verifications to short circuit.\n \n@@ -189,7 +185,7 @@ export const confirmCheckHandler = ({\n         tenant,\n         signingConfig,\n         tokenString,\n-        coral.now\n+        now\n       );\n \n       return res.sendStatus(204);\n@@ -209,7 +205,7 @@ export const confirmHandler = ({\n   mongo,\n   signingConfig,\n   config,\n-}: ConfirmOptions): RequestHandler => {\n+}: ConfirmOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -230,9 +226,7 @@ export const confirmHandler = ({\n       // Rate limit based on the IP address and user agent.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { now, tenant } = req.coral;\n \n       // Grab the token from the request.\n       const tokenString = extractTokenFromRequest(req, true);\n@@ -247,7 +241,7 @@ export const confirmHandler = ({\n       }\n \n       // Execute the reset.\n-      await confirmEmail(mongo, tenant, signingConfig, tokenString, coral.now);\n+      await confirmEmail(mongo, tenant, signingConfig, tokenString, now);\n \n       return res.sendStatus(204);\n     } catch (err) {"
    },
    {
      "sha": "22a857036b12b846cbf8485a9f6fec49746027dd",
      "filename": "src/core/server/app/handlers/api/account/download.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/account/download.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/account/download.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/account/download.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -10,7 +10,7 @@ import {\n   sendUserDownload,\n   verifyDownloadTokenString,\n } from \"coral-server/services/users/download\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n const USER_ID_LIMITER_TTL = \"1d\";\n \n@@ -32,7 +32,7 @@ export const accountDownloadHandler = ({\n   redis,\n   signingConfig,\n   config,\n-}: AccountDownloadOptions): RequestHandler => {\n+}: AccountDownloadOptions): RequestHandler<TenantCoralRequest> => {\n   const userIDLimiter = new RequestLimiter({\n     redis,\n     ttl: USER_ID_LIMITER_TTL,\n@@ -43,9 +43,7 @@ export const accountDownloadHandler = ({\n \n   return async (req, res, next) => {\n     try {\n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, now } = req.coral;\n \n       // Get the fields from the body. Validate will throw an error if the body\n       // does not conform to the specification.\n@@ -71,7 +69,7 @@ export const accountDownloadHandler = ({\n         tenant,\n         signingConfig,\n         token,\n-        coral.now\n+        now\n       );\n \n       // Only load comments since this download token was issued.\n@@ -97,7 +95,7 @@ export const accountDownloadCheckHandler = ({\n   redis,\n   signingConfig,\n   config,\n-}: AccountDownloadCheckOptions): RequestHandler => {\n+}: AccountDownloadCheckOptions): RequestHandler<TenantCoralRequest> => {\n   const userIDLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -108,9 +106,7 @@ export const accountDownloadCheckHandler = ({\n \n   return async (req, res, next) => {\n     try {\n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, now } = req.coral;\n \n       const tokenString = extractTokenFromRequest(req, true);\n       if (!tokenString) {\n@@ -130,7 +126,7 @@ export const accountDownloadCheckHandler = ({\n         tenant,\n         signingConfig,\n         tokenString,\n-        coral.now\n+        now\n       );\n \n       return res.sendStatus(204);"
    },
    {
      "sha": "aef274acf162bcf829e93ec543a13daecd2877b2",
      "filename": "src/core/server/app/handlers/api/account/invite.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/account/invite.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/account/invite.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/account/invite.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -8,7 +8,7 @@ import {\n   redeem,\n   verifyInviteTokenString,\n } from \"coral-server/services/users/auth/invite\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n export type InviteCheckOptions = Pick<\n   AppOptions,\n@@ -20,7 +20,7 @@ export const inviteCheckHandler = ({\n   signingConfig,\n   mongo,\n   config,\n-}: InviteCheckOptions): RequestHandler => {\n+}: InviteCheckOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -41,9 +41,7 @@ export const inviteCheckHandler = ({\n       // Rate limit based on the IP address and user agent.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, now } = req.coral;\n \n       // Grab the token from the request.\n       const tokenString = extractTokenFromRequest(req, true);\n@@ -62,7 +60,7 @@ export const inviteCheckHandler = ({\n         tenant,\n         signingConfig,\n         tokenString,\n-        coral.now\n+        now\n       );\n \n       return res.sendStatus(204);\n@@ -92,7 +90,7 @@ export const inviteHandler = ({\n   mongo,\n   signingConfig,\n   config,\n-}: InviteOptions): RequestHandler => {\n+}: InviteOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -113,9 +111,7 @@ export const inviteHandler = ({\n       // Rate limit based on the IP address and user agent.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, now } = req.coral;\n \n       // Grab the token from the request.\n       const tokenString = extractTokenFromRequest(req, true);\n@@ -143,7 +139,7 @@ export const inviteHandler = ({\n         signingConfig,\n         tokenString,\n         { username, password },\n-        coral.now\n+        now\n       );\n \n       return res.sendStatus(204);"
    },
    {
      "sha": "ff7daccabb08a57cca4ee6e042747e529e5182c8",
      "filename": "src/core/server/app/handlers/api/account/notifications.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/account/notifications.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/account/notifications.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/account/notifications.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -3,7 +3,7 @@ import { RequestLimiter } from \"coral-server/app/request/limiter\";\n import { updateUserNotificationSettings } from \"coral-server/models/user\";\n import { decodeJWT, extractTokenFromRequest } from \"coral-server/services/jwt\";\n import { verifyUnsubscribeTokenString } from \"coral-server/services/notifications/categories/unsubscribe\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n export type UnsubscribeCheckOptions = Pick<\n   AppOptions,\n@@ -15,7 +15,7 @@ export const unsubscribeCheckHandler = ({\n   mongo,\n   signingConfig,\n   config,\n-}: UnsubscribeCheckOptions): RequestHandler => {\n+}: UnsubscribeCheckOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -36,9 +36,7 @@ export const unsubscribeCheckHandler = ({\n       // Rate limit based on the IP address and user agent.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, now } = req.coral;\n \n       // TODO: evaluate verifying if the Tenant allows verifications to short circuit.\n \n@@ -60,7 +58,7 @@ export const unsubscribeCheckHandler = ({\n         tenant,\n         signingConfig,\n         tokenString,\n-        coral.now\n+        now\n       );\n \n       return res.sendStatus(204);\n@@ -80,7 +78,7 @@ export const unsubscribeHandler = ({\n   mongo,\n   signingConfig,\n   config,\n-}: UnsubscribeOptions): RequestHandler => {\n+}: UnsubscribeOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -101,9 +99,7 @@ export const unsubscribeHandler = ({\n       // Rate limit based on the IP address and user agent.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, now } = req.coral;\n \n       // Grab the token from the request.\n       const tokenString = extractTokenFromRequest(req, true);\n@@ -123,7 +119,7 @@ export const unsubscribeHandler = ({\n         tenant,\n         signingConfig,\n         tokenString,\n-        coral.now\n+        now\n       );\n \n       // Unsubscribe the user from all notification types."
    },
    {
      "sha": "d8ebd9e7a042dd8eccf9b1b849438024995c7136",
      "filename": "src/core/server/app/handlers/api/auth/local/forgot.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 17,
      "changes": 28,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/auth/local/forgot.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/auth/local/forgot.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/auth/local/forgot.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -13,7 +13,7 @@ import {\n   verifyResetTokenString,\n } from \"coral-server/services/users/auth\";\n import { validateEmail } from \"coral-server/services/users/helpers\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n export interface ForgotBody {\n   email: string;\n@@ -34,7 +34,7 @@ export const forgotHandler = ({\n   mongo,\n   signingConfig,\n   mailerQueue,\n-}: ForgotOptions): RequestHandler => {\n+}: ForgotOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -55,9 +55,7 @@ export const forgotHandler = ({\n       // Limit based on the IP address.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, logger, now } = req.coral;\n \n       // Check to ensure that the local integration has been enabled.\n       if (!hasEnabledAuthIntegration(tenant, \"local\")) {\n@@ -75,7 +73,7 @@ export const forgotHandler = ({\n       // Limit based on the email address.\n       await emailLimiter.test(req, email);\n \n-      const log = coral.logger.child(\n+      const log = logger.child(\n         {\n           email,\n           tenantID: tenant.id,\n@@ -102,7 +100,7 @@ export const forgotHandler = ({\n         config,\n         signingConfig,\n         user,\n-        req.coral!.now\n+        now\n       );\n \n       // Add the email to the processing queue.\n@@ -150,7 +148,7 @@ export const forgotResetHandler = ({\n   mongo,\n   signingConfig,\n   config,\n-}: ForgotResetOptions): RequestHandler => {\n+}: ForgotResetOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -171,9 +169,7 @@ export const forgotResetHandler = ({\n       // Rate limit based on the IP address and user agent.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, now } = req.coral;\n \n       // Check to ensure that the local integration has been enabled.\n       if (!hasEnabledAuthIntegration(tenant, \"local\")) {\n@@ -206,7 +202,7 @@ export const forgotResetHandler = ({\n         signingConfig,\n         tokenString,\n         password,\n-        coral.now\n+        now\n       );\n \n       return res.sendStatus(204);\n@@ -226,7 +222,7 @@ export const forgotCheckHandler = ({\n   mongo,\n   signingConfig,\n   config,\n-}: ForgotCheckOptions): RequestHandler => {\n+}: ForgotCheckOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -247,9 +243,7 @@ export const forgotCheckHandler = ({\n       // Rate limit based on the IP address and user agent.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, now } = req.coral;\n \n       // Check to ensure that the local integration has been enabled.\n       if (!hasEnabledAuthIntegration(tenant, \"local\")) {\n@@ -274,7 +268,7 @@ export const forgotCheckHandler = ({\n         tenant,\n         signingConfig,\n         tokenString,\n-        coral.now\n+        now\n       );\n \n       return res.sendStatus(204);"
    },
    {
      "sha": "a2d0aaf164a6a4d5fc30033d9ad6e4092889b781",
      "filename": "src/core/server/app/handlers/api/auth/local/index.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/auth/local/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/auth/local/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/auth/local/index.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -1,6 +1,6 @@\n import { AppOptions } from \"coral-server/app\";\n import { handleLogout } from \"coral-server/app/middleware/passport\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n export * from \"./forgot\";\n export * from \"./signup\";\n@@ -10,7 +10,11 @@ export type LogoutOptions = Pick<AppOptions, \"redis\">;\n \n export const logoutHandler = ({\n   redis,\n-}: LogoutOptions): RequestHandler => async (req, res, next) => {\n+}: LogoutOptions): RequestHandler<TenantCoralRequest> => async (\n+  req,\n+  res,\n+  next\n+) => {\n   try {\n     // Get the user on the request.\n     const user = req.user;"
    },
    {
      "sha": "eff00e1c3ee7999767d7964b076f61b3236f291b",
      "filename": "src/core/server/app/handlers/api/auth/local/link.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 12,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/auth/local/link.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/auth/local/link.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/auth/local/link.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -6,7 +6,7 @@ import { RequestLimiter } from \"coral-server/app/request/limiter\";\n import { linkUsersAvailable } from \"coral-server/models/tenant\";\n import { signTokenString } from \"coral-server/services/jwt\";\n import { link } from \"coral-server/services/users\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n export interface LinkBody {\n   email: string;\n@@ -28,7 +28,7 @@ export const linkHandler = ({\n   mongo,\n   signingConfig,\n   config,\n-}: LinkOptions): RequestHandler => {\n+}: LinkOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -42,9 +42,7 @@ export const linkHandler = ({\n       // Rate limit based on the IP address and user agent.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, now } = req.coral;\n \n       // Check to ensure that the local integration has been enabled.\n       if (!linkUsersAvailable(tenant)) {\n@@ -62,13 +60,7 @@ export const linkHandler = ({\n \n       // Account linking is complete! Return the new access token for the\n       // request.\n-      const token = await signTokenString(\n-        signingConfig,\n-        user,\n-        tenant,\n-        {},\n-        coral.now\n-      );\n+      const token = await signTokenString(signingConfig, user, tenant, {}, now);\n \n       return res.json({ token });\n     } catch (err) {"
    },
    {
      "sha": "e8117253e4dab8e4edf6dc1a6500431e67a11106",
      "filename": "src/core/server/app/handlers/api/auth/local/signup.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/auth/local/signup.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/auth/local/signup.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/auth/local/signup.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -10,7 +10,7 @@ import { hasEnabledAuthIntegration } from \"coral-server/models/tenant\";\n import { LocalProfile, User } from \"coral-server/models/user\";\n import { create } from \"coral-server/services/users\";\n import { sendConfirmationEmail } from \"coral-server/services/users/auth\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n import { GQLUSER_ROLE } from \"coral-server/graph/schema/__generated__/types\";\n \n@@ -37,7 +37,7 @@ export const signupHandler = ({\n   mongo,\n   signingConfig,\n   mailerQueue,\n-}: SignupOptions): RequestHandler => {\n+}: SignupOptions): RequestHandler<TenantCoralRequest> => {\n   const ipLimiter = new RequestLimiter({\n     redis,\n     ttl: \"10m\",\n@@ -51,9 +51,7 @@ export const signupHandler = ({\n       // Rate limit based on the IP address and user agent.\n       await ipLimiter.test(req, req.ip);\n \n-      // Tenant is guaranteed at this point.\n-      const tenant = req.coral!.tenant!;\n-      const now = req.coral!.now;\n+      const { tenant, now } = req.coral;\n \n       // Check to ensure that the local integration has been enabled.\n       if (!hasEnabledAuthIntegration(tenant, \"local\")) {"
    },
    {
      "sha": "21d5308c6a8f0d2ed6a4b994e08815ae9c7ad5a6",
      "filename": "src/core/server/app/handlers/api/dashboard/index.ts",
      "status": "modified",
      "additions": 34,
      "deletions": 9,
      "changes": 43,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/dashboard/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/dashboard/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/dashboard/index.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -19,13 +19,17 @@ import {\n   retrieveDailyUserMetrics,\n   retrieveTodayUserMetrics,\n } from \"coral-server/models/user/metrics\";\n-import { Request, RequestHandler } from \"coral-server/types/express\";\n+import {\n+  Request,\n+  RequestHandler,\n+  TenantCoralRequest,\n+} from \"coral-server/types/express\";\n \n-function getMetricsOptions(req: Request) {\n+function getMetricsOptions(req: Request<TenantCoralRequest>) {\n   // Get the current Tenant on the request.\n-  const { id: tenantID } = req.coral!.tenant!;\n+  const { id: tenantID } = req.coral.tenant;\n \n-  const now = req.coral!.now;\n+  const now = req.coral.now;\n \n   // To set a fixed date for the date, uncomment the line below.\n   // const now = DateTime.utc(2020, 5, 5, 12, 30).toJSDate();\n@@ -46,7 +50,11 @@ function getMetricsOptions(req: Request) {\n \n export const todayMetricsHandler = ({\n   mongo,\n-}: AppOptions): RequestHandler => async (req, res, next) => {\n+}: AppOptions): RequestHandler<TenantCoralRequest> => async (\n+  req,\n+  res,\n+  next\n+) => {\n   try {\n     const { tenantID, siteID, tz, now } = getMetricsOptions(req);\n     if (!siteID) {\n@@ -71,7 +79,11 @@ export const todayMetricsHandler = ({\n \n export const totalMetricsHandler = ({\n   mongo,\n-}: AppOptions): RequestHandler => async (req, res, next) => {\n+}: AppOptions): RequestHandler<TenantCoralRequest> => async (\n+  req,\n+  res,\n+  next\n+) => {\n   try {\n     const { tenantID, siteID } = getMetricsOptions(req);\n     if (!siteID) {\n@@ -105,7 +117,11 @@ export const totalMetricsHandler = ({\n \n export const hourlyCommentsMetricsHandler = ({\n   mongo,\n-}: AppOptions): RequestHandler => async (req, res, next) => {\n+}: AppOptions): RequestHandler<TenantCoralRequest> => async (\n+  req,\n+  res,\n+  next\n+) => {\n   try {\n     const { tenantID, siteID, tz, now } = getMetricsOptions(req);\n     if (!siteID) {\n@@ -130,7 +146,11 @@ export const hourlyCommentsMetricsHandler = ({\n \n export const dailyUsersMetricsHandler = ({\n   mongo,\n-}: AppOptions): RequestHandler => async (req, res, next) => {\n+}: AppOptions): RequestHandler<TenantCoralRequest> => async (\n+  req,\n+  res,\n+  next\n+) => {\n   try {\n     const { tenantID, tz, now } = getMetricsOptions(req);\n \n@@ -146,7 +166,11 @@ export const dailyUsersMetricsHandler = ({\n \n export const todayStoriesMetricsHandler = ({\n   mongo,\n-}: AppOptions): RequestHandler => async (req, res, next) => {\n+}: AppOptions): RequestHandler<TenantCoralRequest> => async (\n+  req,\n+  res,\n+  next\n+) => {\n   try {\n     const { tenantID, siteID, tz, now } = getMetricsOptions(req);\n     if (!siteID) {\n@@ -158,6 +182,7 @@ export const todayStoriesMetricsHandler = ({\n       tenantID,\n       siteID,\n       tz,\n+      20,\n       now\n     );\n "
    },
    {
      "sha": "48b45e1b1cf38208505dd33bb1e61e5406457e25",
      "filename": "src/core/server/app/handlers/api/graphql.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 16,
      "changes": 24,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/graphql.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/graphql.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/graphql.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -4,7 +4,11 @@ import { CLIENT_ID_HEADER } from \"coral-common/constants\";\n import { AppOptions } from \"coral-server/app\";\n import { graphqlMiddleware } from \"coral-server/app/middleware/graphql\";\n import GraphContext, { GraphContextOptions } from \"coral-server/graph/context\";\n-import { Request, RequestHandler } from \"coral-server/types/express\";\n+import {\n+  Request,\n+  RequestHandler,\n+  TenantCoralRequest,\n+} from \"coral-server/types/express\";\n \n export type GraphMiddlewareOptions = Pick<\n   AppOptions,\n@@ -30,27 +34,15 @@ export const graphQLHandler = ({\n   config,\n   metrics,\n   ...options\n-}: GraphMiddlewareOptions): RequestHandler => {\n+}: GraphMiddlewareOptions): RequestHandler<TenantCoralRequest> => {\n   // Generate the schema hash.\n   const schemaHash = generateSchemaHash(schema);\n \n   return graphqlMiddleware(\n     config,\n-    async (req: Request) => {\n-      if (!req.coral) {\n-        throw new Error(\"coral was not set\");\n-      }\n-\n+    async (req: Request<TenantCoralRequest>) => {\n       // Pull out some useful properties from Coral.\n-      const { id, now, tenant, cache, logger, persisted } = req.coral;\n-\n-      if (!cache) {\n-        throw new Error(\"cache was not set\");\n-      }\n-\n-      if (!tenant) {\n-        throw new Error(\"tenant was not set\");\n-      }\n+      const { id, now, tenant, logger, persisted } = req.coral;\n \n       // Create some new options to store the tenant context details inside.\n       const opts: GraphContextOptions = {"
    },
    {
      "sha": "44529834b67d6ae5516a606daaaff62828275677",
      "filename": "src/core/server/app/handlers/api/install.ts",
      "status": "modified",
      "additions": 12,
      "deletions": 13,
      "changes": 25,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/install.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/install.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/install.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -25,7 +25,11 @@ import {\n   isInstalled,\n } from \"coral-server/services/tenant\";\n import { create, CreateUser } from \"coral-server/services/users\";\n-import { Request, RequestHandler } from \"coral-server/types/express\";\n+import {\n+  CoralRequest,\n+  Request,\n+  RequestHandler,\n+} from \"coral-server/types/express\";\n \n import { GQLUSER_ROLE } from \"coral-server/graph/schema/__generated__/types\";\n \n@@ -37,7 +41,7 @@ export type TenantInstallCheckHandlerOptions = Pick<\n export const installCheckHandler = ({\n   config,\n   redis,\n-}: TenantInstallCheckHandlerOptions): RequestHandler => {\n+}: TenantInstallCheckHandlerOptions): RequestHandler<CoralRequest> => {\n   const { managementEnabled, signingConfig } = managementSigningConfig(config);\n   const limiter = new RequestLimiter({\n     redis,\n@@ -52,21 +56,16 @@ export const installCheckHandler = ({\n       // Limit based on the IP address.\n       await limiter.test(req, req.ip);\n \n-      if (!req.coral) {\n-        return next(new Error(\"coral was not set\"));\n-      }\n-\n-      if (!req.coral.cache) {\n-        return next(new Error(\"cache was not set\"));\n-      }\n+      // Pull the tenant out.\n+      const { tenant, cache } = req.coral;\n \n-      if (req.coral.tenant) {\n-        // There's already a Tenant on the request! No need to process further.\n+      // If there's already a Tenant on the request! No need to process further.\n+      if (tenant) {\n         return next(new TenantInstalledAlreadyError());\n       }\n \n       // Check to see if the server already has a tenant installed.\n-      const alreadyInstalled = await isInstalled(req.coral.cache.tenant);\n+      const alreadyInstalled = await isInstalled(cache.tenant);\n       if (!alreadyInstalled) {\n         // No tenants are installed at all, we can of course proceed with the\n         // install now.\n@@ -274,7 +273,7 @@ async function checkForInstallationToken(\n     const { token } = await verifyInstallationTokenString(\n       signingConfig,\n       accessToken,\n-      req.coral!.now\n+      req.coral.now\n     );\n \n     // Check to see that the domain on the token matches the hostname on"
    },
    {
      "sha": "e4fe56f7ab8c38eb6cbbe729a219964d8b6871bc",
      "filename": "src/core/server/app/handlers/api/oembed/oembed.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/oembed/oembed.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/oembed/oembed.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/oembed/oembed.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -5,7 +5,7 @@ import { validate } from \"coral-server/app/request/body\";\n import { supportsMediaType } from \"coral-server/models/tenant\";\n import { translate } from \"coral-server/services/i18n\";\n import { fetchOEmbedResponse } from \"coral-server/services/oembed\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n const OEmbedQuerySchema = Joi.object().keys({\n   url: Joi.string().uri().required(),\n@@ -21,12 +21,12 @@ interface OEmbedQuery {\n \n export type OembedHandler = Pick<AppOptions, \"i18n\">;\n \n-export const oembedHandler = ({ i18n }: OembedHandler): RequestHandler => {\n+export const oembedHandler = ({\n+  i18n,\n+}: OembedHandler): RequestHandler<TenantCoralRequest> => {\n   // TODO: add some kind of rate limiting or spam protection\n   return async (req, res, next) => {\n-    // Tenant is guaranteed at this point.\n-    const coral = req.coral!;\n-    const tenant = coral.tenant!;\n+    const { tenant } = req.coral;\n \n     try {\n       const { type, url, maxWidth }: OEmbedQuery = validate("
    },
    {
      "sha": "77d5cf51f888e455e18188d3e2b2fa25bdae8ec2",
      "filename": "src/core/server/app/handlers/api/remoteMedia/index.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 9,
      "changes": 13,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/remoteMedia/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/remoteMedia/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/remoteMedia/index.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -1,22 +1,17 @@\n import { searchGiphy } from \"coral-server/services/giphy\";\n-import { Request, RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n-export const gifSearchHandler: RequestHandler = async (\n-  req: Request,\n+export const gifSearchHandler: RequestHandler<TenantCoralRequest> = async (\n+  req,\n   res,\n   next\n ) => {\n-  if (!req.coral) {\n-    return next(new Error(\"coral was not set\"));\n-  }\n+  const { tenant } = req.coral;\n \n   if (!req.query.query) {\n     return next(new Error(\"search query required\"));\n   }\n \n-  const coral = req.coral;\n-  const tenant = coral.tenant!;\n-\n   try {\n     const results = await searchGiphy(\n       req.query.query,"
    },
    {
      "sha": "6471969bdaca2f63f0109f9d42b92ad4a67f1d0c",
      "filename": "src/core/server/app/handlers/api/story/active.ts",
      "status": "added",
      "additions": 102,
      "deletions": 0,
      "changes": 102,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/story/active.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/story/active.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/story/active.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -0,0 +1,102 @@\n+import Joi from \"@hapi/joi\";\n+import { DateTime } from \"luxon\";\n+\n+import { AppOptions } from \"coral-server/app\";\n+import { validate } from \"coral-server/app/request/body\";\n+import { calculateTotalPublishedCommentCount } from \"coral-server/models/comment\";\n+import { retrieveTopStoryMetrics } from \"coral-server/models/comment/metrics\";\n+import { retrieveSite } from \"coral-server/models/site\";\n+import { retrieveManyStories, Story } from \"coral-server/models/story\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n+\n+export type Options = Pick<AppOptions, \"mongo\">;\n+\n+const ActiveStoriesQuerySchema = Joi.object().keys({\n+  callback: Joi.string().allow(\"\").optional(),\n+  siteID: Joi.string().required(),\n+});\n+\n+interface ActiveStoriesQuery {\n+  callback: string;\n+  siteID: string;\n+}\n+\n+/**\n+ * ActiveHandlerResponse is part of the Active Stories API. Changes to this\n+ * interface should be completed only after a deprecation cycle.\n+ */\n+interface ActiveHandlerResponse {\n+  stories: Array<{\n+    id: string;\n+    url: string;\n+    title: string | null;\n+    image: string | null;\n+    publishedAt: Date | null;\n+    count: number;\n+  }>;\n+}\n+\n+export const activeHandler = ({\n+  mongo,\n+}: Options): RequestHandler<TenantCoralRequest> => async (req, res, next) => {\n+  try {\n+    // Grab the Tenant.\n+    const { tenant, now } = req.coral;\n+\n+    // Ensure we have a siteID on the query.\n+    const { siteID }: ActiveStoriesQuery = validate(\n+      ActiveStoriesQuerySchema,\n+      req.query\n+    );\n+\n+    // Check to see that this site does exist for this Tenant.\n+    const site = await retrieveSite(mongo, tenant.id, siteID);\n+    if (!site) {\n+      throw new Error(\"site not found\");\n+    }\n+\n+    // Find top active stories in the last 24 hours.\n+    const start = DateTime.fromJSDate(now).minus({ hours: 24 }).toJSDate();\n+    const results = await retrieveTopStoryMetrics(\n+      mongo,\n+      tenant.id,\n+      siteID,\n+      5,\n+      start,\n+      now\n+    );\n+\n+    // Fetch all the stories for each count. This will be returned in the same\n+    // ordering of the counts.\n+    const stories = await retrieveManyStories(\n+      mongo,\n+      tenant.id,\n+      results.map(({ _id }) => _id)\n+    );\n+\n+    // Ensure that all entries are not null.\n+    if (!stories.every((story) => story) || results.length !== stories.length) {\n+      throw new Error(\"some stories with comments were not found\");\n+    }\n+\n+    // Generate the response using the existing order of the stories.\n+    const response: ActiveHandlerResponse = {\n+      // We verified above that there was no null stories in the array.\n+      stories: (stories as Story[]).map(\n+        ({ id, url, metadata, commentCounts }) => ({\n+          id,\n+          url,\n+          title: metadata?.title || null,\n+          image: metadata?.image || null,\n+          publishedAt: metadata?.publishedAt || null,\n+          count: calculateTotalPublishedCommentCount(commentCounts.status),\n+        })\n+      ),\n+    };\n+\n+    // Respond using jsonp.\n+    return res.jsonp(response);\n+  } catch (err) {\n+    return next(err);\n+  }\n+};"
    },
    {
      "sha": "e217950c9f88ebaf52a98ea93c99c28729628b10",
      "filename": "src/core/server/app/handlers/api/story/count.ts",
      "status": "modified",
      "additions": 38,
      "deletions": 9,
      "changes": 47,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/story/count.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/story/count.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/story/count.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -1,37 +1,66 @@\n+import Joi from \"@hapi/joi\";\n+\n import { AppOptions } from \"coral-server/app\";\n+import { validate } from \"coral-server/app/request/body\";\n import { calculateTotalPublishedCommentCount } from \"coral-server/models/comment\";\n import { translate } from \"coral-server/services/i18n\";\n import { find } from \"coral-server/services/stories\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n const NUMBER_CLASS_NAME = \"coral-count-number\";\n const TEXT_CLASS_NAME = \"coral-count-text\";\n \n export type CountOptions = Pick<AppOptions, \"mongo\" | \"tenantCache\" | \"i18n\">;\n \n+const StoryCountQuerySchema = Joi.object().keys({\n+  // Required for JSONP support.\n+  callback: Joi.string().allow(\"\").optional(),\n+  id: Joi.string().optional(),\n+  url: Joi.string().optional(),\n+  notext: Joi.string().allow(\"true\", \"false\").required(),\n+  ref: Joi.string().required(),\n+});\n+\n+interface StoryCountQuery {\n+  callback: string;\n+  id?: string;\n+  url?: string;\n+  notext: \"true\" | \"false\";\n+  ref: string;\n+}\n+\n /**\n  * countHandler returns translated comment counts using JSONP.\n  */\n export const countHandler = ({\n   mongo,\n   i18n,\n-}: CountOptions): RequestHandler => async (req, res, next) => {\n+}: CountOptions): RequestHandler<TenantCoralRequest> => async (\n+  req,\n+  res,\n+  next\n+) => {\n   try {\n-    // Tenant is guaranteed at this point.\n-    const coral = req.coral!;\n-    const tenant = coral.tenant!;\n+    const { tenant } = req.coral;\n+\n+    // Ensure we have something to query with.\n+    const { id, url, notext, ref }: StoryCountQuery = validate(\n+      StoryCountQuerySchema,\n+      req.query\n+    );\n \n+    // Try to query the story.\n     const story = await find(mongo, tenant, {\n-      id: req.query.id,\n-      url: req.query.url,\n+      id,\n+      url,\n     });\n \n     const count = story\n       ? calculateTotalPublishedCommentCount(story.commentCounts.status)\n       : 0;\n \n     let html = \"\";\n-    if (req.query.notext === \"true\") {\n+    if (notext === \"true\") {\n       // We only need the count without the text.\n       html = `<span class=\"${NUMBER_CLASS_NAME}\">${count}</span>`;\n     } else {\n@@ -52,7 +81,7 @@ export const countHandler = ({\n     // Respond using jsonp.\n     res.jsonp({\n       // Reference from the client that we'll just send back as it is.\n-      ref: req.query.ref,\n+      ref,\n       html,\n     });\n   } catch (err) {"
    },
    {
      "sha": "f1250b6fba0a94e0937929422838640b8f8c3565",
      "filename": "src/core/server/app/handlers/api/story/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/story/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/story/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/story/index.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -1 +1,2 @@\n+export * from \"./active\";\n export * from \"./count\";"
    },
    {
      "sha": "c0a68cee22de4816e8046f8eb38f32a20acbb143",
      "filename": "src/core/server/app/handlers/api/user/download.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/user/download.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/handlers/api/user/download.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/user/download.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -4,7 +4,7 @@ import {\n   redeemDownloadToken,\n   sendUserDownload,\n } from \"coral-server/services/users/download\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n type AdminDownloadOptions = Pick<\n   AppOptions,\n@@ -15,11 +15,9 @@ export const userDownloadHandler = ({\n   mongo,\n   redis,\n   signingConfig,\n-}: AdminDownloadOptions): RequestHandler => {\n+}: AdminDownloadOptions): RequestHandler<TenantCoralRequest> => {\n   return async (req, res, next) => {\n-    // Tenant is guaranteed at this point.\n-    const coral = req.coral!;\n-    const tenant = coral.tenant!;\n+    const { tenant, now } = req.coral;\n     const { token } = req.query;\n \n     const { sub: userID } = decodeJWT(token);\n@@ -37,7 +35,7 @@ export const userDownloadHandler = ({\n         tenant,\n         signingConfig,\n         token,\n-        coral.now\n+        now\n       );\n \n       // Only load comments since this download token was issued."
    },
    {
      "sha": "220041992e76666e58247a418275bd7149f2a67e",
      "filename": "src/core/server/app/middleware/csp/tenant.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/csp/tenant.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/csp/tenant.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/csp/tenant.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -20,16 +20,12 @@ async function retrieveSiteFromEmbed(\n   mongo: Db,\n   req: Request\n ): Promise<Site | null> {\n-  if (!req.coral || !req.coral.tenant) {\n+  const { tenant } = req.coral;\n+  if (!tenant) {\n     // There is no tenant for the request, don't add any headers.\n     return null;\n   }\n \n-  // Pull the tenant and the logger from the request.\n-  const {\n-    coral: { tenant },\n-  } = req;\n-\n   // Attempt to detect the site based on the query parameters.\n   const {\n     storyURL = \"\","
    },
    {
      "sha": "1cef8e03f045cb4b96ca0012bc0f030254037068",
      "filename": "src/core/server/app/middleware/graphql/persistedQueryMiddleware.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/graphql/persistedQueryMiddleware.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/graphql/persistedQueryMiddleware.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/graphql/persistedQueryMiddleware.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -2,7 +2,7 @@ import { AppOptions } from \"coral-server/app\";\n import { RawQueryNotAuthorized } from \"coral-server/errors\";\n import { getPersistedQuery } from \"coral-server/graph/persisted\";\n import { hasFeatureFlag } from \"coral-server/models/tenant\";\n-import { RequestHandler } from \"coral-server/types/express\";\n+import { RequestHandler, TenantCoralRequest } from \"coral-server/types/express\";\n \n import {\n   GQLFEATURE_FLAG,\n@@ -17,16 +17,10 @@ type PersistedQueryMiddlewareOptions = Pick<\n const persistedQueryMiddleware = ({\n   persistedQueriesRequired,\n   persistedQueryCache,\n-}: PersistedQueryMiddlewareOptions): RequestHandler => async (\n-  req,\n-  res,\n-  next\n-) => {\n+}: PersistedQueryMiddlewareOptions): RequestHandler<\n+  TenantCoralRequest\n+> => async (req, res, next) => {\n   try {\n-    if (!req.coral || !req.coral.tenant) {\n-      throw new Error(\"tenant was not set\");\n-    }\n-\n     // Handle the payload if it is a persisted query.\n     const body = req.method === \"GET\" ? req.query : req.body;\n     const persisted = await getPersistedQuery(persistedQueryCache, body);"
    },
    {
      "sha": "8cbe86cf6ab730d614fa4d55e3d461ed1bb610b5",
      "filename": "src/core/server/app/middleware/installed.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 11,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/installed.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/installed.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/installed.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -19,19 +19,11 @@ export const installedMiddleware = ({\n   res,\n   next\n ) => {\n-  if (!req.coral) {\n-    return next(new Error(\"coral was not set\"));\n-  }\n-\n-  if (!req.coral.cache) {\n-    return next(new Error(\"cache was not set\"));\n-  }\n-\n   const installed = await isInstalled(req.coral.cache.tenant, req.hostname);\n \n-  // If Coral is installed, and redirectIfInstall is true, then it will redirect.\n-  // If Coral is not installed, and redirectIfInstall is false, then it will also\n-  // redirect.\n+  // If Coral is installed, and redirectIfInstall is true, then it will\n+  // redirect. If Coral is not installed, and redirectIfInstall is false, then\n+  // it will also redirect.\n   if (installed === redirectIfInstalled) {\n     return res.redirect(redirectURL);\n   }"
    },
    {
      "sha": "e8f5ca7449328ec693da395f4349a9d5eb4f3d74",
      "filename": "src/core/server/app/middleware/passport/index.ts",
      "status": "modified",
      "additions": 21,
      "deletions": 26,
      "changes": 47,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/passport/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/passport/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/index.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -1,5 +1,5 @@\n import Joi from \"@hapi/joi\";\n-import { NextFunction, RequestHandler, Response } from \"express\";\n+import { NextFunction, Response } from \"express\";\n import { Redis } from \"ioredis\";\n import jwt from \"jsonwebtoken\";\n import passport, { Authenticator } from \"passport\";\n@@ -20,7 +20,11 @@ import {\n   revokeJWT,\n   signTokenString,\n } from \"coral-server/services/jwt\";\n-import { Request } from \"coral-server/types/express\";\n+import {\n+  Request,\n+  RequestHandler,\n+  TenantCoralRequest,\n+} from \"coral-server/types/express\";\n \n export type VerifyCallback = (\n   err?: Error | null,\n@@ -67,16 +71,19 @@ const LogoutTokenSchema = Joi.object().keys({\n   exp: Joi.number().optional(),\n });\n \n-export async function handleLogout(redis: Redis, req: Request, res: Response) {\n+export async function handleLogout(\n+  redis: Redis,\n+  req: Request<TenantCoralRequest>,\n+  res: Response\n+) {\n   // Extract the token from the request.\n   const token = extractTokenFromRequest(req);\n   if (!token) {\n     // No token on the request, indicate that this was successful.\n     return res.sendStatus(204);\n   }\n \n-  // Coral is guaranteed at this point.\n-  const { now } = req.coral!;\n+  const { now } = req.coral;\n \n   // Decode the token.\n   const decoded = jwt.decode(token, {});\n@@ -103,25 +110,15 @@ export async function handleLogout(redis: Redis, req: Request, res: Response) {\n export async function handleSuccessfulLogin(\n   user: User,\n   signingConfig: JWTSigningConfig,\n-  req: Request,\n+  req: Request<TenantCoralRequest>,\n   res: Response,\n   next: NextFunction\n ) {\n   try {\n-    // Coral is guaranteed at this point.\n-    const coral = req.coral!;\n-\n-    // Tenant is guaranteed at this point.\n-    const tenant = coral.tenant!;\n+    const { tenant, now } = req.coral;\n \n     // Grab the token.\n-    const token = await signTokenString(\n-      signingConfig,\n-      user,\n-      tenant,\n-      {},\n-      coral.now\n-    );\n+    const token = await signTokenString(signingConfig, user, tenant, {}, now);\n \n     // Set the cache control headers.\n     res.header(\"Cache-Control\", \"private, no-cache, no-store, must-revalidate\");\n@@ -175,7 +172,7 @@ export async function handleOAuth2Callback(\n   err: Error | null,\n   user: User | null,\n   signingConfig: JWTSigningConfig,\n-  req: Request,\n+  req: Request<TenantCoralRequest>,\n   res: Response\n ) {\n   const path = \"/embed/auth/callback\";\n@@ -189,17 +186,15 @@ export async function handleOAuth2Callback(\n   }\n \n   try {\n-    // Tenant is guaranteed at this point.\n-    const coral = req.coral!;\n-    const tenant = coral.tenant!;\n+    const { tenant, now } = req.coral;\n \n     // Grab the token.\n     const accessToken = await signTokenString(\n       signingConfig,\n       user,\n       tenant,\n       {},\n-      coral.now\n+      now\n     );\n \n     // NOTE: disabled cookie support due to ITP/First Party Cookie bugs\n@@ -235,7 +230,7 @@ export const wrapOAuth2Authn = (\n   signingConfig: JWTSigningConfig,\n   name: string,\n   options?: any\n-): RequestHandler => (req: Request, res, next) =>\n+): RequestHandler<TenantCoralRequest> => (req, res, next) =>\n   authenticator.authenticate(\n     name,\n     { ...options, session: false },\n@@ -262,7 +257,7 @@ export const wrapAuthn = (\n   signingConfig: JWTSigningConfig,\n   name: string,\n   options?: any\n-): RequestHandler => (req: Request, res, next) =>\n+): RequestHandler<TenantCoralRequest> => (req, res, next) =>\n   authenticator.authenticate(\n     name,\n     { ...options, session: false },\n@@ -291,7 +286,7 @@ export const wrapAuthn = (\n  */\n export const authenticate = (\n   authenticator: passport.Authenticator\n-): RequestHandler => (req, res, next) =>\n+): RequestHandler<TenantCoralRequest> => (req, res, next) =>\n   authenticator.authenticate(\n     \"jwt\",\n     { session: false },"
    },
    {
      "sha": "f41dc3de0064337e5d961c8cec24ca0e4434375a",
      "filename": "src/core/server/app/middleware/passport/strategies/jwt.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/passport/strategies/jwt.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/passport/strategies/jwt.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/strategies/jwt.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -13,7 +13,7 @@ import {\n   extractTokenFromRequest,\n   StandardHeader,\n } from \"coral-server/services/jwt\";\n-import { Request } from \"coral-server/types/express\";\n+import { Request, TenantCoralRequest } from \"coral-server/types/express\";\n \n import { JWTToken, JWTVerifier } from \"./verifiers/jwt\";\n import { OIDCIDToken, OIDCVerifier } from \"./verifiers/oidc\";\n@@ -123,7 +123,7 @@ export class JWTStrategy extends Strategy {\n     this.verifiers = createVerifiers(options);\n   }\n \n-  public async authenticate(req: Request) {\n+  public async authenticate(req: Request<TenantCoralRequest>) {\n     // Get the token from the request.\n     const token = extractTokenFromRequest(req);\n     if (!token) {\n@@ -132,7 +132,7 @@ export class JWTStrategy extends Strategy {\n       return this.pass();\n     }\n \n-    const { now, tenant } = req.coral!;\n+    const { now, tenant } = req.coral;\n     if (!tenant) {\n       return this.error(new TenantNotFoundError(req.hostname));\n     }"
    },
    {
      "sha": "80db4da532a00413d0d0c3534dcbabe0a6cc1eff",
      "filename": "src/core/server/app/middleware/passport/strategies/local.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/passport/strategies/local.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/passport/strategies/local.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/strategies/local.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -11,14 +11,14 @@ import {\n   retrieveUserWithProfile,\n   verifyUserPassword,\n } from \"coral-server/models/user\";\n-import { Request } from \"coral-server/types/express\";\n+import { Request, TenantCoralRequest } from \"coral-server/types/express\";\n \n const verifyFactory = (\n   mongo: Db,\n   ipLimiter: RequestLimiter,\n   emailLimiter: RequestLimiter\n ) => async (\n-  req: Request,\n+  req: Request<TenantCoralRequest>,\n   emailInput: string,\n   passwordInput: string,\n   done: VerifyCallback\n@@ -34,8 +34,7 @@ const verifyFactory = (\n     await ipLimiter.test(req, req.ip);\n     await emailLimiter.test(req, email);\n \n-    // The tenant is guaranteed at this point.\n-    const tenant = req.coral!.tenant!;\n+    const { tenant } = req.coral;\n \n     // Get the user from the database.\n     const user = await retrieveUserWithProfile(mongo, tenant.id, {"
    },
    {
      "sha": "ec6f8a0113abae24f9911ca70a4f0493b63931c1",
      "filename": "src/core/server/app/middleware/passport/strategies/oauth2.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 9,
      "changes": 15,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/passport/strategies/oauth2.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/passport/strategies/oauth2.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/strategies/oauth2.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -12,7 +12,7 @@ import {\n   TenantCache,\n   TenantCacheAdapter,\n } from \"coral-server/services/tenant/cache\";\n-import { Request } from \"coral-server/types/express\";\n+import { Request, TenantCoralRequest } from \"coral-server/types/express\";\n \n interface OAuth2Integration {\n   enabled: boolean;\n@@ -66,16 +66,14 @@ export default abstract class OAuth2Strategy<\n   ): Promise<User | null | undefined>;\n \n   protected verifyCallback = async (\n-    req: Request,\n+    req: Request<TenantCoralRequest>,\n     accessToken: string,\n     refreshToken: string,\n     profile: Profile,\n     done: VerifyCallback\n   ) => {\n     try {\n-      // Coral is defined at this point.\n-      const coral = req.coral!;\n-      const tenant = coral.tenant!;\n+      const { tenant, now } = req.coral;\n \n       // Get the integration.\n       const integration = this.getIntegration(tenant.auth.integrations);\n@@ -85,7 +83,7 @@ export default abstract class OAuth2Strategy<\n         tenant,\n         integration as Required<T>,\n         profile,\n-        coral.now\n+        now\n       );\n       if (!user) {\n         return done(null);\n@@ -97,10 +95,9 @@ export default abstract class OAuth2Strategy<\n     }\n   };\n \n-  public authenticate(req: Request) {\n+  public authenticate(req: Request<TenantCoralRequest>) {\n     try {\n-      // Coral is defined at this point.\n-      const tenant = req.coral!.tenant!;\n+      const { tenant } = req.coral;\n \n       // Get the integration.\n       const integration = this.getIntegration(tenant.auth.integrations);"
    },
    {
      "sha": "09b3cff0bf0d376fd107afb00784fa26aaa1d58c",
      "filename": "src/core/server/app/middleware/passport/strategies/oidc/index.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/passport/strategies/oidc/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/passport/strategies/oidc/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/strategies/oidc/index.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -29,7 +29,7 @@ import {\n } from \"coral-server/services/tenant/cache\";\n import { findOrCreate } from \"coral-server/services/users\";\n import { validateUsername } from \"coral-server/services/users/helpers\";\n-import { Request } from \"coral-server/types/express\";\n+import { Request, TenantCoralRequest } from \"coral-server/types/express\";\n \n import { GQLUSER_ROLE } from \"coral-server/graph/schema/__generated__/types\";\n \n@@ -355,9 +355,8 @@ export default class OIDCStrategy extends Strategy {\n       return done(new Error(\"no id_token in params\"));\n     }\n \n-    // Grab the tenant out of the request, as we need some more details. Coral\n-    // is guaranteed at this point.\n-    const { now, tenant } = req.coral!;\n+    // Grab the tenant out of the request, as we need some more details.\n+    const { now, tenant } = req.coral;\n     if (!tenant) {\n       // TODO: return a better error.\n       return done(new Error(\"tenant not found\"));\n@@ -416,12 +415,8 @@ export default class OIDCStrategy extends Strategy {\n     );\n   }\n \n-  private lookupStrategy(req: Request): OAuth2Strategy {\n-    const { tenant } = req.coral!;\n-    if (!tenant) {\n-      // TODO: return a better error.\n-      throw new Error(\"tenant not found\");\n-    }\n+  private lookupStrategy(req: Request<TenantCoralRequest>): OAuth2Strategy {\n+    const { tenant } = req.coral;\n \n     // Get the integration from the tenant. If needed, it will be used to create\n     // a new strategy.\n@@ -445,7 +440,7 @@ export default class OIDCStrategy extends Strategy {\n     return tenantIntegration.strategy;\n   }\n \n-  public authenticate(req: Request) {\n+  public authenticate(req: Request<TenantCoralRequest>) {\n     try {\n       // Lookup the strategy.\n       const strategy = this.lookupStrategy(req);"
    },
    {
      "sha": "5a17d9c893ef29c462129304d5f778b2aab88424",
      "filename": "src/core/server/app/middleware/tenant.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/tenant.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/tenant.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/tenant.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -29,18 +29,14 @@ export const tenantMiddleware = ({\n       req.coral = {\n         id,\n         now,\n+        cache: {\n+          // Attach the tenant cache to the request.\n+          tenant: cache,\n+        },\n         logger: logger.child({ context: \"http\", contextID: id }, true),\n       };\n     }\n \n-    // Set the Coral Tenant Cache on the request.\n-    if (!req.coral.cache) {\n-      req.coral.cache = {\n-        // Attach the tenant cache to the request.\n-        tenant: cache,\n-      };\n-    }\n-\n     // Attach the tenant to the request.\n     const tenant = await cache.retrieveByDomain(req.hostname);\n     if (!tenant) {"
    },
    {
      "sha": "f5c965a54d28761f0a8f4f0ddb0a4d9637793192",
      "filename": "src/core/server/app/middleware/userLimiter.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/userLimiter.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/middleware/userLimiter.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/userLimiter.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -22,8 +22,12 @@ export const userLimiterMiddleware = ({\n   });\n \n   return async (req, res, next) => {\n+    if (!req.user) {\n+      return next();\n+    }\n+\n     limiter\n-      .test(req, req.user!.id)\n+      .test(req, req.user.id)\n       .then(() => next())\n       .catch((err) => next(err));\n   };"
    },
    {
      "sha": "8324843471bcedfc72a4b7e77553afe6d6999bf1",
      "filename": "src/core/server/app/router/api/install.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 11,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/router/api/install.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/router/api/install.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/router/api/install.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -15,17 +15,11 @@ export function createNewInstallRouter(app: AppOptions): Router {\n   // Create a router.\n   const router = createAPIRouter();\n \n-  router.get(\n-    \"/\",\n-    tenantMiddleware({ cache: app.tenantCache, passNoTenant: true }),\n-    installCheckHandler(app)\n-  );\n-  router.post(\n-    \"/\",\n-    jsonMiddleware(REQUEST_MAX),\n-    tenantMiddleware({ cache: app.tenantCache, passNoTenant: true }),\n-    installHandler(app)\n-  );\n+  // Allow the tenant to be passed on installations.\n+  router.use(tenantMiddleware({ cache: app.tenantCache, passNoTenant: true }));\n+\n+  router.get(\"/\", installCheckHandler(app));\n+  router.post(\"/\", jsonMiddleware(REQUEST_MAX), installHandler(app));\n \n   return router;\n }"
    },
    {
      "sha": "dc3d88674cde811a3f416968b752f274f4ce5a43",
      "filename": "src/core/server/app/router/api/story.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/router/api/story.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/router/api/story.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/router/api/story.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -1,5 +1,5 @@\n import { AppOptions } from \"coral-server/app\";\n-import { countHandler } from \"coral-server/app/handlers\";\n+import { activeHandler, countHandler } from \"coral-server/app/handlers\";\n \n import { createAPIRouter } from \"./helpers\";\n \n@@ -8,6 +8,7 @@ export function createStoryRouter(app: AppOptions) {\n   const router = createAPIRouter({ cache: \"2m\" });\n \n   router.get(\"/count.js\", countHandler(app));\n+  router.get(\"/active.js\", activeHandler(app));\n \n   return router;\n }"
    },
    {
      "sha": "2c118ae40db35907316528418c128b5732a5b511",
      "filename": "src/core/server/app/router/client.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/router/client.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/app/router/client.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/router/client.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -115,7 +115,7 @@ const clientHandler = ({\n \n   // Grab the locale code from the tenant configuration, if available.\n   let locale: LanguageCode = defaultLocale;\n-  if (req.coral && req.coral.tenant) {\n+  if (req.coral.tenant) {\n     locale = req.coral.tenant.locale;\n   }\n \n@@ -155,6 +155,7 @@ export function mountClientRoutes(\n     );\n     return;\n   }\n+\n   // Tenant identification middleware.\n   router.use(\n     tenantMiddleware({"
    },
    {
      "sha": "430d9922ca1b2027d9d804776a3b47186e078768",
      "filename": "src/core/server/models/comment/metrics.ts",
      "status": "modified",
      "additions": 33,
      "deletions": 9,
      "changes": 42,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/models/comment/metrics.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/models/comment/metrics.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/comment/metrics.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -15,6 +15,8 @@ import {\n   GQLTAG,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n+import { PUBLISHED_STATUSES } from \"./constants\";\n+\n export async function retrieveHourlyCommentMetrics(\n   mongo: Db,\n   tenantID: string,\n@@ -145,31 +147,53 @@ export async function retrieveAverageCommentsMetric(\n   return Math.floor(total / hours);\n }\n \n-export async function retrieveTodayTopStoryMetrics(\n+export async function retrieveTopStoryMetrics(\n   mongo: Db,\n   tenantID: string,\n   siteID: string,\n-  timezone: string,\n+  limit: number,\n+  start: Date,\n   now: Date\n ) {\n-  const start = DateTime.fromJSDate(now).setZone(timezone).startOf(\"day\");\n-  const end = DateTime.fromJSDate(now);\n-\n-  // Return the last 24 hours worth of comments.\n   const results = await collection<Result>(mongo)\n     .aggregate([\n-      { $match: { tenantID, siteID, createdAt: { $gte: start, $lte: end } } },\n+      {\n+        $match: {\n+          tenantID,\n+          siteID,\n+          createdAt: { $gte: start, $lte: now },\n+          status: {\n+            $in: PUBLISHED_STATUSES,\n+          },\n+        },\n+      },\n       {\n         $group: {\n           _id: \"$storyID\",\n           count: { $sum: 1 },\n         },\n       },\n       { $sort: { count: -1 } },\n-      // TODO: 17 was for visual treatment, feel free to change this!\n-      { $limit: 17 },\n+      { $limit: limit },\n     ])\n     .toArray();\n \n   return results;\n }\n+\n+export async function retrieveTodayTopStoryMetrics(\n+  mongo: Db,\n+  tenantID: string,\n+  siteID: string,\n+  timezone: string,\n+  limit: number,\n+  now: Date\n+) {\n+  // Return the last day worth of comments.\n+  const start = DateTime.fromJSDate(now)\n+    .setZone(timezone)\n+    .startOf(\"day\")\n+    .toJSDate();\n+\n+  return retrieveTopStoryMetrics(mongo, tenantID, siteID, limit, start, now);\n+}"
    },
    {
      "sha": "e6ca43233771640d72c400f8ca4d1bc31291920e",
      "filename": "src/core/server/types/express.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/types/express.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/core/server/types/express.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/types/express.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -1,5 +1,6 @@\n import { NextFunction, Request as ExpressRequest, Response } from \"express\";\n \n+import { RequireProperty } from \"coral-common/types\";\n import { Logger } from \"coral-server/logger\";\n import { PersistedQuery } from \"coral-server/models/queries\";\n import { Tenant } from \"coral-server/models/tenant\";\n@@ -9,28 +10,30 @@ import { TenantCache } from \"coral-server/services/tenant/cache\";\n export interface CoralRequest {\n   id: string;\n   now: Date;\n-  cache?: {\n+  cache: {\n     tenant: TenantCache;\n   };\n   tenant?: Tenant;\n   persisted?: PersistedQuery;\n   logger: Logger;\n }\n \n-export interface Request extends ExpressRequest {\n-  coral?: CoralRequest;\n+export type TenantCoralRequest = RequireProperty<CoralRequest, \"tenant\">;\n+\n+export interface Request<T = CoralRequest> extends ExpressRequest {\n+  coral: T;\n   user?: User;\n }\n \n-export type RequestHandler = (\n-  req: Request,\n+export type RequestHandler<T = CoralRequest> = (\n+  req: Request<T>,\n   res: Response,\n   next: NextFunction\n ) => void;\n \n export type ErrorRequestHandler = (\n   err: Error,\n-  req: Request,\n+  req: Request<CoralRequest>,\n   res: Response,\n   next: NextFunction\n ) => void;"
    },
    {
      "sha": "983ac57eb5ee4701ccfd8ba5aa82c736d6573d4d",
      "filename": "src/index.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6e50b28d8b35166af84eceb5786ac61ef6e5ba4c/src/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/index.ts?ref=6e50b28d8b35166af84eceb5786ac61ef6e5ba4c",
      "patch": "@@ -1,11 +1,7 @@\n import dotenv from \"dotenv\";\n import { rewrite } from \"env-rewrite\";\n-import express from \"express\";\n import sourceMapSupport from \"source-map-support\";\n \n-import createCoral from \"./core\";\n-import logger from \"./core/server/logger\";\n-\n // Configure the source map support so stack traces will reference the source\n // files rather than the transpiled code.\n sourceMapSupport.install({\n@@ -25,6 +21,14 @@ rewrite();\n // the environment.\n dotenv.config();\n \n+// NOTE: It is required for the `dotenv` module to be configured before other\n+// modules to ensure the rewriting takes place before those modules load!\n+\n+import express from \"express\";\n+\n+import createCoral from \"./core\";\n+import logger from \"./core/server/logger\";\n+\n // Makes the script crash on unhandled rejections instead of silently\n // ignoring them. In the future, promise rejections that are not handled will\n // terminate the Node.js process with a non-zero exit code."
    }
  ]
}
