{
  "sha": "61dfc11866ca4e55d2b09da8f280c40e462857c9",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6NjFkZmMxMTg2NmNhNGU1NWQyYjA5ZGE4ZjI4MGM0MGU0NjI4NTdjOQ==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2020-09-29T14:24:03Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-09-29T14:24:03Z"
    },
    "message": "fix: improved error and logging (#3196)\n\nCo-authored-by: kodiakhq[bot] <49736102+kodiakhq[bot]@users.noreply.github.com>",
    "tree": {
      "sha": "fa0926fe46e125d7749a1e1edd49f704d1b5e4bb",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/fa0926fe46e125d7749a1e1edd49f704d1b5e4bb"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/61dfc11866ca4e55d2b09da8f280c40e462857c9",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfc0OECRBK7hj4Ov3rIwAAdHIIAD4QEsikTbnhAGFzpFVtHn1f\nAtGWWC0onwOff49lMRp18bKwpMuYjkJ8MgaHY6Lto+Yu62EW2S+mjqfnGIprPJ/v\nE/8qUt9sst964NlZRoVXXsi0CdD6CHcStf2YuWNcF9pGNke7FhQJIsvlCz1SVqY2\nFvHshbEG1PLXBC4c8jcaX6ho+lbR2qa5NPMX8mftJShu6t9REgBRYB8c8KhUQIbB\nnwRGOIv2X/cksAPDgIawWMyc7NQJ58zwMnkp2KRgbhD+oz9E/AVA7C+DTiZdd/Cg\npHnm8ZlpsdAIMVEjDRGq0LqgHGBeZl8D2VmwDEQ8crRbMBViOyz3jo22KNt8CZE=\n=GxlM\n-----END PGP SIGNATURE-----\n",
      "payload": "tree fa0926fe46e125d7749a1e1edd49f704d1b5e4bb\nparent f98b7b1a05d633cf91014e3ae9bee11ff9839fb3\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1601389443 -0600\ncommitter GitHub <noreply@github.com> 1601389443 +0000\n\nfix: improved error and logging (#3196)\n\nCo-authored-by: kodiakhq[bot] <49736102+kodiakhq[bot]@users.noreply.github.com>"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/61dfc11866ca4e55d2b09da8f280c40e462857c9",
  "html_url": "https://github.com/coralproject/talk/commit/61dfc11866ca4e55d2b09da8f280c40e462857c9",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/61dfc11866ca4e55d2b09da8f280c40e462857c9/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f98b7b1a05d633cf91014e3ae9bee11ff9839fb3",
      "url": "https://api.github.com/repos/coralproject/talk/commits/f98b7b1a05d633cf91014e3ae9bee11ff9839fb3",
      "html_url": "https://github.com/coralproject/talk/commit/f98b7b1a05d633cf91014e3ae9bee11ff9839fb3"
    }
  ],
  "stats": {
    "total": 269,
    "additions": 174,
    "deletions": 95
  },
  "files": [
    {
      "sha": "1dd2823c22b057e14a01bea38d0dc712da30c572",
      "filename": "package-lock.json",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/package-lock.json",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/package-lock.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package-lock.json?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -8771,9 +8771,9 @@\n       }\n     },\n     \"@types/bson\": {\n-      \"version\": \"4.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/@types/bson/-/bson-4.0.1.tgz\",\n-      \"integrity\": \"sha512-K6VAEdLVJFBxKp8m5cRTbUfeZpuSvOuLKJLrgw9ANIXo00RiyGzgH4BKWWR4F520gV4tWmxG7q9sKQRVDuzrBw==\",\n+      \"version\": \"4.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/@types/bson/-/bson-4.0.2.tgz\",\n+      \"integrity\": \"sha512-+uWmsejEHfmSjyyM/LkrP0orfE2m5Mx9Xel4tXNeqi1ldK5XMQcDsFkBmLDtuyKUbxj2jGDo0H240fbCRJZo7Q==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@types/node\": \"*\""
    },
    {
      "sha": "8f9131282f8af9227373bea36aa149b79b11e83a",
      "filename": "package.json",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/package.json",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/package.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package.json?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -397,6 +397,11 @@\n       \"Newer versions has problems with using nunjucks.\",\n       \"Update when the following issue is resolved:\",\n       \"https://github.com/tj/consolidate.js/issues/244\"\n+    ],\n+    \"@types/mongodb@3.1.22\": [\n+      \"Newer versions has problems with optional fields when querying with null\",\n+      \"Update when the following issue is resolved:\",\n+      \"https://github.com/DefinitelyTyped/DefinitelyTyped/issues/47686\"\n     ]\n   },\n   \"husky\": {"
    },
    {
      "sha": "ba9359db17a0ac83ef6f967fbbf93e9f064eedcf",
      "filename": "src/core/server/app/middleware/passport/strategies/verifiers/sso.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/app/middleware/passport/strategies/verifiers/sso.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/app/middleware/passport/strategies/verifiers/sso.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/strategies/verifiers/sso.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -335,7 +335,9 @@ export class SSOVerifier implements Verifier<SSOToken> {\n       // succeeded! Mark the key as used last now and break out. We should do\n       // this in the nextTick because it's not important to have it recorded at\n       // the same time.\n-      void updateLastUsedAtKID(this.redis, tenant.id, key.kid, now);\n+      updateLastUsedAtKID(this.redis, tenant.id, key.kid, now).catch((err) => {\n+        logger.error({ err }, \"could not update last used at kid\");\n+      });\n \n       // TODO: [CORL-754] (wyattjoh) reintroduce when we amend the front-end to display the kid\n       // if (!kid) {"
    },
    {
      "sha": "316c90f14c53c373e440a6a408b6c046b09330b2",
      "filename": "src/core/server/events/publisher.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/events/publisher.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/events/publisher.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/events/publisher.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -115,7 +115,7 @@ export default class CoralEventListenerBroker {\n     }\n \n     if (listener.disabled) {\n-      logger.warn({ listenerName: listener.name }, \"listener was disabled\");\n+      logger.info({ listenerName: listener.name }, \"listener was disabled\");\n       return;\n     }\n "
    },
    {
      "sha": "76ae1429cf297b614ba623c11eacd2d2530ee759",
      "filename": "src/core/server/index.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/index.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -201,6 +201,9 @@ class Server {\n       config\n     );\n \n+    // Connect the tenant cache.\n+    await this.tenantCache.connect();\n+\n     // Create the migration manager.\n     this.migrationManager = new MigrationManager({\n       tenantCache: this.tenantCache,"
    },
    {
      "sha": "0fc3cec1007ced2e8a81163f88348a433311414d",
      "filename": "src/core/server/models/comment/counts/shared.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/models/comment/counts/shared.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/models/comment/counts/shared.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/comment/counts/shared.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -210,10 +210,7 @@ export async function updateSharedCommentCounts(\n     const args = flattenDeep(Object.entries(moderationQueueQueues));\n \n     // Add the command to the pipeline.\n-    void pipeline.mhincrby(\n-      commentCountsModerationQueueQueuesKey(tenantID),\n-      ...args\n-    );\n+    pipeline.mhincrby(commentCountsModerationQueueQueuesKey(tenantID), ...args);\n   }\n \n   // Execute the pipeline."
    },
    {
      "sha": "ecf45c1d5d6d2777cad2f6582d5f21c196673382",
      "filename": "src/core/server/queue/Task.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/queue/Task.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/queue/Task.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/Task.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -9,7 +9,7 @@ import { TenantResource } from \"coral-server/models/tenant\";\n \n export type JobProcessor<T, U = void> = (job: Job<T>) => Promise<U>;\n \n-export interface TaskOptions<T, U = void> {\n+interface TaskOptions<T, U = void> {\n   jobName: string;\n   jobProcessor: JobProcessor<T, U>;\n   jobOptions?: Queue.JobOptions;\n@@ -84,6 +84,8 @@ export default class Task<T extends TenantResource, U = any> {\n    * job requests.\n    */\n   public process() {\n+    // We don't handle this error here so that if the process is no longer being\n+    // ran, we should throw an error to crash the process.\n     void this.queue.process(async (job: Job<T>) => {\n       const log = this.log.child(\n         { jobID: job.id, attemptsMade: job.attemptsMade },\n@@ -111,6 +113,13 @@ export default class Task<T extends TenantResource, U = any> {\n       }\n     });\n \n+    // When an error occurs with the job processor, handle the error by logging\n+    // it and re-throwing it to crash the process.\n+    this.queue.on(\"error\", (err: Error) => {\n+      this.log.fatal({ err }, \"failed to handle error from job\");\n+      process.exit(1);\n+    });\n+\n     this.log.trace(\"registered processor for job type\");\n   }\n }"
    },
    {
      "sha": "59d91b32895acc39835ae7e5dcef362a9dde5b7d",
      "filename": "src/core/server/queue/index.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/queue/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/queue/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/index.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -4,7 +4,11 @@ import { Db } from \"mongodb\";\n import { Config } from \"coral-server/config\";\n import { I18n } from \"coral-server/services/i18n\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n-import { AugmentedRedis, createRedisClient } from \"coral-server/services/redis\";\n+import {\n+  AugmentedRedis,\n+  createRedisClient,\n+  createRedisClientFactory,\n+} from \"coral-server/services/redis\";\n import { TenantCache } from \"coral-server/services/tenant/cache\";\n \n import { createMailerTask, MailerQueue } from \"./tasks/mailer\";\n@@ -14,8 +18,8 @@ import { createScraperTask, ScraperQueue } from \"./tasks/scraper\";\n import { createWebhookTask, WebhookQueue } from \"./tasks/webhook\";\n \n const createQueueOptions = (config: Config): Queue.QueueOptions => {\n-  const client = createRedisClient(config);\n-  const subscriber = createRedisClient(config);\n+  const getRedisQueueClient = createRedisClientFactory(config);\n+  const getRedisQueueSubscriber = createRedisClientFactory(config);\n \n   // Return the options that can be used by the Queue.\n   return {\n@@ -25,9 +29,9 @@ const createQueueOptions = (config: Config): Queue.QueueOptions => {\n     createClient: (type) => {\n       switch (type) {\n         case \"subscriber\":\n-          return subscriber;\n+          return getRedisQueueSubscriber();\n         case \"client\":\n-          return client;\n+          return getRedisQueueClient();\n         case \"bclient\":\n           return createRedisClient(config);\n       }"
    },
    {
      "sha": "43f67283592c99774cf3f329134a13242fa2e89d",
      "filename": "src/core/server/queue/tasks/mailer/processor.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/queue/tasks/mailer/processor.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/queue/tasks/mailer/processor.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/mailer/processor.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -1,7 +1,6 @@\n import { FluentBundle } from \"@fluent/bundle/compat\";\n import { DOMLocalization } from \"@fluent/dom/compat\";\n import Joi from \"@hapi/joi\";\n-import { Job } from \"bull\";\n import createDOMPurify from \"dompurify\";\n import {\n   Message,\n@@ -21,6 +20,7 @@ import { WrappedInternalError } from \"coral-server/errors\";\n import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import { Tenant } from \"coral-server/models/tenant\";\n+import { JobProcessor } from \"coral-server/queue/Task\";\n import { I18n, translate } from \"coral-server/services/i18n\";\n import {\n   TenantCache,\n@@ -187,7 +187,9 @@ function createMessageTranslator(i18n: I18n) {\n   };\n }\n \n-export const createJobProcessor = (options: MailProcessorOptions) => {\n+export const createJobProcessor = (\n+  options: MailProcessorOptions\n+): JobProcessor<MailerData> => {\n   const { tenantCache, i18n } = options;\n \n   // Create the cache adapter that will handle invalidating the email transport\n@@ -197,7 +199,7 @@ export const createJobProcessor = (options: MailProcessorOptions) => {\n   // Create the message translator function.\n   const translateMessage = createMessageTranslator(i18n);\n \n-  return async (job: Job<MailerData>) => {\n+  return async (job) => {\n     const { value: data, error: err } = MailerDataSchema.validate(job.data, {\n       stripUnknown: true,\n       presence: \"required\","
    },
    {
      "sha": "6eeb7d4ad633e8dcc488796b5257aa172b94b71d",
      "filename": "src/core/server/queue/tasks/notifier/processor.ts",
      "status": "modified",
      "additions": 56,
      "deletions": 58,
      "changes": 114,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/queue/tasks/notifier/processor.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/queue/tasks/notifier/processor.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/notifier/processor.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -1,10 +1,10 @@\n-import { Job } from \"bull\";\n import { Db } from \"mongodb\";\n \n import { Config } from \"coral-server/config\";\n import { CoralEventType } from \"coral-server/events\";\n import { NotifierCoralEventListenerPayloads } from \"coral-server/events/listeners/notifier\";\n import logger from \"coral-server/logger\";\n+import { JobProcessor } from \"coral-server/queue/Task\";\n import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n import { NotificationCategory } from \"coral-server/services/notifications/categories\";\n@@ -60,61 +60,59 @@ export const createJobProcessor = ({\n   registry,\n   tenantCache,\n   signingConfig,\n-}: Options) => {\n-  return async (job: Job<NotifierData>) => {\n-    const now = new Date();\n-\n-    // Pull the data out of the model.\n-    const { tenantID, input } = job.data;\n-\n-    // Create a new logger to handle logging for this job.\n-    const log = logger.child(\n-      {\n-        jobID: job.id,\n-        jobName: JOB_NAME,\n-        tenantID,\n-      },\n-      true\n-    );\n-\n-    log.debug(\"starting to handle a notify operation\");\n-\n-    // Get all the handlers that are active for this channel.\n-    const categories = registry.get(input.type);\n-    if (!categories || categories.length === 0) {\n-      return;\n-    }\n-\n-    // Grab the tenant from the cache.\n-    const tenant = await tenantCache.retrieveByID(tenantID);\n-    if (!tenant) {\n-      throw new Error(\"tenant not found with ID\");\n-    }\n-\n-    // Create a notification context to handle processing notifications.\n-    const ctx = new NotificationContext({\n-      mongo,\n-      config,\n-      signingConfig,\n-      tenant,\n-      now,\n-    });\n-\n-    // For each of the handler's we need to process, we should iterate to\n-    // generate their notifications.\n-    let notifications = await handleHandlers(ctx, categories, input);\n-\n-    // Check to see if some of the other notifications that are queued\n-    // had this notification superseded.\n-    notifications = notifications.filter(filterSuperseded);\n-\n-    // Send all the notifications now.\n-    await processNewNotifications(\n-      ctx,\n-      notifications.map(({ notification }) => notification),\n-      mailerQueue\n-    );\n-\n-    log.debug({ notifications: notifications.length }, \"notifications handled\");\n-  };\n+}: Options): JobProcessor<NotifierData> => async (job) => {\n+  const now = new Date();\n+\n+  // Pull the data out of the model.\n+  const { tenantID, input } = job.data;\n+\n+  // Create a new logger to handle logging for this job.\n+  const log = logger.child(\n+    {\n+      jobID: job.id,\n+      jobName: JOB_NAME,\n+      tenantID,\n+    },\n+    true\n+  );\n+\n+  log.debug(\"starting to handle a notify operation\");\n+\n+  // Get all the handlers that are active for this channel.\n+  const categories = registry.get(input.type);\n+  if (!categories || categories.length === 0) {\n+    return;\n+  }\n+\n+  // Grab the tenant from the cache.\n+  const tenant = await tenantCache.retrieveByID(tenantID);\n+  if (!tenant) {\n+    throw new Error(\"tenant not found with ID\");\n+  }\n+\n+  // Create a notification context to handle processing notifications.\n+  const ctx = new NotificationContext({\n+    mongo,\n+    config,\n+    signingConfig,\n+    tenant,\n+    now,\n+  });\n+\n+  // For each of the handler's we need to process, we should iterate to\n+  // generate their notifications.\n+  let notifications = await handleHandlers(ctx, categories, input);\n+\n+  // Check to see if some of the other notifications that are queued\n+  // had this notification superseded.\n+  notifications = notifications.filter(filterSuperseded);\n+\n+  // Send all the notifications now.\n+  await processNewNotifications(\n+    ctx,\n+    notifications.map(({ notification }) => notification),\n+    mailerQueue\n+  );\n+\n+  log.debug({ notifications: notifications.length }, \"notifications handled\");\n };"
    },
    {
      "sha": "57ffa6bd76063c99ea6257cbc67be8283a547c60",
      "filename": "src/core/server/queue/tasks/rejector.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/queue/tasks/rejector.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/queue/tasks/rejector.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/rejector.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -1,4 +1,4 @@\n-import Queue, { Job } from \"bull\";\n+import Queue from \"bull\";\n import { Db } from \"mongodb\";\n \n import { createTimer } from \"coral-server/helpers\";\n@@ -9,7 +9,7 @@ import {\n   retrieveAllCommentsUserConnection,\n } from \"coral-server/models/comment\";\n import { Connection } from \"coral-server/models/helpers\";\n-import Task from \"coral-server/queue/Task\";\n+import Task, { JobProcessor } from \"coral-server/queue/Task\";\n import { AugmentedRedis } from \"coral-server/services/redis\";\n import { TenantCache } from \"coral-server/services/tenant/cache\";\n import { rejectComment } from \"coral-server/stacks\";\n@@ -47,7 +47,7 @@ const createJobProcessor = ({\n   mongo,\n   redis,\n   tenantCache,\n-}: RejectorProcessorOptions) => async (job: Job<RejectorData>) => {\n+}: RejectorProcessorOptions): JobProcessor<RejectorData> => async (job) => {\n   // Pull out the job data.\n   const { authorID, moderatorID, tenantID } = job.data;\n   const log = logger.child("
    },
    {
      "sha": "ad811e6b81fb229add6443f339e3dc87210af036",
      "filename": "src/core/server/services/comments/actions.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/services/comments/actions.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/services/comments/actions.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/actions.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -2,6 +2,7 @@ import { Db } from \"mongodb\";\n \n import { CommentNotFoundError } from \"coral-server/errors\";\n import { CoralEventPublisherBroker } from \"coral-server/events/publisher\";\n+import logger from \"coral-server/logger\";\n import {\n   ACTION_TYPE,\n   CommentAction,\n@@ -247,12 +248,14 @@ export async function createReaction(\n   );\n   if (action) {\n     // A comment reaction was created! Publish it.\n-    void publishCommentReactionCreated(\n+    publishCommentReactionCreated(\n       broker,\n       comment,\n       input.commentRevisionID,\n       action\n-    );\n+    ).catch((err) => {\n+      logger.error({ err }, \"could not publish comment flag created\");\n+    });\n   }\n \n   return comment;\n@@ -357,12 +360,14 @@ export async function createFlag(\n   );\n   if (action) {\n     // A action was created! Publish the event.\n-    void publishCommentFlagCreated(\n+    publishCommentFlagCreated(\n       broker,\n       comment,\n       input.commentRevisionID,\n       action\n-    );\n+    ).catch((err) => {\n+      logger.error({ err }, \"could not publish comment flag created\");\n+    });\n   }\n \n   return comment;"
    },
    {
      "sha": "5113b5a2a0773e425b4c9f0e258ded926f45765b",
      "filename": "src/core/server/services/mongodb/index.ts",
      "status": "modified",
      "additions": 25,
      "deletions": 2,
      "changes": 27,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/services/mongodb/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/services/mongodb/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/mongodb/index.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -2,8 +2,9 @@ import { Db, MongoClient } from \"mongodb\";\n \n import { Config } from \"coral-server/config\";\n import { WrappedInternalError } from \"coral-server/errors\";\n+import logger from \"coral-server/logger\";\n \n-export async function createMongoClient(config: Config): Promise<MongoClient> {\n+async function createMongoClient(config: Config): Promise<MongoClient> {\n   try {\n     return await MongoClient.connect(config.get(\"mongodb\"), {\n       useNewUrlParser: true,\n@@ -14,6 +15,21 @@ export async function createMongoClient(config: Config): Promise<MongoClient> {\n   }\n }\n \n+function attachHandlers(db: Db) {\n+  db.on(\"error\", (err: Error) => {\n+    logger.error({ err }, \"mongodb has encountered an error\");\n+  });\n+  db.on(\"close\", () => {\n+    logger.warn(\"mongodb has closed\");\n+  });\n+  db.on(\"reconnect\", () => {\n+    logger.warn(\"mongodb has reconnected\");\n+  });\n+  db.on(\"timeout\", () => {\n+    logger.warn(\"mongodb has timed out\");\n+  });\n+}\n+\n /**\n  * create will connect to the MongoDB instance identified in the configuration.\n  *\n@@ -23,7 +39,14 @@ export async function createMongoDB(config: Config): Promise<Db> {\n   // Connect and create a client for MongoDB.\n   const client = await createMongoClient(config);\n \n+  logger.info(\"mongodb has connected\");\n+\n   // Return the database handle, which defaults to the database name provided\n   // in the config connection string.\n-  return client.db();\n+  const db = client.db();\n+\n+  // Attach the handlers.\n+  attachHandlers(db);\n+\n+  return db;\n }"
    },
    {
      "sha": "08397306ed99a5ed8ff18dcf69b20507670e64d8",
      "filename": "src/core/server/services/redis/index.ts",
      "status": "modified",
      "additions": 26,
      "deletions": 3,
      "changes": 29,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/services/redis/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/services/redis/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/redis/index.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -4,11 +4,13 @@ import { Config } from \"coral-server/config\";\n import { WrappedInternalError } from \"coral-server/errors\";\n import logger from \"coral-server/logger\";\n \n-export interface AugmentedRedisCommands {\n+interface AugmentedRedisCommands {\n   mhincrby(key: string, ...args: any[]): Promise<void>;\n }\n \n-export type AugmentedPipeline = Pipeline & AugmentedRedisCommands;\n+export interface AugmentedPipeline extends Pipeline {\n+  mhincrby(key: string, ...args: any[]): Pipeline;\n+}\n \n export type AugmentedRedis = Omit<Redis, \"pipeline\"> &\n   AugmentedRedisCommands & {\n@@ -30,10 +32,19 @@ function augmentRedisClient(redis: Redis): AugmentedRedis {\n }\n \n function attachHandlers(redis: Redis) {\n-  // Attach to the error event.\n+  // There appears to already be 10 error listeners on Redis. They must be added\n+  // by the framework. Increase the maximum number of listeners to avoid the\n+  // memory leak warning.\n+  redis.setMaxListeners(11);\n   redis.on(\"error\", (err: Error) => {\n     logger.error({ err }, \"an error occurred with redis\");\n   });\n+  redis.on(\"close\", () => {\n+    logger.warn(\"redis connection has been closed\");\n+  });\n+  redis.on(\"reconnecting\", () => {\n+    logger.warn(\"redis has reconnected\");\n+  });\n }\n \n export function createRedisClient(config: Config, lazyConnect = false): Redis {\n@@ -56,6 +67,18 @@ export function createRedisClient(config: Config, lazyConnect = false): Redis {\n   }\n }\n \n+export function createRedisClientFactory(config: Config) {\n+  let redis: Redis | undefined;\n+\n+  return (): Redis => {\n+    if (!redis) {\n+      redis = createRedisClient(config);\n+    }\n+\n+    return redis;\n+  };\n+}\n+\n /**\n  * createAugmentedRedisClient will connect to the Redis instance identified in\n  * the configuration."
    },
    {
      "sha": "d8b51553a923cbdb479d92912e1bce4a9cf64d60",
      "filename": "src/core/server/services/stories/index.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/services/stories/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/services/stories/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/stories/index.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -97,10 +97,12 @@ export async function findOrCreate(\n   }\n \n   if (wasUpserted) {\n-    void StoryCreatedCoralEvent.publish(broker, {\n+    StoryCreatedCoralEvent.publish(broker, {\n       storyID: story.id,\n       storyURL: story.url,\n       siteID: story.siteID,\n+    }).catch((err) => {\n+      logger.error({ err }, \"could not publish story created event\");\n     });\n   }\n \n@@ -226,10 +228,12 @@ export async function create(\n     story = await scrape(mongo, config, tenant.id, story.id, storyURL);\n   }\n \n-  void StoryCreatedCoralEvent.publish(broker, {\n+  StoryCreatedCoralEvent.publish(broker, {\n     storyID: story.id,\n     storyURL: story.url,\n     siteID: site.id,\n+  }).catch((err) => {\n+    logger.error({ err }, \"could not publish story created event\");\n   });\n \n   return story;"
    },
    {
      "sha": "98d08a90d20ec265dcafa1ed744a55fd54df64e8",
      "filename": "src/core/server/services/tenant/cache/cache.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/services/tenant/cache/cache.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/61dfc11866ca4e55d2b09da8f280c40e462857c9/src/core/server/services/tenant/cache/cache.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/cache/cache.ts?ref=61dfc11866ca4e55d2b09da8f280c40e462857c9",
      "patch": "@@ -77,6 +77,7 @@ export default class TenantCache {\n    */\n   private readonly clientApplicationID = uuid();\n \n+  private readonly redis: Redis;\n   private readonly mongo: Db;\n   private readonly emitter = new EventEmitter();\n \n@@ -85,7 +86,7 @@ export default class TenantCache {\n    */\n   public readonly cachingEnabled: boolean;\n \n-  constructor(mongo: Db, subscriber: Redis, config: Config) {\n+  constructor(mongo: Db, redis: Redis, config: Config) {\n     this.cachingEnabled = !config.get(\"disable_tenant_caching\");\n     if (!this.cachingEnabled) {\n       logger.warn(\"tenant caching is disabled\");\n@@ -94,6 +95,7 @@ export default class TenantCache {\n     }\n \n     // Save the Db reference.\n+    this.redis = redis;\n     this.mongo = mongo;\n \n     // Configure the data loaders.\n@@ -141,13 +143,15 @@ export default class TenantCache {\n     if (this.cachingEnabled) {\n       // Attach to messages on this connection so we can receive updates when\n       // the tenant are changed.\n-      subscriber.on(\"message\", this.onMessage);\n-\n-      // Subscribe to tenant notifications.\n-      void subscriber.subscribe(TENANT_CACHE_CHANNEL);\n+      this.redis.on(\"message\", this.onMessage.bind(this));\n     }\n   }\n \n+  public async connect() {\n+    // Subscribe to tenant notifications.\n+    await this.redis.subscribe(TENANT_CACHE_CHANNEL);\n+  }\n+\n   /**\n    * count will return the number of Tenant's.\n    */"
    }
  ]
}
