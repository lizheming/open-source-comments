{
  "sha": "fc86e04364aba9341078046dd7591ccfd8b773ab",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6ZmM4NmUwNDM2NGFiYTkzNDEwNzgwNDZkZDc1OTFjY2ZkOGI3NzNhYg==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2021-09-14T04:42:37Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2021-09-14T04:42:37Z"
    },
    "message": "Merge v0.2021.26 into 'release'.",
    "tree": {
      "sha": "172760e319e0a58c058c2ebef7f17711f68d4c46",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/172760e319e0a58c058c2ebef7f17711f68d4c46"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/fc86e04364aba9341078046dd7591ccfd8b773ab",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/fc86e04364aba9341078046dd7591ccfd8b773ab",
  "html_url": "https://github.com/debiki/talkyard/commit/fc86e04364aba9341078046dd7591ccfd8b773ab",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/fc86e04364aba9341078046dd7591ccfd8b773ab/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b73f32922e082a6971f94fad0e0835695960e836",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/b73f32922e082a6971f94fad0e0835695960e836",
      "html_url": "https://github.com/debiki/talkyard/commit/b73f32922e082a6971f94fad0e0835695960e836"
    },
    {
      "sha": "2889d92f600fe43db51cf552c580f3ab6d185bff",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/2889d92f600fe43db51cf552c580f3ab6d185bff",
      "html_url": "https://github.com/debiki/talkyard/commit/2889d92f600fe43db51cf552c580f3ab6d185bff"
    }
  ],
  "stats": {
    "total": 3848,
    "additions": 2951,
    "deletions": 897
  },
  "files": [
    {
      "sha": "30e675a75987e285d93d089856ea10afd1fa6cc6",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Notice.scala",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/Notice.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/Notice.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/src/main/scala/com/debiki/core/Notice.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -0,0 +1,26 @@\n+package com.debiki.core\n+\n+import play.api.libs.json.JsObject\n+\n+case class Notice(\n+  siteId: SiteId,\n+  toPatId: PatId,\n+  noticeId: NoticeId,\n+  firstAt: WhenMins,\n+  lastAt: WhenMins,\n+  numTotal: i32,\n+  noticeData: Opt[JsObject],\n+) {\n+  // For now, admins only.\n+  require(toPatId == Group.AdminsId, \"TyE40fMJ2W4\")\n+  require(noticeId >= 1001, \"TyE5R02MRSEG4\")\n+  require(firstAt.millis <= lastAt.millis, \"TyE70SRDE55F\")\n+  require(numTotal >= 1, \"TyE70SRDE550\")\n+  require(noticeData.isEmpty, \"TyE40fMJ25MG\")\n+}\n+\n+\n+object Notice {\n+  val TwitterLoginConfigured = 1001\n+  val TwitterLoginUsed = 1002\n+}"
    },
    {
      "sha": "4733f370588dd136dccba21791c7b0074e691f53",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Post.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/Post.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/Post.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/src/main/scala/com/debiki/core/Post.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -707,7 +707,7 @@ case class SimplePostPatch(\n     \"TyE6033MKSHUW2\", s\"parentNr is < $BodyNr (the Orig Post), parentNr: $parentNr\")\n \n   // COULD make the type system prevent this (and handle this higher up in the call stack).\n-  throwIllegalArgumentIf(pageRef.canOnlyBeToParticipant,\n+  throwIllegalArgumentIf(pageRef.canOnlyBeToPat,\n     \"TyE630RKDNW2J\", s\"The *page* ref is to a user/participant: $pageRef\")\n \n   // Better not allow unexpected things, for now."
    },
    {
      "sha": "328f1b617c5b337a6d61f1f9e16794f851024f1f",
      "filename": "appsv/model/src/main/scala/com/debiki/core/PostAction.scala",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/PostAction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/PostAction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/src/main/scala/com/debiki/core/PostAction.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -37,7 +37,7 @@ object PostVoteType {\n   // dupl numbers [2PKWQUT0] perhaps use 1,2,4,8 instead? [8FEX1Q4]\n   case object Like extends PostVoteType(41)\n   case object Wrong extends PostVoteType(42) // RENAME to Disagree\n-  case object Bury extends PostVoteType(43)  // rename to MoveDownwards? [.ren_bury]\n+  case object Bury extends PostVoteType(43)  // rename to MoveDown? [.ren_bury]\n   case object Unwanted extends PostVoteType(44)\n \n   // case object Promote/Boost/PinAtTop + priority value?  For curating the discussion\n@@ -53,6 +53,16 @@ object PostVoteType {\n     case Unwanted.IntVal => Unwanted\n     case _ => return None\n   })\n+\n+  def apiV0_fromStr(value: St): Option[PostVoteType] = Some(value match {\n+    //case DoIt.IntVal => DoIt\n+    //case DoNot.IntVal => DoNot\n+    case \"Like\" => Like\n+    // case \"Disagree\" => Wrong\n+    // case \"Bury\" => Bury â€” rename to MoveDown\n+    // case \"Unwanted\" => Unwanted\n+    case _ => return None\n+  })\n }\n \n "
    },
    {
      "sha": "08fe6087a4d685e41051965c873811cd3f3bb6d8",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Prelude.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/Prelude.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/Prelude.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/src/main/scala/com/debiki/core/Prelude.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -175,6 +175,10 @@ object Prelude {   CLEAN_UP; RENAME // to BugDie and re-export the interesting\n     throw new UnimplementedEx(msg)\n   }\n \n+  def throwUnimplIf(test: Bo, msg: => St): U = {\n+    if (test) throwUnimpl(msg)\n+  }\n+\n \n   sealed abstract class DieOrComplain  // or rename to \"ComplainHow\" or \"Angry\"?\n   object Die extends DieOrComplain"
    },
    {
      "sha": "a4e528929c8252d76a9304a8388e27772ef9bad9",
      "filename": "appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -62,6 +62,10 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n \n   def loadResourceUsage(): ResourceUse\n \n+  def loadAdminNotices(): ImmSeq[Notice]\n+  def addAdminNotice(noticeId: NoticeId): U\n+\n+\n   def loadCategory(categoryId: CategoryId): Option[Category]\n   def loadCategoryMap(): Map[CategoryId, Category]\n \n@@ -218,7 +222,7 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n   /** Remembers that the specified posts have been read by a certain user.\n     */\n   def updatePostsReadStats(pageId: PageId, postNrsRead: Set[PostNr], readById: UserId,\n-        readFromIp: String): Unit\n+        readFromIp: Opt[IpAdr]): U\n \n \n   def loadParticipantAndStats(ppId: UserId): (Option[Participant], Option[UserStats]) = {"
    },
    {
      "sha": "d56a5f64c9eb0fc3cf0a0ad5eb83650458614a18",
      "filename": "appsv/model/src/main/scala/com/debiki/core/notifications.scala",
      "status": "modified",
      "additions": 21,
      "deletions": 5,
      "changes": 26,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/notifications.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/notifications.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/src/main/scala/com/debiki/core/notifications.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -213,28 +213,36 @@ object NotfLevel {\n     * notification levels here. Instead, make it possible to subscribe for notifications\n     * on individual posts, and sub-threads, in addition to on whole pages / categories / tags.\n     * This could be a power user feature in the More... post action dropdown.\n+    *\n+    * So, what you get notified about (e.g. a specific reply, or the whole page),\n+    * and the notification level, are two different settings.\n+    * Example: Set the highest notification level â€” that is, RepliesAndEdits â€”\n+    * for a specific post only, not child posts (replies), and you'd get\n+    * notified about edits of that post only. Could be useful if you want to\n+    * see if a page gets edited (the page body, orig post), but you don't want\n+    * reply notifications.\n     */\n-  case object EveryPostAllEdits extends NotfLevel(9)\n+  case object EveryPostAllEdits extends NotfLevel(9)  ; RENAME // to NewPostsAndEdits\n \n   /** Notified about every new post (incl topic status changes).\n     */\n-  case object WatchingAll extends NotfLevel(8)    ; RENAME // to EveryPost\n+  case object WatchingAll extends NotfLevel(8)    ; RENAME // to NewPosts\n \n   /** For questions: Notified about new answers suggestions (that is. orig post replies).\n     * For questions, problems, ideas: Notified about progress posts and status changes,\n     * e.g. status changed from Planned to Doing.\n     */\n-  case object TopicProgress extends NotfLevel(7)\n+  case object TopicProgress extends NotfLevel(7)  ; RENAME // to NewMetaPosts? (PageProgress? StatusChanges?)\n \n   /** Notified if an answer to a Question topic, is accepted as the correct answer.\n     * Or if a Problem is marked as solved. Or an Idea marked as Implemented.\n     * Or if topic closed (won't get solved / done).\n     */\n-  case object TopicSolved extends NotfLevel(6)\n+  case object TopicSolved extends NotfLevel(6)   ; RENAME // to PageDone? (or PageSolved?)\n \n   /** Notified about new topics. (For categories.)\n     */\n-  case object WatchingFirst extends NotfLevel(5)  ; RENAME // to NewTopics\n+  case object WatchingFirst extends NotfLevel(5)  ; RENAME // to NewPages\n \n   /** Like Normal, plus highlights the topic in the topic list, if new posts.\n     */\n@@ -276,6 +284,14 @@ object NotfLevel {\n     case _ => return None\n   })\n \n+  def fromSt_apiV0(value: St): Opt[NotfLevel] = Some(value match {\n+    case \"NewPosts\" => WatchingAll\n+    //case \"PageProgress\" => TopicProgress\n+    //case \"PageDone\" => TopicSolved\n+    case \"Normal\" => Normal\n+    case \"Muted\" => Muted\n+    case _ => return None\n+  })\n }\n \n "
    },
    {
      "sha": "7f123bd12e2996e7b871b8058c7be24ddf968476",
      "filename": "appsv/model/src/main/scala/com/debiki/core/package.scala",
      "status": "modified",
      "additions": 122,
      "deletions": 9,
      "changes": 131,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/src/main/scala/com/debiki/core/package.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -197,6 +197,8 @@ package object core {\n \n   type IdpUserInfo = OpenAuthDetails  // renaming\n \n+  type NoticeId = i32\n+\n   sealed abstract class MarkupLang\n   object MarkupLang {\n     case object Html extends MarkupLang\n@@ -217,18 +219,73 @@ package object core {\n   // ext ids, could estimate the number of people in the organization.)\n   type ExtId = String\n \n-  type Ref = String  ; RENAME // to RefStr(ing) or RawRef? maybe rename ParsedRef to just Ref?\n+  type Ref = String  ; RENAME // to RawRef, and rename ParsedRef to just Ref\n+  type RawRef = Ref  //  ... started\n+\n+  sealed trait PatRef\n+\n+  sealed trait PageRef { self: ParsedRef =>\n+    // Why this needed, I thought the compiler would deduce this itself?\n+    // (when [the exact type is known to the compiler], and it extends PageRef).\n+    def asParsedRef: ParsedRef = self\n+  }\n+\n+  sealed trait PostRef\n+\n+  sealed abstract class ParsedRef(\n+    val canBeToPat: Bo = true,\n+    val canOnlyBeToPat: Bo = false,\n+    val canBeToPage: Bo = true)\n \n-  sealed abstract class ParsedRef(val canOnlyBeToParticipant: Boolean = false)\n   object ParsedRef {\n-    case class ExternalId(value: ExtId) extends ParsedRef\n-    case class SingleSignOnId(value: String) extends ParsedRef(true)\n-    case class TalkyardId(value: String) extends ParsedRef\n-    case class Username(value: String) extends ParsedRef(true)\n+    case class ExternalId(value: ExtId)\n+      extends ParsedRef with PatRef with PageRef with PostRef\n+\n+    case class SingleSignOnId(value: St)\n+      extends ParsedRef(canOnlyBeToPat = true, canBeToPage = false) with PatRef\n+\n+    case class TalkyardId(value: St)\n+      extends ParsedRef with PatRef with PageRef with PostRef\n+\n+    case class PageId(value: core.PageId)\n+      extends ParsedRef(canBeToPat = false) with PageRef\n+\n+    case class PagePath(value: St)\n+      extends ParsedRef(canBeToPat = false) with PageRef\n+\n+    case class UserId(value: core.UserId)\n+      extends ParsedRef(canOnlyBeToPat = true, canBeToPage = false) with PatRef\n+\n+    case class Username(value: St)\n+      extends ParsedRef(canOnlyBeToPat = true, canBeToPage = false) with PatRef\n+\n+    case class Groupname(value: St)\n+      extends ParsedRef(canOnlyBeToPat = true, canBeToPage = false) with PatRef\n+\n+    // Either a user or a group, but not a guest.\n+    //case class Membername(value: St)\n+    //  extends ParsedRef(canOnlyBeToPat = true, canBeToPage = false) with PatRef\n \n     // Maybe trait PageLookupId { def lookupId: St }  â€”>  \"diid:...\" or \"https://...\" ?\n-    case class DiscussionId(diid: St) extends ParsedRef\n-    case class EmbeddingUrl(url: St) extends ParsedRef\n+    case class DiscussionId(diid: St)\n+      extends ParsedRef(canBeToPat = false) with PageRef\n+\n+    case class EmbeddingUrl(url: St)\n+      extends ParsedRef(canBeToPat = false, canBeToPage = false)\n+  }\n+\n+  def parsePatRef(ref: Ref): PatRef Or ErrMsg = {\n+    parseRef(ref, allowParticipantRef = true) map { parsedRef =>\n+      if (!parsedRef.canBeToPat) return Bad(s\"Not a participant ref: $ref\")\n+      parsedRef.asInstanceOf[PatRef]\n+    }\n+  }\n+\n+  def parsePageRef(ref: Ref): PageRef Or ErrMsg = {\n+    parseRef(ref, allowParticipantRef = false) map { parsedRef =>\n+      if (!parsedRef.canBeToPage) return Bad(s\"Not a page ref: $ref\")\n+      parsedRef.asInstanceOf[PageRef]\n+    }\n   }\n \n   def parseRef(ref: Ref, allowParticipantRef: Boolean): ParsedRef Or ErrMsg = {\n@@ -254,16 +311,42 @@ package object core {\n       returnBadIfContainsAt(tyId)\n       Good(ParsedRef.TalkyardId(tyId))\n     }\n+    else if (ref startsWith \"userid:\") {\n+      returnBadIfDisallowParticipant()\n+      val idSt = ref drop \"userid:\".length\n+      val id = idSt.toIntOption getOrElse {\n+        return Bad(\"After 'userid:' must follow an integer: \" + ref)\n+      }\n+      if (Pat.isGuestId(id))\n+        return Bad(\"Not a user ref, but a guest ref: \" + ref)\n+      if (Pat.isBuiltInGroup(id))\n+        return Bad(\"Not a user ref, but a built-in group ref: \" + ref)\n+      Good(ParsedRef.UserId(id))\n+    }\n     else if (ref startsWith \"username:\") {\n       returnBadIfDisallowParticipant()\n       val username = ref drop \"username:\".length\n       returnBadIfContainsAt(username)\n       Good(ParsedRef.Username(username))\n     }\n+    else if (ref startsWith \"groupname:\") {\n+      returnBadIfDisallowParticipant()\n+      val groupname = ref drop \"groupname:\".length\n+      returnBadIfContainsAt(groupname)\n+      Good(ParsedRef.Groupname(groupname))\n+    }\n     else if (ref startsWith \"diid:\") {\n       val discId = ref drop \"diid:\".length\n       Good(ParsedRef.DiscussionId(discId))\n     }\n+    else if (ref startsWith \"pageid:\") {\n+      val id = ref drop \"pageid:\".length\n+      Good(ParsedRef.PageId(id))\n+    }\n+    else if (ref startsWith \"pagepath:\") {\n+      val path = ref drop \"pagepath:\".length\n+      Good(ParsedRef.PagePath(path))\n+    }\n     else if (ref startsWith \"emburl:\") {\n       val url = ref drop \"emburl:\".length\n       Good(ParsedRef.EmbeddingUrl(url))\n@@ -290,7 +373,8 @@ package object core {\n   /** Email identities are strings, all others are numbers but converted to strings. */\n   type IdentityId = String\n \n-  type IpAddress = String\n+  type IpAddress = String  // Too long\n+  type IpAdr = IpAddress  // [Scala_3] opaque type\n \n   type EmailAdr = String  // [Scala_3] opaque type\n   type EmailId = String   // [Scala_3] opaque type   RENAME to EmailOutId instead?\n@@ -420,6 +504,8 @@ package object core {\n     def toIso8601Day: St = Prelude.toIso8601Day(millis)\n     def toIso8601T: St = Prelude.toIso8601T(millis)\n     def toIso8601NoT: St = Prelude.toIso8601NoT(millis)\n+\n+    def toWhenMins: WhenMins = WhenMins.fromMillis(millis)\n   }\n \n   object When {\n@@ -481,6 +567,33 @@ package object core {\n   }\n \n \n+  // Just an i32.\n+  class WhenMins(val mins: i32) extends AnyVal {\n+    def millis: i64 = mins * MillisPerMinute\n+    def toJavaDate = new ju.Date(millis)\n+    override def toString: St = mins.toString + \"mins\"\n+  }\n+\n+\n+  object WhenMins {\n+    def fromMins(unixMins: i64): WhenMins = {\n+      // If this is not between 2010 and 2100, something is amiss.\n+      // Unix seconds 1263000000 is 2010-01-09 01:20,\n+      // and that's Unix minutes 21050000.\n+      // Unix seconds 4104000000 is 2100-01-19, 00:00,\n+      // and that's Unix minutes 68400000.\n+      require(unixMins <= 68400000,\n+            s\"Unix mins must be < year 2100 but is: $unixMins [TyE4M0WEP35]\")\n+      require(unixMins >= 21050000,\n+            s\"Unix mins must be > year 2010 but is: $unixMins [TyE4M0WEP37]\")\n+      new WhenMins(unixMins.toInt)\n+    }\n+    def fromMillis(unixMillis: i64): WhenMins = fromMins(unixMillis / MillisPerMinute)\n+    def fromDate(date: ju.Date): WhenMins = fromMillis(date.getTime)\n+    def fromDays(unixDays: i32): WhenMins = fromMins(unixDays.toLong * 24 * 60)\n+  }\n+\n+\n   class WhenDay(val unixDays: UnixDays) extends AnyVal {\n     def toJavaDate = new ju.Date(OneDayInMillis * unixDays)\n     override def toString: String = unixDays.toString + \"days\""
    },
    {
      "sha": "48ee3622d5d67c8400e656c3ce4bc1a46278e5ca",
      "filename": "appsv/model/src/main/scala/com/debiki/core/user.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/user.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/model/src/main/scala/com/debiki/core/user.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/model/src/main/scala/com/debiki/core/user.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -1987,6 +1987,8 @@ case class UserStats(   // RENAME  to PatDynData\n     require(numChatTopicsRepliedIn >= 0, \"EdE4GKWL013\")\n     require(numChatTopicsCreated >= 0, \"EdE4GKWL014\")\n     require(numLikesGiven >= 0, \"EdE4GKWL015\")\n+    require(numLikesReceived >= 0, \"TyE4GKWL016\")\n+    require(numSolutionsProvided >= 0, \"TyE4GKWL017\")\n   }\n \n "
    },
    {
      "sha": "88a8de44d859f51d44a2b6b516706a17a1d70f77",
      "filename": "appsv/rdb/src/main/resources/db/migration/y2021/v409__notices.sql",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/resources/db/migration/y2021/v409__notices.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/resources/db/migration/y2021/v409__notices.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/rdb/src/main/resources/db/migration/y2021/v409__notices.sql?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -0,0 +1,27 @@\n+create domain when_mins_d i32_gez_d;\n+alter domain when_mins_d add constraint when_mins_d_c_aft_y2010 check (value >= 21050000);\n+alter domain when_mins_d add constraint when_mins_d_c_bef_y2100 check (value <= 68400000);\n+comment on domain when_mins_d is\n+    'A point in time, in minutes (not seconds) since 1970, so fits in an i32. '\n+    'To catch bugs, must be between year 2010 and 2100.';\n+\n+create table notices_t (\n+  site_id_c int,  -- pk\n+  to_pat_id_c int,  -- pk\n+  notice_id_c i32_gz_d,  -- pk\n+  first_at_c when_mins_d not null,\n+  last_at_c when_mins_d not null,\n+  num_total_c i32_gz_d not null,\n+  notice_data_c jsonb,\n+\n+  constraint notices_p_patid_noticeid primary key (site_id_c, to_pat_id_c, notice_id_c),\n+\n+  -- ix: pk\n+  constraint notices_r_pats foreign key (site_id_c, to_pat_id_c) references\n+      users3 (site_id, user_id) deferrable,\n+\n+  constraint notices_c_firstat_lte_lastat check (first_at_c <= last_at_c)\n+);\n+\n+create index notices_ig_noticeid on notices_t (notice_id_c);\n+"
    },
    {
      "sha": "0f5af53161a9f876617bdea33d2d0746d9c0b82a",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/CreateSiteSystemDaoMixin.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/scala/com/debiki/dao/rdb/CreateSiteSystemDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/scala/com/debiki/dao/rdb/CreateSiteSystemDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/rdb/src/main/scala/com/debiki/dao/rdb/CreateSiteSystemDaoMixin.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -194,6 +194,7 @@ trait CreateSiteSystemDaoMixin extends SystemTransaction {  // RENAME to SystemS\n       delete from drafts3 where site_id = ?\n       delete from post_read_stats3 where site_id = ?\n       delete from notifications3 where site_id = ?\n+      delete from notices_t where site_id_c = ?\n       delete from emails_out3 where site_id = ?\n       delete from upload_refs3 where site_id = ?\"\"\" +\n       // skip: uploads3, not per-site. But... latent BUG: should update upload ref counts,"
    },
    {
      "sha": "3124505eb7d0d579a0dd9fe0892a723f095b1b34",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PostsReadStatsSiteDaoMixin.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/scala/com/debiki/dao/rdb/PostsReadStatsSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/scala/com/debiki/dao/rdb/PostsReadStatsSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/rdb/src/main/scala/com/debiki/dao/rdb/PostsReadStatsSiteDaoMixin.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -34,7 +34,7 @@ trait PostsReadStatsSiteDaoMixin extends SiteTransaction { // RENAME to ReadStat\n \n \n   def updatePostsReadStats(pageId: PageId, postNrsRead: Set[PostNr],\n-        readById: UserId, readFromIp: String) {\n+        readById: UserId, readFromIp: Opt[IpAdr]) {\n     for (postNr <- postNrsRead) {\n       // Do nothing if the row already exists â€” simply means the user has already read the post.\n       val sql = s\"\"\"\n@@ -43,7 +43,7 @@ trait PostsReadStatsSiteDaoMixin extends SiteTransaction { // RENAME to ReadStat\n         on conflict do nothing\n         \"\"\"\n       val values = List[AnyRef](siteId.asAnyRef, pageId, postNr.asAnyRef,\n-        readFromIp, readById.asAnyRef, now.asTimestamp)\n+        readFromIp.orNullVarchar, readById.asAnyRef, now.asTimestamp)\n       runUpdate(sql, values)\n     }\n   }"
    },
    {
      "sha": "044cfa863198b804c22c6d00345465cf43ee6751",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/Rdb.scala",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/scala/com/debiki/dao/rdb/Rdb.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/scala/com/debiki/dao/rdb/Rdb.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/rdb/src/main/scala/com/debiki/dao/rdb/Rdb.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -105,6 +105,14 @@ object Rdb {\n     }).getOrElse(NullTimestamp)\n   }\n \n+  implicit class PimpWhenMinsWithIntMins(when: WhenMins) {\n+    def asIntMins: AnyRef = when.mins.asAnyRef\n+  }\n+\n+  implicit class PimpOptionWithNullIntMins(opt: Opt[WhenMins]) {\n+    def orNullIntMins: AnyRef = opt.map(_.mins.asAnyRef) getOrElse NullInt\n+  }\n+\n   implicit class PimpOptionWithNullJsValue(opt: Option[play.api.libs.json.JsValue]) {\n     def orNullJson: AnyRef = opt.getOrElse(Null(js.Types.OTHER))\n   }\n@@ -282,17 +290,30 @@ object Rdb {\n     else When.fromMillis(timestamp.getTime)\n   }\n \n+  // Remove, change to when_mins_d and getWhenMins() instead?\n   def getWhenMinutes(rs: js.ResultSet, column: String): When = {\n     val unixMinutes = rs.getInt(column)\n     When.fromMillis(unixMinutes * 60L * 1000)\n   }\n \n+  // Remove, change to when_mins_d and getOptWhenMins() instead?\n   def getOptWhenMinutes(rs: js.ResultSet, column: String): Option[When] = {\n     val unixMinutes = rs.getInt(column)\n     if (rs.wasNull()) None\n     else Some(When.fromMillis(unixMinutes * 60L * 1000))\n   }\n \n+  def getWhenMins(rs: js.ResultSet, column: St): WhenMins = {\n+    val unixMinutes = rs.getInt(column)\n+    WhenMins.fromMins(unixMinutes)\n+  }\n+\n+  def getOptWhenMins(rs: js.ResultSet, column: St): Opt[WhenMins] = {\n+    val unixMinutes = rs.getInt(column)\n+    if (rs.wasNull()) None\n+    else Some(WhenMins.fromMins(unixMinutes))\n+  }\n+\n   def getOptionalDate(rs: js.ResultSet, column: String): Option[ju.Date] = {\n     val timestamp = rs.getTimestamp(column, calendarUtcTimeZone)\n     if (timestamp eq null) None"
    },
    {
      "sha": "ec1fc291822cf8fb6ec1917bf102eecfb0bbe160",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSiteTransaction.scala",
      "status": "modified",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSiteTransaction.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -356,6 +356,52 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n   }\n \n \n+  // -- Could break out to separate file  -------------\n+  def loadAdminNotices(): ImmSeq[Notice] = {\n+    val query = \"select * from notices_t where site_id_c = ?\"\n+    runQueryFindMany(query, List(siteId.asAnyRef), parseNotice)\n+  }\n+\n+\n+  private def parseNotice(rs: ResultSet): Notice = {\n+    Notice(\n+          siteId = siteId,\n+          toPatId = getInt32(rs, \"to_pat_id_c\"),\n+          noticeId = getInt32(rs, \"notice_id_c\"),\n+          firstAt = getWhenMins(rs, \"first_at_c\"),\n+          lastAt = getWhenMins(rs, \"last_at_c\"),\n+          numTotal = getInt32(rs, \"num_total_c\"),\n+          noticeData = None)\n+  }\n+\n+\n+  def addAdminNotice(noticeId: NoticeId): U = {\n+    val statement = \"\"\"\n+          insert into notices_t (\n+            site_id_c,\n+            to_pat_id_c,\n+            notice_id_c,\n+            first_at_c,\n+            last_at_c,\n+            num_total_c)\n+          values (?, ?, ?, ?, ?, 1)\n+          on conflict (site_id_c, to_pat_id_c, notice_id_c) do update set\n+            -- use greatest(), in case of clock skew or races?\n+            last_at_c = greatest(notices_t.last_at_c, excluded.last_at_c),\n+            first_at_c = least(notices_t.first_at_c, excluded.first_at_c),\n+            num_total_c = notices_t.num_total_c + 1\n+        \"\"\"\n+    val values = List(\n+          siteId.asAnyRef,\n+          Group.AdminsId.asAnyRef,\n+          noticeId.asAnyRef,\n+          now.unixMinutes.asAnyRef,  // first\n+          now.unixMinutes.asAnyRef)  // last\n+    runUpdateSingleRow(statement, values)\n+  }\n+  // --------------------------------------------------\n+\n+\n   def nextPageId(): PageId = {\n     transactionCheckQuota { connection =>\n       // Loop until we find an unused id (there're might be old pages with \"weird\" colliding ids)."
    },
    {
      "sha": "de260c85495b4b69c96774e38b0e6e0d71b362e8",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -1019,6 +1019,7 @@ class RdbSystemTransaction(\n       delete from drafts3\n       delete from post_read_stats3\n       delete from notifications3\n+      delete from notices_t\n       delete from emails_out3\n       delete from upload_refs3\n       delete from uploads3"
    },
    {
      "sha": "975241bc7fabe84dfb442303675e9a8926abd4ab",
      "filename": "appsv/server/controllers/DebugTestController.scala",
      "status": "modified",
      "additions": 17,
      "deletions": 5,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/DebugTestController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/DebugTestController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/DebugTestController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -142,7 +142,7 @@ class DebugTestController @Inject()(cc: ControllerComponents, edContext: EdConte\n       \"numReportedSpamFalsePositives\" -> globals.e2eTestCounters.numReportedSpamFalsePositives,\n       \"numReportedSpamFalseNegatives\" -> globals.e2eTestCounters.numReportedSpamFalseNegatives,\n     )\n-    Ok(responseJson.toString) as JSON\n+    OkApiJson(responseJson)\n   }\n \n \n@@ -323,6 +323,18 @@ class DebugTestController @Inject()(cc: ControllerComponents, edContext: EdConte\n   }\n \n \n+  def addAdminNotice: Action[JsValue] =\n+        PostJsonAction(RateLimits.BrowserError, maxBytes = 50) { request =>\n+    val okE2ePassword = context.security.hasOkE2eTestPassword(request.underlying)\n+    throwForbiddenIf(globals.isProd && !okE2ePassword, \"TyE60MRGP35\", \"E2e pwd missing\")\n+    import request.body\n+    val siteId = (body \\ \"siteId\").as[SiteId]\n+    val noticeId = (body \\ \"noticeId\").as[NoticeId]\n+    globals.siteDao(siteId).addAdminNotice(noticeId)\n+    Ok\n+  }\n+\n+\n   def showLastE2eTestEmailSent(siteId: SiteId, sentToWithSpaces: String): Action[Unit] =\n         ExceptionAction.async(cc.parsers.empty) { request =>\n     SECURITY // COULD add and check an e2e password. Or rate limits.\n@@ -357,7 +369,7 @@ class DebugTestController @Inject()(cc: ControllerComponents, edContext: EdConte\n \n         firstCompletedOf(Seq(futureEmail, futureTimeout)).map({\n           case emails: Vector[Email] =>\n-            OkPrettyJson(JsArray(emails.map(email => {\n+            OkPrettyJson(Json.obj(\"emails\" -> JsArray(emails.map(email => {\n               Json.obj(\n                 \"emailId\" -> JsString(email.id),\n                 \"to\" -> JsString(email.sentTo),\n@@ -366,7 +378,7 @@ class DebugTestController @Inject()(cc: ControllerComponents, edContext: EdConte\n                 \"numRepliesBack\" -> JsNum32OrNull(email.numRepliesBack),\n                 \"subject\" -> JsString(email.subject),\n                 \"bodyHtmlText\" -> JsString(email.bodyHtmlText))\n-            })))\n+            }))))\n           case x =>\n             InternalErrorResult(\"DwE7UGY4\", \"Mailer sent the wrong class: \" + classNameOf(x))\n         }).recover({\n@@ -401,9 +413,9 @@ class DebugTestController @Inject()(cc: ControllerComponents, edContext: EdConte\n       futureReply.map(sentToAddrsUntyped => {\n         val sentToAddrs = sentToAddrsUntyped.asInstanceOf[Seq[String]]\n         dieIf(!sentToAddrs.forall(Email.isE2eTestEmailAddress), \"TyE2ABK503\")\n-        Ok(Json.obj(\n+        OkApiJson(Json.obj(\n           \"num\" -> sentToAddrs.length,\n-          \"addrsByTimeAsc\" -> sentToAddrs)) as JSON\n+          \"addrsByTimeAsc\" -> sentToAddrs))\n       })\n     }\n "
    },
    {
      "sha": "7ea0149308121d584d4b5b55cd44302c524b04bc",
      "filename": "appsv/server/controllers/GroupTalkController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/GroupTalkController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/GroupTalkController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/GroupTalkController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -77,7 +77,7 @@ class GroupTalkController @Inject()(cc: ControllerComponents, edContext: EdConte\n       titleSourceAndHtml, bodyTextAndHtml, pageRole, toUserIds, sentByWho = request.who,\n       request.spamRelatedStuff, deleteDraftNr)\n \n-    OkSafeJson(JsString(pagePath.pageId))\n+    OkSafeJsValue(JsString(pagePath.pageId))\n   }\n \n }"
    },
    {
      "sha": "6f5b4932a2df1f930cf33b4966d1366723069c42",
      "filename": "appsv/server/controllers/LoginWithOpenAuthController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/LoginWithOpenAuthController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/LoginWithOpenAuthController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/LoginWithOpenAuthController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -1217,6 +1217,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n         when using only site custom IDP\"\"\")\n \n     // This'll break Twitter authn, until they support OAuth2.\n+    // (There's addAdminNotice() below, if Twitter used.)\n     throwForbiddenIf(globals.config.featureFlags.contains(\"ffSilhouetteOff\"),\n            \"TyEOLDAUTHNOFF\",\n            o\"\"\"Login with $providerName disabled for now. Can you please login\n@@ -1240,6 +1241,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n         googleProvider()\n       case TwitterProvider.ID =>\n         throwForbiddenIf(!settings.enableTwitterLogin, \"TyE0TWTTRLOGIN\", \"Twitter login disabled\")\n+        request.dao.addAdminNotice(Notice.TwitterLoginUsed)\n         twitterProvider()\n       case GitHubProvider.ID =>\n         throwForbiddenIf(!settings.enableGitHubLogin, \"TyE0GITHLOGIN\", \"GitHub login disabled\")"
    },
    {
      "sha": "3f03b097fcd1fbb5eaafa79142d859c475aad203",
      "filename": "appsv/server/controllers/PageController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/PageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/PageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/PageController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -236,7 +236,7 @@ class PageController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     val postUniqueId = (request.body \\ \"postId\").as[PostId]   // id not nr\n     val acceptedAt: Option[ju.Date] = request.dao.ifAuthAcceptAnswer(\n       pageId, postUniqueId, userId = request.theUserId, request.theBrowserIdData)\n-    OkSafeJson(JsLongOrNull(acceptedAt.map(_.getTime)))\n+    OkSafeJsValue(JsLongOrNull(acceptedAt.map(_.getTime)))\n   }\n \n \n@@ -253,7 +253,7 @@ class PageController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     val pageId = (request.body \\ \"pageId\").as[PageId]\n     val closedAt: Option[ju.Date] = request.dao.ifAuthTogglePageClosed(\n       pageId, userId = request.theUserId, request.theBrowserIdData)\n-    OkSafeJson(JsLongOrNull(closedAt.map(_.getTime)))\n+    OkSafeJsValue(JsLongOrNull(closedAt.map(_.getTime)))\n   }\n \n   def deletePages: Action[JsValue] = PostJsonAction("
    },
    {
      "sha": "f67b3ce9d4b6c7255fcd12bd832cae4d2e59641a",
      "filename": "appsv/server/controllers/ResetPasswordController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/ResetPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/ResetPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/ResetPasswordController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -148,7 +148,7 @@ class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: EdC\n       logger.info(s\"s$siteId: Sending create password email ${toWho(member)} [TyM2AKBP05]\")\n     }\n     sendChangePasswordEmailTo(member.briefUser, request, isCreating = member.passwordHash.isEmpty)\n-    OkSafeJson(JsString(\"Ok.\"))\n+    OkSafeJsValue(JsString(\"Ok.\"))\n   }\n \n "
    },
    {
      "sha": "2c5182dbdaab7c40c0b8b51c8e61c278569e88cc",
      "filename": "appsv/server/controllers/SearchController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/SearchController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/SearchController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/SearchController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -91,7 +91,7 @@ class SearchController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     * the user can type anything. And the server interprets the meaning as best\n     * it can, maybe interprets \"buy ice skating shoes\" as \"buy ice skates\".\n     */\n-  def doSearchPubApiGet(freetext: Option[String], pretty: Option[Boolean]): Action[Unit] =  // [PUB_API]\n+  def apiV0_search_get(freetext: Option[String], pretty: Option[Boolean]): Action[Unit] =  // [PUB_API]\n          AsyncGetActionRateLimited( RateLimits.FullTextSearch) { request: GetRequest =>\n     import request.{dao, user => requester}\n \n@@ -116,7 +116,7 @@ class SearchController @Inject()(cc: ControllerComponents, edContext: EdContext)\n   }\n \n \n-  def doSearchPubApiPost(): Action[JsValue] = AsyncPostJsonAction(  // [PUB_API]\n+  def apiV0_search_post(): Action[JsValue] = AsyncPostJsonAction(  // [PUB_API]\n           RateLimits.FullTextSearch, maxBytes = 1000) { request: JsonPostRequest =>\n     import request.{body, dao}\n "
    },
    {
      "sha": "0e05e5484dee3fe8905a6ca0de8642c8856be67d",
      "filename": "appsv/server/controllers/UserController.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/UserController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/UserController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/UserController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -97,7 +97,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n         JsUserInclDetails(member, usersById, groups = Nil, callerIsAdmin = request.theUser.isAdmin,\n           callerIsStaff = true, anyStats = anyStats)\n       }))\n-      OkSafeJson(Json.toJson(Map(\"users\" -> usersJson)))\n+      OkSafeJson(Json.obj(\"users\" -> usersJson))\n     }\n   }\n \n@@ -432,8 +432,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n         \"browserIdDataRecentFirst\" -> browserIdDataJson)\n     }\n \n-    // These responses are fairly brief; ok to prettify the json.\n-    OkSafeJson(result, pretty = true)\n+    OkSafeJson(result)\n   }\n \n \n@@ -954,11 +953,13 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n           else pageIds.split(',').to[ImmSeq]\n    // For now:\n     val json = loadMyPageDataImpl(request, pageIdsSeq.head)\n-    OkSafeJson(json)\n+    OkSafeJson(Json.obj(\n+        \"me\" -> JsObjOrNull(json)))\n   }\n \n \n-  private def loadMyPageDataImpl(request: ApiRequest[_], pageId: PageId): JsValue = {\n+  private def loadMyPageDataImpl(request: ApiRequest[_], pageId: PageId)\n+        : Opt[JsObject] = Some {\n     import request.dao\n     val pageMeta = request.dao.getPageMeta(pageId) getOrElse {\n       // Might be an embedded comment page, not yet created because no comments posted.\n@@ -989,7 +990,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n       dao = request.dao,\n       request = request.request)\n \n-    val json =\n+    val json: JsObject =\n       if (pageRequest.user.isDefined) {\n         val renderedPage = request.dao.renderPageMaybeUseMemCache(pageRequest)\n         dao.jsonMaker.userDataJson(pageRequest, renderedPage.unapprovedPostAuthorIds).getOrDie(\n@@ -1020,15 +1021,15 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n           theRequester.id, upToWhen = None, request.who, unseenFirst = true, limit = 20)\n \n         // dupl code [7KABR20]\n-        Json.obj(\n+        Json.obj(  // ts: MePatch\n           \"numTalkToMeNotfs\" -> notfsAndCounts.numTalkToMe,\n           \"numTalkToOthersNotfs\" -> notfsAndCounts.numTalkToOthers,\n           \"numOtherNotfs\" -> notfsAndCounts.numOther,\n           \"thereAreMoreUnseenNotfs\" -> notfsAndCounts.thereAreMoreUnseen,\n           \"notifications\" -> notfsAndCounts.notfsJson)\n       }\n \n-    OkSafeJson(result)\n+    OkSafeJsValue(result)\n   }\n \n \n@@ -1263,10 +1264,10 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n             .getOrIfFailure(ex => throwBadRequest(\"TyE2ABKRP0\", ex.getMessage))\n \n     if (newNotfLevel.isDefined) {\n-      dao.savePageNotfPref(newPref, request.who)\n+      dao.savePageNotfPrefIfAuZ(newPref, request.who)\n     }\n     else {\n-      dao.deletePageNotfPref(newPref, request.who)\n+      dao.deletePageNotfPrefIfAuZ(newPref, request.who)\n     }\n \n     OkSafeJson(\n@@ -1306,7 +1307,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n         GetActionRateLimited(RateLimits.ReadsFromDb) { request =>\n     val maybeMembers = request.dao.listGroupMembersIfReqrMaySee(groupId, request.requesterOrUnknown)\n     val membersJson: JsValue = maybeMembers.map(ms => JsArray(ms map JsUser)).getOrElse(JsFalse)\n-    OkSafeJson(membersJson)\n+    OkSafeJsValue(membersJson)\n   }\n \n \n@@ -1557,7 +1558,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     throwForbiddenIf(!isOneself && !requester.isAdmin,\n       \"TyE7UBQP21\", \"Cannot delete other user\")\n     val anonNNN = dao.deleteUser(userId, request.who)\n-    val response = OkSafeJson(JsString(anonNNN.username))\n+    val response = OkSafeJsValue(JsString(anonNNN.username))\n     // Log the user out, if hen deleted hens own account.\n     if (isOneself) response.discardingCookies(context.security.DiscardingSessionCookie)\n     else response"
    },
    {
      "sha": "b6fda1e542079e8e2ff84a83944646fee88634b2",
      "filename": "appsv/server/controllers/Utils.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/Utils.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/Utils.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/Utils.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -22,7 +22,7 @@ import debiki.EdHttp._\n import ed.server.liftweb\n import java.{lang => jl}\n import play.api._\n-import play.api.libs.json.{Json, JsValue, JsObject}\n+import play.api.libs.json.{Json, JsValue, JsArray, JsObject}\n import play.api.mvc._\n \n \n@@ -79,19 +79,24 @@ object Utils extends Results with http.ContentTypes {\n    *   - http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx\n    * Ty's Javascript strips the \")]}',\" prefix  [5LKW02D4]\n    * before parsing the JSON.\n+\n+   CLEAN_UP // don't have 3x these at 3 places !\n+\n    */\n-  def OkSafeJson(json: JsValue, pretty: Boolean = false): Result = {\n+\n+  def OkSafeJsValue(json: JsValue, pretty: Bo = false): Result = {\n     val jsonString = if (pretty) Json.prettyPrint(json) else Json.stringify(json)\n     // Would excluding the prefix be a maybe breaking API change?\n     // Better post about this in the forum first.\n     val prefix = SafeJsonPrefix // if (json.isInstanceOf[JsObject]) \"\" else SafeJsonPrefix\n     Ok(prefix + jsonString) as JSON\n   }\n \n-  /** Pretty prints by default, nice when troubleshooting. And doesn't incl the\n+  /** Doesn't incl the\n     * don't-parse-as-a-script tag â€” that's only meaningful for browsers?\n+    * And not needed, when returning a JsObject.\n     */\n-  def OkApiJson(json: JsValue, pretty: Boolean = true): Result = {\n+  def OkApiJson(json: JsObject, pretty: Bo = false): Result = {\n     val jsonString = if (pretty) Json.prettyPrint(json) else Json.stringify(json)\n     Ok(jsonString) as JSON\n   }"
    },
    {
      "sha": "e8a1524f1c497c2e0bba8fee535c52cea425583b",
      "filename": "appsv/server/controllers/ViewPageController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/ViewPageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/ViewPageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/ViewPageController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -400,12 +400,12 @@ object ViewPageController {\n       if (skipUsersOnline) UsersOnlineStuff(users = Nil, usersJson = JsArray(), numStrangers = 0)\n       else dao.loadUsersOnlineStuff()\n \n-    val anyUserSpecificDataJson: Option[JsValue] =\n+    val anyUserSpecificDataJson: Opt[JsObject] =\n       request match {\n         case pageRequest: PageRequest[_] =>\n           dao.jsonMaker.userDataJson(pageRequest, unapprovedPostAuthorIds)\n         case _: DebikiRequest[_] =>\n-          Some(dao.jsonMaker.userNoPageToJson(request))\n+          dao.jsonMaker.userNoPageToJson(request)\n       }\n \n     var volatileJson = Json.obj(  // VolatileDataFromServer"
    },
    {
      "sha": "e9e1a702ea9ee71216a1f89d4032947b70986690",
      "filename": "appsv/server/controllers/VoteController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/VoteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/VoteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/VoteController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -105,7 +105,7 @@ class VoteController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     }\n     else {\n       dao.addVoteIfAuZ(pageId, postNr, voteType,\n-            voterId = request.theUser.id, voterIp = request.ip, postNrsRead)\n+            voterId = request.theReqerId, voterIp = Some(request.ip), postNrsRead)\n     }\n \n     RACE // Fine, harmless."
    },
    {
      "sha": "458c6c706849e9fb8bf9c67ab3acc445f0fcfdfc",
      "filename": "appsv/server/controllers/package.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 6,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/controllers/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/controllers/package.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -19,20 +19,27 @@ import com.debiki.core.QuickMessageException\n import com.debiki.core.fileExists\n import com.debiki.core.Prelude._\n import debiki.Globals\n-import play.api.libs.json.JsValue\n+import play.api.libs.json.{JsValue, JsArray, JsObject}\n import play.api.mvc.Result\n \n \n package object controllers {\n \n-  // Move it to here soon ... No, move it to io.efdi.server.http package?\n-  def OkSafeJson(json: JsValue, pretty: Boolean = false): Result =\n-    Utils.OkSafeJson(json, pretty)\n+  def OkSafeJson(json: JsObject): Result =\n+    OkApiJson(json)\n \n-  def OkPrettyJson(json: JsValue): Result =\n+  @deprecated(\"Now\", \"Use OkSafeJson(JsObject) instead\")\n+  def OkSafeJson(json: JsArray): Result =\n+    OkSafeJsValue(json)\n+\n+  @deprecated(\"Now\", \"Use OkSafeJson(JsObject) instead\")\n+  def OkSafeJsValue(json: JsValue, pretty: Boolean = false): Result =\n+    Utils.OkSafeJsValue(json, pretty)\n+\n+  def OkPrettyJson(json: JsObject): Result =\n     Utils.OkApiJson(json, pretty = true)\n \n-  def OkApiJson(json: JsValue, pretty: Boolean = false): Result =\n+  def OkApiJson(json: JsObject, pretty: Boolean = false): Result =\n     Utils.OkApiJson(json, pretty)\n \n   /** Better fail fast with a full page error message, if assets have not yet been"
    },
    {
      "sha": "aca0efad083053887e25129d5321dcec41d9228f",
      "filename": "appsv/server/debiki/DebikiHttp.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/DebikiHttp.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/DebikiHttp.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/DebikiHttp.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -24,7 +24,7 @@ import com.debiki.core.Prelude._\n import ed.server.security.EdSecurity\n import controllers.{LoginController, routes}\n import java.{net => jn}\n-import play.api.libs.json.{JsLookupResult, JsValue}\n+import play.api.libs.json.{JsLookupResult, JsValue, JsObject}\n import play.{api => p}\n import play.api.mvc._\n import scala.concurrent.Await\n@@ -164,7 +164,11 @@ object EdHttp {  // REFACTOR move to  talkyard.server.http object methods?\n     // So, right now, don't:\n     //   p.http.Status.MOVED_PERMANENTLY\n \n+  @deprecated(\"Now\", \"use throwOkJson instead\")\n   def throwOkSafeJson(json: JsValue): Nothing =\n+    throw ResultException(controllers.OkSafeJsValue(json))\n+\n+  def throwOkJson(json: JsObject): Nothing =\n     throw ResultException(controllers.OkSafeJson(json))\n \n   def throwBadRequest(errCode: String, message: String = \"\"): Nothing ="
    },
    {
      "sha": "302e2d8f9f13c6dc745ae22166cf8a499be2ada1",
      "filename": "appsv/server/debiki/JsonUtils.scala",
      "status": "modified",
      "additions": 82,
      "deletions": 13,
      "changes": 95,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/JsonUtils.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/JsonUtils.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/JsonUtils.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -19,6 +19,7 @@ package debiki\n \n import com.debiki.core.Prelude._\n import com.debiki.core._\n+import com.debiki.core\n import java.{util => ju}\n import org.scalactic.{Good, Or, Bad}\n import play.api.libs.json._\n@@ -100,13 +101,14 @@ object JsonUtils {   MOVE // to talkyard.server.parser.JsonParSer\n       case JsNull => return None\n       case bad =>\n         throwBadJson(\n-          \"EsE2YMP7\", s\"'$fieldName' is not a JsObject, but a ${classNameOf(bad)}\")\n+            \"TyE2YMP73T\", s\"'$fieldName' is not an object, but a ${classNameOf(bad)}\")\n     }\n \n   def parseJsArray(json: JsValue, fieldName: St, optional: Bo = false): Seq[JsValue] =\n     readJsArray(json, fieldName, optional).value\n \n   // Add a 2nd fn, or a param: all elems be of the same type? See below: [PARSEJSARR]\n+  // RENAME 'optional' to 'emptyIfAbsent'?\n   def readJsArray(json: JsValue, fieldName: St, optional: Bo = false): JsArray = {\n     val array = (json \\ fieldName).toOption getOrElse {\n       if (optional) return JsArray()\n@@ -120,6 +122,15 @@ object JsonUtils {   MOVE // to talkyard.server.parser.JsonParSer\n     }\n   }\n \n+  def parseOptJsArray(jv: JsValue, fieldName: St): Opt[JsArray] =\n+    (jv \\ fieldName).toOption map {\n+      case a: JsArray => a\n+      case JsNull => return None\n+      case bad =>\n+        throwBadJson(\n+            \"TyE4MGJ28RP\", s\"'$fieldName' is not an array, but a ${classNameOf(bad)}\")\n+    }\n+\n   /*\n   // No way to shorten this?  [PARSEJSARR]\n   (jsObj \\ \"newTopicTypes\").asOpt[Seq[JsValue]] match {\n@@ -202,15 +213,64 @@ object JsonUtils {   MOVE // to talkyard.server.parser.JsonParSer\n         throwBadJson(\"EsE5GUMK\", s\"'$fieldName' is not a string: \" + errors.toString())\n     }\n \n+  def parsePageRef(json: JsObject, fieldName: St): PageRef = {\n+    parseOptPageRef(json, fieldName) getOrElse {\n+      throwMissing(\"TyEJSN0PGREF\", fieldName)\n+    }\n+  }\n+\n+  def parseOptPageRef(json: JsObject, fieldName: St): Opt[PageRef] = Some {\n+    val rawRef = parseOptSt(json, fieldName) getOrElse {\n+      return None\n+    }\n+    core.parsePageRef(rawRef) getOrIfBad { errMsg =>\n+      throwBadJson(\"TyEJSBADPGREF\", s\"Not a page ref: '$rawRef', problem: $errMsg\")\n+    }\n+  }\n+\n+  /*   id: / postid: / nr: / extid:  pageidpostnr/idnr:123,456  ?\n+  def parsePostRef(json: JsValue, fieldName: St): PageRef = {\n+    parseOptPostRef(json, fieldName) getOrElse {\n+      throwMissing(\"TyEJSN0POREF\", fieldName)\n+    }\n+  }\n \n-  def readParsedRef(json: JsValue, fieldName: String, allowParticipantRef: Boolean): ParsedRef = {\n+  def parseOptPostRef(json: JsValue, fieldName: St): Opt[PostRef] = Some {\n+    val rawRef = parseOptSt(json, fieldName) getOrElse {\n+      return None\n+    }\n+    core.parsePostRef(rawRef) getOrIfBad { errMsg =>\n+      throwBadJson(\"TyEJSBADPOREF\", s\"Not a post ref: '$rawRef', problem: $errMsg\")\n+    }\n+  } */\n+\n+\n+  // RENAME! to just parseRef\n+  def readParsedRef(json: JsObject, fieldName: St, allowParticipantRef: Bo): ParsedRef = {\n     val refStr = readString(json, fieldName)\n-    com.debiki.core.parseRef(refStr, allowParticipantRef = allowParticipantRef) getOrIfBad { problem =>\n+    core.parseRef(refStr, allowParticipantRef = allowParticipantRef) getOrIfBad { problem =>\n       throwBadJson(\"TyEBADREFFLD\", s\"Field '$fieldName': Bad ref: '$refStr', the problem: $problem\")\n     }\n   }\n \n \n+  def parsePostVoteType(json: JsObject, fieldName: St): PostVoteType = {\n+    val voteTypeSt = parseSt(json, fieldName)\n+    PostVoteType.apiV0_fromStr(voteTypeSt) getOrElse {\n+      throwBadJson(\"TyEJSNPOVOTY\", s\"$fieldName: Unsupported vote type: '$voteTypeSt'\")\n+    }\n+  }\n+\n+\n+  def parseNotfLevel(json: JsObject, fieldName: St): NotfLevel = {\n+    val whatLevelSt = parseSt(json, fieldName)\n+    NotfLevel.fromSt_apiV0(whatLevelSt) getOrElse {\n+      throwBadJson(\"TyEJSNNOTFLV\",\n+            s\"$fieldName: Unsupported notification level: '$whatLevelSt'\")\n+    }\n+  }\n+\n+\n   def readOptByte(json: JsValue, fieldName: String): Option[Byte] = {\n     readOptLong(json, fieldName) map { valueAsLong =>\n       if (valueAsLong > Byte.MaxValue)\n@@ -265,18 +325,24 @@ object JsonUtils {   MOVE // to talkyard.server.parser.JsonParSer\n   }\n \n \n-  def parseInt32(json: JsValue, field: St, alt: St = \"\", default: Opt[i32] = None): i32 =\n-    readInt(json, fieldName = field, altName = alt, default = default)\n+  def parseInt32(json: JsValue, field: St, alt: St = \"\", default: Opt[i32] = None,\n+        min: Opt[i32] = None, max: Opt[i32] = None): i32 =\n+    readInt(json, fieldName = field, altName = alt, default = default,\n+          min = min, max = max)\n \n \n+  CLEAN_UP // remove-rename all I32 and Int to Int32, and 64, etc,\n+  // and \"read\" to \"parse\", this whole file.\n   def parseI32(json: JsValue, field: St, alt: St = \"\", default: Opt[i32] = None): i32 =\n     readInt(json, field, alt, default)\n \n \n   def readInt(json: JsValue, fieldName: String, altName: String = \"\",\n-        default: Option[Int] = None): Int =\n-    readOptInt(json, fieldName).orElse(readOptInt(json, altName)).orElse(default)\n-      .getOrElse(throwMissing(\"EsE5KPU3\", fieldName))\n+        default: Option[Int] = None, min: Opt[i32] = None, max: Opt[i32] = None): Int =\n+    readOptInt(json, fieldName, min = min, max = max)\n+        .orElse(readOptInt(json, altName, min = min, max = max))\n+        .orElse(default)\n+        .getOrElse(throwMissing(\"EsE5KPU3\", fieldName))\n \n \n   def parseOptI32(json: JsValue, field: St, altField: St = \"\"): Opt[i32] =\n@@ -287,12 +353,15 @@ object JsonUtils {   MOVE // to talkyard.server.parser.JsonParSer\n      readOptInt(json, fieldName = field, altName = altField)\n \n \n-  def readOptInt(json: JsValue, fieldName: String, altName: String = \"\"): Option[Int] = {\n+  def readOptInt(json: JsValue, fieldName: String, altName: String = \"\",\n+          min: Opt[i32] = None, max: Opt[i32] = None): Option[Int] = {\n     readOptLong(json, fieldName).orElse(readOptLong(json, altName)) map { valueAsLong =>\n-      if (valueAsLong > Int.MaxValue)\n-        throwBadJson(\"EsE5YKP02\", s\"$fieldName is too large for an Int: $valueAsLong\")\n-      if (valueAsLong < Int.MinValue)\n-        throwBadJson(\"EsE2PK6S3\", s\"$fieldName is too small for an Int: $valueAsLong\")\n+      val maxVal = max getOrElse Int.MaxValue\n+      val minVal = min getOrElse Int.MinValue\n+      if (valueAsLong > maxVal)\n+        throwBadJson(\"TyEJSNGTMX\", s\"$fieldName too large: $valueAsLong, max is: $maxVal\")\n+      if (valueAsLong < minVal)\n+        throwBadJson(\"TyEJSNLTMN\", s\"$fieldName too small: $valueAsLong, min is: $minVal\")\n       valueAsLong.toInt\n     }\n   }"
    },
    {
      "sha": "a516647f9443adf48786a699c9a82488713c30bd",
      "filename": "appsv/server/debiki/ReactJson.scala",
      "status": "modified",
      "additions": 20,
      "deletions": 12,
      "changes": 32,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/ReactJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/ReactJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/ReactJson.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -733,11 +733,11 @@ class JsonMaker(dao: SiteDao) {\n   }\n \n \n-  def userNoPageToJson(request: DebikiRequest[_]): JsValue = {\n+  def userNoPageToJson(request: DebikiRequest[_]): Opt[JsObject] = Some {\n     import request.authzContext\n     require(request.dao == dao, \"TyE4JK5WS2\")\n     val requester = request.user getOrElse {\n-      return JsNull\n+      return None\n     }\n     val permissions = authzContext.tooManyPermissions\n     val permsOnSiteTooMany = dao.getPermsOnSiteForEveryone()\n@@ -919,6 +919,13 @@ class JsonMaker(dao: SiteDao) {\n       val siteSettings = tx.loadSiteSettings()\n       json += \"isEmbeddedCommentsSite\" -> JsBoolean(siteSettings.exists(_.allowEmbeddingFrom.nonEmpty))\n       json += \"siteCreatedAtMs\" -> JsWhenMsOrNull(site.map(_.createdAt))\n+\n+      // For now, for admins only (although the table notices_t supports notices to\n+      // all groups and users).\n+      COULD_OPTIMIZE // cache in SiteDao. Don't need to be milliseconds up-to-date.\n+      val adminNotices: Seq[Notice] = tx.loadAdminNotices()\n+      json += \"adminNotices\" -> JsArray(adminNotices map JsNotice)\n+\n       // json += \"talkyardVersion\" -> ?  â€” maybe later.\n     }\n \n@@ -1040,7 +1047,7 @@ class JsonMaker(dao: SiteDao) {\n \n \n   def makeCategoriesStorePatch(categoryId: CategoryId, authzCtx: ForumAuthzContext)\n-        : JsValue = {\n+        : JsObject = {\n     // 2 dupl lines [7UXAI1]\n     val restrCategoriesJson =\n       makeCategoriesJson(categoryId, authzCtx, exclPublCats = true)\n@@ -1115,7 +1122,8 @@ class JsonMaker(dao: SiteDao) {\n   }\n \n \n-  def makeStorePatchForPostNr(pageId: PageId, postNr: PostNr, showHidden: Boolean): Option[JsValue] = {\n+  def makeStorePatchForPostNr(pageId: PageId, postNr: PostNr, showHidden: Bo)\n+        : Opt[JsObject] = {\n     val post = dao.loadPost(pageId, postNr) getOrElse {\n       return None\n     }\n@@ -1128,16 +1136,16 @@ class JsonMaker(dao: SiteDao) {\n \n \n   def makeStorePatchForPosts(postIds: Set[PostId], showHidden: Boolean, dao: SiteDao)\n-  : JsValue = {\n+        : JsObject = {\n     dao.readOnlyTransaction { tx =>\n       makeStorePatchForPosts(postIds, showHidden, dao.context.postRenderer,\n         tx, appVersion = dao.globals.applicationVersion)\n     }\n   }\n \n \n-  def makeStorePatchForPosts(postIds: Set[PostId], showHidden: Boolean,\n-    postRenderer: PostRenderer, transaction: SiteTransaction, appVersion: String): JsValue = {\n+  def makeStorePatchForPosts(postIds: Set[PostId], showHidden: Bo,\n+    postRenderer: PostRenderer, transaction: SiteTx, appVersion: St): JsObject = {\n     val posts = transaction.loadPostsByUniqueId(postIds).values\n     val tagsByPostId = transaction.loadTagsByPostId(postIds)\n     val pageIds = posts.map(_.pageId).toSet\n@@ -1161,7 +1169,7 @@ class JsonMaker(dao: SiteDao) {\n \n   @deprecated(\"now\", \"use makeStorePatchForPosts instead\")\n   def makeStorePatch2(postId: PostId, pageId: PageId, appVersion: String,\n-        transaction: SiteTransaction): JsValue = {\n+        transaction: SiteTransaction): JsObject = {\n     // Warning: some similar code above [89fKF2]\n     // Load the page so we'll get a version that includes postId, in case it was just added.\n     val page = dao.newPageDao(pageId, transaction)\n@@ -1198,7 +1206,7 @@ class JsonMaker(dao: SiteDao) {\n   ANNOYING // needs a transaction, because postToJsonImpl needs one. Try to remove\n   private def makeStorePatch3(pageIdVersions: Iterable[PageIdVersion], posts: Iterable[Post],\n      tagsByPostId: Map[PostId, Set[String]], users: Iterable[Participant], appVersion: String)(\n-    transaction: SiteTransaction): JsValue = {\n+     tx: SiteTx): JsObject = {\n     require(posts.isEmpty || users.nonEmpty, \"Posts but no authors [EsE4YK7W2]\")\n     val pageVersionsByPageIdJson =\n       JsObject(pageIdVersions.toSeq.map(p => p.pageId -> JsNumber(p.version)))\n@@ -1207,7 +1215,7 @@ class JsonMaker(dao: SiteDao) {\n       postsByPageId.toSeq.map(pageIdPosts => {\n         val pageId = pageIdPosts._1\n         val posts = pageIdPosts._2\n-        val page = dao.newPageDao(pageId, transaction)\n+        val page = dao.newPageDao(pageId, tx)\n         val postsJson = posts map { p =>\n           postToJsonImpl(p, page, tagsByPostId.getOrElse(p.id, Set.empty),\n             includeUnapproved = false, showHidden = false)\n@@ -2043,12 +2051,12 @@ object JsonMaker {\n   }\n \n \n-  def makeTagsStuffPatch(json: JsObject, appVersion: String): JsValue = {\n+  def makeTagsStuffPatch(json: JsObject, appVersion: String): JsObject = {\n     makeStorePatch(Json.obj(\"tagsStuff\" -> json), appVersion = appVersion)\n   }\n \n \n-  def makeStorePatch(json: JsObject, appVersion: String): JsValue = {\n+  def makeStorePatch(json: JsObject, appVersion: String): JsObject = {\n     json + (\"appVersion\" -> JsString(appVersion))\n   }\n "
    },
    {
      "sha": "17044c722b2c796999966f054cf9b373105f5795",
      "filename": "appsv/server/debiki/dao/PagePathMetaDao.scala",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/dao/PagePathMetaDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/dao/PagePathMetaDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/PagePathMetaDao.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -164,10 +164,27 @@ trait PagePathMetaDao {\n   }\n \n \n-  def getPageMetaByParsedRef(parsedRef: ParsedRef): Option[PageMeta] = {\n+  // Later, return a PageMeta Or ErrMsg?\n+  def getPageMetaByParsedRef(parsedRef: ParsedRef): Opt[PageMeta] = {\n     parsedRef match {\n+      case ParsedRef.PageId(id) => getPageMeta(id)\n+      // later: case ParsedRef.DiscussionId(id) => use SiteTx.loadPageMetasByAltIdAsMap?\n       case ParsedRef.TalkyardId(id) => getPageMeta(id)\n       case ParsedRef.ExternalId(extId) => getPageMetaByExtId(extId)\n+      case ParsedRef.PagePath(urlPath) =>\n+        val path: PagePath.Parsed = PagePath.fromUrlPath(siteId, urlPath)\n+        path match {\n+          case PagePath.Parsed.Good(pagePath: PagePath) =>\n+            val pathWithId: Opt[PagePathWithId] = checkPagePath2(pagePath)\n+            pathWithId.flatMap(pathWithId => getPageMeta(pathWithId.pageId))\n+            // Later, return Bad(\"No such page: id\") if not found?\n+          case c: PagePath.Parsed.Corrected =>\n+            // For now\n+            None\n+          case b: PagePath.Parsed.Bad =>\n+            // For now\n+            None\n+        }\n       case bad => die(\"TyE404KSR5\", s\"Bad ref type: ${classNameOf(bad)}\")\n     }\n   }"
    },
    {
      "sha": "08f74a2c3ea9ccd8974ac2d56f38741d56af83d5",
      "filename": "appsv/server/debiki/dao/PostsDao.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/dao/PostsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/dao/PostsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/PostsDao.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -325,7 +325,7 @@ trait PostsDao {\n     ... derive prefs, looking at own and groups ...\n     val oldPostsByAuthor = page.parts.postByAuthorId(authorId)\n     if (oldPostsByAuthor.isEmpty) {\n-      savePageNotfPref(PageNotfPref(\n+      savePageNotfPrefIfAuZ(PageNotfPref(\n             peopleId = authorId,\n             NotfLevel.WatchingAll,\n             pageId = Some(pageId)), byWho = Who.System)\n@@ -1530,7 +1530,7 @@ trait PostsDao {\n   }\n \n \n-  def editPostSettings(postId: PostId, branchSideways: Option[Byte], me: Who): JsValue = {\n+  def editPostSettings(postId: PostId, branchSideways: Option[Byte], me: Who): JsObject = {\n     val (post, patch) = readWriteTransaction { tx =>\n       val postBefore = tx.loadPostsByUniqueId(Seq(postId)).headOption.getOrElse({\n         throwNotFound(\"EsE5KJ8W2\", s\"Post not found: $postId\")\n@@ -2195,7 +2195,9 @@ trait PostsDao {\n       val voter = tx.loadTheParticipant(voterId)\n       throwIfMayNotSeePost(post, Some(voter))(tx)\n \n-      tx.deleteVote(pageId, postNr = postNr, voteType, voterId = voterId)\n+      val gotDeleted = tx.deleteVote(pageId, postNr = postNr, voteType, voterId = voterId)\n+      throwForbiddenIf(!gotDeleted, \"TyE50MWW14\",\n+            s\"No $voteType vote by ${voter.nameHashId} on post id ${post.id} to delete\")\n \n       // Don't delete â€” for now. Because that'd result in many emails\n       // getting sent, if someone toggles a Like on/off.  [toggle_like_email]\n@@ -2236,7 +2238,7 @@ trait PostsDao {\n \n \n   def addVoteIfAuZ(pageId: PageId, postNr: PostNr, voteType: PostVoteType,\n-        voterId: UserId, voterIp: String, postNrsRead: Set[PostNr]): Unit = {\n+        voterId: UserId, voterIp: Opt[IpAdr], postNrsRead: Set[PostNr]): Unit = {\n     require(postNr >= PageParts.BodyNr, \"TyE5WKAB20\")\n \n     writeTx { (tx, staleStuff) =>\n@@ -2288,7 +2290,7 @@ trait PostsDao {\n         }\n \n       tx.updatePostsReadStats(pageId, postsToMarkAsRead, readById = voterId,\n-        readFromIp = voterIp)\n+            readFromIp = voterIp)\n       updatePageAndPostVoteCounts(post, tx)\n       updatePagePopularity(page.parts, tx)\n       addUserStats(UserStats(post.createdById, numLikesReceived = 1))(tx)\n@@ -2329,7 +2331,7 @@ trait PostsDao {\n \n   RENAME // all ... IfAuth to IfAuZ (if authorized)\n   def movePostIfAuth(whichPost: PagePostId, newParent: PagePostNr, moverId: UserId,\n-        browserIdData: BrowserIdData): (Post, JsValue) = {\n+        browserIdData: BrowserIdData): (Post, JsObject) = {\n \n     if (newParent.postNr == PageParts.TitleNr)\n       throwForbidden(\"EsE4YKJ8_\", \"Cannot place a post below the title\")"
    },
    {
      "sha": "ef43fcd59ca1bb4388f3ce7616b23b4adf5f904a",
      "filename": "appsv/server/debiki/dao/SiteDao.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/dao/SiteDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/dao/SiteDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/SiteDao.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -496,20 +496,29 @@ class SiteDao(\n     uncacheSiteFromMemCache()\n   }\n \n+\n   def changeExtraHostsRole(newRole: Hostname.Role): Unit = {\n     readWriteTransaction { tx =>\n       tx.changeExtraHostsRole(newRole)\n       uncacheSiteFromMemCache()\n     }\n   }\n \n+\n   def loadResourceUsage(): ResourceUse = {\n     readOnlyTransaction { tx =>\n       tx.loadResourceUsage()\n     }\n   }\n \n \n+  def addAdminNotice(noticeId: NoticeId): U = {\n+    writeTx { (tx, _) =>\n+      tx.addAdminNotice(noticeId)\n+    }\n+  }\n+\n+\n   // ----- List stuff\n \n   def listPagePaths("
    },
    {
      "sha": "74e0f5311085ed7d1ae5375baaccb6790abc7da2",
      "filename": "appsv/server/debiki/dao/TagsDao.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/dao/TagsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/dao/TagsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/TagsDao.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -21,7 +21,7 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.EdHttp.{throwForbidden, throwForbiddenIf}\n import ed.server.pubsub.StorePatchMessage\n-import play.api.libs.json.JsValue\n+import play.api.libs.json.JsObject\n import TagsDao._\n import scala.util.matching.Regex\n \n@@ -88,7 +88,7 @@ trait TagsDao {\n \n \n   def addRemoveTagsIfAuth(pageId: PageId, postId: PostId, tags: Set[Tag], who: Who)\n-        : JsValue = {\n+        : JsObject = {\n \n     throwForbiddenIf(tags.size > MaxNumTags,\n       \"EsE5KG0F3\", s\"Too many tags: ${tags.size}, max is $MaxNumTags\")"
    },
    {
      "sha": "97c4f17769e041ddb09ec5c339de06a698fff9be",
      "filename": "appsv/server/debiki/dao/UserDao.scala",
      "status": "modified",
      "additions": 27,
      "deletions": 3,
      "changes": 30,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/dao/UserDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/debiki/dao/UserDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/debiki/dao/UserDao.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -859,15 +859,39 @@ trait UserDao {\n \n \n   def getParticipantByParsedRef(ref: ParsedRef): Option[Participant] = {\n+    // username: and userid: refs must be to users (not guests or groups).\n+    COULD // return Bad(\"Not a user, but a guest/group: __\")\n+    val returnBadUnlessIsUser = (pat: Opt[Pat]) =>\n+      if (pat.exists(!_.isUserNotGuest))\n+        return None  // Bad(\"Not a user but a ${}: ${ref}\")\n+\n+    val returnBadUnlessGroup = (pat: Opt[Pat]) =>\n+      if (pat.exists(!_.isGroup))\n+        return None  // Bad(\"Not a group but a ${}: ${ref}\")\n+\n     ref match {\n       case ParsedRef.ExternalId(extId) =>\n         getParticipantByExtId(extId)\n       case ParsedRef.TalkyardId(tyId) =>\n         tyId.toIntOption flatMap getParticipant\n+      case ParsedRef.UserId(id) =>\n+        val pat = getParticipant(id)\n+        returnBadUnlessIsUser(pat)\n+        pat\n       case ParsedRef.SingleSignOnId(ssoId) =>\n         getMemberBySsoId(ssoId)\n       case ParsedRef.Username(username) =>\n-        getMemberByUsername(username)\n+        val pat = getMemberByUsername(username)\n+        returnBadUnlessIsUser(pat)\n+        pat\n+      case ParsedRef.Groupname(username) =>\n+        val pat = getMemberByUsername(username)\n+        returnBadUnlessGroup(pat)\n+        pat\n+      //case ParsedRef.Membername(membername) =>\n+      // val pat = getMemberByUsername(username)\n+      // returnBadUnlessUserOrGroup(pat)\n+      // pat\n     }\n   }\n \n@@ -1826,14 +1850,14 @@ trait UserDao {\n   }\n \n \n-  def savePageNotfPref(pageNotfPref: PageNotfPref, byWho: Who): Unit = {\n+  def savePageNotfPrefIfAuZ(pageNotfPref: PageNotfPref, byWho: Who): U = {\n     editMemberThrowUnlessSelfStaff(pageNotfPref.peopleId, byWho, \"TyE2AS0574\", \"change notf prefs\") { tx =>\n       tx.upsertPageNotfPref(pageNotfPref)\n     }\n   }\n \n \n-  def deletePageNotfPref(pageNotfPref: PageNotfPref, byWho: Who): Unit = {\n+  def deletePageNotfPrefIfAuZ(pageNotfPref: PageNotfPref, byWho: Who): Unit = {\n     editMemberThrowUnlessSelfStaff(pageNotfPref.peopleId, byWho, \"TyE5KP0GJL\", \"delete notf prefs\") { tx =>\n       tx.deletePageNotfPref(pageNotfPref)\n     }"
    },
    {
      "sha": "7591cfe44cd4493c10cd316527d8c488d7f41c3c",
      "filename": "appsv/server/ed/server/EdAppLoader.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/ed/server/EdAppLoader.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/ed/server/EdAppLoader.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/ed/server/EdAppLoader.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -132,6 +132,7 @@ class EdAppComponents(appLoaderContext: ApplicationLoader.Context)\n     new _root_.talkyard.server.authn.SsoAuthnController(cc, context),\n     new _root_.talkyard.server.api.GetController(cc, context),\n     new _root_.talkyard.server.api.ListController(cc, context),\n+    new _root_.talkyard.server.api.QueryDoController(cc, context),\n     new _root_.controllers.ApiV0Controller(cc, context, sitePatchController),\n     //new _root_.controllers.Application(cc, context),\n     new _root_.controllers.ViewPageController(cc, context))"
    },
    {
      "sha": "63a777b683b06ae8ad32913bed6ad1776cfc05de",
      "filename": "appsv/server/ed/server/http/DebikiRequest.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/ed/server/http/DebikiRequest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/ed/server/http/DebikiRequest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/ed/server/http/DebikiRequest.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -90,9 +90,11 @@ abstract class AuthnReqHeader extends SomethingToRateLimit {\n   // about another user â€” then, does 'user' refer to the requester or that other user?\n   // Instead, use 'requester' always, to refer to the requester.\n   def requester: Option[Participant] = user\n+  def reqer: Opt[Pat] = user  // shorter, nicer. \"Req\" = request, + \"er\" = \"requester\"\n   def requesterOrUnknown: Participant = user getOrElse UnknownParticipant\n   def requesterIdOrUnknown: UserId = user.map(_.id) getOrElse UnknownUserId\n   def theRequester: Participant = theUser\n+  def theReqer: Pat = theUser  // shorter, better\n \n   def tenantId: SiteId = dao.siteId\n   def siteId: SiteId = dao.siteId\n@@ -129,6 +131,7 @@ abstract class AuthnReqHeader extends SomethingToRateLimit {\n   @deprecated(\"now\", \"use theRequesterId instead\")\n   def theUserId: UserId = theUser.id\n   def theRequesterId: UserId = theUser.id\n+  def theReqerId: PatId = theRequesterId // shorter, nice\n \n   def userAndLevels: AnyUserAndThreatLevel = {\n     val threatLevel = user match {"
    },
    {
      "sha": "3e5aeb91569754d631eaa4d3f2504760168d9897",
      "filename": "appsv/server/ed/server/http/PlainApiActions.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/ed/server/http/PlainApiActions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/ed/server/http/PlainApiActions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/ed/server/http/PlainApiActions.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -323,6 +323,9 @@ class PlainApiActions(\n       throwForbiddenIf(user.id < Group.EveryoneId && user.id != SysbotUserId,\n         \"TyEAPIBADUSR_\", s\"Not allowed to call the API as user ${user.usernameOrGuestName}\")\n \n+      // See: [non_adm_api_usr] for code that does slightly different things\n+      // if isn't sysbot.\n+\n       runBlockIfAuthOk(request, site, dao, Some(user),\n           // SECURITY minor: Less error prone with a Bool field instead of this magic string.\n           SidOk(\"_api_secret_\", 0, Some(user.id)), XsrfOk(\"_api_secret_\"), None, block)"
    },
    {
      "sha": "87e8d1b280d93329e6ee7e6e356e56582aecdf54",
      "filename": "appsv/server/ed/server/http/package.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/ed/server/http/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/ed/server/http/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/ed/server/http/package.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -20,14 +20,14 @@ package ed.server\n import com.debiki.core._\n import debiki.dao.SiteDao\n import ed.server.security.{BrowserId, SidStatus, XsrfOk}\n-import play.api.libs.json.JsValue\n+import play.api.libs.json.{JsValue, JsArray, JsObject}\n import play.api.mvc._\n \n \n package object http {\n \n-  def OkSafeJson(json: JsValue): Result =\n-    _root_.controllers.Utils.OkSafeJson(json)\n+  def OkSafeJson(json: JsObject): Result =\n+    _root_.controllers.Utils.OkApiJson(json)\n \n \n   case class AuthnReqHeaderImpl("
    },
    {
      "sha": "4417a8a887c7d5040fce100745b8f4d62ff0e7e8",
      "filename": "appsv/server/talkyard/server/JsX.scala",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/JsX.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/JsX.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/JsX.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -116,6 +116,17 @@ object JsX {   RENAME // to JsonPaSe\n   }\n \n \n+  def JsNotice(n: Notice): JsObject = {\n+    Json.obj(\n+          \"id\" -> n.noticeId,\n+          \"toPatId\" -> n.toPatId,\n+          \"firstAtMins\" -> JsWhenMins(n.firstAt),\n+          \"lastAtMins\" -> JsWhenMins(n.lastAt),\n+          \"numTotal\" -> n.numTotal,\n+          \"noticeData\" -> JsObjOrNull(n.noticeData))\n+  }\n+\n+\n   def JsInvite(invite: Invite, shallHideEmailLocalPart: Boolean, inclSecret: Boolean = false): JsObject = {\n     val safeEmail =\n       if (shallHideEmailLocalPart) hideEmailLocalPart(invite.emailAddress)\n@@ -729,8 +740,17 @@ object JsX {   RENAME // to JsonPaSe\n   def JsWhenMsOrNull(value: Option[When]): JsValue =\n     value.map(when => JsNumber(when.unixMillis)).getOrElse(JsNull)\n \n+  def JsWhenMins(value: When): JsNumber =\n+    JsNumber(value.unixMinutes)\n+\n+  def JsWhenMins(value: WhenMins): JsNumber =\n+    JsNumber(value.mins)\n+\n   def JsWhenMinsOrNull(value: Option[When]): JsValue =\n-    value.map(when => JsNumber(when.unixMinutes)).getOrElse(JsNull)\n+    value.map(JsWhenMins) getOrElse JsNull\n+\n+  def JsWhenMins2OrNull(value: Opt[WhenMins]): JsValue =\n+    value.map(JsWhenMins) getOrElse JsNull\n \n   def JsDateMsOrNull(value: Option[ju.Date]): JsValue =\n     value.map(JsDateMs).getOrElse(JsNull)"
    },
    {
      "sha": "eee7ad24ee858962a37e9e0634fd265ef8504b80",
      "filename": "appsv/server/talkyard/server/api/ActionDoer.scala",
      "status": "added",
      "additions": 71,
      "deletions": 0,
      "changes": 71,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/ActionDoer.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/ActionDoer.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/api/ActionDoer.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -0,0 +1,71 @@\n+package talkyard.server.api\n+\n+import com.debiki.core._\n+import com.debiki.core.Prelude._\n+import debiki.dao.SiteDao\n+import debiki.EdHttp._\n+import collection.{mutable => mut}\n+\n+case class ActionDoer(dao: SiteDao, reqerId: ReqrId) { // later, tags branch:  complain: DieOrComplain) {\n+\n+  import dao.context.security.throwIndistinguishableNotFound\n+\n+  private val pageIdsByRef = mut.Map[PageRef, Opt[PageMeta]]()\n+\n+  private def getThePageByRef(ref: PageRef): PageMeta = {\n+    getAnyPageByRef(ref) getOrElse {\n+      if (reqerId.id == SysbotUserId) throwNotFound(\"TyE502MRGP4\", s\"No such page: $ref\")\n+      else throwIndistinguishableNotFound(\"TyE7M4USI50\")  // [non_adm_api_usr]\n+    }\n+  }\n+\n+  private def getAnyPageByRef(ref: PageRef): Opt[PageMeta] = {\n+    pageIdsByRef.getOrElseUpdate(\n+          ref, dao.getPageMetaByParsedRef(ref.asParsedRef))\n+  }\n+\n+\n+  def doAction(action: ApiAction): AnyProblem = {\n+    action.doHow match {\n+      case params: SetVoteParams =>\n+        // Currently only for Like voting or un-voting.\n+        dieIf(action.doWhat != ActionType.SetVote, \"TyEBADACTYP1\")\n+        throwUnimplIf(params.whatVote != PostVoteType.Like,\n+              \"TyE062MSE: Can only Like vote via the API, currently.\")\n+\n+        val page = getThePageByRef(params.whatPage)\n+        if (params.howMany == 1) {\n+          dao.addVoteIfAuZ(\n+                pageId = page.pageId,\n+                postNr = params.whatPostNr,\n+                voteType = params.whatVote,\n+                voterId = action.asWho.id,\n+                // The backend server IP is not interesting, right.\n+                voterIp = None,\n+                postNrsRead = Set(params.whatPostNr))\n+        }\n+        else if (params.howMany == 0) {\n+          dao.deleteVoteIfAuZ(\n+                pageId = page.pageId,\n+                postNr = params.whatPostNr,\n+                voteType = params.whatVote,\n+                voterId = action.asWho.id)\n+        }\n+        else {\n+          die(\"TyE4MWEGJ6702\")\n+        }\n+\n+      case params: SetNotfLevelParams =>\n+        // Currently only for setting the notf level to NewPosts for a specific page.\n+        dieIf(action.doWhat != ActionType.SetNotfLevel, \"TyEBADACTYP2\")\n+        val pageMeta = getThePageByRef(params.whatPage)\n+        val newNotfPref = PageNotfPref(\n+              peopleId = action.asWho.id,\n+              notfLevel = params.whatLevel,\n+              pageId = Some(pageMeta.pageId))\n+        dao.savePageNotfPrefIfAuZ(newNotfPref, reqerId)\n+    }\n+    Fine\n+  }\n+\n+}"
    },
    {
      "sha": "f17d596ea5c92a764bd85d7422ce99266d8ce3be",
      "filename": "appsv/server/talkyard/server/api/ActionParser.scala",
      "status": "added",
      "additions": 92,
      "deletions": 0,
      "changes": 92,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/ActionParser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/ActionParser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/api/ActionParser.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -0,0 +1,92 @@\n+package talkyard.server.api\n+\n+import com.debiki.core._\n+import com.debiki.core.Prelude._\n+import debiki.dao.SiteDao\n+import play.api.libs.json.{JsObject, JsValue, JsArray, Json}\n+import org.scalactic.{Bad, ErrorMessage, Good, Or}\n+import debiki.JsonUtils._\n+\n+case class ActionParser(dao: SiteDao) {\n+\n+\n+  def parseAction(doWhatSt: St, actionJsOb: JsObject): ApiAction Or ErrMsg = {\n+    tryParse {\n+      // (parseActionImpl() might throw BadJsonException, instead of returning Bad.)\n+      parseActionImpl(doWhatSt, actionJsOb) getOrIfBad { errMsg =>\n+        return Bad(errMsg)\n+      }\n+    }\n+  }\n+\n+\n+  private def parseActionImpl(doWhatSt: St, actionJsOb: JsObject): ApiAction Or ErrMsg = {\n+    val actionType = ActionType.fromSt(doWhatSt) getOrElse {\n+      return Bad(s\"Unknown API action type: $doWhatSt\")\n+    }\n+\n+    // Could cache asWhoSt â€“> pat?  would be the same, for all actions?\n+    // (Unless is a 'username:__' ref, and changes one's username in the middle\n+    // of a series of actions.)\n+    val asWhoSt = parseSt(actionJsOb, \"asWho\")\n+    val anyPat: Opt[Pat] = dao.getParticipantByRef(asWhoSt) getOrIfBad { problem =>\n+      return Bad(s\"Bad asWho: $problem\")\n+    }\n+    val pat = anyPat getOrElse {\n+      return Bad(s\"No such participant: $asWhoSt\")\n+    }\n+\n+    if (pat.isSystemUser)\n+      return Bad(o\"\"\"You cannot use the System user when doing things via Talkyard's API\n+              â€” but you can use Sysbot, or an ordinary user [TyEAPIUSRSYS]\"\"\")\n+\n+    // For now\n+    if (pat.isBuiltIn)\n+      return Bad(o\"\"\"Currently built-in users cannot do things via\n+            the API. Set asWho to a human's user account instead [TyEAPIUSRGST]\"\"\")\n+\n+    // Guests may not do lots of things.\n+    if (pat.isGuest) {\n+      actionType match {\n+        // Later, but first verify it's a Like vote:\n+        // case ActionType.SetVote =>\n+        //   // Fine, guests may Like vote.\n+        case _ =>\n+          return Bad(s\"Participant $asWhoSt is a guest and therefore may not: $doWhatSt\")\n+      }\n+    }\n+\n+    // Groups also may not do lots of things. For now:\n+    if (pat.isGroup)\n+      return Bad(o\"\"\"Currently groups cannot do things via the API [TyEAPIUSRGROUP]\"\"\")\n+\n+    dieUnless(pat.isUserNotGuest, \"TyE502MSE6\")\n+\n+    val howJsOb = parseJsObject(actionJsOb, \"doHow\")\n+    val pageRef: PageRef = debiki.JsonUtils.parsePageRef(howJsOb, \"whatPage\")\n+\n+    val params = actionType match {\n+      case ActionType.SetVote =>\n+        val whatVote = parsePostVoteType(howJsOb, \"whatVote\")\n+        val howMany = parseInt32(howJsOb, \"howMany\", min = Some(0), max = Some(1))\n+        val postNr: PostNr = BodyNr\n+        /* Or a specific post, if `.whatPost` present and `.whatPage` absent:\n+        val whatPostJsOb = parseJsObject(howJsOb, \"whatPost\")\n+        val pageRef: PageRef = debiki.JsonUtils.parsePageRef(whatPostJsOb, \"page\")\n+        val postNr: PostNr = parseInt32(whatPostJsOb, \"postNr\")\n+         */\n+        SetVoteParams(whatVote, howMany = howMany,\n+              whatPage = pageRef, whatPostNr = postNr)\n+      case ActionType.SetNotfLevel =>\n+        val notfLevel = parseNotfLevel(howJsOb, \"whatLevel\")\n+        SetNotfLevelParams(whatLevel = notfLevel, whatPage = pageRef)\n+    }\n+\n+    Good(ApiAction(\n+          asWho = pat,\n+          doWhat = actionType,\n+          doWhy = parseOptSt(actionJsOb, \"doWhy\").trimNoneIfBlank,\n+          doHow = params))\n+  }\n+\n+}"
    },
    {
      "sha": "c902a45e1be0ec554d94e62b5cfccaa39b5b7a90",
      "filename": "appsv/server/talkyard/server/api/GetController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/GetController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/GetController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/api/GetController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -40,13 +40,13 @@ class GetController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n \n \n-  def getThingsPubApi(): Action[JsValue] = PostJsonAction(  // [PUB_API]\n+  def apiV0_get(): Action[JsValue] = PostJsonAction(  // [PUB_API]\n           RateLimits.ReadsFromDb, maxBytes = 2000) { request: JsonPostRequest =>\n-    getThingsPubApiImpl(request)\n+    getThingsImpl(request)\n   }\n \n \n-  def getThingsPubApiImpl(request: JsonPostRequest): Result = {\n+  private def getThingsImpl(request: JsonPostRequest): Result = {\n     import request.body\n     val pretty = (body \\ \"pretty\").asOpt[Bo].getOrElse(false)\n     val getQueryJson = (body \\ \"getQuery\").as[JsObject]"
    },
    {
      "sha": "764264bb963e268e122e236f32d847ded85c22cc",
      "filename": "appsv/server/talkyard/server/api/ListController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/ListController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/ListController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/api/ListController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -38,13 +38,13 @@ class ListController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n \n \n-  def listThingsPubApi(): Action[JsValue] = PostJsonAction(  // [PUB_API]\n+  def apiV0_list(): Action[JsValue] = PostJsonAction(  // [PUB_API]\n           RateLimits.ReadsFromDb, maxBytes = 2000) { request: JsonPostRequest =>\n-    listThingsPubApiImpl(request)\n+    listThingsImpl(request)\n   }\n \n \n-  def listThingsPubApiImpl(request: JsonPostRequest): Result = {\n+  private def listThingsImpl(request: JsonPostRequest): Result = {\n     import request.{body, dao, requester}\n \n     val pretty = (body \\ \"pretty\").asOpt[Bo].getOrElse(false)"
    },
    {
      "sha": "730120e895b56b3266994bb868e68962b2c7f84e",
      "filename": "appsv/server/talkyard/server/api/QueryDoController.scala",
      "status": "added",
      "additions": 173,
      "deletions": 0,
      "changes": 173,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/QueryDoController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/QueryDoController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/api/QueryDoController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2021 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package talkyard.server.api\n+\n+import com.debiki.core._\n+import controllers.OkApiJson\n+import debiki.RateLimits\n+import ed.server.http._\n+import debiki.EdHttp._\n+import debiki.JsonUtils._\n+import Prelude._\n+import debiki.dao.SiteDao\n+import ed.server.{EdContext, EdController}\n+import javax.inject.Inject\n+import play.api.libs.json._\n+import play.api.mvc.{Action, ControllerComponents, Result}\n+\n+\n+/** The Query API, Do API and Query-Do API, see: tests/e2e-wdio7/pub-api.ts\n+  */\n+class QueryDoController @Inject()(cc: ControllerComponents, edContext: EdContext)\n+  extends EdController(cc, edContext) {\n+\n+\n+  def apiV0_query(): Action[JsValue] = ApiSecretPostJsonAction(  // [PUB_API]\n+          RateLimits.ReadsFromDb, maxBytes = 2000) { request: JsonPostRequest =>\n+    queryDoImpl(request, queryOnly = true)\n+  }\n+\n+\n+  def apiV0_do(): Action[JsValue] = ApiSecretPostJsonAction(  // [PUB_API]\n+          // For now, may do just a few things. [do_api_limits]\n+          RateLimits.UpsertFew, maxBytes = 2000) { request: JsonPostRequest =>\n+    queryDoImpl(request, doOnly = true)\n+  }\n+\n+\n+  def apiV0_queryDo(): Action[JsValue] = ApiSecretPostJsonAction(  // [PUB_API]\n+          // Just a few things only. [do_api_limits]\n+          RateLimits.UpsertFew, maxBytes = 2000) { request: JsonPostRequest =>\n+    queryDoImpl(request)\n+  }\n+\n+\n+  private def queryDoImpl(request: JsonPostRequest, doOnly: Bo = false,\n+        queryOnly: Bo = false): Result = {\n+    import request.{body, dao}\n+    val pretty = parseOptBo(body, \"pretty\")\n+    val mainField =\n+          if (doOnly) \"doActions\"\n+          else if (queryOnly) \"manyQueries\"\n+          else \"queriesAndActions\"\n+\n+    val taskJsValList: Seq[JsValue] = parseJsArray(body, mainField)\n+    var itemNr = -1\n+\n+    // [do_api_limits]\n+    throwForbiddenIf(taskJsValList.length > 5, \"TyEAPI2MNYTSKS\",\n+          \"Too many API tasks â€” at most 5, for now\")\n+\n+    val tasks: Seq[ApiTask] = taskJsValList map { jsVal =>\n+      itemNr += 1\n+      val jsOb = asJsObject(jsVal, s\"$mainField list item\")\n+      val doWhatSt = parseOptSt(jsOb, \"doWhat\")\n+      val getQueryJsOb = parseOptJsObject(jsOb, \"getQuery\")\n+      val listQueryJsOb = parseOptJsObject(jsOb, \"listQuery\")\n+      val searchQueryJsOb = parseOptJsObject(jsOb, \"searchQuery\")\n+      // Any nested queries or actions? (E.g. for fine grained transaction control.)\n+      val nestedQueries: Opt[JsArray] = parseOptJsArray(jsVal, \"manyQueries\")\n+      val nestedActions: Opt[JsArray] = parseOptJsArray(jsVal, \"doActions\")\n+\n+      val anyQueryDefined =\n+            getQueryJsOb.isDefined || listQueryJsOb.isDefined ||\n+            searchQueryJsOb.isDefined || nestedQueries.isDefined\n+\n+      val anyActionDefined =\n+            doWhatSt.isDefined || nestedActions.isDefined\n+\n+      val anyNestedQueriesActions  =\n+            nestedQueries.isDefined || nestedActions.isDefined\n+\n+      throwForbiddenIf(doOnly && anyQueryDefined,\n+            \"TyEWRONGENDP1\", o\"\"\"Cannot run queries via the Do API /-/v0/do.\n+               Use  /-/v0/query  or  /-/v0/query-do  instead\"\"\")\n+\n+      throwForbiddenIf(queryOnly && anyActionDefined,\n+            \"TyEWRONGENDP2\", o\"\"\"Cannot do actions via the Query API /-/v0/query.\n+               Use  /-/v0/do  or  /-/v0/query-do  instead\"\"\")\n+\n+      throwUnimplementedIf(anyQueryDefined,\n+            \"TyEQUERYUNIMPL\", \"Not implemented:  /-/v0/query  and  /-/v0/query-do\")\n+\n+      throwUnimplementedIf(anyNestedQueriesActions,\n+            \"TyEQUERYUNIMPL2\", o\"\"\"Not implemented:  /-/v0/query-do\n+                  and nested queries or actions\"\"\")\n+\n+      def whatItem = s\"Item nr $itemNr in the $mainField list (zero indexed)\"\n+\n+      val queryOrAction = {\n+        if (doWhatSt.isDefined) {\n+          ActionParser(dao).parseAction(doWhatSt.get, jsOb) getOrIfBad { problem =>\n+            throwBadReq(\"TyEAPIACTN\", s\"$whatItem is a bad action: $problem\")\n+          }\n+        } /*\n+        else if (getQueryJsOb.isDefined) {\n+          parseGetQuery(jsOb)\n+        }\n+        else if (listQueryJsOb.isDefined) {\n+          parseLitQuery(jsOb)\n+        }\n+        else if (searchQueryJsOb.isDefined) {\n+          parseSearchQuery(jsOb)\n+        } */\n+        else {\n+          throwForbidden(\"TyEAPIUNKTASK\", o\"\"\"$whatItem has no doWhat, getQuery,\n+                listQuery, searchQuery, manyQueries or doActions field\"\"\")\n+        }\n+      }\n+\n+      queryOrAction\n+    }\n+\n+    val results = queryAndDo(tasks, dao, request.reqrId)\n+\n+    OkApiJson(Json.obj(\n+          \"results\" -> JsArray(results)))\n+  }\n+\n+\n+  private def queryAndDo(tasks: Seq[ApiTask], dao: SiteDao, reqerId: ReqrId)\n+          : Seq[JsObject] = {\n+    var itemNr = -1\n+    val actionDoer = ActionDoer(dao, reqerId)  // later: singleTransaction = true\n+    tasks map { task =>\n+      itemNr += 1\n+      task match {\n+        case a: ApiAction =>\n+          // Later:  actionDoer.startTransactionIfNotDone\n+          actionDoer.doAction(a) match {\n+            case p: Problem =>  // (message, siteId, adminInfo, debugInfo, anyException)\n+              // For now, just abort everything.\n+              throwBadReq(\"TyEAPIERR\", s\"Error doing ${a.doWhat.toString} action: ${\n+                    p.message}\")\n+            case Fine =>\n+              Json.obj(\"ok\" -> JsTrue)\n+          }\n+      }\n+    }\n+\n+    // Later:  actionDoer.tryCommitAnyTransaction\n+    //\n+    // Or is there any  using(ActionDoer) { ... }  that auto closes it?\n+  }\n+\n+}\n+\n+\n+"
    },
    {
      "sha": "0579fc187a05539ba4125b869892a650286f0b1f",
      "filename": "appsv/server/talkyard/server/api/package.scala",
      "status": "added",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/api/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/api/package.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -0,0 +1,63 @@\n+package talkyard.server\n+\n+import com.debiki.core._\n+\n+\n+package object api {\n+\n+\n+  sealed abstract class ApiTask\n+\n+  // Later:\n+  // trait ApiQuery\n+  // case class ApiGetQuery\n+  // case class ApiListQuery\n+  // case class ApiSearchQuery\n+\n+  case class ApiAction(\n+    asWho: Pat,\n+    doWhat: ActionType,\n+    doWhy: Opt[St],\n+    doHow: ActionParams,\n+    // later:\n+    // doWhen: ..\n+    // doIf: ..\n+  ) extends ApiTask\n+\n+\n+\n+  sealed abstract class ActionType\n+\n+  object ActionType {\n+    case object SetVote extends ActionType\n+    case object SetNotfLevel extends ActionType\n+\n+    def fromSt(st: St): Opt[ActionType] = Some(st match {\n+      case \"SetVote\" => SetVote\n+      case \"SetNotfLevel\" => SetNotfLevel\n+      case _ => return None\n+    })\n+  }\n+\n+\n+\n+  sealed abstract class ActionParams\n+\n+  case object NoActionParams extends ActionParams\n+\n+  case class SetVoteParams(\n+        whatVote: PostVoteType,\n+        howMany: i32,\n+        whatPage: PageRef,\n+        whatPostNr: PostNr,\n+        ) extends ActionParams\n+  {\n+    require(howMany == 0 || howMany == 1, \"TyE446MEP2\")\n+  }\n+\n+  case class SetNotfLevelParams(\n+        whatLevel: NotfLevel,\n+        whatPage: PageRef,\n+        ) extends ActionParams\n+\n+}"
    },
    {
      "sha": "4cae66e5b8957e4819f0869debe7fb43d165e9ce",
      "filename": "appsv/server/talkyard/server/emails/in/EmailsInController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/emails/in/EmailsInController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/emails/in/EmailsInController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/emails/in/EmailsInController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -154,7 +154,7 @@ class EmailsInController @Inject()(cc: ControllerComponents, edContext: EdContex\n     ParsedReplyEmail(\n            messageId = parseSt(email, \"MessageID\"),\n            dateText = parseSt(email, \"Date\"),\n-           mailboxHash = parseOptSt(email, \"MailboxHash\"),\n+           mailboxHash = parseOptSt(email, \"MailboxHash\").noneIfBlank,\n            sentToAddr = parseSt(email, \"To\"),\n            //sentToName: St,\n            //sentToHash: St,\n@@ -163,9 +163,9 @@ class EmailsInController @Inject()(cc: ControllerComponents, edContext: EdContex\n            //sentFromHash: St,\n            replyTo = parseSt(email, \"ReplyTo\"),\n            subject = parseSt(email, \"Subject\"),\n-           htmlBody = parseOptSt(email, \"HtmlBody\"),\n-           textBody = parseOptSt(email, \"TextBody\"),\n-           strippedReplyText = parseOptSt(email, \"StrippedTextReply\"),\n+           htmlBody = parseOptSt(email, \"HtmlBody\").noneIfBlank,\n+           textBody = parseOptSt(email, \"TextBody\").noneIfBlank,\n+           strippedReplyText = parseOptSt(email, \"StrippedTextReply\").noneIfBlank,\n            seemsLikeSpam = seemsLikeSpam,\n            spamScore = spamScore,\n            attachments = Nil,"
    },
    {
      "sha": "bda1bd2ca1694c5a996833fdb075e7dbd84712c9",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatchController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/sitepatch/SitePatchController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/appsv/server/talkyard/server/sitepatch/SitePatchController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv/server/talkyard/server/sitepatch/SitePatchController.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -193,7 +193,7 @@ class SitePatchController @Inject()(cc: ControllerComponents, edContext: EdConte\n     // Avoid PostgreSQL serialization errors. [one-db-writer]\n     globals.pauseAutoBackgorundRenderer3Seconds()\n \n-    val siteData = {\n+    val siteData: SitePatch = {\n         val siteDump = SitePatchParser(context).parseDumpJsonMaybeThrowBadRequest(\n           siteId = None, json, simpleFormat = false, isE2eTest = isTest)\n         throwBadRequestIf(siteDump.site.isEmpty, \"TyE305MHKR2\", \"No site meta included in dump\")"
    },
    {
      "sha": "cc6f1e33840061cda41241631308e3158cbad84a",
      "filename": "client/app-more/login/login-dialog.more.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-more/login/login-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-more/login/login-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/login/login-dialog.more.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -634,13 +634,12 @@ interface ExtIdpAuthnBtnProps {\n   authnNonce;\n   content;\n   iconClass;\n+  key?;\n }\n \n \n-const ExtIdpAuthnBtn = createClassAndFactory({\n-  displayName: 'ExtIdpAuthnButton',\n-  onClick: function() {\n-    const props: ExtIdpAuthnBtnProps = this.props;\n+function ExtIdpAuthnBtn(props: ExtIdpAuthnBtnProps) {\n+  function onClick() {\n     const providerLowercase = props.provider.toLowerCase();\n     // Any new user wouldn't be granted access to the admin page, so don't allow\n     // creation of  new users from here.\n@@ -719,14 +718,12 @@ const ExtIdpAuthnBtn = createClassAndFactory({\n     else {\n       d.i.createLoginPopup(url);\n     }\n-  },\n-  render: function() {\n-    const props: ExtIdpAuthnBtnProps = this.props;\n-    return (\n-      Button({ id: props.id, className: props.iconClass, onClick: this.onClick },\n-        props.content || props.provider));\n   }\n-});\n+\n+  return (\n+    Button({ id: props.id, className: props.iconClass, key: props.key, onClick },\n+      props.content || props.provider));\n+}\n \n \n "
    },
    {
      "sha": "9bb035564b08692abf4831083e040ef0ed09fc3a",
      "filename": "client/app-slim/ReactActions.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/ReactActions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/ReactActions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/ReactActions.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -78,11 +78,12 @@ export function loadMyself(afterwardsCallback?: () => Vo) {\n   // tab, and we don't want to break it by deleting cookies. Instead login temp cookies are\n   // deleted by the server.)\n \n-  Server.loadMyself((user) => {\n+  Server.loadMyself((anyMe: Me | NU) => {\n     // @ifdef DEBUG\n     // Might happen if there was no weakSessionId, and also, no cookie.\n-    dieIf(!user, 'TyE4032SMH57');\n+    dieIf(!anyMe, 'TyE4032SMH57');\n     // @endif\n+    const newMe = anyMe as Me;\n     if (isInSomeEmbCommentsIframe()) {\n       // Tell the embedded comments or embedded editor iframe that we just logged in,\n       // also include the session id, so Talkyard's script on the embedding page\n@@ -100,21 +101,21 @@ export function loadMyself(afterwardsCallback?: () => Vo) {\n               // when we didn't need to do that, to log in.\n               typs.sessType !== SessionType.AutoTokenSiteCustomSso;\n       if (mainWin !== window) {\n-        mainWin.theStore.me = _.cloneDeep(user);\n+        mainWin.theStore.me = _.cloneDeep(newMe);\n       }\n       sendToOtherIframes([\n-        'justLoggedIn', { user, weakSessionId, pubSiteId: eds.pubSiteId,  // [JLGDIN]\n+        'justLoggedIn', { user: newMe, weakSessionId, pubSiteId: eds.pubSiteId,  // [JLGDIN]\n               sessionType: null, rememberEmbSess }]);\n     }\n-    setNewMe(user);\n+    setNewMe(newMe);\n     if (afterwardsCallback) {\n       afterwardsCallback();\n     }\n   });\n }\n \n \n-export function setNewMe(user) {\n+export function setNewMe(user: Me | NU) {\n   // @ifdef DEBUG\n   dieIf(!user, `setNewMe(nothing) TyE60MRJ46RS`);\n   // @endif\n@@ -913,6 +914,7 @@ export function showSingleTipsClientSide(messageId: string) {\n export function showTipsAgain(ps: { onlyAnnouncements?: Bo } = {}) {\n   const me: Me = ReactStore.me();\n   if (me.isAuthenticated) {\n+    // No need to wait until the server is done, not so important?  [e2e_tips_race]\n     Server.toggleTips({ ...ps, hide: false });\n   }\n   ReactDispatcher.handleViewAction({"
    },
    {
      "sha": "5372828b4962897288e07053670b70f95ec3f204",
      "filename": "client/app-slim/ReactStore.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/ReactStore.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/ReactStore.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/ReactStore.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -571,7 +571,7 @@ ReactStore.activateVolatileData = function() {\n };\n \n \n-ReactStore.activateMyself = function(anyNewMe: Myself) {\n+ReactStore.activateMyself = function(anyNewMe: Myself | NU) {\n   // [redux] Modifying state in-place, shouldn't do? But works fine.\n \n   store.userSpecificDataAdded = true;"
    },
    {
      "sha": "81244111db146a3cb3d3501681f6a7564dcc1ee3",
      "filename": "client/app-slim/Server.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/Server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/Server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/Server.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -1421,7 +1421,7 @@ export function savePageNotfPrefUpdStoreIfSelf(memberId: UserId, target: PageNot\n }\n \n \n-export function loadMyself(callback: (user: any) => void) {\n+export function loadMyself(callback: (me: Me | NU) => void) {\n   // @ifdef DEBUG\n   const mainWin = getMainWin();\n   const typs: PageSession = mainWin.typs;\n@@ -1453,7 +1453,9 @@ export function loadMyself(callback: (user: any) => void) {\n     }\n   }\n   // SHOULD incl sort order & topic filter in the url params. [2KBLJ80]\n-  get(`/-/load-my-page-data?pageIds=${pageIds}`, callback);\n+  get(`/-/load-my-page-data?pageIds=${pageIds}`, function (resp: { me?: Me }) {\n+    callback(resp.me);\n+  });\n }\n \n "
    },
    {
      "sha": "f8b52d0001125c6066e7d08195cc2f96d1aa2f13",
      "filename": "client/app-slim/help/help.styl",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/help/help.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/help/help.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/help/help.styl?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -95,6 +95,8 @@\n .c_SrvAnns .dw-help\n   margin: 15px auto 25px;\n   background-color: $orangeTipsBackground;\n+  &.c_Help-Nice\n+    background-color: $greenTipsBackground;\n   box-shadow: 5px 5px 11px rgb(0 0 0 / 50%);\n   color: black;\n "
    },
    {
      "sha": "b57cc3c224e9d84c3b26e9606a2e04b3d68a3870",
      "filename": "client/app-slim/help/help.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/help/help.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/help/help.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/help/help.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -125,9 +125,12 @@ export const HelpMessageBox = createComponent({   // RENAME to TipsBox\n     const className = props.className || message.className || '';\n     const largeClass = props.large ? ' dwHelp-large' : '';\n     const warningClass = message.isWarning ? ' esHelp-warning' : '';\n-    const classes = className + ' dw-help' + largeClass + warningClass;\n+    const niceClass = message.isNice ? ' c_Help-Nice' : '';\n+\n+\n+    const classes = className + ' dw-help' + largeClass + warningClass + niceClass;\n     return (\n-      r.div({ className: classes },\n+      r.div({ className: classes, key: props.key },\n         r.div({ className: 'dw-help-text' },\n           message.content),\n         okayButton));"
    },
    {
      "sha": "2ca014d6c3381562f32d3e70659dff9e7042b019",
      "filename": "client/app-slim/help/serverAnnouncements.ts",
      "status": "modified",
      "additions": 40,
      "deletions": 3,
      "changes": 43,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/help/serverAnnouncements.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/help/serverAnnouncements.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/help/serverAnnouncements.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -42,13 +42,47 @@ export function getServerAnnouncements(store: Store): RElm | Nl {\n   const me: Myself = store.me;\n   if (!me.isAdmin) return null;\n \n+  // ----- Dynamic notices\n+\n+  // Depends on features enabled / in use at this particular site).\n+\n+  const adminNotices: RElm[] = (me.adminNotices || []).map((notice: Notice) => {\n+    let text: St | RElm = 'TyE02MREG56';\n+    switch (notice.id) {\n+      case Notices.TwitterLoginConfigured:\n+        const anyoneUsesTwitterLogin =\n+                _.some(me.adminNotices, n => n.id === Notices.TwitterLoginInUse);\n+        text = r.p({},\n+              r.b({ className: 'e_TwLgI-Conf' }, \"Twitter login willl stop working. \"),\n+              \"Twitter login is enabled in this forum\" + (\n+              anyoneUsesTwitterLogin ? '.' : \" â€” but it seems no one uses it.\"));\n+        break;\n+      case Notices.TwitterLoginInUse:\n+        text = r.p({},\n+              r.b({ className: 'e_TwLgI-InUse' }, \"Twitter login in use\"),\n+              \" â€” but will stop working.\");\n+        break;\n+      default:\n+    }\n+    // @ifdef DEBUG\n+    dieIf(!text, 'TyE60WEJf372');\n+    // @endif\n+    return help.HelpMessageBox({ key: notice.id, message: {\n+        // SAn = Server Announcement, NtcX = Notice X.\n+        id: `SAn_Ntc${notice.id}`, version: 1, isWarning: true,\n+        content: rFr({}, text, ThisShownToAdminsOnly()),\n+    } });\n+  });\n+\n+  // ----- New version announcements\n+\n   let newTyVersionAnn: RElm =\n       help.HelpMessageBox({ message: {\n           // SAn = Server Announcement, TyV = Talkyard new Version announcement nr 1.\n-          id: 'SAn_TyV2', version: 2,\n+          id: 'SAn_TyV2', version: 2, isNice: true,\n           content: rFr({},\n             r.p({},\n-              r.b({}, `New Talkyard version: ${TalkyardVersion}, `),\n+              r.b({ className: 'e_LstTyV'}, `New Talkyard version: ${TalkyardVersion}, `),\n               \"read more here: \",\n               ExtVerbLink(\n                   'https://www.talkyard.io/-596/talkyard-v0202123')),\n@@ -57,7 +91,7 @@ export function getServerAnnouncements(store: Store): RElm | Nl {\n \n   let prevTyVersionAnn: RElm | U;\n       help.HelpMessageBox({ message: {\n-          id: 'SAn_TyV1', version: 1,\n+          id: 'SAn_TyV1', version: 1, // old announcement, skip isNice\n           content: rFr({},\n             r.p({},\n               r.b({}, `New Talkyard version: v0.2021.22, `),\n@@ -68,6 +102,8 @@ export function getServerAnnouncements(store: Store): RElm | Nl {\n       } });\n \n \n+  // ----- Other announcements\n+\n   // Announcement about HTTPS certificates renewal problem.\n   // Only for admins for self hosted sites, created after revision 895b7aa6e2\n   // \"Code review: Auto https ...\", Mars 20, 2021, in talkyard-prod-one.\n@@ -106,6 +142,7 @@ export function getServerAnnouncements(store: Store): RElm | Nl {\n \n   return (\n     r.div({ className: 'c_SrvAnns' },\n+      rFr({}, adminNotices),\n       e2eTestAnn,\n       certBugAnn,\n       newTyVersionAnn,"
    },
    {
      "sha": "559a25daa184e4e14c03acf4e093e90517badbdd",
      "filename": "client/app-slim/model.ts",
      "status": "modified",
      "additions": 19,
      "deletions": 1,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/model.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/model.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/model.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -506,6 +506,12 @@ interface Myself extends OwnPageNotfPrefs {   // RENAME to Me\n   thereAreMoreUnseenNotfs: boolean;\n   notifications: Notification[];\n \n+  // \"Notice\" means info / a warning of something, especially to allow\n+  // preparations to be made. \"Notification\" though, is getting info about\n+  // something, need not be so important.\n+  // Currently only to admins.\n+  adminNotices?: Notice[];\n+\n   snoozeUntilMins?: WhenMins | false;\n \n   watchbarTopics?: WatchbarTopics;\n@@ -543,7 +549,7 @@ interface Myself extends OwnPageNotfPrefs {   // RENAME to Me\n \n \n type MyselfPatch = Partial<Myself>;\n-\n+type MePatch = MyselfPatch;  // renaming all 'Myself' to 'Me'\n \n interface GroupPerms {\n   maxUploadBytes?: Nr;\n@@ -621,6 +627,16 @@ interface Notification {\n }\n \n \n+interface Notice {\n+  id: NoticeId;\n+  toPatId: 19;  // always to admins, group 19, currently\n+  firstAtMins: WhenMins;\n+  lastAtMins: WhenMins,\n+  numTotal: Nr,\n+  noticeData?: Object,\n+}\n+\n+\n interface ReadingProgress {\n   lastViewedPostNr: number;\n }\n@@ -635,6 +651,7 @@ interface HelpMessage {\n   doAfter?: () => void;\n   type?: number;\n   className?: string;\n+  isNice?: Bo;\n   isWarning?: boolean;\n   alwaysShow?: boolean;\n   moreHelpAwaits?: boolean;\n@@ -1949,6 +1966,7 @@ interface ExplainingListItemProps extends ExplainingTitleText {\n \n \n interface TipsBoxProps {\n+  key?: St | Nr;\n   message: HelpMessage;\n   alwaysShow?: Bo;\n   showUnhideTips?: Bo;"
    },
    {
      "sha": "a18ab312360807dcdabfa3bad92f8cd0668c1f5b",
      "filename": "client/app-slim/page/metabar.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/page/metabar.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/page/metabar.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/metabar.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -92,11 +92,14 @@ export var Metabar = createComponent({\n     const me: Myself = store.me;\n     const isBlogComments = page.pageRole === PageRole.EmbeddedComments;\n \n-    const notfLevelElem = !me.isAuthenticated || ui.showDetails ? null :\n-      r.span({ className: 'dw-page-notf-level', onClick: this.onToggleDetailsClick },\n-          t.Notifications + ': ' +\n-            notfPref_title(\n-              pageNotfPrefTarget_findEffPref({ pageId: page.pageId }, store, me)));\n+    let notfLevelElem: RElm | Nl = null;\n+    if (me.isAuthenticated && !ui.showDetails) {\n+      const effPref = pageNotfPrefTarget_findEffPref({ pageId: page.pageId }, store, me);\n+      const level = notfPref_level(effPref);\n+      notfLevelElem = r.span({ className: `dw-page-notf-level n_NfLv-${level}`,\n+              onClick: this.onToggleDetailsClick },\n+          t.Notifications + ': ' + notfPref_title(effPref));\n+    }\n \n     const toggleDetailsBtn = !me.isLoggedIn ? null :\n         r.button({ className: 'dw-cmts-tlbr-open', onClick: this.onToggleDetailsClick },"
    },
    {
      "sha": "f6b1c532dbc683d3255691106a93dd795d639237",
      "filename": "client/app-slim/variables.styl",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/variables.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/client/app-slim/variables.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/variables.styl?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -32,6 +32,8 @@ $yellowTipsBackground = hsl($yellowTipsHue 95% 87%);\n // Orange is mini warning.\n $orangeTipsHue = 35;\n $orangeTipsBackground = hsl($orangeTipsHue 90% 93%);\n+$greenTipsHue = 110;  // 120 is green\n+$greenTipsBackground = hsl($greenTipsHue 69% 95%);\n \n $heartAndErrorHue = 8; // red red orange red\n "
    },
    {
      "sha": "03681da03bf0a37832fcb708ee93fb3259f2a36a",
      "filename": "client/types-and-const-enums.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/client/types-and-const-enums.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/client/types-and-const-enums.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/types-and-const-enums.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -34,7 +34,11 @@\n type U = undefined;\n type Vo = void; // but not 'V' because that's sometimes a 'V'alue template param.\n type Nl = null; // but not 'Nu' because that could be \"Number\".\n-type Ay = any;  // but not 'An' because that sounds like 'an'.\n+type N = null;  // ... hmm I don't think so. One letter U and N for undef & null,\n+                // ... and 2 letters for \"real\" datatypes â€” easy to remember?\n+                // \"Nl\" is actually a bit hard to read! (the 'l')\n+type Ay = any;  // but not 'An' because that sounds like 'an'. Upd: Skip this. Use 'any',\n+                // should try to long term do away with all 'any' anyway.\n type Bo = boolean;\n type Nr = number;\n type St = string;\n@@ -51,6 +55,7 @@ type Z = 0 | false | '' | null | undefined | void;  // don't incl [] or {}\n // or can return a boolean. So, boolean or falsy:\n type BoZ = Bo | Z;\n \n+type NU  = null | undefined;\n type NUV = null | undefined | void;\n \n type StN = St | Nl;     // Many APIs return `string | null` e.g. HTMLElement.getAttribute.\n@@ -84,7 +89,8 @@ type PatName = St;\n type Username = St;\n type PeopleId = UserId;   // REMOVE\n type PermissionId = number;\n-type NotificationId = number;\n+type NotificationId = number;  // RENAME to NotfId\n+type NoticeId = Nr;\n type ReviewTaskId = number;\n type IdentityId = string;\n type IpAddress = string;\n@@ -510,6 +516,11 @@ const enum Groups {   // QUICK RENAME to Pats or PatIds?\n }\n \n \n+const enum Notices {\n+  TwitterLoginConfigured = 1001,\n+  TwitterLoginInUse = 1002,\n+}\n+\n const enum ContribAgreement {\n   CcBy3And4 = 10,\n   CcBySa3And4 = 40,"
    },
    {
      "sha": "5b5680016d03f91b820ed1ccf39b4550c5e02e54",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/conf/routes",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/conf/routes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf/routes?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -61,8 +61,8 @@ GET   /-/embedded-editor        controllers.EmbeddedTopicsController.showEmbedde\n \n GET   /-/search                 controllers.SearchController.showSearchPage(q: Option[String])\n POST  /-/search                 controllers.SearchController.doSearch\n-GET   /-/v0/search              controllers.SearchController.doSearchPubApiGet(freetext: Option[String], pretty: Option[Boolean])\n-POST  /-/v0/search              controllers.SearchController.doSearchPubApiPost\n+GET   /-/v0/search              controllers.SearchController.apiV0_search_get(freetext: Option[String], pretty: Option[Boolean])\n+POST  /-/v0/search              controllers.SearchController.apiV0_search_post\n \n GET   /-/reset-password                  controllers.ResetPasswordController.start\n GET   /-/reset-password/specify-email    controllers.ResetPasswordController.showResetPasswordPage\n@@ -314,6 +314,7 @@ GET  /-/are-scripts-ready       controllers.DebugTestController.areScriptsReady\n POST /-/delete-redis-key        controllers.DebugTestController.deleteRedisKey\n POST /-/skip-rate-limits        controllers.DebugTestController.skipRateLimitsForThisSite\n GET  /-/create-deadlock         controllers.DebugTestController.createDeadlock\n+POST /-/add-admin-notice        controllers.DebugTestController.addAdminNotice\n GET  /-/last-e2e-test-email     controllers.DebugTestController.showLastE2eTestEmailSent(siteId: Int, sentTo)\n GET  /-/num-e2e-test-emails-sent controllers.DebugTestController.numE2eTestEmailSent(siteId: Int)\n GET  /-/log-funny-messages      controllers.DebugTestController.logFunnyLogMessages()\n@@ -366,8 +367,12 @@ GET   /-/v0/login-with-secret   talkyard.server.authn.SsoAuthnController.apiv0_l\n GET   /-/v0/sso-login           talkyard.server.authn.SsoAuthnController.apiv0_loginWithSecret\n \n \n-POST  /-/v0/get                 talkyard.server.api.GetController.getThingsPubApi\n-POST  /-/v0/list                talkyard.server.api.ListController.listThingsPubApi\n+POST  /-/v0/get                 talkyard.server.api.GetController.apiV0_get\n+POST  /-/v0/list                talkyard.server.api.ListController.apiV0_list\n+# POST  /-/v0/search â€” see above\n+POST  /-/v0/query               talkyard.server.api.QueryDoController.apiV0_query\n+POST  /-/v0/do                  talkyard.server.api.QueryDoController.apiV0_do\n+POST  /-/v0/query-do            talkyard.server.api.QueryDoController.apiV0_queryDo\n \n GET   /-/v0/list-users          controllers.UserController.listMembersPubApi(usernamePrefix, usersOnly: Boolean = true)\n #ET   /-/v0/list-groups â€” only groups"
    },
    {
      "sha": "c6c6ca3e52dedd73d132cb75e74253d28c540433",
      "filename": "docs/e2e-tests-map.txt",
      "status": "modified",
      "additions": 34,
      "deletions": 20,
      "changes": 54,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/docs/e2e-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/docs/e2e-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-map.txt?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -941,6 +941,9 @@ site settings:\n tips,\n announcements:\n             - hide-unhide-tips.2br  TyTE2EHIDETPS329\n+notices,\n+announcements:\n+            - show-admin-notices.2br.e2e.ts  TyTE2EADMNTC\n \n \n intro tours:\n@@ -1301,40 +1304,43 @@ notf prefs inherited:\n \n email notifications:  (5ABKR024)\n   change between Always / Unread / Only from staff / No / Never:\n-          - TESTS_MISSING   TyTE2E693RTMPG\n+            - TESTS_MISSING   TyTE2E693RTMPG\n   to staff when new member waiting to get approved to join the site:\n-          - settings-approve-members.2browsers.test.ts  TyT2HUWX8.TyTE2E502AHL4\n+            - settings-approve-members.2browsers.test.ts  TyT2HUWX8.TyTE2E502AHL4\n   to new members when membership approved:\n-          - settings-approve-members.2browsers.test.ts  TyT2HUWX8.TyTE2E05WKF2\n+            - settings-approve-members.2browsers.test.ts  TyT2HUWX8.TyTE2E05WKF2\n   #no skip this?:\n   #to new members when their posts approved:  see (60MR2)\n-  #        - TESTS_MISSING  TyT4AKBJ20.TyTE2E062KR\n+  #         - TESTS_MISSING  TyT4AKBJ20.TyTE2E062KR\n   to staff about mod tasks:  (502M7)\n-          - new-member-allow-approve.2browsers.test.ts  TyT4AKBJ20\n-          - new-user-review-ok.2browsers.test.ts  TyT39657MRDT2\n+            - new-member-allow-approve.2browsers.test.ts  TyT4AKBJ20\n+            - new-user-review-ok.2browsers.test.ts  TyT39657MRDT2\n   watching everything:\n-          - email-notfs-discussion.2browsers.test.ts  TyT2AKBEF05\n+            - email-notfs-discussion.2browsers.test.ts  TyT2AKBEF05\n   new discourse reply:\n+            - do-api-like-and-subscribe.2br  TyTEAPILIKESUBS.TyTDISCRE08\n+            - search for waitUntilLastEmailMatches(), 100s of places\n   new direct message reply:\n-          - direct-messages-notfs.3browsers.test.ts  TyT602RKDL42\n+            - direct-messages-notfs.3browsers.test.ts  TyT602RKDL42\n     email notf link:\n-          - direct-messages-delete.2browsers.test.ts   TyT5033FKSNS57\n+            - direct-messages-delete.2browsers.test.ts   TyT5033FKSNS57\n   private chat messages:\n-          - private-chat.3browsers.test.ts  TyT2ABKR045\n+            - private-chat.3browsers.test.ts  TyT2ABKR045\n   mentions:\n-          - notf-emails-discussion.2browsers.test.ts   TyT4FKA2EQ02\n-          - promote-demote-by-staff-join-leave-chats.2br.test.ts  TyTE2E5H3GFRVK\n+            - notf-emails-discussion.2browsers.test.ts   TyT4FKA2EQ02\n+            - promote-demote-by-staff-join-leave-chats.2br.test.ts  TyTE2E5H3GFRVK\n+            - search for waitUntilLastEmailMatches(), 100s of places\n   watching:\n   not until after email verified:\n-          - unsubscribe.2browsers.test.ts  [TyT2ABKR04]\n-          - embedded-comments-create-site-import-disqus.2browsers.test.ts  TyT305RKTH4\n+            - unsubscribe.2browsers.test.ts  [TyT2ABKR04]\n+            - embedded-comments-create-site-import-disqus.2browsers.test.ts  TyT305RKTH4\n   new topics:\n-          - api-upsert-page-notfs.2browsers.test.ts  TyT502RKTLXM296\n-          - ... more, which?\n+            - api-upsert-page-notfs.2browsers.test.ts  TyT502RKTLXM296\n+            - ... more, which?\n   like votes:\n-          - notfs-like-votes.2browsers.test.ts  TyTE2E703KDH\n+            - notfs-like-votes.2browsers.test.ts  TyTE2E703KDH\n   unsubscribe:\n-          -  (7ABKR023)\n+            -  (7ABKR023)\n   cannot reply via email to email notifications:\n             - cannot-reply-via-email.2br  TyTE0REVIAEML\n \n@@ -1363,6 +1369,12 @@ api:\n             - embedded-comments-create-site-import-disqus.2br.test.ts  TyT5KFG0P75.TyT6703MRJ5\n   ext id, weird chars and loong id:\n           - api-upsert-categories.2browsers.test.ts  TyT602RHK42JF\n+  refs:\n+    userid:_, pageid:_,\n+    ssoid:_, tyid:_,\n+    extid:_ for users and pages,\n+    username:_, pagepath:_\n+            - do-api-like-and-subscribe.2br  TyTEAPILIKESUBS.TyTREFTYPES01\n   upsert categories:  (upscats)\n           - api-upsert-categories.2browsers.test.ts  TyT94DFKHQC24\n   upsert pages:\n@@ -1413,8 +1425,10 @@ api:\n   full text search:\n             - api-search-full-text.test.ts   TyT70ADNEFTD36\n   get api:\n-          - embcom.comment-counts.2br.cors.test.ts   TyTE2ECOMCOUNTS\n-          - embcom.manyframes.comment-counts.2br.cors  TyTE2EMNYFRCOMCNTS\n+            - embcom.comment-counts.2br.cors.test.ts   TyTE2ECOMCOUNTS\n+            - embcom.manyframes.comment-counts.2br.cors  TyTE2EMNYFRCOMCNTS\n+  do api:\n+            - do-api-like-and-subscribe.2br  TyTEAPILIKESUBS\n   atom feed:\n             - TESTS_MISSING\n   rss feed: No, there're only Atom feeds."
    },
    {
      "sha": "752844c0976316752eb7aa6b86a576f54f3b3b8e",
      "filename": "docs/naming-notes.md",
      "status": "modified",
      "additions": 21,
      "deletions": 3,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/docs/naming-notes.md",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/docs/naming-notes.md",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/naming-notes.md?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -49,7 +49,24 @@ However end-to-end helper tag classes should start with `e_...`\n See ./bem-blocks.txt for more details.\n \n \n-### Database tables, columns etc\n+### Database\n+\n+#### Custom domains\n+\n+Talkyard nowadays uses custom domain datatypes, for new columns and tables.\n+I've even defined custom domains for integers and floats: `i32_d`,\n+`i32_gz_d` (has a greather than zero check constraint). And\n+`f32_d` and `f64_d` instead of `real` and `double precision` (`f64` is shorter and\n+simpler to remember I think). Etc etc, type `\\dD` in psql to have a look\n+(start psql like so: `s/tyd cd` \"cd\" means Console, for the Database).\n+\n+Usually it makes sense to create a new custom domain, with a bunch of constraints,\n+and adding no constraints to the relevant table itself.\n+This makes the table definitions simpler to read, and there'll be no duplicated\n+constraints beteen different tables.\n+\n+\n+#### Database tables, columns etc\n \n Table names ends with `_t`, e.g. `links_t`.\n Column names end with `_c`, e.g. `site_id_c`.\n@@ -77,8 +94,9 @@ type `\\d tablename` in psql).\n  - Other indexes: `tablename_i_col1_col2_etc`.\n \n Don't include `site_id_c` in these names â€” the site id is always there, not interesting.\n-Instead, in the few cases where the site id is _not_ included, add `_g`,\n-for \"global\" index: `tablename_i_g_col1_col2` means `col1` and `col2` across all sites.\n+Instead, in the few cases where the site id is _not_ included, use `_ig_`,\n+for index, \"global\": `tablename_ig_col1_col2` means `col1` and `col2` across all sites.\n+Or, `tablename_ug_...` for a server wide unique index (don't think there is any).\n \n \n When adding a foreign key, always include a comment on the line above"
    },
    {
      "sha": "f1ff1a69c004cbf2ba113d1afbced5f08d85ed32",
      "filename": "node_modules",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/node_modules?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -1 +1 @@\n-Subproject commit f1ac9326c22b385eca1dc5505a835e8edc9cd997\n+Subproject commit f1ff1a69c004cbf2ba113d1afbced5f08d85ed32"
    },
    {
      "sha": "ce9387c44c54670d4d7478dc653966ac8033dc37",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans/tyse-v0-dev?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -1 +1 @@\n-Subproject commit 4b5b5cba2dc5831212efea4092cd150e7c782564\n+Subproject commit ce9387c44c54670d4d7478dc653966ac8033dc37"
    },
    {
      "sha": "5e63239c63388a6100e0b21064d09a27f5fa584e",
      "filename": "relchans/tyse-v0-regular",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans/tyse-v0-regular?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -1 +1 @@\n-Subproject commit 811e878f00917930d9914e00b2161dee8ab09409\n+Subproject commit 5e63239c63388a6100e0b21064d09a27f5fa584e"
    },
    {
      "sha": "5eddc29cd4e49c4c90e64f0a703111e1defdb145",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -311,6 +311,7 @@ function runAllE2eTests {\n   # Also:  embedded-comments-navigation-as-guest  further below.\n \n   $r s/wdio --only hide-unhide-tips.2br $args\n+  $r s/wdio-7 --only show-admin-notices.2br --cd -i $args\n \n   $r s/wdio-7 --only editor-toolbar-preview.1br --cd -i $args\n   $r s/wdio --only sanitize-posts.2browsers $args\n@@ -514,6 +515,8 @@ function runAllE2eTests {\n   $r s/wdio --only api-list-query-for-topics-recent-etc-first $args\n   $r s/wdio --only api-list-query-for-posts $args\n \n+  $r s/wdio-7 --only do-api-like-and-subscribe.2br --cd -i $args\n+\n   # wip:\n   # settings-allow-local-signup\n   # settings-allow-signup"
    },
    {
      "sha": "acc0147633c9a2d0695321ba78de899a81cc6045",
      "filename": "tests/app/debiki/dao/DaoAppSuite.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/app/debiki/dao/DaoAppSuite.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/app/debiki/dao/DaoAppSuite.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/debiki/dao/DaoAppSuite.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -40,6 +40,8 @@ object DaoAppSuite {\n     */\n   val OneAndZeros1157DaysInMillis = 100000000000L // divide by (24*3600*1000) â€”> 1157.4 days\n \n+  val Jan2020InMillis: i64 = 26300000 * MillisPerMinute  // = 1578000000 * 1000\n+  val Jan2020: When = When.fromMillis(Jan2020InMillis)\n }\n \n "
    },
    {
      "sha": "0327a7cf1118cc7d3ea16d8a5bdfd0c336dc5b3d",
      "filename": "tests/app/debiki/dao/MovePostsAppSpec.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/app/debiki/dao/MovePostsAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/app/debiki/dao/MovePostsAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/debiki/dao/MovePostsAppSpec.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -315,7 +315,7 @@ class MovePostsAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n \n       info(\"create post read stats, find on first page\")\n       dao.readWriteTransaction(_.updatePostsReadStats(\n-        thePageId, Set(postRead.nr, postToMove.nr), theModerator.id, ip))\n+        thePageId, Set(postRead.nr, postToMove.nr), theModerator.id, Some(ip)))\n \n       val fromPageReadStatsBefore = dao.readOnlyTransaction(_.loadPostsReadStats(thePageId))\n       fromPageReadStatsBefore.guestIpsByPostNr.get(postUnread.nr) mustBe None"
    },
    {
      "sha": "ca4e26db6aff4c2bedb4d11e5b8037ede7f75074",
      "filename": "tests/app/ed/server/dao/SiteTransactionAppSpec.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/app/ed/server/dao/SiteTransactionAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/app/ed/server/dao/SiteTransactionAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/ed/server/dao/SiteTransactionAppSpec.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -369,11 +369,11 @@ class SiteTransactionAppSpec extends DaoAppSuite {\n       \"load and save posts read stats, for members\" in {\n         dao.readWriteTransaction { transaction =>\n           transaction.updatePostsReadStats(pageAId, postNrsRead = Set(1), userA.id,\n-            readFromIp = \"1.2.3.4\")\n+            readFromIp = Some(\"1.2.3.4\"))\n           transaction.updatePostsReadStats(pageBId, postNrsRead = Set(1,2,3,5), userA.id,\n-            readFromIp = \"1.2.3.4\")\n+            readFromIp = Some(\"1.2.3.4\"))\n           transaction.updatePostsReadStats(pageBId, postNrsRead = Set(1,5), userB.id,\n-            readFromIp = \"1.2.3.4\")\n+            readFromIp = Some(\"1.2.3.4\"))\n \n           val pageAStats = transaction.loadPostsReadStats(pageAId)\n \n@@ -409,7 +409,7 @@ class SiteTransactionAppSpec extends DaoAppSuite {\n \n           info(\"Handles dupl inserts: post 5 already inserted\")\n           transaction.updatePostsReadStats(pageBId, postNrsRead = Set(5, 7), userB.id,\n-            readFromIp = \"1.2.3.4\")\n+            readFromIp = Some(\"1.2.3.4\"))\n           val pageBStats2 = transaction.loadPostsReadStats(pageBId)\n           pageBStats2.readCountFor(5) mustBe 2  // wasn't incremented to 3, because is same user\n           pageBStats2.readCountFor(6) mustBe 0\n@@ -428,7 +428,7 @@ class SiteTransactionAppSpec extends DaoAppSuite {\n       \"load and save posts read stats, for guests\" in {\n         dao.readWriteTransaction { transaction =>\n           transaction.updatePostsReadStats(pageAId, postNrsRead = Set(1,3), guestA.id,\n-            readFromIp = \"2.2.2.2\")\n+            readFromIp = Some(\"2.2.2.2\"))\n           val pageAStats = transaction.loadPostsReadStats(pageAId)\n           pageAStats.readCountFor(1) mustBe 2  // userA and guestA have read it\n           pageAStats.readCountFor(2) mustBe 0\n@@ -437,7 +437,7 @@ class SiteTransactionAppSpec extends DaoAppSuite {\n \n           info(\"Handles dupl guest inserts: post 3 already inserted\")\n           transaction.updatePostsReadStats(pageAId, postNrsRead = Set(3,4), guestA.id,\n-            readFromIp = \"2.2.2.2\")\n+            readFromIp = Some(\"2.2.2.2\"))\n           val pageAStats2 = transaction.loadPostsReadStats(pageAId)\n           pageAStats2.readCountFor(1) mustBe 2\n           pageAStats2.readCountFor(2) mustBe 0\n@@ -447,7 +447,7 @@ class SiteTransactionAppSpec extends DaoAppSuite {\n \n           info(\"But other guest can read that post\")\n           transaction.updatePostsReadStats(pageAId, postNrsRead = Set(3,5), guestB.id,\n-            readFromIp = \"3.3.3.3\")\n+            readFromIp = Some(\"3.3.3.3\"))\n           val pageAStats3 = transaction.loadPostsReadStats(pageAId)\n           pageAStats3.readCountFor(1) mustBe 2\n           pageAStats3.readCountFor(2) mustBe 0"
    },
    {
      "sha": "0bce7a6e863e0bda3054079055a1d96e5ae69c2c",
      "filename": "tests/app/ed/server/dao/SiteTxNoticesAppSpec.scala",
      "status": "added",
      "additions": 115,
      "deletions": 0,
      "changes": 115,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/app/ed/server/dao/SiteTxNoticesAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/app/ed/server/dao/SiteTxNoticesAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/ed/server/dao/SiteTxNoticesAppSpec.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (C) 2017 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package ed.server.dao\n+\n+import com.debiki.core._\n+import debiki._\n+import debiki.dao.{CreateForumResult, DaoAppSuite, SiteDao}\n+\n+\n+class SiteTxNoticesAppSpec extends DaoAppSuite(startTime = DaoAppSuite.Jan2020) {\n+\n+  private def mkNotice(siteId: SiteId, id: i32): Notice =\n+    Notice(\n+      siteId = siteId,\n+      toPatId = Group.AdminsId,\n+      noticeId = id,\n+      firstAt = DaoAppSuite.Jan2020.toWhenMins,\n+      lastAt = DaoAppSuite.Jan2020.toWhenMins,\n+      numTotal = 1,\n+      noticeData = None)\n+\n+  \"SiteTx can manage admin notices\" - {\n+      var daoSite1: SiteDao = null\n+      var admin: Participant = null\n+      var userA: Participant = null\n+\n+      var daoSite2: SiteDao = null\n+\n+      \"Prepare: Create sites and users\" in {\n+        globals.systemDao.getOrCreateFirstSite()\n+        daoSite1 = globals.siteDao(Site.FirstSiteId)\n+\n+        daoSite2 = createSite(\"other-site\")._2\n+\n+        admin = createPasswordOwner(s\"poc_adm\", daoSite1)\n+        userA = createPasswordUser(s\"poc_u_a\", daoSite1)\n+      }\n+\n+\n+      \"Find no admin notices when there are none\" in {\n+        daoSite1.readTx { tx =>\n+          val notices = tx.loadAdminNotices()\n+          notices.length mustBe 0\n+        }\n+      }\n+\n+\n+      \"Save admin notices\" in {\n+        daoSite1.addAdminNotice(Notice.TwitterLoginConfigured)\n+      }\n+\n+\n+      \"Now finds one notice\" in {\n+        daoSite1.readTx { tx =>\n+          val notices = tx.loadAdminNotices()\n+          notices.length mustBe 1\n+          notices mustBe Seq(\n+                mkNotice(siteId = daoSite1.siteId, Notice.TwitterLoginConfigured))\n+        }\n+      }\n+\n+      \"Saves another notice\" in {\n+        daoSite1.addAdminNotice(Notice.TwitterLoginUsed)\n+      }\n+\n+\n+      \"Now finds two notices\" in {\n+        daoSite1.readTx { tx =>\n+          val notices = tx.loadAdminNotices()\n+          notices.length mustBe 2\n+          notices mustBe Seq(\n+                mkNotice(siteId = daoSite1.siteId, Notice.TwitterLoginConfigured),\n+                mkNotice(siteId = daoSite1.siteId, Notice.TwitterLoginUsed))\n+        }\n+      }\n+\n+\n+      \"The other site still has not admin notices\" in {\n+        daoSite2.readTx { tx =>\n+          val notices = tx.loadAdminNotices()\n+          notices.length mustBe 0\n+        }\n+      }\n+\n+      \"The other site saves an admin notice\" in {\n+        daoSite2.addAdminNotice(Notice.TwitterLoginUsed)\n+      }\n+\n+      \"Now the other site finds one notice\" in {\n+        daoSite2.readTx { tx =>\n+          val notices = tx.loadAdminNotices()\n+          notices.length mustBe 1\n+          notices mustBe Seq(\n+                mkNotice(siteId = daoSite2.siteId,\n+                Notice.TwitterLoginUsed))\n+        }\n+      }\n+  }\n+\n+}"
    },
    {
      "sha": "1cf87b12e2e7f8c248a29d6202be22a0c0cf15a2",
      "filename": "tests/app/ed/server/notf/NotfsAppMentionsSpec.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/app/ed/server/notf/NotfsAppMentionsSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/app/ed/server/notf/NotfsAppMentionsSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/ed/server/notf/NotfsAppMentionsSpec.scala?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -113,7 +113,7 @@ class NotfsAppMentionsSpec extends DaoAppSuite(disableScripts = false) {\n       expectedTotalNumNotfs += 1\n \n       // The rest of the tests don't expect Owner to be notified about everything.\n-      dao.savePageNotfPref(\n+      dao.savePageNotfPrefIfAuZ(\n         PageNotfPref(owner.id, NotfLevel.Normal, pageId = Some(withRepliesTopicId)),\n         Who.System)\n \n@@ -123,7 +123,7 @@ class NotfsAppMentionsSpec extends DaoAppSuite(disableScripts = false) {\n         owner.id, browserIdData, dao, Some(categoryId))\n       dao.addUsersToPage(Set(owner.id), oldChatTopicId, byWho = ownerWho)\n       dao.addUsersToPage(Set(moderator.id), oldChatTopicId, byWho = ownerWho)\n-      dao.savePageNotfPref(\n+      dao.savePageNotfPrefIfAuZ(\n         PageNotfPref(owner.id, NotfLevel.Normal, pageId = Some(oldChatTopicId)),\n         Who.System)\n       chat(owner.id, oldChatTopicId, \"chat message 1\")(dao)\n@@ -133,23 +133,23 @@ class NotfsAppMentionsSpec extends DaoAppSuite(disableScripts = false) {\n       chatTopicOneId = createPage(PageType.OpenChat,\n         textAndHtmlMaker.testTitle(\"chatTopicId\"), textAndHtmlMaker.testBody(\"chatTopicId body\"),\n         owner.id, browserIdData, dao, Some(categoryId))\n-      dao.savePageNotfPref(\n+      dao.savePageNotfPrefIfAuZ(\n         PageNotfPref(owner.id, NotfLevel.Normal, pageId = Some(chatTopicOneId)),\n         Who.System)\n \n       chatTopicTwoId = createPage(PageType.OpenChat,\n         textAndHtmlMaker.testTitle(\"chatTopicTwoId\"),\n         textAndHtmlMaker.testBody(\"chatTopicTwoId purpose\"),\n         owner.id, browserIdData, dao, Some(categoryId))\n-      dao.savePageNotfPref(\n+      dao.savePageNotfPrefIfAuZ(\n         PageNotfPref(owner.id, NotfLevel.Normal, pageId = Some(chatTopicTwoId)),\n         Who.System)\n \n       chatTopicManyJoinedId = createPage(PageType.OpenChat,\n         textAndHtmlMaker.testTitle(\"chatTopicManyJoinedId\"),\n         textAndHtmlMaker.testBody(\"chatTopicManyJoinedId purpose\"),\n         owner.id, browserIdData, dao, Some(categoryId))\n-      dao.savePageNotfPref(\n+      dao.savePageNotfPrefIfAuZ(\n         PageNotfPref(owner.id, NotfLevel.Normal, pageId = Some(chatTopicManyJoinedId)),\n         Who.System)\n "
    },
    {
      "sha": "26752f609a7513ff567cd6a030cb01ed6d1d186a",
      "filename": "tests/e2e-wdio7/pub-api.ts",
      "status": "modified",
      "additions": 328,
      "deletions": 132,
      "changes": 460,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/pub-api.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/pub-api.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/pub-api.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -42,24 +42,42 @@ interface ListUsersApiResponse {\n // Misc types\n // -------------------------\n \n-interface MaybePrettyApiRequest {\n+interface ApiRequest {\n   pretty?: Bo;\n }\n \n+// An API request can include one or many things for the server to do â€” many tasks.\n+// For example, a SearchQueryApiRequest includes just a single SearchQueryApiTask,\n+// whilst a ManyQueriesApiRequest can include many SearchQueryApiTask:s.\n+interface ApiTask {}\n \n type ApiResponse<R> = ApiErrorResponse | R;\n \n interface ApiErrorResponse {\n   error: ResponseError;\n }\n \n-interface ResponseError extends ErrCodeMsg {\n+interface ResponseError extends Partial<ErrCodeMsg> {\n   httpStatusCode?: Nr;\n }\n \n interface ErrCodeMsg {\n-  errCode?: St;\n-  errMsg?: St;\n+  errCode: St;\n+  errMsg: St;\n+}\n+\n+\n+interface ManyResults {\n+  results: (OkResult | ErrorResult | ManyResults)[];\n+}\n+\n+\n+interface OkResult {\n+  ok: true;\n+}\n+\n+interface ErrorResult {\n+  error: ErrCodeMsg;\n }\n \n \n@@ -329,11 +347,12 @@ interface CategoryFound {\n // lookWhere: category-ids, to find recent posts in those categories.\n //\n \n-interface GetQueryApiRequest extends MaybePrettyApiRequest {\n-  getQuery: GetPagesQuery | GetPatsQuery;\n-  pretty?: Bo;\n+interface GetQueryApiRequest extends ApiRequest, GetQueryApiTask {\n }\n \n+interface GetQueryApiTask extends ApiTask {\n+  getQuery: GetPagesQuery | GetPatsQuery;\n+}\n \n interface GetQuery {\n   getWhat: FindWhat;\n@@ -445,15 +464,17 @@ interface GetQueryResults<T extends ThingFound> {\n // The index might be on table B, although you're finding things in table A.\n // E.g. you might list the most recent topics in a category.\n //\n-interface ListQueryApiRequest {\n-  // Either:\n-  listQuery?: ListQuery;\n+interface ListQueryApiRequest extends ApiRequest, ListQueryApiTask {\n+}\n \n-  // Or:\n-  continueAtScrollCursor?: ListResultsScrollCursor;\n+interface ListQueryApiTask extends ApiTask {\n+  listQuery: ListQuery;\n+  limit?: Nr;\n+}\n \n+interface ContinueListQueryApiRequest extends ApiRequest {\n+  continueAtScrollCursor?: ListResultsScrollCursor;\n   limit?: Nr;\n-  pretty?: Bo;\n }\n \n interface ListQuery {\n@@ -622,24 +643,29 @@ type ListResultsScrollCursor = Unimplemented;\n // that is, ElasticSearch (currently), not PostgreSQL.\n //\n \n-interface SearchQueryApiRequest {\n-  // Either:\n-  searchQuery?: SearchQuery2;\n-\n-  // Or:\n-  continueAtScrollCursor?: SearchResultsScrollCursor;\n+interface SearchQueryApiRequest extends ApiRequest, SearchQueryApiTask {\n+}\n \n+interface SearchQueryApiTask extends ApiTask {\n+  searchQuery: SearchQuery_;\n   limit?: number;\n-  pretty?: boolean;\n }\n \n-type SearchQuery2 = SinglSearchQuery | CompoundSearchQuery;\n+interface ContinueSearchQueryApiRequest extends ApiRequest {\n+  continueAtScrollCursor?: SearchResultsScrollCursor;\n+  limit?: Nr;\n+}\n+\n+\n+type SearchQuery_ = SinglSearchQuery | CompoundSearchQuery;\n \n // Not implemented.\n type CompoundSearchQuery =\n-  // All must match.\n+  // 'And' match â€” all must match.\n+  // (For 'or' match, instead, send many SearchQueryRequest:s.)\n   SinglSearchQuery[];\n \n+\n interface SinglSearchQuery {\n   // \"Freetext\" refers to free-form text, meaning, unstructured text:\n   // The user can type anything. And the server interprets the meaning as best\n@@ -650,6 +676,7 @@ interface SinglSearchQuery {\n   lookWhere?: LookWhere;\n };\n \n+\n type SearchQueryApiResponse<T extends ThingFound> = ApiResponse<SearchQueryResults<T>>;\n \n interface SearchQueryResults<T extends ThingFound> {\n@@ -747,148 +774,317 @@ type SearchResultsScrollCursor = Unimplemented;\n //\n \n \n-\n-// A Do Command request   [ACTNPATCH]\n+// A Query API request\n // -------------------------\n //\n-//  /-/v0/batch-do  {\n-//    batchDo: {\n-//      inOneTx: t/f\n-//      actionList: [\n-//        doAction: {\n-//          asWho: 'tyid:_' | 'extid:_' | 'ssoid:_' | 'username:_',\n-//          doWhat: 'SetVote'\n-//          whatVote: 'Like',\n-//          whichPost: { postId: _ } | { pageId: _, postNr: 1 },\n-//          howMany: 1 | 0,\n-//          // Future compat w assigning many Do-It votes\n-//          // per person to a single feature request.\n-//        },\n-//        doAction: {\n-//          asWho: _\n-//          doWhat: 'SetNotfLevel',\n-//          toLevel: 'EveryPost',\n-//          whichPage: { pageId: _ },\n+//  POST /-/v0/query  {\n+//    manyQueries: [{\n+//      getQuery: {\n+//        getWhat: 'Pages',\n+//        getRefs: [\n+//          'emburl:https://blog/a-blog-post':\n+//          'emburl:https://blog/another',\n+//          'emburl:https://blog/a-third',\n+//        ],\n+//        inclFields: {\n+//          numRepliesVisible: true,\n+//          numOrigPostLikeVotes: true,\n //        },\n-//      ],\n-//    }\n+//      }\n+//    }, {\n+//      listQuery: {\n+//        listWhat: 'Members',\n+//        exactPrefix: 'jane_d',\n+//        lookWhere: { usernames: true },\n+//      }\n+//    }, {\n+//      listQuery: {\n+//        listWhat: 'Pages',\n+//        lookWhere: { inCategories: [catB, catC] },\n+//      }\n+//    }, {\n+//      searchQuery: {\n+//        ...\n+//      }\n+//    }, {\n+//      // Nested query list â€” to run in single transaction.\n+//      inSingleTransaction: true,\n+//      manyQueries: [...]\n+//    }, {\n+//      ...\n+//    }]\n //  }\n \n+interface QueryApiRequest extends ApiRequest, ManyQueriesApiTask {\n+}\n+\n+interface ManyQueriesApiTask extends ApiTask {\n+  inSingleTransaction?: Bo;\n+  manyQueries: (QueryApiTask | ManyQueriesApiTask)[];\n \n+  // Optional default for each QueryRequest.\n+  // sortOrder?\n+  // perQueryLimit?\n+  // totalLimit?\n+  // limit?: number; â€” for what?\n+}\n \n-// An  Upsert  request  ?\n+type QueryApiTask = GetQueryApiTask | ListQueryApiTask | SearchQueryApiTask;\n+\n+\n+\n+\n+// A Do API request   [ACTNPATCH]\n // -------------------------\n \n-//\n-//\n-/*\n-interface UpsertApiRequest extends MaybePrettyApiRequest {\n-  upsertCmd: UpsertCommand;\n-  pretty?: Bo;\n+interface DoApiRequest extends ApiRequest, DoActionsApiTask {\n }\n \n+interface DoActionsApiTask extends ApiTask {\n+  //inSingleTransaction: true;  // later: optional\n+  doActions: (Action | ActionGraph | DoActionsApiTask)[];\n \n-interface UpsertCommand {\n-  upsertWhat: FindWhat;\n+  // Maybe in the distant future: (could also be inside each Action)\n+  // doWhen: 'now' | 'YYYY-MM-DDTHH:MI:SSZ'\n+  // doIf: hmm\n }\n \n+type DoActionsApiResponse = ApiResponse<ManyResults>;\n+\n+type ActionGraph = Unimplemented;\n \n-interface UpsertPatsCommand extends UpsertCommand {\n-  upsertWhat: 'Pats';\n-  upsertThings: PatToUpsert[];\n+interface Action {\n+  asWho: St; // 'sysbot' | 'tyid:_' | 'extid:_' | 'ssoid:_' | 'username:_';\n+  doWhat: ActionType,\n+  //doWhen?: 'YYYY-MM-DDTHH:MI:SSZ';\n+  //doIf?;\n+  doWhy?: St; // optional description for the audit log\n+  doHow: Object;  // per action type parameters\n }\n \n+type ActionType =\n+  'CreateReplyPost' |\n+  'CreateMetaPost' |\n+  'SetVote' |\n+  'SetNotfLevel';\n+  // Distant future:\n+  // 'CreateWorkfow' with  doHow: { workflowSteps: ActionGraph }  // directed, asyclic?\n+  //   returns a workflow id\n+  // 'DeleteWorkfow'\n+  // 'RunWorkfowNow'\n+  // 'CreateWorkfowTrigger' with doHow: { runWorkflow: _ runIf: __ runWhen: __ }\n+  // 'DeleteWorkfowTrigger'\n+  // A workflow step could be a RunScriptAction for example.\n+\n+\n+interface SetVoteAction extends Action {\n+  doWhat: 'SetVote';\n+  doHow: {\n+    whatVote: 'Like';\n+    whatPost: { pageId: St, postNr: 1 };  // { postId: _ } | { pageId: _, postNr: _ },\n+    howMany: 0 | 1;\n+  }\n+}\n \n-interface PatToUpsert {\n-  key: St;\n-  username?: St;\n-  fullName?: St;\n-  primaryEmailAddr?: St;\n-  primaryEmailAddrVerified?: Bo;\n+interface SetNotfLevelAction extends Action {\n+  doWhat: 'SetNotfLevel';\n+  doHow: {\n+    toLevel: Nr;\n+    whatPages: ({ pageId: St } | { inCategoryId: CatId })[];\n+  }\n }\n \n+interface CreateReplyPostAction extends Action {\n+  doWhat: 'CreateReplyPost';\n+  doHow: {\n+    replyTo: { pageId: PageId, postNr?: PostNr } | { postId: PostId };\n+    body: St;\n+    bodyFormat: 'CommonMark';\n+  }\n+}\n \n-type UpsertApiResponse<T extends ThingFound> = ApiResponse<GetQueryResults<T>>;\n+interface CreateMetaPostAction extends Action {\n+  doWhat: 'CreateMetaPost';\n+  doHow: {\n+    appendTo: { pageId: PageId };\n+    body: St;\n+    bodyFormat: 'CommonMark';\n+  }\n+}\n \n-interface UpsertCommandResults<T extends ThingFound> {\n-  origin: St;\n \n-  // One item for each upsertThings[] item, in the same order.\n-  thingsOrErrs: (T | ErrCodeMsg | null)[];\n-}\n-*/\n+\n+// Example Do API request:\n+//\n+//  /-/v0/do  {\n+//    doActions: [{\n+//      asWho: 'sysbot' | 'tyid:_' | 'extid:_' | 'ssoid:_' | 'username:_',\n+//      doWhat: 'SetVote'\n+//      doHow: {\n+//        whatVote: 'Like',\n+//        whatPost: { postId: _ } | { pageId: _, postNr: 1 },\n+//        howMany: 1 | 0,\n+//        // Future compat w assigning many Do-It votes\n+//        // per person to a single feature request.\n+//      },\n+//    }, {\n+//      asWho: _\n+//      doWhat: 'SetNotfLevel',\n+//      doHow: {\n+//        whatLevel: 'EveryPost',\n+//        whatPage: { pageId: _ },\n+//      }\n+//    }, {\n+//      asWho: 'ssoid:some-user-id',\n+//      doWhat: 'CreateMetaPost',\n+//      doHow: {\n+//        body: _,\n+//        bodyFormat: 'CommonMark',\n+//        appendTo: { pageId: _ },\n+//      }\n+//    }, {\n+//      asWho: 'ssoid:some-user-id',\n+//      doWhat: 'CreateReplyPost',\n+//      doHow: {\n+//        body: _,\n+//        bodyFormat: 'CommonMark',\n+//        replyTo: { pageId: _, postNr: _ },\n+//      }\n+//    }, {\n+//      asWho: _\n+//      doWhat: 'CreatePage',\n+//      doHow: {\n+//        pageTitle: _,\n+//        pageBody: _,\n+//        inCategory: CatRef,\n+//        withTags: TagRef[];\n+//      }\n+//    }, {\n+//      asWho: 'sysbot',\n+//      doWhat: 'CreateUser',\n+//      doHow: {\n+//        username: _,\n+//        fullName: _,\n+//        primaryEmailAddr?: St;\n+//        primaryEmailAddrVerified?: Bo;\n+//        addToGroups: _  // or  doWhat: 'AddUserToGroup'  below, instead?\n+//      }\n+//    }, {\n+//      asWho: 'sysbot',\n+//      doWhat: 'AddUserToGroup',\n+//      doHow: {\n+//        whichUser: _,  // reference user above\n+//        whichGroup: _,\n+//      }\n+//    }, {\n+//      // Nested â€” e.g. to run in single transaction. Not implemented (maybe never).\n+//      inSingleTransaction: true;\n+//      doActions: [{ ... }, { ... }, { ... }],\n+//    }],\n+//  }\n+//\n+//\n+// Response is ManyResults:\n+//\n+//  {\n+//    results: [{\n+//      ok: true,   // if 'SetVote' went fine\n+//    }, {\n+//      ok: true,   // if 'SetNotfLevel' went fine\n+//    }, {\n+//      error: {    // if 'CreateMetaPost' failed\n+//        errCode: _,\n+//        errMsg: _,\n+//      }\n+//    }, {\n+//    ...\n+//    }, {\n+//      ok: true,   // user created\n+//    }, {\n+//      ok: true,   // user added to group\n+//    }, {\n+//      results: [{ ... }, { ... }, { ... }]  // nested doActions results\n+//    }],\n+//  }\n+//\n+//\n+//  Distant future, custom scripts:\n+//\n+//  /-/v0/do  {\n+//    doActions: [{\n+//      asWho: 'sysbot' | 'tyid:_' | 'extid:_' | 'ssoid:_' | 'username:_',\n+//      doWhat: 'custom-action:unique-name',  // hmm\n+//      doHow: {\n+//        whatVote: 'Like',\n+//        whatPost: { postId: _ } | { pageId: _, postNr: 1 },\n+//        howMany: 1 | 0,\n+//        // Future compat w assigning many Do-It votes\n+//        // per person to a single feature request.\n+//      },\n+//    }, {\n \n \n \n-// Batch search/list/get requests?\n+// A Query-Do API request\n // -------------------------\n \n-// Should Not implement this, unless clearly needed.\n-// Still, good to think about in advance, so as not to paint oneself into a corner?\n-//\n-//   /-/v0/batch-query {\n-//     batchQuery: {\n-//       // Maybe sth like:\n-//       //perQueryLimit: NN,\n-//       //this: mergeResultsHow:  ... ?? ..,\n-//       //or?: perQuerySortOrder:\n-//       //     totalSortOrder:\n-//\n-//       queryList: [\n-//         getQuery: {\n-//           getWhat: 'Pages',\n-//           getRefs: [\n-//             'emburl:https://blog/a-blog-post':\n-//             'emburl:https://blog/another',\n-//             'emburl:https://blog/a-third',\n-//           ],\n-//           inclFields: {\n-//             numRepliesVisible: true,\n-//             numOrigPostLikeVotes: true,\n-//           },\n-//         },\n-//\n-//         getQuery: {\n-//           getWhat: 'Pages',\n-//           getRefs: [ ... ],\n-//           inclFields: {\n-//             someOtherField: true,\n-//           },\n-//         },\n-//\n-//         listQuery: {\n-//           listWhat: 'Members',\n-//           exactPrefix: 'jane_d',\n-//           lookWhere: { usernames: true },\n-//         },\n-//\n-//         listQuery: {\n-//           listWhat: 'Pages',\n-//           lookWhere: { inCategories: [catB, catC] },\n-//         },\n-//\n-//         searchQuery: {\n-//           findWhat: 'Posts',\n-//           freetext: \"how to feed an anteater that has climbed a tall tree\",\n-//         },\n-//       ],\n-//     },\n-//   }\n+// Maybe later.\n+\n+interface QueryDoApiRequest extends ApiRequest, QueryDoApiTask {\n+}\n+\n+interface QueryDoApiTask extends ApiTask {\n+  inSingleTransaction?: true;  // default: false\n+  queriesAndActions: (QueryApiTask | ManyQueriesApiTask | Action | DoActionsApiTask)[];\n+}\n+\n+type RunQueriesDoActionsResults = ApiResponse<ManyResults>;\n+\n+\n+//  Example Query-Do API request:\n //\n-// Response could be:\n+//  POST /-/v0/query-do  {\n+//    queriesAndActions: [{\n+//      getQuery: {\n+//        getWhat: 'Pages',\n+//        getRefs: ['tyid:1234'],\n+//        inclFields: { ... },\n+//      }\n+//    }, {\n+//      listQuery: {\n+//        ...\n+//      }\n+//    }, {\n+//      searchQuery: {\n+//        findWhat: 'Posts',\n+//        freetext: \"how to feed an anteater that has climbed a tall tree\",\n+//      }\n+//    }, {\n+//      // Nested, to run in single transaction.\n+//      inSingleTransaction: true;\n+//      doActions: [{\n+//        ...\n+//      }]\n+//    }, {\n+//      inSingleTransaction: true,\n+//      manyQueries: [{\n+//        ...\n+//      }]\n+//    }, {\n+//      ...\n+//    }]\n+//  }\n+//\n+// Response would be ManyResults?\n //\n //   {\n //     origin: \"https://example.com\",\n-//     batchQueryResults: [\n-//       { getResults: ... },\n-//       { getResults: ... },\n-//       { listResults: ... },\n-//       { listResults: ... },\n-//       { searchResults: ... },\n+//     results: [\n+//       { thingsOrErrs: [...] },  // getQuery results\n+//       { thingsFound: [...] },   // listQuery results\n+//       { thingsFound: [...] },   // searchQuery results\n+//       { results: [{ ok: true }, ...] },  // nested doActions results\n+//       { results: [...] },                // nested manyQueries results\n //     ],\n //   }\n-//\n-\n \n-//   /-/v0/batch-do â€” see above\n-//"
    },
    {
      "sha": "efd298b8f75af3da27d31807d588d66be91eb51a",
      "filename": "tests/e2e-wdio7/specs/do-api-like-and-subscribe.2br.e2e.ts",
      "status": "added",
      "additions": 285,
      "deletions": 0,
      "changes": 285,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/specs/do-api-like-and-subscribe.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/specs/do-api-like-and-subscribe.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/do-api-like-and-subscribe.2br.e2e.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -0,0 +1,285 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import c from '../test-constants';\n+\n+let allBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let mons: Member;\n+let maja: Member;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoPagesTestForum;\n+\n+let michaelsPageUrl: St;\n+let mariasPageUrl: St;\n+let mariasPageExtId = 'marias_page_extid';\n+\n+const apiSecret: TestApiSecret = {\n+  nr: 1,\n+  userId: c.SysbotUserId,\n+  createdAt: c.MinUnixMillis,\n+  deletedAt: undefined,\n+  isDeleted: false,\n+  secretKey: 'publicE2eTestSecretKey123456',\n+};\n+\n+const owensReplyOne = 'owensReplyOne';\n+const whereIsTheLikeVote_mentionMaja = 'where_is_like_vote @maja';\n+const memahsReplyOne = 'memahsReplyOne';\n+\n+\n+describe(`do-api-like-and-subscribe.2br  TyTEAPILIKESUBS`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoPagesForum({\n+      title: `Do API Like and Subscribe E2e Test`,\n+      members: ['owen', 'mons', 'maja', 'memah', 'michael', 'maria'],\n+    });\n+\n+    // Disable notifications, or notf email counts will be off\n+    // (since Owen would get emails).\n+    builder.settings({\n+      numFirstPostsToApprove: 0,\n+      numFirstPostsToReview: 0,\n+    });\n+\n+    // Enable API.\n+    builder.settings({ enableApi: true });\n+    builder.getSite().apiSecrets = [apiSecret];\n+\n+    // Skip notifications to the page authors.\n+    builder.getSite().pageNotfPrefs = [{\n+      memberId: forum.members.michael.id,\n+      notfLevel: c.TestPageNotfLevel.Muted,\n+      wholeSite: true,\n+    }, {\n+      memberId: forum.members.maria.id,\n+      notfLevel: c.TestPageNotfLevel.Muted,\n+      wholeSite: true,\n+    }];\n+\n+    builder.updatePage(forum.topics.byMariaCatA.id, (page: PageToAdd) => {\n+      page.extId = mariasPageExtId;\n+    });\n+\n+    allBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    mons = forum.members.mons;\n+    mons.extId = 'mons_extid';\n+\n+    maja = forum.members.maja;\n+\n+    memah = forum.members.memah;\n+    memah.ssoId = 'memah_ssoid';\n+    memah_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+    michaelsPageUrl = site.origin + '/' + forum.topics.byMichaelCategoryA.slug;\n+    mariasPageUrl = site.origin + '/' + forum.topics.byMariaCategoryA.slug;\n+  });\n+\n+\n+  // ----- Prepare\n+\n+  it(`Owen goes to Michael's topic`, async () => {\n+    await owen_brA.go2(michaelsPageUrl);\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+  it(`There're no Like votes`, async () => {\n+    await owen_brA.waitForMyDataAdded();\n+    const isOpLiked = await owen_brA.topic.isPostLiked(c.BodyNr);\n+    assert.not(isOpLiked, \"No orig post like vote\");  // ttt\n+  });\n+\n+\n+  it(`Memah goes to Michael's page too`, async () => {\n+    await memah_brB.go2(michaelsPageUrl);\n+    await memah_brB.complex.loginWithPasswordViaTopbar(memah);\n+  });\n+\n+  let apiResp;\n+\n+\n+  // ----- One Do API action at a time\n+\n+  it(`Memah via the Do API likes Michael's page`, async () => {\n+    apiResp = await server.apiV0.do_({\n+      origin: site.origin,\n+      apiRequesterId: c.SysbotUserId,\n+      apiSecret: apiSecret.secretKey,\n+      data: {\n+        doActions: [\n+              makeLikeAction(\n+                  // Test direct id refs.  TyTREFTYPES01\n+                  'userid:' + memah.id, 'pageid:' + forum.topics.byMichaelCatA.id)],\n+      },\n+    });\n+  });\n+\n+  it(`... and subscribes to new replies`, async () => {\n+    apiResp = await server.apiV0.do_({\n+      origin: site.origin,\n+      apiRequesterId: c.SysbotUserId,\n+      apiSecret: apiSecret.secretKey,\n+      data: {\n+        doActions: [\n+              makeSubscribeAction(\n+                  // Test an ssoid ref, and, for the page, a tyid ref.  TyTREFTYPES01\n+                  'ssoid:memah_ssoid', 'tyid:' + forum.topics.byMichaelCatA.id)],\n+      },\n+    });\n+  });\n+\n+\n+  // ----- Two actions at once\n+\n+  it(`Mons via the Do API likes Maria's page and subscribes`, async () => {\n+    apiResp = await server.apiV0.do_({\n+      origin: site.origin,\n+      apiRequesterId: c.SysbotUserId,\n+      apiSecret: apiSecret.secretKey,\n+      data: {\n+        doActions:\n+              makeLikeAndSubscribeActions(\n+                  // Test extid refs.  TyTREFTYPES01\n+                  'extid:mons_extid', 'extid:' + mariasPageExtId),\n+      },\n+    });\n+  });\n+\n+\n+  // ----- It works?\n+\n+  it(`Owen sees the Like vote`, async () => {\n+    await owen_brA.refresh2();\n+    await owen_brA.waitForMyDataAdded();                      // [.my_data_first]\n+    assert.that(await owen_brA.topic.isPostLiked(c.BodyNr));  // ttt\n+  });\n+\n+  it(`Memah sees it too â€” and it's her vote`, async () => {\n+    await memah_brB.refresh2();\n+    await memah_brB.topic.waitForLikeVote(c.BodyNr);\n+    assert.that(await memah_brB.topic.isPostLiked(c.BodyNr, { byMe: true }));\n+  });\n+\n+  it(`Memah sees her notification level is New Replies`, async () => {\n+    await memah_brB.metabar.assertPageNotfLevelIs(c.TestPageNotfLevel.EveryPost);\n+  });\n+\n+\n+  it(`Owen replies to Michael. But maybe a bad idea!  TyTDISCRE08`, async () => {\n+    await owen_brA.complex.replyToOrigPost(owensReplyOne);\n+  });\n+\n+  it(`... Memah gets a notf email (subscribed via the Do API)`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, memah.emailAddress, owensReplyOne);\n+  });\n+\n+\n+  // ----- Undoing the actions\n+\n+  it(`Memah removes the Like vote! And unsubscribes`, async () => {\n+    apiResp = await server.apiV0.do_({\n+      origin: site.origin,\n+      apiRequesterId: c.SysbotUserId,\n+      apiSecret: apiSecret.secretKey,\n+      data: {\n+        doActions:\n+              makeLikeAndSubscribeActions(\n+                  // Test username:  and pagepath: refs.  TyTREFTYPES01\n+                  'username:' + memah.username,\n+                  'pagepath:/' + forum.topics.byMichaelCatA.slug, // id not shown in url\n+                  true /* undo */),\n+      },\n+    });\n+  });\n+\n+  it(`Owen sees the Like vote no more`, async () => {\n+    await owen_brA.refresh2();\n+    await owen_brA.waitForMyDataAdded();   // [.my_data_first]\n+    assert.not(await owen_brA.topic.isPostLiked(c.BodyNr));\n+  });\n+\n+  it(`Owen replies again`, async () => {\n+    await owen_brA.complex.replyToOrigPost(whereIsTheLikeVote_mentionMaja);\n+  });\n+\n+  it(`Memah goes to Maria's page`, async () => {\n+    await memah_brB.go2(mariasPageUrl);\n+  });\n+  it(`... replies â€” Mons has subscribed`, async () => {\n+    await memah_brB.complex.replyToOrigPost(memahsReplyOne);\n+  });\n+\n+  it(`... Maja gets a notification â€” Owen @mentioned her`, async () => {\n+    await server.waitUntilLastEmailMatches(\n+            site.id, maja.emailAddress, 'where_is_like_vote');\n+  });\n+  it(`... Mons gets a notification about Memah's reply`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, mons.emailAddress, memahsReplyOne);\n+  });\n+\n+\n+  let addrsByTimeAsc_;\n+\n+  it(`Memah didn't get any notf about Owen's last reply`, async () => {\n+    // If Memah incorrectly got another notification, it should have arrived\n+    // before the one to Owen (it got sent first).\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    const numNotfEmailsSent = 3; // to Memah, Maja, Mons\n+    assert.eq(num, numNotfEmailsSent, `Emails sent to: ${addrsByTimeAsc}`);\n+    addrsByTimeAsc_ = addrsByTimeAsc;\n+  });\n+\n+  it(`... insetad: Memah, Maja, Mons, no others`, async () => {\n+    assert.deepEq(addrsByTimeAsc_, [\n+          memah.emailAddress, maja.emailAddress, mons.emailAddress]);\n+  });\n+\n+\n+\n+  function makeLikeAndSubscribeActions(asWho: St, whatPage: St, undo?: true): Action[] {\n+    return [\n+        makeLikeAction(asWho, whatPage, undo),\n+        makeSubscribeAction(asWho, whatPage, undo)];\n+  }\n+\n+  function makeLikeAction(asWho: St, whatPage: St, undo?: true): Action {\n+    return {\n+      asWho,\n+      doWhat: 'SetVote',\n+      doHow: { whatPage, whatVote: 'Like', howMany: undo ? 0 : 1 },\n+    };\n+  }\n+\n+  function makeSubscribeAction(asWho: St, whatPage: St, undo?: true): Action {\n+    return {\n+      asWho,\n+      doWhat: 'SetNotfLevel',\n+      doHow: { whatPage, whatLevel: undo ? 'Normal' : 'NewPosts', }\n+    };\n+  }\n+\n+});\n+"
    },
    {
      "sha": "22d506fd6c785271d463262b5ed41a9fc25bd859",
      "filename": "tests/e2e-wdio7/specs/embcom.manual.2br.e2e.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/specs/embcom.manual.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/specs/embcom.manual.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/embcom.manual.2br.e2e.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -36,6 +36,7 @@ describe(`embcom.manual.2br.e2e.ts  TyTE2EEMBCOMMAN`, () => {\n \n     builder.getSite().meta.localHostname = localHostname;\n     builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+    builder.getSite().settings.enableForum = false;\n \n     everyonesBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n     richBrowserA = new TyE2eTestBrowser(wdioBrowserA, 'brA');"
    },
    {
      "sha": "66007cdd438c8821f7342978b5149baa670b8aec",
      "filename": "tests/e2e-wdio7/specs/show-admin-notices.2br.e2e.ts",
      "status": "added",
      "additions": 163,
      "deletions": 0,
      "changes": 163,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/specs/show-admin-notices.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/specs/show-admin-notices.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/specs/show-admin-notices.2br.e2e.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -0,0 +1,163 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser } from '../utils/pages-for';\n+import c from '../test-constants';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let modya: Member;\n+let modya_brB: TyE2eTestBrowser;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+\n+\n+describe(`show-admin-notices.2br.e2e.ts  TyTE2EADMNTC`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Some E2E Test\",\n+      members: ['owen', 'modya', 'memah'],\n+    });\n+\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    modya = forum.members.modya;\n+    modya_brB = brB;\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Owen logs in to admin area, ... `, async () => {\n+    await owen_brA.adminArea.goToUsersEnabled(site.origin);\n+    await owen_brA.loginDialog.loginWithPassword(owen);\n+  });\n+  it(`There's a new version announcement`, async () => {\n+    await owen_brA.tips.waitForExactlyNumAnnouncements(1);\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_LstTyV');\n+  });\n+\n+\n+  it(`Suddenly something happens! Admins should get notified!`, async () => {\n+    await server.addAdminNotice({ siteId: site.id, noticeId: 1001 });\n+  });\n+\n+\n+  it(`Owen reloads the page`, async () => {\n+    await owen_brA.refresh2();\n+  });\n+  it(`... now there's an admin notice (and the latest version ann.)`, async () => {\n+    await owen_brA.tips.waitForExactlyNumAnnouncements(2);\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_TwLgI-Conf');\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_LstTyV');\n+  });\n+\n+\n+  it(`Something else happens!`, async () => {\n+    await server.addAdminNotice({ siteId: site.id, noticeId: 1002 });\n+  });\n+\n+\n+  it(`Owen goes to the forum homepage â€” notices should be shown here too`, async () => {\n+    await owen_brA.go2('/');\n+  });\n+  it(`... now there're two admin notices, and the ver. ann.`, async () => {\n+    await owen_brA.waitForMyDataAdded();\n+    assert.eq(await owen_brA.tips.numAnnouncementsDisplayed(), 2 + 1);  // ttt\n+  });\n+  it(`... about Twitter configured, and in use, and the server version`, async () => {\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_TwLgI-InUse');\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_TwLgI-Conf');\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_LstTyV');\n+  });\n+\n+\n+  it(`Memah logs in`, async () => {\n+    await memah_brB.go2(site.origin);\n+    await memah_brB.complex.loginWithPasswordViaTopbar(memah);\n+  });\n+  it(`There are no announcements, nothing`, async () => {\n+    await memah_brB.waitForMyDataAdded();\n+    assert.eq(await memah_brB.tips.numAnnouncementsDisplayed(), 0);\n+  });\n+\n+\n+  it(`Moderator Modya arrives`, async () => {\n+    await memah_brB.topbar.clickLogout();\n+    await modya_brB.complex.loginWithPasswordViaTopbar(modya);\n+  });\n+  it(`She also sees no notices or announcements`, async () => {\n+    await modya_brB.waitForMyDataAdded();\n+    assert.eq(await memah_brB.tips.numAnnouncementsDisplayed(), 0);\n+  });\n+\n+\n+  it(`Owen hides the most recent admin notice`, async () => {\n+    await owen_brA.tips.hideAnAnnouncement();\n+  });\n+  it(`... now there're just one notice, and an announcement`, async () => {\n+    await owen_brA.waitForMyDataAdded();\n+    assert.eq(await owen_brA.tips.numAnnouncementsDisplayed(), 2);\n+  });\n+  it(`... namely about Twitter login in use, and the server version`, async () => {\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_TwLgI-InUse');\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_LstTyV');\n+  });\n+\n+\n+  it(`Owen reloads the page`, async () => {\n+    await owen_brA.refresh2();\n+  });\n+  it(`... the hidden notice is still hidden`, async () => {\n+    await owen_brA.waitForMyDataAdded();\n+    assert.eq(await owen_brA.tips.numAnnouncementsDisplayed(), 2);\n+  });\n+  it(`... the other two are the same`, async () => {\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_TwLgI-InUse');\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_LstTyV');\n+  });\n+\n+  it(`Owen unhides the notices`, async () => {\n+    await owen_brA.tips.unhideAllAnnouncements();\n+  });\n+  it(`... they're back`, async () => {\n+    await owen_brA.tips.waitForExactlyNumAnnouncements(2 + 1);\n+  });\n+  it(`... also after page relod`, async () => {\n+    // There's a race, so try a few times. [e2e_tips_race]  (The browser doesn't wait\n+    // for the server to be done un-hiding the announcements.)\n+    await owen_brA.refreshUntil(async () => {\n+      await owen_brA.waitForMyDataAdded();\n+      return await owen_brA.tips.numAnnouncementsDisplayed() === 2 + 1;  // ttt\n+    });\n+  });\n+  it(`... namely about Twitter, and the server version`, async () => {\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_TwLgI-InUse');\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_TwLgI-Conf');\n+    await owen_brA.tips.assertAnnouncementDisplayed('.e_LstTyV');\n+  });\n+\n+});\n+"
    },
    {
      "sha": "1cb75f1db5ece9c21b0de2a72e82ce3f54e4c950",
      "filename": "tests/e2e-wdio7/test-types2.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/test-types2.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/test-types2.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/test-types2.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -244,6 +244,7 @@ interface TestSiteSettings {\n   numFlagsToHidePost?: number;\n   numFlagsToBlockNewUser?: number;\n   numFlaggersToBlockNewUser?: number;\n+  enableForum?: Bo;\n   enableApi?: boolean;\n   ssoUrl?: string;\n   enableSso?: boolean;\n@@ -311,6 +312,7 @@ interface TestMyself {\n interface Member {   // see also TestGuest below\n   id: number;\n   ssoId?: St;\n+  extId?: St;\n   username: string;\n   fullName?: string;\n   createdAtMs: number;\n@@ -452,6 +454,7 @@ interface CategoryJustAdded {\n \n interface PageJustAdded {\n   id: string;\n+  extId?: St;\n   folder: string;\n   showId: boolean;\n   slug: string;"
    },
    {
      "sha": "1415301d2d7b86624cce62b1094d6ce2fb2a61cf",
      "filename": "tests/e2e-wdio7/utils/pages-for.ts",
      "status": "modified",
      "additions": 54,
      "deletions": 8,
      "changes": 62,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/pages-for.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -4142,9 +4142,11 @@ export class TyE2eTestBrowser {\n         // Facebook asks if we want cookies â€” yes we do. And Facebook sometimes\n         // renames the ok-cookies button.\n         //const cookieYesSelector = '[data-testid=\"cookie-policy-banner-accept\"]';\n-        const cookieYesSelector = '[data-testid=\"cookie-policy-dialog-accept-button\"]';\n-        if (await this.isExisting(cookieYesSelector)) {\n-          await this.waitAndClick(cookieYesSelector);\n+        // (There's yet another cookie button, cookieYesBtn2, below.)\n+        const cookieYesBtn1 = '[data-testid=\"cookie-policy-dialog-accept-button\"]';\n+        if (await this.isExisting(cookieYesBtn1)) {\n+          logMessage(\"Accepting cookies 1 ...\");\n+          await this.waitAndClick(cookieYesBtn1);\n         }\n \n         logMessage(\"typing Facebook user's email and password...\");\n@@ -4163,6 +4165,12 @@ export class TyE2eTestBrowser {\n         //   > Would you like to continue?\n         // and we need to click Yes:\n         const yesBtn = 'button[name=\"__CONFIRM__\"]';\n+\n+        // And asks about cookies a 2nd time:\n+        const cookieYesBtn2 = '[aria-label=\"Allow All Cookies\"]';\n+        // (Or: div or span with the text 'Allow All Cookies' â€” but clicking it,\n+        // does nothing. Instead, clicking the ancestor aria-label=... works.)\n+\n         await this.waitUntil(async () => {\n           if (await this.loginDialog.loginPopupClosedBecauseAlreadyLoggedIn()) {\n             logMessage(`Popup closed, got no \"Would you like to continue?\" question.`);\n@@ -4174,14 +4182,28 @@ export class TyE2eTestBrowser {\n             return true;\n           }\n           try {\n-            if (await this.tryClickNow(yesBtn) === 'Clicked')\n-              return true;\n+            // Suddenly, Sept 2021, FB has added a 2nd cookie button. Who knows why.\n+            // So let's accept cookies a 2nd time.\n+            if (await this.tryClickNow(cookieYesBtn2) === 'Clicked') {\n+              logMessage(\"Accepted FB cookies 2.\");\n+              // Contiue looping afterwards, until the dialog closes or we see the\n+              // create-user Talkyard fields. Also, it seemed as if the first click\n+              // once didn't work, who cares why, just click more?\n+              return false;\n+            }\n+            // Previously, there was some confirmation button. Mayeb FB will\n+            // add it back?\n+            if (await this.tryClickNow(yesBtn) === 'Clicked') {\n+              logMessage(\"Clicked some FB Continue button.\");\n+              // Continue looping, see if{} above.\n+              return false;\n+            }\n           }\n           catch (dummy) {\n             logMessage(`No Yes button â€” already logged in, tab closed? [TyM5PKW5RM8]`);\n           }\n         }, {\n-          message: `Waiting for any FB \"Continue?\" question`,\n+          message: `Waiting for any FB \"Continue?\" question or cookie button 2`,\n           winClosedIsFine: true,  // FB popup can close itself\n         });\n \n@@ -5580,6 +5602,18 @@ export class TyE2eTestBrowser {\n         await this.waitAndClick('.dw-notf-level');\n         await this.notfLevelDropdown.clickNotfLevel(notfLevel);\n       },\n+\n+      assertPageNotfLevelIs: async (level: PageNotfLevel) => {\n+        await this.switchToEmbCommentsIframeIfNeeded();\n+        const actualLevelText = await this.waitAndGetVisibleText('.dw-page-notf-level');\n+        // Or, if metabar open:  `dw-notf-level s_NfLv-${level}`\n+        const selector = `.dw-page-notf-level.n_NfLv-${level}`;\n+        const isCorrectLevel = await this.isVisible(selector);\n+        if (!isCorrectLevel) {\n+          assert.fail(`Wrong notf level, expected: ${level} but is (in text): ${\n+                actualLevelText}`);\n+        }\n+      },\n     };\n \n \n@@ -6144,6 +6178,10 @@ export class TyE2eTestBrowser {\n         return result;\n       },\n \n+      makeLikeVoteCountSelector: (postNr: PostNr): St => {\n+        return this.topic.makeLikeVoteSelector(postNr) + ' + .dw-vote-count';\n+      },\n+\n       __disagreeVoteSel: (postNr: PostNr): St => {\n         return `#post-${postNr} + .esPA .e_WroVo`;\n       },\n@@ -6199,12 +6237,17 @@ export class TyE2eTestBrowser {\n       },\n \n       isPostLiked: async (postNr: PostNr, ps: { byMe?: Bo } = {}): Pr<Bo> => {\n-        const likeVoteSelector = this.topic.makeLikeVoteSelector(postNr, ps);\n+        // We'll know if the post is liked byMe, by looking at the Like vote heart\n+        // button â€”Â if it's red, the post is liked byMe.\n+        // Otherwise, if there's any Like vote count, the post is liked by *someone*.\n+        const likeVoteSelector = ps.byMe\n+            ?  this.topic.makeLikeVoteSelector(postNr, ps)\n+            : this.topic.makeLikeVoteCountSelector(postNr);\n         return await this.isVisible(likeVoteSelector);\n       },\n \n       waitForLikeVote: async (postNr: PostNr, ps: { byMe?: Bo } = {}) => {\n-        const likeVoteSelector = this.topic.makeLikeVoteSelector(postNr, ps);\n+        const likeVoteSelector = this.topic.makeLikeVoteCountSelector(postNr);\n         await this.waitForVisible(likeVoteSelector);\n       },\n \n@@ -7547,6 +7590,9 @@ export class TyE2eTestBrowser {\n       waitForExactlyNumAnnouncements: async (num: Nr) => {\n         await this.waitForExactly(num, '.c_SrvAnns .dw-help');\n       },\n+      assertAnnouncementDisplayed: async (dotClassName: St) => {\n+        await this.assertDisplayed('.c_SrvAnns .dw-help ' + dotClassName);\n+      },\n       unhideAllAnnouncements: async () => {\n         await this.topbar.openMyMenu();\n         await this.topbar.myMenu.unhideAnnouncements();"
    },
    {
      "sha": "2dff9c69929a6ae42b51b8c7a45bc3784740a27a",
      "filename": "tests/e2e-wdio7/utils/server.ts",
      "status": "modified",
      "additions": 37,
      "deletions": 11,
      "changes": 48,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/utils/server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/utils/server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/server.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -6,7 +6,7 @@ import * as _ from 'lodash';\n import assert from './ty-assert';\n import * as utils from './utils';\n import c from '../test-constants';\n-import { logDebug, logMessage, logWarning, logError, logServerRequest, die, dieIf,\n+import { j2s, logMessage, logWarning, logError, logServerRequest, die, dieIf,\n         } from './log-and-die';\n \n const syncRequest = require('sync-request');\n@@ -57,7 +57,7 @@ function initOrExit(theSettings) {\n     logError(\n         `Got no xsrf token from:  ${settings.mainSiteOrigin}   [TyEE2ESRVXSRF]\\n` +\n         `Cookie headers:\\n` +\n-        `    ${JSON.stringify(cookies)}\\n`);\n+        `    ${j2s(cookies)}\\n`);\n     process.exit(1);\n   }\n \n@@ -127,7 +127,7 @@ function postOrDie(\n     delete headers['X-XSRF-TOKEN'];\n   }\n \n-  logServerRequest(`POST ${url}, headers: ${ JSON.stringify(headers) } ... [TyME2EPOST]`);\n+  logServerRequest(`POST ${url}, headers: ${j2s(headers)} ... [TyME2EPOST]`);\n \n   // Log the request as a copy-pasteable cURL command, so one can re-run this server request\n   // manually, for testing & debugging.\n@@ -136,18 +136,25 @@ function postOrDie(\n     dieIf(value.indexOf(\"'\") >= 0, \"Header value contains ' [TyE305KTH3KTS]\");\n     curlHeadersTexts.push(`-H '${key}: ${value}'`);\n   });\n-  let curlDataText = JSON.stringify(data).replace(\"'\", \"'\\\\''\");\n-  if (curlDataText.length > 1000 && settings.logLevel != 'trace') {\n+  let curlDataText = j2s(data).replace(\"'\", \"'\\\\''\");\n+  if (curlDataText.length > 1500 && settings.logLevel != 'trace') {\n     // This is a bit much json, makes the logs annoyingly verbose. So truncate. Won't be\n     // copy-pasteable.\n-    curlDataText = curlDataText.substr(0, 1000) + '\\n       ...';\n+    curlDataText = curlDataText.substr(0, 1500) + '\\n       ...';\n   }\n+  // It's more nice with the cURL command on a single line â€” then it can be\n+  // copy-pasted easily. The many-lines alternative (below) gets broken up\n+  // by some column-0 prompt Webdriverio adds.\n+  logServerRequest(`curl -X POST ${url}  -H 'Content-Type: application/json'  ` +\n+        curlHeadersTexts.join('  ') + ` -d '${curlDataText}'`);\n+  /*\n   logServerRequest(`curl  \\\\\n     -X POST  \\\\\n     -H 'Content-Type: application/json'  \\\\\n     ${curlHeadersTexts.join('  \\\\\\n    ')}  \\\\\n     -d '${curlDataText}'  \\\\\n     ${url}`);\n+    */\n \n   const response = syncRequest('POST', url + passwordParam, { json: data, headers: headers });\n   const responseBody = getResponseBodyString(response);\n@@ -241,7 +248,7 @@ function showResponse(response, shouldHaveFailed?: boolean) {\n \n function showResponseBodyJson(body) {\n   let text = body;\n-  if (!_.isString(text)) text = JSON.stringify(text);\n+  if (!_.isString(text)) text = j2s(text);\n   return (\n   \"â€”â€”â€”â€” Response body: â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”\\n\" +\n   text +\n@@ -307,12 +314,17 @@ function getTestCounters(): TestCounters {\n }\n \n \n+function addAdminNotice(ps: { siteId: SiteId, noticeId: Nr }) {\n+  postOrDie(settings.mainSiteOrigin + '/-/add-admin-notice', ps);\n+}\n+\n+\n async function getLastEmailSenTo(siteId: SiteId, email: St, dontWait?: 'DontWait')\n         : Pr<EmailSubjectBody | Nl> {\n   for (let attemptNr = 1; attemptNr <= settings.waitforTimeout / 500; ++attemptNr) {\n     const response = await getOrDie(settings.mainSiteOrigin + '/-/last-e2e-test-email?sentTo=' + email +\n       '&siteId=' + siteId);\n-    const lastEmails = JSON.parse(response.body);\n+    const lastEmails = JSON.parse(response.body).emails;\n     if (lastEmails.length) {\n       logMessage(`${email} has gotten ${lastEmails.length} emails:`);\n       for (let i = 0; i < lastEmails.length; ++i) {\n@@ -341,7 +353,7 @@ async function countLastEmailsSentTo(siteId: SiteId, email: St): Pr<Nr> {\n   const response = await getOrDie(\n           settings.mainSiteOrigin + '/-/last-e2e-test-email?sentTo=' + email +\n               '&siteId=' + siteId + '&timeoutMs=1000');\n-  const lastEmails = JSON.parse(response.body);\n+  const lastEmails = JSON.parse(response.body).emails;\n   dieIf(lastEmails.length >= 14, 'TyE2ABKT0', \"Too many emails, e2e test won't work  [R2AB067]\");\n   return lastEmails.length;\n }\n@@ -498,7 +510,7 @@ async function waitUntilLastEmailMatches(siteId: SiteId, emailAddress: string,\n     if (!hasDebugLoggedLastEmail && (tenSecondsPassed || testEndsSoon)) {\n       //hasDebugLoggedLastEmail = true;\n       logWarning(\n-        `Waiting for email to: ${emailAddress} to match: ${JSON.stringify(textsToMatch)} ` +\n+        `Waiting for email to: ${emailAddress} to match: ${j2s(textsToMatch)} ` +\n         (!email ? ` â€” but no email sent to that address` :\n             `\\nLast email is:\\n${email.subject}\\n${email.bodyHtmlText}`) +\n         '\\n');\n@@ -531,7 +543,7 @@ async function lastEmailMatches(siteId: SiteId, emailAddress: St,\n     }\n   }\n   if (assertMatches) {\n-    assert.fail(`Email text didn't match regex(s): '${JSON.stringify(textOrTextsToMatch)}',\\n` +\n+    assert.fail(`Email text didn't match regex(s): '${j2s(textOrTextsToMatch)}',\\n` +\n       `email sent to: ${emailAddress},\\n` +\n       `email title: ${email.subject},\\n` +\n       `email text: ${email.bodyHtmlText}`);\n@@ -695,6 +707,18 @@ function listUsers(ps: { origin: string, usernamePrefix: string }): ListUsersApi\n }\n \n \n+async function do_(ps: { origin: St, apiRequesterId: UserId, apiSecret: St, fail?: Bo,\n+      data: DoApiRequest }): Pr<St | Ay> {\n+  const url = ps.origin + '/-/v0/do';\n+  const response = postOrDie(\n+      url, ps.data, {\n+        fail: ps.fail,\n+        apiRequesterId: ps.apiRequesterId || c.SysbotUserId,\n+        apiSecret: ps.apiSecret });\n+  return ps.fail ? response.bodyText : response.bodyJson();\n+}\n+\n+\n \n // ----- Export functions\n \n@@ -710,6 +734,7 @@ export default {\n   playTimeDays,\n   deleteRedisKey,\n   getTestCounters,\n+  addAdminNotice,\n   getLastEmailSenTo,  // RENAME waitGetLastEmailsSentTo\n   countLastEmailsSentTo,\n   getEmailsSentToAddrs,\n@@ -733,6 +758,7 @@ export default {\n   apiV0: {\n     fullTextSearch,\n     listQuery,\n+    do_,\n     upsertUser,\n     upsertUserGetLoginSecret,\n     upsertSimple,"
    },
    {
      "sha": "cdbbb720dbad6c8d9ce44c980a96f3288d985367",
      "filename": "tests/e2e-wdio7/utils/site-builder.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/utils/site-builder.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e-wdio7/utils/site-builder.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e-wdio7/utils/site-builder.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -162,6 +162,13 @@ export function buildSite(site: SiteData | U = undefined, ps: { okInitEarly?: bo\n     },\n \n \n+    updatePage: function(pageId: PageId, updFn: (p: PageToAdd) => Vo) {\n+      const page: PageToAdd | U = site.pages.find(p => p.id === pageId);\n+      dieIf(!page, `No such page to update: ${pageId}, e2e test code broken? TyE2RMF3SP`);\n+      updFn(page);\n+    },\n+\n+\n     addPost: function(testPostData: NewTestPost) {\n       site.posts.push(make.post(testPostData));\n     },"
    },
    {
      "sha": "ec9420da756817f17fddd3b7b0beb566687206c7",
      "filename": "tests/e2e/utils/log-and-die.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e/utils/log-and-die.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e/utils/log-and-die.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/log-and-die.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -23,6 +23,11 @@ const api = {\n \n   getOrCall,\n \n+  /// JSON to string â€” 'j2s' is shorter than 'JSON.stringify'.\n+  j2s: function(any: any, hmm?: any, indentation?: Nr): St {\n+    return JSON.stringify.apply(JSON, arguments);\n+  },\n+\n   // debug log json\n   dj: function(message: string, json: any, indentation?: number) {\n     api.logMessage(`${message} ${JSON.stringify(json, undefined, indentation)}`);"
    },
    {
      "sha": "ce11aa15fecc7ad4534a48e3e482b3fbc1f81b08",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 28,
      "deletions": 6,
      "changes": 34,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/pages-for.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -3980,9 +3980,11 @@ export class TyE2eTestBrowser {\n         // Facebook asks if we want cookies â€” yes we do. And Facebook sometimes\n         // renames the ok-cookies button.\n         //const cookieYesSelector = '[data-testid=\"cookie-policy-banner-accept\"]';\n-        const cookieYesSelector = '[data-testid=\"cookie-policy-dialog-accept-button\"]';\n-        if (this.isExisting(cookieYesSelector)) {\n-          this.waitAndClick(cookieYesSelector);\n+        // (There's yet another cookie button, cookieYesBtn2, below.)\n+        const cookieYesBtn1 = '[data-testid=\"cookie-policy-dialog-accept-button\"]';\n+        if (this.isExisting(cookieYesBtn1)) {\n+          logMessage(\"Accepting cookies 1 ...\");\n+          this.waitAndClick(cookieYesBtn1);\n         }\n \n         logMessage(\"typing Facebook user's email and password...\");\n@@ -4001,6 +4003,12 @@ export class TyE2eTestBrowser {\n         //   > Would you like to continue?\n         // and we need to click Yes:\n         const yesBtn = 'button[name=\"__CONFIRM__\"]';\n+\n+        // And asks about cookies a 2nd time:\n+        const cookieYesBtn2 = '[aria-label=\"Allow All Cookies\"]';\n+        // (Or: div or span with the text 'Allow All Cookies' â€” but clicking it,\n+        // does nothing. Instead, clicking the ancestor aria-label=... works.)\n+\n         this.waitUntil(() => {\n           if (this.loginDialog.loginPopupClosedBecauseAlreadyLoggedIn()) {\n             logMessage(`Popup closed, got no \"Would you like to continue?\" question.`);\n@@ -4012,14 +4020,28 @@ export class TyE2eTestBrowser {\n             return true;\n           }\n           try {\n-            if (this.tryClickNow(yesBtn) === 'Clicked')\n-              return true;\n+            // Suddenly, Sept 2021, FB has added a 2nd cookie button. Who knows why.\n+            // So let's accept cookies a 2nd time.\n+            if (this.tryClickNow(cookieYesBtn2) === 'Clicked') {\n+              logMessage(\"Accepted FB cookies 2.\");\n+              // Contiue looping afterwards, until the dialog closes or we see the\n+              // create-user Talkyard fields. Also, it seemed as if the first click\n+              // once didn't work, who cares why, just click more?\n+              return false;\n+            }\n+            // Previously, there was some confirmation button. Mayeb FB will\n+            // add it back?\n+            if (this.tryClickNow(yesBtn) === 'Clicked') {\n+              logMessage(\"Clicked some FB Continue button.\");\n+              // Continue looping, see if{} above.\n+              return false;\n+            }\n           }\n           catch (dummy) {\n             logMessage(`No Yes button â€” already logged in, tab closed? [TyM5PKW5RM8]`);\n           }\n         }, {\n-          message: `Waiting for any FB \"Continue?\" question`,\n+          message: `Waiting for any FB \"Continue?\" question or cookie button 2`,\n           winClosedIsFine: true,  // FB popup can close itself\n         });\n "
    },
    {
      "sha": "8d50190c29396713a365a3c114c0a1335c15fb6b",
      "filename": "tests/e2e/utils/server.ts",
      "status": "modified",
      "additions": 19,
      "deletions": 11,
      "changes": 30,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e/utils/server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e/utils/server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/server.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -7,7 +7,8 @@ import assert = require('assert');\n import tyAssert = require('./ty-assert');\n import utils = require('./utils');\n import c = require('../test-constants');\n-import { logMessage, logWarning, logError, logServerRequest, die, dieIf } from './log-and-die';\n+import { j2s, logMessage, logWarning, logError, logServerRequest, die, dieIf,\n+        } from './log-and-die';\n \n // Didn't find any Typescript defs.\n declare function require(path: string): any;\n@@ -59,7 +60,7 @@ function initOrExit(theSettings) {\n     logError(\n         `Got no xsrf token from:  ${settings.mainSiteOrigin}   [TyEE2ESRVXSRF]\\n` +\n         `Cookie headers:\\n` +\n-        `    ${JSON.stringify(cookies)}\\n`);\n+        `    ${j2s(cookies)}\\n`);\n     process.exit(1);\n   }\n \n@@ -91,7 +92,7 @@ function postOrDie(url, data, opts: { apiRequesterId?: number, apiSecret?: strin\n         'Cookie': xsrfTokenAndCookies[1]\n       });\n \n-  logServerRequest(`POST ${url}, headers: ${ JSON.stringify(headers) } ... [TyME2EPOST]`);\n+  logServerRequest(`POST ${url}, headers: ${j2s(headers)} ... [TyME2EPOST]`);\n \n   // Log the request as a copy-pasteable cURL command, so one can re-run this server request\n   // manually, for testing & debugging.\n@@ -100,18 +101,25 @@ function postOrDie(url, data, opts: { apiRequesterId?: number, apiSecret?: strin\n     dieIf(value.indexOf(\"'\") >= 0, \"Header value contains ' [TyE305KTH3KTS]\");\n     curlHeadersTexts.push(`-H '${key}: ${value}'`);\n   });\n-  let curlDataText = JSON.stringify(data).replace(\"'\", \"'\\\\''\");\n-  if (curlDataText.length > 1000 && settings.logLevel != 'trace') {\n+  let curlDataText = j2s(data).replace(\"'\", \"'\\\\''\");\n+  if (curlDataText.length > 1500 && settings.logLevel != 'trace') {\n     // This is a bit much json, makes the logs annoyingly verbose. So truncate. Won't be\n     // copy-pasteable.\n-    curlDataText = curlDataText.substr(0, 1000) + '\\n       ...';\n+    curlDataText = curlDataText.substr(0, 1500) + '\\n       ...';\n   }\n+  // It's more nice with the cURL command on a single line â€” then it can be\n+  // copy-pasted easily. The many-lines alternative (below) gets broken up\n+  // by some column-0 prompt Webdriverio adds.\n+  logServerRequest(`curl -X POST ${url}  -H 'Content-Type: application/json'  ` +\n+        curlHeadersTexts.join('  ') + ` -d '${curlDataText}'`);\n+  /*\n   logServerRequest(`curl  \\\\\n     -X POST  \\\\\n     -H 'Content-Type: application/json'  \\\\\n     ${curlHeadersTexts.join('  \\\\\\n    ')}  \\\\\n     -d '${curlDataText}'  \\\\\n     ${url}`);\n+    */\n \n   const response = syncRequest('POST', url + passwordParam, { json: data, headers: headers });\n   const responseBody = getResponseBodyString(response);\n@@ -204,7 +212,7 @@ function showResponse(response, shouldHaveFailed?: boolean) {\n \n function showResponseBodyJson(body) {\n   let text = body;\n-  if (!_.isString(text)) text = JSON.stringify(text);\n+  if (!_.isString(text)) text = j2s(text);\n   return (\n   \"Response body: â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”\\n\" +\n   text +\n@@ -276,7 +284,7 @@ function getLastEmailSenTo(siteId: SiteId, email: string,\n   for (let attemptNr = 1; attemptNr <= settings.waitforTimeout / 500; ++attemptNr) {\n     const response = getOrDie(settings.mainSiteOrigin + '/-/last-e2e-test-email?sentTo=' + email +\n       '&siteId=' + siteId);\n-    const lastEmails = JSON.parse(response.body);\n+    const lastEmails = JSON.parse(response.body).emails;\n     if (lastEmails.length) {\n       logMessage(`${email} has gotten ${lastEmails.length} emails:`);\n       for (let i = 0; i < lastEmails.length; ++i) {\n@@ -304,7 +312,7 @@ function getLastEmailSenTo(siteId: SiteId, email: string,\n function countLastEmailsSentTo(siteId: SiteId, email: string): number {\n   const response = getOrDie(settings.mainSiteOrigin + '/-/last-e2e-test-email?sentTo=' + email +\n     '&siteId=' + siteId + '&timeoutMs=1000');\n-  const lastEmails = JSON.parse(response.body);\n+  const lastEmails = JSON.parse(response.body).emails;\n   dieIf(lastEmails.length >= 14, 'TyE2ABKT0', \"Too many emails, e2e test won't work  [R2AB067]\");\n   return lastEmails.length;\n }\n@@ -457,7 +465,7 @@ function waitUntilLastEmailMatches(siteId: SiteId, emailAddress: string,\n     if (!hasDebugLoggedLastEmail && (tenSecondsPassed || testEndsSoon)) {\n       //hasDebugLoggedLastEmail = true;\n       logWarning(\n-        `Waiting for email to: ${emailAddress} to match: ${JSON.stringify(textsToMatch)} ` +\n+        `Waiting for email to: ${emailAddress} to match: ${j2s(textsToMatch)} ` +\n         (!email ? ` â€” but no email sent to that address` :\n             `\\nLast email is:\\n${email.subject}\\n${email.bodyHtmlText}`) +\n         '\\n');\n@@ -490,7 +498,7 @@ function lastEmailMatches(siteId: SiteId, emailAddress: string,\n     }\n   }\n   if (assertMatches) {\n-    assert(false, `Email text didn't match regex(s): '${JSON.stringify(textOrTextsToMatch)}',\\n` +\n+    assert(false, `Email text didn't match regex(s): '${j2s(textOrTextsToMatch)}',\\n` +\n       `email sent to: ${emailAddress},\\n` +\n       `email title: ${email.subject},\\n` +\n       `email text: ${email.bodyHtmlText}`);"
    },
    {
      "sha": "39c6fd770932b3058f601fe52b0d9b3f7fc9b72b",
      "filename": "tests/e2e/yarn.lock",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e/yarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/tests/e2e/yarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/yarn.lock?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -2309,16 +2309,11 @@ inherits@2.0.3:\n   resolved \"https://registry.yarnpkg.com/inherits/-/inherits-2.0.3.tgz#633c2c83e3da42a502f52466022480f4208261de\"\n   integrity sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\n \n-ini@1.3.7:\n+ini@1.3.7, ini@~1.3.0:\n   version \"1.3.7\"\n   resolved \"https://registry.yarnpkg.com/ini/-/ini-1.3.7.tgz#a09363e1911972ea16d7a8851005d84cf09a9a84\"\n   integrity sha512-iKpRpXP+CrP2jyrxvg1kMUpXDyRUFDWurxbnVT1vQPx+Wz9uCYsMIqYuSBLV+PAaZG/d7kRLKRFc9oDMsH+mFQ==\n \n-ini@~1.3.0:\n-  version \"1.3.5\"\n-  resolved \"https://registry.yarnpkg.com/ini/-/ini-1.3.5.tgz#eee25f56db1c9ec6085e0c22778083f596abf927\"\n-  integrity sha512-RZY5huIKCMRWDUqZlEi72f/lmXKMvuszcMBduliQ3nnWbx9X/ZBQO7DijMEYS9EhHBb2qacRUMtC7svLwe0lcw==\n-\n ini@~2.0.0:\n   version \"2.0.0\"\n   resolved \"https://registry.yarnpkg.com/ini/-/ini-2.0.0.tgz#e5fd556ecdd5726be978fa1001862eacb0a94bc5\"\n@@ -2887,12 +2882,7 @@ lodash.zip@^4.2.0:\n   resolved \"https://registry.yarnpkg.com/lodash.zip/-/lodash.zip-4.2.0.tgz#ec6662e4896408ed4ab6c542a3990b72cc080020\"\n   integrity sha1-7GZi5IlkCO1KtsVCo5kLcswIACA=\n \n-lodash@^4.17.19:\n-  version \"4.17.20\"\n-  resolved \"https://registry.yarnpkg.com/lodash/-/lodash-4.17.20.tgz#b44a9b6297bcb698f1c51a3545a2b3b368d59c52\"\n-  integrity sha512-PlhdFcillOINfeV7Ni6oF1TAEayyZBoZ8bcshTHqOYJYlrqzRK5hagpagky5o4HfCzzd1TRkXPMFq6cKk9rGmA==\n-\n-lodash@~4.17.10:\n+lodash@^4.17.19, lodash@~4.17.10:\n   version \"4.17.21\"\n   resolved \"https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c\"\n   integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    {
      "sha": "c04a87d3c162ebf3d636d4516f5d89877a49eceb",
      "filename": "to-talkyard/package.json",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/to-talkyard/package.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/to-talkyard/package.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/to-talkyard/package.json?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -7,7 +7,7 @@\n     \"url\": \"https://github.com/debiki/to-talkyard/\"\n   },\n   \"author\": \"Debiki AB and Kaj Magnus Lindberg\",\n-  \"license\": \"GPLv3\",\n+  \"license\": \"AGPL-3.0-or-later\",\n   \"scripts\": {\n     \"start\": \"npm run serve\",\n     \"build\": \"npm run build-ts && npm run tslint\",\n@@ -26,27 +26,27 @@\n   \"dependencies\": {\n     \"async\": \"^2.6.0\",\n     \"chalk\": \"^2.2.0\",\n-    \"lodash\": \"^4.17.4\",\n-    \"minimist\": \"^1.2.0\",\n+    \"lodash\": \"^4.17.21\",\n+    \"minimist\": \"^1.2.5\",\n     \"sax\": \"^1.2.4\"\n   },\n   \"devDependencies\": {\n     \"@types/async\": \"^2.0.45\",\n-    \"@types/lodash\": \"^4.14.91\",\n-    \"@types/lusca\": \"^1.5.0\",\n-    \"@types/minimist\": \"^1.2.0\",\n+    \"@types/lodash\": \"^4.14.172\",\n+    \"@types/lusca\": \"^1.7.1\",\n+    \"@types/minimist\": \"^1.2.2\",\n     \"@types/node\": \"^14.14.6\",\n-    \"@types/sax\": \"^1.0.1\",\n-    \"@types/shelljs\": \"^0.7.8\",\n-    \"@types/supertest\": \"^2.0.4\",\n-    \"@types/winston\": \"^2.3.7\",\n-    \"chai\": \"^4.1.2\",\n+    \"@types/sax\": \"^1.2.3\",\n+    \"@types/shelljs\": \"^0.8.9\",\n+    \"@types/supertest\": \"^2.0.11\",\n+    \"@types/winston\": \"^2.4.4\",\n+    \"chai\": \"^4.3.4\",\n     \"concurrently\": \"^3.5.1\",\n     \"nodemon\": \"^1.18.10\",\n-    \"shelljs\": \"^0.8.1\",\n+    \"shelljs\": \"^0.8.4\",\n     \"supertest\": \"^3.0.0\",\n-    \"typescript\": \"^4.0.5\",\n-    \"ts-node\": \"^9.0.0\",\n-    \"tslint\": \"^6.1.3\"\n+    \"ts-node\": \"^10.2.1\",\n+    \"tslint\": \"^6.1.3\",\n+    \"typescript\": \"^4.4.2\"\n   }\n }"
    },
    {
      "sha": "32eced899bb7f616f9dceb535ce6ba866fd3d8d4",
      "filename": "to-talkyard/src/to-talkyard.d.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/to-talkyard/src/to-talkyard.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/to-talkyard/src/to-talkyard.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/to-talkyard/src/to-talkyard.d.ts?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -28,6 +28,7 @@ interface CategoryDumpV0 {\n interface PageToAdd {\n   dbgSrc?: string;\n   id: string;\n+  extId?: ExtId;\n   altIds?: string[];\n   extImpId?: ExtImpId;\n   folder?: string;"
    },
    {
      "sha": "8d967417146e39162818f70de04e4af181b5d3c6",
      "filename": "to-talkyard/yarn.lock",
      "status": "modified",
      "additions": 680,
      "deletions": 469,
      "changes": 1149,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/to-talkyard/yarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/to-talkyard/yarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/to-talkyard/yarn.lock?ref=fc86e04364aba9341078046dd7591ccfd8b773ab"
    },
    {
      "sha": "16563288afca438d6102728dda49dfd7293016b4",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -1 +1 @@\n-v0.2021.25\n+v0.2021.26"
    },
    {
      "sha": "61c3f9fc68c1c1931f3a6421e551ca4243cb4551",
      "filename": "yarn.lock",
      "status": "modified",
      "additions": 47,
      "deletions": 48,
      "changes": 95,
      "blob_url": "https://github.com/debiki/talkyard/blob/fc86e04364aba9341078046dd7591ccfd8b773ab/yarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/fc86e04364aba9341078046dd7591ccfd8b773ab/yarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/yarn.lock?ref=fc86e04364aba9341078046dd7591ccfd8b773ab",
      "patch": "@@ -707,7 +707,7 @@ chokidar@^2.0.0:\n   optionalDependencies:\n     fsevents \"^1.2.7\"\n \n-chownr@^1.1.1:\n+chownr@^1.1.4:\n   version \"1.1.4\"\n   resolved \"https://registry.yarnpkg.com/chownr/-/chownr-1.1.4.tgz#6fc9d7b42d32a583596337666e7d08084da2cc6b\"\n   integrity sha512-jJ0bqzaylmJtVnNgzTeSOs8DPavpbYgEr/b0YL8/2GO3xJEhInFmhKMUnEJQjZumK7KXGFhUy89PrsJWlakBVg==\n@@ -1001,7 +1001,7 @@ debug@^2.1.2, debug@^2.2.0, debug@^2.3.3:\n   dependencies:\n     ms \"2.0.0\"\n \n-debug@^3.0.0, debug@^3.1.1:\n+debug@^3.1.1:\n   version \"3.2.6\"\n   resolved \"https://registry.yarnpkg.com/debug/-/debug-3.2.6.tgz#e83d17de16d8a7efb7717edbe5fb10135eee629b\"\n   integrity sha512-mel+jf7nrtEl5Pn1Qx46zARXKDpBbvzezse7p7LqINmdoIk8PYP5SySaxEmYv6TZ0JyEKA1hsCId6DIhgITtWQ==\n@@ -1237,12 +1237,7 @@ escape-string-regexp@^1.0.2, escape-string-regexp@^1.0.3, escape-string-regexp@^\n   resolved \"https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4\"\n   integrity sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=\n \n-eventemitter3@^4.0.0:\n-  version \"4.0.4\"\n-  resolved \"https://registry.yarnpkg.com/eventemitter3/-/eventemitter3-4.0.4.tgz#b5463ace635a083d018bdc7c917b4c5f10a85384\"\n-  integrity sha512-rlaVLnVxtxvoyLsQQFBx53YmXHDxRIzzTLbdfxqi4yocpSjAxXwkU0cScM5JgSKMqEhrZpnvQ2D9gjylR0AimQ==\n-\n-eventemitter3@^4.0.7:\n+eventemitter3@^4.0.0, eventemitter3@^4.0.7:\n   version \"4.0.7\"\n   resolved \"https://registry.yarnpkg.com/eventemitter3/-/eventemitter3-4.0.7.tgz#2de9b68f6528d5644ef5c59526a1b4a07306169f\"\n   integrity sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==\n@@ -1453,11 +1448,9 @@ flush-write-stream@^1.0.2:\n     readable-stream \"^2.3.6\"\n \n follow-redirects@^1.0.0:\n-  version \"1.11.0\"\n-  resolved \"https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.11.0.tgz#afa14f08ba12a52963140fe43212658897bc0ecb\"\n-  integrity sha512-KZm0V+ll8PfBrKwMzdo5D13b1bur9Iq9Zd/RMmAoQQcl2PxxFml8cxXPaaPYVbV0RjNjq1CU7zIzAOqtUPudmA==\n-  dependencies:\n-    debug \"^3.0.0\"\n+  version \"1.14.3\"\n+  resolved \"https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.14.3.tgz#6ada78118d8d24caee595595accdc0ac6abd022e\"\n+  integrity sha512-3MkHxknWMUtb23apkgz/83fDoe+y+qr0TdgacGIA7bew+QLBo3vdgEN2xEsuXNivpFy4CyDhBBZnNZOtalmenw==\n \n for-in@^1.0.1, for-in@^1.0.2:\n   version \"1.0.2\"\n@@ -1506,11 +1499,12 @@ fragment-cache@^0.2.1:\n   dependencies:\n     map-cache \"^0.2.2\"\n \n-fs-minipass@^1.2.5:\n-  version \"1.2.5\"\n-  resolved \"https://registry.yarnpkg.com/fs-minipass/-/fs-minipass-1.2.5.tgz#06c277218454ec288df77ada54a03b8702aacb9d\"\n+fs-minipass@^1.2.7:\n+  version \"1.2.7\"\n+  resolved \"https://registry.yarnpkg.com/fs-minipass/-/fs-minipass-1.2.7.tgz#ccff8570841e7fe4265693da88936c55aed7f7c7\"\n+  integrity sha512-GWSSJGFy4e9GUeCcbIkED+bgAoFyj7XF1mV8rma3QW4NIqX9Kyx79N/PF61H5udOV3aY1IaMLs6pGbH71nlCTA==\n   dependencies:\n-    minipass \"^2.2.1\"\n+    minipass \"^2.6.0\"\n \n fs-mkdirp-stream@^1.0.0:\n   version \"1.0.0\"\n@@ -2054,9 +2048,9 @@ http-basic@^7.0.0:\n     parse-cache-control \"^1.0.1\"\n \n http-proxy@^1.18.0:\n-  version \"1.18.0\"\n-  resolved \"https://registry.yarnpkg.com/http-proxy/-/http-proxy-1.18.0.tgz#dbe55f63e75a347db7f3d99974f2692a314a6a3a\"\n-  integrity sha512-84I2iJM/n1d4Hdgc6y2+qY5mDaz2PUVjlg9znE9byl+q0uC3DeByqBGReQu5tpLK0TAqTIXScRUV+dg7+bUPpQ==\n+  version \"1.18.1\"\n+  resolved \"https://registry.yarnpkg.com/http-proxy/-/http-proxy-1.18.1.tgz#401541f0534884bbf95260334e72f88ee3976549\"\n+  integrity sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==\n   dependencies:\n     eventemitter3 \"^4.0.0\"\n     follow-redirects \"^1.0.0\"\n@@ -2143,9 +2137,9 @@ inherits@~2.0.1:\n   resolved \"https://registry.yarnpkg.com/inherits/-/inherits-2.0.3.tgz#633c2c83e3da42a502f52466022480f4208261de\"\n \n ini@^1.3.4, ini@~1.3.0:\n-  version \"1.3.5\"\n-  resolved \"https://registry.yarnpkg.com/ini/-/ini-1.3.5.tgz#eee25f56db1c9ec6085e0c22778083f596abf927\"\n-  integrity sha512-RZY5huIKCMRWDUqZlEi72f/lmXKMvuszcMBduliQ3nnWbx9X/ZBQO7DijMEYS9EhHBb2qacRUMtC7svLwe0lcw==\n+  version \"1.3.8\"\n+  resolved \"https://registry.yarnpkg.com/ini/-/ini-1.3.8.tgz#a29da425b48806f34767a4efce397269af28432c\"\n+  integrity sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==\n \n interpret@^1.4.0:\n   version \"1.4.0\"\n@@ -2682,8 +2676,9 @@ lodash.keys@^3.0.0:\n     lodash.isarray \"^3.0.0\"\n \n lodash.merge@^4.4.0:\n-  version \"4.6.0\"\n-  resolved \"https://registry.yarnpkg.com/lodash.merge/-/lodash.merge-4.6.0.tgz#69884ba144ac33fe699737a6086deffadd0f89c5\"\n+  version \"4.6.2\"\n+  resolved \"https://registry.yarnpkg.com/lodash.merge/-/lodash.merge-4.6.2.tgz#558aa53b43b661e1925a0afdfa36a9a1085fe57a\"\n+  integrity sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==\n \n lodash.partialright@^4.1.4:\n   version \"4.2.1\"\n@@ -2912,18 +2907,20 @@ minimist@^1.2.0, minimist@^1.2.5:\n   resolved \"https://registry.yarnpkg.com/minimist/-/minimist-1.2.5.tgz#67d66014b66a6a8aaa0c083c5fd58df4e4e97602\"\n   integrity sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw==\n \n-minipass@^2.2.1, minipass@^2.3.4:\n-  version \"2.3.5\"\n-  resolved \"https://registry.yarnpkg.com/minipass/-/minipass-2.3.5.tgz#cacebe492022497f656b0f0f51e2682a9ed2d848\"\n+minipass@^2.6.0, minipass@^2.9.0:\n+  version \"2.9.0\"\n+  resolved \"https://registry.yarnpkg.com/minipass/-/minipass-2.9.0.tgz#e713762e7d3e32fed803115cf93e04bca9fcc9a6\"\n+  integrity sha512-wxfUjg9WebH+CUDX/CdbRlh5SmfZiy/hpkxaRI16Y9W56Pa75sWgd/rvFilSgrauD9NyFymP/+JFV3KwzIsJeg==\n   dependencies:\n     safe-buffer \"^5.1.2\"\n     yallist \"^3.0.0\"\n \n-minizlib@^1.1.1:\n-  version \"1.2.1\"\n-  resolved \"https://registry.yarnpkg.com/minizlib/-/minizlib-1.2.1.tgz#dd27ea6136243c7c880684e8672bb3a45fd9b614\"\n+minizlib@^1.3.3:\n+  version \"1.3.3\"\n+  resolved \"https://registry.yarnpkg.com/minizlib/-/minizlib-1.3.3.tgz#2290de96818a34c29551c8a8d301216bd65a861d\"\n+  integrity sha512-6ZYMOEnmVsdCeTJVE0W9ZD+pVnE8h9Hma/iOwwRDsdQoePpoX56/8B6z3P9VNwppJuBKNRuFDRNRqRWexT9G9Q==\n   dependencies:\n-    minipass \"^2.2.1\"\n+    minipass \"^2.9.0\"\n \n mixin-deep@^1.2.0:\n   version \"1.3.2\"\n@@ -2933,7 +2930,7 @@ mixin-deep@^1.2.0:\n     for-in \"^1.0.2\"\n     is-extendable \"^1.0.1\"\n \n-mkdirp@^0.5.0, mkdirp@^0.5.1, mkdirp@~0.5.x:\n+mkdirp@^0.5.1, mkdirp@^0.5.5, mkdirp@~0.5.x:\n   version \"0.5.5\"\n   resolved \"https://registry.yarnpkg.com/mkdirp/-/mkdirp-0.5.5.tgz#d91cefd62d1436ca0f41620e251288d420099def\"\n   integrity sha512-NKmAlESf6jMGym1++R0Ra7wvhV+wFW63FaSOFPwRahvea0gMUcGUhVeAg/0BC0wiv9ih5NYPB1Wn1UEI1/L+xQ==\n@@ -3873,12 +3870,12 @@ run-parallel@^1.1.9:\n   resolved \"https://registry.yarnpkg.com/run-parallel/-/run-parallel-1.1.9.tgz#c9dd3a7cf9f4b2c4b6244e173a6ed866e61dd679\"\n   integrity sha512-DEqnSRTDw/Tc3FXf49zedI638Z9onwUotBMiUFKmrO2sdFKIbXamXGQ3Axd4qgphxKB4kw/qP1w5kTxnfU1B9Q==\n \n-safe-buffer@^5.0.1, safe-buffer@^5.1.2, safe-buffer@~5.2.0:\n+safe-buffer@^5.0.1, safe-buffer@^5.1.0, safe-buffer@^5.1.2, safe-buffer@^5.2.1, safe-buffer@~5.2.0:\n   version \"5.2.1\"\n   resolved \"https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.2.1.tgz#1eaf9fa9bdb1fdd4ec75f58f9cdb4e6b7827eec6\"\n   integrity sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\n \n-safe-buffer@^5.1.0, safe-buffer@~5.1.0, safe-buffer@~5.1.1:\n+safe-buffer@~5.1.0, safe-buffer@~5.1.1:\n   version \"5.1.2\"\n   resolved \"https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.1.2.tgz#991ec69d296e0313747d59bdfd2b745c35f8828d\"\n   integrity sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\n@@ -4291,16 +4288,17 @@ sync-rpc@^1.2.1:\n     get-port \"^3.1.0\"\n \n tar@^4:\n-  version \"4.4.8\"\n-  resolved \"https://registry.yarnpkg.com/tar/-/tar-4.4.8.tgz#b19eec3fde2a96e64666df9fdb40c5ca1bc3747d\"\n-  dependencies:\n-    chownr \"^1.1.1\"\n-    fs-minipass \"^1.2.5\"\n-    minipass \"^2.3.4\"\n-    minizlib \"^1.1.1\"\n-    mkdirp \"^0.5.0\"\n-    safe-buffer \"^5.1.2\"\n-    yallist \"^3.0.2\"\n+  version \"4.4.19\"\n+  resolved \"https://registry.yarnpkg.com/tar/-/tar-4.4.19.tgz#2e4d7263df26f2b914dee10c825ab132123742f3\"\n+  integrity sha512-a20gEsvHnWe0ygBY8JbxoM4w3SJdhc7ZAuxkLqh+nvNQN2IOt0B5lLgM490X5Hl8FF0dl0tOf2ewFYAlIFgzVA==\n+  dependencies:\n+    chownr \"^1.1.4\"\n+    fs-minipass \"^1.2.7\"\n+    minipass \"^2.9.0\"\n+    minizlib \"^1.3.3\"\n+    mkdirp \"^0.5.5\"\n+    safe-buffer \"^5.2.1\"\n+    yallist \"^3.1.1\"\n \n textarea-caret@3.0.2:\n   version \"3.0.2\"\n@@ -4789,9 +4787,10 @@ y18n@^3.2.1:\n   resolved \"https://registry.yarnpkg.com/y18n/-/y18n-3.2.1.tgz#6d15fba884c08679c0d77e88e7759e811e07fa41\"\n   integrity sha1-bRX7qITAhnnA136I53WegR4H+kE=\n \n-yallist@^3.0.0, yallist@^3.0.2:\n-  version \"3.0.3\"\n-  resolved \"https://registry.yarnpkg.com/yallist/-/yallist-3.0.3.tgz#b4b049e314be545e3ce802236d6cd22cd91c3de9\"\n+yallist@^3.0.0, yallist@^3.1.1:\n+  version \"3.1.1\"\n+  resolved \"https://registry.yarnpkg.com/yallist/-/yallist-3.1.1.tgz#dbb7daf9bfd8bac9ab45ebf602b8cbad0d5d08fd\"\n+  integrity sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==\n \n yallist@^4.0.0:\n   version \"4.0.0\""
    }
  ]
}
