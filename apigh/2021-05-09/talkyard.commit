{
  "sha": "0228cfe28a122e39b4001b831226b8ef5bec9d64",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6MDIyOGNmZTI4YTEyMmUzOWI0MDAxYjgzMTIyNmI4ZWY1YmVjOWQ2NA==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2021-05-04T19:55:32Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2021-05-04T19:55:32Z"
    },
    "message": "Merge v0.2021.13 into 'release'.",
    "tree": {
      "sha": "c18926b135e0eba8beec6c56985b8cb431ce6cac",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/c18926b135e0eba8beec6c56985b8cb431ce6cac"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/0228cfe28a122e39b4001b831226b8ef5bec9d64",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/0228cfe28a122e39b4001b831226b8ef5bec9d64",
  "html_url": "https://github.com/debiki/talkyard/commit/0228cfe28a122e39b4001b831226b8ef5bec9d64",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/0228cfe28a122e39b4001b831226b8ef5bec9d64/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b45a9a96101265e4a4ad52c416b406940c554098",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/b45a9a96101265e4a4ad52c416b406940c554098",
      "html_url": "https://github.com/debiki/talkyard/commit/b45a9a96101265e4a4ad52c416b406940c554098"
    },
    {
      "sha": "d8b27509a335bd76f4bb00d4a286aa69f2c23c46",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/d8b27509a335bd76f4bb00d4a286aa69f2c23c46",
      "html_url": "https://github.com/debiki/talkyard/commit/d8b27509a335bd76f4bb00d4a286aa69f2c23c46"
    }
  ],
  "stats": {
    "total": 1156,
    "additions": 1080,
    "deletions": 76
  },
  "files": [
    {
      "sha": "e6527776b5b769047d926fb88bda29b244beb0b1",
      "filename": "README.md",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/README.md",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/README.md",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/README.md?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -15,7 +15,9 @@ to do, to change society, or grow your startup.\n Talkyard\n =============================\n \n-A community discussion platform — brings together the main features from\n+<!-- Community discussion platform, or Structured discussion platform? A/B test?\n+Or \"Structured discussions, for your community — Talkyard brings together ...\" ? -->\n+A structured discussions platform — brings together the main features from\n StackOverflow, Slack, Discourse, Reddit/HackerNews, and Disqus blog comments.\n \n <!--\n@@ -35,7 +37,13 @@ For your co-workers / customers /\n students / volunteers /\n contributors / users.\n \n-But how does it compare with\n+You can use Slack and Mattermost etc for day to day teamwork,\n+combined with Talkyard for the more important discussions\n+that you want to find in a nice-to-read format, months and years later.\n+\n+Or use Talkyard for customer support, or for schools and students helping each other.\n+\n+How does Talkyard compare with\n StackOverflow for Teams, Discourse, Slack, Facebook Groups, Disqus?<br>\n — <a href=\"https://www.talkyard.io/compared-with\">Find out here.</a>\n "
    },
    {
      "sha": "8ada0842e5847285ed07540f30e8729edc0979d2",
      "filename": "app/controllers/LoginWithOpenAuthController.scala",
      "status": "modified",
      "additions": 52,
      "deletions": 6,
      "changes": 58,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/app/controllers/LoginWithOpenAuthController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/app/controllers/LoginWithOpenAuthController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/LoginWithOpenAuthController.scala?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -555,25 +555,33 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     *  to an existing Ty account] page.\n     */\n   def authnRedirBack(protocol: St, providerAlias: St,\n-          state: St, session_state: Option[St], code: St): Action[U]\n+          state: St, session_state: Option[St], code: Opt[St],\n+          error: Opt[St], error_description: Opt[St], error_uri: Opt[St]): Action[U]\n           = AsyncGetActionIsLoginRateLimited { redirBackRequest =>\n+\n     authnRedirBackImpl(protocol, providerAlias = providerAlias, state = state,\n-          session_state = session_state, code = code, redirBackRequest)\n+          session_state = session_state, anyCode = code,\n+          anyError = error, anyErrDescr = error_description, anyErrUrl = error_uri,\n+           redirBackRequest)\n   }\n \n \n   private def authnRedirBackImpl(protocol: St, providerAlias: St,\n-          state: St, session_state: Option[St], code: St, redirBackRequest: GetRequest)\n+          state: St, session_state: Opt[St], anyCode: Opt[St],\n+          anyError: Opt[St], anyErrDescr: Opt[St], anyErrUrl: Opt[St],\n+          redirBackRequest: GetRequest)\n           : Future[p_Result] = {\n \n     import redirBackRequest.{dao, siteId}\n \n     logger.debug(i\"\"\"\n           |s$siteId: Req to OAuth2 redirect uri:\n           |  State: $state\n-          |  Code: $code\n+          |  Code: $anyCode\n+          |  Error: $anyError\n           |  Session state: $session_state\"\"\")\n \n+    // The 'state' param needs to be valid, also if there's any error, so check it first.\n     val authnState = getAuthnStateOrThrow(state, \"redir_back\", authnViaSiteId = siteId,\n           // Keep the authn state — instead, we increment a useCount below,\n           // and if > 1, we show a user friendly error message.\n@@ -588,6 +596,26 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     logger.debug(s\"s$siteId: Authn state: $authnState\\n\")\n     dieIf(authnState.stateString != state, \"TyE3M06KD24\")\n \n+    anyError foreach { error =>\n+      // Error query params:  [admin_log]\n+      // error_description: Optional Human-readable ASCII encoded error description.\n+      // error_uri: Optional web page w additional info about the error.\n+      // See: https://openid.net/specs/openid-connect-core-1_0.html#AuthError\n+      val errMsg = o\"\"\"Redirback OAuth2 $protocol $providerAlias auth error:\n+            $error, description: \"$anyErrDescr\", read more: $anyErrUrl,\n+            redirback request URL: ${redirBackRequest.uri}\"\"\"\n+      logger.warn(s\"s$siteId: $errMsg\")\n+      throwForbidden(\"TyEOAUREDIRERR\", errMsg)\n+    }\n+\n+    val code = anyCode getOrElse {\n+      // No code? That's a problem with the IDP or sth else, not Ty.  [admin_log]\n+      val errMsg = s\"Redirback OAuth2 code missing, $protocol ${providerAlias\n+            }, redirback request URL: ${redirBackRequest.uri}\"\n+      logger.info(s\"s$siteId: $errMsg\")\n+      throwForbidden(\"TyEOAUREDIR0CODE\", errMsg)\n+    }\n+\n     val useCount = authnState.oauth2StateUseCount.incrementAndGet()\n     throwForbiddenIf(useCount >= 2, \"TyEOAUSTATEUSED\",\n           s\"Trying to use one-time OAuth2 redirect-back-URI $useCount times\")\n@@ -1154,7 +1182,11 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n       val anyCode = request.queryString.getFirst(\"code\")\n       val anySessionState = request.queryString.getFirst(\"session_state\")\n       authnRedirBackImpl(ProtoNameOAuth2, providerAlias = providerName,\n-            state = anyState.get, session_state = anySessionState, code = anyCode.getOrElse(\"\"),\n+            state = anyState.get, session_state = anySessionState,\n+            anyCode = anyCode,\n+            anyError = request.queryString.getFirst(\"error\"),\n+            anyErrDescr = request.queryString.getFirst(\"error_description\"),\n+            anyErrUrl = request.queryString.getFirst(\"error_uri\"),\n             request)\n     }\n     else {\n@@ -1791,7 +1823,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     val matchingTyUser = authnState.matchingTyUser getOrDie \"TyE004MKP202\"\n     val extIdentity = authnState.extIdentity getOrDie \"TyE6M9MXK201\"\n \n-    val tryLoginAgainUrl =\n+    var tryLoginAgainUrl =\n           originOf(request) +\n           controllers.routes.LoginWithOpenAuthController.authnStart(\n               protocol = authnState.protocol,\n@@ -1806,13 +1838,27 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n               // question again.\n               selectAccountAtIdp = Some(!shallLink)).url\n \n+    // Remember to close any popup after login.\n+    if (authnState.isInLoginPopup) {\n+      tryLoginAgainUrl += \"&isInLoginPopup\"\n+    }\n+    // Remember this too — not impossible that the Talkyard user somehow gets\n+    // deleted, whilst pat logs again via the IDP, and then we shouldn't show\n+    // any create-Ty-user dialog.\n+    if (!authnState.mayCreateUser) {\n+      tryLoginAgainUrl += \"&mayNotCreateUser\"\n+    }\n+\n     val idpName = dao.getIdentityProviderNameFor(extIdentity) getOrThrowForbidden(\n           \"TyEIDPGONE\", s\"IDP gone: ${extIdentity.prettyIdpId}\")\n \n     if (!shallLink) {\n       // Send the user back to the IDP authn page, where hen can login\n       // using a different IDP account or maybe create a new account.\n       // What else is there to do?\n+      // Maybe just close the login dialog / popup instead,\n+      // and let the user click Log In henself, don't auto-do?\n+\n       CSP_MISSING\n       Ok(views.html.login.accountsNotLinkedPleaseLoginAgain(\n             tpi = SiteTpi(request,"
    },
    {
      "sha": "41d5117f98457b7485868d1f7bed647cad1f0f73",
      "filename": "app/debiki/dao/SettingsDao.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/app/debiki/dao/SettingsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/app/debiki/dao/SettingsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/SettingsDao.scala?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -152,7 +152,7 @@ trait SettingsDao {\n         // Admin can login?\n         // Check that the current admin can login via a currently enabled IDP,\n         // so hen won't lock henself out.\n-        TESTS_MISSING\n+        // Test: oidc-azure-login-required.2br.extidp  TyTE2E60RTE24.TyTOIDCSSO\n         val (admin: User, adminsIdentities: Seq[Identity]) =\n               adminsAndIdentities.find(_._1.id == byWho.id) getOrDie \"TyE5MGRT4\"\n         dieIf(admin.id != byWho.id, \"TyE36KRST743\")\n@@ -176,7 +176,7 @@ trait SettingsDao {\n         // If the admin hasn't logged in with any now enabled IDP, hen is\n         // somewhat likely locking henself out.\n         if (adminsEnabledIdentity.isEmpty) {\n-          throwBadRequest(\"TyEADM0LGI2\", o\"\"\"You cannot restrict login to\n+          throwBadRequest(\"TyEADM0LGI2_\", o\"\"\"You cannot restrict login to\n                only custom OIDC or OAuth2, before you have logged in yourself\n                in that way, so you know it actually works.\"\"\")\n         }"
    },
    {
      "sha": "3b8da2558383d2330436d394da9e2d8018ad5a46",
      "filename": "app/views/login/accountsLinkedPleaseLoginAgain.scala.html",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/app/views/login/accountsLinkedPleaseLoginAgain.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/app/views/login/accountsLinkedPleaseLoginAgain.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/login/accountsLinkedPleaseLoginAgain.scala.html?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -20,7 +20,7 @@ <h1>Done: Accounts linked.</h1>\n </p>\n \n <p>\n-  <a href=\"@tryAgainUrlNewNonce\" class=\"btn btn-primary\">Login again</a>\n+  <a href=\"@tryAgainUrlNewNonce\" class=\"btn btn-primary e_LogInAgain\">Login again</a>\n </p>\n \n }"
    },
    {
      "sha": "9ab7075388c7fbbc8595a30ee6e0663e07cbd064",
      "filename": "app/views/login/askIfLinkAccounts.scala.html",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/app/views/login/askIfLinkAccounts.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/app/views/login/askIfLinkAccounts.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/login/askIfLinkAccounts.scala.html?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -34,13 +34,14 @@ <h1>Link accounts?</h1>\n  SECURITY TODO compare origNonceBack with the local storage nonce.  [br_authn_nonce]\n *@\n <p>\n- @youHaveOrThereIs an account here with email address <tt>@oldEmailAddr</tt>,\n- username <tt>@oldUsername</tt>, created on @createdOnDate.\n+ @youHaveOrThereIs an account here with email address\n+ <tt class=\"e_EmAdr\">@oldEmailAddr</tt>,\n+ username <tt class=\"e_TyUn\">@oldUsername</tt>, created on @createdOnDate.\n </p>\n \n @* [act_fx_atk] *@\n @if(!oldEmailVerified) {\n-<p>BUT that other account <b>has not verified its email address</b>!</p>\n+<p class=\"e_ActFxAtk\">BUT that other account <b>has not verified its email address</b>!</p>\n <p>Maybe someone else, not you, created it?</p>\n <p>\n <b>Are you sure it's your account?</b>\n@@ -51,8 +52,8 @@ <h1>Link accounts?</h1>\n }\n \n <p>\n- Now you're trying to login via: <i>@idpName</i>,\n- as user <tt>@newIdentityNameOrEmailOrId</tt>,\n+ Now you're logging in via: <i class=\"e_IdpName\">@idpName</i>,\n+ as user <tt class=\"e_NameAtIdp\">@newIdentityNameOrEmailOrId</tt>,\n  with <b>the same email address</b>.\n </p>\n "
    },
    {
      "sha": "916a54e2898d990f684f39a08e453480582cf404",
      "filename": "client/app-more/login/login-dialog.more.ts",
      "status": "modified",
      "additions": 45,
      "deletions": 10,
      "changes": 55,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-more/login/login-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-more/login/login-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/login/login-dialog.more.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -39,7 +39,7 @@ const EmailInput = util.EmailInput;\n let loginDialog;\n \n \n-export function getLoginDialog() {   // also called from Scala template\n+export function getLoginDialog(): AuthnDlgIf {   // also called from Scala template\n   if (!loginDialog) {\n     loginDialog = ReactDOM.render(LoginDialog(), utils.makeMountNode());\n   }\n@@ -143,7 +143,7 @@ const LoginDialog = createClassAndFactory({\n       return;\n     }\n \n-    this.clearLoginRelatedCookies();\n+    this.setLoginRelatedCookies();\n     if (!anyReturnToUrl) {\n       anyReturnToUrl = window.location.toString();\n     }\n@@ -194,18 +194,47 @@ const LoginDialog = createClassAndFactory({\n   /**\n    * Clears login related cookies so e.g. any lingering return-to-url won't cause troubles.\n    */\n-  clearLoginRelatedCookies: function() {\n+  setLoginRelatedCookies: function() {\n     getSetCookie('dwCoReturnToUrl', null);\n     getSetCookie('dwCoReturnToSite', null);\n     // Don't clear dwCoReturnToSiteXsrfToken — that'd break parallel login, [PRLGIN]\n     // and break OAuth login if opens the login dialog, clicks \"Google\" to open a Google\n     // login popup, then closes and reopens the login dialog, and then logs in at Google\n     // in the popup.\n-    getSetCookie('dwCoIsInLoginWindow', null);\n     getSetCookie('dwCoIsInLoginPopup', null);\n     getSetCookie('dwCoMayCreateUser', null);\n     getSetCookie('dwCoOAuth2State', null);\n     getSetCookie('esCoImp', null);\n+\n+    if (!eds.isInLoginWindow) {\n+      // We're in a login popup, not in a dedicated \"full screen\" login window.\n+      getSetCookie('dwCoIsInLoginWindow', null);\n+    }\n+    else {\n+      // Later, remove dupl [.687263] below.\n+      //\n+      // Let the server know we're in a login window, so it can choose to reply with\n+      // complete HTML pages to show in this window — rather than trying to tell\n+      // a non-existing window.opener to continue (e.g. creating a new Ty account).\n+      //\n+      // Use a cookie not an URL param because the cookie will be present later whe we're\n+      // being redirected back to the server from the OpenAuth provider\n+      // CLEAN_UP when removing Silhouette: Now, year 2020, 2021, cookie not needed?\n+      // Now remembered via URL param in OngoingAuthnState,isInLoginPopup.\n+      getSetCookie('dwCoIsInLoginWindow', 'true');\n+\n+      // Maybe we're in a blog comments login popup? Then, cookies might not work,\n+      // in the blog comments iframes — then, tell the server\n+      // to include the session id in the response body, so we can access it browser side.\n+      // Also see Server.ts. [NOCOOKIES]\n+      const mainWin = getMainWin();\n+      if (!win_canUseCookies(mainWin)) {\n+        // (We can use cookies here in this login window — they're 1st party cookies.\n+        // But not in the main window — which should be an embedded comments iframe,\n+        // that is, 3rd party cookies, blocked.)\n+        getSetCookie('TyCoAvoidCookies', 'Avoid');\n+      }\n+    }\n   },\n \n   close: function() {\n@@ -289,11 +318,12 @@ interface LoginDialogContentProps {\n \n \n /**\n- * This is a separate component because on embedded discussion pages, it's placed directly\n- * in a popup window with no modal dialog around.\n+ * (This no longer needs to be a separate component. In the past, in embedded\n+ * discussions, it was placed directly in a popup window, no modal dialog around.)\n+ *\n  * RENAME to AuthnDlg and file too?\n  */\n-export const LoginDialogContent = createClassAndFactory({\n+const LoginDialogContent = createClassAndFactory({\n   displayName: 'LoginDialogContent',\n \n   componentDidMount: function() {\n@@ -326,7 +356,7 @@ export const LoginDialogContent = createClassAndFactory({\n       shallRedir = true;\n     }\n     else if (ssoUrl && eds.isInLoginPopup) {\n-      // Then, since this site is Single Sign-On, there'd be nothing to\n+      // Then, since this site is Single Sign-On, there'd be nothing to  [insta_sso_redir]\n       // choose among in this login popup — so redirect to the ssoUrl directly.\n       // But, let's wait with changing any old behavior. For now, only\n       // redirect, if useOnlyCustomIdps (new OIDC related code).\n@@ -336,7 +366,7 @@ export const LoginDialogContent = createClassAndFactory({\n \n     if (shallRedir) {\n       // Don't think we want to open a popup here — we're in a full screen\n-      // login window already?  Although we do here: [2ABKW24T].\n+      // login window already?  We do if in an iframe: [2ABKW24T].\n       logD(`Redir to SSO url`)\n       location.assign(ssoUrl);\n     }\n@@ -659,8 +689,12 @@ const ExtIdpAuthnBtn = createClassAndFactory({\n     const url = origin() + urlPathAndQuery;\n \n     if (eds.isInLoginWindow) {\n+      // --- CLEAN_UP REMOVE this -------------\n+      // This is now here: [.687263] instead, so the cookies get set also if using SSO.\n+      //\n       // Let the server know we're in a login window, so it can choose to reply with\n-      // complete HTML pages to show in the login window.\n+      // complete HTML pages to show in this window (rather than trying to tell\n+      // a non-existing window.opener to finish the login signup).\n       // (Use a cookie not an URL param because the cookie will be present later whe we're\n       // being redirected back to the server from the OpenAuth provider.)\n       getSetCookie('dwCoIsInLoginWindow', 'true');\n@@ -675,6 +709,7 @@ const ExtIdpAuthnBtn = createClassAndFactory({\n         // that is, 3rd party cookies, blocked.)\n         getSetCookie('TyCoAvoidCookies', 'Avoid');\n       }\n+      // --------------------------------------\n       window.location.assign(url);\n     }\n     else {"
    },
    {
      "sha": "bc7f401ddbf9d2adef160833270e1058bb080a16",
      "filename": "client/app-more/more-bundle-already-loaded.d.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-more/more-bundle-already-loaded.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-more/more-bundle-already-loaded.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/more-bundle-already-loaded.d.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -92,7 +92,7 @@ declare namespace debiki2.edithistory {\n \n declare namespace debiki2.login {\n \n-  function getLoginDialog();\n+  function getLoginDialog(): AuthnDlgIf;\n \n }\n "
    },
    {
      "sha": "95464b352cea2e30eae108e2774e2c640807f05f",
      "filename": "client/app-slim/forum/forum.ts",
      "status": "modified",
      "additions": 21,
      "deletions": 3,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-slim/forum/forum.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-slim/forum/forum.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/forum/forum.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -246,6 +246,11 @@ export const ForumComponent = createReactClass(<any> {\n       ? HelpMessageBox({ message: topicsAndCatsHelpMessage, className: 'esForum_topicsCatsHelp' })\n       : null; */\n \n+    const linkWapper =\n+            store_isFeatFlagOn(store, 'ffNav') ? r.nav : (\n+                store_isFeatFlagOn(store, 'ffAside') ? r.aside : (\n+                    store_isFeatFlagOn(store, 'ffSection') ? r.section : r.div));\n+\n     const rootSlash = forumPath;\n     const childRoutes = r.div({},\n       Switch({},\n@@ -256,13 +261,24 @@ export const ForumComponent = createReactClass(<any> {\n         // [React_Router_v51] skip render(), use hooks and useParams instead.\n         Route({ path: rootSlash + RoutePathCategories, exact: true, strict: true, render: (props) => {\n           const propsWithRouterStuff = { ...childProps, ...props, isCategoriesRoute: true };\n-          return r.div({},\n+          // Don't use <div> — then DuckDuckGo and Bing can mistake this\n+          // topic/category list page, from being a contents page, and show it\n+          // in the search results, instead of the real contents page.\n+          // MDN: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav\n+          //  >  <nav> element represents a section of a page whose purpose is\n+          //  >  to provide navigation links\n+          // And that's what the topic / category list is — providing links\n+          // to the actual topics / categories.\n+          //\n+          // Configurable, for now — just trying with <nav>.\n+          //\n+          return linkWapper({},  // or <aside> or <section> ?\n             ForumButtons(propsWithRouterStuff),\n             LoadAndListCategories(propsWithRouterStuff));\n         }}),\n         Route({ path: rootSlash + ':sortOrder?/:categorySlug?', strict: true, render: (props) => {\n           const propsWithRouterStuff = { ...childProps, ...props };\n-          return r.div({},\n+          return linkWapper({},\n             ForumButtons(propsWithRouterStuff),\n             LoadAndListTopics(propsWithRouterStuff));\n         }})));\n@@ -322,8 +338,10 @@ const ForumIntroText = createComponent({\n               t.fi.Hide_3)));  // \"... to reopen\"\n \n     return (\n+        // The intro text is typically self-contained content, a brief summary\n+        // of the purpose with the forum. — So use the <article> tag.\n         r.div({ className: 'esForumIntro' },\n-          r.div({ dangerouslySetInnerHTML: { __html: introPost.sanitizedHtml }}),\n+          r.article({ dangerouslySetInnerHTML: { __html: introPost.sanitizedHtml }}),\n           anyForumIntroButtons));\n   }\n });"
    },
    {
      "sha": "90dafc72c348b5381bb7c3b8015bd73583f0ba87",
      "filename": "client/app-slim/login/login-popup.js",
      "status": "modified",
      "additions": 15,
      "deletions": 4,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-slim/login/login-popup.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-slim/login/login-popup.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/login/login-popup.js?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -33,14 +33,25 @@ d.i.createLoginPopup = function(url) {\n   var anyProtocol = /^https?:/.test(url) ? '' : (\n       eds.isInIframe ? (eds.secure ? 'https:' : 'http:') : '');\n \n-  // Here is described how to configure the popup window:\n-  // http://svn.openid.net/repos/specifications/user_interface/1.0/trunk\n-  //    /openid-user-interface-extension-1_0.html\n+  // Window features:\n+  // https://developer.mozilla.org/en-US/docs/Web/API/Window/open#window_features\n+  // For boolean features, '1' and 'yes' and '0' and 'no' means true and false.\n   var popupWindow = window.open(anyProtocol + url, windowName,\n       'width='+ width +',height='+ height +\n-      ',status=1,location=1,resizable=yes'+\n+      ',status=1,location=1,resizable=1'+\n       ',left='+ coordinates[0] +',top='+ coordinates[1]);\n \n+  // If !popupWindow — maybe login window blocked by a popup blocker.\n+  // However typically won't happen, since the open-window code runs only when\n+  // the human clicks a login button — and then popup blockers realize that the human\n+  // wants the popup window to open.\n+  if (!popupWindow) {\n+    // use logW instead  CLEAN_UP  and change this file to Typescript\n+    console.warn(\"Error opening login popup window. A malfunctioning popup blocker?\");\n+    // Continue anyway, so waitForPopupClose() below gets to clean up any\n+    // login UI widgets / styles.\n+  }\n+\n   // A check to perform at each execution of the timed loop. It also triggers\n   // the action that follows the closing of the popup\n   var waitCallback = window.setInterval(waitForPopupClose, 80);"
    },
    {
      "sha": "130aa96ca94bec6ccfc355779e94a762906473c2",
      "filename": "client/app-slim/model.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-slim/model.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-slim/model.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/model.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -905,8 +905,8 @@ interface Store extends Origins, PartialEditorStoreState {\n \n   // Maybe move these to a Site interface?\n   siteStatus: SiteStatus;\n-  siteFeatureFlags?: St;\n-  serverFeatureFlags?: St;\n+  siteFeatureFlags?: St;    // use store_isFeatFlagOn; don't access directly\n+  serverFeatureFlags?: St;  //\n   siteOwnerTermsUrl?: string;\n   siteOwnerPrivacyUrl?: string;\n   isFirstSiteAdminEmailMissing?: boolean;\n@@ -1727,6 +1727,17 @@ interface IdentityProviderSecretConf extends IdentityProviderPubFields {\n // =========================================================================\n \n \n+/// Authentication dialog\n+interface AuthnDlgIf {\n+  openToLogIn: (loginReason: LoginReason,\n+        anyReturnToUrl?: St, callback?: () => Vo, preventClose?: Bo) => Vo;\n+  openToSignUp: (loginReason: LoginReason, anyReturnToUrl?: St,\n+        callback?: () => Vo, preventClose?: Bo) => Vo;\n+  getDoAfter: () => [() => U | U, St | U];\n+  close: () => Vo;\n+}\n+\n+\n /// For rendering category trees.\n interface CatsTree {\n   rootCats: CatsTreeCat[];"
    },
    {
      "sha": "9f55203039917f6f78cf3563388323b9d7c562c1",
      "filename": "client/app-staff/admin/admin-app.staff.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-staff/admin/admin-app.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/client/app-staff/admin/admin-app.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-staff/admin/admin-app.staff.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -834,7 +834,7 @@ const LoginAndSignupSettings = createFactory({\n \n         enableTySso || !allowSignup || !enableCustomIdps || this.state.showOidcConfig ? null :\n             Button({ onClick: () => this.setState({ showOidcConfig: true }),\n-                  className: 'col-sm-offset-3' },\n+                  className: 'col-sm-offset-3 e_ConfIdpsB' },\n               \"Configure Identity Providers (IDPs) ...\"),\n \n         enableTySso || !allowSignup || !enableCustomIdps ? null : Setting2(props, {\n@@ -859,10 +859,10 @@ const LoginAndSignupSettings = createFactory({\n           }\n         }),\n \n-        // CLEAN_UP REFACTOR use Setting2 instead, the  anyChildren param.\n+        // CLEAN_UP REFACTOR use Setting2 instead, the  anyChildren param. [nice_oidc_conf_ux]\n         enableTySso || !allowSignup || !enableCustomIdps || !this.state.showOidcConfig ? null :\n             r.div({ className: 's_A_Ss_S s_CuIdpsEdr' },\n-              Input({ type: 'textarea', label: rFragment({},\n+              Input({ type: 'textarea', label: rFr({},\n                   \"ODIC or OAuth2 config\", r.br(),\n                   \"(in JSON, for now)\"),\n                 labelClassName: 'col-sm-3 s_A_Ss_S s_A_Ss_S-Textarea',"
    },
    {
      "sha": "debf45fae2edcc7e3939d17f024b6f4b9669338f",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/conf/routes",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/conf/routes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf/routes?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -34,7 +34,7 @@ GET   /-/login-password-confirm-email controllers.LoginWithPasswordController.co\n \n GET   /-/authn/:protocol/:providerAlias           controllers.LoginWithOpenAuthController.authnStart(protocol, providerAlias, returnToUrl, nonce, useServerGlobalIdp: Option[Boolean], selectAccountAtIdp: Option[Boolean])\n GET   /-/authn/continue-at-authn-origin           controllers.LoginWithOpenAuthController.continueAtAuthnOrigin(secretNonce)\n-GET   /-/authn/:protocol/:providerAlias/redirback controllers.LoginWithOpenAuthController.authnRedirBack(protocol, providerAlias, state, session_state: Option[String], code)\n+GET   /-/authn/:protocol/:providerAlias/redirback controllers.LoginWithOpenAuthController.authnRedirBack(protocol, providerAlias, state, session_state: Option[String], code: Option[String], error: Option[String], error_description: Option[String], error_uri: Option[String])\n GET   /-/authn/finish-at-orig-site                controllers.LoginWithOpenAuthController.finishAtOrigSite(secretNonce)\n \n GET   /-/authn/verif-email-ask-if-link-accounts   controllers.LoginWithOpenAuthController.verifyEmailAskIfLinkAccounts(secretNonce)"
    },
    {
      "sha": "f29619cf9d33512180ddf330e0354d96d0e7290d",
      "filename": "docs/bem-blocks.txt",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/docs/bem-blocks.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/docs/bem-blocks.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/bem-blocks.txt?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -57,6 +57,7 @@ L   = list, when at the end, e.g.:  '..._IdpsL' for Identity Providers list\n Ld  = load, Ldng = loading\n LD  = Log in Dialog, RENAME to AuD = Authn Dialog\n Lg  = large (screen), also: Sm, Md Xl\n+LgI = log in, also SgU = sign up, and Au = Authentication, e.g. AuD\n Ls  = list\n Lt  = less than, Gt = greater than\n Ln  = link — like `ln -s ...` in Linux. E.g. LnPv = Link Preview.\n@@ -77,8 +78,6 @@ Pb  = pagebar\n Pf  = preference, e.g. NfPfs = notification preferences\n Py  = property?\n Pw  = password, e.g. NwPwI\n-St = status or state\n-Stc = static, Fxd = fixed\n R = table row,  NO, should be Rw, and Cl = column\n U  = user\n FI = file input\n@@ -96,12 +95,15 @@ Rs  = risk, e.g. RsLv = risk level\n Rw, Row = row, Col = column\n Sav = save\n Sch = Search\n+SgU = sign up, also LgI = log in, and Au = Authentication, e.g. AuD\n Sm  = small (screen), also: Md, Lg, Xl\n Sub = \"sub\" as in \"sub category\"\n Sub = submit NO, CLEAN_UP, insetad:\n Sbm = submit\n-Sz  = size\n Snz = Snooze\n+St = status or state\n+Stc = static, Fxd = fixed\n+Sz  = size\n T   = table\n Tab = tab\n Tb  = Topbar, or Tab (when at the end)   RENAME esTopbarWrap to s_Tb"
    },
    {
      "sha": "d1d972f3be0455ac8504071e563ad6914bbec644",
      "filename": "docs/e2e-tests-map.txt",
      "status": "modified",
      "additions": 47,
      "deletions": 5,
      "changes": 52,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/docs/e2e-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/docs/e2e-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-map.txt?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -111,10 +111,9 @@ authn:\n   login directly to admin area\n     with oidc,\n     with server default oauth2:\n-          - TESTS_MISSING?  TyTE2E503RK24\n+          - see ^oidc\n \n oauth2,\n-oidc,\n ext idps:\n   keycloak:\n     sign up, log in with Keycloak,\n@@ -137,6 +136,47 @@ ext idps:\n     link to existing account: (if migrating to Azure SSO)\n           - TESTS_MISSING\n \n+oidc,\n+external idps,\n+custom idps:\n+  enable oidc sso:\n+            - oidc-azure-login-required.2br.extidp.test.ts  TyTE2E60RTE24.TyTOIDCSSO\n+  link to existing Ty accuont:\n+    ext email already verified:\n+            - oidc-azure-login-required.2br.extidp.test.ts  TyTE2E60RTE24.TyTOIDCLNVERACT\n+    ext email not yet verified:\n+\n+  Ty account approval required:\n+            - TESTS_MISSING  Skip for now, \"always\" handled at IDP instead.\n+\n+  linking ext IDP account question text placeholders filled in correctly:\n+            - oidc-azure-login-required.2br.extidp  TyTE2E60RTE24.TyTLNIDP2TY043\n+\n+  # Lots of combos! 1*4*(1 + 1 + 3 + 3) = 32. Inherent complexity.\n+  linking external IDP account:\n+  All this tested here and here:\n+            - oidc-azure-pub-site.2br.extidp  TyTE2EOIDCAZ02\n+            - oidc-azure-login-required.2br.extidp  TyTE2E60RTE24\n+    public site and IDP SSO,\n+    public site and no SSO,\n+    login required and IDP SSO,\n+    login required but no SSO:\n+      login to admin area:\n+        IDP email verified:\n+          Ty acct, email verified:\n+        IDP email unverified:\n+          Ty acct, email verified:\n+      login to discussion:\n+        IDP email verified:\n+          no Ty acct\n+          Ty acct, email verified:\n+          Ty acct, email not verified:\n+            - TESTS_MISSING  TyTE2E60RTE24.TyTE2EIDPTYEMLUNVER\n+        IDP email unverified:\n+          no Ty acct\n+          Ty acct, email verified:\n+          Ty acct, email not verified:\n+            - TESTS_MISSING  TyTE2E60RTE24.TyTE2EIDPTYEMLUNVER\n \n \n sso,\n@@ -706,9 +746,11 @@ embedded comments:\n           - embedded-comments-vote-first.test.ts  TyT2AKBS056\n           - embedded-comments-scroll  TyT2K4DHR49-02\n   (50279460),\n-  scroll and load #comment-nnn,\n+  scroll and show #comment-n:\n+          - embedded-comments-scroll  TyT2K4DHR49-05\n+  scroll and load #comment-nnn:\n+          - embedded-comments-scroll-and-load-more.2browsers.test.ts  TyT603MRKH592S.TyT03RMET742M\n   load more comments:\n-          - embedded-comments-scroll  TyT2K4DHR49-05   MISSING\n           - embedded-comments-scroll-and-load-more.2browsers.test.ts  TyT603MRKH592S\n   won't auto scroll to last read comment:\n   (usually the blog post more interesting? so don't auto scroll):\n@@ -717,7 +759,7 @@ embedded comments:\n   auto scrolls to #comment-N:\n           - embedded-comments-scroll-embedding-page.test.ts  TyT2K4DHR49\n   import with discussion id:\n-          - embedded-comments-scroll  TyT2K4DHR49   MISSING\n+          - MISSING\n   import from Disqus xml export file:  (impexp)\n           - embedded-comments-create-site-import-disqus.2browsers.test.ts  TyT5KFG0P75\n   image links work although <base> tag: (EMBORG)"
    },
    {
      "sha": "4a37879b63ad61049b8876f88117f013c587f218",
      "filename": "images/web/ed-lua/init-by-lua-file.lua",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/images/web/ed-lua/init-by-lua-file.lua",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/images/web/ed-lua/init-by-lua-file.lua",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/images/web/ed-lua/init-by-lua-file.lua?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -101,8 +101,9 @@ require(\"resty.acme.autossl\").init({\n \n         -- 2XX is an ok response, and 30X are various redirects. We need to\n         -- generate certs also for redirect responses, otherwise the browser shows\n-        -- a cert warning, instead of following the redirect, if a site got moved\n-        -- to another domain.\n+        -- a cert warning, instead of following the redirect — this'd happen if\n+        -- 1) a site got moved to another domain, or 2) if a site is login-required;\n+        -- then, one gets redirected to the login page.\n         local status = req_res.status\n         if status < 200 or 308 < status then\n             ngx.log(ngx.INFO, \"Should not have cert: \" .. domain .. \" [TyMGENCRTNO]\")"
    },
    {
      "sha": "5c19102d3d1e64f4173cb19ca5a477cdecc05fbd",
      "filename": "node_modules",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/node_modules?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -1 +1 @@\n-Subproject commit 1f6a02134900b21752f980563438c067032d2ab2\n+Subproject commit 5c19102d3d1e64f4173cb19ca5a477cdecc05fbd"
    },
    {
      "sha": "e743769b4cc3bcc814e10c4cc95bfbfc65fed303",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans/tyse-v0-dev?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -1 +1 @@\n-Subproject commit d8bd824f9f59777d75fb39820c45a41848fcb2fd\n+Subproject commit e743769b4cc3bcc814e10c4cc95bfbfc65fed303"
    },
    {
      "sha": "3c55d0b7c7c047d615af0b6db584815a55496ddf",
      "filename": "relchans/tyse-v0-regular",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans/tyse-v0-regular?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -1 +1 @@\n-Subproject commit aaa8e527d41c2ebba3ac0dd4a98d451453f2dba7\n+Subproject commit 3c55d0b7c7c047d615af0b6db584815a55496ddf"
    },
    {
      "sha": "2bf21d5687590d96e3ccd64db905cdbcd3975bd1",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -296,6 +296,10 @@ function runAllE2eTests {\n   $r s/wdio --only create-site-linkedin.1br.extidp $args\n   $r s/wdio --only create-site-admin-guide.2browsers $args\n   $r s/wdio --only oauth-signup-signin $args\n+\n+  $r s/wdio --only oidc-azure-login-required.2br.extidp $args\n+  $r s/wdio --only oidc-azure-pub-site.2br.extidp $args\n+\n   $r s/wdio --only login-expire-idle-after.2br.mtime $args\n \n   $r s/wdio --only forum-sort-and-scroll.2browsers $args"
    },
    {
      "sha": "b9abc2f582ba2a04b8f102a21c2e3ff66188496e",
      "filename": "tests/e2e/specs/__e2e-test-template__.2br.test.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/__e2e-test-template__.2br.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/__e2e-test-template__.2br.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/__e2e-test-template__.2br.test.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -62,6 +62,9 @@ describe(`some-e2e-test  TyTE2E1234ABC`, () => {\n         // ['mons', 'modya', 'regina', 'corax', 'memah', 'maria', 'michael', 'mallory']\n     });\n \n+    // Change hostname\n+    //builder.getSite().meta.localHostname = 'e2e-test-something';  // at .localhost\n+\n     // Adding a new member:\n     const newMember: Member = builder.addMmember('hens_username');\n "
    },
    {
      "sha": "4efe3f0b3f52dab0e3575c0f4db9784df9edb884",
      "filename": "tests/e2e/specs/embedded-comments-scroll-and-load-more.2browsers.test.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/embedded-comments-scroll-and-load-more.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/embedded-comments-scroll-and-load-more.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-comments-scroll-and-load-more.2browsers.test.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -37,7 +37,7 @@ const embeddingOrigin = 'http://e2e-test-scrlld.localhost:8080';\n let veryLastPostNr;\n \n \n-describe(\"emb-cmts-scroll-load-post  TyT603MRKH592S\", () => {\n+describe(\"embedded-comments-scroll-and-load-more.2browsers  TyT603MRKH592S\", () => {\n \n   it(\"import a site\", () => {\n     const builder = buildSite();\n@@ -159,7 +159,7 @@ describe(\"emb-cmts-scroll-load-post  TyT603MRKH592S\", () => {\n     strangersBrowser.go2(embeddingOrigin + '/' + blankSlug);\n   });\n \n-  it(\"And returns — to see comment 30 (post 31)\", () => {\n+  it(\"And returns — to see comment 30 (post 31)  TyT03RMET742M\", () => {\n     strangersBrowser.go2(embeddingOrigin + '/' + pageSlug + '#comment-30');\n   });\n "
    },
    {
      "sha": "f908daefcce825f2cdccff7bf431cb4ba04c58d1",
      "filename": "tests/e2e/specs/embedded-comments-scroll-embedding-page.test.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/embedded-comments-scroll-embedding-page.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/embedded-comments-scroll-embedding-page.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-comments-scroll-embedding-page.test.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -86,7 +86,6 @@ ${ extraHeight > 500 ? \"<br><br><i>SCROLL DOWN\\n:\\n:\\n:</i>\" : \"\"}\n </html>`;\n   }\n \n-  // TESTS_MISSING  emb cmts scroll\n \n   it(`Maria opens a tall embedding page`, () => {\n     mariasBrowser.go2(pageTallUrl);"
    },
    {
      "sha": "6d21888a58bdf9d9f4dc2ce76749c7de31a9dca1",
      "filename": "tests/e2e/specs/oidc-azure-impl.ts",
      "status": "added",
      "additions": 563,
      "deletions": 0,
      "changes": 563,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/oidc-azure-impl.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/oidc-azure-impl.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/oidc-azure-impl.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -0,0 +1,563 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('../utils/ty-assert');\n+// import fs = require('fs');  EMBCMTS\n+import server = require('../utils/server');\n+import utils = require('../utils/utils');\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n+import settings = require('../utils/settings');\n+import lad = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+\n+let everyonesBrowsers: TyAllE2eTestBrowsers;\n+let richBrowserA: TyE2eTestBrowser;\n+let richBrowserB: TyE2eTestBrowser;\n+\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+let michael: Member;\n+let michael_brB: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+let maja: Member;\n+let maja_brB: TyE2eTestBrowser;\n+\n+//let merida_brB: TyE2eTestBrowser;\n+let azure_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+\n+const localHostname = 'e2e-test-azure-oidc'; // settings.azureTalkyardLocalHostname;\n+\n+\n+export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n+\n+  // After logout\n+  const waitForLoginDialog = variants.loginRequired;\n+  const afterLogoutPath = variants.loginRequired ? '/' : '/latest';\n+\n+  if (!settings.include3rdPartyDependentTests) {\n+    console.log(\"Skipping Azure OIDC spec; no 3rd party login credentials specified.\");\n+    return;\n+  }\n+\n+  if (!settings.secure) {\n+    console.log(\"Skipping Azure OIDC spec; only works with HTTPS\");\n+    return;\n+  }\n+\n+  it(`construct site`, () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Some E2E Test\",\n+      members: ['owen', 'memah', 'maria', 'maja', 'michael'],\n+    });\n+\n+    builder.getSite().meta.localHostname = localHostname;\n+\n+    everyonesBrowsers = new TyE2eTestBrowser(allWdioBrowsers);\n+    richBrowserA = new TyE2eTestBrowser(wdioBrowserA);\n+    richBrowserB = new TyE2eTestBrowser(wdioBrowserB);\n+\n+    // Azure user 01\n+    owen = forum.members.owen;\n+    owen.emailAddress = settings.azureUser01UsernameAndEmail;\n+    owen_brA = richBrowserA;\n+\n+    // Azure user 03\n+    memah = forum.members.memah;\n+    memah.emailAddress = settings.azureUser03UsernameAndEmail;\n+    memah_brB = richBrowserB;\n+\n+    // Azure user 06\n+    michael = forum.members.michael;\n+    michael.emailAddress = settings.azureUser06Email;\n+    michael_brB = richBrowserB;\n+\n+    // Azure user 12\n+    maria = forum.members.maria;\n+    maria.emailAddress = settings.azureUser12EmailWrongDomain;\n+    maria_brB = richBrowserB;\n+\n+    // Azure user 14\n+    maja = forum.members.maja;\n+    maja.emailAddress = settings.azureUser14EmailWrongDomain;\n+    maja_brB = richBrowserB;\n+\n+    // Various Azure users with no pre-existing Ty account.\n+    azure_brB = richBrowserB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`import site`, () => {\n+    site = server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Owen logs in to admin area, using password, OIDC not yet configured`, () => {\n+    owen_brA.adminArea.settings.login.goHere(site.origin, { loginAs: owen });\n+  });\n+\n+\n+  if (variants.loginRequired) {\n+    it(`Owen makes the site login-required`, () => {\n+      owen_brA.adminArea.settings.login.setLoginRequired(true);\n+    });\n+  }\n+\n+\n+  it(`Owen enbles OIDC`, () => {\n+    owen_brA.adminArea.settings.login.setEnableOidcDontSave(true);\n+  });\n+\n+\n+  it(`... configures an Azure AD ID provider, saves the config`, () => {\n+    owen_brA.adminArea.settings.login.configureIdps(`[{\n+  \"protocol\": \"oidc\",\n+  \"alias\": \"azure_test_alias\",\n+  \"enabled\": true,\n+  \"displayName\": \"Azure AD Test\",\n+  \"description\": \"Azure AD login test\",\n+  \"guiOrder\": null,\n+  \"confFileIdpId\": null,\n+  \"id\": 1,\n+  \"trustVerifiedEmail\": true,\n+  \"emailVerifiedDomains\": \"${settings.azureEmailVerifiedDomains}\",\n+  \"linkAccountNoLogin\": false,\n+  \"syncMode\": 1,\n+  \"oauAuthorizationUrl\": \"${settings.azureOauAuthorizationUrl}\",\n+  \"oauAuthReqScope\": \"openid\",\n+  \"oauAuthReqClaims\": null,\n+  \"oauAuthReqHostedDomain\": null,\n+  \"oauAccessTokenUrl\": \"${settings.azureOauAccessTokenUrl}\",\n+  \"oauAccessTokenAuthMethod\": null,\n+  \"oauClientId\": \"${settings.azureOidcClientId}\",\n+  \"oauClientSecret\": \"${settings.azureOidcClientSecret}\",\n+  \"oauIssuer\": \"https://what.eve.r.example.com\",\n+  \"oidcUserInfoUrl\": \"https://graph.microsoft.com/oidc/userinfo\",\n+  \"oidcUserInfoFieldsMap\": null,\n+  \"oidcUserinfoReqSendUserIp\": null,\n+  \"oidcLogoutUrl\": null\n+}]\n+`);\n+  });\n+\n+\n+\n+  it(`... saves the settings too`, () => {\n+    // Maybe bad UX to require 2 clicks, fix later [nice_oidc_conf_ux].\n+    owen_brA.adminArea.settings.clickSaveAll();\n+  });\n+\n+\n+  it(`Owen now tries to enable OIDC SSO   TyTOIDCSSO`, () => {\n+    owen_brA.adminArea.settings.login.setOnlyOidc(true);\n+  });\n+  it(`... tries to save`, () => {\n+    owen_brA.adminArea.settings.clickSaveAll({ willFail: true });\n+  });\n+  it(`... but not allowed — he hasn't yet logged in with OIDC,\n+              and might lock himself out`, () => {\n+    owen_brA.serverErrorDialog.waitAndAssertTextMatches('TyEADM0LGI2_');\n+    owen_brA.serverErrorDialog.close();\n+  });\n+\n+\n+\n+  it(`Owen logs out`, () => {\n+    owen_brA.topbar.clickLogout({ waitForLoginDialog });\n+    // Redirects to /   [.6022563]\n+    assert.eq(owen_brA.urlPath(), afterLogoutPath);\n+  });\n+  it(`... logs in via Azure AD OIDC`, () => {\n+    if (!variants.loginRequired) {\n+      // No login required — Owen needs to click Log In.\n+      // This tests linking accounts, from in a login popup.\n+      owen_brA.topbar.clickLogin();\n+    }\n+    else {\n+      // Login dialog already visible.\n+      // This tests linking accounts, from in a \"full screen\" main win login.\n+    }\n+    owen_brA.loginDialog.clickLoginWithOidcAzureAd();\n+    owen_brA.loginDialog.loginWithOidcAzureAd({\n+          email: settings.azureUser01UsernameAndEmail,\n+          password: settings.azureUser01Password,\n+          fullScreenLogin: variants.loginRequired,\n+          stayInPopup: !variants.loginRequired });\n+  });\n+  it(`... since in Azure he has the same email address, he can link his Azure account\n+            to his Talkyard account  TyTOIDCLNVERACT`, () => {\n+    // Check that email addr and username etc is correct  TyTLNIDP2TY043.\n+    owen_brA.loginDialog.checkLinkAccountsTextOk({\n+      matchingEmail: settings.azureUser01UsernameAndEmail,\n+      talkyardUsername: owen.username,\n+      azureFullName: settings.azureUser01FullName,\n+      idpName: \"Azure AD Test\",\n+    });\n+  });\n+  it(`... he links the accounts`, () => {\n+    owen_brA.loginDialog.clickYesLinkAccounts();\n+  });\n+\n+  it(`... clicks Log In Again`, () => {\n+    owen_brA.loginDialog.clickLogInAgain({\n+          isInPopupThatWillClose: !variants.loginRequired });\n+  });\n+\n+  if (!variants.loginRequired) {\n+    it(`... the login popup closes`, () => {\n+      owen_brA.switchBackToFirstTabOrWindow();\n+    });\n+  }\n+\n+  it(`... thereafter he's logged in as Owen again`, () => {\n+    owen_brA.topbar.assertMyUsernameMatches(owen.username);\n+  });\n+  it(`... he jumps to the admin area — was redirected to '/', at logout`, () => {\n+    // Owen got redirected to / above.  [.6022563]\n+    owen_brA.adminArea.settings.login.goHere(site.origin);\n+  });\n+\n+\n+\n+\n+  // IDP email verified, no Ty acct\n+  addSignUpViaAzureTestSteps({\n+        br: () => azure_brB,\n+        azureUsername: settings.azureUser02UsernameAndEmailDashDot,\n+        azurePassword: settings.azureUser02Password,\n+        azureEmail: settings.azureUser02UsernameAndEmailDashDot,\n+        azureFullName: settings.azureUser02FullName,\n+        newTalkyardUsername: 'azureUser02' });\n+\n+\n+  // IDP email verified, Ty acct w verified email\n+  addLoginAndLinkAzureAccountTestSteps({\n+        br: () => memah_brB,\n+        resetBrowser: true,\n+        who: \"Memah\",\n+        tyUser: () => memah,\n+        azureUsername: settings.azureUser03UsernameAndEmail,\n+        azurePassword: settings.azureUser03Password });\n+\n+\n+  // TESTS_MISSING Cancel linking\n+\n+\n+  // TESTS_MISSING IDP email verified, Ty acct w *un*verified email  TyTE2EIDPTYEMLUNVER\n+\n+\n+  // IDP email *un*verified, no Ty acct\n+  it(`Azure user  tyaz13  with no Ty account arrives`, () => {});\n+  addSignUpViaAzureTestSteps({\n+        br: () => azure_brB,\n+        resetBrowser: true,\n+        azureUsername: settings.azureUser13Username,\n+        azurePassword: settings.azureUser13Password,\n+        azureEmail: settings.azureUser13EmailWrongDomain,\n+        azureEmailVerified: false,\n+        azureFullName: settings.azureUser13FullName,\n+        newTalkyardUsername: 'azureUser13' });\n+\n+\n+  // IDP email *un*verified, Ty acct w verified email\n+  it(`Maria arrives; she has a Ty account already and Azure acct 12`, () => {});\n+  addLoginAndLinkAzureAccountTestSteps({\n+        br: () => maria_brB,\n+        resetBrowser: true,\n+        who: \"Maria\",\n+        tyUser: () => maria,\n+        azureUsername: settings.azureUser12Username,\n+        azurePassword: settings.azureUser12Password,\n+        azureEmail: settings.azureUser12EmailWrongDomain,\n+        azureEmailVerified: false });\n+\n+\n+  // TESTS_MISSING IDP email *un*verified, Ty acct w *un*verified email  TyTE2EIDPTYEMLUNVER\n+\n+\n+\n+\n+  it(`Owen enables OIDC SSO — works now, when has tested login   TyTOIDCSSO`, () => {\n+    owen_brA.adminArea.settings.login.setOnlyOidc(true);\n+  });\n+  it(`... and save, no problems`, () => {\n+    owen_brA.adminArea.settings.clickSaveAll();\n+  });\n+\n+  // Verify that login works for an account created before SSO got enabled.\n+  // (Maybe an \"unnecessary\" test but ... Thinking in that way, all tests are :-))\n+  it(`Owen logs out`, () => {\n+    owen_brA.topbar.clickLogout({ waitForLoginDialog });\n+  });\n+  it(`... can log in again, also now with SSO enabled`, () => {\n+    if (!variants.loginRequired) {\n+      owen_brA.topbar.clickLogin();\n+      // Will get redirected and logged in directly. [insta_sso_redir]\n+    }\n+    else {\n+      owen_brA.loginDialog.clickSingleSignOnButton();\n+    }\n+  });\n+  it(`... he gets logged in directly — accounts already linked`, () => {\n+    owen_brA.topbar.assertMyUsernameMatches(owen.username);\n+  });\n+\n+\n+\n+  // IDP email verified, no Ty acct\n+  it(`Azure user  tyaz04  arrives, has no Ty account`, () => {});\n+  addSignUpViaAzureTestSteps({\n+        br: () => azure_brB,\n+        resetBrowser: true,\n+        azureUsername: settings.azureUser04Username,\n+        azurePassword: settings.azureUser04Password,\n+        newTalkyardUsername: 'azureUser04',\n+        isSingleSignOn: true });\n+\n+\n+  // IDP email verified, Ty acct w verified email\n+  it(`Michael arrives; he has a Ty account already, and Azure acct 06`, () => {});\n+  addLoginAndLinkAzureAccountTestSteps({\n+        br: () => michael_brB,\n+        resetBrowser: true,\n+        who: \"Michael\",\n+        tyUser: () => michael,\n+        azureUsername: settings.azureUser06Username,\n+        azurePassword: settings.azureUser06Password,\n+        azureEmail: settings.azureUser06Email,\n+        isSingleSignOn: true });\n+\n+\n+  // TESTS_MISSING  IDP email verified, Ty acct w *un*verified email  TyTE2EIDPTYEMLUNVER\n+\n+\n+  // IDP email *un*verified, no Ty acct\n+  it(`Azure user  tyaz11  with no Ty account arrives`, () => {});\n+  addSignUpViaAzureTestSteps({\n+        br: () => azure_brB,\n+        resetBrowser: true,\n+        azureUsername: settings.azureUser11Username,\n+        azurePassword: settings.azureUser11Password,\n+        azureEmail: settings.azureUser11EmailWrongDomain,\n+        azureEmailVerified: false,\n+        azureFullName: settings.azureUser11FullName,\n+        newTalkyardUsername: 'azureUser11',\n+        isSingleSignOn: true });\n+\n+\n+  // IDP email *un*verified, Ty acct w verified email\n+  it(`Maja arrives; she has a Ty account already, and Azure acct 14`, () => {});\n+  addLoginAndLinkAzureAccountTestSteps({\n+        br: () => maja_brB,\n+        resetBrowser: true,\n+        who: \"Maja\",\n+        tyUser: () => maja,\n+        azureUsername: settings.azureUser14Username,\n+        azurePassword: settings.azureUser14Password,\n+        azureEmail: settings.azureUser14EmailWrongDomain,\n+        azureEmailVerified: false,\n+        isSingleSignOn: true });\n+\n+\n+  // TESTS_MISSING  IDP email *un*verified, Ty acct w *un*verified email  TyTE2EIDPTYEMLUNVER\n+\n+\n+\n+  function addStartAzureLoginSteps(ps: {\n+        br: () => TyE2eTestBrowser,\n+        isSingleSignOn: Bo }) {\n+\n+    if (!variants.loginRequired) {\n+      it(`... clicks Log In`, () => {\n+        ps.br().topbar.clickLogin();\n+      });\n+      if (ps.isSingleSignOn) {\n+        // auto redirected\n+      }\n+      else {\n+        it(`... picks Azure`, () => {\n+          ps.br().loginDialog.clickLoginWithOidcAzureAd();\n+        });\n+      }\n+    }\n+    else if (ps.isSingleSignOn) {\n+      it(`... clicks the Single Sign-On button`, () => {\n+        ps.br().loginDialog.clickSingleSignOnButton();\n+      });\n+    }\n+    else {\n+      it(`... picks Azure`, () => {\n+        ps.br().loginDialog.clickLoginWithOidcAzureAd();\n+      });\n+    }\n+  }\n+\n+\n+  function addSignUpViaAzureTestSteps(ps: {\n+        br: () => TyE2eTestBrowser,\n+        azureUsername: St,\n+        azurePassword: St,\n+        azureFullName?: St,\n+        azureEmail?: St,\n+        azureEmailVerified?: false,\n+        newTalkyardUsername: St,\n+        isSingleSignOn?: Bo,\n+        resetBrowser?: Bo }) {\n+\n+    it(`Azure user ${ps.azureUsername} arrives`, () => {\n+      // Delete cookies so won't be already logged in as the previous Azure user.\n+      if (ps.resetBrowser) {\n+        ps.br().reloadSession();\n+      }\n+      ps.br().go2(site.origin);\n+    });\n+\n+    addStartAzureLoginSteps({ br: ps.br, isSingleSignOn: ps.isSingleSignOn });\n+\n+    it(`... logs in via Azure — hen has no Ty account, so one will get created`, () => {\n+      ps.br().loginDialog.loginWithOidcAzureAd({\n+            email: ps.azureUsername,\n+            password: ps.azurePassword,\n+            fullScreenLogin: variants.loginRequired });\n+    });\n+\n+    if (ps.azureFullName) {\n+      it(`... the full name from Azure is: '${ps.azureFullName}'`, () => {\n+        ps.br().assertValueIs('#e2eFullName', ps.azureFullName);\n+      });\n+    }\n+    if (ps.azureEmail) {\n+      it(`... the email from Azure is: '${ps.azureEmail}'`, () => {\n+        ps.br().assertValueIs('#e2eEmail', ps.azureEmail);\n+      });\n+    }\n+\n+    it(`... Hen types a Ty username — Azure apparently doesn't include any username\n+              and sets the OIDC 'sub' field to just an opaque string`, () => {\n+      ps.br().waitAndSetValue('.esCreateUserDlg #e2eUsername',\n+            ps.newTalkyardUsername, { checkAndRetry: true });\n+    });\n+    it(`... saves`, () => {\n+      ps.br().loginDialog.clickSubmit();\n+    });\n+    it(`... accepts terms`, () => {\n+      ps.br().loginDialog.acceptTerms();\n+    });\n+\n+    if (ps.azureEmailVerified === false) {\n+      it(`... clicks an email addr verification email`, () => {\n+        const url = server.getLastVerifyEmailAddressLinkEmailedTo(site.id, ps.azureEmail);\n+        ps.br().go2(url);\n+      });\n+      it(`... email now verified, continues`, () => {\n+        ps.br().hasVerifiedSignupEmailPage.clickContinue();\n+      });\n+    }\n+    else if (!variants.loginRequired && !ps.isSingleSignOn) {\n+      // UX: Maybe could show this dialog also if login-required or if needed to verify\n+      // the email addr? Oh well.\n+      it(`... there's a welcome dialog`, () => {\n+        ps.br().loginDialog.waitAndClickOkInWelcomeDialog();\n+      });\n+    }\n+\n+    it(`... username shown in topbar: '${ps.newTalkyardUsername}'`, () => {\n+      ps.br().topbar.assertMyUsernameMatches(ps.newTalkyardUsername);\n+    });\n+\n+    it(`... logs out`, () => {\n+      ps.br().topbar.clickLogout({ waitForLoginDialog });\n+    });\n+\n+    it(`... logs in again — gets logged in directly`, () => {});\n+    addStartAzureLoginSteps({ br: ps.br, isSingleSignOn: ps.isSingleSignOn });\n+\n+    it(`... correct username shown in topbar: '${ps.newTalkyardUsername}'`, () => {\n+      ps.br().topbar.assertMyUsernameMatches(ps.newTalkyardUsername);\n+    });\n+  }\n+\n+\n+\n+  function addLoginAndLinkAzureAccountTestSteps(ps: {\n+        br: () => TyE2eTestBrowser,\n+        resetBrowser?: Bo,\n+        who: St,\n+        tyUser: () => Member,\n+        azureUsername: St,\n+        azurePassword: St,\n+        azureEmail?: St,\n+        azureEmailVerified?: false,\n+        azureFullName?: St,\n+        isSingleSignOn?: Bo }) {\n+\n+    it(`${ps.who} arrives`, () => {\n+      if (ps.resetBrowser) {\n+        ps.br().reloadSession();\n+      }\n+      ps.br().go2(site.origin);\n+    });\n+\n+    addStartAzureLoginSteps({ br: ps.br, isSingleSignOn: ps.isSingleSignOn });\n+\n+    it(`... logs in via Azure — hen has a Ty account, and\n+              wants to link it to hens Azure account`, () => {\n+      ps.br().loginDialog.loginWithOidcAzureAd({\n+            email: ps.azureUsername,\n+            password: ps.azurePassword,\n+            fullScreenLogin: variants.loginRequired,\n+            stayInPopup: !variants.loginRequired });\n+    });\n+\n+    if (ps.azureEmailVerified === false) {\n+      it(`... clicks an email addr verification email`, () => {\n+        const url = server.getLastVerifyEmailAddressLinkEmailedTo(\n+          site.id, ps.azureEmail, 'LINKING_IDP_ACCT');\n+        ps.br().go2(url);\n+      });\n+    }\n+\n+    it(`... ${ps.who} says Yes to linking to the Ty account`, () => {\n+      ps.br().loginDialog.clickYesLinkAccounts();\n+    });\n+\n+    it(`... clicks Log In Again`, () => {\n+      ps.br().loginDialog.clickLogInAgain({\n+          isInPopupThatWillClose: !variants.loginRequired });\n+    });\n+\n+    if (!variants.loginRequired) {\n+      it(`... the login popup closes`, () => {\n+        ps.br().switchBackToFirstTabOrWindow();\n+      });\n+    }\n+\n+    it(`... ${ps.who}'s username appears in the topbar`, () => {\n+      ps.br().topbar.assertMyUsernameMatches(ps.tyUser().username);\n+    });\n+\n+    it(`... logs out`, () => {\n+      ps.br().topbar.clickLogout({ waitForLoginDialog });\n+    });\n+\n+    it(`... logs in again — gets logged in directly`, () => {});\n+    addStartAzureLoginSteps({ br: ps.br, isSingleSignOn: ps.isSingleSignOn });\n+\n+    it(`... ${ps.who}'s username again shown in topbar`, () => {\n+      ps.br().topbar.assertMyUsernameMatches(ps.tyUser().username);\n+    });\n+  }\n+\n+\n+};"
    },
    {
      "sha": "fe6b3c192835137e91d83cfc5d8b22442ccc4b67",
      "filename": "tests/e2e/specs/oidc-azure-login-required.2br.extidp.test.ts",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/oidc-azure-login-required.2br.extidp.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/oidc-azure-login-required.2br.extidp.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/oidc-azure-login-required.2br.extidp.test.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -0,0 +1,5 @@\n+import { addOidcAzureTestSteps } from './oidc-azure-impl';\n+\n+describe(`oidc-azure-login-required.2br.extidp  TyTE2E60RTE24`, () => {\n+  addOidcAzureTestSteps({ loginRequired: true });\n+});"
    },
    {
      "sha": "7d83e50333c405f52b9263dd5dd34e0754198141",
      "filename": "tests/e2e/specs/oidc-azure-pub-site.2br.extidp.test.ts",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/oidc-azure-pub-site.2br.extidp.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/specs/oidc-azure-pub-site.2br.extidp.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/oidc-azure-pub-site.2br.extidp.test.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -0,0 +1,5 @@\n+import { addOidcAzureTestSteps } from './oidc-azure-impl';\n+\n+describe(`oidc-azure-pub-site.2br.extidp  TyTE2EOIDCAZ02`, () => {\n+  addOidcAzureTestSteps({ loginRequired: false });\n+});"
    },
    {
      "sha": "6133f6632cd518674c9eaf968c91b97831f6da69",
      "filename": "tests/e2e/test-types2.ts",
      "status": "modified",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/test-types2.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/test-types2.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/test-types2.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -60,6 +60,55 @@ interface TestSettings {\n   only: string;\n   isInProjBaseDir?: boolean;\n   browserName: 'firefox' | 'chrome'; // won't work: Chromium, chromium\n+\n+\n+  // azureTalkyardLocalHostname?: St; — skip, instead, must be 'e2e-test-azure-oidc'\n+  azureOauAuthorizationUrl?: St;\n+  azureOauAccessTokenUrl?: St;\n+  azureOidcClientId?: St;\n+  azureOidcClientSecret?: St;\n+  azureOidcLogoutUrl?: St;\n+  azureEmailVerifiedDomains?: St;\n+\n+  azureUser01UsernameAndEmail?: St;\n+  azureUser01Password?: St;\n+  azureUser01FullName?: St;\n+\n+  azureUser02UsernameAndEmailDashDot?: St;\n+  azureUser02Password?: St;\n+  azureUser02FullName?: St;\n+\n+  azureUser03UsernameAndEmail?: St;\n+  azureUser03Password?: St;\n+\n+  azureUser04Username?: St;\n+  azureUser04Password?: St;\n+  azureUser04Email?: St;\n+\n+  azureUser06Username?: St;\n+  azureUser06Password?: St;\n+  azureUser06Email?: St;\n+\n+  azureUser11Username?: St;\n+  azureUser11Password?: St;\n+  azureUser11EmailWrongDomain?: St;\n+  azureUser11FullName?: St;\n+\n+  azureUser12Username?: St;\n+  azureUser12Password?: St;\n+  azureUser12EmailWrongDomain?: St;\n+\n+  azureUser13Username?: St;\n+  azureUser13Password?: St;\n+  azureUser13EmailWrongDomain?: St;\n+  azureUser13FullName?: St;\n+\n+  azureUser14Username?: St;\n+  azureUser14Password?: St;\n+  azureUser14EmailWrongDomain?: St;\n+  azureUser14FullName?: St;\n+\n+\n   gmailEmail?: string;\n   gmailPassword?: string;\n   githubUsernameMixedCase?: string;"
    },
    {
      "sha": "2d50da78b9c4e939d1561a894e86c3aaa148e028",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 205,
      "deletions": 13,
      "changes": 218,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/pages-for.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -97,6 +97,11 @@ interface WaitPs {   // ps = params\n }\n \n \n+interface WaitPsWithOptText extends WaitPs {\n+  text?: St;\n+}\n+\n+\n /// Returns only the WaitPs fields.\n ///\n function pluckWaitPs(ps: Partial<WaitPs>): WaitPs {\n@@ -267,6 +272,12 @@ export class TyE2eTestBrowser {\n     this.#br = aWdioBrowser;\n   }\n \n+  reloadSession(ps: { andGoTo?: St } = {}) {\n+    const whereToday = ps.andGoTo || this.getUrl();\n+    this.#br.reloadSession();\n+    this.go2(whereToday);\n+  }\n+\n   // The global $ might be for the wrong this.#br somehow, so:\n \n   $(selector: St | Function | object): WElm {\n@@ -1377,12 +1388,29 @@ export class TyE2eTestBrowser {\n     }\n \n \n-    waitForDisplayed(selector: string, ps: WaitPs = {}) {\n-      this.waitForVisible(selector, ps);\n+    waitForMaybeDisplayed(selector: string, ps: WaitPsWithOptText = {}): Bo {\n+      const what = ps.text ? `\"${ps.text}\" text` : selector\n+      const ps2 = {\n+        timeoutMs: 2000,\n+        timeoutIsFine: true,\n+        winClosedIsFine: true,\n+        message: `Waiting for any ${what}`,\n+      };\n+      if (ps.text) {\n+        return this.waitUntilTextIs(selector, ps.text, ps2);\n+      }\n+      else {\n+        return this.waitForDisplayed(selector, ps2);\n+      }\n+    }\n+\n+\n+    waitForDisplayed(selector: string, ps: WaitPs = {}): Bo {\n+      return this.waitForVisible(selector, ps);\n     }\n \n-    waitForVisible(selector: string, ps: WaitPs = {}) {  // RENAME to waitForDisplayed() above\n-      this.waitUntil(() => this.isVisible(selector), {\n+    waitForVisible(selector: string, ps: WaitPs = {}): Bo {  // RENAME to waitForDisplayed() above\n+      return this.waitUntil(() => this.isVisible(selector), {\n         ...ps,\n         message: `Waiting for visible:  ${selector}`,\n       });\n@@ -2222,6 +2250,19 @@ export class TyE2eTestBrowser {\n     }\n \n \n+    assertValueIs(selector: St, expected: St) {\n+      const actual = this.waitAndGetValue(selector);\n+      // [E2EEASYREAD].\n+      tyAssert.ok(actual === expected, '\\n' +\n+        `Value of elem selected by:  ${selector}\\n` +\n+        `           does not match:  ${expected}\\n` +\n+        `    actual value: (between ---)\\n` +\n+        `-------------------------------------------\\n` +\n+        `${actual}\\n` +\n+        `-------------------------------------------\\n`);\n+    }\n+\n+\n     waitAndGetVisibleText(selector): string {\n       this.waitForVisibleText(selector);\n       return this.$(selector).getText();\n@@ -2914,18 +2955,23 @@ export class TyE2eTestBrowser {\n         this.waitUntilLoadingOverlayGone();\n       },\n \n-      clickLogout: (options: { waitForLoginButton?: boolean } = {}) => {   // RENAME to logout\n+      clickLogout: (options: { waitForLoginButton?: Bo,   // RENAME to logout\n+              waitForLoginDialog?: Bo } = {}) => {\n         // Sometimes this scrolls to top, small small steps, annoying, [FASTER_E2E_TESTS]\n         // and not needed, right.\n         // Can speed up by calling scrollToTop() — done here: [305RKTJ205].\n         this.topbar.openMyMenu();\n         this.waitAndClick('#e2eMM_Logout');\n         this.waitAndClick('.e_ByeD .btn-primary');\n-        if (options.waitForLoginButton === false) {\n+        if (options.waitForLoginDialog) {\n+          this.waitForDisplayed('.c_AuD');\n+        }\n+        else if (options.waitForLoginButton === false) {\n           // Then a login dialog will probably have opened now in full screen, with a modal\n           // backdrop, so don't wait for any backdrop to disappear.\n           // Or we got redirected to an SSO login window.\n-        } else {\n+        }\n+        else {\n           this.waitUntilModalGone();\n           this.topbar.waitUntilLoginButtonVisible();\n         }\n@@ -2938,7 +2984,15 @@ export class TyE2eTestBrowser {\n       },\n \n       openMyMenu: () => {\n-        this.waitAndClick('.esMyMenu');\n+        // We can click in the fixed topbar if it's present, instead of scrolling\n+        // all the way up to the static topbar.\n+        let sel = '.s_TbW-Fxd .esMyMenu';\n+        const fixedScrollbarVisible = this.isVisible(sel);\n+        const opts = { mayScroll: !fixedScrollbarVisible };\n+        if (!fixedScrollbarVisible) {\n+          sel = '.esMyMenu';\n+        }\n+        this.waitAndClick(sel, opts);\n         this.waitUntilLoadingOverlayGone();\n         // Because of a bug in Chrome? Chromedriver? Selenium? Webdriver.io? wait-and-click\n         // attempts to click instantly, before the show-menu anim has completed and the elem\n@@ -3666,6 +3720,7 @@ export class TyE2eTestBrowser {\n         // the Gmail login widgets to load, or for us to be back in Talkyard again.\n         while (true) {\n           if (ps.isInFullScreenLogin) {\n+            // Dupl code [insta_login]\n             // If logged in both at Google and Ty directly: There's a race?\n             // Sometimes we'll see Ty's login dialog briefly before it closes and\n             // one's username appears. — This is fine, the tests should work anyway.\n@@ -3702,7 +3757,7 @@ export class TyE2eTestBrowser {\n         logMessage(`typing Gmail email: ${data.email}...`);\n         this.waitAndSetValue(emailInputSelector, data.email, { checkAndRetry: true });\n \n-        this.#br.pause(500);\n+        this.waitForMaybeDisplayed(emailNext, { timeoutMs: 1000 });\n         if (this.isExisting(emailNext)) {\n           logMessage(`clicking ${emailNext}...`);\n           this.waitAndClick(emailNext);\n@@ -3712,7 +3767,7 @@ export class TyE2eTestBrowser {\n         logMessage(\"typing Gmail password...\");\n         this.waitAndSetValue(passwordInputSelector, data.password, { checkAndRetry: true });\n \n-        this.#br.pause(500);\n+        this.waitForMaybeDisplayed(passwordNext, { timeoutMs: 1000 });\n         if (this.isExisting(passwordNext)) {\n           logMessage(`clicking ${passwordNext}...`);\n           this.waitAndClick(passwordNext);\n@@ -4013,6 +4068,123 @@ export class TyE2eTestBrowser {\n         }\n       },\n \n+\n+      clickLoginWithOidcAzureAd: () => {\n+        // Maybe moves — the dialog might scroll in?\n+        this.waitAndClick('#e2eLoginoidc\\\\/azure_test_alias', { maybeMoves: true });\n+      },\n+\n+\n+      loginWithOidcAzureAd: (ps: { email: St, password: St,\n+            anyWelcomeDialog?: 'THERE_WILL_BE_NO_WELCOME_DIALOG',\n+            alreadyLoggedIn?: Bo, isInLoginPopupAlready?: Bo, stayInPopup?: Bo,\n+            fullScreenLogin?: Bo, staySignedIn?: Bo }) => {\n+\n+        // Switch to LinkedIn's login popup window.\n+        if (!ps.isInLoginPopupAlready && !ps.fullScreenLogin)\n+          this.swithToOtherTabOrWindow(IsWhere.External);\n+\n+        const emailInputSelector = 'input[type=\"email\"]';\n+        const emailNext = 'input[type=\"submit\"]';\n+        const passwordInputSelector = 'input[type=\"password\"]';\n+        const passwordNext = 'input[type=\"submit\"]';\n+        const yesStaySignedInButton = 'input[type=\"submit\"]';\n+        const noDontStaySignedInButton = 'input#idBtn_Back';\n+        const grantPermsButton = 'input[type=\"submit\"]';\n+\n+        // Wait until popup window done loading.\n+        while (true) {\n+          if (ps.fullScreenLogin) {\n+            // Dupl code [insta_login]\n+            // If logged in both at Azure and Ty directly: There's a race?\n+            // Sometimes we'll see Ty's login dialog briefly before it closes and\n+            // one's username appears. — This is fine, the tests should work anyway.\n+            const idpLoginDone = this.isExisting('.dw-login-modal');\n+            logMessageIf(idpLoginDone,\n+                `Got logged in directly at IDP (Azure)`);\n+\n+            const idpAndTalkyardLoginDone = this.isExisting('.esMyMenu .esAvtrName_name');\n+            logMessageIf(idpAndTalkyardLoginDone,\n+                `Got logged in directly at both IDP (Azure) and Talkyard`);\n+\n+            if (idpLoginDone || idpAndTalkyardLoginDone)\n+              return;\n+          }\n+          else if (this.loginDialog.loginPopupClosedBecauseAlreadyLoggedIn()) {\n+            logMessage(`IDP (Azure) login done, back at Talkyard`);\n+            this.switchBackToFirstTabOrWindow();\n+            return;\n+          }\n+          try {\n+            // Continue below once the IDP input fields appear.\n+            if (this.isExisting(emailInputSelector))\n+              break;\n+          }\n+          catch (dummy) {\n+            logMessage(`Didn't find ${emailInputSelector\n+                  }. Login popup closed because already logged in?`);\n+          }\n+          this.#br.pause(300);\n+        }\n+\n+        logMessage(\"Typing Azure user's email and password ...\");\n+        this.#br.pause(340); // so less risk Azure thinks this is a computer?\n+        // This is over at Azure, and, as username, one can type one's email.\n+        this.waitAndSetValue(emailInputSelector, ps.email);\n+        this.#br.pause(380);\n+        this.waitAndClick(emailNext);\n+        this.waitAndSetValue(passwordInputSelector, ps.password);\n+        this.#br.pause(280);\n+        this.waitAndClick(passwordNext);\n+        this.waitUntilTextIs('.text-title', \"Stay signed in?\");\n+\n+        logMessage(`submitting Azure login dialog, and ps.staySignedIn: ${\n+                ps.staySignedIn} ...`);\n+        this.waitAndClick(ps.staySignedIn ?\n+                yesStaySignedInButton : noDontStaySignedInButton);\n+\n+        // Sometimes also:  .consentHeader  \"Permissions requested\"\n+        // Then click:   grantPermsButton\n+\n+        if (!ps.isInLoginPopupAlready && !ps.stayInPopup && !ps.fullScreenLogin) {\n+          logMessage(\"switching back to first tab...\");\n+          this.switchBackToFirstTabOrWindow();\n+        }\n+      },\n+\n+      checkLinkAccountsTextOk: (ps: { matchingEmail: St,\n+            talkyardUsername: St, azureFullName: St, idpName: St }) => {\n+        // Now there's some info text, and one needs to login again via the IDP,\n+        // to find out directly, if it works or not.\n+        this.assertTextIs('.e_EmAdr', ps.matchingEmail);\n+        this.assertTextIs('.e_TyUn', ps.talkyardUsername);\n+        this.assertTextIs('.e_NameAtIdp', ps.azureFullName);\n+        this.assertTextIs('.e_IdpName', ps.idpName);\n+      },\n+\n+      clickYesLinkAccounts: () => {\n+        this.waitAndClick('.e_YesLnActsB');\n+      },\n+\n+      clickLogInAgain: (ps: { isInPopupThatWillClose?: Bo } = {}) => {\n+        // If clicking quickly, won't work. Why not? This is just a plain\n+        // ordinary <a href=..>, no Javascript. Whatvever, just:  [E2EBUG]\n+        this.pause(444);\n+        this.waitAndClick('.e_LogInAgain');\n+\n+        /*\n+        // There's some race, button clicked but nothing happens — so try a few times.)\n+        utils.tryUntilTrue(\"Login again, after linked accounts\", 3, 'ExpBackoff', () => {\n+          return this.waitAndClick('.e_LogInAgain') === 'Clicked';\n+        });\n+        utils.tryUntilTrue(\"Login again, after linked accounts\", 3, 'ExpBackoff', () => {\n+          this.waitAndClick('.e_LogInAgain');\n+          return this.waitUntilGone('.e_LogInAgain', {\n+                  timeoutMs: 500, timeoutIsFine: true });\n+        });\n+        */\n+      },\n+\n       loginPopupClosedBecauseAlreadyLoggedIn: (): boolean => {\n         try {\n           logMessage(\"checking if we got logged in instantly... [EdM2PG44Y0]\");\n@@ -6973,7 +7145,7 @@ export class TyE2eTestBrowser {\n         this.$$('.esAdminArea .dw-main-nav > li').length,\n \n       settings: {\n-        clickSaveAll: (ps: { willFail?: boolean } = {}) => {\n+        clickSaveAll: (ps: { willFail?: Bo } = {}) => {\n           this.scrollToBottom();\n           this.waitAndClick('.esA_SaveBar_SaveAllB');\n           this.waitUntilLoadingOverlayGone();\n@@ -7019,8 +7191,8 @@ export class TyE2eTestBrowser {\n         },\n \n         login: {\n-          goHere: () => {\n-            this.adminArea.goToLoginSettings();\n+          goHere: (origin?: St, opts: { loginAs? } = {}) => {\n+            this.adminArea.goToLoginSettings(origin, opts);\n           },\n \n           setRequireVerifiedEmail: (isRequired: boolean) => {\n@@ -7044,6 +7216,26 @@ export class TyE2eTestBrowser {\n             this.waitAndSetValue('.e_LgoIdlAftMins input', minutes, { checkAndRetry: true });\n           },\n \n+          setEnableOidcDontSave: (enabled: Bo) => {\n+            const sel = '.e_A_Ss_S-OidcCB input';\n+            this.scrollIntoViewInPageColumn(sel);\n+            this.waitUntilDoesNotMove(sel);\n+            this.setCheckbox(sel, enabled);\n+          },\n+\n+          setOnlyOidc: (only: Bo) => {\n+            const sel = '.e_A_Ss_S-OnlyOidcCB input';\n+            this.scrollIntoViewInPageColumn(sel);\n+            this.waitUntilDoesNotMove(sel);\n+            this.setCheckbox(sel, only);\n+          },\n+\n+          configureIdps: (json: St) => {\n+            this.waitAndClick('.e_ConfIdpsB');\n+            this.waitAndSetValue('.s_CuIdpsEdr textarea', json, { checkAndRetry: true });\n+            this.waitAndClick('.s_CuIdpsEdr .btn');\n+          },\n+\n           setEmailDomainWhitelist: (text: string) => {\n             this.scrollIntoViewInPageColumn('.e_EmailWhitelist textarea');\n             this.waitAndSetValue('.e_EmailWhitelist textarea', text, { checkAndRetry: true });"
    },
    {
      "sha": "172b05f2b9cb131ed9746c0b4d49f013b4534df2",
      "filename": "tests/e2e/utils/server.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/utils/server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/utils/server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/server.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -319,11 +319,14 @@ function getEmailsSentToAddrs(siteId: SiteId): { num: number, addrsByTimeAsc: st\n \n \n function getLastVerifyEmailAddressLinkEmailedTo(siteId: SiteId, emailAddress: string,\n-      browser?): string {\n+      pauseOrLinkAccts?: Ay | 'LINKING_IDP_ACCT'): string {\n   const email = getLastEmailSenTo(siteId, emailAddress, browser);\n   dieIf(!email, `No email has yet been sent to ${emailAddress}. ` + (!browser ? '' :\n     \"Include a 'browser' as 3rd arguement, to poll-wait for an email.  [TyE2ABKF057]\"));\n-  return utils.findFirstLinkToUrlIn('https?://.*/-/login-password-confirm-email', email.bodyHtmlText);\n+  const regex = (pauseOrLinkAccts !== 'LINKING_IDP_ACCT'\n+          ? 'https?://.*/-/login-password-confirm-email'\n+          : 'https?://.*/-/authn/verif-email-ask-if-link-accounts');\n+  return utils.findFirstLinkToUrlIn(regex, email.bodyHtmlText);\n }\n \n \n@@ -610,7 +613,7 @@ export = {\n   getLastEmailSenTo,\n   countLastEmailsSentTo,\n   getEmailsSentToAddrs,\n-  getLastVerifyEmailAddressLinkEmailedTo, // RENAME see next line\n+  getLastVerifyEmailAddressLinkEmailedTo, // RENAME see next line.. No, nice name?\n   getVerifyEmailAddressLinkFromLastEmailTo: getLastVerifyEmailAddressLinkEmailedTo,\n   waitAndGetVerifyAnotherEmailAddressLinkEmailedTo,\n   waitAndGetInviteLinkEmailedTo,"
    },
    {
      "sha": "d817edd82ddc22283b2b3c4c3b55a9fae224ce15",
      "filename": "tests/e2e/utils/utils.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/utils/utils.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/tests/e2e/utils/utils.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/utils.ts?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -451,9 +451,15 @@ ${ htmlToPaste ? htmlToPaste : `\n   },\n \n \n-  tryUntilTrue: function<R>(what: string, maxNumTimes: number | 'ExpBackoff', fn: () => boolean) {\n+  tryUntilTrue: function<R>(what: St, maxNumTimes: Nr | 'ExpBackoff',\n+        fn: 'ExpBackoff' | (() => Bo), fn2?: () => Bo) {\n     let delayMs = 300;\n \n+    const doExpBackoff = maxNumTimes === 'ExpBackoff' || fn === 'ExpBackoff';\n+    if (_.isString(fn)) {\n+      fn = fn2;\n+    }\n+\n     for (let retryCount = 0; true; ++retryCount) {\n       if (retryCount === maxNumTimes)\n         throw Error(`Tried ${maxNumTimes} times but failed:  ${what}`)\n@@ -469,7 +475,7 @@ ${ htmlToPaste ? htmlToPaste : `\n         logUnusual(`Retrying: ${what}  [TyME2ERETRYB], because error: ${error.toString()}`);\n       }\n \n-      if (maxNumTimes === 'ExpBackoff') {\n+      if (doExpBackoff) {\n         oneWdioBrowser.pause(delayMs);\n         delayMs = delayMs * 1.3\n         delayMs = Math.min(2500, delayMs);"
    },
    {
      "sha": "9b14521da45c749629915c23d1a232fe7298d2bf",
      "filename": "vendors/jars",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/vendors/jars?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -1 +1 @@\n-Subproject commit 7b7a69e71f49f5f8bdfb9f4f0661ba604451da56\n+Subproject commit 9b14521da45c749629915c23d1a232fe7298d2bf"
    },
    {
      "sha": "3fa0a09dcb5bb38c58701769f3e050ab84930bc4",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/0228cfe28a122e39b4001b831226b8ef5bec9d64/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/0228cfe28a122e39b4001b831226b8ef5bec9d64/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=0228cfe28a122e39b4001b831226b8ef5bec9d64",
      "patch": "@@ -1 +1 @@\n-v0.2021.12\n+v0.2021.13"
    }
  ]
}
