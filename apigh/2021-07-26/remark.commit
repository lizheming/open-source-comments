{
  "sha": "2c8556ff2f9cd1d549124ce0a99a63a609e79e37",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjJjODU1NmZmMmY5Y2QxZDU0OTEyNGNlMGE5OWE2M2E2MDllNzllMzc=",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2021-07-25T18:24:57Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-07-25T18:28:08Z"
    },
    "message": "consistent formatting for markdown files",
    "tree": {
      "sha": "ca04cdfe7e2cccd903bb36fdeb5c46c0c0277014",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/ca04cdfe7e2cccd903bb36fdeb5c46c0c0277014"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/2c8556ff2f9cd1d549124ce0a99a63a609e79e37",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/2c8556ff2f9cd1d549124ce0a99a63a609e79e37",
  "html_url": "https://github.com/umputun/remark42/commit/2c8556ff2f9cd1d549124ce0a99a63a609e79e37",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/2c8556ff2f9cd1d549124ce0a99a63a609e79e37/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ea644a1a31518b647dba277b8034811a3c3e476b",
      "url": "https://api.github.com/repos/umputun/remark42/commits/ea644a1a31518b647dba277b8034811a3c3e476b",
      "html_url": "https://github.com/umputun/remark42/commit/ea644a1a31518b647dba277b8034811a3c3e476b"
    }
  ],
  "stats": {
    "total": 181,
    "additions": 84,
    "deletions": 97
  },
  "files": [
    {
      "sha": "b5ed9e1a1e485f1399621f1986abbf95b2fe219f",
      "filename": "README.md",
      "status": "modified",
      "additions": 79,
      "deletions": 88,
      "changes": 167,
      "blob_url": "https://github.com/umputun/remark42/blob/2c8556ff2f9cd1d549124ce0a99a63a609e79e37/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2c8556ff2f9cd1d549124ce0a99a63a609e79e37/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/README.md?ref=2c8556ff2f9cd1d549124ce0a99a63a609e79e37",
      "patch": "@@ -1,6 +1,5 @@\n # Remark42 [![Build Status](https://github.com/umputun/remark42/workflows/build/badge.svg)](https://github.com/umputun/remark42/actions) [![Go Report Card](https://goreportcard.com/badge/github.com/umputun/remark42)](https://goreportcard.com/report/github.com/umputun/remark42) [![Coverage Status](https://coveralls.io/repos/github/umputun/remark42/badge.svg?branch=master)](https://coveralls.io/github/umputun/remark42?branch=master) [![codecov](https://codecov.io/gh/umputun/remark42/branch/master/graph/badge.svg)](https://codecov.io/gh/umputun/remark42)\n \n-\n Remark42 is a self-hosted, lightweight and simple (yet functional) comment engine, which doesn't spy on users. It can be embedded into blogs, articles, or any other place where readers add comments.\n \n * Social login via Google, Twitter, Facebook, Microsoft, GitHub, Yandex and Telegram\n@@ -36,7 +35,6 @@ Comments example:\n For admin screenshots see [Admin UI wiki](https://github.com/umputun/remark42/wiki/Admin-UI)\n </details>\n \n-\n #\n \n   - [Install](#install)\n@@ -86,7 +84,6 @@ For admin screenshots see [Admin UI wiki](https://github.com/umputun/remark42/wi\n   - [Privacy](#privacy)\n   - [Technical details](#technical-details)\n \n-\n ## Install\n \n ### Backend\n@@ -153,7 +150,7 @@ _this is the recommended way to run Remark42_\n | auth.github.csec        | AUTH_GITHUB_CSEC        |                          | GitHub OAuth client secret                      |\n | auth.twitter.cid        | AUTH_TWITTER_CID        |                          | Twitter Consumer API Key                        |\n | auth.twitter.csec       | AUTH_TWITTER_CSEC       |                          | Twitter Consumer API Secret key                 |\n-| auth.telegram           | AUTH_TELEGRAM           |                          | Enable Telegram auth (telegram.token must be present |\n+| auth.telegram           | AUTH_TELEGRAM           |                          | Enable Telegram auth (telegram.token must be present) |\n | auth.yandex.cid         | AUTH_YANDEX_CID         |                          | Yandex OAuth client ID                          |\n | auth.yandex.csec        | AUTH_YANDEX_CSEC        |                          | Yandex OAuth client secret                      |\n | auth.dev                | AUTH_DEV                | `false`                  | local OAuth2 server, development mode only      |\n@@ -218,8 +215,7 @@ _this is the recommended way to run Remark42_\n ##### Deprecated parameters\n \n The following list of command-line options is deprecated and will be removed in 2 minor releases or 1 major release (whichever is closer)\n-from the version in which they were deprecated. After Remark42 version update, please check the startup log once for deprecation warnings\n-to avoid trouble with unrecognized command-line options in the future.\n+from the version in which they were deprecated. After Remark42 version update, please check the startup log once for deprecation warnings to avoid trouble with unrecognized command-line options in the future.\n \n <details>\n <summary>Deprecated options</summary>\n@@ -237,6 +233,7 @@ to avoid trouble with unrecognized command-line options in the future.\n | notify.email.notify_admin | notify.admins=email | NOTIFY_EMAIL_ADMIN | NOTIFY_ADMINS=email | |     | 1.9.0               |\n | notify.telegram.token | telegram.token | NOTIFY_TELEGRAM_TOKEN | TELEGRAM_TOKEN | | Telegram token | 1.9.0               |\n | notify.telegram.timeout | telegram.timeout | NOTIFY_TELEGRAM_TIMEOUT | TELEGRAM_TIMEOUT | | Telegram timeout | 1.9.0     |\n+\n </details>\n \n ##### Required parameters\n@@ -253,18 +250,18 @@ The minimal `docker-compose.yml` has to include all required parameters:\n version: '2'\n \n services:\n-    remark42:\n-        image: umputun/remark42:latest\n-        restart: always\n-        container_name: \"remark42\"\n-        environment:\n-            - REMARK_URL=https://demo.remark42.com  # URL pointing to your Remark42 server\n-            - SITE=YOUR_SITE_ID                     # site ID, same as used for `site_id`, see \"Setup on your website\"\n-            - SECRET=abcd-123456-xyz-$%^&           # secret key\n-            - AUTH_GITHUB_CID=12345667890           # OAuth2 client ID\n-            - AUTH_GITHUB_CSEC=abcdefg12345678      # OAuth2 client secret\n-        volumes:\n-            - ./var:/srv/var                        # persistent volume to store all Remark42 data\n+  remark42:\n+    image: umputun/remark42:latest\n+    restart: always\n+    container_name: \"remark42\"\n+    environment:\n+      - REMARK_URL=https://demo.remark42.com  # URL pointing to your Remark42 server\n+      - SITE=YOUR_SITE_ID                     # site ID, same as used for `site_id`, see \"Setup on your website\"\n+      - SECRET=abcd-123456-xyz-$%^&           # secret key\n+      - AUTH_GITHUB_CID=12345667890           # OAuth2 client ID\n+      - AUTH_GITHUB_CSEC=abcdefg12345678      # OAuth2 client secret\n+    volumes:\n+      - ./var:/srv/var                        # persistent volume to store all Remark42 data\n ```\n \n #### Quick installation test\n@@ -299,13 +296,13 @@ Authentication handled by external providers. You should setup OAuth2 for all (o\n 4. In the left Nav pane, choose **\"Credentials\"**\n 5. In the center pane, choose **\"OAuth consent screen\"** tab. Fill in **\"Product name shown to users\"** and hit save\n 6. In the center pane, choose **\"Credentials\"** tab\n-    * Open the **\"New credentials\"** drop down\n-    * Choose **\"OAuth client ID\"**\n-    * Choose **\"Web application\"**\n-    * Application name is freeform, choose something appropriate\n-    * Authorized origins is your domain, e.g.: `https://remark42.mysite.com`\n-    * Authorized redirect URIs is the location of OAuth2/callback constructed as domain + `/auth/google/callback`, e.g.: `https://remark42.mysite.com/auth/google/callback`\n-    * Choose **\"Create\"**\n+  * Open the **\"New credentials\"** drop down\n+  * Choose **\"OAuth client ID\"**\n+  * Choose **\"Web application\"**\n+  * Application name is freeform, choose something appropriate\n+  * Authorized origins is your domain, e.g.: `https://remark42.mysite.com`\n+  * Authorized redirect URIs is the location of OAuth2/callback constructed as domain + `/auth/google/callback`, e.g.: `https://remark42.mysite.com/auth/google/callback`\n+  * Choose **\"Create\"**\n 7. Take note of the **Client ID** and **Client Secret**\n \n _instructions for Google OAuth2 setup borrowed from [oauth2_proxy](https://github.com/bitly/oauth2_proxy)_\n@@ -320,24 +317,24 @@ _instructions for Google OAuth2 setup borrowed from [oauth2_proxy](https://githu\n \n ##### Telegram Auth Provider\n \n-1.  Contact [@BotFather](https://t.me/botfather) and follow his instructions to create your own bot (call it, for example, \"My site auth bot\")\n-1.\tWrite down resulting token as `TELEGRAM_TOKEN` into remark42 config, and also set `AUTH_TELEGRAM` to `true` to enable telegram auth for your users.\n+1. Contact [@BotFather](https://t.me/botfather) and follow his instructions to create your own bot (call it, for example, \"My site auth bot\")\n+1. Write down resulting token as `TELEGRAM_TOKEN` into remark42 config, and also set `AUTH_TELEGRAM` to `true` to enable telegram auth for your users.\n \n ##### Twitter Auth provider\n \n-1.\tCreate a new Twitter application https://developer.twitter.com/en/apps\n-2.\tFill **App name**, **Description** and **URL** of your site\n-3.\tIn the field **Callback URLs** enter the correct URL of your callback handler, e.g. domain + `/auth/twitter/callback`\n-4.\tUnder **Key and tokens** take note of the **Consumer API Key** and **Consumer API Secret key**. Those will be used as `AUTH_TWITTER_CID` and `AUTH_TWITTER_CSEC`\n+1. Create a new Twitter application https://developer.twitter.com/en/apps\n+2. Fill **App name**, **Description** and **URL** of your site\n+3. In the field **Callback URLs** enter the correct URL of your callback handler, e.g. domain + `/auth/twitter/callback`\n+4. Under **Key and tokens** take note of the **Consumer API Key** and **Consumer API Secret key**. Those will be used as `AUTH_TWITTER_CID` and `AUTH_TWITTER_CSEC`\n \n ##### Yandex Auth provider\n \n 1. Create a new **\"OAuth App\"**: https://oauth.yandex.com/client/new\n 2. Fill **\"App name\"** for your site\n 3. Under **Platforms** select **\"Web services\"** and enter **\"Callback URI #1\"** constructed as domain + `/auth/yandex/callback`, i.e. `https://remark42.mysite.com/auth/yandex/callback`\n 4. Select **Permissions**. You need the following permissions only from the **\"Yandex.Passport API\"** section:\n-    * Access to the user avatar\n-    * Access to username, first name and surname, gender\n+  * Access to the user avatar\n+  * Access to username, first name and surname, gender\n 5. Fill out the rest of the fields if needed\n 6. Take note of the **ID** and **Password**\n \n@@ -352,8 +349,7 @@ Optionally, anonymous access can be turned on. In this case, an extra `anonymous\n \n #### Importing comments\n \n-Remark42 supports importing comments from Disqus, WordPress, or native backup format.\n-All imported comments have an `Imported` field set to `true`.\n+Remark42 supports importing comments from Disqus, WordPress, or native backup format. All imported comments have an `Imported` field set to `true`.\n \n ##### Initial import from Disqus\n \n@@ -393,20 +389,18 @@ Restore will clean all comments first and then will process with complete import\n \n ##### Backup format\n \n-The backup file is a text file with all exported comments separated by EOL. Each backup record is a valid JSON with all key/value\n-unmarshaled from `Comment` struct (see below).\n+The backup file is a text file with all exported comments separated by EOL. Each backup record is a valid JSON with all key/value unmarshaled from `Comment` struct (see below).\n \n #### Admin users\n \n Admins/moderators should be defined in `docker-compose.yml` as a list of user IDs or passed in the command line.\n \n ```yaml\n environment:\n-    - ADMIN_SHARED_ID=github_ef0f706a79cc24b17bbbb374cd234a691a034128,github_dae9983158e9e5e127ef2b87a411ef13c891e9e5\n+  - ADMIN_SHARED_ID=github_ef0f706a79cc24b17bbbb374cd234a691a034128,github_dae9983158e9e5e127ef2b87a411ef13c891e9e5\n ```\n \n-To get a user ID just log in and click on your username or any other user you want to promote to admins.\n-It will expand login info and show the full user ID.\n+To get a user ID just log in and click on your username or any other user you want to promote to admins. It will expand login info and show the full user ID.\n \n #### Docker parameters\n \n@@ -423,21 +417,20 @@ Example of `docker-compose.yml`:\n version: '2'\n \n services:\n-    remark42:\n-        image: umputun/remark42:latest\n-        restart: always\n-        container_name: \"remark42\"\n-        environment:\n-            - APP_UID=2000                          # runs Remark42 app with non-default UID\n-            - TIME_ZONE=GTC                         # sets container time to UTC\n-\n-            - REMARK_URL=https://demo.remark42.com  # URL pointing to your Remark42 server\n-            - SITE=YOUR_SITE_ID                     # site ID, same as used for `site_id`, see \"Setup on your website\"\n-            - SECRET=abcd-123456-xyz-$%^&           # secret key\n-            - AUTH_GITHUB_CID=12345667890           # OAuth2 client ID\n-            - AUTH_GITHUB_CSEC=abcdefg12345678      # OAuth2 client secret\n-        volumes:\n-            - ./var:/srv/var                        # persistent volume to store all Remark42 data\n+  remark42:\n+    image: umputun/remark42:latest\n+    restart: always\n+    container_name: \"remark42\"\n+    environment:\n+      - APP_UID=2000                          # runs Remark42 app with non-default UID\n+      - TIME_ZONE=GTC                         # sets container time to UTC\n+      - REMARK_URL=https://demo.remark42.com  # URL pointing to your Remark42 server\n+      - SITE=YOUR_SITE_ID                     # site ID, same as used for `site_id`, see \"Setup on your website\"\n+      - SECRET=abcd-123456-xyz-$%^&           # secret key\n+      - AUTH_GITHUB_CID=12345667890           # OAuth2 client ID\n+      - AUTH_GITHUB_CSEC=abcdefg12345678      # OAuth2 client secret\n+    volumes:\n+      - ./var:/srv/var                        # persistent volume to store all Remark42 data\n ```\n \n ### Setup on your website\n@@ -505,21 +498,15 @@ If you want to set this up on a Single Page App, see [appropriate doc page](site\n \n ##### Themes\n \n-Right now Remark42 has two themes: light and dark.\n-You can pick one using a configuration object,\n-but there is also a possibility to switch between themes in runtime.\n-For this purpose Remark42 adds to `window` object named `REMARK42`,\n-which contains a function `changeTheme`.\n-Just call this function and pass a name of the theme that you want to turn on:\n+Right now Remark42 has two themes: light and dark. You can pick one using a configuration object, but there is also a possibility to switch between themes in runtime. For this purpose Remark42 adds to `window` object named `REMARK42`, which contains a function `changeTheme`. Just call this function and pass a name of the theme that you want to turn on:\n \n ```js\n window.REMARK42.changeTheme('light');\n ```\n \n ##### Locales\n \n-Right now Remark42 is translated to English (en), Belarusian (be), Brazilian Portuguese (bp), Bulgarian (bg), Chinese (zh), Finnish (fi), French (fr), German (de), Japanese (ja), Korean (ko), Polish (pl), Russian (ru), Spanish (es), Turkish (tr), Ukrainian (ua) and Vietnamese (vi) languages.\n-You can pick one using [configuration object](#setup-on-your-website).\n+Right now Remark42 is translated to English (en), Belarusian (be), Brazilian Portuguese (bp), Bulgarian (bg), Chinese (zh), Finnish (fi), French (fr), German (de), Japanese (ja), Korean (ko), Polish (pl), Russian (ru), Spanish (es), Turkish (tr), Ukrainian (ua) and Vietnamese (vi) languages. You can pick one using [configuration object](#setup-on-your-website).\n \n Do you want to translate Remark42 to other locales? Please see [this documentation](site/src/docs/contributing/translations/index.md) for details.\n \n@@ -569,17 +556,15 @@ And then add a node like this in the place where you want to see a number of com\n <span class=\"remark42__counter\" data-url=\"https://domain.com/path/to/article/\"></span>\n ```\n \n-You can use as many nodes like this as you need to.\n-The script will found all of them by the class `remark__counter`,\n-and it will use `data-url` attribute to define the page with comments.\n+You can use as many nodes like this as you need to. The script will found all of them by the class `remark__counter`, and it will use `data-url` attribute to define the page with comments.\n \n Also script can use `url` property from `remark_config` object, or `window.location.origin + window.location.pathname` if nothing else is defined.\n \n ## Build from the source\n \n * to build Docker container - `make docker`. This command will produce container `umputun/remark42`\n * to build a single binary for direct execution - `make OS=<linux|windows|darwin> ARCH=<amd64|386>`. This step will produce executable\n- `remark42` file with everything embedded\n+  `remark42` file with everything embedded\n \n ## Development\n \n@@ -599,20 +584,15 @@ docker-compose -f compose-private.yml build\n docker-compose -f compose-private.yml up\n ```\n \n-It starts Remark42 on `127.0.0.1:8080` and adds local OAuth2 provider \"Dev\".\n-To access the UI demo page go to `127.0.0.1:8080/web`.\n-By default, you would be logged in as `dev_user` which is defined as admin.\n-You can tweak any of [supported parameters](#parameters) in corresponded yml file.\n+It starts Remark42 on `127.0.0.1:8080` and adds local OAuth2 provider \"Dev\". To access the UI demo page go to `127.0.0.1:8080/web`. By default, you would be logged in as `dev_user` which is defined as admin. You can tweak any of [supported parameters](#parameters) in corresponded yml file.\n \n-Backend Docker Compose config by default skips running frontend related tests.\n-Frontend Docker Compose config by default skips running backend related tests and sets `NODE_ENV=development` for frontend build.\n+Backend Docker Compose config by default skips running frontend related tests. Frontend Docker Compose config by default skips running backend related tests and sets `NODE_ENV=development` for frontend build.\n \n ### Backend development\n \n To run backend locally (development mode, without Docker) you have to have the latest stable `go` toolchain [installed](https://golang.org/doc/install).\n \n-To run backend - `cd backend; go run app/main.go server --dbg --secret=12345 --url=http://127.0.0.1:8080 --admin-passwd=password --site=remark`.\n-It stars backend service with embedded bolt store on port `8080` with basic auth, allowing to authenticate and run requests directly, like this:\n+To run backend - `cd backend; go run app/main.go server --dbg --secret=12345 --url=http://127.0.0.1:8080 --admin-passwd=password --site=remark`. It stars backend service with embedded bolt store on port `8080` with basic auth, allowing to authenticate and run requests directly, like this:\n \n `HTTP http://admin:password@127.0.0.1:8080/api/v1/find?site=remark&sort=-active&format=tree&url=http://127.0.0.1:8080`\n \n@@ -623,6 +603,7 @@ It stars backend service with embedded bolt store on port `8080` with basic auth\n Frontend guide can be found here: [./frontend/README.md](./frontend/README.md).\n \n #### Build\n+\n You should have at least 2GB RAM or swap enabled for building.\n \n * install [Node.js 12.11](https://nodejs.org/en/) or higher\n@@ -631,25 +612,19 @@ You should have at least 2GB RAM or swap enabled for building.\n * run `npm run build` there\n * result files will be saved in `./frontend/public`\n \n-**Note:** Running `npm install` will set up pre-commit hooks into your git repository.\n-It used to reformat your frontend code using `prettier` and lint with `eslint` and `stylelint` before every commit.\n+**Note:** Running `npm install` will set up pre-commit hooks into your git repository. It used to reformat your frontend code using `prettier` and lint with `eslint` and `stylelint` before every commit.\n \n #### Devserver\n \n-For local development mode with Hot Reloading use `npm start` instead of `npm run build`.\n-In this case, `webpack` will serve files using `webpack-dev-server` on `localhost:9000`.\n-By visiting `127.0.0.1:9000/web` you will get a page with the main comments widget\n-communicating with a demo server backend running on `https://demo.remark42.com`.\n-But you will not be able to log in with any OAuth providers due to security reasons.\n+For local development mode with Hot Reloading use `npm start` instead of `npm run build`. In this case, `webpack` will serve files using `webpack-dev-server` on `localhost:9000`. By visiting `127.0.0.1:9000/web` you will get a page with the main comments widget communicating with a demo server backend running on `https://demo.remark42.com`. But you will not be able to log in with any OAuth providers due to security reasons.\n \n You can attach to the locally running backend by providing `REMARK_URL` environment variable.\n \n ```shell\n npx cross-env REMARK_URL=http://127.0.0.1:8080 npm start\n ```\n \n-**Note:** If you want to redefine env variables such as `PORT` on your local instance you can add `.env` file\n-to `./frontend` folder and rewrite variables as you wish. For such functional, we use `dotenv`.\n+**Note:** If you want to redefine env variables such as `PORT` on your local instance you can add `.env` file to `./frontend` folder and rewrite variables as you wish. For such functional, we use `dotenv`.\n \n The best way to start a local developer environment:\n \n@@ -669,6 +644,7 @@ Developer build running by `webpack-dev-server` supports devtools for [React](ht\n \n * `GET /auth/{provider}/login?from=http://url&site=site_id&session=1` - perform \"social\" login with one of [supported providers](#register-oauth2-providers) and redirect to `url`. Presence of `session` (any non-zero value) change the default cookie expiration and makes them session-only\n * `GET /auth/logout` - logout\n+\n ```go\n type User struct {\n     Name     string `json:\"name\"`\n@@ -683,6 +659,7 @@ type User struct {\n ### Commenting\n \n * `POST /api/v1/comment` - add a comment, _auth required_\n+\n ```go\n type Comment struct {\n     ID          string    `json:\"id\"`      // comment ID, read only\n@@ -711,11 +688,12 @@ type Edit struct {\n     Summary   string    `json:\"summary\"`\n }\n ```\n+\n * `POST /api/v1/preview` - preview comment in HTML. Body is `Comment` to render\n * `GET /api/v1/find?site=site-id&url=post-url&sort=fld&format=tree|plain` - find all comments for given post\n \n-This is the primary call used by UI to show comments for the given post. It can return comments in two formats - `plain` and `tree`.\n-In plain format result will be sorted list of `Comment`. In tree format this is going to be tree-like object with this structure:\n+This is the primary call used by UI to show comments for the given post. It can return comments in two formats - `plain` and `tree`. In plain format result will be sorted list of `Comment`. In tree format this is going to be tree-like object with this structure:\n+\n ```go\n type Tree struct {\n     Nodes []Node         `json:\"comments\"`\n@@ -727,28 +705,34 @@ type Node struct {\n     Replies []Node        `json:\"replies,omitempty\"`\n }\n ```\n+\n Sort can be `time`, `active` or `score`. Supported sort order with prefix -/+, i.e. `-time`. For `tree` mode sort will be applied to top-level comments only and all replies are always sorted by time.\n \n * `PUT /api/v1/comment/{id}?site=site-id&url=post-url` - edit comment, allowed once in `EDIT_TIME` minutes since creation. Body is `EditRequest` JSON\n+\n ```go\n type EditRequest struct {\n     Text    string `json:\"text\"`    // updated text\n     Summary string `json:\"summary\"` // optional, summary of the edit\n     Delete  bool   `json:\"delete\"`  // delete flag\n }{}\n ```\n+\n * `GET /api/v1/last/{max}?site=site-id&since=ts-msec` - get up to `{max}` last comments, `since` (epoch time, milliseconds) is optional\n * `GET /api/v1/id/{id}?site=site-id` - get comment by `comment id`\n * `GET /api/v1/comments?site=site-id&user=id&limit=N` - get comment by `user id`, returns `response` object\n+\n ```go\n type response struct {\n     Comments []store.Comment `json:\"comments\"`\n     Count    int             `json:\"count\"`\n }{}\n ```\n+\n * `GET /api/v1/count?site=site-id&url=post-url` - get comment's count for `{url}`\n * `POST /api/v1/count?site=siteID` - get number of comments for posts from post body (list of post IDs)\n * `GET /api/v1/list?site=site-id&limit=5&skip=2` - list commented posts, returns array or `PostInfo`, limit=0 will return all posts\n+\n ```go\n type PostInfo struct {\n     URL      string    `json:\"url\"`\n@@ -758,11 +742,13 @@ type PostInfo struct {\n     LastTS   time.Time `json:\"last_time,omitempty\"`\n }\n ```\n+\n * `GET /api/v1/user` - get user info, _auth required_\n * `PUT /api/v1/vote/{id}?site=site-id&url=post-url&vote=1` - vote for comment. `vote`=1 will increase score, -1 decrease, _auth required_\n * `GET /api/v1/userdata?site=site-id` - export all user data to gz stream, _auth required_\n * `POST /api/v1/deleteme?site=site-id` - request deletion of user data, _auth required_\n * `GET /api/v1/config?site=site-id` - returns configuration (parameters) for given site\n+\n ```go\n type Config struct {\n     Version        string   `json:\"version\"`\n@@ -779,6 +765,7 @@ type Config struct {\n     EmojiEnabled   bool     `json:\"emoji_enabled\"`\n }\n ```\n+\n * `GET /api/v1/info?site=site-idd&url=post-url` - returns `PostInfo` for site and URL\n \n ### Streaming API\n@@ -814,6 +801,7 @@ data: {\"url\":\"https://radio-t.com/blah1\",\"count\":8,\"first_time\":\"2019-06-18T12:5\n event: info\n data: {\"url\":\"https://radio-t.com/blah1\",\"count\":9,\"first_time\":\"2019-06-18T12:53:48.125686-05:00\",\"last_time\":\"2019-06-18T12:53:48.254669-05:00\"}\n ```\n+\n </details>\n \n ### RSS feeds\n@@ -845,22 +833,25 @@ _returned ID should be appended to load image URL on caller side_\n * `DELETE /api/v1/admin/comment/{id}?site=site-id&url=post-url` - delete comment by `id`\n * `PUT /api/v1/admin/user/{userid}?site=site-id&block=1&ttl=7d` - block or unblock user with optional TTL (default=permanent)\n * `GET api/v1/admin/blocked&site=site-id` - list of blocked user IDs\n+\n ```go\n type BlockedUser struct {\n     ID    string    `json:\"id\"`\n     Name  string    `json:\"name\"`\n     Until time.Time `json:\"time\"`\n }\n ```\n+\n * `GET /api/v1/admin/export?site=site-id&mode=[stream|file]` - export all comments to JSON stream or gz file\n * `POST /api/v1/admin/import?site=site-id` - import comments from the backup, uses post body\n * `POST /api/v1/admin/import/form?site=site-id` - import comments from the backup, user post form\n-* `POST /api/v1/admin/remap?site=site-id` - remap comments to different URLs. Expect list of \"from-url new-url\" pairs separated by \\n.\n-From-url and new-url parts are separated by space. If URLs end with an asterisk (*) it means matching by the prefix. Remap procedure based on export/import chain so make the backup first\n+* `POST /api/v1/admin/remap?site=site-id` - remap comments to different URLs. Expect list of \"from-url new-url\" pairs separated by \\n. From-url and new-url parts are separated by space. If URLs end with an asterisk (*) it means matching by the prefix. Remap procedure based on export/import chain so make the backup first\n+\n ```\n http://oldsite.com* https://newsite.com*\n http://oldsite.com/from-old-page/1 https://newsite.com/to-new-page/1\n ```\n+\n * `GET /api/v1/admin/wait?site=site-id` - wait for completion for any async migration ops (import or remap)\n * `PUT /api/v1/admin/pin/{id}?site=site-id&url=post-url&pin=1` - pin or unpin comment\n * `GET /api/v1/admin/user/{userid}?site=site-id` - get user's info"
    },
    {
      "sha": "266e4e26fc2d9247e11d65c5ff8d35c34acd4d62",
      "filename": "SECURITY.md",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/2c8556ff2f9cd1d549124ce0a99a63a609e79e37/SECURITY.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2c8556ff2f9cd1d549124ce0a99a63a609e79e37/SECURITY.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/SECURITY.md?ref=2c8556ff2f9cd1d549124ce0a99a63a609e79e37",
      "patch": "@@ -6,13 +6,10 @@ We release patches for security vulnerabilities.\n \n | Version | Supported          |\n | ------- | ------------------ |\n-| current | :white_check_mark: \n+| current | :white_check_mark: |\n | 1.6.x   | :white_check_mark: |\n | <1.5.x | :x:                 |\n \n-\n ## Reporting a Vulnerability\n \n-Please report (suspected) security vulnerabilities to umputun@gmail.com. You will receive a response from us within 48 hours.\n-If the issue is confirmed, we will release a patch as soon as possible depending on complexity but historically within a few days.\n-\n+Please report (suspected) security vulnerabilities to umputun@gmail.com. You will receive a response from us within 48 hours. If the issue is confirmed, we will release a patch as soon as possible depending on complexity but historically within a few days."
    },
    {
      "sha": "8e0654a6cf74d7268665c7bbd84c910b5271a6a9",
      "filename": "backend/_example/memory_store/README.md",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/2c8556ff2f9cd1d549124ce0a99a63a609e79e37/backend/_example/memory_store/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2c8556ff2f9cd1d549124ce0a99a63a609e79e37/backend/_example/memory_store/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/_example/memory_store/README.md?ref=2c8556ff2f9cd1d549124ce0a99a63a609e79e37",
      "patch": "@@ -1,6 +1,6 @@\n-# sample store implementation \n+# sample store implementation\n \n-`memory_store` illustrates how to make a custom storage plugin for remark42. \n+`memory_store` illustrates how to make a custom storage plugin for remark42.\n \n In order to run remark42 with memory_store copy provided `compose-dev-memstore.yml` to the root directory and run:\n \n@@ -9,5 +9,4 @@ In order to run remark42 with memory_store copy provided `compose-dev-memstore.y\n \n As usual, demo site will run on http://127.0.0.1:8080/web/\n \n-note: in order to work with the latest (current) version of master `go.mod` uses replacement directive for the backend package.\n-In real-life usage `replace github.com/umputun/remark42/backend => ../../`  should not be used. \n\\ No newline at end of file\n+note: in order to work with the latest (current) version of master `go.mod` uses replacement directive for the backend package. In real-life usage `replace github.com/umputun/remark42/backend => ../../`  should not be used. \n\\ No newline at end of file"
    }
  ]
}
