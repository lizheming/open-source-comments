{
  "sha": "2404fa7a23d606f0dbf1f3f2077f740108b62d48",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODoyNDA0ZmE3YTIzZDYwNmYwZGJmMWYzZjIwNzdmNzQwMTA4YjYyZDQ4",
  "commit": {
    "author": {
      "name": "Martin Brennan",
      "email": "mjrbrennan@gmail.com",
      "date": "2021-01-12T22:49:29Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-01-12T22:49:29Z"
    },
    "message": "DEV: Split toggle topic close job (#11679)\n\nSplits the `ToggleTopicClosed` job into two distinct `OpenTopic` and `CloseTopic` jobs to make the code clearer. The old job cannot be deleted yet because of outstanding sidekiq schedules, so a todo has been added to do so later this year.\r\n\r\nAlso replaced mentions of `topic_status_update` with `topic_timer` in some files, because the `topic_status_update` model is obsolete and replaced by topic timer.\r\n\r\nAdded some shortcut methods for checking if a topic is open/whether a user can change an open topic.",
    "tree": {
      "sha": "a60459b9a17833a80397e92a097e479f48269aba",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/a60459b9a17833a80397e92a097e479f48269aba"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/2404fa7a23d606f0dbf1f3f2077f740108b62d48",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf/id5CRBK7hj4Ov3rIwAAdHIIAIpK9ktyfsc+8yMZBPIcXUNE\n+O0up+Zc0ZbxpIfeh7gdeLb2CVR4V1BiPrN0iHdgc3FUxIQhV1xhbtC6i0deCDCn\nso+4YpaNQ0FRAx6igBWPWBT2SyqMFSRS99Ia9krCcJAbkMhoRxHhfj6aHpbaPAUP\nc2nhLWauqnjdK3HRPshZO6IeMmu/t1V8raf6kiQFm1T8/18TgWiSQbdgTB+31suf\nffHipHGdCHrhmwqEQ6j4xwz4Oby70XuRrtwGbp6DL0ZEYv8oRtCVI59fLVoYR7lo\ny7RxtKlsrHSrkDqQIhJS//9H+2Wfz6YNBsFE89+s4cuhaXaPF41bK252bKoxGBk=\n=8hD+\n-----END PGP SIGNATURE-----\n",
      "payload": "tree a60459b9a17833a80397e92a097e479f48269aba\nparent 0005036ae3a24d6811cfeed2690d701723c16883\nauthor Martin Brennan <mjrbrennan@gmail.com> 1610491769 +1000\ncommitter GitHub <noreply@github.com> 1610491769 +1000\n\nDEV: Split toggle topic close job (#11679)\n\nSplits the `ToggleTopicClosed` job into two distinct `OpenTopic` and `CloseTopic` jobs to make the code clearer. The old job cannot be deleted yet because of outstanding sidekiq schedules, so a todo has been added to do so later this year.\r\n\r\nAlso replaced mentions of `topic_status_update` with `topic_timer` in some files, because the `topic_status_update` model is obsolete and replaced by topic timer.\r\n\r\nAdded some shortcut methods for checking if a topic is open/whether a user can change an open topic."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/2404fa7a23d606f0dbf1f3f2077f740108b62d48",
  "html_url": "https://github.com/discourse/discourse/commit/2404fa7a23d606f0dbf1f3f2077f740108b62d48",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/2404fa7a23d606f0dbf1f3f2077f740108b62d48/comments",
  "author": {
    "login": "martin-brennan",
    "id": 920448,
    "node_id": "MDQ6VXNlcjkyMDQ0OA==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/920448?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/martin-brennan",
    "html_url": "https://github.com/martin-brennan",
    "followers_url": "https://api.github.com/users/martin-brennan/followers",
    "following_url": "https://api.github.com/users/martin-brennan/following{/other_user}",
    "gists_url": "https://api.github.com/users/martin-brennan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/martin-brennan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/martin-brennan/subscriptions",
    "organizations_url": "https://api.github.com/users/martin-brennan/orgs",
    "repos_url": "https://api.github.com/users/martin-brennan/repos",
    "events_url": "https://api.github.com/users/martin-brennan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/martin-brennan/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0005036ae3a24d6811cfeed2690d701723c16883",
      "url": "https://api.github.com/repos/discourse/discourse/commits/0005036ae3a24d6811cfeed2690d701723c16883",
      "html_url": "https://github.com/discourse/discourse/commit/0005036ae3a24d6811cfeed2690d701723c16883"
    }
  ],
  "stats": {
    "total": 437,
    "additions": 381,
    "deletions": 56
  },
  "files": [
    {
      "sha": "5a60883e8f17162ce4147a3b686ed18be3c201c6",
      "filename": "app/jobs/regular/bump_topic.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/bump_topic.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/bump_topic.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/bump_topic.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -4,7 +4,7 @@ module Jobs\n   class BumpTopic < ::Jobs::Base\n \n     def execute(args)\n-      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id] || args[:topic_status_update_id])\n+      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id])\n \n       topic = topic_timer&.topic\n "
    },
    {
      "sha": "0e7f0cfcde9f9bd90f898a0a8b20d0df251ac3d2",
      "filename": "app/jobs/regular/clear_slow_mode.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/clear_slow_mode.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/clear_slow_mode.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/clear_slow_mode.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -4,7 +4,7 @@ module Jobs\n   class ClearSlowMode < ::Jobs::Base\n \n     def execute(args)\n-      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id] || args[:topic_status_update_id])\n+      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id])\n \n       if topic_timer.nil? || topic_timer.execute_at > Time.zone.now\n         return"
    },
    {
      "sha": "96364d5841cd0f8cd2422e7b7de13a6072808888",
      "filename": "app/jobs/regular/close_topic.rb",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/close_topic.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/close_topic.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/close_topic.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -0,0 +1,33 @@\n+# frozen_string_literal: true\n+\n+module Jobs\n+  class CloseTopic < ::Jobs::Base\n+    def execute(args)\n+      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id])\n+      return if !topic_timer&.runnable?\n+\n+      topic = topic_timer.topic\n+      user = topic_timer.user\n+      silent = args[:silent]\n+\n+      if topic.blank? || topic.closed?\n+        topic_timer.destroy!\n+        return\n+      end\n+\n+      if !Guardian.new(user).can_close_topic?(topic)\n+        topic_timer.destroy!\n+        topic.reload\n+\n+        if topic_timer.based_on_last_post\n+          topic.inherit_auto_close_from_category(timer_type: silent ? :silent_close : :close)\n+        end\n+\n+        return\n+      end\n+\n+      # this handles deleting the topic timer as wel, see TopicStatusUpdater\n+      topic.update_status('autoclosed', true, user, { silent: silent })\n+    end\n+  end\n+end"
    },
    {
      "sha": "0e5605a836667f5b85aaba401ef079a711563adb",
      "filename": "app/jobs/regular/delete_replies.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/delete_replies.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/delete_replies.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/delete_replies.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -4,7 +4,7 @@ module Jobs\n   class DeleteReplies < ::Jobs::Base\n \n     def execute(args)\n-      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id] || args[:topic_status_update_id])\n+      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id])\n \n       topic = topic_timer&.topic\n "
    },
    {
      "sha": "829a833119765370b10c2c52016b3fc7734b6f73",
      "filename": "app/jobs/regular/delete_topic.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/delete_topic.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/delete_topic.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/delete_topic.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -4,7 +4,7 @@ module Jobs\n   class DeleteTopic < ::Jobs::Base\n \n     def execute(args)\n-      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id] || args[:topic_status_update_id])\n+      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id])\n \n       topic = topic_timer&.topic\n "
    },
    {
      "sha": "36246cb653181c91862c1c3c206811dbe95f794d",
      "filename": "app/jobs/regular/open_topic.rb",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/open_topic.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/open_topic.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/open_topic.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -0,0 +1,45 @@\n+# frozen_string_literal: true\n+\n+module Jobs\n+  class OpenTopic < ::Jobs::Base\n+    def execute(args)\n+      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id])\n+      return if !topic_timer&.runnable?\n+\n+      topic = topic_timer.topic\n+      user = topic_timer.user\n+\n+      if topic.blank?\n+        topic_timer.destroy!\n+        return\n+      end\n+\n+      if !Guardian.new(user).can_open_topic?(topic) || topic.open?\n+        topic_timer.destroy!\n+        topic.reload\n+\n+        topic.inherit_auto_close_from_category(timer_type: :close)\n+\n+        return\n+      end\n+\n+      # guards against reopening a topic too early if the topic has\n+      # been auto closed because of reviewables/reports, this will\n+      # just update the existing topic timer and push it down the line\n+      if topic.auto_close_threshold_reached?\n+        topic.set_or_create_timer(\n+          TopicTimer.types[:open],\n+          SiteSetting.num_hours_to_close_topic,\n+          by_user: Discourse.system_user\n+        )\n+      else\n+\n+        # autoclosed, false is just another way of saying open.\n+        # this handles deleting the topic timer as wel, see TopicStatusUpdater\n+        topic.update_status('autoclosed', false, user)\n+      end\n+\n+      topic.inherit_auto_close_from_category(timer_type: :close)\n+    end\n+  end\n+end"
    },
    {
      "sha": "f3c411483881c03acc7df4bf1b044a32d19c57f7",
      "filename": "app/jobs/regular/publish_topic_to_category.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/publish_topic_to_category.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/publish_topic_to_category.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/publish_topic_to_category.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -3,7 +3,7 @@\n module Jobs\n   class PublishTopicToCategory < ::Jobs::Base\n     def execute(args)\n-      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id] || args[:topic_status_update_id])\n+      topic_timer = TopicTimer.find_by(id: args[:topic_timer_id])\n       return if topic_timer.blank?\n \n       topic = topic_timer.topic"
    },
    {
      "sha": "55f7bce88dd8e4f3aa7fd6e3d024fb71b7809266",
      "filename": "app/jobs/regular/toggle_topic_closed.rb",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/toggle_topic_closed.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/jobs/regular/toggle_topic_closed.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/toggle_topic_closed.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -1,9 +1,14 @@\n # frozen_string_literal: true\n \n module Jobs\n+  # TODO: DEPRECATED - Use OpenTopic and CloseTopic instead.\n+  # (martin - 2021-05-01) - Delete once topic timer revamp is completed.\n   class ToggleTopicClosed < ::Jobs::Base\n     def execute(args)\n       topic_timer = TopicTimer.find_by(id: args[:topic_timer_id] || args[:topic_status_update_id])\n+\n+      # state false is Open Topic\n+      # state true is Close Topic\n       state = !!args[:state]\n       timer_type = args[:silent] ? :silent_close : :close\n "
    },
    {
      "sha": "fa21ad9670951b13568fc39400811a12ba96e33c",
      "filename": "app/models/topic.rb",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/models/topic.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/models/topic.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/topic.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -576,13 +576,17 @@ def self.listable_count_per_day(start_date, end_date, category_id = nil, include\n   end\n \n   def private_message?\n-    archetype == Archetype.private_message\n+    self.archetype == Archetype.private_message\n   end\n \n   def regular?\n     self.archetype == Archetype.default\n   end\n \n+  def open?\n+    !self.closed?\n+  end\n+\n   MAX_SIMILAR_BODY_LENGTH ||= 200\n \n   def self.similar_to(title, raw, user = nil)"
    },
    {
      "sha": "053742e1723727e49545b067636d1bdc13ef0278",
      "filename": "app/models/topic_timer.rb",
      "status": "modified",
      "additions": 26,
      "deletions": 21,
      "changes": 47,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/models/topic_timer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/models/topic_timer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/topic_timer.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -15,7 +15,7 @@ class TopicTimer < ActiveRecord::Base\n   validates :status_type, uniqueness: { scope: [:topic_id, :deleted_at, :user_id] }, if: :private_type?\n   validates :category_id, presence: true, if: :publishing_to_category?\n \n-  validate :ensure_update_will_happen\n+  validate :executed_at_in_future?\n \n   scope :scheduled_bump_topics, -> { where(status_type: TopicTimer.types[:bump], deleted_at: nil).pluck(:topic_id) }\n \n@@ -84,23 +84,38 @@ def private_type?\n     !!self.class.private_types[self.status_type]\n   end\n \n+  def runnable?\n+    return false if deleted_at.present?\n+    return false if execute_at > Time.zone.now\n+    true\n+  end\n+\n   private\n \n-  def ensure_update_will_happen\n-    if created_at && (execute_at < created_at)\n-      errors.add(:execute_at, I18n.t(\n-        'activerecord.errors.models.topic_timer.attributes.execute_at.in_the_past'\n-      ))\n-    end\n+  def executed_at_in_future?\n+    return if created_at.blank? || (execute_at > created_at)\n+\n+    errors.add(:execute_at, I18n.t(\n+      'activerecord.errors.models.topic_timer.attributes.execute_at.in_the_past'\n+    ))\n   end\n \n+  # TODO(martin - 2021-05-01) - Remove cancels for toggle_topic_closed once topic timer revamp completed.\n   def cancel_auto_close_job\n     Jobs.cancel_scheduled_job(:toggle_topic_closed, topic_timer_id: id)\n+    Jobs.cancel_scheduled_job(:close_topic, topic_timer_id: id)\n+  end\n+\n+  # TODO(martin - 2021-05-01) - Remove cancels for toggle_topic_closed once topic timer revamp completed.\n+  def cancel_auto_open_job\n+    Jobs.cancel_scheduled_job(:toggle_topic_closed, topic_timer_id: id)\n+    Jobs.cancel_scheduled_job(:open_topic, topic_timer_id: id)\n   end\n-  alias_method :cancel_auto_open_job, :cancel_auto_close_job\n \n+  # TODO(martin - 2021-05-01) - Remove cancels for toggle_topic_closed once topic timer revamp completed.\n   def cancel_auto_silent_close_job\n     Jobs.cancel_scheduled_job(:toggle_topic_closed, topic_timer_id: id)\n+    Jobs.cancel_scheduled_job(:close_topic, topic_timer_id: id)\n   end\n \n   def cancel_auto_publish_to_category_job\n@@ -138,29 +153,19 @@ def schedule_auto_bump_job(time)\n   def schedule_auto_open_job(time)\n     topic.update_status('closed', true, user) if topic && !topic.closed\n \n-    Jobs.enqueue_at(time, :toggle_topic_closed,\n-      topic_timer_id: id,\n-      state: false\n-    )\n+    Jobs.enqueue_at(time, :open_topic, topic_timer_id: id)\n   end\n \n   def schedule_auto_close_job(time)\n     topic.update_status('closed', false, user) if topic&.closed\n \n-    Jobs.enqueue_at(time, :toggle_topic_closed,\n-      topic_timer_id: id,\n-      state: true\n-    )\n+    Jobs.enqueue_at(time, :close_topic, topic_timer_id: id)\n   end\n \n   def schedule_auto_silent_close_job(time)\n     topic.update_status('closed', false, user) if topic&.closed\n \n-    Jobs.enqueue_at(time, :toggle_topic_closed,\n-      topic_timer_id: id,\n-      silent: true,\n-      state: true\n-    )\n+    Jobs.enqueue_at(time, :close_topic, topic_timer_id: id, silent: true)\n   end\n \n   def schedule_auto_publish_to_category_job(time)"
    },
    {
      "sha": "e96d4dcd8c59b2d2f365ae0663d66a019a9e5af9",
      "filename": "app/services/topic_status_updater.rb",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/services/topic_status_updater.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/app/services/topic_status_updater.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/services/topic_status_updater.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -4,7 +4,7 @@\n   def update!(status, enabled, opts = {})\n     status = Status.new(status, enabled)\n \n-    @topic_status_update = topic.public_topic_timer\n+    @topic_timer = topic.public_topic_timer\n \n     updated = nil\n     Topic.transaction do\n@@ -46,7 +46,7 @@ def change(status, opts = {})\n       UserProfile.remove_featured_topic_from_all_profiles(topic)\n     end\n \n-    if @topic_status_update\n+    if @topic_timer\n       if status.manually_closing_topic? || status.closing_topic?\n         topic.delete_topic_timer(TopicTimer.types[:close])\n         topic.delete_topic_timer(TopicTimer.types[:silent_close])\n@@ -83,17 +83,17 @@ def update_read_state_for(status, old_highest_read)\n   def message_for(status)\n     if status.autoclosed?\n       locale_key = status.locale_key.dup\n-      locale_key << \"_lastpost\" if @topic_status_update&.based_on_last_post\n+      locale_key << \"_lastpost\" if @topic_timer&.based_on_last_post\n       message_for_autoclosed(locale_key)\n     end\n   end\n \n   def message_for_autoclosed(locale_key)\n     num_minutes =\n-      if @topic_status_update&.based_on_last_post\n-        (@topic_status_update.duration || 0).hours\n-      elsif @topic_status_update&.created_at\n-        Time.zone.now - @topic_status_update.created_at\n+      if @topic_timer&.based_on_last_post\n+        (@topic_timer.duration || 0).hours\n+      elsif @topic_timer&.created_at\n+        Time.zone.now - @topic_timer.created_at\n       else\n         Time.zone.now - topic.created_at\n       end"
    },
    {
      "sha": "d295fd91dcf65c8ae964cfb1cbd8db88eaee5904",
      "filename": "lib/guardian/topic_guardian.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/lib/guardian/topic_guardian.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/lib/guardian/topic_guardian.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/guardian/topic_guardian.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -234,6 +234,7 @@ def can_perform_action_available_to_group_moderators?(topic)\n   end\n   alias :can_archive_topic? :can_perform_action_available_to_group_moderators?\n   alias :can_close_topic? :can_perform_action_available_to_group_moderators?\n+  alias :can_open_topic? :can_perform_action_available_to_group_moderators?\n   alias :can_split_merge_topic? :can_perform_action_available_to_group_moderators?\n   alias :can_edit_staff_notes? :can_perform_action_available_to_group_moderators?\n "
    },
    {
      "sha": "538259a988b31f5c7500ffe6aae87c2f6691b30d",
      "filename": "spec/integration/topic_auto_close_spec.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/spec/integration/topic_auto_close_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/spec/integration/topic_auto_close_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/integration/topic_auto_close_spec.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -4,7 +4,7 @@\n require 'rails_helper'\n \n describe Topic do\n-  let(:job_klass) { Jobs::ToggleTopicClosed }\n+  let(:job_klass) { Jobs::CloseTopic }\n \n   context 'creating a topic without auto-close' do\n     let(:topic) { Fabricate(:topic, category: category) }\n@@ -46,7 +46,6 @@\n           args = job_klass.jobs.last['args'].first\n \n           expect(args[\"topic_timer_id\"]).to eq(topic.public_topic_timer.id)\n-          expect(args[\"state\"]).to eq(true)\n         end\n \n         context 'topic was created by staff user' do\n@@ -65,7 +64,6 @@\n             args = job_klass.jobs.last['args'].first\n \n             expect(args[\"topic_timer_id\"]).to eq(topic_status_update.id)\n-            expect(args[\"state\"]).to eq(true)\n           end\n \n           context 'topic is closed manually' do\n@@ -96,7 +94,6 @@\n             args = job_klass.jobs.last['args'].first\n \n             expect(args[\"topic_timer_id\"]).to eq(topic_status_update.id)\n-            expect(args[\"state\"]).to eq(true)\n           end\n         end\n       end"
    },
    {
      "sha": "d1d6323f5b1e01c96bc31320fdd2d8d6b845b6c6",
      "filename": "spec/jobs/close_topic_spec.rb",
      "status": "added",
      "additions": 99,
      "deletions": 0,
      "changes": 99,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/spec/jobs/close_topic_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/spec/jobs/close_topic_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/jobs/close_topic_spec.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -0,0 +1,99 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+describe Jobs::CloseTopic do\n+  fab!(:admin) { Fabricate(:admin) }\n+\n+  fab!(:topic) do\n+    Fabricate(:topic_timer, user: admin).topic\n+  end\n+\n+  it 'should be able to close a topic' do\n+    freeze_time(61.minutes.from_now) do\n+      described_class.new.execute(\n+        topic_timer_id: topic.public_topic_timer.id,\n+        state: true\n+      )\n+\n+      expect(topic.reload.closed).to eq(true)\n+\n+      expect(Post.last.raw).to eq(I18n.t(\n+        'topic_statuses.autoclosed_enabled_minutes', count: 61\n+      ))\n+    end\n+  end\n+\n+  describe 'when trying to close a topic that has already been closed' do\n+    it 'should delete the topic timer' do\n+      freeze_time(topic.public_topic_timer.execute_at + 1.minute)\n+\n+      topic.update!(closed: true)\n+\n+      expect do\n+        described_class.new.execute(\n+          topic_timer_id: topic.public_topic_timer.id,\n+          state: true\n+        )\n+      end.to change { TopicTimer.exists?(topic_id: topic.id) }.from(true).to(false)\n+    end\n+  end\n+\n+  describe 'when trying to close a topic that has been deleted' do\n+    it 'should delete the topic timer' do\n+      freeze_time(topic.public_topic_timer.execute_at + 1.minute)\n+\n+      topic.trash!\n+\n+      expect do\n+        described_class.new.execute(\n+          topic_timer_id: topic.public_topic_timer.id,\n+          state: true\n+        )\n+      end.to change { TopicTimer.exists?(topic_id: topic.id) }.from(true).to(false)\n+    end\n+  end\n+\n+  describe 'when user is no longer authorized to close topics' do\n+    fab!(:user) { Fabricate(:user) }\n+\n+    fab!(:topic) do\n+      Fabricate(:topic_timer, user: user).topic\n+    end\n+\n+    it 'should destroy the topic timer' do\n+      freeze_time(topic.public_topic_timer.execute_at + 1.minute)\n+\n+      expect do\n+        described_class.new.execute(\n+          topic_timer_id: topic.public_topic_timer.id,\n+          state: true\n+        )\n+      end.to change { TopicTimer.exists?(topic_id: topic.id) }.from(true).to(false)\n+\n+      expect(topic.reload.closed).to eq(false)\n+    end\n+\n+    it \"should reconfigure topic timer if category's topics are set to autoclose\" do\n+      category = Fabricate(:category,\n+        auto_close_based_on_last_post: true,\n+        auto_close_hours: 5\n+      )\n+\n+      topic = Fabricate(:topic, category: category)\n+      topic.public_topic_timer.update!(user: user)\n+\n+      freeze_time(topic.public_topic_timer.execute_at + 1.minute)\n+\n+      expect do\n+        described_class.new.execute(\n+          topic_timer_id: topic.public_topic_timer.id,\n+          state: true\n+        )\n+      end.to change { topic.reload.public_topic_timer.user }.from(user).to(Discourse.system_user)\n+        .and change { topic.public_topic_timer.id }\n+\n+      expect(topic.reload.closed).to eq(false)\n+    end\n+  end\n+end"
    },
    {
      "sha": "6200d138372241a5033620c8ebf14f08773a7314",
      "filename": "spec/jobs/open_topic_spec.rb",
      "status": "added",
      "additions": 99,
      "deletions": 0,
      "changes": 99,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/spec/jobs/open_topic_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/spec/jobs/open_topic_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/jobs/open_topic_spec.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -0,0 +1,99 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+describe Jobs::OpenTopic do\n+  fab!(:admin) { Fabricate(:admin) }\n+\n+  fab!(:topic) do\n+    Fabricate(:topic_timer, user: admin).topic\n+  end\n+\n+  before do\n+    topic.update!(closed: true)\n+  end\n+\n+  it 'should work' do\n+    freeze_time(61.minutes.from_now) do\n+      described_class.new.execute(topic_timer_id: topic.public_topic_timer.id)\n+\n+      expect(topic.reload.open?).to eq(true)\n+\n+      expect(Post.last.raw).to eq(I18n.t(\n+        'topic_statuses.autoclosed_disabled_minutes', count: 61\n+      ))\n+    end\n+  end\n+\n+  describe 'when category has auto close configured' do\n+    fab!(:category) do\n+      Fabricate(:category,\n+                auto_close_based_on_last_post: true,\n+                auto_close_hours: 5\n+               )\n+    end\n+\n+    fab!(:topic) { Fabricate(:topic, category: category, closed: true) }\n+\n+    it \"should restore the category's auto close timer\" do\n+      Fabricate(:topic_timer,\n+                status_type: TopicTimer.types[:open],\n+                topic: topic,\n+                user: admin\n+               )\n+\n+      freeze_time(61.minutes.from_now) do\n+        described_class.new.execute(topic_timer_id: topic.public_topic_timer.id)\n+\n+        expect(topic.reload.open?).to eq(true)\n+\n+        topic_timer = topic.public_topic_timer\n+\n+        expect(topic_timer.status_type).to eq(TopicTimer.types[:close])\n+        expect(topic_timer.execute_at).to eq_time(5.hours.from_now)\n+      end\n+    end\n+  end\n+\n+  describe 'when user is no longer authorized to open topics' do\n+    fab!(:user) { Fabricate(:user) }\n+\n+    fab!(:topic) do\n+      Fabricate(:topic_timer, user: user).topic\n+    end\n+\n+    it 'should destroy the topic timer' do\n+      topic.update!(closed: true)\n+      freeze_time(topic.public_topic_timer.execute_at + 1.minute)\n+\n+      expect do\n+        described_class.new.execute(topic_timer_id: topic.public_topic_timer.id)\n+      end.to change { TopicTimer.exists?(topic_id: topic.id) }.from(true).to(false)\n+\n+      expect(topic.reload.open?).to eq(false)\n+    end\n+\n+    it \"should reconfigure topic timer if category's topics are set to autoclose\" do\n+      category = Fabricate(:category,\n+        auto_close_based_on_last_post: true,\n+        auto_close_hours: 5\n+      )\n+\n+      topic = Fabricate(:topic, category: category)\n+      topic.public_topic_timer.update!(user: user)\n+      topic.reload\n+\n+      freeze_time(topic.public_topic_timer.execute_at + 1.minute)\n+\n+      expect do\n+        described_class.new.execute(\n+          topic_timer_id: topic.public_topic_timer.id,\n+          state: true\n+        )\n+      end.to change { topic.reload.public_topic_timer.user }.from(user).to(Discourse.system_user)\n+        .and change { topic.public_topic_timer.id }\n+\n+      expect(topic.reload.closed).to eq(false)\n+    end\n+  end\n+end"
    },
    {
      "sha": "3f7e80d50a34751365190f2af2bcfd3e8d20bb7d",
      "filename": "spec/models/post_action_spec.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/spec/models/post_action_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/spec/models/post_action_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/post_action_spec.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -764,8 +764,8 @@ def value_for(user_id, dt)\n \n         freeze_time timer.execute_at\n \n-        expect_enqueued_with(job: :toggle_topic_closed, args: { topic_timer_id: timer.id, state: false }, at: Time.zone.now + 1.hour) do\n-          Jobs::ToggleTopicClosed.new.execute(topic_timer_id: timer.id, state: false)\n+        expect_enqueued_with(job: :open_topic, args: { topic_timer_id: timer.id }, at: Time.zone.now + 1.hour) do\n+          Jobs::OpenTopic.new.execute(topic_timer_id: timer.id)\n         end\n \n         expect(topic.reload.closed).to eq(true)"
    },
    {
      "sha": "46bd16bd8dcc56ca7b90b1fe6f78f37ea354358e",
      "filename": "spec/models/topic_timer_spec.rb",
      "status": "modified",
      "additions": 53,
      "deletions": 16,
      "changes": 69,
      "blob_url": "https://github.com/discourse/discourse/blob/2404fa7a23d606f0dbf1f3f2077f740108b62d48/spec/models/topic_timer_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2404fa7a23d606f0dbf1f3f2077f740108b62d48/spec/models/topic_timer_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/topic_timer_spec.rb?ref=2404fa7a23d606f0dbf1f3f2077f740108b62d48",
      "patch": "@@ -91,15 +91,18 @@\n         Jobs.expects(:cancel_scheduled_job).with(\n           :toggle_topic_closed, topic_timer_id: topic_timer.id\n         )\n+        Jobs.expects(:cancel_scheduled_job).with(\n+          :close_topic, topic_timer_id: topic_timer.id\n+        )\n \n-        expect_enqueued_with(job: :toggle_topic_closed, args: { topic_timer_id: topic_timer.id, state: true }, at: 3.days.from_now) do\n+        expect_enqueued_with(job: :close_topic, args: { topic_timer_id: topic_timer.id }, at: 3.days.from_now) do\n           topic_timer.update!(execute_at: 3.days.from_now, created_at: Time.zone.now)\n         end\n       end\n \n       describe 'when execute_at is smaller than the current time' do\n         it 'should enqueue the job immediately' do\n-          expect_enqueued_with(job: :toggle_topic_closed, args: { topic_timer_id: topic_timer.id, state: true }, at: Time.zone.now) do\n+          expect_enqueued_with(job: :close_topic, args: { topic_timer_id: topic_timer.id }, at: Time.zone.now) do\n             topic_timer.update!(\n               execute_at: Time.zone.now - 1.hour,\n               created_at: Time.zone.now - 2.hour\n@@ -114,8 +117,11 @@\n         Jobs.expects(:cancel_scheduled_job).with(\n           :toggle_topic_closed, topic_timer_id: topic_timer.id\n         )\n+        Jobs.expects(:cancel_scheduled_job).with(\n+          :close_topic, topic_timer_id: topic_timer.id\n+        )\n \n-        expect_enqueued_with(job: :toggle_topic_closed, args: { topic_timer_id: topic_timer.id, state: true }, at: topic_timer.execute_at) do\n+        expect_enqueued_with(job: :close_topic, args: { topic_timer_id: topic_timer.id }, at: topic_timer.execute_at) do\n           topic_timer.update!(user: admin)\n         end\n       end\n@@ -235,27 +241,58 @@\n       Sidekiq::Worker.clear_all\n \n       expect { described_class.ensure_consistency! }\n-        .to change { Jobs::ToggleTopicClosed.jobs.count }.by(4)\n+        .to change { Jobs::CloseTopic.jobs.count }.by(2).and change { Jobs::OpenTopic.jobs.count }.by(2)\n \n-      expect(job_enqueued?(job: :toggle_topic_closed, args: {\n-        topic_timer_id: close_topic_timer.id,\n-        state: true\n+      expect(job_enqueued?(job: :close_topic, args: {\n+        topic_timer_id: close_topic_timer.id\n       })).to eq(true)\n \n-      expect(job_enqueued?(job: :toggle_topic_closed, args: {\n-        topic_timer_id: open_topic_timer.id,\n-        state: false\n+      expect(job_enqueued?(job: :open_topic, args: {\n+        topic_timer_id: open_topic_timer.id\n       })).to eq(true)\n \n-      expect(job_enqueued?(job: :toggle_topic_closed, args: {\n-        topic_timer_id: trashed_close_topic_timer.id,\n-        state: true\n+      expect(job_enqueued?(job: :close_topic, args: {\n+        topic_timer_id: trashed_close_topic_timer.id\n       })).to eq(true)\n \n-      expect(job_enqueued?(job: :toggle_topic_closed, args: {\n-        topic_timer_id: trashed_open_topic_timer.id,\n-        state: false\n+      expect(job_enqueued?(job: :open_topic, args: {\n+        topic_timer_id: trashed_open_topic_timer.id\n       })).to eq(true)\n     end\n   end\n+\n+  describe \"runnable?\" do\n+    it \"returns false if execute_at > now\" do\n+      topic_timer = Fabricate.build(:topic_timer,\n+                                    execute_at: Time.zone.now + 1.hour,\n+                                    user: Fabricate(:user),\n+                                    topic: Fabricate(:topic)\n+                                   )\n+\n+      expect(topic_timer.runnable?).to eq(false)\n+    end\n+\n+    it \"returns false if timer is deleted\" do\n+      topic_timer = Fabricate.create(:topic_timer,\n+                                    execute_at: Time.zone.now - 1.hour,\n+                                    created_at: Time.zone.now - 2.hour,\n+                                    user: Fabricate(:user),\n+                                    topic: Fabricate(:topic)\n+                                   )\n+      topic_timer.trash!\n+\n+      expect(topic_timer.runnable?).to eq(false)\n+    end\n+\n+    it \"returns true if execute_at < now\" do\n+      topic_timer = Fabricate.build(:topic_timer,\n+                                    execute_at: Time.zone.now - 1.hour,\n+                                    created_at: Time.zone.now - 2.hour,\n+                                    user: Fabricate(:user),\n+                                    topic: Fabricate(:topic)\n+                                   )\n+\n+      expect(topic_timer.runnable?).to eq(true)\n+    end\n+  end\n end"
    }
  ]
}
