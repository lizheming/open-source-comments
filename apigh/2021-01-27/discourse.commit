{
  "sha": "c6a104295045ff95fbba12822e429cfe4fea2e84",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpjNmExMDQyOTUwNDVmZjk1ZmJiYTEyODIyZTQyOWNmZTRmZWEyZTg0",
  "commit": {
    "author": {
      "name": "Joffrey JAFFEUX",
      "email": "j.jaffeux@gmail.com",
      "date": "2021-01-27T11:39:20Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-01-27T11:39:20Z"
    },
    "message": "DEV: prettier 2.2.1 (#11862)",
    "tree": {
      "sha": "955ea59e676ea064fac60b07aba1e383c923fe0b",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/955ea59e676ea064fac60b07aba1e383c923fe0b"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/c6a104295045ff95fbba12822e429cfe4fea2e84",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgEVDoCRBK7hj4Ov3rIwAAdHIIABGZOxnDafpwn2uKhQE6ehGR\nK9diXBEPCrGOtlVq9MAyj3RgTnAPG+0ONdUEPo1j2HdVVUCMjxZsl/bLD57s0HF/\nnjI2Z51VdWb2Db4ohGeH69ZTCWhb+e7saq/9UrYxXLYlFQSQUf1L3lZpT+i192J3\nZl/gb6p8yJWB9vsR3ynmw/ezjnfGuQE43R/4LS4dZ5fuScBloNxIEY0XH4bDWLP6\nbZT99Tm8au8uiONxjGm+jYmPq2doNC4wrmsmZsbgmUgAiNL4IpSY0aFvhb6gIc0I\ncg9JgtUKW1UCpMkK1wbQZPsu510sJkFsRPgvHEd/IGGj+32wvfhy8/yUEPdH2jk=\n=e6vN\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 955ea59e676ea064fac60b07aba1e383c923fe0b\nparent 7be556fc193c95b0b860ddb7ddd6e476522ff40a\nauthor Joffrey JAFFEUX <j.jaffeux@gmail.com> 1611747560 +0100\ncommitter GitHub <noreply@github.com> 1611747560 +0100\n\nDEV: prettier 2.2.1 (#11862)\n\n"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/c6a104295045ff95fbba12822e429cfe4fea2e84",
  "html_url": "https://github.com/discourse/discourse/commit/c6a104295045ff95fbba12822e429cfe4fea2e84",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/c6a104295045ff95fbba12822e429cfe4fea2e84/comments",
  "author": {
    "login": "jjaffeux",
    "id": 339945,
    "node_id": "MDQ6VXNlcjMzOTk0NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/339945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jjaffeux",
    "html_url": "https://github.com/jjaffeux",
    "followers_url": "https://api.github.com/users/jjaffeux/followers",
    "following_url": "https://api.github.com/users/jjaffeux/following{/other_user}",
    "gists_url": "https://api.github.com/users/jjaffeux/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jjaffeux/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jjaffeux/subscriptions",
    "organizations_url": "https://api.github.com/users/jjaffeux/orgs",
    "repos_url": "https://api.github.com/users/jjaffeux/repos",
    "events_url": "https://api.github.com/users/jjaffeux/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jjaffeux/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7be556fc193c95b0b860ddb7ddd6e476522ff40a",
      "url": "https://api.github.com/repos/discourse/discourse/commits/7be556fc193c95b0b860ddb7ddd6e476522ff40a",
      "html_url": "https://github.com/discourse/discourse/commit/7be556fc193c95b0b860ddb7ddd6e476522ff40a"
    }
  ],
  "stats": {
    "total": 5308,
    "additions": 2685,
    "deletions": 2623
  },
  "files": [
    {
      "sha": "afeff2c8691063d7c0205c94c8e6d54f8012d2e1",
      "filename": ".eslintignore",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/.eslintignore",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/.eslintignore",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/.eslintignore?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -1,3 +1,4 @@\n+app/assets/javascripts/discourse-loader.js\n app/assets/javascripts/env.js\n app/assets/javascripts/main_include_admin.js\n app/assets/javascripts/vendor.js"
    },
    {
      "sha": "b8874cd71cb75c7a7ff33564cb780218fe406a70",
      "filename": ".prettierignore",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/.prettierignore",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/.prettierignore",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/.prettierignore?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -6,6 +6,7 @@ config/locales/**/*.yml\n !config/locales/**/*.en*.yml\n script/import_scripts/**/*.yml\n \n+app/assets/javascripts/discourse-loader.js\n app/assets/javascripts/env.js\n app/assets/javascripts/main_include_admin.js\n app/assets/javascripts/vendor.js"
    },
    {
      "sha": "b6bf870bc192fdba6c451f52b4090f31aaee9ef3",
      "filename": "app/assets/javascripts/admin/addon/components/admin-graph.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/components/admin-graph.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/components/admin-graph.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/components/admin-graph.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -10,7 +10,7 @@ export default Component.extend({\n     const model = this.model;\n     const rawData = this.get(\"model.data\");\n \n-    var data = {\n+    let data = {\n       labels: rawData.map((r) => r.x),\n       datasets: [\n         {"
    },
    {
      "sha": "cd63e3b0ad31128a18b5dcd6f4d347bd241386ab",
      "filename": "app/assets/javascripts/admin/addon/components/secret-value-list.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/components/secret-value-list.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/components/secret-value-list.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/components/secret-value-list.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -94,9 +94,9 @@ export default Component.extend({\n   _splitValues(values, delimiter) {\n     if (values && values.length) {\n       const keys = [\"key\", \"secret\"];\n-      var res = [];\n+      let res = [];\n       values.split(delimiter).forEach(function (str) {\n-        var object = {};\n+        let object = {};\n         str.split(\"|\").forEach(function (a, i) {\n           object[keys[i]] = a;\n         });"
    },
    {
      "sha": "19f1d6ab6d35fe5db1db0581461bcd2f0d4e739d",
      "filename": "app/assets/javascripts/admin/addon/controllers/admin-badges-show.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/controllers/admin-badges-show.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/controllers/admin-badges-show.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/controllers/admin-badges-show.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -110,7 +110,7 @@ export default Controller.extend(bufferedProperty(\"model\"), {\n         const data = {};\n         const buffered = this.buffered;\n         fields.forEach(function (field) {\n-          var d = buffered.get(field);\n+          let d = buffered.get(field);\n           if (boolFields.includes(field)) {\n             d = !!d;\n           }"
    },
    {
      "sha": "bafcc02937e4c68e8262c3a27e2aef228bb25af3",
      "filename": "app/assets/javascripts/admin/addon/controllers/admin-user-fields.js",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/controllers/admin-user-fields.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/controllers/admin-user-fields.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/controllers/admin-user-fields.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -53,17 +53,18 @@ export default Controller.extend({\n \n       // Only confirm if we already been saved\n       if (f.get(\"id\")) {\n-        bootbox.confirm(I18n.t(\"admin.user_fields.delete_confirm\"), function (\n-          result\n-        ) {\n-          if (result) {\n-            f.destroyRecord()\n-              .then(function () {\n-                model.removeObject(f);\n-              })\n-              .catch(popupAjaxError);\n+        bootbox.confirm(\n+          I18n.t(\"admin.user_fields.delete_confirm\"),\n+          function (result) {\n+            if (result) {\n+              f.destroyRecord()\n+                .then(function () {\n+                  model.removeObject(f);\n+                })\n+                .catch(popupAjaxError);\n+            }\n           }\n-        });\n+        );\n       } else {\n         model.removeObject(f);\n       }"
    },
    {
      "sha": "158b02b54680abeb7ad63b9c1dd6b4ecc3c38128",
      "filename": "app/assets/javascripts/admin/addon/helpers/value-at-tl.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/helpers/value-at-tl.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/helpers/value-at-tl.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/helpers/value-at-tl.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -1,9 +1,9 @@\n import { registerUnbound } from \"discourse-common/lib/helpers\";\n \n registerUnbound(\"value-at-tl\", function (data, params) {\n-  var tl = parseInt(params.level, 10);\n+  let tl = parseInt(params.level, 10);\n   if (data) {\n-    var item = data.find(function (d) {\n+    let item = data.find(function (d) {\n       return parseInt(d.x, 10) === tl;\n     });\n     if (item) {"
    },
    {
      "sha": "0c1621926ffe08d42cf0b06a21bfa5a35b7dd3ba",
      "filename": "app/assets/javascripts/admin/addon/routes/admin-user-badges.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/routes/admin-user-badges.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/admin/addon/routes/admin-user-badges.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/routes/admin-user-badges.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -14,7 +14,7 @@ export default DiscourseRoute.extend({\n     Badge.findAll().then(function (badges) {\n       controller.set(\"badges\", badges);\n       if (badges.length > 0) {\n-        var grantableBadges = controller.get(\"grantableBadges\");\n+        let grantableBadges = controller.get(\"grantableBadges\");\n         if (grantableBadges.length > 0) {\n           controller.set(\"selectedBadgeId\", grantableBadges[0].get(\"id\"));\n         }"
    },
    {
      "sha": "405b2e4a1d4e21b26332052195ccdb4a84972ef9",
      "filename": "app/assets/javascripts/browser-update.js",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/browser-update.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/browser-update.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/browser-update.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -2,10 +2,10 @@\n //Copyright (c) 2007-2009, MIT Style License <browser-update.org/LICENSE.txt>\n \n (function () {\n-  var $buo = function () {\n+  let $buo = function () {\n     // Sometimes we have to resort to parsing the user agent string. :(\n     if (navigator && navigator.userAgent) {\n-      var ua = navigator.userAgent;\n+      let ua = navigator.userAgent;\n \n       // we don't ask Googlebot to update their browser\n       if (\n@@ -22,10 +22,10 @@\n     }\n \n     document.getElementsByTagName(\"body\")[0].className += \" crawler\";\n-    var mainElement = document.getElementById(\"main\");\n-    var noscriptElements = document.getElementsByTagName(\"noscript\");\n+    let mainElement = document.getElementById(\"main\");\n+    let noscriptElements = document.getElementsByTagName(\"noscript\");\n     // find the element with the \"data-path\" attribute set\n-    for (var i = 0; i < noscriptElements.length; ++i) {\n+    for (let i = 0; i < noscriptElements.length; ++i) {\n       if (noscriptElements[i].getAttribute(\"data-path\")) {\n         // noscriptElements[i].innerHTML contains encoded HTML\n         if (noscriptElements[i].childNodes.length > 0) {\n@@ -36,21 +36,21 @@\n     }\n \n     // retrieve localized browser upgrade text\n-    var t = I18n.t(\"browser_update\"); // eslint-disable-line no-undef\n+    let t = I18n.t(\"browser_update\"); // eslint-disable-line no-undef\n     if (t.indexOf(\".browser_update]\") !== -1) {\n       // very old browsers might fail to load even translations\n       t =\n         'Unfortunately, <a href=\"https://www.discourse.org/faq/#browser\">your browser is too old to work on this site</a>. Please <a href=\"https://browsehappy.com\">upgrade your browser</a> to view rich content, log in and reply.';\n     }\n \n     // create the notification div HTML\n-    var div = document.createElement(\"div\");\n+    let div = document.createElement(\"div\");\n     div.className = \"buorg\";\n     div.innerHTML = \"<div>\" + t + \"</div>\";\n \n     // create the notification div stylesheet\n-    var sheet = document.createElement(\"style\");\n-    var style =\n+    let sheet = document.createElement(\"style\");\n+    let style =\n       \".buorg {position:absolute; z-index:111111; width:100%; top:0px; left:0px; background:#FDF2AB; text-align:left; font-family: sans-serif; color:#000; font-size: 14px;} .buorg div {padding: 8px;} .buorg a, .buorg a:visited {color:#E25600; text-decoration: underline;} @media print { .buorg { display: none !important; } }\";\n \n     // insert the div and stylesheet into the DOM"
    },
    {
      "sha": "d60b94eaf71ee51bf437664df71dde11fd426560",
      "filename": "app/assets/javascripts/discourse-common/addon/lib/attribute-hook.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/lib/attribute-hook.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/lib/attribute-hook.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse-common/addon/lib/attribute-hook.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -32,8 +32,8 @@ AttributeHook.prototype.unhook = function (node, prop, next) {\n     return;\n   }\n \n-  var colonPosition = prop.indexOf(\":\");\n-  var localName = colonPosition > -1 ? prop.substr(colonPosition + 1) : prop;\n+  let colonPosition = prop.indexOf(\":\");\n+  let localName = colonPosition > -1 ? prop.substr(colonPosition + 1) : prop;\n   node.removeAttributeNS(this.namespace, localName);\n };\n "
    },
    {
      "sha": "a2014653c8ed6c579805295bc3afdbd8a4d3d368",
      "filename": "app/assets/javascripts/discourse-common/addon/lib/helpers.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/lib/helpers.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/lib/helpers.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse-common/addon/lib/helpers.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -22,7 +22,7 @@ const _helpers = {};\n \n function rawGet(ctx, property, options) {\n   if (options.types && options.data.view) {\n-    var view = options.data.view;\n+    let view = options.data.view;\n     return view.getStream\n       ? view.getStream(property).value()\n       : view.getAttr(property);"
    },
    {
      "sha": "294235b1ce2e6bbbbf2cbf17344cf92207219391",
      "filename": "app/assets/javascripts/discourse-common/addon/lib/object.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/lib/object.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/lib/object.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse-common/addon/lib/object.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -47,7 +47,7 @@ export function deepEqual(obj1, obj2) {\n     if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n       return false;\n     }\n-    for (var prop in obj1) {\n+    for (let prop in obj1) {\n       if (!deepEqual(obj1[prop], obj2[prop])) {\n         return false;\n       }"
    },
    {
      "sha": "634d77c39e028af2d33f78adce7b2cabdddf3cc8",
      "filename": "app/assets/javascripts/discourse-common/addon/lib/raw-handlebars-helpers.js",
      "status": "modified",
      "additions": 15,
      "deletions": 17,
      "changes": 32,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/lib/raw-handlebars-helpers.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/lib/raw-handlebars-helpers.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse-common/addon/lib/raw-handlebars-helpers.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -29,24 +29,22 @@ export function registerRawHelpers(hbs, handlebarsClass) {\n   };\n \n   // #each .. in support (as format is transformed to this)\n-  hbs.registerHelper(\"each\", function (\n-    localName,\n-    inKeyword,\n-    contextName,\n-    options\n-  ) {\n-    if (typeof contextName === \"undefined\") {\n-      return;\n-    }\n-    var list = get(this, contextName);\n-    var output = [];\n-    for (var i = 0; i < list.length; i++) {\n-      let innerContext = {};\n-      innerContext[localName] = list[i];\n-      output.push(options.fn(innerContext));\n+  hbs.registerHelper(\n+    \"each\",\n+    function (localName, inKeyword, contextName, options) {\n+      if (typeof contextName === \"undefined\") {\n+        return;\n+      }\n+      let list = get(this, contextName);\n+      let output = [];\n+      for (let i = 0; i < list.length; i++) {\n+        let innerContext = {};\n+        innerContext[localName] = list[i];\n+        output.push(options.fn(innerContext));\n+      }\n+      return output.join(\"\");\n     }\n-    return output.join(\"\");\n-  });\n+  );\n \n   function stringCompatHelper(fn) {\n     const old = hbs.helpers[fn];"
    },
    {
      "sha": "f49e427317672b71ea85b49c2214eb8401b830ee",
      "filename": "app/assets/javascripts/discourse-common/addon/lib/raw-handlebars.js",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/lib/raw-handlebars.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/lib/raw-handlebars.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse-common/addon/lib/raw-handlebars.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -6,7 +6,7 @@ import Handlebars from \"handlebars\";\n const RawHandlebars = Handlebars.create();\n \n function buildPath(blk, args) {\n-  var result = {\n+  let result = {\n     type: \"PathExpression\",\n     data: false,\n     depth: blk.path.depth,\n@@ -22,7 +22,7 @@ function buildPath(blk, args) {\n }\n \n function replaceGet(ast) {\n-  var visitor = new Handlebars.Visitor();\n+  let visitor = new Handlebars.Visitor();\n   visitor.mutating = true;\n \n   visitor.MustacheStatement = function (mustache) {\n@@ -42,7 +42,7 @@ function replaceGet(ast) {\n   // This allows us to use the same syntax in all templates\n   visitor.BlockStatement = function (block) {\n     if (block.path.original === \"each\" && block.params.length === 1) {\n-      var paramName = block.program.blockParams[0];\n+      let paramName = block.program.blockParams[0];\n       block.params = [\n         buildPath(block, { original: paramName }),\n         { type: \"CommentStatement\", value: \"in\" },\n@@ -74,10 +74,10 @@ if (Handlebars.Compiler) {\n   RawHandlebars.JavaScriptCompiler.prototype.namespace = \"RawHandlebars\";\n \n   RawHandlebars.precompile = function (value, asObject) {\n-    var ast = Handlebars.parse(value);\n+    let ast = Handlebars.parse(value);\n     replaceGet(ast);\n \n-    var options = {\n+    let options = {\n       knownHelpers: {\n         get: true,\n       },\n@@ -87,7 +87,7 @@ if (Handlebars.Compiler) {\n \n     asObject = asObject === undefined ? true : asObject;\n \n-    var environment = new RawHandlebars.Compiler().compile(ast, options);\n+    let environment = new RawHandlebars.Compiler().compile(ast, options);\n     return new RawHandlebars.JavaScriptCompiler().compile(\n       environment,\n       options,\n@@ -97,20 +97,20 @@ if (Handlebars.Compiler) {\n   };\n \n   RawHandlebars.compile = function (string) {\n-    var ast = Handlebars.parse(string);\n+    let ast = Handlebars.parse(string);\n     replaceGet(ast);\n \n     // this forces us to rewrite helpers\n-    var options = { data: true, stringParams: true };\n-    var environment = new RawHandlebars.Compiler().compile(ast, options);\n-    var templateSpec = new RawHandlebars.JavaScriptCompiler().compile(\n+    let options = { data: true, stringParams: true };\n+    let environment = new RawHandlebars.Compiler().compile(ast, options);\n+    let templateSpec = new RawHandlebars.JavaScriptCompiler().compile(\n       environment,\n       options,\n       undefined,\n       true\n     );\n \n-    var t = RawHandlebars.template(templateSpec);\n+    let t = RawHandlebars.template(templateSpec);\n     t.isMethod = false;\n \n     return t;"
    },
    {
      "sha": "51222877ffd7c525a62b8444b44aa0853d12cd62",
      "filename": "app/assets/javascripts/discourse-common/addon/resolver.js",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/resolver.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/resolver.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse-common/addon/resolver.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -111,7 +111,7 @@ export function buildResolver(baseName) {\n           );\n         });\n \n-      var module;\n+      let module;\n       if (moduleName) {\n         module = requirejs(moduleName, null, null, true /* force sync */);\n         if (module && module[\"default\"]) {\n@@ -200,7 +200,7 @@ export function buildResolver(baseName) {\n \n     findPluginMobileTemplate(parsedName) {\n       if (_options.mobileView) {\n-        var pluginParsedName = this.parseName(\n+        let pluginParsedName = this.parseName(\n           parsedName.fullName.replace(\n             \"template:\",\n             \"template:javascripts/mobile/\"\n@@ -212,7 +212,7 @@ export function buildResolver(baseName) {\n \n     findMobileTemplate(parsedName) {\n       if (_options.mobileView) {\n-        var mobileParsedName = this.parseName(\n+        let mobileParsedName = this.parseName(\n           parsedName.fullName.replace(\"template:\", \"template:mobile/\")\n         );\n         return this.findTemplate(mobileParsedName);\n@@ -241,15 +241,15 @@ export function buildResolver(baseName) {\n     },\n \n     findUnderscoredTemplate(parsedName) {\n-      var decamelized = parsedName.fullNameWithoutType.decamelize();\n-      var underscored = decamelized.replace(/\\-/g, \"_\");\n+      let decamelized = parsedName.fullNameWithoutType.decamelize();\n+      let underscored = decamelized.replace(/\\-/g, \"_\");\n       return Ember.TEMPLATES[underscored];\n     },\n \n     // Try to find a template within a special admin namespace, e.g. adminEmail => admin/templates/email\n     // (similar to how discourse lays out templates)\n     findAdminTemplate(parsedName) {\n-      var decamelized = parsedName.fullNameWithoutType.decamelize();\n+      let decamelized = parsedName.fullNameWithoutType.decamelize();\n       if (decamelized.indexOf(\"components\") === 0) {\n         let comPath = `admin/templates/${decamelized}`;\n         const compTemplate ="
    },
    {
      "sha": "dd4299c700bf83a1c1f850dff916af51bfc68dd0",
      "filename": "app/assets/javascripts/discourse-common/addon/utils/decorator-alias.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/utils/decorator-alias.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/utils/decorator-alias.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse-common/addon/utils/decorator-alias.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -12,7 +12,7 @@ export default function decoratorAlias(fn, errorMessage) {\n           configurable: desc.configurable,\n           writable: desc.writable,\n           initializer: function () {\n-            var value = extractValue(desc);\n+            let value = extractValue(desc);\n             return fn.apply(null, params.concat(value));\n           },\n         };"
    },
    {
      "sha": "4fad373bf8b0650931723181acefc874472cf968",
      "filename": "app/assets/javascripts/discourse-common/addon/utils/decorators.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/utils/decorators.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/utils/decorators.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse-common/addon/utils/decorators.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -51,7 +51,7 @@ export function readOnly(target, name, desc) {\n     enumerable: desc.enumerable,\n     configurable: desc.configurable,\n     initializer: function () {\n-      var value = extractValue(desc);\n+      let value = extractValue(desc);\n       return value.readOnly();\n     },\n   };"
    },
    {
      "sha": "3987adffa6c049bf1851c7ad9c457eb86ebdb0b6",
      "filename": "app/assets/javascripts/discourse-common/addon/utils/handle-descriptor.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/utils/handle-descriptor.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-common/addon/utils/handle-descriptor.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse-common/addon/utils/handle-descriptor.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -10,7 +10,7 @@ export default function handleDescriptor(target, key, desc, params = []) {\n       let computedDescriptor;\n \n       if (desc.writable) {\n-        var val = extractValue(desc);\n+        let val = extractValue(desc);\n         if (typeof val === \"object\") {\n           let value = {};\n           if (val.get) {"
    },
    {
      "sha": "659f92411493d6bcfe0640cf544e233e82d94f17",
      "filename": "app/assets/javascripts/discourse-hbr/raw-handlebars-compiler.js",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-hbr/raw-handlebars-compiler.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse-hbr/raw-handlebars-compiler.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse-hbr/raw-handlebars-compiler.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -6,7 +6,7 @@ const Handlebars = require(\"handlebars\");\n const RawHandlebars = Handlebars.create();\n \n function buildPath(blk, args) {\n-  var result = {\n+  let result = {\n     type: \"PathExpression\",\n     data: false,\n     depth: blk.path.depth,\n@@ -22,7 +22,7 @@ function buildPath(blk, args) {\n }\n \n function replaceGet(ast) {\n-  var visitor = new Handlebars.Visitor();\n+  let visitor = new Handlebars.Visitor();\n   visitor.mutating = true;\n \n   visitor.MustacheStatement = function (mustache) {\n@@ -42,7 +42,7 @@ function replaceGet(ast) {\n   // This allows us to use the same syntax in all templates\n   visitor.BlockStatement = function (block) {\n     if (block.path.original === \"each\" && block.params.length === 1) {\n-      var paramName = block.program.blockParams[0];\n+      let paramName = block.program.blockParams[0];\n       block.params = [\n         buildPath(block, { original: paramName }),\n         { type: \"CommentStatement\", value: \"in\" },\n@@ -71,10 +71,10 @@ RawHandlebars.JavaScriptCompiler.prototype.compiler =\n RawHandlebars.JavaScriptCompiler.prototype.namespace = \"RawHandlebars\";\n \n RawHandlebars.precompile = function (value, asObject) {\n-  var ast = Handlebars.parse(value);\n+  let ast = Handlebars.parse(value);\n   replaceGet(ast);\n \n-  var options = {\n+  let options = {\n     knownHelpers: {\n       get: true,\n     },\n@@ -84,7 +84,7 @@ RawHandlebars.precompile = function (value, asObject) {\n \n   asObject = asObject === undefined ? true : asObject;\n \n-  var environment = new RawHandlebars.Compiler().compile(ast, options);\n+  let environment = new RawHandlebars.Compiler().compile(ast, options);\n   return new RawHandlebars.JavaScriptCompiler().compile(\n     environment,\n     options,\n@@ -94,20 +94,20 @@ RawHandlebars.precompile = function (value, asObject) {\n };\n \n RawHandlebars.compile = function (string) {\n-  var ast = Handlebars.parse(string);\n+  let ast = Handlebars.parse(string);\n   replaceGet(ast);\n \n   // this forces us to rewrite helpers\n-  var options = { data: true, stringParams: true };\n-  var environment = new RawHandlebars.Compiler().compile(ast, options);\n-  var templateSpec = new RawHandlebars.JavaScriptCompiler().compile(\n+  let options = { data: true, stringParams: true };\n+  let environment = new RawHandlebars.Compiler().compile(ast, options);\n+  let templateSpec = new RawHandlebars.JavaScriptCompiler().compile(\n     environment,\n     options,\n     undefined,\n     true\n   );\n \n-  var t = RawHandlebars.template(templateSpec);\n+  let t = RawHandlebars.template(templateSpec);\n   t.isMethod = false;\n \n   return t;"
    },
    {
      "sha": "565f2821741b175a9c1a71e6e3b857247135fdbc",
      "filename": "app/assets/javascripts/discourse/app/components/backup-codes.js",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/backup-codes.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/backup-codes.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/backup-codes.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -5,12 +5,12 @@ import discourseComputed from \"discourse-common/utils/decorators\";\n // https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\n function b64EncodeUnicode(str) {\n   return btoa(\n-    encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function toSolidBytes(\n-      match,\n-      p1\n-    ) {\n-      return String.fromCharCode(\"0x\" + p1);\n-    })\n+    encodeURIComponent(str).replace(\n+      /%([0-9A-F]{2})/g,\n+      function toSolidBytes(match, p1) {\n+        return String.fromCharCode(\"0x\" + p1);\n+      }\n+    )\n   );\n }\n "
    },
    {
      "sha": "3343512568a0896a4dea4dcbbef807ab87db53e8",
      "filename": "app/assets/javascripts/discourse/app/components/basic-topic-list.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/basic-topic-list.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/basic-topic-list.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/basic-topic-list.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -10,7 +10,7 @@ export default Component.extend({\n \n   @discourseComputed(\"topicList.loaded\")\n   loaded() {\n-    var topicList = this.topicList;\n+    let topicList = this.topicList;\n     if (topicList) {\n       return topicList.get(\"loaded\");\n     } else {"
    },
    {
      "sha": "b666a5ad339f1df300abdb71723777f3cf1bc065",
      "filename": "app/assets/javascripts/discourse/app/components/composer-editor.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/composer-editor.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/composer-editor.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/composer-editor.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -536,10 +536,10 @@ export default Component.extend({\n \n   _warnMentionedGroups($preview) {\n     schedule(\"afterRender\", () => {\n-      var found = this.warnedGroupMentions || [];\n+      let found = this.warnedGroupMentions || [];\n       $preview.find(\".mention-group.notify\").each((idx, e) => {\n         const $e = $(e);\n-        var name = $e.data(\"name\");\n+        let name = $e.data(\"name\");\n         if (found.indexOf(name) === -1) {\n           this.groupsMentioned([\n             {"
    },
    {
      "sha": "de6531d172e17eadef8ec8cdde5d3b588b9a3238",
      "filename": "app/assets/javascripts/discourse/app/components/d-editor.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/d-editor.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/d-editor.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/d-editor.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -184,7 +184,7 @@ class Toolbar {\n     if (button.shortcut) {\n       const mac = /Mac|iPod|iPhone|iPad/.test(navigator.platform);\n       const mod = mac ? \"Meta\" : \"Ctrl\";\n-      var shortcutTitle = `${mod}+${button.shortcut}`;\n+      let shortcutTitle = `${mod}+${button.shortcut}`;\n \n       // Mac users are used to glyphs for shortcut keys\n       if (mac) {"
    },
    {
      "sha": "9d02aeff01456e3a002c13ceaf5760b817cdeba3",
      "filename": "app/assets/javascripts/discourse/app/components/popup-input-tip.js",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/popup-input-tip.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/popup-input-tip.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/popup-input-tip.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -28,7 +28,7 @@ export default Component.extend({\n   @observes(\"lastShownAt\")\n   bounce() {\n     if (this.lastShownAt) {\n-      var $elem = $(this.element);\n+      let $elem = $(this.element);\n       if (!this.animateAttribute) {\n         this.animateAttribute = $elem.css(\"left\") === \"auto\" ? \"right\" : \"left\";\n       }\n@@ -51,15 +51,15 @@ export default Component.extend({\n   },\n \n   bounceLeft($elem) {\n-    for (var i = 0; i < 5; i++) {\n+    for (let i = 0; i < 5; i++) {\n       $elem\n         .animate({ left: \"+=\" + this.bouncePixels }, this.bounceDelay)\n         .animate({ left: \"-=\" + this.bouncePixels }, this.bounceDelay);\n     }\n   },\n \n   bounceRight($elem) {\n-    for (var i = 0; i < 5; i++) {\n+    for (let i = 0; i < 5; i++) {\n       $elem\n         .animate({ right: \"-=\" + this.bouncePixels }, this.bounceDelay)\n         .animate({ right: \"+=\" + this.bouncePixels }, this.bounceDelay);"
    },
    {
      "sha": "8383cb035e0ddeca2940811f8981b9483d191b22",
      "filename": "app/assets/javascripts/discourse/app/components/topic-list.js",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/topic-list.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/topic-list.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/topic-list.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -163,9 +163,9 @@ export default Component.extend(LoadMore, {\n   },\n \n   click(e) {\n-    var self = this;\n-    var onClick = function (sel, callback) {\n-      var target = $(e.target).closest(sel);\n+    let self = this;\n+    let onClick = function (sel, callback) {\n+      let target = $(e.target).closest(sel);\n \n       if (target.length === 1) {\n         callback.apply(self, [target]);"
    },
    {
      "sha": "6a2c8ceddb16a1b84e41cb4ade858f64987cc75f",
      "filename": "app/assets/javascripts/discourse/app/components/user-badge.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/user-badge.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/components/user-badge.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/user-badge.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -12,7 +12,7 @@ export default Component.extend({\n   @discourseComputed(\"badge\", \"user\")\n   badgeUrl() {\n     // NOTE: I tried using a link-to helper here but the queryParams mean it fails\n-    var username = this.get(\"user.username_lower\") || \"\";\n+    let username = this.get(\"user.username_lower\") || \"\";\n     username = username !== \"\" ? \"?username=\" + username : \"\";\n     return this.get(\"badge.url\") + username;\n   },"
    },
    {
      "sha": "6f8d6e245ed4025ff0394be77bb9baf7ab24daef",
      "filename": "app/assets/javascripts/discourse/app/controllers/composer.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/composer.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/composer.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/composer.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -727,7 +727,7 @@ export default Controller.extend({\n       }\n     }\n \n-    var staged = false;\n+    let staged = false;\n \n     // TODO: This should not happen in model\n     const imageSizes = {};"
    },
    {
      "sha": "a7ba222f8c200158af6578f6db939137cc1f37c9",
      "filename": "app/assets/javascripts/discourse/app/controllers/full-page-search.js",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/full-page-search.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/full-page-search.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/full-page-search.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -77,9 +77,9 @@ export default Controller.extend({\n \n   @discourseComputed(\"context\", \"context_id\")\n   searchContextDescription(context, id) {\n-    var name = id;\n+    let name = id;\n     if (context === \"category\") {\n-      var category = Category.findById(id);\n+      let category = Category.findById(id);\n       if (!category) {\n         return;\n       }\n@@ -322,7 +322,7 @@ export default Controller.extend({\n     },\n \n     loadMore() {\n-      var page = this.page;\n+      let page = this.page;\n       if (\n         this.get(\"model.grouped_search_result.more_full_page_results\") &&\n         !this.loading &&"
    },
    {
      "sha": "b6fd92cc7e86dc782a5c92e268139c0ce2bbfd87",
      "filename": "app/assets/javascripts/discourse/app/controllers/history.js",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/history.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/history.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/history.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -17,7 +17,7 @@ import { sanitizeAsync } from \"discourse/lib/text\";\n \n function customTagArray(fieldName) {\n   return computed(fieldName, function () {\n-    var val = this.get(fieldName);\n+    let val = this.get(fieldName);\n     if (!val) {\n       return val;\n     }\n@@ -194,7 +194,7 @@ export default Controller.extend(ModalFunctionality, {\n     if (displayingInline) {\n       return this.isEitherRevisionHidden ? \"hidden-revision-either\" : null;\n     } else {\n-      var result = [];\n+      let result = [];\n       if (prevHidden) {\n         result.push(\"hidden-revision-previous\");\n       }\n@@ -227,15 +227,15 @@ export default Controller.extend(ModalFunctionality, {\n   @discourseComputed(\"model.category_id_changes\")\n   previousCategory(changes) {\n     if (changes) {\n-      var category = Category.findById(changes[\"previous\"]);\n+      let category = Category.findById(changes[\"previous\"]);\n       return categoryBadgeHTML(category, { allowUncategorized: true });\n     }\n   },\n \n   @discourseComputed(\"model.category_id_changes\")\n   currentCategory(changes) {\n     if (changes) {\n-      var category = Category.findById(changes[\"current\"]);\n+      let category = Category.findById(changes[\"current\"]);\n       return categoryBadgeHTML(category, { allowUncategorized: true });\n     }\n   },"
    },
    {
      "sha": "2709ebe99ebb8cdbe915585f142dc01871998a78",
      "filename": "app/assets/javascripts/discourse/app/controllers/preferences/emails.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/preferences/emails.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/preferences/emails.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/preferences/emails.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -62,7 +62,7 @@ export default Controller.extend({\n \n   @discourseComputed()\n   frequencyEstimate() {\n-    var estimate = this.get(\"model.mailing_list_posts_per_day\");\n+    let estimate = this.get(\"model.mailing_list_posts_per_day\");\n     if (!estimate || estimate < 2) {\n       return I18n.t(\"user.mailing_list_mode.few_per_day\");\n     } else {"
    },
    {
      "sha": "60acd67e74ff7d406320b0e6d00ae91001ccae68",
      "filename": "app/assets/javascripts/discourse/app/controllers/tags-index.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/tags-index.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/tags-index.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/tags-index.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -72,7 +72,7 @@ export default Controller.extend({\n           }\n \n           const joinedTags = tags.slice(0, displayN).join(\", \");\n-          var more = Math.max(0, tags.length - displayN);\n+          let more = Math.max(0, tags.length - displayN);\n \n           const tagsString =\n             more === 0"
    },
    {
      "sha": "f2023c232bb389b156ad765b581cbbed64bbd418",
      "filename": "app/assets/javascripts/discourse/app/controllers/user-activity.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/user-activity.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/user-activity.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/user-activity.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -16,7 +16,7 @@ export default Controller.extend({\n \n   @observes(\"userActionType\", \"model.stream.itemsLoaded\")\n   _showFooter: function () {\n-    var showFooter;\n+    let showFooter;\n     if (this.userActionType) {\n       const stat = (this.get(\"model.stats\") || []).find(\n         (s) => s.action_type === this.userActionType"
    },
    {
      "sha": "e14955789e107b2d6463647f92748a52751af1d0",
      "filename": "app/assets/javascripts/discourse/app/controllers/user-private-messages.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/user-private-messages.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/controllers/user-private-messages.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/user-private-messages.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -40,7 +40,7 @@ export default Controller.extend({\n \n   bulkOperation(operation) {\n     const selected = this.selected;\n-    var params = { type: operation };\n+    let params = { type: operation };\n     if (this.isGroup) {\n       params.group = this.groupFilter;\n     }"
    },
    {
      "sha": "289b0407d909b6f12fd9eea8c2bc88b046cc2f80",
      "filename": "app/assets/javascripts/discourse/app/helpers/category-link.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/helpers/category-link.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/helpers/category-link.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/helpers/category-link.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -16,7 +16,7 @@ export function replaceCategoryLinkRenderer(fn) {\n }\n \n function categoryStripe(color, classes) {\n-  var style = color ? \"style='background-color: #\" + color + \";'\" : \"\";\n+  let style = color ? \"style='background-color: #\" + color + \";'\" : \"\";\n   return \"<span class='\" + classes + \"' \" + style + \"></span>\";\n }\n \n@@ -65,7 +65,7 @@ export function categoryBadgeHTML(category, opts) {\n }\n \n export function categoryLinkHTML(category, options) {\n-  var categoryOptions = {};\n+  let categoryOptions = {};\n \n   // TODO: This is a compatibility layer with the old helper structure.\n   // Can be removed once we migrate to `registerUnbound` fully"
    },
    {
      "sha": "1798b23e02f01f856084196cbab4e3442a3cd954",
      "filename": "app/assets/javascripts/discourse/app/helpers/format-date.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/helpers/format-date.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/helpers/format-date.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/helpers/format-date.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -7,7 +7,7 @@ import { registerUnbound } from \"discourse-common/lib/helpers\";\n   update the dates on a regular interval.\n **/\n registerUnbound(\"format-date\", function (val, params) {\n-  var leaveAgo,\n+  let leaveAgo,\n     format = \"medium\",\n     title = true;\n \n@@ -22,7 +22,7 @@ registerUnbound(\"format-date\", function (val, params) {\n   }\n \n   if (val) {\n-    var date = new Date(val);\n+    let date = new Date(val);\n     return htmlSafe(\n       autoUpdatingRelativeAge(date, {\n         format: format,"
    },
    {
      "sha": "5188c619905ba0ea362911247bce33eb128f3888",
      "filename": "app/assets/javascripts/discourse/app/helpers/loading-spinner.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/helpers/loading-spinner.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/helpers/loading-spinner.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/helpers/loading-spinner.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -1,13 +1,13 @@\n import { htmlHelper } from \"discourse-common/lib/helpers\";\n \n function renderSpinner(cssClass) {\n-  var html = \"<div class='spinner\";\n+  let html = \"<div class='spinner\";\n   if (cssClass) {\n     html += \" \" + cssClass;\n   }\n   return html + \"'></div>\";\n }\n-var spinnerHTML = renderSpinner();\n+let spinnerHTML = renderSpinner();\n \n export default htmlHelper((params) => {\n   const hash = params.hash;"
    },
    {
      "sha": "4a35906190d31e31625512787c44969d14b87a95",
      "filename": "app/assets/javascripts/discourse/app/helpers/shorten-url.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/helpers/shorten-url.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/helpers/shorten-url.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/helpers/shorten-url.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -1,7 +1,7 @@\n import { registerUnbound } from \"discourse-common/lib/helpers\";\n \n registerUnbound(\"shorten-url\", function (url) {\n-  var matches = url.match(/\\//g);\n+  let matches = url.match(/\\//g);\n \n   if (matches && matches.length === 3) {\n     url = url.replace(/\\/$/, \"\");"
    },
    {
      "sha": "70edaaf8436e8dda2a1957a4586d3c30087d5cc9",
      "filename": "app/assets/javascripts/discourse/app/lib/after-transition.js",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/after-transition.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/after-transition.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/lib/after-transition.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -4,16 +4,16 @@\n \n   SO: http://stackoverflow.com/questions/9943435/css3-animation-end-techniques\n **/\n-var dummy = document.createElement(\"div\"),\n+let dummy = document.createElement(\"div\"),\n   eventNameHash = {\n     webkit: \"webkitTransitionEnd\",\n     Moz: \"transitionend\",\n     O: \"oTransitionEnd\",\n     ms: \"MSTransitionEnd\",\n   };\n \n-var transitionEnd = (function () {\n-  var retValue;\n+let transitionEnd = (function () {\n+  let retValue;\n   retValue = \"transitionend\";\n   Object.keys(eventNameHash).some(function (vendor) {\n     if (vendor + \"TransitionProperty\" in dummy.style) {"
    },
    {
      "sha": "18cf98b89930cfeef7f1f49b14a17a1fee5f5fa6",
      "filename": "app/assets/javascripts/discourse/app/lib/category-hashtags.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/category-hashtags.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/category-hashtags.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/lib/category-hashtags.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -15,8 +15,8 @@ export function replaceSpan($elem, categorySlug, categoryLink, type) {\n export function categoryHashtagTriggerRule(textarea, opts) {\n   const result = caretRowCol(textarea);\n   const row = result.rowNum;\n-  var col = result.colNum;\n-  var line = textarea.value.split(\"\\n\")[row - 1];\n+  let col = result.colNum;\n+  let line = textarea.value.split(\"\\n\")[row - 1];\n \n   if (opts && opts.backSpace) {\n     col = col - 1;"
    },
    {
      "sha": "ef84ac811f1329a3bf539657fc9292a47c251a6c",
      "filename": "app/assets/javascripts/discourse/app/lib/category-tag-search.js",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/category-tag-search.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/category-tag-search.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/lib/category-tag-search.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -37,7 +37,7 @@ function searchTags(term, categories, limit) {\n             data: { limit: limit, q },\n           });\n \n-          var returnVal = CANCELLED_STATUS;\n+          let returnVal = CANCELLED_STATUS;\n \n           oldSearch\n             .then((r) => {\n@@ -91,8 +91,8 @@ export function search(term, siteSettings) {\n   }\n \n   const limit = 5;\n-  var categories = Category.search(term, { limit });\n-  var numOfCategories = categories.length;\n+  let categories = Category.search(term, { limit });\n+  let numOfCategories = categories.length;\n \n   categories = categories.map((category) => {\n     return { model: category, text: Category.slugFor(category, SEPARATOR, 2) };"
    },
    {
      "sha": "a35cfcee6df3b234606c695ea1601a16c6722de8",
      "filename": "app/assets/javascripts/discourse/app/lib/mobile.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/mobile.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/mobile.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/lib/mobile.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -27,7 +27,7 @@ const Mobile = {\n         localStorage.removeItem(\"mobileView\");\n       }\n       if (localStorage.mobileView) {\n-        var savedValue = localStorage.mobileView === \"true\";\n+        let savedValue = localStorage.mobileView === \"true\";\n         if (savedValue !== this.mobileView) {\n           this.reloadPage(savedValue);\n         }"
    },
    {
      "sha": "0771a2f3c000cb30cdc071b20fcfc29a0ec6ce81",
      "filename": "app/assets/javascripts/discourse/app/lib/page-visible.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/page-visible.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/page-visible.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/lib/page-visible.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -1,5 +1,5 @@\n // for android we test webkit\n-var hiddenProperty =\n+let hiddenProperty =\n   document.hidden !== undefined\n     ? \"hidden\"\n     : document.webkitHidden !== undefined"
    },
    {
      "sha": "636c8207a7a8003695040bf903e63322c92de1b3",
      "filename": "app/assets/javascripts/discourse/app/lib/plugin-api.js",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/plugin-api.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/plugin-api.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/lib/plugin-api.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -1227,11 +1227,11 @@ let _pluginv01;\n \n // from http://stackoverflow.com/questions/6832596/how-to-compare-software-version-number-using-js-only-number\n function cmpVersions(a, b) {\n-  var i, diff;\n-  var regExStrip0 = /(\\.0+)+$/;\n-  var segmentsA = a.replace(regExStrip0, \"\").split(\".\");\n-  var segmentsB = b.replace(regExStrip0, \"\").split(\".\");\n-  var l = Math.min(segmentsA.length, segmentsB.length);\n+  let i, diff;\n+  let regExStrip0 = /(\\.0+)+$/;\n+  let segmentsA = a.replace(regExStrip0, \"\").split(\".\");\n+  let segmentsB = b.replace(regExStrip0, \"\").split(\".\");\n+  let l = Math.min(segmentsA.length, segmentsB.length);\n \n   for (i = 0; i < l; i++) {\n     diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);"
    },
    {
      "sha": "1bea1a5f07847da471277642c8b795601a037396",
      "filename": "app/assets/javascripts/discourse/app/lib/safari-hacks.js",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/safari-hacks.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/safari-hacks.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/lib/safari-hacks.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -93,7 +93,7 @@ function positioningWorkaround($fixedElement) {\n   const fixedElement = $fixedElement[0];\n   const oldHeight = fixedElement.style.height;\n \n-  var originalScrollTop = 0;\n+  let originalScrollTop = 0;\n   let lastTouchedElement = null;\n \n   positioningWorkaround.blur = function (evt) {\n@@ -114,7 +114,7 @@ function positioningWorkaround($fixedElement) {\n     }\n   };\n \n-  var blurredNow = function (evt) {\n+  let blurredNow = function (evt) {\n     // we cannot use evt.relatedTarget to get the last focused element in safari iOS\n     // document.activeElement is also unreliable (iOS does not mark buttons as focused)\n     // so instead, we store the last touched element and check against it\n@@ -145,11 +145,11 @@ function positioningWorkaround($fixedElement) {\n     positioningWorkaround.blur(evt);\n   };\n \n-  var blurred = function (evt) {\n+  let blurred = function (evt) {\n     discourseDebounce(this, blurredNow, evt, INPUT_DELAY);\n   };\n \n-  var positioningHack = function (evt) {\n+  let positioningHack = function (evt) {\n     let _this = this;\n \n     if (evt === undefined) {\n@@ -203,7 +203,7 @@ function positioningWorkaround($fixedElement) {\n     }, delay);\n   };\n \n-  var lastTouched = function (evt) {\n+  let lastTouched = function (evt) {\n     if (evt && evt.target) {\n       lastTouchedElement = evt.target;\n     }\n@@ -231,7 +231,7 @@ function positioningWorkaround($fixedElement) {\n   };\n \n   positioningWorkaround.touchstartEvent = function (element) {\n-    var triggerHack = positioningHack.bind(element);\n+    let triggerHack = positioningHack.bind(element);\n     triggerHack();\n   };\n "
    },
    {
      "sha": "980d92a417a153805c56a8f8ae8eed57ae04bc7d",
      "filename": "app/assets/javascripts/discourse/app/lib/user-search.js",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/user-search.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/user-search.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/lib/user-search.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -6,7 +6,7 @@ import { emailValid } from \"discourse/lib/utilities\";\n import { isTesting } from \"discourse-common/config/environment\";\n import { userPath } from \"discourse/lib/url\";\n \n-var cache = {},\n+let cache = {},\n   cacheKey,\n   cacheTime,\n   currentTerm,\n@@ -23,7 +23,7 @@ function performSearch(\n   groupMembersOf,\n   resultsFn\n ) {\n-  var cached = cache[term];\n+  let cached = cache[term];\n   if (cached) {\n     resultsFn(cached);\n     return;\n@@ -52,7 +52,7 @@ function performSearch(\n     },\n   });\n \n-  var returnVal = CANCELLED_STATUS;\n+  let returnVal = CANCELLED_STATUS;\n \n   oldSearch\n     .then(function (r) {\n@@ -81,7 +81,7 @@ function performSearch(\n     });\n }\n \n-var debouncedSearch = function (\n+let debouncedSearch = function (\n   term,\n   topicId,\n   categoryId,\n@@ -113,7 +113,7 @@ function organizeResults(r, options) {\n     return r;\n   }\n \n-  var exclude = options.exclude || [],\n+  let exclude = options.exclude || [],\n     limit = options.limit || 5,\n     users = [],\n     emails = [],\n@@ -182,7 +182,7 @@ export default function userSearch(options) {\n     options.term = options.term.substring(1);\n   }\n \n-  var term = options.term || \"\",\n+  let term = options.term || \"\",\n     includeGroups = options.includeGroups,\n     includeMentionableGroups = options.includeMentionableGroups,\n     includeMessageableGroups = options.includeMessageableGroups,"
    },
    {
      "sha": "f7b7bad13e85f9c163db854c6d9679bddae4b695",
      "filename": "app/assets/javascripts/discourse/app/lib/utilities.js",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/utilities.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/lib/utilities.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/lib/utilities.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -97,7 +97,7 @@ export function tinyAvatar(avatarTemplate, options) {\n }\n \n export function postUrl(slug, topicId, postNumber) {\n-  var url = getURL(\"/t/\");\n+  let url = getURL(\"/t/\");\n   if (slug) {\n     url += slug + \"/\";\n   } else {\n@@ -190,11 +190,11 @@ export function selectedElement() {\n \n // Determine the row and col of the caret in an element\n export function caretRowCol(el) {\n-  var cp = caretPosition(el);\n-  var rows = el.value.slice(0, cp).split(\"\\n\");\n-  var rowNum = rows.length;\n+  let cp = caretPosition(el);\n+  let rows = el.value.slice(0, cp).split(\"\\n\");\n+  let rowNum = rows.length;\n \n-  var colNum =\n+  let colNum =\n     cp -\n     rows.splice(0, rowNum - 1).reduce(function (sum, row) {\n       return sum + row.length + 1;\n@@ -205,7 +205,7 @@ export function caretRowCol(el) {\n \n // Determine the position of the caret in an element\n export function caretPosition(el) {\n-  var r, rc, re;\n+  let r, rc, re;\n   if (el.selectionStart) {\n     return el.selectionStart;\n   }\n@@ -227,7 +227,7 @@ export function caretPosition(el) {\n \n // Set the caret's position\n export function setCaretPosition(ctrl, pos) {\n-  var range;\n+  let range;\n   if (ctrl.setSelectionRange) {\n     ctrl.focus();\n     ctrl.setSelectionRange(pos, pos);\n@@ -421,7 +421,7 @@ export function areCookiesEnabled() {\n   // see: https://github.com/Modernizr/Modernizr/blob/400db4043c22af98d46e1d2b9cbc5cb062791192/feature-detects/cookies.js\n   try {\n     document.cookie = \"cookietest=1\";\n-    var ret = document.cookie.indexOf(\"cookietest=\") !== -1;\n+    let ret = document.cookie.indexOf(\"cookietest=\") !== -1;\n     document.cookie = \"cookietest=1; expires=Thu, 01-Jan-1970 00:00:01 GMT\";\n     return ret;\n   } catch (e) {"
    },
    {
      "sha": "39ab250c8f4174b79d3397e435f568b9a4daf324",
      "filename": "app/assets/javascripts/discourse/app/mapping-router.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/mapping-router.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/mapping-router.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/mapping-router.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -113,7 +113,7 @@ export function mapRoutes() {\n   // can define admin routes.\n   Object.keys(requirejs._eak_seen).forEach(function (key) {\n     if (/route-map$/.test(key)) {\n-      var module = requirejs(key, null, null, true);\n+      let module = requirejs(key, null, null, true);\n       if (!module || !module.default) {\n         throw new Error(key + \" must export a route map.\");\n       }"
    },
    {
      "sha": "7aabd44c35496dc01c6aa3eca42f15d2ed8e21c4",
      "filename": "app/assets/javascripts/discourse/app/mixins/singleton.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/mixins/singleton.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/mixins/singleton.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/mixins/singleton.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -67,7 +67,7 @@ const Singleton = Mixin.create({\n \n   // Returns OR sets a property on the singleton instance.\n   currentProp(property, value) {\n-    var instance = this.current();\n+    let instance = this.current();\n     if (!instance) {\n       return;\n     }"
    },
    {
      "sha": "b6b84f4634f62b6a3cdd79d9c00c6f51fae6d17b",
      "filename": "app/assets/javascripts/discourse/app/models/category.js",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/category.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/category.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/category.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -312,7 +312,7 @@ const Category = RestModel.extend({\n   },\n });\n \n-var _uncategorized;\n+let _uncategorized;\n \n Category.reopenClass({\n   slugEncoded() {\n@@ -508,7 +508,7 @@ Category.reopenClass({\n   },\n \n   search(term, opts) {\n-    var limit = 5;\n+    let limit = 5;\n \n     if (opts) {\n       if (opts.limit === 0) {\n@@ -529,8 +529,8 @@ Category.reopenClass({\n \n     const categories = Category.listByActivity();\n     const length = categories.length;\n-    var i;\n-    var data = [];\n+    let i;\n+    let data = [];\n \n     const done = () => {\n       return data.length === limit;"
    },
    {
      "sha": "d369d05f3669a21353672b10bdda559febffd5fc",
      "filename": "app/assets/javascripts/discourse/app/models/nav-item.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/nav-item.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/nav-item.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/nav-item.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -177,7 +177,7 @@ NavItem.reopenClass({\n       return null;\n     }\n \n-    var args = { name: filterType, hasIcon: filterType === \"unread\" };\n+    let args = { name: filterType, hasIcon: filterType === \"unread\" };\n     if (opts.category) {\n       args.category = opts.category;\n     }"
    },
    {
      "sha": "d1783c08ef334fe05eed07d1e4da3b663e71959e",
      "filename": "app/assets/javascripts/discourse/app/models/store.js",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/store.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/store.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/store.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -114,9 +114,9 @@ export default EmberObject.extend({\n   },\n \n   find(type, findArgs, opts) {\n-    var adapter = this.adapterFor(type);\n+    let adapter = this.adapterFor(type);\n     return adapter.find(this, type, findArgs, opts).then((result) => {\n-      var hydrated = this._hydrateFindResults(result, type, findArgs, opts);\n+      let hydrated = this._hydrateFindResults(result, type, findArgs, opts);\n \n       if (result.extras) {\n         hydrated.set(\"extras\", result.extras);\n@@ -139,7 +139,7 @@ export default EmberObject.extend({\n     hydrated.set(\n       \"content\",\n       hydrated.get(\"content\").map((item) => {\n-        var staleItem = stale.content.findBy(primaryKey, item.get(primaryKey));\n+        let staleItem = stale.content.findBy(primaryKey, item.get(primaryKey));\n         if (staleItem) {\n           staleItem.setProperties(item);\n         } else {"
    },
    {
      "sha": "71a2bb709b5df814c43687d940206d0386da7c13",
      "filename": "app/assets/javascripts/discourse/app/models/topic-tracking-state.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/topic-tracking-state.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/topic-tracking-state.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/topic-tracking-state.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -291,7 +291,7 @@ const TopicTrackingState = EmberObject.extend({\n     if (split.length >= 4) {\n       filter = split[split.length - 1];\n       // c/cat/subcat/6/l/latest\n-      var category = Category.findSingleBySlug(\n+      let category = Category.findSingleBySlug(\n         split.splice(1, split.length - 4).join(\"/\")\n       );\n       this.set(\"filterCategory\", category);"
    },
    {
      "sha": "0aaff3f561a95fe580344cb29c35a941c963f170",
      "filename": "app/assets/javascripts/discourse/app/models/user-badge.js",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/user-badge.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/user-badge.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/user-badge.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -27,7 +27,7 @@ UserBadge.reopenClass({\n     if (json.users === undefined) {\n       json.users = [];\n     }\n-    var users = {};\n+    let users = {};\n     json.users.forEach(function (userJson) {\n       users[userJson.id] = User.create(userJson);\n     });\n@@ -36,7 +36,7 @@ UserBadge.reopenClass({\n     if (json.topics === undefined) {\n       json.topics = [];\n     }\n-    var topics = {};\n+    let topics = {};\n     json.topics.forEach(function (topicJson) {\n       topics[topicJson.id] = Topic.create(topicJson);\n     });\n@@ -45,13 +45,13 @@ UserBadge.reopenClass({\n     if (json.badges === undefined) {\n       json.badges = [];\n     }\n-    var badges = {};\n+    let badges = {};\n     Badge.createFromJson(json).forEach(function (badge) {\n       badges[badge.get(\"id\")] = badge;\n     });\n \n     // Create UserBadge object(s).\n-    var userBadges = [];\n+    let userBadges = [];\n     if (\"user_badge\" in json) {\n       userBadges = [json.user_badge];\n     } else {\n@@ -61,9 +61,9 @@ UserBadge.reopenClass({\n     }\n \n     userBadges = userBadges.map(function (userBadgeJson) {\n-      var userBadge = UserBadge.create(userBadgeJson);\n+      let userBadge = UserBadge.create(userBadgeJson);\n \n-      var grantedAtDate = Date.parse(userBadge.get(\"granted_at\"));\n+      let grantedAtDate = Date.parse(userBadge.get(\"granted_at\"));\n       userBadge.set(\"grantedAt\", grantedAtDate);\n \n       userBadge.set(\"badge\", badges[userBadge.get(\"badge_id\")]);\n@@ -102,7 +102,7 @@ UserBadge.reopenClass({\n     if (!username) {\n       return Promise.resolve([]);\n     }\n-    var url = \"/user-badges/\" + username + \".json\";\n+    let url = \"/user-badges/\" + username + \".json\";\n     if (options && options.grouped) {\n       url += \"?grouped=true\";\n     }"
    },
    {
      "sha": "61f34556f665b3ba2f318500eff64c826009343b",
      "filename": "app/assets/javascripts/discourse/app/models/user.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/user.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/models/user.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/user.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -342,7 +342,7 @@ const User = RestModel.extend({\n       data[s] = this.get(`user_option.${s}`);\n     });\n \n-    var updatedState = {};\n+    let updatedState = {};\n \n     [\"muted\", \"regular\", \"watched\", \"tracked\", \"watched_first_post\"].forEach(\n       (s) => {"
    },
    {
      "sha": "d3f6dbe3c6fb902eed0d44ca78f11278e1aa8e7b",
      "filename": "app/assets/javascripts/discourse/app/pre-initializers/register-dom-templates.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/pre-initializers/register-dom-templates.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/pre-initializers/register-dom-templates.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/pre-initializers/register-dom-templates.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -3,8 +3,8 @@ export default {\n \n   initialize: function () {\n     $('script[type=\"text/x-handlebars\"]').each(function () {\n-      var $this = $(this);\n-      var name = $this.attr(\"name\") || $this.data(\"template-name\");\n+      let $this = $(this);\n+      let name = $this.attr(\"name\") || $this.data(\"template-name\");\n \n       if (window.console) {\n         window.console.log("
    },
    {
      "sha": "5b77d14f82f63560886cf8d4298c6611e0e44508",
      "filename": "app/assets/javascripts/discourse/app/routes/build-category-route.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/routes/build-category-route.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/routes/build-category-route.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/routes/build-category-route.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -157,7 +157,7 @@ export default (filterArg, params) => {\n         canCreateTopic: canCreateTopic,\n       });\n \n-      var topicOpts = {\n+      let topicOpts = {\n         model: topics,\n         category,\n         period:"
    },
    {
      "sha": "3c4fe8471532be76004faa67bb7c82157a52c0f9",
      "filename": "app/assets/javascripts/discourse/app/routes/full-page-search.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/routes/full-page-search.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/routes/full-page-search.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/routes/full-page-search.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -30,7 +30,7 @@ export default DiscourseRoute.extend({\n \n   model(params) {\n     const cached = getTransient(\"lastSearch\");\n-    var args = { q: params.q };\n+    let args = { q: params.q };\n     if (params.context_id && !args.skip_context) {\n       args.search_context = {\n         type: params.context,"
    },
    {
      "sha": "89a6a04c7a96ab52b97f7ec351841b5212ea584a",
      "filename": "app/assets/javascripts/discourse/app/routes/signup.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/routes/signup.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/routes/signup.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/routes/signup.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -5,7 +5,7 @@ const SignupRoute = buildStaticRoute(\"signup\");\n \n SignupRoute.reopen({\n   beforeModel() {\n-    var canSignUp = this.controllerFor(\"application\").get(\"canSignUp\");\n+    let canSignUp = this.controllerFor(\"application\").get(\"canSignUp\");\n \n     if (!this.siteSettings.login_required) {\n       this.replaceWith(\"discovery.latest\").then((e) => {"
    },
    {
      "sha": "450b8bb40f0ffd412ec20f8cf278b71f96332d94",
      "filename": "app/assets/javascripts/discourse/app/widgets/avatar-flair.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/widgets/avatar-flair.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/widgets/avatar-flair.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/widgets/avatar-flair.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -29,7 +29,7 @@ createWidget(\"avatar-flair\", {\n   },\n \n   buildAttributes(attrs) {\n-    var style = \"\";\n+    let style = \"\";\n     if (!this.isIcon(attrs)) {\n       style +=\n         \"background-image: url(\" +"
    },
    {
      "sha": "be5066e3d8bc25aa3a48d7d11de3e990927d9e28",
      "filename": "app/assets/javascripts/discourse/app/widgets/post-small-action.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/widgets/post-small-action.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/app/widgets/post-small-action.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/widgets/post-small-action.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -12,7 +12,7 @@ export function actionDescriptionHtml(actionCode, createdAt, username) {\n   const dt = new Date(createdAt);\n   const when = autoUpdatingRelativeAge(dt, { format: \"medium-with-ago\" });\n \n-  var who = \"\";\n+  let who = \"\";\n   if (username) {\n     if (actionCode === \"invited_group\" || actionCode === \"removed_group\") {\n       who = `<a class=\"mention-group\" href=\"/g/${username}\">@${username}</a>`;"
    },
    {
      "sha": "d073b449421e2999a1fa9792eaef245aee198155",
      "filename": "app/assets/javascripts/discourse/tests/acceptance/hamburger-menu-test.js",
      "status": "modified",
      "additions": 18,
      "deletions": 17,
      "changes": 35,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/acceptance/hamburger-menu-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/acceptance/hamburger-menu-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/acceptance/hamburger-menu-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -6,22 +6,23 @@ import {\n import { click, visit } from \"@ember/test-helpers\";\n import { test } from \"qunit\";\n \n-acceptance(\"Opening the hamburger menu with some reviewables\", function (\n-  needs\n-) {\n-  needs.user();\n-  needs.pretender((server, helper) => {\n-    server.get(\"/review/count.json\", () => helper.response({ count: 3 }));\n-  });\n-  test(\"As a staff member\", async function (assert) {\n-    updateCurrentUser({ moderator: true, admin: false });\n+acceptance(\n+  \"Opening the hamburger menu with some reviewables\",\n+  function (needs) {\n+    needs.user();\n+    needs.pretender((server, helper) => {\n+      server.get(\"/review/count.json\", () => helper.response({ count: 3 }));\n+    });\n+    test(\"As a staff member\", async function (assert) {\n+      updateCurrentUser({ moderator: true, admin: false });\n \n-    await visit(\"/\");\n-    await click(\".hamburger-dropdown\");\n+      await visit(\"/\");\n+      await click(\".hamburger-dropdown\");\n \n-    assert.equal(\n-      queryAll(\".review .badge-notification.reviewables\").text(),\n-      \"3\"\n-    );\n-  });\n-});\n+      assert.equal(\n+        queryAll(\".review .badge-notification.reviewables\").text(),\n+        \"3\"\n+      );\n+    });\n+  }\n+);"
    },
    {
      "sha": "c87974cf1a60f937e77adfdd77b3115bb76ed86c",
      "filename": "app/assets/javascripts/discourse/tests/acceptance/preferences-test.js",
      "status": "modified",
      "additions": 22,
      "deletions": 21,
      "changes": 43,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/acceptance/preferences-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/acceptance/preferences-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/acceptance/preferences-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -290,28 +290,29 @@ acceptance(\"Second Factor Backups\", function (needs) {\n   });\n });\n \n-acceptance(\"Avatar selector when selectable avatars is enabled\", function (\n-  needs\n-) {\n-  needs.user();\n-  needs.settings({ selectable_avatars_enabled: true });\n-  needs.pretender((server, helper) => {\n-    server.get(\"/site/selectable-avatars.json\", () =>\n-      helper.response([\n-        \"https://www.discourse.org\",\n-        \"https://meta.discourse.org\",\n-      ])\n-    );\n-  });\n+acceptance(\n+  \"Avatar selector when selectable avatars is enabled\",\n+  function (needs) {\n+    needs.user();\n+    needs.settings({ selectable_avatars_enabled: true });\n+    needs.pretender((server, helper) => {\n+      server.get(\"/site/selectable-avatars.json\", () =>\n+        helper.response([\n+          \"https://www.discourse.org\",\n+          \"https://meta.discourse.org\",\n+        ])\n+      );\n+    });\n \n-  test(\"selectable avatars\", async function (assert) {\n-    await visit(\"/u/eviltrout/preferences\");\n-    await click(\".pref-avatar .btn\");\n-    assert.ok(\n-      exists(\".selectable-avatars\", \"opens the avatar selection modal\")\n-    );\n-  });\n-});\n+    test(\"selectable avatars\", async function (assert) {\n+      await visit(\"/u/eviltrout/preferences\");\n+      await click(\".pref-avatar .btn\");\n+      assert.ok(\n+        exists(\".selectable-avatars\", \"opens the avatar selection modal\")\n+      );\n+    });\n+  }\n+);\n \n acceptance(\"User Preferences when badges are disabled\", function (needs) {\n   needs.user();"
    },
    {
      "sha": "8d0670b0c8d0a74e17767fd41ae12b760fa82c77",
      "filename": "app/assets/javascripts/discourse/tests/acceptance/tags-test.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/acceptance/tags-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/acceptance/tags-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/acceptance/tags-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -1,9 +1,9 @@\n import {\n   acceptance,\n   exists,\n+  invisible,\n   queryAll,\n   updateCurrentUser,\n-  invisible,\n } from \"discourse/tests/helpers/qunit-helpers\";\n import { click, currentURL, visit } from \"@ember/test-helpers\";\n import { test } from \"qunit\";"
    },
    {
      "sha": "b97c72aecdcf1f704441cb671186291067e07588",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/activation-controls-test.js",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/activation-controls-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/activation-controls-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/activation-controls-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -6,20 +6,21 @@ import {\n   queryAll,\n } from \"discourse/tests/helpers/qunit-helpers\";\n \n-discourseModule(\"Integration | Component | activation-controls\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | activation-controls\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  componentTest(\"hides change email button\", {\n-    template: `{{activation-controls}}`,\n-    beforeEach() {\n-      this.siteSettings.enable_local_logins = false;\n-      this.siteSettings.email_editable = false;\n-    },\n+    componentTest(\"hides change email button\", {\n+      template: `{{activation-controls}}`,\n+      beforeEach() {\n+        this.siteSettings.enable_local_logins = false;\n+        this.siteSettings.email_editable = false;\n+      },\n \n-    test(assert) {\n-      assert.equal(queryAll(\"button.edit-email\").length, 0);\n-    },\n-  });\n-});\n+      test(assert) {\n+        assert.equal(queryAll(\"button.edit-email\").length, 0);\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "c6408ba2aaba50a8b31aee40ecdbe30dd4dd6dfb",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/d-editor-test.js",
      "status": "modified",
      "additions": 107,
      "deletions": 107,
      "changes": 214,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/d-editor-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/d-editor-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/d-editor-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -97,33 +97,33 @@ discourseModule(\"Integration | Component | d-editor\", function (hooks) {\n     });\n   }\n \n-  testCase(`selecting the space before a word`, async function (\n-    assert,\n-    textarea\n-  ) {\n-    textarea.selectionStart = 5;\n-    textarea.selectionEnd = 7;\n+  testCase(\n+    `selecting the space before a word`,\n+    async function (assert, textarea) {\n+      textarea.selectionStart = 5;\n+      textarea.selectionEnd = 7;\n \n-    await click(`button.bold`);\n+      await click(`button.bold`);\n \n-    assert.equal(this.value, `hello **w**orld.`);\n-    assert.equal(textarea.selectionStart, 8);\n-    assert.equal(textarea.selectionEnd, 9);\n-  });\n+      assert.equal(this.value, `hello **w**orld.`);\n+      assert.equal(textarea.selectionStart, 8);\n+      assert.equal(textarea.selectionEnd, 9);\n+    }\n+  );\n \n-  testCase(`selecting the space after a word`, async function (\n-    assert,\n-    textarea\n-  ) {\n-    textarea.selectionStart = 0;\n-    textarea.selectionEnd = 6;\n+  testCase(\n+    `selecting the space after a word`,\n+    async function (assert, textarea) {\n+      textarea.selectionStart = 0;\n+      textarea.selectionEnd = 6;\n \n-    await click(`button.bold`);\n+      await click(`button.bold`);\n \n-    assert.equal(this.value, `**hello** world.`);\n-    assert.equal(textarea.selectionStart, 2);\n-    assert.equal(textarea.selectionEnd, 7);\n-  });\n+      assert.equal(this.value, `**hello** world.`);\n+      assert.equal(textarea.selectionStart, 2);\n+      assert.equal(textarea.selectionEnd, 7);\n+    }\n+  );\n \n   testCase(`bold button with no selection`, async function (assert, textarea) {\n     await click(`button.bold`);\n@@ -149,37 +149,37 @@ discourseModule(\"Integration | Component | d-editor\", function (hooks) {\n     assert.equal(textarea.selectionEnd, 11);\n   });\n \n-  testCase(`bold with a multiline selection`, async function (\n-    assert,\n-    textarea\n-  ) {\n-    this.set(\"value\", \"hello\\n\\nworld\\n\\ntest.\");\n+  testCase(\n+    `bold with a multiline selection`,\n+    async function (assert, textarea) {\n+      this.set(\"value\", \"hello\\n\\nworld\\n\\ntest.\");\n \n-    textarea.selectionStart = 0;\n-    textarea.selectionEnd = 12;\n+      textarea.selectionStart = 0;\n+      textarea.selectionEnd = 12;\n \n-    await click(`button.bold`);\n-    assert.equal(this.value, `**hello**\\n\\n**world**\\n\\ntest.`);\n-    assert.equal(textarea.selectionStart, 0);\n-    assert.equal(textarea.selectionEnd, 20);\n+      await click(`button.bold`);\n+      assert.equal(this.value, `**hello**\\n\\n**world**\\n\\ntest.`);\n+      assert.equal(textarea.selectionStart, 0);\n+      assert.equal(textarea.selectionEnd, 20);\n \n-    await click(`button.bold`);\n-    assert.equal(this.value, `hello\\n\\nworld\\n\\ntest.`);\n-    assert.equal(textarea.selectionStart, 0);\n-    assert.equal(textarea.selectionEnd, 12);\n-  });\n+      await click(`button.bold`);\n+      assert.equal(this.value, `hello\\n\\nworld\\n\\ntest.`);\n+      assert.equal(textarea.selectionStart, 0);\n+      assert.equal(textarea.selectionEnd, 12);\n+    }\n+  );\n \n-  testCase(`italic button with no selection`, async function (\n-    assert,\n-    textarea\n-  ) {\n-    await click(`button.italic`);\n-    const example = I18n.t(`composer.italic_text`);\n-    assert.equal(this.value, `hello world.*${example}*`);\n+  testCase(\n+    `italic button with no selection`,\n+    async function (assert, textarea) {\n+      await click(`button.italic`);\n+      const example = I18n.t(`composer.italic_text`);\n+      assert.equal(this.value, `hello world.*${example}*`);\n \n-    assert.equal(textarea.selectionStart, 13);\n-    assert.equal(textarea.selectionEnd, 13 + example.length);\n-  });\n+      assert.equal(textarea.selectionStart, 13);\n+      assert.equal(textarea.selectionEnd, 13 + example.length);\n+    }\n+  );\n \n   testCase(`italic button with a selection`, async function (assert, textarea) {\n     textarea.selectionStart = 6;\n@@ -196,25 +196,25 @@ discourseModule(\"Integration | Component | d-editor\", function (hooks) {\n     assert.equal(textarea.selectionEnd, 11);\n   });\n \n-  testCase(`italic with a multiline selection`, async function (\n-    assert,\n-    textarea\n-  ) {\n-    this.set(\"value\", \"hello\\n\\nworld\\n\\ntest.\");\n+  testCase(\n+    `italic with a multiline selection`,\n+    async function (assert, textarea) {\n+      this.set(\"value\", \"hello\\n\\nworld\\n\\ntest.\");\n \n-    textarea.selectionStart = 0;\n-    textarea.selectionEnd = 12;\n+      textarea.selectionStart = 0;\n+      textarea.selectionEnd = 12;\n \n-    await click(`button.italic`);\n-    assert.equal(this.value, `*hello*\\n\\n*world*\\n\\ntest.`);\n-    assert.equal(textarea.selectionStart, 0);\n-    assert.equal(textarea.selectionEnd, 16);\n+      await click(`button.italic`);\n+      assert.equal(this.value, `*hello*\\n\\n*world*\\n\\ntest.`);\n+      assert.equal(textarea.selectionStart, 0);\n+      assert.equal(textarea.selectionEnd, 16);\n \n-    await click(`button.italic`);\n-    assert.equal(this.value, `hello\\n\\nworld\\n\\ntest.`);\n-    assert.equal(textarea.selectionStart, 0);\n-    assert.equal(textarea.selectionEnd, 12);\n-  });\n+      await click(`button.italic`);\n+      assert.equal(this.value, `hello\\n\\nworld\\n\\ntest.`);\n+      assert.equal(textarea.selectionStart, 0);\n+      assert.equal(textarea.selectionEnd, 12);\n+    }\n+  );\n \n   componentTest(\"advanced code\", {\n     template: \"{{d-editor value=value}}\",\n@@ -508,20 +508,20 @@ third line`\n     assert.equal(this.value, \"hello\\n\\nwor\\n\\nld.\\n\\n> Blockquote\");\n   });\n \n-  testCase(`bullet button with no selection`, async function (\n-    assert,\n-    textarea\n-  ) {\n-    const example = I18n.t(\"composer.list_item\");\n+  testCase(\n+    `bullet button with no selection`,\n+    async function (assert, textarea) {\n+      const example = I18n.t(\"composer.list_item\");\n \n-    await click(`button.bullet`);\n-    assert.equal(this.value, `hello world.\\n\\n* ${example}`);\n-    assert.equal(textarea.selectionStart, 14);\n-    assert.equal(textarea.selectionEnd, 16 + example.length);\n+      await click(`button.bullet`);\n+      assert.equal(this.value, `hello world.\\n\\n* ${example}`);\n+      assert.equal(textarea.selectionStart, 14);\n+      assert.equal(textarea.selectionEnd, 16 + example.length);\n \n-    await click(`button.bullet`);\n-    assert.equal(this.value, `hello world.\\n\\n${example}`);\n-  });\n+      await click(`button.bullet`);\n+      assert.equal(this.value, `hello world.\\n\\n${example}`);\n+    }\n+  );\n \n   testCase(`bullet button with a selection`, async function (assert, textarea) {\n     textarea.selectionStart = 6;\n@@ -538,25 +538,25 @@ third line`\n     assert.equal(textarea.selectionEnd, 12);\n   });\n \n-  testCase(`bullet button with a multiple line selection`, async function (\n-    assert,\n-    textarea\n-  ) {\n-    this.set(\"value\", \"* Hello\\n\\nWorld\\n\\nEvil\");\n+  testCase(\n+    `bullet button with a multiple line selection`,\n+    async function (assert, textarea) {\n+      this.set(\"value\", \"* Hello\\n\\nWorld\\n\\nEvil\");\n \n-    textarea.selectionStart = 0;\n-    textarea.selectionEnd = 20;\n+      textarea.selectionStart = 0;\n+      textarea.selectionEnd = 20;\n \n-    await click(`button.bullet`);\n-    assert.equal(this.value, \"Hello\\n\\nWorld\\n\\nEvil\");\n-    assert.equal(textarea.selectionStart, 0);\n-    assert.equal(textarea.selectionEnd, 18);\n+      await click(`button.bullet`);\n+      assert.equal(this.value, \"Hello\\n\\nWorld\\n\\nEvil\");\n+      assert.equal(textarea.selectionStart, 0);\n+      assert.equal(textarea.selectionEnd, 18);\n \n-    await click(`button.bullet`);\n-    assert.equal(this.value, \"* Hello\\n\\n* World\\n\\n* Evil\");\n-    assert.equal(textarea.selectionStart, 0);\n-    assert.equal(textarea.selectionEnd, 24);\n-  });\n+      await click(`button.bullet`);\n+      assert.equal(this.value, \"* Hello\\n\\n* World\\n\\n* Evil\");\n+      assert.equal(textarea.selectionStart, 0);\n+      assert.equal(textarea.selectionEnd, 24);\n+    }\n+  );\n \n   testCase(`list button with no selection`, async function (assert, textarea) {\n     const example = I18n.t(\"composer.list_item\");\n@@ -633,23 +633,23 @@ third line`\n     },\n   });\n \n-  testCase(`doesn't jump to bottom with long text`, async function (\n-    assert,\n-    textarea\n-  ) {\n-    let longText = \"hello world.\";\n-    for (let i = 0; i < 8; i++) {\n-      longText = longText + longText;\n-    }\n-    this.set(\"value\", longText);\n+  testCase(\n+    `doesn't jump to bottom with long text`,\n+    async function (assert, textarea) {\n+      let longText = \"hello world.\";\n+      for (let i = 0; i < 8; i++) {\n+        longText = longText + longText;\n+      }\n+      this.set(\"value\", longText);\n \n-    $(textarea).scrollTop(0);\n-    textarea.selectionStart = 3;\n-    textarea.selectionEnd = 3;\n+      $(textarea).scrollTop(0);\n+      textarea.selectionStart = 3;\n+      textarea.selectionEnd = 3;\n \n-    await click(\"button.bold\");\n-    assert.equal($(textarea).scrollTop(), 0, \"it stays scrolled up\");\n-  });\n+      await click(\"button.bold\");\n+      assert.equal($(textarea).scrollTop(), 0, \"it stays scrolled up\");\n+    }\n+  );\n \n   componentTest(\"emoji\", {\n     template: \"{{d-editor value=value}}\","
    },
    {
      "sha": "f7b2ca1af944edcd0c3f5a9e66a6354b4b664609",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/date-time-input-range-test.js",
      "status": "modified",
      "additions": 21,
      "deletions": 20,
      "changes": 41,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/date-time-input-range-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/date-time-input-range-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/date-time-input-range-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -24,23 +24,24 @@ function toTimeInput() {\n \n const DEFAULT_DATE_TIME = moment(\"2019-01-29 14:45\");\n \n-discourseModule(\"Integration | Component | date-time-input-range\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n-\n-  componentTest(\"default\", {\n-    template: `{{date-time-input-range from=from to=to}}`,\n-\n-    beforeEach() {\n-      this.setProperties({ from: DEFAULT_DATE_TIME, to: null });\n-    },\n-\n-    test(assert) {\n-      assert.equal(fromDateInput().value, \"January 29, 2019\");\n-      assert.equal(fromTimeInput().dataset.name, \"14:45\");\n-      assert.equal(toDateInput().value, \"\");\n-      assert.equal(toTimeInput().dataset.name, \"--:--\");\n-    },\n-  });\n-});\n+discourseModule(\n+  \"Integration | Component | date-time-input-range\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n+\n+    componentTest(\"default\", {\n+      template: `{{date-time-input-range from=from to=to}}`,\n+\n+      beforeEach() {\n+        this.setProperties({ from: DEFAULT_DATE_TIME, to: null });\n+      },\n+\n+      test(assert) {\n+        assert.equal(fromDateInput().value, \"January 29, 2019\");\n+        assert.equal(fromTimeInput().dataset.name, \"14:45\");\n+        assert.equal(toDateInput().value, \"\");\n+        assert.equal(toTimeInput().dataset.name, \"--:--\");\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "bc3bc78a74aa97244237ea95aeb9f547abaceed7",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/secret-value-list-test.js",
      "status": "modified",
      "additions": 96,
      "deletions": 95,
      "changes": 191,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/secret-value-list-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/secret-value-list-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/secret-value-list-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -8,98 +8,99 @@ import {\n } from \"discourse/tests/helpers/qunit-helpers\";\n import I18n from \"I18n\";\n \n-discourseModule(\"Integration | Component | secret-value-list\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n-\n-  componentTest(\"adding a value\", {\n-    template: \"{{secret-value-list values=values}}\",\n-\n-    async test(assert) {\n-      this.set(\"values\", \"firstKey|FirstValue\\nsecondKey|secondValue\");\n-\n-      await fillIn(\".new-value-input.key\", \"thirdKey\");\n-      await click(\".add-value-btn\");\n-\n-      assert.ok(\n-        queryAll(\".values .value\").length === 2,\n-        \"it doesn't add the value to the list if secret is missing\"\n-      );\n-\n-      await fillIn(\".new-value-input.key\", \"\");\n-      await fillIn(\".new-value-input.secret\", \"thirdValue\");\n-      await click(\".add-value-btn\");\n-\n-      assert.ok(\n-        queryAll(\".values .value\").length === 2,\n-        \"it doesn't add the value to the list if key is missing\"\n-      );\n-\n-      await fillIn(\".new-value-input.key\", \"thirdKey\");\n-      await fillIn(\".new-value-input.secret\", \"thirdValue\");\n-      await click(\".add-value-btn\");\n-\n-      assert.ok(\n-        queryAll(\".values .value\").length === 3,\n-        \"it adds the value to the list of values\"\n-      );\n-\n-      assert.deepEqual(\n-        this.values,\n-        \"firstKey|FirstValue\\nsecondKey|secondValue\\nthirdKey|thirdValue\",\n-        \"it adds the value to the list of values\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"adding an invalid value\", {\n-    template: \"{{secret-value-list values=values}}\",\n-\n-    async test(assert) {\n-      await fillIn(\".new-value-input.key\", \"someString\");\n-      await fillIn(\".new-value-input.secret\", \"keyWithAPipe|Hidden\");\n-      await click(\".add-value-btn\");\n-\n-      assert.ok(\n-        queryAll(\".values .value\").length === 0,\n-        \"it doesn't add the value to the list of values\"\n-      );\n-\n-      assert.deepEqual(\n-        this.values,\n-        undefined,\n-        \"it doesn't add the value to the list of values\"\n-      );\n-\n-      assert.ok(\n-        queryAll(\".validation-error\")\n-          .html()\n-          .indexOf(I18n.t(\"admin.site_settings.secret_list.invalid_input\")) >\n-          -1,\n-        \"it shows validation error\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"removing a value\", {\n-    template: \"{{secret-value-list values=values}}\",\n-\n-    async test(assert) {\n-      this.set(\"values\", \"firstKey|FirstValue\\nsecondKey|secondValue\");\n-\n-      await click(\".values .value[data-index='0'] .remove-value-btn\");\n-\n-      assert.ok(\n-        queryAll(\".values .value\").length === 1,\n-        \"it removes the value from the list of values\"\n-      );\n-\n-      assert.equal(\n-        this.values,\n-        \"secondKey|secondValue\",\n-        \"it removes the expected value\"\n-      );\n-    },\n-  });\n-});\n+discourseModule(\n+  \"Integration | Component | secret-value-list\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n+\n+    componentTest(\"adding a value\", {\n+      template: \"{{secret-value-list values=values}}\",\n+\n+      async test(assert) {\n+        this.set(\"values\", \"firstKey|FirstValue\\nsecondKey|secondValue\");\n+\n+        await fillIn(\".new-value-input.key\", \"thirdKey\");\n+        await click(\".add-value-btn\");\n+\n+        assert.ok(\n+          queryAll(\".values .value\").length === 2,\n+          \"it doesn't add the value to the list if secret is missing\"\n+        );\n+\n+        await fillIn(\".new-value-input.key\", \"\");\n+        await fillIn(\".new-value-input.secret\", \"thirdValue\");\n+        await click(\".add-value-btn\");\n+\n+        assert.ok(\n+          queryAll(\".values .value\").length === 2,\n+          \"it doesn't add the value to the list if key is missing\"\n+        );\n+\n+        await fillIn(\".new-value-input.key\", \"thirdKey\");\n+        await fillIn(\".new-value-input.secret\", \"thirdValue\");\n+        await click(\".add-value-btn\");\n+\n+        assert.ok(\n+          queryAll(\".values .value\").length === 3,\n+          \"it adds the value to the list of values\"\n+        );\n+\n+        assert.deepEqual(\n+          this.values,\n+          \"firstKey|FirstValue\\nsecondKey|secondValue\\nthirdKey|thirdValue\",\n+          \"it adds the value to the list of values\"\n+        );\n+      },\n+    });\n+\n+    componentTest(\"adding an invalid value\", {\n+      template: \"{{secret-value-list values=values}}\",\n+\n+      async test(assert) {\n+        await fillIn(\".new-value-input.key\", \"someString\");\n+        await fillIn(\".new-value-input.secret\", \"keyWithAPipe|Hidden\");\n+        await click(\".add-value-btn\");\n+\n+        assert.ok(\n+          queryAll(\".values .value\").length === 0,\n+          \"it doesn't add the value to the list of values\"\n+        );\n+\n+        assert.deepEqual(\n+          this.values,\n+          undefined,\n+          \"it doesn't add the value to the list of values\"\n+        );\n+\n+        assert.ok(\n+          queryAll(\".validation-error\")\n+            .html()\n+            .indexOf(I18n.t(\"admin.site_settings.secret_list.invalid_input\")) >\n+            -1,\n+          \"it shows validation error\"\n+        );\n+      },\n+    });\n+\n+    componentTest(\"removing a value\", {\n+      template: \"{{secret-value-list values=values}}\",\n+\n+      async test(assert) {\n+        this.set(\"values\", \"firstKey|FirstValue\\nsecondKey|secondValue\");\n+\n+        await click(\".values .value[data-index='0'] .remove-value-btn\");\n+\n+        assert.ok(\n+          queryAll(\".values .value\").length === 1,\n+          \"it removes the value from the list of values\"\n+        );\n+\n+        assert.equal(\n+          this.values,\n+          \"secondKey|secondValue\",\n+          \"it removes the expected value\"\n+        );\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "b3611c36701a75b3f872aa9edb88251260d2ee9e",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/select-kit/category-drop-test.js",
      "status": "modified",
      "additions": 234,
      "deletions": 233,
      "changes": 467,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/category-drop-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/category-drop-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/select-kit/category-drop-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -47,313 +47,314 @@ function template(options = []) {\n   `;\n }\n \n-discourseModule(\"Integration | Component | select-kit/category-drop\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | select-kit/category-drop\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  hooks.beforeEach(function () {\n-    this.set(\"subject\", selectKit());\n-  });\n+    hooks.beforeEach(function () {\n+      this.set(\"subject\", selectKit());\n+    });\n \n-  componentTest(\"caretUpIcon\", {\n-    template: `\n+    componentTest(\"caretUpIcon\", {\n+      template: `\n       {{category-drop\n         category=value\n         categories=content\n       }}\n     `,\n \n-    async test(assert) {\n-      const $header = this.subject.header().el();\n+      async test(assert) {\n+        const $header = this.subject.header().el();\n \n-      assert.ok(\n-        exists($header.find(`.d-icon-caret-right`)),\n-        \"it uses the correct default icon\"\n-      );\n-    },\n-  });\n+        assert.ok(\n+          exists($header.find(`.d-icon-caret-right`)),\n+          \"it uses the correct default icon\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"none\", {\n-    template: `\n+    componentTest(\"none\", {\n+      template: `\n       {{category-drop\n         category=value\n         categories=content\n       }}\n     `,\n \n-    async test(assert) {\n-      const text = this.subject.header().label();\n-      assert.equal(\n-        text,\n-        I18n.t(\"category.all\").toLowerCase(),\n-        \"it uses the noneLabel\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"[not staff - TL0] displayCategoryDescription\", {\n-    template: template(),\n+      async test(assert) {\n+        const text = this.subject.header().label();\n+        assert.equal(\n+          text,\n+          I18n.t(\"category.all\").toLowerCase(),\n+          \"it uses the noneLabel\"\n+        );\n+      },\n+    });\n \n-    beforeEach() {\n-      set(this.currentUser, \"staff\", false);\n-      set(this.currentUser, \"trust_level\", 0);\n+    componentTest(\"[not staff - TL0] displayCategoryDescription\", {\n+      template: template(),\n \n-      initCategories(this);\n-    },\n+      beforeEach() {\n+        set(this.currentUser, \"staff\", false);\n+        set(this.currentUser, \"trust_level\", 0);\n \n-    async test(assert) {\n-      await this.subject.expand();\n+        initCategories(this);\n+      },\n \n-      const row = this.subject.rowByValue(this.category.id);\n-      assert.ok(\n-        exists(row.el().find(\".category-desc\")),\n-        \"it shows category description for newcomers\"\n-      );\n-    },\n-  });\n+      async test(assert) {\n+        await this.subject.expand();\n \n-  componentTest(\"[not staff - TL1] displayCategoryDescription\", {\n-    template: template(),\n-\n-    beforeEach() {\n-      set(this.currentUser, \"moderator\", false);\n-      set(this.currentUser, \"admin\", false);\n-      set(this.currentUser, \"trust_level\", 1);\n-      initCategories(this);\n-    },\n-\n-    async test(assert) {\n-      await this.subject.expand();\n-\n-      const row = this.subject.rowByValue(this.category.id);\n-      assert.ok(\n-        !exists(row.el().find(\".category-desc\")),\n-        \"it doesn't shows category description for TL0+\"\n-      );\n-    },\n-  });\n+        const row = this.subject.rowByValue(this.category.id);\n+        assert.ok(\n+          exists(row.el().find(\".category-desc\")),\n+          \"it shows category description for newcomers\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"[staff - TL0] displayCategoryDescription\", {\n-    template: template(),\n+    componentTest(\"[not staff - TL1] displayCategoryDescription\", {\n+      template: template(),\n \n-    beforeEach() {\n-      set(this.currentUser, \"moderator\", true);\n-      set(this.currentUser, \"trust_level\", 0);\n+      beforeEach() {\n+        set(this.currentUser, \"moderator\", false);\n+        set(this.currentUser, \"admin\", false);\n+        set(this.currentUser, \"trust_level\", 1);\n+        initCategories(this);\n+      },\n \n-      initCategories(this);\n-    },\n+      async test(assert) {\n+        await this.subject.expand();\n \n-    async test(assert) {\n-      await this.subject.expand();\n+        const row = this.subject.rowByValue(this.category.id);\n+        assert.ok(\n+          !exists(row.el().find(\".category-desc\")),\n+          \"it doesn't shows category description for TL0+\"\n+        );\n+      },\n+    });\n \n-      const row = this.subject.rowByValue(this.category.id);\n-      assert.ok(\n-        !exists(row.el().find(\".category-desc\")),\n-        \"it doesn't show category description for staff\"\n-      );\n-    },\n-  });\n+    componentTest(\"[staff - TL0] displayCategoryDescription\", {\n+      template: template(),\n \n-  componentTest(\"hideParentCategory (default: false)\", {\n-    template: template(),\n+      beforeEach() {\n+        set(this.currentUser, \"moderator\", true);\n+        set(this.currentUser, \"trust_level\", 0);\n \n-    beforeEach() {\n-      initCategories(this);\n-    },\n+        initCategories(this);\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      const row = this.subject.rowByValue(this.category.id);\n-      assert.equal(row.value(), this.category.id);\n-      assert.equal(this.category.parent_category_id, null);\n-    },\n-  });\n+        const row = this.subject.rowByValue(this.category.id);\n+        assert.ok(\n+          !exists(row.el().find(\".category-desc\")),\n+          \"it doesn't show category description for staff\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"hideParentCategory (true)\", {\n-    template: template([\"hideParentCategory=true\"]),\n+    componentTest(\"hideParentCategory (default: false)\", {\n+      template: template(),\n \n-    beforeEach() {\n-      initCategoriesWithParentCategory(this);\n-    },\n+      beforeEach() {\n+        initCategories(this);\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      const parentRow = this.subject.rowByValue(this.parentCategory.id);\n-      assert.notOk(parentRow.exists(), \"the parent row is not showing\");\n+        const row = this.subject.rowByValue(this.category.id);\n+        assert.equal(row.value(), this.category.id);\n+        assert.equal(this.category.parent_category_id, null);\n+      },\n+    });\n \n-      const childCategory = this.categories.firstObject;\n-      const childCategoryId = childCategory.id;\n-      const childRow = this.subject.rowByValue(childCategoryId);\n-      assert.ok(childRow.exists(), \"the child row is showing\");\n+    componentTest(\"hideParentCategory (true)\", {\n+      template: template([\"hideParentCategory=true\"]),\n \n-      const $categoryStatus = childRow.el().find(\".category-status\");\n-      assert.ok($categoryStatus.text().trim().match(/^spec/));\n-    },\n-  });\n+      beforeEach() {\n+        initCategoriesWithParentCategory(this);\n+      },\n \n-  componentTest(\"allow_uncategorized_topics (true)\", {\n-    template: template(),\n+      async test(assert) {\n+        await this.subject.expand();\n \n-    beforeEach() {\n-      this.siteSettings.allow_uncategorized_topics = true;\n-      initCategories(this);\n-    },\n+        const parentRow = this.subject.rowByValue(this.parentCategory.id);\n+        assert.notOk(parentRow.exists(), \"the parent row is not showing\");\n \n-    async test(assert) {\n-      await this.subject.expand();\n+        const childCategory = this.categories.firstObject;\n+        const childCategoryId = childCategory.id;\n+        const childRow = this.subject.rowByValue(childCategoryId);\n+        assert.ok(childRow.exists(), \"the child row is showing\");\n \n-      const uncategorizedCategoryId = this.site.uncategorized_category_id;\n-      const row = this.subject.rowByValue(uncategorizedCategoryId);\n-      assert.ok(row.exists(), \"the uncategorized row is showing\");\n-    },\n-  });\n+        const $categoryStatus = childRow.el().find(\".category-status\");\n+        assert.ok($categoryStatus.text().trim().match(/^spec/));\n+      },\n+    });\n \n-  componentTest(\"allow_uncategorized_topics (false)\", {\n-    template: template(),\n+    componentTest(\"allow_uncategorized_topics (true)\", {\n+      template: template(),\n \n-    beforeEach() {\n-      this.siteSettings.allow_uncategorized_topics = false;\n-      initCategories(this);\n-    },\n+      beforeEach() {\n+        this.siteSettings.allow_uncategorized_topics = true;\n+        initCategories(this);\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      const uncategorizedCategoryId = this.site.uncategorized_category_id;\n-      const row = this.subject.rowByValue(uncategorizedCategoryId);\n-      assert.notOk(row.exists(), \"the uncategorized row is not showing\");\n-    },\n-  });\n+        const uncategorizedCategoryId = this.site.uncategorized_category_id;\n+        const row = this.subject.rowByValue(uncategorizedCategoryId);\n+        assert.ok(row.exists(), \"the uncategorized row is showing\");\n+      },\n+    });\n \n-  componentTest(\"countSubcategories (default: false)\", {\n-    template: template(),\n+    componentTest(\"allow_uncategorized_topics (false)\", {\n+      template: template(),\n \n-    beforeEach() {\n-      initCategories(this);\n-    },\n+      beforeEach() {\n+        this.siteSettings.allow_uncategorized_topics = false;\n+        initCategories(this);\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      const category = Category.findById(7);\n-      const row = this.subject.rowByValue(category.id);\n-      const topicCount = row.el().find(\".topic-count\").text().trim();\n+        const uncategorizedCategoryId = this.site.uncategorized_category_id;\n+        const row = this.subject.rowByValue(uncategorizedCategoryId);\n+        assert.notOk(row.exists(), \"the uncategorized row is not showing\");\n+      },\n+    });\n \n-      assert.equal(\n-        topicCount,\n-        \"× 481\",\n-        \"it doesn't include the topic count of subcategories\"\n-      );\n-    },\n-  });\n+    componentTest(\"countSubcategories (default: false)\", {\n+      template: template(),\n \n-  componentTest(\"countSubcategories (true)\", {\n-    template: template([\"countSubcategories=true\"]),\n+      beforeEach() {\n+        initCategories(this);\n+      },\n \n-    beforeEach() {\n-      initCategories(this);\n-    },\n+      async test(assert) {\n+        await this.subject.expand();\n \n-    async test(assert) {\n-      await this.subject.expand();\n+        const category = Category.findById(7);\n+        const row = this.subject.rowByValue(category.id);\n+        const topicCount = row.el().find(\".topic-count\").text().trim();\n \n-      const category = Category.findById(7);\n-      const row = this.subject.rowByValue(category.id);\n-      const topicCount = row.el().find(\".topic-count\").text().trim();\n+        assert.equal(\n+          topicCount,\n+          \"× 481\",\n+          \"it doesn't include the topic count of subcategories\"\n+        );\n+      },\n+    });\n \n-      assert.equal(\n-        topicCount,\n-        \"× 584\",\n-        \"it includes the topic count of subcategories\"\n-      );\n-    },\n-  });\n+    componentTest(\"countSubcategories (true)\", {\n+      template: template([\"countSubcategories=true\"]),\n \n-  componentTest(\"shortcuts:default\", {\n-    template: template(),\n+      beforeEach() {\n+        initCategories(this);\n+      },\n \n-    beforeEach() {\n-      initCategories(this);\n-      this.set(\"category\", null);\n-    },\n+      async test(assert) {\n+        await this.subject.expand();\n \n-    async test(assert) {\n-      await this.subject.expand();\n+        const category = Category.findById(7);\n+        const row = this.subject.rowByValue(category.id);\n+        const topicCount = row.el().find(\".topic-count\").text().trim();\n \n-      assert.equal(\n-        this.subject.rowByIndex(0).value(),\n-        this.categories.firstObject.id,\n-        \"Shortcuts are not prepended when no category is selected\"\n-      );\n-    },\n-  });\n+        assert.equal(\n+          topicCount,\n+          \"× 584\",\n+          \"it includes the topic count of subcategories\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"shortcuts:category is set\", {\n-    template: template(),\n+    componentTest(\"shortcuts:default\", {\n+      template: template(),\n \n-    beforeEach() {\n-      initCategories(this);\n-    },\n+      beforeEach() {\n+        initCategories(this);\n+        this.set(\"category\", null);\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      assert.equal(this.subject.rowByIndex(0).value(), ALL_CATEGORIES_ID);\n-    },\n-  });\n+        assert.equal(\n+          this.subject.rowByIndex(0).value(),\n+          this.categories.firstObject.id,\n+          \"Shortcuts are not prepended when no category is selected\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"shortcuts with parentCategory/subCategory=true:default\", {\n-    template: template([\"subCategory=true\"]),\n+    componentTest(\"shortcuts:category is set\", {\n+      template: template(),\n \n-    beforeEach() {\n-      initCategoriesWithParentCategory(this);\n-    },\n+      beforeEach() {\n+        initCategories(this);\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      assert.equal(this.subject.rowByIndex(0).value(), NO_CATEGORIES_ID);\n-    },\n-  });\n+        assert.equal(this.subject.rowByIndex(0).value(), ALL_CATEGORIES_ID);\n+      },\n+    });\n \n-  componentTest(\n-    \"shortcuts with parentCategory/subCategory=true:category is selected\",\n-    {\n+    componentTest(\"shortcuts with parentCategory/subCategory=true:default\", {\n       template: template([\"subCategory=true\"]),\n \n       beforeEach() {\n         initCategoriesWithParentCategory(this);\n-        this.set(\"category\", this.categories.firstObject);\n       },\n \n       async test(assert) {\n         await this.subject.expand();\n \n-        assert.equal(this.subject.rowByIndex(0).value(), ALL_CATEGORIES_ID);\n-        assert.equal(this.subject.rowByIndex(1).value(), NO_CATEGORIES_ID);\n+        assert.equal(this.subject.rowByIndex(0).value(), NO_CATEGORIES_ID);\n       },\n-    }\n-  );\n-\n-  componentTest(\"category url\", {\n-    template: template(),\n-\n-    beforeEach() {\n-      initCategoriesWithParentCategory(this);\n-      sinon.stub(DiscourseURL, \"routeTo\");\n-    },\n-\n-    async test(assert) {\n-      await this.subject.expand();\n-      await this.subject.selectRowByValue(26);\n-\n-      assert.ok(\n-        DiscourseURL.routeTo.calledWith(\"/c/feature/spec/26\"),\n-        \"it builds a correct URL\"\n-      );\n-    },\n-  });\n-});\n+    });\n+\n+    componentTest(\n+      \"shortcuts with parentCategory/subCategory=true:category is selected\",\n+      {\n+        template: template([\"subCategory=true\"]),\n+\n+        beforeEach() {\n+          initCategoriesWithParentCategory(this);\n+          this.set(\"category\", this.categories.firstObject);\n+        },\n+\n+        async test(assert) {\n+          await this.subject.expand();\n+\n+          assert.equal(this.subject.rowByIndex(0).value(), ALL_CATEGORIES_ID);\n+          assert.equal(this.subject.rowByIndex(1).value(), NO_CATEGORIES_ID);\n+        },\n+      }\n+    );\n+\n+    componentTest(\"category url\", {\n+      template: template(),\n+\n+      beforeEach() {\n+        initCategoriesWithParentCategory(this);\n+        sinon.stub(DiscourseURL, \"routeTo\");\n+      },\n+\n+      async test(assert) {\n+        await this.subject.expand();\n+        await this.subject.selectRowByValue(26);\n+\n+        assert.ok(\n+          DiscourseURL.routeTo.calledWith(\"/c/feature/spec/26\"),\n+          \"it builds a correct URL\"\n+        );\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "67176a1818a6007675787f80d360d797ea3aa070",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/select-kit/combo-box-test.js",
      "status": "modified",
      "additions": 64,
      "deletions": 63,
      "changes": 127,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/combo-box-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/combo-box-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/select-kit/combo-box-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -24,17 +24,17 @@ const setDefaultState = (ctx, options) => {\n   ctx.setProperties(properties);\n };\n \n-discourseModule(\"Integration | Component | select-kit/combo-box\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | select-kit/combo-box\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  hooks.beforeEach(function () {\n-    this.set(\"subject\", selectKit());\n-  });\n+    hooks.beforeEach(function () {\n+      this.set(\"subject\", selectKit());\n+    });\n \n-  componentTest(\"options.clearable\", {\n-    template: `\n+    componentTest(\"options.clearable\", {\n+      template: `\n       {{combo-box\n         value=value\n         content=content\n@@ -43,36 +43,36 @@ discourseModule(\"Integration | Component | select-kit/combo-box\", function (\n       }}\n     `,\n \n-    beforeEach() {\n-      setDefaultState(this, {\n-        clearable: true,\n-        onChange: (value) => {\n-          this.set(\"value\", value);\n-        },\n-      });\n-    },\n-\n-    async test(assert) {\n-      const $header = this.subject.header();\n-\n-      assert.ok(\n-        exists($header.el().find(\".btn-clear\")),\n-        \"it shows the clear button\"\n-      );\n-      assert.equal($header.value(), DEFAULT_VALUE);\n-\n-      await click($header.el().find(\".btn-clear\"));\n-\n-      assert.notOk(\n-        exists($header.el().find(\".btn-clear\")),\n-        \"it hides the clear button\"\n-      );\n-      assert.equal($header.value(), null);\n-    },\n-  });\n-\n-  componentTest(\"options.{caretUpIcon,caretDownIcon}\", {\n-    template: `\n+      beforeEach() {\n+        setDefaultState(this, {\n+          clearable: true,\n+          onChange: (value) => {\n+            this.set(\"value\", value);\n+          },\n+        });\n+      },\n+\n+      async test(assert) {\n+        const $header = this.subject.header();\n+\n+        assert.ok(\n+          exists($header.el().find(\".btn-clear\")),\n+          \"it shows the clear button\"\n+        );\n+        assert.equal($header.value(), DEFAULT_VALUE);\n+\n+        await click($header.el().find(\".btn-clear\"));\n+\n+        assert.notOk(\n+          exists($header.el().find(\".btn-clear\")),\n+          \"it hides the clear button\"\n+        );\n+        assert.equal($header.value(), null);\n+      },\n+    });\n+\n+    componentTest(\"options.{caretUpIcon,caretDownIcon}\", {\n+      template: `\n       {{combo-box\n         value=value\n         content=content\n@@ -83,27 +83,28 @@ discourseModule(\"Integration | Component | select-kit/combo-box\", function (\n       }}\n     `,\n \n-    beforeEach() {\n-      setDefaultState(this, {\n-        caretUpIcon: \"pencil-alt\",\n-        caretDownIcon: \"trash-alt\",\n-      });\n-    },\n-\n-    async test(assert) {\n-      const $header = this.subject.header().el();\n-\n-      assert.ok(\n-        exists($header.find(`.d-icon-${this.caretDownIcon}`)),\n-        \"it uses the icon provided\"\n-      );\n-\n-      await this.subject.expand();\n-\n-      assert.ok(\n-        exists($header.find(`.d-icon-${this.caretUpIcon}`)),\n-        \"it uses the icon provided\"\n-      );\n-    },\n-  });\n-});\n+      beforeEach() {\n+        setDefaultState(this, {\n+          caretUpIcon: \"pencil-alt\",\n+          caretDownIcon: \"trash-alt\",\n+        });\n+      },\n+\n+      async test(assert) {\n+        const $header = this.subject.header().el();\n+\n+        assert.ok(\n+          exists($header.find(`.d-icon-${this.caretDownIcon}`)),\n+          \"it uses the icon provided\"\n+        );\n+\n+        await this.subject.expand();\n+\n+        assert.ok(\n+          exists($header.find(`.d-icon-${this.caretUpIcon}`)),\n+          \"it uses the icon provided\"\n+        );\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "0999e83e381f0e907b516a3674ab2c69fb8ef3c9",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/select-kit/list-setting-test.js",
      "status": "modified",
      "additions": 29,
      "deletions": 28,
      "changes": 57,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/list-setting-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/list-setting-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/select-kit/list-setting-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -16,31 +16,32 @@ function template(options = []) {\n   `;\n }\n \n-discourseModule(\"Integration | Component | select-kit/list-setting\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n-\n-  hooks.beforeEach(function () {\n-    this.set(\"subject\", selectKit());\n-  });\n-\n-  componentTest(\"default\", {\n-    template: template(),\n-\n-    beforeEach() {\n-      this.set(\"value\", [\"bold\", \"italic\"]);\n-      this.set(\"choices\", [\"bold\", \"italic\", \"underline\"]);\n-    },\n-\n-    async test(assert) {\n-      assert.equal(this.subject.header().name(), \"bold,italic\");\n-      assert.equal(this.subject.header().value(), \"bold,italic\");\n-\n-      await this.subject.expand();\n-\n-      assert.equal(this.subject.rows().length, 1);\n-      assert.equal(this.subject.rowByIndex(0).value(), \"underline\");\n-    },\n-  });\n-});\n+discourseModule(\n+  \"Integration | Component | select-kit/list-setting\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n+\n+    hooks.beforeEach(function () {\n+      this.set(\"subject\", selectKit());\n+    });\n+\n+    componentTest(\"default\", {\n+      template: template(),\n+\n+      beforeEach() {\n+        this.set(\"value\", [\"bold\", \"italic\"]);\n+        this.set(\"choices\", [\"bold\", \"italic\", \"underline\"]);\n+      },\n+\n+      async test(assert) {\n+        assert.equal(this.subject.header().name(), \"bold,italic\");\n+        assert.equal(this.subject.header().value(), \"bold,italic\");\n+\n+        await this.subject.expand();\n+\n+        assert.equal(this.subject.rows().length, 1);\n+        assert.equal(this.subject.rowByIndex(0).value(), \"underline\");\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "38c934338dcd640f457ac3efba832772ac0e537f",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/select-kit/multi-select-test.js",
      "status": "modified",
      "additions": 35,
      "deletions": 34,
      "changes": 69,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/multi-select-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/multi-select-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/select-kit/multi-select-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -33,42 +33,43 @@ const setDefaultState = (ctx, options) => {\n   ctx.setProperties(properties);\n };\n \n-discourseModule(\"Integration | Component | select-kit/multi-select\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | select-kit/multi-select\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  hooks.beforeEach(function () {\n-    this.set(\"subject\", selectKit());\n-  });\n+    hooks.beforeEach(function () {\n+      this.set(\"subject\", selectKit());\n+    });\n \n-  componentTest(\"content\", {\n-    template: template(),\n+    componentTest(\"content\", {\n+      template: template(),\n \n-    beforeEach() {\n-      setDefaultState(this);\n-    },\n+      beforeEach() {\n+        setDefaultState(this);\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      const content = this.subject.displayedContent();\n-      assert.equal(content.length, 3, \"it shows rows\");\n-      assert.equal(\n-        content[0].name,\n-        this.content.firstObject.name,\n-        \"it has the correct name\"\n-      );\n-      assert.equal(\n-        content[0].id,\n-        this.content.firstObject.id,\n-        \"it has the correct value\"\n-      );\n-      assert.equal(\n-        this.subject.header().value(),\n-        null,\n-        \"it doesn't set a value from the content\"\n-      );\n-    },\n-  });\n-});\n+        const content = this.subject.displayedContent();\n+        assert.equal(content.length, 3, \"it shows rows\");\n+        assert.equal(\n+          content[0].name,\n+          this.content.firstObject.name,\n+          \"it has the correct name\"\n+        );\n+        assert.equal(\n+          content[0].id,\n+          this.content.firstObject.id,\n+          \"it has the correct value\"\n+        );\n+        assert.equal(\n+          this.subject.header().value(),\n+          null,\n+          \"it doesn't set a value from the content\"\n+        );\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "8deb9d73d6c1e4cad3803a3544bcc8e6ac7acdba",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/select-kit/single-select-test.js",
      "status": "modified",
      "additions": 246,
      "deletions": 242,
      "changes": 488,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/single-select-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/single-select-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/select-kit/single-select-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -44,304 +44,308 @@ const setDefaultState = (ctx, options) => {\n   ctx.setProperties(properties);\n };\n \n-discourseModule(\"Integration | Component | select-kit/single-select\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | select-kit/single-select\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  hooks.beforeEach(function () {\n-    this.set(\"subject\", selectKit());\n-  });\n+    hooks.beforeEach(function () {\n+      this.set(\"subject\", selectKit());\n+    });\n \n-  componentTest(\"content\", {\n-    template: \"{{single-select content=content}}\",\n+    componentTest(\"content\", {\n+      template: \"{{single-select content=content}}\",\n \n-    beforeEach() {\n-      setDefaultState(this);\n-    },\n+      beforeEach() {\n+        setDefaultState(this);\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n-\n-      const content = this.subject.displayedContent();\n-      assert.equal(content.length, 3, \"it shows rows\");\n-      assert.equal(\n-        content[0].name,\n-        this.content.firstObject.name,\n-        \"it has the correct name\"\n-      );\n-      assert.equal(\n-        content[0].id,\n-        this.content.firstObject.id,\n-        \"it has the correct value\"\n-      );\n-      assert.equal(\n-        this.subject.header().value(),\n-        null,\n-        \"it doesn't set a value from the content\"\n-      );\n-    },\n-  });\n+      async test(assert) {\n+        await this.subject.expand();\n+\n+        const content = this.subject.displayedContent();\n+        assert.equal(content.length, 3, \"it shows rows\");\n+        assert.equal(\n+          content[0].name,\n+          this.content.firstObject.name,\n+          \"it has the correct name\"\n+        );\n+        assert.equal(\n+          content[0].id,\n+          this.content.firstObject.id,\n+          \"it has the correct value\"\n+        );\n+        assert.equal(\n+          this.subject.header().value(),\n+          null,\n+          \"it doesn't set a value from the content\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"value\", {\n-    template: template(),\n+    componentTest(\"value\", {\n+      template: template(),\n \n-    beforeEach() {\n-      setDefaultState(this);\n-    },\n+      beforeEach() {\n+        setDefaultState(this);\n+      },\n \n-    test(assert) {\n-      assert.equal(\n-        this.subject.header().value(this.content),\n-        1,\n-        \"it selects the correct content to display\"\n-      );\n-    },\n-  });\n+      test(assert) {\n+        assert.equal(\n+          this.subject.header().value(this.content),\n+          1,\n+          \"it selects the correct content to display\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"options.filterable\", {\n-    template: template([\"filterable=filterable\"]),\n+    componentTest(\"options.filterable\", {\n+      template: template([\"filterable=filterable\"]),\n \n-    beforeEach() {\n-      setDefaultState(this, { filterable: true });\n-    },\n+      beforeEach() {\n+        setDefaultState(this, { filterable: true });\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n-      assert.ok(this.subject.filter().exists(), \"it shows the filter\");\n-\n-      const filter = this.subject.displayedContent()[1].name;\n-      await this.subject.fillInFilter(filter);\n-      assert.equal(\n-        this.subject.displayedContent()[0].name,\n-        filter,\n-        \"it filters the list\"\n-      );\n-    },\n-  });\n+      async test(assert) {\n+        await this.subject.expand();\n+        assert.ok(this.subject.filter().exists(), \"it shows the filter\");\n+\n+        const filter = this.subject.displayedContent()[1].name;\n+        await this.subject.fillInFilter(filter);\n+        assert.equal(\n+          this.subject.displayedContent()[0].name,\n+          filter,\n+          \"it filters the list\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"options.limitMatches\", {\n-    template: template([\"limitMatches=limitMatches\", \"filterable=filterable\"]),\n+    componentTest(\"options.limitMatches\", {\n+      template: template([\n+        \"limitMatches=limitMatches\",\n+        \"filterable=filterable\",\n+      ]),\n \n-    beforeEach() {\n-      setDefaultState(this, { limitMatches: 1, filterable: true });\n-    },\n+      beforeEach() {\n+        setDefaultState(this, { limitMatches: 1, filterable: true });\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n-      await this.subject.fillInFilter(\"ba\");\n+      async test(assert) {\n+        await this.subject.expand();\n+        await this.subject.fillInFilter(\"ba\");\n \n-      assert.equal(\n-        this.subject.displayedContent().length,\n-        1,\n-        \"it returns only 1 result\"\n-      );\n-    },\n-  });\n+        assert.equal(\n+          this.subject.displayedContent().length,\n+          1,\n+          \"it returns only 1 result\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"valueAttribute (deprecated)\", {\n-    template: `\n+    componentTest(\"valueAttribute (deprecated)\", {\n+      template: `\n       {{single-select\n         value=value\n         content=content\n         valueAttribute=\"value\"\n       }}\n     `,\n \n-    beforeEach() {\n-      this.set(\"value\", \"normal\");\n-\n-      const content = [\n-        { name: \"Smallest\", value: \"smallest\" },\n-        { name: \"Smaller\", value: \"smaller\" },\n-        { name: \"Normal\", value: \"normal\" },\n-        { name: \"Larger\", value: \"larger\" },\n-        { name: \"Largest\", value: \"largest\" },\n-      ];\n-      this.set(\"content\", content);\n-    },\n+      beforeEach() {\n+        this.set(\"value\", \"normal\");\n+\n+        const content = [\n+          { name: \"Smallest\", value: \"smallest\" },\n+          { name: \"Smaller\", value: \"smaller\" },\n+          { name: \"Normal\", value: \"normal\" },\n+          { name: \"Larger\", value: \"larger\" },\n+          { name: \"Largest\", value: \"largest\" },\n+        ];\n+        this.set(\"content\", content);\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      assert.equal(this.subject.selectedRow().value(), this.value);\n-    },\n-  });\n+        assert.equal(this.subject.selectedRow().value(), this.value);\n+      },\n+    });\n \n-  componentTest(\"none:string\", {\n-    template: template(['none=\"test.none\"']),\n+    componentTest(\"none:string\", {\n+      template: template(['none=\"test.none\"']),\n \n-    beforeEach() {\n-      I18n.translations[I18n.locale].js.test = { none: \"(default)\" };\n-      setDefaultState(this, { value: 1 });\n-    },\n+      beforeEach() {\n+        I18n.translations[I18n.locale].js.test = { none: \"(default)\" };\n+        setDefaultState(this, { value: 1 });\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      const noneRow = this.subject.rowByIndex(0);\n-      assert.equal(noneRow.value(), null);\n-      assert.equal(noneRow.name(), I18n.t(\"test.none\"));\n-    },\n-  });\n+        const noneRow = this.subject.rowByIndex(0);\n+        assert.equal(noneRow.value(), null);\n+        assert.equal(noneRow.name(), I18n.t(\"test.none\"));\n+      },\n+    });\n \n-  componentTest(\"none:object\", {\n-    template: template([\"none=none\"]),\n+    componentTest(\"none:object\", {\n+      template: template([\"none=none\"]),\n \n-    beforeEach() {\n-      setDefaultState(this, { none: { value: null, name: \"(default)\" } });\n-    },\n+      beforeEach() {\n+        setDefaultState(this, { none: { value: null, name: \"(default)\" } });\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      const noneRow = this.subject.rowByIndex(0);\n-      assert.equal(noneRow.value(), null);\n-      assert.equal(noneRow.name(), \"(default)\");\n-    },\n-  });\n-\n-  componentTest(\"content is a basic array\", {\n-    template: template(['none=\"test.none\"']),\n-\n-    beforeEach() {\n-      I18n.translations[I18n.locale].js.test = { none: \"(default)\" };\n-      setDefaultState(this, {\n-        nameProperty: null,\n-        valueProperty: null,\n-        value: \"foo\",\n-        content: [\"foo\", \"bar\", \"baz\"],\n-      });\n-    },\n+        const noneRow = this.subject.rowByIndex(0);\n+        assert.equal(noneRow.value(), null);\n+        assert.equal(noneRow.name(), \"(default)\");\n+      },\n+    });\n+\n+    componentTest(\"content is a basic array\", {\n+      template: template(['none=\"test.none\"']),\n+\n+      beforeEach() {\n+        I18n.translations[I18n.locale].js.test = { none: \"(default)\" };\n+        setDefaultState(this, {\n+          nameProperty: null,\n+          valueProperty: null,\n+          value: \"foo\",\n+          content: [\"foo\", \"bar\", \"baz\"],\n+        });\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      const noneRow = this.subject.rowByIndex(0);\n-      assert.equal(noneRow.value(), I18n.t(\"test.none\"));\n-      assert.equal(noneRow.name(), I18n.t(\"test.none\"));\n-      assert.equal(this.value, \"foo\");\n+        const noneRow = this.subject.rowByIndex(0);\n+        assert.equal(noneRow.value(), I18n.t(\"test.none\"));\n+        assert.equal(noneRow.name(), I18n.t(\"test.none\"));\n+        assert.equal(this.value, \"foo\");\n \n-      await this.subject.selectRowByIndex(0);\n+        await this.subject.selectRowByIndex(0);\n \n-      assert.equal(this.value, null);\n-    },\n-  });\n-\n-  componentTest(\"selected value can be 0\", {\n-    template: template(),\n-\n-    beforeEach() {\n-      setDefaultState(this, {\n-        value: 1,\n-        content: [\n-          { id: 0, name: \"foo\" },\n-          { id: 1, name: \"bar\" },\n-        ],\n-      });\n-    },\n+        assert.equal(this.value, null);\n+      },\n+    });\n+\n+    componentTest(\"selected value can be 0\", {\n+      template: template(),\n+\n+      beforeEach() {\n+        setDefaultState(this, {\n+          value: 1,\n+          content: [\n+            { id: 0, name: \"foo\" },\n+            { id: 1, name: \"bar\" },\n+          ],\n+        });\n+      },\n \n-    async test(assert) {\n-      assert.equal(this.subject.header().value(), 1);\n+      async test(assert) {\n+        assert.equal(this.subject.header().value(), 1);\n \n-      await this.subject.expand();\n-      await this.subject.selectRowByValue(0);\n+        await this.subject.expand();\n+        await this.subject.selectRowByValue(0);\n \n-      assert.equal(this.subject.header().value(), 0);\n-    },\n-  });\n-\n-  componentTest(\"prevents propagating click event on header\", {\n-    template:\n-      \"{{#d-button icon='times' action=onClick}}{{single-select options=(hash preventsClickPropagation=true) value=value content=content}}{{/d-button}}\",\n-\n-    beforeEach() {\n-      this.setProperties({\n-        onClick: () => this.set(\"value\", \"foo\"),\n-        content: DEFAULT_CONTENT,\n-        value: DEFAULT_VALUE,\n-      });\n-    },\n+        assert.equal(this.subject.header().value(), 0);\n+      },\n+    });\n+\n+    componentTest(\"prevents propagating click event on header\", {\n+      template:\n+        \"{{#d-button icon='times' action=onClick}}{{single-select options=(hash preventsClickPropagation=true) value=value content=content}}{{/d-button}}\",\n+\n+      beforeEach() {\n+        this.setProperties({\n+          onClick: () => this.set(\"value\", \"foo\"),\n+          content: DEFAULT_CONTENT,\n+          value: DEFAULT_VALUE,\n+        });\n+      },\n \n-    async test(assert) {\n-      assert.equal(this.value, DEFAULT_VALUE);\n-      await this.subject.expand();\n-      assert.equal(this.value, DEFAULT_VALUE);\n-    },\n-  });\n+      async test(assert) {\n+        assert.equal(this.value, DEFAULT_VALUE);\n+        await this.subject.expand();\n+        assert.equal(this.value, DEFAULT_VALUE);\n+      },\n+    });\n \n-  componentTest(\"labelProperty\", {\n-    template:\n-      '{{single-select labelProperty=\"foo\" value=value content=content}}',\n+    componentTest(\"labelProperty\", {\n+      template:\n+        '{{single-select labelProperty=\"foo\" value=value content=content}}',\n \n-    beforeEach() {\n-      this.setProperties({\n-        content: [{ id: 1, name: \"john\", foo: \"JACKSON\" }],\n-        value: 1,\n-      });\n-    },\n+      beforeEach() {\n+        this.setProperties({\n+          content: [{ id: 1, name: \"john\", foo: \"JACKSON\" }],\n+          value: 1,\n+        });\n+      },\n \n-    async test(assert) {\n-      assert.equal(this.subject.header().label(), \"JACKSON\");\n+      async test(assert) {\n+        assert.equal(this.subject.header().label(), \"JACKSON\");\n \n-      await this.subject.expand();\n+        await this.subject.expand();\n \n-      const row = this.subject.rowByValue(1);\n+        const row = this.subject.rowByValue(1);\n \n-      assert.equal(row.label(), \"JACKSON\");\n-    },\n-  });\n+        assert.equal(row.label(), \"JACKSON\");\n+      },\n+    });\n \n-  componentTest(\"titleProperty\", {\n-    template:\n-      '{{single-select titleProperty=\"foo\" value=value content=content}}',\n+    componentTest(\"titleProperty\", {\n+      template:\n+        '{{single-select titleProperty=\"foo\" value=value content=content}}',\n \n-    beforeEach() {\n-      this.setProperties({\n-        content: [{ id: 1, name: \"john\", foo: \"JACKSON\" }],\n-        value: 1,\n-      });\n-    },\n+      beforeEach() {\n+        this.setProperties({\n+          content: [{ id: 1, name: \"john\", foo: \"JACKSON\" }],\n+          value: 1,\n+        });\n+      },\n \n-    async test(assert) {\n-      assert.equal(this.subject.header().title(), \"JACKSON\");\n+      async test(assert) {\n+        assert.equal(this.subject.header().title(), \"JACKSON\");\n \n-      await this.subject.expand();\n+        await this.subject.expand();\n \n-      const row = this.subject.rowByValue(1);\n+        const row = this.subject.rowByValue(1);\n \n-      assert.equal(row.title(), \"JACKSON\");\n-    },\n-  });\n+        assert.equal(row.title(), \"JACKSON\");\n+      },\n+    });\n \n-  componentTest(\"langProperty\", {\n-    template:\n-      '{{single-select langProperty=\"foo\" value=value content=content}}',\n+    componentTest(\"langProperty\", {\n+      template:\n+        '{{single-select langProperty=\"foo\" value=value content=content}}',\n \n-    beforeEach() {\n-      this.setProperties({\n-        content: [{ id: 1, name: \"john\", foo: \"be\" }],\n-        value: null,\n-      });\n-    },\n+      beforeEach() {\n+        this.setProperties({\n+          content: [{ id: 1, name: \"john\", foo: \"be\" }],\n+          value: null,\n+        });\n+      },\n \n-    async test(assert) {\n-      assert.equal(\n-        this.subject.header().el()[0].querySelector(\".selected-name\").lang,\n-        \"\"\n-      );\n+      async test(assert) {\n+        assert.equal(\n+          this.subject.header().el()[0].querySelector(\".selected-name\").lang,\n+          \"\"\n+        );\n \n-      await this.subject.expand();\n+        await this.subject.expand();\n \n-      const row = this.subject.rowByValue(1);\n-      assert.equal(row.el()[0].lang, \"be\");\n+        const row = this.subject.rowByValue(1);\n+        assert.equal(row.el()[0].lang, \"be\");\n \n-      await this.subject.selectRowByValue(1);\n+        await this.subject.selectRowByValue(1);\n \n-      assert.equal(\n-        this.subject.header().el()[0].querySelector(\".selected-name\").lang,\n-        \"be\"\n-      );\n-    },\n-  });\n-});\n+        assert.equal(\n+          this.subject.header().el()[0].querySelector(\".selected-name\").lang,\n+          \"be\"\n+        );\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "5b6ca63707d92d1472765b3e2750ec1ecbdd41c3",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/select-kit/tag-drop-test.js",
      "status": "modified",
      "additions": 50,
      "deletions": 49,
      "changes": 99,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/tag-drop-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/tag-drop-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/select-kit/tag-drop-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -36,63 +36,64 @@ function template(options = []) {\n   `;\n }\n \n-discourseModule(\"Integration | Component | select-kit/tag-drop\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | select-kit/tag-drop\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  hooks.beforeEach(function () {\n-    this.set(\"subject\", selectKit());\n+    hooks.beforeEach(function () {\n+      this.set(\"subject\", selectKit());\n \n-    const site = Site.current();\n-    set(site, \"top_tags\", [\"jeff\", \"neil\", \"arpit\", \"régis\"]);\n+      const site = Site.current();\n+      set(site, \"top_tags\", [\"jeff\", \"neil\", \"arpit\", \"régis\"]);\n \n-    const response = (object) => {\n-      return [200, { \"Content-Type\": \"application/json\" }, object];\n-    };\n+      const response = (object) => {\n+        return [200, { \"Content-Type\": \"application/json\" }, object];\n+      };\n \n-    pretender.get(\"/tags/filter/search\", (params) => {\n-      if (params.queryParams.q === \"rég\") {\n-        return response({\n-          results: [{ id: \"régis\", text: \"régis\", count: 2, pm_count: 0 }],\n-        });\n-      } else if (params.queryParams.q === \"dav\") {\n-        return response({\n-          results: [{ id: \"David\", text: \"David\", count: 2, pm_count: 0 }],\n-        });\n-      }\n+      pretender.get(\"/tags/filter/search\", (params) => {\n+        if (params.queryParams.q === \"rég\") {\n+          return response({\n+            results: [{ id: \"régis\", text: \"régis\", count: 2, pm_count: 0 }],\n+          });\n+        } else if (params.queryParams.q === \"dav\") {\n+          return response({\n+            results: [{ id: \"David\", text: \"David\", count: 2, pm_count: 0 }],\n+          });\n+        }\n+      });\n     });\n-  });\n \n-  componentTest(\"default\", {\n-    template: template([\"tagId=tagId\"]),\n+    componentTest(\"default\", {\n+      template: template([\"tagId=tagId\"]),\n \n-    beforeEach() {\n-      initTags(this);\n-    },\n+      beforeEach() {\n+        initTags(this);\n+      },\n \n-    async test(assert) {\n-      await this.subject.expand();\n+      async test(assert) {\n+        await this.subject.expand();\n \n-      assert.ok(true);\n-      // const row = this.subject.rowByValue(this.category.id);\n-      // assert.ok(\n-      //   exists(row.el().find(\".category-desc\")),\n-      //   \"it shows category description for newcomers\"\n-      // );\n+        assert.ok(true);\n+        // const row = this.subject.rowByValue(this.category.id);\n+        // assert.ok(\n+        //   exists(row.el().find(\".category-desc\")),\n+        //   \"it shows category description for newcomers\"\n+        // );\n \n-      const content = this.subject.displayedContent();\n+        const content = this.subject.displayedContent();\n \n-      assert.equal(\n-        content[0].name,\n-        I18n.t(\"tagging.selector_no_tags\"),\n-        \"it has the translated label for no-tags\"\n-      );\n-      assert.equal(\n-        content[1].name,\n-        I18n.t(\"tagging.selector_all_tags\"),\n-        \"it has the correct label for all-tags\"\n-      );\n-    },\n-  });\n-});\n+        assert.equal(\n+          content[0].name,\n+          I18n.t(\"tagging.selector_no_tags\"),\n+          \"it has the translated label for no-tags\"\n+        );\n+        assert.equal(\n+          content[1].name,\n+          I18n.t(\"tagging.selector_all_tags\"),\n+          \"it has the correct label for all-tags\"\n+        );\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "7066ee74f168d2edab310e209b002078fa21c867",
      "filename": "app/assets/javascripts/discourse/tests/integration/components/select-kit/user-chooser-test.js",
      "status": "modified",
      "additions": 35,
      "deletions": 34,
      "changes": 69,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/user-chooser-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/components/select-kit/user-chooser-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/components/select-kit/user-chooser-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -4,37 +4,38 @@ import componentTest, {\n import { discourseModule } from \"discourse/tests/helpers/qunit-helpers\";\n import selectKit from \"discourse/tests/helpers/select-kit-helper\";\n \n-discourseModule(\"Integration | Component | select-kit/user-chooser\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n-\n-  hooks.beforeEach(function () {\n-    this.set(\"subject\", selectKit());\n-  });\n-\n-  componentTest(\"displays usernames\", {\n-    template: `{{user-chooser value=value}}`,\n-\n-    beforeEach() {\n-      this.set(\"value\", [\"bob\", \"martin\"]);\n-    },\n-\n-    async test(assert) {\n-      assert.equal(this.subject.header().name(), \"bob,martin\");\n-    },\n-  });\n-\n-  componentTest(\"can remove a username\", {\n-    template: `{{user-chooser value=value}}`,\n-\n-    beforeEach() {\n-      this.set(\"value\", [\"bob\", \"martin\"]);\n-    },\n-\n-    async test(assert) {\n-      await this.subject.deselectItem(\"bob\");\n-      assert.equal(this.subject.header().name(), \"martin\");\n-    },\n-  });\n-});\n+discourseModule(\n+  \"Integration | Component | select-kit/user-chooser\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n+\n+    hooks.beforeEach(function () {\n+      this.set(\"subject\", selectKit());\n+    });\n+\n+    componentTest(\"displays usernames\", {\n+      template: `{{user-chooser value=value}}`,\n+\n+      beforeEach() {\n+        this.set(\"value\", [\"bob\", \"martin\"]);\n+      },\n+\n+      async test(assert) {\n+        assert.equal(this.subject.header().name(), \"bob,martin\");\n+      },\n+    });\n+\n+    componentTest(\"can remove a username\", {\n+      template: `{{user-chooser value=value}}`,\n+\n+      beforeEach() {\n+        this.set(\"value\", [\"bob\", \"martin\"]);\n+      },\n+\n+      async test(assert) {\n+        await this.subject.deselectItem(\"bob\");\n+        assert.equal(this.subject.header().name(), \"martin\");\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "9afee06d238a564a11a16ffc24c987ce754187e7",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/actions-summary-test.js",
      "status": "modified",
      "additions": 26,
      "deletions": 25,
      "changes": 51,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/actions-summary-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/actions-summary-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/actions-summary-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -6,29 +6,30 @@ import {\n   queryAll,\n } from \"discourse/tests/helpers/qunit-helpers\";\n \n-discourseModule(\"Integration | Component | Widget | actions-summary\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | Widget | actions-summary\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  componentTest(\"post deleted\", {\n-    template: '{{mount-widget widget=\"actions-summary\" args=args}}',\n-    beforeEach() {\n-      this.set(\"args\", {\n-        deleted_at: \"2016-01-01\",\n-        deletedByUsername: \"eviltrout\",\n-        deletedByAvatarTemplate: \"/images/avatar.png\",\n-      });\n-    },\n-    test(assert) {\n-      assert.ok(\n-        queryAll(\".post-action .d-icon-far-trash-alt\").length === 1,\n-        \"it has the deleted icon\"\n-      );\n-      assert.ok(\n-        queryAll(\".avatar[title=eviltrout]\").length === 1,\n-        \"it has the deleted by avatar\"\n-      );\n-    },\n-  });\n-});\n+    componentTest(\"post deleted\", {\n+      template: '{{mount-widget widget=\"actions-summary\" args=args}}',\n+      beforeEach() {\n+        this.set(\"args\", {\n+          deleted_at: \"2016-01-01\",\n+          deletedByUsername: \"eviltrout\",\n+          deletedByAvatarTemplate: \"/images/avatar.png\",\n+        });\n+      },\n+      test(assert) {\n+        assert.ok(\n+          queryAll(\".post-action .d-icon-far-trash-alt\").length === 1,\n+          \"it has the deleted icon\"\n+        );\n+        assert.ok(\n+          queryAll(\".avatar[title=eviltrout]\").length === 1,\n+          \"it has the deleted by avatar\"\n+        );\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "3267c811134c4910701e38f707a5ea16bf3e3676",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/avatar-flair-test.js",
      "status": "modified",
      "additions": 37,
      "deletions": 36,
      "changes": 73,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/avatar-flair-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/avatar-flair-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/avatar-flair-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -6,41 +6,42 @@ import {\n   queryAll,\n } from \"discourse/tests/helpers/qunit-helpers\";\n \n-discourseModule(\"Integration | Component | Widget | avatar-flair\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | Widget | avatar-flair\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  componentTest(\"avatar flair with an icon\", {\n-    template: '{{mount-widget widget=\"avatar-flair\" args=args}}',\n-    beforeEach() {\n-      this.set(\"args\", {\n-        primary_group_flair_url: \"fa-bars\",\n-        primary_group_flair_bg_color: \"CC0000\",\n-        primary_group_flair_color: \"FFFFFF\",\n-      });\n-    },\n-    test(assert) {\n-      assert.ok(queryAll(\".avatar-flair\").length, \"it has the tag\");\n-      assert.ok(queryAll(\"svg.d-icon-bars\").length, \"it has the svg icon\");\n-      assert.equal(\n-        queryAll(\".avatar-flair\").attr(\"style\"),\n-        \"background-color: #CC0000; color: #FFFFFF; \",\n-        \"it has styles\"\n-      );\n-    },\n-  });\n+    componentTest(\"avatar flair with an icon\", {\n+      template: '{{mount-widget widget=\"avatar-flair\" args=args}}',\n+      beforeEach() {\n+        this.set(\"args\", {\n+          primary_group_flair_url: \"fa-bars\",\n+          primary_group_flair_bg_color: \"CC0000\",\n+          primary_group_flair_color: \"FFFFFF\",\n+        });\n+      },\n+      test(assert) {\n+        assert.ok(queryAll(\".avatar-flair\").length, \"it has the tag\");\n+        assert.ok(queryAll(\"svg.d-icon-bars\").length, \"it has the svg icon\");\n+        assert.equal(\n+          queryAll(\".avatar-flair\").attr(\"style\"),\n+          \"background-color: #CC0000; color: #FFFFFF; \",\n+          \"it has styles\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"avatar flair with an image\", {\n-    template: '{{mount-widget widget=\"avatar-flair\" args=args}}',\n-    beforeEach() {\n-      this.set(\"args\", {\n-        primary_group_flair_url: \"/images/avatar.png\",\n-      });\n-    },\n-    test(assert) {\n-      assert.ok(queryAll(\".avatar-flair\").length, \"it has the tag\");\n-      assert.ok(queryAll(\"svg\").length === 0, \"it does not have an svg icon\");\n-    },\n-  });\n-});\n+    componentTest(\"avatar flair with an image\", {\n+      template: '{{mount-widget widget=\"avatar-flair\" args=args}}',\n+      beforeEach() {\n+        this.set(\"args\", {\n+          primary_group_flair_url: \"/images/avatar.png\",\n+        });\n+      },\n+      test(assert) {\n+        assert.ok(queryAll(\".avatar-flair\").length, \"it has the tag\");\n+        assert.ok(queryAll(\"svg\").length === 0, \"it does not have an svg icon\");\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "8eb98821e8008e43ae58534ee2a19f0bcb977b64",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/hamburger-menu-test.js",
      "status": "modified",
      "additions": 251,
      "deletions": 247,
      "changes": 498,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/hamburger-menu-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/hamburger-menu-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/hamburger-menu-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -12,252 +12,256 @@ let mutedCategoryIds = [];\n let unreadCategoryIds = [];\n let categoriesByCount = [];\n \n-discourseModule(\"Integration | Component | Widget | hamburger-menu\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n-\n-  componentTest(\"prioritize faq\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    beforeEach() {\n-      this.siteSettings.faq_url = \"http://example.com/faq\";\n-      this.currentUser.set(\"read_faq\", false);\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\".faq-priority\").length);\n-      assert.ok(!queryAll(\".faq-link\").length);\n-    },\n-  });\n-\n-  componentTest(\"prioritize faq - user has read\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    beforeEach() {\n-      this.siteSettings.faq_url = \"http://example.com/faq\";\n-      this.currentUser.set(\"read_faq\", true);\n-    },\n-\n-    test(assert) {\n-      assert.ok(!queryAll(\".faq-priority\").length);\n-      assert.ok(queryAll(\".faq-link\").length);\n-    },\n-  });\n-\n-  componentTest(\"staff menu - not staff\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    beforeEach() {\n-      this.currentUser.set(\"staff\", false);\n-    },\n-\n-    test(assert) {\n-      assert.ok(!queryAll(\".admin-link\").length);\n-    },\n-  });\n-\n-  componentTest(\"staff menu - moderator\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    beforeEach() {\n-      this.currentUser.set(\"moderator\", true);\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\".admin-link\").length);\n-      assert.ok(queryAll(\".review\").length);\n-      assert.ok(!queryAll(\".settings-link\").length);\n-    },\n-  });\n-\n-  componentTest(\"staff menu - admin\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    beforeEach() {\n-      this.currentUser.setProperties({ admin: true });\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\".settings-link\").length);\n-    },\n-  });\n-\n-  componentTest(\"logged in links\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    test(assert) {\n-      assert.ok(queryAll(\".new-topics-link\").length);\n-      assert.ok(queryAll(\".unread-topics-link\").length);\n-    },\n-  });\n-\n-  componentTest(\"general links\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-    anonymous: true,\n-\n-    test(assert) {\n-      assert.ok(queryAll(\"li[class='']\").length === 0);\n-      assert.ok(queryAll(\".latest-topics-link\").length);\n-      assert.ok(!queryAll(\".new-topics-link\").length);\n-      assert.ok(!queryAll(\".unread-topics-link\").length);\n-      assert.ok(queryAll(\".top-topics-link\").length);\n-      assert.ok(queryAll(\".badge-link\").length);\n-      assert.ok(queryAll(\".category-link\").length > 0);\n-    },\n-  });\n-\n-  let maxCategoriesToDisplay;\n-\n-  componentTest(\"top categories - anonymous\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-    anonymous: true,\n-\n-    beforeEach() {\n-      this.siteSettings.header_dropdown_category_count = 8;\n-    },\n-\n-    test(assert) {\n-      assert.equal(queryAll(\".category-link\").length, 8);\n-      assert.equal(\n-        queryAll(\".category-link .category-name\").text(),\n-        this.site\n-          .get(\"categoriesByCount\")\n-          .slice(0, 8)\n-          .map((c) => c.name)\n-          .join(\"\")\n-      );\n-    },\n-  });\n-\n-  componentTest(\"top categories - allow_uncategorized_topics\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-    anonymous: true,\n-\n-    beforeEach() {\n-      this.siteSettings.allow_uncategorized_topics = false;\n-      this.siteSettings.header_dropdown_category_count = 8;\n-    },\n-\n-    test(assert) {\n-      assert.equal(queryAll(\".category-link\").length, 8);\n-      assert.equal(\n-        queryAll(\".category-link .category-name\").text(),\n-        this.site\n-          .get(\"categoriesByCount\")\n-          .filter((c) => c.name !== \"uncategorized\")\n-          .slice(0, 8)\n-          .map((c) => c.name)\n-          .join(\"\")\n-      );\n-    },\n-  });\n-\n-  componentTest(\"top categories\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    beforeEach() {\n-      this.siteSettings.header_dropdown_category_count = 8;\n-      maxCategoriesToDisplay = this.siteSettings.header_dropdown_category_count;\n-      categoriesByCount = this.site.get(\"categoriesByCount\").slice();\n-      categoriesByCount.every((c) => {\n-        if (!topCategoryIds.includes(c.id)) {\n-          if (mutedCategoryIds.length === 0) {\n-            mutedCategoryIds.push(c.id);\n-            c.set(\"notification_level\", NotificationLevels.MUTED);\n-          } else if (unreadCategoryIds.length === 0) {\n-            unreadCategoryIds.push(c.id);\n-            for (let i = 0; i < 5; i++) {\n-              c.topicTrackingState.states[\"t123\" + i] = {\n-                category_id: c.id,\n-                last_read_post_number: 1,\n-                highest_post_number: 2,\n-                notification_level: NotificationLevels.TRACKING,\n-              };\n+discourseModule(\n+  \"Integration | Component | Widget | hamburger-menu\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n+\n+    componentTest(\"prioritize faq\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      beforeEach() {\n+        this.siteSettings.faq_url = \"http://example.com/faq\";\n+        this.currentUser.set(\"read_faq\", false);\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\".faq-priority\").length);\n+        assert.ok(!queryAll(\".faq-link\").length);\n+      },\n+    });\n+\n+    componentTest(\"prioritize faq - user has read\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      beforeEach() {\n+        this.siteSettings.faq_url = \"http://example.com/faq\";\n+        this.currentUser.set(\"read_faq\", true);\n+      },\n+\n+      test(assert) {\n+        assert.ok(!queryAll(\".faq-priority\").length);\n+        assert.ok(queryAll(\".faq-link\").length);\n+      },\n+    });\n+\n+    componentTest(\"staff menu - not staff\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      beforeEach() {\n+        this.currentUser.set(\"staff\", false);\n+      },\n+\n+      test(assert) {\n+        assert.ok(!queryAll(\".admin-link\").length);\n+      },\n+    });\n+\n+    componentTest(\"staff menu - moderator\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      beforeEach() {\n+        this.currentUser.set(\"moderator\", true);\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\".admin-link\").length);\n+        assert.ok(queryAll(\".review\").length);\n+        assert.ok(!queryAll(\".settings-link\").length);\n+      },\n+    });\n+\n+    componentTest(\"staff menu - admin\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      beforeEach() {\n+        this.currentUser.setProperties({ admin: true });\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\".settings-link\").length);\n+      },\n+    });\n+\n+    componentTest(\"logged in links\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      test(assert) {\n+        assert.ok(queryAll(\".new-topics-link\").length);\n+        assert.ok(queryAll(\".unread-topics-link\").length);\n+      },\n+    });\n+\n+    componentTest(\"general links\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+      anonymous: true,\n+\n+      test(assert) {\n+        assert.ok(queryAll(\"li[class='']\").length === 0);\n+        assert.ok(queryAll(\".latest-topics-link\").length);\n+        assert.ok(!queryAll(\".new-topics-link\").length);\n+        assert.ok(!queryAll(\".unread-topics-link\").length);\n+        assert.ok(queryAll(\".top-topics-link\").length);\n+        assert.ok(queryAll(\".badge-link\").length);\n+        assert.ok(queryAll(\".category-link\").length > 0);\n+      },\n+    });\n+\n+    let maxCategoriesToDisplay;\n+\n+    componentTest(\"top categories - anonymous\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+      anonymous: true,\n+\n+      beforeEach() {\n+        this.siteSettings.header_dropdown_category_count = 8;\n+      },\n+\n+      test(assert) {\n+        assert.equal(queryAll(\".category-link\").length, 8);\n+        assert.equal(\n+          queryAll(\".category-link .category-name\").text(),\n+          this.site\n+            .get(\"categoriesByCount\")\n+            .slice(0, 8)\n+            .map((c) => c.name)\n+            .join(\"\")\n+        );\n+      },\n+    });\n+\n+    componentTest(\"top categories - allow_uncategorized_topics\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+      anonymous: true,\n+\n+      beforeEach() {\n+        this.siteSettings.allow_uncategorized_topics = false;\n+        this.siteSettings.header_dropdown_category_count = 8;\n+      },\n+\n+      test(assert) {\n+        assert.equal(queryAll(\".category-link\").length, 8);\n+        assert.equal(\n+          queryAll(\".category-link .category-name\").text(),\n+          this.site\n+            .get(\"categoriesByCount\")\n+            .filter((c) => c.name !== \"uncategorized\")\n+            .slice(0, 8)\n+            .map((c) => c.name)\n+            .join(\"\")\n+        );\n+      },\n+    });\n+\n+    componentTest(\"top categories\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      beforeEach() {\n+        this.siteSettings.header_dropdown_category_count = 8;\n+        maxCategoriesToDisplay = this.siteSettings\n+          .header_dropdown_category_count;\n+        categoriesByCount = this.site.get(\"categoriesByCount\").slice();\n+        categoriesByCount.every((c) => {\n+          if (!topCategoryIds.includes(c.id)) {\n+            if (mutedCategoryIds.length === 0) {\n+              mutedCategoryIds.push(c.id);\n+              c.set(\"notification_level\", NotificationLevels.MUTED);\n+            } else if (unreadCategoryIds.length === 0) {\n+              unreadCategoryIds.push(c.id);\n+              for (let i = 0; i < 5; i++) {\n+                c.topicTrackingState.states[\"t123\" + i] = {\n+                  category_id: c.id,\n+                  last_read_post_number: 1,\n+                  highest_post_number: 2,\n+                  notification_level: NotificationLevels.TRACKING,\n+                };\n+              }\n+            } else {\n+              unreadCategoryIds.splice(0, 0, c.id);\n+              for (let i = 0; i < 10; i++) {\n+                c.topicTrackingState.states[\"t321\" + i] = {\n+                  category_id: c.id,\n+                  last_read_post_number: null,\n+                };\n+              }\n+              return false;\n             }\n-          } else {\n-            unreadCategoryIds.splice(0, 0, c.id);\n-            for (let i = 0; i < 10; i++) {\n-              c.topicTrackingState.states[\"t321\" + i] = {\n-                category_id: c.id,\n-                last_read_post_number: null,\n-              };\n-            }\n-            return false;\n           }\n-        }\n-        return true;\n-      });\n-      this.currentUser.set(\"top_category_ids\", topCategoryIds);\n-    },\n-\n-    test(assert) {\n-      assert.equal(queryAll(\".category-link\").length, maxCategoriesToDisplay);\n-\n-      categoriesByCount = categoriesByCount.filter(\n-        (c) => !mutedCategoryIds.includes(c.id)\n-      );\n-      let ids = [\n-        ...unreadCategoryIds,\n-        ...topCategoryIds,\n-        ...categoriesByCount.map((c) => c.id),\n-      ]\n-        .uniq()\n-        .slice(0, maxCategoriesToDisplay);\n-\n-      assert.equal(\n-        queryAll(\".category-link .category-name\").text(),\n-        ids.map((i) => categoriesByCount.find((c) => c.id === i).name).join(\"\")\n-      );\n-    },\n-  });\n-\n-  componentTest(\"badges link - disabled\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    beforeEach() {\n-      this.siteSettings.enable_badges = false;\n-    },\n-\n-    test(assert) {\n-      assert.ok(!queryAll(\".badge-link\").length);\n-    },\n-  });\n-\n-  componentTest(\"badges link\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    test(assert) {\n-      assert.ok(queryAll(\".badge-link\").length);\n-    },\n-  });\n-\n-  componentTest(\"user directory link\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    test(assert) {\n-      assert.ok(queryAll(\".user-directory-link\").length);\n-    },\n-  });\n-\n-  componentTest(\"user directory link - disabled\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    beforeEach() {\n-      this.siteSettings.enable_user_directory = false;\n-    },\n-\n-    test(assert) {\n-      assert.ok(!queryAll(\".user-directory-link\").length);\n-    },\n-  });\n-\n-  componentTest(\"general links\", {\n-    template: '{{mount-widget widget=\"hamburger-menu\"}}',\n-\n-    test(assert) {\n-      assert.ok(queryAll(\".about-link\").length);\n-      assert.ok(queryAll(\".keyboard-shortcuts-link\").length);\n-    },\n-  });\n-});\n+          return true;\n+        });\n+        this.currentUser.set(\"top_category_ids\", topCategoryIds);\n+      },\n+\n+      test(assert) {\n+        assert.equal(queryAll(\".category-link\").length, maxCategoriesToDisplay);\n+\n+        categoriesByCount = categoriesByCount.filter(\n+          (c) => !mutedCategoryIds.includes(c.id)\n+        );\n+        let ids = [\n+          ...unreadCategoryIds,\n+          ...topCategoryIds,\n+          ...categoriesByCount.map((c) => c.id),\n+        ]\n+          .uniq()\n+          .slice(0, maxCategoriesToDisplay);\n+\n+        assert.equal(\n+          queryAll(\".category-link .category-name\").text(),\n+          ids\n+            .map((i) => categoriesByCount.find((c) => c.id === i).name)\n+            .join(\"\")\n+        );\n+      },\n+    });\n+\n+    componentTest(\"badges link - disabled\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      beforeEach() {\n+        this.siteSettings.enable_badges = false;\n+      },\n+\n+      test(assert) {\n+        assert.ok(!queryAll(\".badge-link\").length);\n+      },\n+    });\n+\n+    componentTest(\"badges link\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      test(assert) {\n+        assert.ok(queryAll(\".badge-link\").length);\n+      },\n+    });\n+\n+    componentTest(\"user directory link\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      test(assert) {\n+        assert.ok(queryAll(\".user-directory-link\").length);\n+      },\n+    });\n+\n+    componentTest(\"user directory link - disabled\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      beforeEach() {\n+        this.siteSettings.enable_user_directory = false;\n+      },\n+\n+      test(assert) {\n+        assert.ok(!queryAll(\".user-directory-link\").length);\n+      },\n+    });\n+\n+    componentTest(\"general links\", {\n+      template: '{{mount-widget widget=\"hamburger-menu\"}}',\n+\n+      test(assert) {\n+        assert.ok(queryAll(\".about-link\").length);\n+        assert.ok(queryAll(\".keyboard-shortcuts-link\").length);\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "c9d2932549db56ff1cef4c32ddc0a4d6a1a44a71",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/home-logo-test.js",
      "status": "modified",
      "additions": 238,
      "deletions": 237,
      "changes": 475,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/home-logo-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/home-logo-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/home-logo-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -14,240 +14,241 @@ const darkLogo = \"/images/d-logo-sketch.png?dark\";\n const title = \"Cool Forum\";\n const prefersDark = \"(prefers-color-scheme: dark)\";\n \n-discourseModule(\"Integration | Component | Widget | home-logo\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n-\n-  componentTest(\"basics\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    skip: true,\n-    beforeEach() {\n-      this.siteSettings.site_logo_url = bigLogo;\n-      this.siteSettings.site_logo_small_url = smallLogo;\n-      this.siteSettings.title = title;\n-      this.set(\"args\", { minimized: false });\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\".title\").length === 1);\n-\n-      assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n-      assert.equal(queryAll(\"#site-logo\").attr(\"src\"), bigLogo);\n-      assert.equal(queryAll(\"#site-logo\").attr(\"alt\"), title);\n-    },\n-  });\n-\n-  componentTest(\"basics - minimized\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.site_logo_url = bigLogo;\n-      this.siteSettings.site_logo_small_url = smallLogo;\n-      this.siteSettings.title = title;\n-      this.set(\"args\", { minimized: true });\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\"img.logo-small\").length === 1);\n-      assert.equal(queryAll(\"img.logo-small\").attr(\"src\"), smallLogo);\n-      assert.equal(queryAll(\"img.logo-small\").attr(\"alt\"), title);\n-      assert.equal(queryAll(\"img.logo-small\").attr(\"width\"), 36);\n-    },\n-  });\n-\n-  componentTest(\"no logo\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.site_logo_url = \"\";\n-      this.siteSettings.site_logo_small_url = \"\";\n-      this.siteSettings.title = title;\n-      this.set(\"args\", { minimized: false });\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\"h1#site-text-logo.text-logo\").length === 1);\n-      assert.equal(queryAll(\"#site-text-logo\").text(), title);\n-    },\n-  });\n-\n-  componentTest(\"no logo - minimized\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.site_logo_url = \"\";\n-      this.siteSettings.site_logo_small_url = \"\";\n-      this.siteSettings.title = title;\n-      this.set(\"args\", { minimized: true });\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\".d-icon-home\").length === 1);\n-    },\n-  });\n-\n-  componentTest(\"mobile logo\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.site_mobile_logo_url = mobileLogo;\n-      this.siteSettings.site_logo_small_url = smallLogo;\n-      this.site.mobileView = true;\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\"img#site-logo.logo-mobile\").length === 1);\n-      assert.equal(queryAll(\"#site-logo\").attr(\"src\"), mobileLogo);\n-    },\n-  });\n-\n-  componentTest(\"mobile without logo\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.site_logo_url = bigLogo;\n-      this.site.mobileView = true;\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n-      assert.equal(queryAll(\"#site-logo\").attr(\"src\"), bigLogo);\n-    },\n-  });\n-\n-  componentTest(\"logo with dark mode alternative\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.site_logo_url = bigLogo;\n-      this.siteSettings.site_logo_dark_url = darkLogo;\n-      Session.currentProp(\"darkModeAvailable\", true);\n-    },\n-    afterEach() {\n-      Session.currentProp(\"darkModeAvailable\", null);\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n-      assert.equal(queryAll(\"#site-logo\").attr(\"src\"), bigLogo);\n-\n-      assert.equal(\n-        queryAll(\"picture source\").attr(\"media\"),\n-        prefersDark,\n-        \"includes dark mode media attribute\"\n-      );\n-      assert.equal(\n-        queryAll(\"picture source\").attr(\"srcset\"),\n-        darkLogo,\n-        \"includes dark mode alternative logo source\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"mobile logo with dark mode alternative\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.site_logo_url = bigLogo;\n-      this.siteSettings.site_mobile_logo_url = mobileLogo;\n-      this.siteSettings.site_mobile_logo_dark_url = darkLogo;\n-      Session.currentProp(\"darkModeAvailable\", true);\n-\n-      this.site.mobileView = true;\n-    },\n-    afterEach() {\n-      Session.currentProp(\"darkModeAvailable\", null);\n-    },\n-\n-    test(assert) {\n-      assert.equal(queryAll(\"#site-logo\").attr(\"src\"), mobileLogo);\n-\n-      assert.equal(\n-        queryAll(\"picture source\").attr(\"media\"),\n-        prefersDark,\n-        \"includes dark mode media attribute\"\n-      );\n-      assert.equal(\n-        queryAll(\"picture source\").attr(\"srcset\"),\n-        darkLogo,\n-        \"includes dark mode alternative logo source\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"dark mode enabled but no dark logo set\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.site_logo_url = bigLogo;\n-      this.siteSettings.site_logo_dark_url = \"\";\n-      Session.currentProp(\"darkModeAvailable\", true);\n-    },\n-    afterEach() {\n-      Session.currentProp(\"darkModeAvailable\", null);\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n-      assert.equal(queryAll(\"#site-logo\").attr(\"src\"), bigLogo);\n-      assert.ok(\n-        queryAll(\"picture\").length === 0,\n-        \"does not include alternative logo\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"dark logo set but no dark mode\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.site_logo_url = bigLogo;\n-      this.siteSettings.site_logo_dark_url = darkLogo;\n-    },\n-\n-    test(assert) {\n-      assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n-      assert.equal(queryAll(\"#site-logo\").attr(\"src\"), bigLogo);\n-      assert.ok(\n-        queryAll(\"picture\").length === 0,\n-        \"does not include alternative logo\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"dark color scheme and dark logo set\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.site_logo_url = bigLogo;\n-      this.siteSettings.site_logo_dark_url = darkLogo;\n-      Session.currentProp(\"defaultColorSchemeIsDark\", true);\n-    },\n-    afterEach() {\n-      Session.currentProp(\"defaultColorSchemeIsDark\", null);\n-    },\n-    test(assert) {\n-      assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n-      assert.equal(\n-        queryAll(\"#site-logo\").attr(\"src\"),\n-        darkLogo,\n-        \"uses dark logo\"\n-      );\n-      assert.ok(\n-        queryAll(\"picture\").length === 0,\n-        \"does not add dark mode alternative\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"dark color scheme and dark logo not set\", {\n-    template: '{{mount-widget widget=\"home-logo\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.site_logo_url = bigLogo;\n-      this.siteSettings.site_logo_dark_url = \"\";\n-      Session.currentProp(\"defaultColorSchemeIsDark\", true);\n-    },\n-    afterEach() {\n-      Session.currentProp(\"defaultColorSchemeIsDark\", null);\n-    },\n-    test(assert) {\n-      assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n-      assert.equal(\n-        queryAll(\"#site-logo\").attr(\"src\"),\n-        bigLogo,\n-        \"uses regular logo on dark scheme if no dark logo\"\n-      );\n-    },\n-  });\n-});\n+discourseModule(\n+  \"Integration | Component | Widget | home-logo\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n+\n+    componentTest(\"basics\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      skip: true,\n+      beforeEach() {\n+        this.siteSettings.site_logo_url = bigLogo;\n+        this.siteSettings.site_logo_small_url = smallLogo;\n+        this.siteSettings.title = title;\n+        this.set(\"args\", { minimized: false });\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\".title\").length === 1);\n+\n+        assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n+        assert.equal(queryAll(\"#site-logo\").attr(\"src\"), bigLogo);\n+        assert.equal(queryAll(\"#site-logo\").attr(\"alt\"), title);\n+      },\n+    });\n+\n+    componentTest(\"basics - minimized\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.site_logo_url = bigLogo;\n+        this.siteSettings.site_logo_small_url = smallLogo;\n+        this.siteSettings.title = title;\n+        this.set(\"args\", { minimized: true });\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\"img.logo-small\").length === 1);\n+        assert.equal(queryAll(\"img.logo-small\").attr(\"src\"), smallLogo);\n+        assert.equal(queryAll(\"img.logo-small\").attr(\"alt\"), title);\n+        assert.equal(queryAll(\"img.logo-small\").attr(\"width\"), 36);\n+      },\n+    });\n+\n+    componentTest(\"no logo\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.site_logo_url = \"\";\n+        this.siteSettings.site_logo_small_url = \"\";\n+        this.siteSettings.title = title;\n+        this.set(\"args\", { minimized: false });\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\"h1#site-text-logo.text-logo\").length === 1);\n+        assert.equal(queryAll(\"#site-text-logo\").text(), title);\n+      },\n+    });\n+\n+    componentTest(\"no logo - minimized\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.site_logo_url = \"\";\n+        this.siteSettings.site_logo_small_url = \"\";\n+        this.siteSettings.title = title;\n+        this.set(\"args\", { minimized: true });\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\".d-icon-home\").length === 1);\n+      },\n+    });\n+\n+    componentTest(\"mobile logo\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.site_mobile_logo_url = mobileLogo;\n+        this.siteSettings.site_logo_small_url = smallLogo;\n+        this.site.mobileView = true;\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\"img#site-logo.logo-mobile\").length === 1);\n+        assert.equal(queryAll(\"#site-logo\").attr(\"src\"), mobileLogo);\n+      },\n+    });\n+\n+    componentTest(\"mobile without logo\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.site_logo_url = bigLogo;\n+        this.site.mobileView = true;\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n+        assert.equal(queryAll(\"#site-logo\").attr(\"src\"), bigLogo);\n+      },\n+    });\n+\n+    componentTest(\"logo with dark mode alternative\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.site_logo_url = bigLogo;\n+        this.siteSettings.site_logo_dark_url = darkLogo;\n+        Session.currentProp(\"darkModeAvailable\", true);\n+      },\n+      afterEach() {\n+        Session.currentProp(\"darkModeAvailable\", null);\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n+        assert.equal(queryAll(\"#site-logo\").attr(\"src\"), bigLogo);\n+\n+        assert.equal(\n+          queryAll(\"picture source\").attr(\"media\"),\n+          prefersDark,\n+          \"includes dark mode media attribute\"\n+        );\n+        assert.equal(\n+          queryAll(\"picture source\").attr(\"srcset\"),\n+          darkLogo,\n+          \"includes dark mode alternative logo source\"\n+        );\n+      },\n+    });\n+\n+    componentTest(\"mobile logo with dark mode alternative\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.site_logo_url = bigLogo;\n+        this.siteSettings.site_mobile_logo_url = mobileLogo;\n+        this.siteSettings.site_mobile_logo_dark_url = darkLogo;\n+        Session.currentProp(\"darkModeAvailable\", true);\n+\n+        this.site.mobileView = true;\n+      },\n+      afterEach() {\n+        Session.currentProp(\"darkModeAvailable\", null);\n+      },\n+\n+      test(assert) {\n+        assert.equal(queryAll(\"#site-logo\").attr(\"src\"), mobileLogo);\n+\n+        assert.equal(\n+          queryAll(\"picture source\").attr(\"media\"),\n+          prefersDark,\n+          \"includes dark mode media attribute\"\n+        );\n+        assert.equal(\n+          queryAll(\"picture source\").attr(\"srcset\"),\n+          darkLogo,\n+          \"includes dark mode alternative logo source\"\n+        );\n+      },\n+    });\n+\n+    componentTest(\"dark mode enabled but no dark logo set\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.site_logo_url = bigLogo;\n+        this.siteSettings.site_logo_dark_url = \"\";\n+        Session.currentProp(\"darkModeAvailable\", true);\n+      },\n+      afterEach() {\n+        Session.currentProp(\"darkModeAvailable\", null);\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n+        assert.equal(queryAll(\"#site-logo\").attr(\"src\"), bigLogo);\n+        assert.ok(\n+          queryAll(\"picture\").length === 0,\n+          \"does not include alternative logo\"\n+        );\n+      },\n+    });\n+\n+    componentTest(\"dark logo set but no dark mode\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.site_logo_url = bigLogo;\n+        this.siteSettings.site_logo_dark_url = darkLogo;\n+      },\n+\n+      test(assert) {\n+        assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n+        assert.equal(queryAll(\"#site-logo\").attr(\"src\"), bigLogo);\n+        assert.ok(\n+          queryAll(\"picture\").length === 0,\n+          \"does not include alternative logo\"\n+        );\n+      },\n+    });\n+\n+    componentTest(\"dark color scheme and dark logo set\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.site_logo_url = bigLogo;\n+        this.siteSettings.site_logo_dark_url = darkLogo;\n+        Session.currentProp(\"defaultColorSchemeIsDark\", true);\n+      },\n+      afterEach() {\n+        Session.currentProp(\"defaultColorSchemeIsDark\", null);\n+      },\n+      test(assert) {\n+        assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n+        assert.equal(\n+          queryAll(\"#site-logo\").attr(\"src\"),\n+          darkLogo,\n+          \"uses dark logo\"\n+        );\n+        assert.ok(\n+          queryAll(\"picture\").length === 0,\n+          \"does not add dark mode alternative\"\n+        );\n+      },\n+    });\n+\n+    componentTest(\"dark color scheme and dark logo not set\", {\n+      template: '{{mount-widget widget=\"home-logo\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.site_logo_url = bigLogo;\n+        this.siteSettings.site_logo_dark_url = \"\";\n+        Session.currentProp(\"defaultColorSchemeIsDark\", true);\n+      },\n+      afterEach() {\n+        Session.currentProp(\"defaultColorSchemeIsDark\", null);\n+      },\n+      test(assert) {\n+        assert.ok(queryAll(\"img#site-logo.logo-big\").length === 1);\n+        assert.equal(\n+          queryAll(\"#site-logo\").attr(\"src\"),\n+          bigLogo,\n+          \"uses regular logo on dark scheme if no dark logo\"\n+        );\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "e8287519c84cf9a8c186ac4f487eb61ccd006b91",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/post-links-test.js",
      "status": "modified",
      "additions": 86,
      "deletions": 54,
      "changes": 140,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/post-links-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/post-links-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/post-links-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -7,59 +7,91 @@ import {\n } from \"discourse/tests/helpers/qunit-helpers\";\n import { click } from \"@ember/test-helpers\";\n \n-discourseModule(\"Integration | Component | Widget | post-links\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | Widget | post-links\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  componentTest(\"duplicate links\", {\n-    template: '{{mount-widget widget=\"post-links\" args=args}}',\n-    beforeEach() {\n-      this.set(\"args\", {\n-        id: 2,\n-        links: [\n-          {\n-            title: \"Evil Trout Link\",\n-            url: \"http://eviltrout.com\",\n-            reflection: true,\n-          },\n-          {\n-            title: \"Evil Trout Link\",\n-            url: \"http://dupe.eviltrout.com\",\n-            reflection: true,\n-          },\n-        ],\n-      });\n-    },\n-    test(assert) {\n-      assert.equal(\n-        queryAll(\".post-links a.track-link\").length,\n-        1,\n-        \"it hides the dupe link\"\n-      );\n-    },\n-  });\n+    componentTest(\"duplicate links\", {\n+      template: '{{mount-widget widget=\"post-links\" args=args}}',\n+      beforeEach() {\n+        this.set(\"args\", {\n+          id: 2,\n+          links: [\n+            {\n+              title: \"Evil Trout Link\",\n+              url: \"http://eviltrout.com\",\n+              reflection: true,\n+            },\n+            {\n+              title: \"Evil Trout Link\",\n+              url: \"http://dupe.eviltrout.com\",\n+              reflection: true,\n+            },\n+          ],\n+        });\n+      },\n+      test(assert) {\n+        assert.equal(\n+          queryAll(\".post-links a.track-link\").length,\n+          1,\n+          \"it hides the dupe link\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"collapsed links\", {\n-    template: '{{mount-widget widget=\"post-links\" args=args}}',\n-    beforeEach() {\n-      this.set(\"args\", {\n-        id: 1,\n-        links: [\n-          { title: \"Link 1\", url: \"http://eviltrout.com?1\", reflection: true },\n-          { title: \"Link 2\", url: \"http://eviltrout.com?2\", reflection: true },\n-          { title: \"Link 3\", url: \"http://eviltrout.com?3\", reflection: true },\n-          { title: \"Link 4\", url: \"http://eviltrout.com?4\", reflection: true },\n-          { title: \"Link 5\", url: \"http://eviltrout.com?5\", reflection: true },\n-          { title: \"Link 6\", url: \"http://eviltrout.com?6\", reflection: true },\n-          { title: \"Link 7\", url: \"http://eviltrout.com?7\", reflection: true },\n-        ],\n-      });\n-    },\n-    async test(assert) {\n-      assert.ok(queryAll(\".expand-links\").length === 1, \"collapsed by default\");\n-      await click(\"a.expand-links\");\n-      assert.equal(queryAll(\".post-links a.track-link\").length, 7);\n-    },\n-  });\n-});\n+    componentTest(\"collapsed links\", {\n+      template: '{{mount-widget widget=\"post-links\" args=args}}',\n+      beforeEach() {\n+        this.set(\"args\", {\n+          id: 1,\n+          links: [\n+            {\n+              title: \"Link 1\",\n+              url: \"http://eviltrout.com?1\",\n+              reflection: true,\n+            },\n+            {\n+              title: \"Link 2\",\n+              url: \"http://eviltrout.com?2\",\n+              reflection: true,\n+            },\n+            {\n+              title: \"Link 3\",\n+              url: \"http://eviltrout.com?3\",\n+              reflection: true,\n+            },\n+            {\n+              title: \"Link 4\",\n+              url: \"http://eviltrout.com?4\",\n+              reflection: true,\n+            },\n+            {\n+              title: \"Link 5\",\n+              url: \"http://eviltrout.com?5\",\n+              reflection: true,\n+            },\n+            {\n+              title: \"Link 6\",\n+              url: \"http://eviltrout.com?6\",\n+              reflection: true,\n+            },\n+            {\n+              title: \"Link 7\",\n+              url: \"http://eviltrout.com?7\",\n+              reflection: true,\n+            },\n+          ],\n+        });\n+      },\n+      async test(assert) {\n+        assert.ok(\n+          queryAll(\".expand-links\").length === 1,\n+          \"collapsed by default\"\n+        );\n+        await click(\"a.expand-links\");\n+        assert.equal(queryAll(\".post-links a.track-link\").length, 7);\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "53f10c31fe9bd1c3fe677d0866d79ed2f3472375",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/post-menu-test.js",
      "status": "modified",
      "additions": 43,
      "deletions": 42,
      "changes": 85,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/post-menu-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/post-menu-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/post-menu-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -7,48 +7,49 @@ import {\n } from \"discourse/tests/helpers/qunit-helpers\";\n import { withPluginApi } from \"discourse/lib/plugin-api\";\n \n-discourseModule(\"Integration | Component | Widget | post-menu\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | Widget | post-menu\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  componentTest(\"add extra button\", {\n-    template: '{{mount-widget widget=\"post-menu\" args=args}}',\n-    beforeEach() {\n-      this.set(\"args\", {});\n-      withPluginApi(\"0.8\", (api) => {\n-        api.addPostMenuButton(\"coffee\", () => {\n-          return {\n-            action: \"drinkCoffee\",\n-            icon: \"coffee\",\n-            className: \"hot-coffee\",\n-            title: \"coffee.title\",\n-            position: \"first\",\n-          };\n+    componentTest(\"add extra button\", {\n+      template: '{{mount-widget widget=\"post-menu\" args=args}}',\n+      beforeEach() {\n+        this.set(\"args\", {});\n+        withPluginApi(\"0.8\", (api) => {\n+          api.addPostMenuButton(\"coffee\", () => {\n+            return {\n+              action: \"drinkCoffee\",\n+              icon: \"coffee\",\n+              className: \"hot-coffee\",\n+              title: \"coffee.title\",\n+              position: \"first\",\n+            };\n+          });\n         });\n-      });\n-    },\n-    async test(assert) {\n-      assert.ok(\n-        queryAll(\".actions .extra-buttons .hot-coffee\").length === 1,\n-        \"It renders extra button\"\n-      );\n-    },\n-  });\n+      },\n+      async test(assert) {\n+        assert.ok(\n+          queryAll(\".actions .extra-buttons .hot-coffee\").length === 1,\n+          \"It renders extra button\"\n+        );\n+      },\n+    });\n \n-  componentTest(\"remove extra button\", {\n-    template: '{{mount-widget widget=\"post-menu\" args=args}}',\n-    beforeEach() {\n-      this.set(\"args\", {});\n-      withPluginApi(\"0.8\", (api) => {\n-        api.removePostMenuButton(\"coffee\");\n-      });\n-    },\n-    async test(assert) {\n-      assert.ok(\n-        queryAll(\".actions .extra-buttons .hot-coffee\").length === 0,\n-        \"It doesn't removes coffee button\"\n-      );\n-    },\n-  });\n-});\n+    componentTest(\"remove extra button\", {\n+      template: '{{mount-widget widget=\"post-menu\" args=args}}',\n+      beforeEach() {\n+        this.set(\"args\", {});\n+        withPluginApi(\"0.8\", (api) => {\n+          api.removePostMenuButton(\"coffee\");\n+        });\n+      },\n+      async test(assert) {\n+        assert.ok(\n+          queryAll(\".actions .extra-buttons .hot-coffee\").length === 0,\n+          \"It doesn't removes coffee button\"\n+        );\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "1005000f04b0c4195e10ea858804d4761044f011",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/post-stream-test.js",
      "status": "modified",
      "additions": 127,
      "deletions": 126,
      "changes": 253,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/post-stream-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/post-stream-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/post-stream-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -21,136 +21,137 @@ function postStreamTest(name, attrs) {\n   });\n }\n \n-discourseModule(\"Integration | Component | Widget | post-stream\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | Widget | post-stream\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  postStreamTest(\"basics\", {\n-    posts() {\n-      const site = this.container.lookup(\"site:main\");\n-      const topic = Topic.create();\n-      topic.set(\"details.created_by\", { id: 123 });\n-      return [\n-        Post.create({\n-          topic,\n-          id: 1,\n-          post_number: 1,\n-          user_id: 123,\n-          primary_group_name: \"trout\",\n-          avatar_template: \"/images/avatar.png\",\n-        }),\n-        Post.create({\n-          topic,\n-          id: 2,\n-          post_number: 2,\n-          post_type: site.get(\"post_types.moderator_action\"),\n-        }),\n-        Post.create({ topic, id: 3, post_number: 3, hidden: true }),\n-        Post.create({\n-          topic,\n-          id: 4,\n-          post_number: 4,\n-          post_type: site.get(\"post_types.whisper\"),\n-        }),\n-        Post.create({\n-          topic,\n-          id: 5,\n-          post_number: 5,\n-          wiki: true,\n-          via_email: true,\n-        }),\n-        Post.create({\n-          topic,\n-          id: 6,\n-          post_number: 6,\n-          via_email: true,\n-          is_auto_generated: true,\n-        }),\n-      ];\n-    },\n+    postStreamTest(\"basics\", {\n+      posts() {\n+        const site = this.container.lookup(\"site:main\");\n+        const topic = Topic.create();\n+        topic.set(\"details.created_by\", { id: 123 });\n+        return [\n+          Post.create({\n+            topic,\n+            id: 1,\n+            post_number: 1,\n+            user_id: 123,\n+            primary_group_name: \"trout\",\n+            avatar_template: \"/images/avatar.png\",\n+          }),\n+          Post.create({\n+            topic,\n+            id: 2,\n+            post_number: 2,\n+            post_type: site.get(\"post_types.moderator_action\"),\n+          }),\n+          Post.create({ topic, id: 3, post_number: 3, hidden: true }),\n+          Post.create({\n+            topic,\n+            id: 4,\n+            post_number: 4,\n+            post_type: site.get(\"post_types.whisper\"),\n+          }),\n+          Post.create({\n+            topic,\n+            id: 5,\n+            post_number: 5,\n+            wiki: true,\n+            via_email: true,\n+          }),\n+          Post.create({\n+            topic,\n+            id: 6,\n+            post_number: 6,\n+            via_email: true,\n+            is_auto_generated: true,\n+          }),\n+        ];\n+      },\n \n-    test(assert) {\n-      assert.equal(queryAll(\".post-stream\").length, 1);\n-      assert.equal(queryAll(\".topic-post\").length, 6, \"renders all posts\");\n+      test(assert) {\n+        assert.equal(queryAll(\".post-stream\").length, 1);\n+        assert.equal(queryAll(\".topic-post\").length, 6, \"renders all posts\");\n \n-      // look for special class bindings\n-      assert.equal(\n-        queryAll(\".topic-post:nth-of-type(1).topic-owner\").length,\n-        1,\n-        \"it applies the topic owner class\"\n-      );\n-      assert.equal(\n-        queryAll(\".topic-post:nth-of-type(1).group-trout\").length,\n-        1,\n-        \"it applies the primary group class\"\n-      );\n-      assert.equal(\n-        queryAll(\".topic-post:nth-of-type(1).regular\").length,\n-        1,\n-        \"it applies the regular class\"\n-      );\n-      assert.equal(\n-        queryAll(\".topic-post:nth-of-type(2).moderator\").length,\n-        1,\n-        \"it applies the moderator class\"\n-      );\n-      assert.equal(\n-        queryAll(\".topic-post:nth-of-type(3).post-hidden\").length,\n-        1,\n-        \"it applies the hidden class\"\n-      );\n-      assert.equal(\n-        queryAll(\".topic-post:nth-of-type(4).whisper\").length,\n-        1,\n-        \"it applies the whisper class\"\n-      );\n-      assert.equal(\n-        queryAll(\".topic-post:nth-of-type(5).wiki\").length,\n-        1,\n-        \"it applies the wiki class\"\n-      );\n+        // look for special class bindings\n+        assert.equal(\n+          queryAll(\".topic-post:nth-of-type(1).topic-owner\").length,\n+          1,\n+          \"it applies the topic owner class\"\n+        );\n+        assert.equal(\n+          queryAll(\".topic-post:nth-of-type(1).group-trout\").length,\n+          1,\n+          \"it applies the primary group class\"\n+        );\n+        assert.equal(\n+          queryAll(\".topic-post:nth-of-type(1).regular\").length,\n+          1,\n+          \"it applies the regular class\"\n+        );\n+        assert.equal(\n+          queryAll(\".topic-post:nth-of-type(2).moderator\").length,\n+          1,\n+          \"it applies the moderator class\"\n+        );\n+        assert.equal(\n+          queryAll(\".topic-post:nth-of-type(3).post-hidden\").length,\n+          1,\n+          \"it applies the hidden class\"\n+        );\n+        assert.equal(\n+          queryAll(\".topic-post:nth-of-type(4).whisper\").length,\n+          1,\n+          \"it applies the whisper class\"\n+        );\n+        assert.equal(\n+          queryAll(\".topic-post:nth-of-type(5).wiki\").length,\n+          1,\n+          \"it applies the wiki class\"\n+        );\n \n-      // it renders an article for the body with appropriate attributes\n-      assert.equal(queryAll(\"article#post_2\").length, 1);\n-      assert.equal(queryAll('article[data-user-id=\"123\"]').length, 1);\n-      assert.equal(queryAll('article[data-post-id=\"3\"]').length, 1);\n-      assert.equal(queryAll(\"article#post_5.via-email\").length, 1);\n-      assert.equal(queryAll(\"article#post_6.is-auto-generated\").length, 1);\n+        // it renders an article for the body with appropriate attributes\n+        assert.equal(queryAll(\"article#post_2\").length, 1);\n+        assert.equal(queryAll('article[data-user-id=\"123\"]').length, 1);\n+        assert.equal(queryAll('article[data-post-id=\"3\"]').length, 1);\n+        assert.equal(queryAll(\"article#post_5.via-email\").length, 1);\n+        assert.equal(queryAll(\"article#post_6.is-auto-generated\").length, 1);\n \n-      assert.equal(\n-        queryAll(\"article:nth-of-type(1) .main-avatar\").length,\n-        1,\n-        \"renders the main avatar\"\n-      );\n-    },\n-  });\n+        assert.equal(\n+          queryAll(\"article:nth-of-type(1) .main-avatar\").length,\n+          1,\n+          \"renders the main avatar\"\n+        );\n+      },\n+    });\n \n-  postStreamTest(\"deleted posts\", {\n-    posts() {\n-      const topic = Topic.create();\n-      topic.set(\"details.created_by\", { id: 123 });\n-      return [\n-        Post.create({\n-          topic,\n-          id: 1,\n-          post_number: 1,\n-          deleted_at: new Date().toString(),\n-        }),\n-      ];\n-    },\n+    postStreamTest(\"deleted posts\", {\n+      posts() {\n+        const topic = Topic.create();\n+        topic.set(\"details.created_by\", { id: 123 });\n+        return [\n+          Post.create({\n+            topic,\n+            id: 1,\n+            post_number: 1,\n+            deleted_at: new Date().toString(),\n+          }),\n+        ];\n+      },\n \n-    test(assert) {\n-      assert.equal(\n-        queryAll(\".topic-post.deleted\").length,\n-        1,\n-        \"it applies the deleted class\"\n-      );\n-      assert.equal(\n-        queryAll(\".deleted-user-avatar\").length,\n-        1,\n-        \"it has the trash avatar\"\n-      );\n-    },\n-  });\n-});\n+      test(assert) {\n+        assert.equal(\n+          queryAll(\".topic-post.deleted\").length,\n+          1,\n+          \"it applies the deleted class\"\n+        );\n+        assert.equal(\n+          queryAll(\".deleted-user-avatar\").length,\n+          1,\n+          \"it has the trash avatar\"\n+        );\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "725ba4606025cac1d33aa745e1161c1e860c83b8",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/poster-name-test.js",
      "status": "modified",
      "additions": 68,
      "deletions": 67,
      "changes": 135,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/poster-name-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/poster-name-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/poster-name-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -6,74 +6,75 @@ import {\n   queryAll,\n } from \"discourse/tests/helpers/qunit-helpers\";\n \n-discourseModule(\"Integration | Component | Widget | poster-name\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | Widget | poster-name\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  componentTest(\"basic rendering\", {\n-    template: '{{mount-widget widget=\"poster-name\" args=args}}',\n-    beforeEach() {\n-      this.set(\"args\", {\n-        username: \"eviltrout\",\n-        usernameUrl: \"/u/eviltrout\",\n-        name: \"Robin Ward\",\n-        user_title: \"Trout Master\",\n-      });\n-    },\n-    test(assert) {\n-      assert.ok(queryAll(\".names\").length);\n-      assert.ok(queryAll(\"span.username\").length);\n-      assert.ok(queryAll('a[data-user-card=\"eviltrout\"]').length);\n-      assert.equal(queryAll(\".username a\").text(), \"eviltrout\");\n-      assert.equal(queryAll(\".full-name a\").text(), \"Robin Ward\");\n-      assert.equal(queryAll(\".user-title\").text(), \"Trout Master\");\n-    },\n-  });\n+    componentTest(\"basic rendering\", {\n+      template: '{{mount-widget widget=\"poster-name\" args=args}}',\n+      beforeEach() {\n+        this.set(\"args\", {\n+          username: \"eviltrout\",\n+          usernameUrl: \"/u/eviltrout\",\n+          name: \"Robin Ward\",\n+          user_title: \"Trout Master\",\n+        });\n+      },\n+      test(assert) {\n+        assert.ok(queryAll(\".names\").length);\n+        assert.ok(queryAll(\"span.username\").length);\n+        assert.ok(queryAll('a[data-user-card=\"eviltrout\"]').length);\n+        assert.equal(queryAll(\".username a\").text(), \"eviltrout\");\n+        assert.equal(queryAll(\".full-name a\").text(), \"Robin Ward\");\n+        assert.equal(queryAll(\".user-title\").text(), \"Trout Master\");\n+      },\n+    });\n \n-  componentTest(\"extra classes and glyphs\", {\n-    template: '{{mount-widget widget=\"poster-name\" args=args}}',\n-    beforeEach() {\n-      this.set(\"args\", {\n-        username: \"eviltrout\",\n-        usernameUrl: \"/u/eviltrout\",\n-        staff: true,\n-        admin: true,\n-        moderator: true,\n-        new_user: true,\n-        primary_group_name: \"fish\",\n-      });\n-    },\n-    test(assert) {\n-      assert.ok(queryAll(\"span.staff\").length);\n-      assert.ok(queryAll(\"span.admin\").length);\n-      assert.ok(queryAll(\"span.moderator\").length);\n-      assert.ok(queryAll(\".d-icon-shield-alt\").length);\n-      assert.ok(queryAll(\"span.new-user\").length);\n-      assert.ok(queryAll(\"span.fish\").length);\n-    },\n-  });\n+    componentTest(\"extra classes and glyphs\", {\n+      template: '{{mount-widget widget=\"poster-name\" args=args}}',\n+      beforeEach() {\n+        this.set(\"args\", {\n+          username: \"eviltrout\",\n+          usernameUrl: \"/u/eviltrout\",\n+          staff: true,\n+          admin: true,\n+          moderator: true,\n+          new_user: true,\n+          primary_group_name: \"fish\",\n+        });\n+      },\n+      test(assert) {\n+        assert.ok(queryAll(\"span.staff\").length);\n+        assert.ok(queryAll(\"span.admin\").length);\n+        assert.ok(queryAll(\"span.moderator\").length);\n+        assert.ok(queryAll(\".d-icon-shield-alt\").length);\n+        assert.ok(queryAll(\"span.new-user\").length);\n+        assert.ok(queryAll(\"span.fish\").length);\n+      },\n+    });\n \n-  componentTest(\"disable display name on posts\", {\n-    template: '{{mount-widget widget=\"poster-name\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.display_name_on_posts = false;\n-      this.set(\"args\", { username: \"eviltrout\", name: \"Robin Ward\" });\n-    },\n-    test(assert) {\n-      assert.equal(queryAll(\".full-name\").length, 0);\n-    },\n-  });\n+    componentTest(\"disable display name on posts\", {\n+      template: '{{mount-widget widget=\"poster-name\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.display_name_on_posts = false;\n+        this.set(\"args\", { username: \"eviltrout\", name: \"Robin Ward\" });\n+      },\n+      test(assert) {\n+        assert.equal(queryAll(\".full-name\").length, 0);\n+      },\n+    });\n \n-  componentTest(\"doesn't render a name if it's similar to the username\", {\n-    template: '{{mount-widget widget=\"poster-name\" args=args}}',\n-    beforeEach() {\n-      this.siteSettings.prioritize_username_in_ux = true;\n-      this.siteSettings.display_name_on_posts = true;\n-      this.set(\"args\", { username: \"eviltrout\", name: \"evil-trout\" });\n-    },\n-    test(assert) {\n-      assert.equal(queryAll(\".second\").length, 0);\n-    },\n-  });\n-});\n+    componentTest(\"doesn't render a name if it's similar to the username\", {\n+      template: '{{mount-widget widget=\"poster-name\" args=args}}',\n+      beforeEach() {\n+        this.siteSettings.prioritize_username_in_ux = true;\n+        this.siteSettings.display_name_on_posts = true;\n+        this.set(\"args\", { username: \"eviltrout\", name: \"evil-trout\" });\n+      },\n+      test(assert) {\n+        assert.equal(queryAll(\".second\").length, 0);\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "95316703f724faea444df68495153a5a422c9ec3",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/small-user-list-test.js",
      "status": "modified",
      "additions": 22,
      "deletions": 21,
      "changes": 43,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/small-user-list-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/small-user-list-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/small-user-list-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -6,25 +6,26 @@ import {\n   queryAll,\n } from \"discourse/tests/helpers/qunit-helpers\";\n \n-discourseModule(\"Integration | Component | Widget | small-user-list\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | Widget | small-user-list\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  componentTest(\"renders avatars and support for unknown\", {\n-    template: '{{mount-widget widget=\"small-user-list\" args=args}}',\n-    beforeEach() {\n-      this.set(\"args\", {\n-        users: [\n-          { id: 456, username: \"eviltrout\" },\n-          { id: 457, username: \"someone\", unknown: true },\n-        ],\n-      });\n-    },\n-    async test(assert) {\n-      assert.ok(queryAll('[data-user-card=\"eviltrout\"]').length === 1);\n-      assert.ok(queryAll('[data-user-card=\"someone\"]').length === 0);\n-      assert.ok(queryAll(\".unknown\").length, \"includes unkown user\");\n-    },\n-  });\n-});\n+    componentTest(\"renders avatars and support for unknown\", {\n+      template: '{{mount-widget widget=\"small-user-list\" args=args}}',\n+      beforeEach() {\n+        this.set(\"args\", {\n+          users: [\n+            { id: 456, username: \"eviltrout\" },\n+            { id: 457, username: \"someone\", unknown: true },\n+          ],\n+        });\n+      },\n+      async test(assert) {\n+        assert.ok(queryAll('[data-user-card=\"eviltrout\"]').length === 1);\n+        assert.ok(queryAll('[data-user-card=\"someone\"]').length === 0);\n+        assert.ok(queryAll(\".unknown\").length, \"includes unkown user\");\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "f8e8377eb0a6cc13572df59c5a9c9ef0de4b8314",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/topic-status-test.js",
      "status": "modified",
      "additions": 37,
      "deletions": 36,
      "changes": 73,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/topic-status-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/topic-status-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/topic-status-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -7,41 +7,42 @@ import {\n } from \"discourse/tests/helpers/qunit-helpers\";\n import TopicStatusIcons from \"discourse/helpers/topic-status-icons\";\n \n-discourseModule(\"Integration | Component | Widget | topic-status\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n+discourseModule(\n+  \"Integration | Component | Widget | topic-status\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n \n-  componentTest(\"basics\", {\n-    template: '{{mount-widget widget=\"topic-status\" args=args}}',\n-    beforeEach(store) {\n-      this.set(\"args\", {\n-        topic: store.createRecord(\"topic\", { closed: true }),\n-        disableActions: true,\n-      });\n-    },\n-    test(assert) {\n-      assert.ok(queryAll(\".topic-status .d-icon-lock\").length);\n-    },\n-  });\n+    componentTest(\"basics\", {\n+      template: '{{mount-widget widget=\"topic-status\" args=args}}',\n+      beforeEach(store) {\n+        this.set(\"args\", {\n+          topic: store.createRecord(\"topic\", { closed: true }),\n+          disableActions: true,\n+        });\n+      },\n+      test(assert) {\n+        assert.ok(queryAll(\".topic-status .d-icon-lock\").length);\n+      },\n+    });\n \n-  componentTest(\"extendability\", {\n-    template: '{{mount-widget widget=\"topic-status\" args=args}}',\n-    beforeEach(store) {\n-      TopicStatusIcons.addObject([\n-        \"has_accepted_answer\",\n-        \"far-check-square\",\n-        \"solved\",\n-      ]);\n-      this.set(\"args\", {\n-        topic: store.createRecord(\"topic\", {\n-          has_accepted_answer: true,\n-        }),\n-        disableActions: true,\n-      });\n-    },\n-    test(assert) {\n-      assert.ok(queryAll(\".topic-status .d-icon-far-check-square\").length);\n-    },\n-  });\n-});\n+    componentTest(\"extendability\", {\n+      template: '{{mount-widget widget=\"topic-status\" args=args}}',\n+      beforeEach(store) {\n+        TopicStatusIcons.addObject([\n+          \"has_accepted_answer\",\n+          \"far-check-square\",\n+          \"solved\",\n+        ]);\n+        this.set(\"args\", {\n+          topic: store.createRecord(\"topic\", {\n+            has_accepted_answer: true,\n+          }),\n+          disableActions: true,\n+        });\n+      },\n+      test(assert) {\n+        assert.ok(queryAll(\".topic-status .d-icon-far-check-square\").length);\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "232745f93567eba8ccbd8427cabd123e8518b06f",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/user-menu-test.js",
      "status": "modified",
      "additions": 223,
      "deletions": 222,
      "changes": 445,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/user-menu-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/user-menu-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/user-menu-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -10,226 +10,227 @@ import I18n from \"I18n\";\n import { click } from \"@ember/test-helpers\";\n import sinon from \"sinon\";\n \n-discourseModule(\"Integration | Component | Widget | user-menu\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n-\n-  componentTest(\"basics\", {\n-    template: '{{mount-widget widget=\"user-menu\"}}',\n-\n-    test(assert) {\n-      assert.ok(queryAll(\".user-menu\").length);\n-      assert.ok(queryAll(\".user-preferences-link\").length);\n-      assert.ok(queryAll(\".user-notifications-link\").length);\n-      assert.ok(queryAll(\".user-bookmarks-link\").length);\n-      assert.ok(queryAll(\".quick-access-panel\").length);\n-      assert.ok(queryAll(\".notifications-dismiss\").length);\n-    },\n-  });\n-\n-  componentTest(\"notifications\", {\n-    template: '{{mount-widget widget=\"user-menu\"}}',\n-\n-    async test(assert) {\n-      const $links = queryAll(\".quick-access-panel li a\");\n-\n-      assert.equal($links.length, 5);\n-      assert.ok($links[0].href.includes(\"/t/a-slug/123\"));\n-\n-      assert.ok(\n-        $links[1].href.includes(\n-          \"/u/eviltrout/notifications/likes-received?acting_username=aquaman\"\n-        )\n-      );\n-\n-      assert.equal(\n-        $links[1].text,\n-        `aquaman ${I18n.t(\"notifications.liked_consolidated_description\", {\n-          count: 5,\n-        })}`\n-      );\n-\n-      assert.ok($links[2].href.includes(\"/u/test2/messages/group/test\"));\n-      assert.ok(\n-        $links[2].innerHTML.includes(\n-          I18n.t(\"notifications.group_message_summary\", {\n+discourseModule(\n+  \"Integration | Component | Widget | user-menu\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n+\n+    componentTest(\"basics\", {\n+      template: '{{mount-widget widget=\"user-menu\"}}',\n+\n+      test(assert) {\n+        assert.ok(queryAll(\".user-menu\").length);\n+        assert.ok(queryAll(\".user-preferences-link\").length);\n+        assert.ok(queryAll(\".user-notifications-link\").length);\n+        assert.ok(queryAll(\".user-bookmarks-link\").length);\n+        assert.ok(queryAll(\".quick-access-panel\").length);\n+        assert.ok(queryAll(\".notifications-dismiss\").length);\n+      },\n+    });\n+\n+    componentTest(\"notifications\", {\n+      template: '{{mount-widget widget=\"user-menu\"}}',\n+\n+      async test(assert) {\n+        const $links = queryAll(\".quick-access-panel li a\");\n+\n+        assert.equal($links.length, 5);\n+        assert.ok($links[0].href.includes(\"/t/a-slug/123\"));\n+\n+        assert.ok(\n+          $links[1].href.includes(\n+            \"/u/eviltrout/notifications/likes-received?acting_username=aquaman\"\n+          )\n+        );\n+\n+        assert.equal(\n+          $links[1].text,\n+          `aquaman ${I18n.t(\"notifications.liked_consolidated_description\", {\n             count: 5,\n-            group_name: \"test\",\n-          })\n-        )\n-      );\n-\n-      assert.ok($links[3].href.includes(\"/u/test1\"));\n-      assert.ok(\n-        $links[3].innerHTML.includes(\n-          I18n.t(\"notifications.invitee_accepted\", { username: \"test1\" })\n-        )\n-      );\n-\n-      assert.ok($links[4].href.includes(\"/g/test\"));\n-      assert.ok(\n-        $links[4].innerHTML.includes(\n-          I18n.t(\"notifications.membership_request_accepted\", {\n-            group_name: \"test\",\n-          })\n-        )\n-      );\n-\n-      const routeToStub = sinon.stub(DiscourseURL, \"routeTo\");\n-      await click(\".user-notifications-link\");\n-      assert.ok(\n-        routeToStub.calledWith(\n-          queryAll(\".user-notifications-link\").data(\"url\")\n-        ),\n-        \"a second click should redirect to the full notifications page\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"log out\", {\n-    template: '{{mount-widget widget=\"user-menu\" logout=(action \"logout\")}}',\n-\n-    beforeEach() {\n-      this.on(\"logout\", () => (this.loggedOut = true));\n-    },\n-\n-    async test(assert) {\n-      await click(\".user-preferences-link\");\n-\n-      assert.ok(queryAll(\".logout\").length);\n-\n-      await click(\".logout button\");\n-      assert.ok(this.loggedOut);\n-    },\n-  });\n-\n-  componentTest(\"private messages - disabled\", {\n-    template: '{{mount-widget widget=\"user-menu\"}}',\n-    beforeEach() {\n-      this.siteSettings.enable_personal_messages = false;\n-    },\n-\n-    test(assert) {\n-      assert.ok(!queryAll(\".user-pms-link\").length);\n-    },\n-  });\n-\n-  componentTest(\"private messages - enabled\", {\n-    template: '{{mount-widget widget=\"user-menu\"}}',\n-    beforeEach() {\n-      this.siteSettings.enable_personal_messages = true;\n-    },\n-\n-    async test(assert) {\n-      const userPmsLink = queryAll(\".user-pms-link\").data(\"url\");\n-      assert.ok(userPmsLink);\n-      await click(\".user-pms-link\");\n-\n-      const message = queryAll(\".quick-access-panel li a\")[0];\n-      assert.ok(message);\n-\n-      assert.ok(\n-        message.href.includes(\"/t/bug-can-not-render-emoji-properly/174/2\"),\n-        \"should link to the next unread post\"\n-      );\n-      assert.ok(\n-        message.innerHTML.includes(\"mixtape\"),\n-        \"should include the last poster's username\"\n-      );\n-      assert.ok(\n-        message.innerHTML.match(/<img.*class=\"emoji\".*>/),\n-        \"should correctly render emoji in message title\"\n-      );\n-\n-      const routeToStub = sinon.stub(DiscourseURL, \"routeTo\");\n-      await click(\".user-pms-link\");\n-      assert.ok(\n-        routeToStub.calledWith(userPmsLink),\n-        \"a second click should redirect to the full private messages page\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"bookmarks\", {\n-    template: '{{mount-widget widget=\"user-menu\"}}',\n-\n-    async test(assert) {\n-      await click(\".user-bookmarks-link\");\n-\n-      const bookmark = queryAll(\".quick-access-panel li a\")[0];\n-      assert.ok(bookmark);\n-\n-      assert.ok(bookmark.href.includes(\"/t/yelling-topic-title/119\"));\n-      assert.ok(\n-        bookmark.innerHTML.includes(\"someguy\"),\n-        \"should include the last poster's username\"\n-      );\n-      assert.ok(\n-        bookmark.innerHTML.match(/<img.*class=\"emoji\".*>/),\n-        \"should correctly render emoji in bookmark title\"\n-      );\n-\n-      const routeToStub = sinon.stub(DiscourseURL, \"routeTo\");\n-      await click(\".user-bookmarks-link\");\n-      assert.ok(\n-        routeToStub.calledWith(queryAll(\".user-bookmarks-link\").data(\"url\")),\n-        \"a second click should redirect to the full bookmarks page\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"anonymous\", {\n-    template:\n-      '{{mount-widget widget=\"user-menu\" toggleAnonymous=(action \"toggleAnonymous\")}}',\n-\n-    beforeEach() {\n-      this.currentUser.setProperties({ is_anonymous: false, trust_level: 3 });\n-      this.siteSettings.allow_anonymous_posting = true;\n-      this.siteSettings.anonymous_posting_min_trust_level = 3;\n-\n-      this.on(\"toggleAnonymous\", () => (this.anonymous = true));\n-    },\n-\n-    async test(assert) {\n-      await click(\".user-preferences-link\");\n-      assert.ok(queryAll(\".enable-anonymous\").length);\n-\n-      await click(\".enable-anonymous\");\n-      assert.ok(this.anonymous);\n-    },\n-  });\n-\n-  componentTest(\"anonymous - disabled\", {\n-    template: '{{mount-widget widget=\"user-menu\"}}',\n-\n-    beforeEach() {\n-      this.siteSettings.allow_anonymous_posting = false;\n-    },\n-\n-    async test(assert) {\n-      await click(\".user-preferences-link\");\n-      assert.ok(!queryAll(\".enable-anonymous\").length);\n-    },\n-  });\n-\n-  componentTest(\"anonymous - switch back\", {\n-    template:\n-      '{{mount-widget widget=\"user-menu\" toggleAnonymous=(action \"toggleAnonymous\")}}',\n-\n-    beforeEach() {\n-      this.currentUser.setProperties({ is_anonymous: true });\n-      this.siteSettings.allow_anonymous_posting = true;\n-\n-      this.on(\"toggleAnonymous\", () => (this.anonymous = false));\n-    },\n-\n-    async test(assert) {\n-      await click(\".user-preferences-link\");\n-      assert.ok(queryAll(\".disable-anonymous\").length);\n-\n-      await click(\".disable-anonymous\");\n-      assert.notOk(this.anonymous);\n-    },\n-  });\n-});\n+          })}`\n+        );\n+\n+        assert.ok($links[2].href.includes(\"/u/test2/messages/group/test\"));\n+        assert.ok(\n+          $links[2].innerHTML.includes(\n+            I18n.t(\"notifications.group_message_summary\", {\n+              count: 5,\n+              group_name: \"test\",\n+            })\n+          )\n+        );\n+\n+        assert.ok($links[3].href.includes(\"/u/test1\"));\n+        assert.ok(\n+          $links[3].innerHTML.includes(\n+            I18n.t(\"notifications.invitee_accepted\", { username: \"test1\" })\n+          )\n+        );\n+\n+        assert.ok($links[4].href.includes(\"/g/test\"));\n+        assert.ok(\n+          $links[4].innerHTML.includes(\n+            I18n.t(\"notifications.membership_request_accepted\", {\n+              group_name: \"test\",\n+            })\n+          )\n+        );\n+\n+        const routeToStub = sinon.stub(DiscourseURL, \"routeTo\");\n+        await click(\".user-notifications-link\");\n+        assert.ok(\n+          routeToStub.calledWith(\n+            queryAll(\".user-notifications-link\").data(\"url\")\n+          ),\n+          \"a second click should redirect to the full notifications page\"\n+        );\n+      },\n+    });\n+\n+    componentTest(\"log out\", {\n+      template: '{{mount-widget widget=\"user-menu\" logout=(action \"logout\")}}',\n+\n+      beforeEach() {\n+        this.on(\"logout\", () => (this.loggedOut = true));\n+      },\n+\n+      async test(assert) {\n+        await click(\".user-preferences-link\");\n+\n+        assert.ok(queryAll(\".logout\").length);\n+\n+        await click(\".logout button\");\n+        assert.ok(this.loggedOut);\n+      },\n+    });\n+\n+    componentTest(\"private messages - disabled\", {\n+      template: '{{mount-widget widget=\"user-menu\"}}',\n+      beforeEach() {\n+        this.siteSettings.enable_personal_messages = false;\n+      },\n+\n+      test(assert) {\n+        assert.ok(!queryAll(\".user-pms-link\").length);\n+      },\n+    });\n+\n+    componentTest(\"private messages - enabled\", {\n+      template: '{{mount-widget widget=\"user-menu\"}}',\n+      beforeEach() {\n+        this.siteSettings.enable_personal_messages = true;\n+      },\n+\n+      async test(assert) {\n+        const userPmsLink = queryAll(\".user-pms-link\").data(\"url\");\n+        assert.ok(userPmsLink);\n+        await click(\".user-pms-link\");\n+\n+        const message = queryAll(\".quick-access-panel li a\")[0];\n+        assert.ok(message);\n+\n+        assert.ok(\n+          message.href.includes(\"/t/bug-can-not-render-emoji-properly/174/2\"),\n+          \"should link to the next unread post\"\n+        );\n+        assert.ok(\n+          message.innerHTML.includes(\"mixtape\"),\n+          \"should include the last poster's username\"\n+        );\n+        assert.ok(\n+          message.innerHTML.match(/<img.*class=\"emoji\".*>/),\n+          \"should correctly render emoji in message title\"\n+        );\n+\n+        const routeToStub = sinon.stub(DiscourseURL, \"routeTo\");\n+        await click(\".user-pms-link\");\n+        assert.ok(\n+          routeToStub.calledWith(userPmsLink),\n+          \"a second click should redirect to the full private messages page\"\n+        );\n+      },\n+    });\n+\n+    componentTest(\"bookmarks\", {\n+      template: '{{mount-widget widget=\"user-menu\"}}',\n+\n+      async test(assert) {\n+        await click(\".user-bookmarks-link\");\n+\n+        const bookmark = queryAll(\".quick-access-panel li a\")[0];\n+        assert.ok(bookmark);\n+\n+        assert.ok(bookmark.href.includes(\"/t/yelling-topic-title/119\"));\n+        assert.ok(\n+          bookmark.innerHTML.includes(\"someguy\"),\n+          \"should include the last poster's username\"\n+        );\n+        assert.ok(\n+          bookmark.innerHTML.match(/<img.*class=\"emoji\".*>/),\n+          \"should correctly render emoji in bookmark title\"\n+        );\n+\n+        const routeToStub = sinon.stub(DiscourseURL, \"routeTo\");\n+        await click(\".user-bookmarks-link\");\n+        assert.ok(\n+          routeToStub.calledWith(queryAll(\".user-bookmarks-link\").data(\"url\")),\n+          \"a second click should redirect to the full bookmarks page\"\n+        );\n+      },\n+    });\n+\n+    componentTest(\"anonymous\", {\n+      template:\n+        '{{mount-widget widget=\"user-menu\" toggleAnonymous=(action \"toggleAnonymous\")}}',\n+\n+      beforeEach() {\n+        this.currentUser.setProperties({ is_anonymous: false, trust_level: 3 });\n+        this.siteSettings.allow_anonymous_posting = true;\n+        this.siteSettings.anonymous_posting_min_trust_level = 3;\n+\n+        this.on(\"toggleAnonymous\", () => (this.anonymous = true));\n+      },\n+\n+      async test(assert) {\n+        await click(\".user-preferences-link\");\n+        assert.ok(queryAll(\".enable-anonymous\").length);\n+\n+        await click(\".enable-anonymous\");\n+        assert.ok(this.anonymous);\n+      },\n+    });\n+\n+    componentTest(\"anonymous - disabled\", {\n+      template: '{{mount-widget widget=\"user-menu\"}}',\n+\n+      beforeEach() {\n+        this.siteSettings.allow_anonymous_posting = false;\n+      },\n+\n+      async test(assert) {\n+        await click(\".user-preferences-link\");\n+        assert.ok(!queryAll(\".enable-anonymous\").length);\n+      },\n+    });\n+\n+    componentTest(\"anonymous - switch back\", {\n+      template:\n+        '{{mount-widget widget=\"user-menu\" toggleAnonymous=(action \"toggleAnonymous\")}}',\n+\n+      beforeEach() {\n+        this.currentUser.setProperties({ is_anonymous: true });\n+        this.siteSettings.allow_anonymous_posting = true;\n+\n+        this.on(\"toggleAnonymous\", () => (this.anonymous = false));\n+      },\n+\n+      async test(assert) {\n+        await click(\".user-preferences-link\");\n+        assert.ok(queryAll(\".disable-anonymous\").length);\n+\n+        await click(\".disable-anonymous\");\n+        assert.notOk(this.anonymous);\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "f17e92981cf3bfae9088278c7e629ad53bf06857",
      "filename": "app/assets/javascripts/discourse/tests/integration/widgets/widget-dropdown-test.js",
      "status": "modified",
      "additions": 275,
      "deletions": 274,
      "changes": 549,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/widget-dropdown-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/integration/widgets/widget-dropdown-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/integration/widgets/widget-dropdown-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -60,79 +60,79 @@ const TEMPLATE = `\n     )\n }}`;\n \n-discourseModule(\"Integration | Component | Widget | widget-dropdown\", function (\n-  hooks\n-) {\n-  setupRenderingTest(hooks);\n-\n-  componentTest(\"dropdown id\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-    },\n-\n-    test(assert) {\n-      assert.ok(exists(\"#my-dropdown\"));\n-    },\n-  });\n-\n-  componentTest(\"label\", {\n-    template: TEMPLATE,\n-\n-    _translations: I18n.translations,\n-\n-    beforeEach() {\n-      I18n.translations = { en: { js: { foo: \"FooBaz\" } } };\n-      this.setProperties(DEFAULT_CONTENT);\n-    },\n-\n-    afterEach() {\n-      I18n.translations = this._translations;\n-    },\n-\n-    test(assert) {\n-      assert.equal(headerLabel(), \"FooBaz\");\n-    },\n-  });\n-\n-  componentTest(\"translatedLabel\", {\n-    template: TEMPLATE,\n-\n-    _translations: I18n.translations,\n-\n-    beforeEach() {\n-      I18n.translations = { en: { js: { foo: \"FooBaz\" } } };\n-      this.setProperties(DEFAULT_CONTENT);\n-      this.set(\"translatedLabel\", \"BazFoo\");\n-    },\n-\n-    afterEach() {\n-      I18n.translations = this._translations;\n-    },\n-\n-    test(assert) {\n-      assert.equal(headerLabel(), this.translatedLabel);\n-    },\n-  });\n-\n-  componentTest(\"content\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-    },\n-\n-    async test(assert) {\n-      await toggle();\n-      assert.equal(rowById(1).dataset.id, 1, \"it creates rows\");\n-      assert.equal(rowById(2).dataset.id, 2, \"it creates rows\");\n-      assert.equal(rowById(3).dataset.id, 3, \"it creates rows\");\n-    },\n-  });\n-\n-  componentTest(\"onChange action\", {\n-    template: `\n+discourseModule(\n+  \"Integration | Component | Widget | widget-dropdown\",\n+  function (hooks) {\n+    setupRenderingTest(hooks);\n+\n+    componentTest(\"dropdown id\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+      },\n+\n+      test(assert) {\n+        assert.ok(exists(\"#my-dropdown\"));\n+      },\n+    });\n+\n+    componentTest(\"label\", {\n+      template: TEMPLATE,\n+\n+      _translations: I18n.translations,\n+\n+      beforeEach() {\n+        I18n.translations = { en: { js: { foo: \"FooBaz\" } } };\n+        this.setProperties(DEFAULT_CONTENT);\n+      },\n+\n+      afterEach() {\n+        I18n.translations = this._translations;\n+      },\n+\n+      test(assert) {\n+        assert.equal(headerLabel(), \"FooBaz\");\n+      },\n+    });\n+\n+    componentTest(\"translatedLabel\", {\n+      template: TEMPLATE,\n+\n+      _translations: I18n.translations,\n+\n+      beforeEach() {\n+        I18n.translations = { en: { js: { foo: \"FooBaz\" } } };\n+        this.setProperties(DEFAULT_CONTENT);\n+        this.set(\"translatedLabel\", \"BazFoo\");\n+      },\n+\n+      afterEach() {\n+        I18n.translations = this._translations;\n+      },\n+\n+      test(assert) {\n+        assert.equal(headerLabel(), this.translatedLabel);\n+      },\n+    });\n+\n+    componentTest(\"content\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+      },\n+\n+      async test(assert) {\n+        await toggle();\n+        assert.equal(rowById(1).dataset.id, 1, \"it creates rows\");\n+        assert.equal(rowById(2).dataset.id, 2, \"it creates rows\");\n+        assert.equal(rowById(3).dataset.id, 3, \"it creates rows\");\n+      },\n+    });\n+\n+    componentTest(\"onChange action\", {\n+      template: `\n       <div id=\"test\"></div>\n       {{mount-widget\n         widget=\"widget-dropdown\"\n@@ -145,204 +145,205 @@ discourseModule(\"Integration | Component | Widget | widget-dropdown\", function (\n       }}\n     `,\n \n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-\n-      this.on(\n-        \"onChange\",\n-        (item) => (this._element.querySelector(\"#test\").innerText = item.id)\n-      );\n-    },\n-\n-    async test(assert) {\n-      await toggle();\n-      await clickRowById(2);\n-      assert.equal(\n-        queryAll(\"#test\").text(),\n-        2,\n-        \"it calls the onChange actions\"\n-      );\n-    },\n-  });\n-\n-  componentTest(\"can be opened and closed\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-    },\n-\n-    async test(assert) {\n-      assert.ok(exists(\"#my-dropdown.closed\"));\n-      assert.ok(!exists(\"#my-dropdown .widget-dropdown-body\"));\n-      await toggle();\n-      assert.equal(rowById(2).innerText.trim(), \"FooBar\");\n-      assert.ok(exists(\"#my-dropdown.opened\"));\n-      assert.ok(exists(\"#my-dropdown .widget-dropdown-body\"));\n-      await toggle();\n-      assert.ok(exists(\"#my-dropdown.closed\"));\n-      assert.ok(!exists(\"#my-dropdown .widget-dropdown-body\"));\n-    },\n-  });\n-\n-  componentTest(\"icon\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-      this.set(\"icon\", \"times\");\n-    },\n-\n-    test(assert) {\n-      assert.ok(exists(header().querySelector(\".d-icon-times\")));\n-    },\n-  });\n-\n-  componentTest(\"class\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-      this.set(\"class\", \"activated\");\n-    },\n-\n-    test(assert) {\n-      assert.ok(exists(\"#my-dropdown.activated\"));\n-    },\n-  });\n-\n-  componentTest(\"content with translatedLabel\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-    },\n-\n-    async test(assert) {\n-      await toggle();\n-      assert.equal(rowById(2).innerText.trim(), \"FooBar\");\n-    },\n-  });\n-\n-  componentTest(\"content with label\", {\n-    template: TEMPLATE,\n-\n-    _translations: I18n.translations,\n-\n-    beforeEach() {\n-      I18n.translations = { en: { js: { foo: \"FooBaz\" } } };\n-      this.setProperties(DEFAULT_CONTENT);\n-    },\n-\n-    afterEach() {\n-      I18n.translations = this._translations;\n-    },\n-\n-    async test(assert) {\n-      await toggle();\n-      assert.equal(rowById(1).innerText.trim(), \"FooBaz\");\n-    },\n-  });\n-\n-  componentTest(\"content with icon\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-    },\n-\n-    async test(assert) {\n-      await toggle();\n-      assert.ok(exists(rowById(3).querySelector(\".d-icon-times\")));\n-    },\n-  });\n-\n-  componentTest(\"content with html\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-    },\n-\n-    async test(assert) {\n-      await toggle();\n-      assert.equal(rowById(4).innerHTML.trim(), \"<span><b>baz</b></span>\");\n-    },\n-  });\n-\n-  componentTest(\"separator\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-    },\n-\n-    async test(assert) {\n-      await toggle();\n-      assert.ok(\n-        queryAll(\n-          \"#my-dropdown .widget-dropdown-item:nth-child(3)\"\n-        )[0].classList.contains(\"separator\")\n-      );\n-    },\n-  });\n-\n-  componentTest(\"hides widget if no content\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties({ content: null, label: \"foo\" });\n-    },\n-\n-    test(assert) {\n-      assert.notOk(exists(\"#my-dropdown .widget-dropdown-header\"));\n-      assert.notOk(exists(\"#my-dropdown .widget-dropdown-body\"));\n-    },\n-  });\n-\n-  componentTest(\"headerClass option\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-      this.set(\"options\", { headerClass: \"btn-small and-text\" });\n-    },\n-\n-    test(assert) {\n-      assert.ok(header().classList.contains(\"widget-dropdown-header\"));\n-      assert.ok(header().classList.contains(\"btn-small\"));\n-      assert.ok(header().classList.contains(\"and-text\"));\n-    },\n-  });\n-\n-  componentTest(\"bodyClass option\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-      this.set(\"options\", { bodyClass: \"gigantic and-yet-small\" });\n-    },\n-\n-    async test(assert) {\n-      await toggle();\n-      assert.ok(body().classList.contains(\"widget-dropdown-body\"));\n-      assert.ok(body().classList.contains(\"gigantic\"));\n-      assert.ok(body().classList.contains(\"and-yet-small\"));\n-    },\n-  });\n-\n-  componentTest(\"caret option\", {\n-    template: TEMPLATE,\n-\n-    beforeEach() {\n-      this.setProperties(DEFAULT_CONTENT);\n-      this.set(\"options\", { caret: true });\n-    },\n-\n-    test(assert) {\n-      assert.ok(\n-        exists(\"#my-dropdown .widget-dropdown-header .d-icon-caret-down\")\n-      );\n-    },\n-  });\n-});\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+\n+        this.on(\n+          \"onChange\",\n+          (item) => (this._element.querySelector(\"#test\").innerText = item.id)\n+        );\n+      },\n+\n+      async test(assert) {\n+        await toggle();\n+        await clickRowById(2);\n+        assert.equal(\n+          queryAll(\"#test\").text(),\n+          2,\n+          \"it calls the onChange actions\"\n+        );\n+      },\n+    });\n+\n+    componentTest(\"can be opened and closed\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+      },\n+\n+      async test(assert) {\n+        assert.ok(exists(\"#my-dropdown.closed\"));\n+        assert.ok(!exists(\"#my-dropdown .widget-dropdown-body\"));\n+        await toggle();\n+        assert.equal(rowById(2).innerText.trim(), \"FooBar\");\n+        assert.ok(exists(\"#my-dropdown.opened\"));\n+        assert.ok(exists(\"#my-dropdown .widget-dropdown-body\"));\n+        await toggle();\n+        assert.ok(exists(\"#my-dropdown.closed\"));\n+        assert.ok(!exists(\"#my-dropdown .widget-dropdown-body\"));\n+      },\n+    });\n+\n+    componentTest(\"icon\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+        this.set(\"icon\", \"times\");\n+      },\n+\n+      test(assert) {\n+        assert.ok(exists(header().querySelector(\".d-icon-times\")));\n+      },\n+    });\n+\n+    componentTest(\"class\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+        this.set(\"class\", \"activated\");\n+      },\n+\n+      test(assert) {\n+        assert.ok(exists(\"#my-dropdown.activated\"));\n+      },\n+    });\n+\n+    componentTest(\"content with translatedLabel\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+      },\n+\n+      async test(assert) {\n+        await toggle();\n+        assert.equal(rowById(2).innerText.trim(), \"FooBar\");\n+      },\n+    });\n+\n+    componentTest(\"content with label\", {\n+      template: TEMPLATE,\n+\n+      _translations: I18n.translations,\n+\n+      beforeEach() {\n+        I18n.translations = { en: { js: { foo: \"FooBaz\" } } };\n+        this.setProperties(DEFAULT_CONTENT);\n+      },\n+\n+      afterEach() {\n+        I18n.translations = this._translations;\n+      },\n+\n+      async test(assert) {\n+        await toggle();\n+        assert.equal(rowById(1).innerText.trim(), \"FooBaz\");\n+      },\n+    });\n+\n+    componentTest(\"content with icon\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+      },\n+\n+      async test(assert) {\n+        await toggle();\n+        assert.ok(exists(rowById(3).querySelector(\".d-icon-times\")));\n+      },\n+    });\n+\n+    componentTest(\"content with html\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+      },\n+\n+      async test(assert) {\n+        await toggle();\n+        assert.equal(rowById(4).innerHTML.trim(), \"<span><b>baz</b></span>\");\n+      },\n+    });\n+\n+    componentTest(\"separator\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+      },\n+\n+      async test(assert) {\n+        await toggle();\n+        assert.ok(\n+          queryAll(\n+            \"#my-dropdown .widget-dropdown-item:nth-child(3)\"\n+          )[0].classList.contains(\"separator\")\n+        );\n+      },\n+    });\n+\n+    componentTest(\"hides widget if no content\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties({ content: null, label: \"foo\" });\n+      },\n+\n+      test(assert) {\n+        assert.notOk(exists(\"#my-dropdown .widget-dropdown-header\"));\n+        assert.notOk(exists(\"#my-dropdown .widget-dropdown-body\"));\n+      },\n+    });\n+\n+    componentTest(\"headerClass option\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+        this.set(\"options\", { headerClass: \"btn-small and-text\" });\n+      },\n+\n+      test(assert) {\n+        assert.ok(header().classList.contains(\"widget-dropdown-header\"));\n+        assert.ok(header().classList.contains(\"btn-small\"));\n+        assert.ok(header().classList.contains(\"and-text\"));\n+      },\n+    });\n+\n+    componentTest(\"bodyClass option\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+        this.set(\"options\", { bodyClass: \"gigantic and-yet-small\" });\n+      },\n+\n+      async test(assert) {\n+        await toggle();\n+        assert.ok(body().classList.contains(\"widget-dropdown-body\"));\n+        assert.ok(body().classList.contains(\"gigantic\"));\n+        assert.ok(body().classList.contains(\"and-yet-small\"));\n+      },\n+    });\n+\n+    componentTest(\"caret option\", {\n+      template: TEMPLATE,\n+\n+      beforeEach() {\n+        this.setProperties(DEFAULT_CONTENT);\n+        this.set(\"options\", { caret: true });\n+      },\n+\n+      test(assert) {\n+        assert.ok(\n+          exists(\"#my-dropdown .widget-dropdown-header .d-icon-caret-down\")\n+        );\n+      },\n+    });\n+  }\n+);"
    },
    {
      "sha": "10924acedc3f9b059db09b0f8566c51003ae043c",
      "filename": "app/assets/javascripts/discourse/tests/setup-tests.js",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/setup-tests.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/setup-tests.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/setup-tests.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -33,9 +33,9 @@ const Modal = Plugin.Constructor;\n \n function AcceptanceModal(option, _relatedTarget) {\n   return this.each(function () {\n-    var $this = $(this);\n-    var data = $this.data(\"bs.modal\");\n-    var options = $.extend(\n+    let $this = $(this);\n+    let data = $this.data(\"bs.modal\");\n+    let options = $.extend(\n       {},\n       Modal.DEFAULTS,\n       $this.data(),\n@@ -202,8 +202,8 @@ export default function setupTests(app, container) {\n   // Load ES6 tests\n   function getUrlParameter(name) {\n     name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n-    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n-    var results = regex.exec(location.search);\n+    let regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n+    let results = regex.exec(location.search);\n     return results === null\n       ? \"\"\n       : decodeURIComponent(results[1].replace(/\\+/g, \" \"));"
    },
    {
      "sha": "155af39015268cd8fe0033ad98de44825a3341c5",
      "filename": "app/assets/javascripts/discourse/tests/unit/ember/resolver-test.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/ember/resolver-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/ember/resolver-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/ember/resolver-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -5,8 +5,8 @@ let originalTemplates;\n let resolver;\n \n function lookupTemplate(assert, name, expectedTemplate, message) {\n-  var parseName = resolver.parseName(name);\n-  var result = resolver.resolveTemplate(parseName);\n+  let parseName = resolver.parseName(name);\n+  let result = resolver.resolveTemplate(parseName);\n   assert.equal(result, expectedTemplate, message);\n }\n "
    },
    {
      "sha": "14b0b66d81ed5e599a96cb4f4b2b2f8f10ea83b1",
      "filename": "app/assets/javascripts/discourse/tests/unit/lib/click-track-test.js",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/lib/click-track-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/lib/click-track-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/lib/click-track-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -154,7 +154,7 @@ module(\"Unit | Utility | click-track\", function (hooks) {\n \n     assert.notOk(track(generateClickEventOn(\"a\")));\n \n-    var $link = fixture(\"a\").first();\n+    let $link = fixture(\"a\").first();\n     assert.ok($link.hasClass(\"no-href\"));\n     assert.equal($link.data(\"href\"), \"http://www.google.com/\");\n     assert.blank($link.attr(\"href\"));\n@@ -178,7 +178,7 @@ module(\"Unit | Utility | click-track\", function (hooks) {\n \n   function badgeClickCount(assert, id, expected) {\n     track(generateClickEventOn(\"#\" + id));\n-    var $badge = $(\"span.badge\", fixture(\"#\" + id).first());\n+    let $badge = $(\"span.badge\", fixture(\"#\" + id).first());\n     assert.equal(parseInt($badge.html(), 10), expected);\n   }\n \n@@ -200,7 +200,7 @@ module(\"Unit | Utility | click-track\", function (hooks) {\n \n   function testOpenInANewTab(description, clickEventModifier) {\n     test(description, async function (assert) {\n-      var clickEvent = generateClickEventOn(\"a\");\n+      let clickEvent = generateClickEventOn(\"a\");\n       clickEventModifier(clickEvent);\n       assert.ok(track(clickEvent));\n       assert.notOk(clickEvent.defaultPrevented);"
    },
    {
      "sha": "e8d7cd3db90c1e0894ea3f5fdf1ee59d61f0b266",
      "filename": "app/assets/javascripts/discourse/tests/unit/lib/computed-test.js",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/lib/computed-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/lib/computed-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/lib/computed-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -45,7 +45,7 @@ discourseModule(\"Unit | Utility | computed\", function (hooks) {\n   });\n \n   test(\"propertyEqual\", function (assert) {\n-    var t = EmberObject.extend({\n+    let t = EmberObject.extend({\n       same: propertyEqual(\"cookies\", \"biscuits\"),\n     }).create({\n       cookies: 10,\n@@ -58,7 +58,7 @@ discourseModule(\"Unit | Utility | computed\", function (hooks) {\n   });\n \n   test(\"propertyNotEqual\", function (assert) {\n-    var t = EmberObject.extend({\n+    let t = EmberObject.extend({\n       diff: propertyNotEqual(\"cookies\", \"biscuits\"),\n     }).create({\n       cookies: 10,\n@@ -71,7 +71,7 @@ discourseModule(\"Unit | Utility | computed\", function (hooks) {\n   });\n \n   test(\"fmt\", function (assert) {\n-    var t = EmberObject.extend({\n+    let t = EmberObject.extend({\n       exclaimyUsername: fmt(\"username\", \"!!! %@ !!!\"),\n       multiple: fmt(\"username\", \"mood\", \"%@ is %@\"),\n     }).create({\n@@ -105,7 +105,7 @@ discourseModule(\"Unit | Utility | computed\", function (hooks) {\n   });\n \n   test(\"i18n\", function (assert) {\n-    var t = EmberObject.extend({\n+    let t = EmberObject.extend({\n       exclaimyUsername: i18n(\"username\", \"!!! %@ !!!\"),\n       multiple: i18n(\"username\", \"mood\", \"%@ is %@\"),\n     }).create({\n@@ -139,7 +139,7 @@ discourseModule(\"Unit | Utility | computed\", function (hooks) {\n   });\n \n   test(\"url\", function (assert) {\n-    var t, testClass;\n+    let t, testClass;\n \n     testClass = EmberObject.extend({\n       userUrl: url(\"username\", \"/u/%@\"),"
    },
    {
      "sha": "71cc9bc95a4e4473fd97e7e442c935f5b9da5a48",
      "filename": "app/assets/javascripts/discourse/tests/unit/lib/formatter-test.js",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/lib/formatter-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/lib/formatter-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/lib/formatter-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -159,7 +159,7 @@ discourseModule(\"Unit | Utility | formatter\", function (hooks) {\n     assert.equal(formatDays(-500), shortDateYear(-500));\n     assert.equal(formatDays(-365 * 2 - 1), shortDateYear(-365 * 2 - 1)); // one leap year\n \n-    var originalValue = this.siteSettings.relative_date_duration;\n+    let originalValue = this.siteSettings.relative_date_duration;\n     this.siteSettings.relative_date_duration = 7;\n     assert.equal(formatDays(7), \"7d\");\n     assert.equal(formatDays(8), shortDate(8));\n@@ -203,9 +203,9 @@ discourseModule(\"Unit | Utility | formatter\", function (hooks) {\n   });\n \n   test(\"autoUpdatingRelativeAge\", function (assert) {\n-    var d = moment().subtract(1, \"day\").toDate();\n+    let d = moment().subtract(1, \"day\").toDate();\n \n-    var $elem = $(autoUpdatingRelativeAge(d));\n+    let $elem = $(autoUpdatingRelativeAge(d));\n     assert.equal($elem.data(\"format\"), \"tiny\");\n     assert.equal($elem.data(\"time\"), d.getTime());\n     assert.equal($elem.attr(\"title\"), undefined);\n@@ -233,8 +233,8 @@ discourseModule(\"Unit | Utility | formatter\", function (hooks) {\n   });\n \n   test(\"updateRelativeAge\", function (assert) {\n-    var d = new Date();\n-    var $elem = $(autoUpdatingRelativeAge(d));\n+    let d = new Date();\n+    let $elem = $(autoUpdatingRelativeAge(d));\n     $elem.data(\"time\", d.getTime() - 2 * 60 * 1000);\n \n     updateRelativeAge($elem);"
    },
    {
      "sha": "02be685e6b52faaceb92c079edd7c3dd0c119872",
      "filename": "app/assets/javascripts/discourse/tests/unit/lib/uploads-test.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/lib/uploads-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/lib/uploads-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/lib/uploads-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -194,7 +194,7 @@ discourseModule(\"Unit | Utility | uploads\", function () {\n \n   test(\"isImage\", function (assert) {\n     [\"png\", \"webp\", \"jpg\", \"jpeg\", \"gif\", \"ico\"].forEach((extension) => {\n-      var image = \"image.\" + extension;\n+      let image = \"image.\" + extension;\n       assert.ok(isImage(image), image + \" is recognized as an image\");\n       assert.ok(\n         isImage(\"http://foo.bar/path/to/\" + image),"
    },
    {
      "sha": "6739b729a79edb24c27a66363e2a202a6cc5e211",
      "filename": "app/assets/javascripts/discourse/tests/unit/lib/utilities-test.js",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/lib/utilities-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/lib/utilities-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/lib/utilities-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -71,7 +71,7 @@ discourseModule(\"Unit | Utilities\", function () {\n   });\n \n   test(\"avatarUrl\", function (assert) {\n-    var rawSize = getRawSize;\n+    let rawSize = getRawSize;\n     assert.blank(avatarUrl(\"\", \"tiny\"), \"no template returns blank\");\n     assert.equal(\n       avatarUrl(\"/fake/template/{size}.png\", \"tiny\"),\n@@ -85,7 +85,7 @@ discourseModule(\"Unit | Utilities\", function () {\n     );\n   });\n \n-  var setDevicePixelRatio = function (value) {\n+  let setDevicePixelRatio = function (value) {\n     if (Object.defineProperty && !window.hasOwnProperty(\"devicePixelRatio\")) {\n       Object.defineProperty(window, \"devicePixelRatio\", { value: 2 });\n     } else {\n@@ -94,10 +94,10 @@ discourseModule(\"Unit | Utilities\", function () {\n   };\n \n   test(\"avatarImg\", function (assert) {\n-    var oldRatio = window.devicePixelRatio;\n+    let oldRatio = window.devicePixelRatio;\n     setDevicePixelRatio(2);\n \n-    var avatarTemplate = \"/path/to/avatar/{size}.png\";\n+    let avatarTemplate = \"/path/to/avatar/{size}.png\";\n     assert.equal(\n       avatarImg({ avatarTemplate: avatarTemplate, size: \"tiny\" }),\n       \"<img alt='' width='20' height='20' src='/path/to/avatar/40.png' class='avatar'>\",\n@@ -164,7 +164,7 @@ discourseModule(\"Unit | Utilities\", function () {\n   });\n \n   test(\"caretRowCol\", function (assert) {\n-    var textarea = document.createElement(\"textarea\");\n+    let textarea = document.createElement(\"textarea\");\n     const content = document.createTextNode(\"01234\\n56789\\n012345\");\n     textarea.appendChild(content);\n     document.body.appendChild(textarea);"
    },
    {
      "sha": "0a2e29d0e5f417a34f0b39ed618659fb6a48d2b9",
      "filename": "app/assets/javascripts/discourse/tests/unit/mixins/singleton-test.js",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/mixins/singleton-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/mixins/singleton-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/mixins/singleton-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -4,10 +4,10 @@ import Singleton from \"discourse/mixins/singleton\";\n \n module(\"Unit | Mixin | singleton\", function () {\n   test(\"current\", function (assert) {\n-    var DummyModel = EmberObject.extend({});\n+    let DummyModel = EmberObject.extend({});\n     DummyModel.reopenClass(Singleton);\n \n-    var current = DummyModel.current();\n+    let current = DummyModel.current();\n     assert.present(current, \"current returns the current instance\");\n     assert.equal(\n       current,\n@@ -22,9 +22,9 @@ module(\"Unit | Mixin | singleton\", function () {\n   });\n \n   test(\"currentProp reading\", function (assert) {\n-    var DummyModel = EmberObject.extend({});\n+    let DummyModel = EmberObject.extend({});\n     DummyModel.reopenClass(Singleton);\n-    var current = DummyModel.current();\n+    let current = DummyModel.current();\n \n     assert.blank(\n       DummyModel.currentProp(\"evil\"),\n@@ -39,14 +39,14 @@ module(\"Unit | Mixin | singleton\", function () {\n   });\n \n   test(\"currentProp writing\", function (assert) {\n-    var DummyModel = EmberObject.extend({});\n+    let DummyModel = EmberObject.extend({});\n     DummyModel.reopenClass(Singleton);\n \n     assert.blank(\n       DummyModel.currentProp(\"adventure\"),\n       \"by default attributes are blank\"\n     );\n-    var result = DummyModel.currentProp(\"adventure\", \"time\");\n+    let result = DummyModel.currentProp(\"adventure\", \"time\");\n     assert.equal(result, \"time\", \"it returns the new value\");\n     assert.equal(\n       DummyModel.currentProp(\"adventure\"),\n@@ -70,7 +70,7 @@ module(\"Unit | Mixin | singleton\", function () {\n   });\n \n   test(\"createCurrent\", function (assert) {\n-    var Shoe = EmberObject.extend({});\n+    let Shoe = EmberObject.extend({});\n     Shoe.reopenClass(Singleton, {\n       createCurrent: function () {\n         return Shoe.create({ toes: 5 });\n@@ -85,7 +85,7 @@ module(\"Unit | Mixin | singleton\", function () {\n   });\n \n   test(\"createCurrent that returns null\", function (assert) {\n-    var Missing = EmberObject.extend({});\n+    let Missing = EmberObject.extend({});\n     Missing.reopenClass(Singleton, {\n       createCurrent: function () {\n         return null;"
    },
    {
      "sha": "82b5e5280575e942a78157ec1c7ea5ab385e0e18",
      "filename": "app/assets/javascripts/discourse/tests/unit/models/post-test.js",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/post-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/post-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/models/post-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -18,29 +18,29 @@ function buildPost(args) {\n \n module(\"Unit | Model | post\", function () {\n   test(\"defaults\", function (assert) {\n-    var post = Post.create({ id: 1 });\n+    let post = Post.create({ id: 1 });\n     assert.blank(post.get(\"deleted_at\"), \"it has no deleted_at by default\");\n     assert.blank(post.get(\"deleted_by\"), \"there is no deleted_by by default\");\n   });\n \n   test(\"new_user\", function (assert) {\n-    var post = Post.create({ trust_level: 0 });\n+    let post = Post.create({ trust_level: 0 });\n     assert.ok(post.get(\"new_user\"), \"post is from a new user\");\n \n     post.set(\"trust_level\", 1);\n     assert.ok(!post.get(\"new_user\"), \"post is no longer from a new user\");\n   });\n \n   test(\"firstPost\", function (assert) {\n-    var post = Post.create({ post_number: 1 });\n+    let post = Post.create({ post_number: 1 });\n     assert.ok(post.get(\"firstPost\"), \"it's the first post\");\n \n     post.set(\"post_number\", 10);\n     assert.ok(!post.get(\"firstPost\"), \"post is no longer the first post\");\n   });\n \n   test(\"updateFromPost\", function (assert) {\n-    var post = Post.create({\n+    let post = Post.create({\n       post_number: 1,\n       raw: \"hello world\",\n     });"
    },
    {
      "sha": "b549826f1adad06ac24a3bf302aaf27e25778beb",
      "filename": "app/assets/javascripts/discourse/tests/unit/models/rest-model-test.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/rest-model-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/rest-model-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/models/rest-model-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -15,7 +15,7 @@ module(\"Unit | Model | rest-model\", function () {\n       },\n     });\n \n-    var g = Grape.create({ store, percent: 0.4 });\n+    let g = Grape.create({ store, percent: 0.4 });\n     assert.equal(g.get(\"inverse\"), 0.6, \"it runs `munge` on `create`\");\n   });\n "
    },
    {
      "sha": "4e11fe0324338506705efd906fe3439ef3e914ee",
      "filename": "app/assets/javascripts/discourse/tests/unit/models/topic-details-test.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/topic-details-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/topic-details-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/models/topic-details-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -9,13 +9,13 @@ function buildDetails(id) {\n \n module(\"Unit | Model | topic-details\", function () {\n   test(\"defaults\", function (assert) {\n-    var details = buildDetails(1234);\n+    let details = buildDetails(1234);\n     assert.present(details, \"the details are present by default\");\n     assert.ok(!details.get(\"loaded\"), \"details are not loaded by default\");\n   });\n \n   test(\"updateFromJson\", function (assert) {\n-    var details = buildDetails(1234);\n+    let details = buildDetails(1234);\n \n     details.updateFromJson({\n       allowed_users: [{ username: \"eviltrout\" }],"
    },
    {
      "sha": "50cd70e739cc7caf2a9aefa8f57cd0e32be3e7dd",
      "filename": "app/assets/javascripts/discourse/tests/unit/models/user-action-test.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/user-action-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/user-action-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/models/user-action-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -3,7 +3,7 @@ import UserAction from \"discourse/models/user-action\";\n \n module(\"Unit | Model | user-action\", function () {\n   test(\"collapsing likes\", function (assert) {\n-    var actions = UserAction.collapseStream([\n+    let actions = UserAction.collapseStream([\n       UserAction.create({\n         action_type: UserAction.TYPES.likes_given,\n         topic_id: 1,"
    },
    {
      "sha": "8ba20c9cc6f3cdef46c0a969a96fb339aaf195b6",
      "filename": "app/assets/javascripts/discourse/tests/unit/models/user-stream-test.js",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/user-stream-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/user-stream-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/models/user-stream-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -4,8 +4,8 @@ import UserAction from \"discourse/models/user-action\";\n \n module(\"Unit | Model | user-stream\", function () {\n   test(\"basics\", function (assert) {\n-    var user = User.create({ id: 1, username: \"eviltrout\" });\n-    var stream = user.get(\"stream\");\n+    let user = User.create({ id: 1, username: \"eviltrout\" });\n+    let stream = user.get(\"stream\");\n     assert.present(stream, \"a user has a stream by default\");\n     assert.equal(\n       stream.get(\"user\"),\n@@ -25,8 +25,8 @@ module(\"Unit | Model | user-stream\", function () {\n   });\n \n   test(\"filterParam\", function (assert) {\n-    var user = User.create({ id: 1, username: \"eviltrout\" });\n-    var stream = user.get(\"stream\");\n+    let user = User.create({ id: 1, username: \"eviltrout\" });\n+    let stream = user.get(\"stream\");\n \n     // defaults to posts/topics\n     assert.equal(stream.get(\"filterParam\"), \"4,5\");"
    },
    {
      "sha": "0b95967b12f04d8a5b153fa8f3f418685e30f7cf",
      "filename": "app/assets/javascripts/discourse/tests/unit/models/user-test.js",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/user-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/discourse/tests/unit/models/user-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/unit/models/user-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -7,7 +7,7 @@ import sinon from \"sinon\";\n \n module(\"Unit | Model | user\", function () {\n   test(\"staff\", function (assert) {\n-    var user = User.create({ id: 1, username: \"eviltrout\" });\n+    let user = User.create({ id: 1, username: \"eviltrout\" });\n \n     assert.ok(!user.get(\"staff\"), \"user is not staff\");\n \n@@ -19,7 +19,7 @@ module(\"Unit | Model | user\", function () {\n   });\n \n   test(\"searchContext\", function (assert) {\n-    var user = User.create({ id: 1, username: \"EvilTrout\" });\n+    let user = User.create({ id: 1, username: \"EvilTrout\" });\n \n     assert.deepEqual(\n       user.get(\"searchContext\"),\n@@ -29,7 +29,7 @@ module(\"Unit | Model | user\", function () {\n   });\n \n   test(\"isAllowedToUploadAFile\", function (assert) {\n-    var user = User.create({ trust_level: 0, admin: true });\n+    let user = User.create({ trust_level: 0, admin: true });\n     assert.ok(\n       user.isAllowedToUploadAFile(\"image\"),\n       \"admin can always upload a file\""
    },
    {
      "sha": "f71ac900ef2995cf4ed7f191b6937208d059952a",
      "filename": "app/assets/javascripts/embed-application.js",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/embed-application.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/embed-application.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/embed-application.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -9,11 +9,11 @@\n   }\n \n   function clickPostLink(e) {\n-    var postId = e.target.getAttribute(\"data-link-to-post\");\n+    let postId = e.target.getAttribute(\"data-link-to-post\");\n     if (postId) {\n-      var postElement = document.getElementById(\"post-\" + postId);\n+      let postElement = document.getElementById(\"post-\" + postId);\n       if (postElement) {\n-        var rect = postElement.getBoundingClientRect();\n+        let rect = postElement.getBoundingClientRect();\n         if (rect && rect.top) {\n           postUp({ type: \"discourse-scroll\", top: rect.top });\n           e.preventDefault();\n@@ -25,9 +25,9 @@\n \n   window.onload = function () {\n     // get state info from data attribute\n-    var embedState = document.querySelector(\"[data-embed-state]\");\n-    var state = \"unknown\";\n-    var embedId = null;\n+    let embedState = document.querySelector(\"[data-embed-state]\");\n+    let state = \"unknown\";\n+    let embedId = null;\n     if (embedState) {\n       state = embedState.getAttribute(\"data-embed-state\");\n       embedId = embedState.getAttribute(\"data-embed-id\");\n@@ -41,23 +41,23 @@\n       embedId,\n     });\n \n-    var postLinks = document.querySelectorAll(\"a[data-link-to-post]\"),\n+    let postLinks = document.querySelectorAll(\"a[data-link-to-post]\"),\n       i;\n \n     for (i = 0; i < postLinks.length; i++) {\n       postLinks[i].onclick = clickPostLink;\n     }\n \n     // Make sure all links in the iframe point to _blank\n-    var cookedLinks = document.querySelectorAll(\".cooked a\");\n+    let cookedLinks = document.querySelectorAll(\".cooked a\");\n     for (i = 0; i < cookedLinks.length; i++) {\n       cookedLinks[i].target = \"_blank\";\n     }\n \n     // Adjust all names\n-    var names = document.querySelectorAll(\".username a\");\n+    let names = document.querySelectorAll(\".username a\");\n     for (i = 0; i < names.length; i++) {\n-      var username = names[i].innerHTML;\n+      let username = names[i].innerHTML;\n       if (username) {\n         /* global BreakString */\n         names[i].innerHTML = new BreakString(username).break();"
    },
    {
      "sha": "c9d2c714a404846a8b40e3f2498f6929c70190cb",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/bbcode-block.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/bbcode-block.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/bbcode-block.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/bbcode-block.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -191,7 +191,7 @@ function findInlineCloseTag(state, openTag, start, max) {\n }\n \n function applyBBCode(state, startLine, endLine, silent, md) {\n-  var nextLine,\n+  let nextLine,\n     oldParent,\n     oldLineMax,\n     rule,"
    },
    {
      "sha": "069a88c2f32d5da050076ebac1c622bb7991efa5",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/helpers.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/helpers.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/helpers.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/helpers.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -15,7 +15,7 @@ export default null;\n // based off https://github.com/markdown-it/markdown-it-emoji/blob/master/dist/markdown-it-emoji.js\n //\n export function textReplace(state, callback, skipAllLinks) {\n-  var i,\n+  let i,\n     j,\n     l,\n     tokens,"
    },
    {
      "sha": "e876499a252779fc8a18c768a1090ed302098a40",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/html-img.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/html-img.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/html-img.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/html-img.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -5,7 +5,7 @@\n const REGEX = /^<img.*\\\\?>\\s*$/i;\n \n function rule(state, startLine, endLine) {\n-  var nextLine,\n+  let nextLine,\n     token,\n     lineText,\n     pos = state.bMarks[startLine] + state.tShift[startLine],"
    },
    {
      "sha": "5781c9df2039b4f77f117cd09163a94e71d914a1",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/newline.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/newline.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/newline.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/newline.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -5,7 +5,7 @@\n // this is a freedom patch, so careful, may break on updates\n \n function newline(state, silent) {\n-  var token,\n+  let token,\n     pmax,\n     max,\n     pos = state.pos;"
    },
    {
      "sha": "79c5166769100cafe953dbacfba5f60837789183",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/paragraph.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/paragraph.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/paragraph.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/paragraph.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -4,7 +4,7 @@\n // link starts with a space, so we can bypass a onebox\n // this is a freedom patch, so careful, may break on updates\n function paragraph(state, startLine /*, endLine*/) {\n-  var content,\n+  let content,\n     terminate,\n     i,\n     l,"
    },
    {
      "sha": "45dc70ebcd05cd2d9fc9dbdcec21f3fcd7f05b6e",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/quotes.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/quotes.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/quotes.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/quotes.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -113,7 +113,7 @@ const rule = {\n       if (offTopicQuote) {\n         const topicInfo = options.getTopicInfo(topicId);\n         if (topicInfo) {\n-          var href = topicInfo.href;\n+          let href = topicInfo.href;\n           if (postNumber > 0) {\n             href += \"/\" + postNumber;\n           }"
    },
    {
      "sha": "8b34244611295288d0836596572776341ff807b0",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/resize-controls.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/resize-controls.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/pretty-text/engines/discourse-markdown/resize-controls.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/resize-controls.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -90,8 +90,8 @@ export function setup(helper) {\n         const imageIndex = token.attrIndex(\"index-image\");\n \n         if (scaleIndex !== -1) {\n-          var selectedScale = token.attrs[scaleIndex][1];\n-          var index = token.attrs[imageIndex][1];\n+          let selectedScale = token.attrs[scaleIndex][1];\n+          let index = token.attrs[imageIndex][1];\n \n           let result = \"<span class='image-wrapper'>\";\n           result += oldRule(tokens, idx, options, env, slf);"
    },
    {
      "sha": "7f935e4fb462fd00a42c641abafe31cabf137810",
      "filename": "app/assets/javascripts/wizard/test/acceptance/wizard-test.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/wizard/test/acceptance/wizard-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/wizard/test/acceptance/wizard-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/wizard/test/acceptance/wizard-test.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -3,7 +3,7 @@ import { module, test } from \"qunit\";\n import { run } from \"@ember/runloop\";\n import startApp from \"wizard/test/helpers/start-app\";\n \n-var wizard;\n+let wizard;\n module(\"Acceptance: wizard\", {\n   beforeEach() {\n     wizard = startApp();"
    },
    {
      "sha": "3aec94db05c3c622c74774393d3023b241a73c88",
      "filename": "app/assets/javascripts/wizard/test/test_helper.js",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/wizard/test/test_helper.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/app/assets/javascripts/wizard/test/test_helper.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/wizard/test/test_helper.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -25,7 +25,7 @@\n //= require test-shims\n \n // Trick JSHint into allow document.write\n-var d = document;\n+let d = document;\n d.write(\n   '<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>'\n );\n@@ -40,14 +40,14 @@ if (window.Logster) {\n }\n Ember.Test.adapter = window.QUnitAdapter.create();\n \n-var createPretendServer = requirejs(\n+let createPretendServer = requirejs(\n   \"wizard/test/wizard-pretender\",\n   null,\n   null,\n   false\n ).default;\n \n-var server;\n+let server;\n QUnit.testStart(function () {\n   server = createPretendServer();\n });\n@@ -56,8 +56,8 @@ QUnit.testDone(function () {\n   server.shutdown();\n });\n \n-var _testApp = requirejs(\"wizard/test/helpers/start-app\").default();\n-var _buildResolver = requirejs(\"discourse-common/resolver\").buildResolver;\n+let _testApp = requirejs(\"wizard/test/helpers/start-app\").default();\n+let _buildResolver = requirejs(\"discourse-common/resolver\").buildResolver;\n window.setResolver(_buildResolver(\"wizard\").create({ namespace: _testApp }));\n \n Object.keys(requirejs.entries).forEach(function (entry) {"
    },
    {
      "sha": "9dad6d2d8ed24205f73eb57b6883bfe135a3eefe",
      "filename": "package.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/package.json",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/package.json",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/package.json?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -14,7 +14,7 @@\n     \"bootstrap\": \"v3.4.1\",\n     \"chart.js\": \"2.9.3\",\n     \"chartjs-plugin-datalabels\": \"^0.7.0\",\n-    \"eslint-config-discourse\": \"^1.1.5\",\n+    \"eslint-config-discourse\": \"^1.1.8\",\n     \"handlebars\": \"^4.7.0\",\n     \"highlight.js\": \"https://github.com/highlightjs/highlight.js\",\n     \"intersection-observer\": \"^0.5.1\","
    },
    {
      "sha": "8078671868c5ee631d45fdebfd70ea1330f0909d",
      "filename": "plugins/lazy-yt/assets/javascripts/lazyYT.js",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/plugins/lazy-yt/assets/javascripts/lazyYT.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/plugins/lazy-yt/assets/javascripts/lazyYT.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/plugins/lazy-yt/assets/javascripts/lazyYT.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -15,7 +15,7 @@\n   \"use strict\";\n \n   function setUp($el, settings) {\n-    var width = $el.data(\"width\"),\n+    let width = $el.data(\"width\"),\n       height = $el.data(\"height\"),\n       ratio = $el.data(\"ratio\") ? $el.data(\"ratio\") : settings.default_ratio,\n       id = $el.data(\"youtube-id\"),\n@@ -88,7 +88,7 @@\n     innerHtml.push(\"</div>\"); // .html5-title-text-wrapper\n     innerHtml.push(\"</div>\"); // end of Video title .html5-info-bar\n \n-    var prefetchedThumbnail = $el[0].querySelector(\".ytp-thumbnail-image\");\n+    let prefetchedThumbnail = $el[0].querySelector(\".ytp-thumbnail-image\");\n \n     $el\n       .css({\n@@ -158,15 +158,15 @@\n   }\n \n   $.fn.lazyYT = function (newSettings) {\n-    var defaultSettings = {\n+    let defaultSettings = {\n       default_ratio: \"16:9\",\n       callback: null, // ToDO execute callback if given\n       container_class: \"lazyYT-container\",\n     };\n-    var settings = $.extend(defaultSettings, newSettings);\n+    let settings = $.extend(defaultSettings, newSettings);\n \n     return this.each(function () {\n-      var $el = $(this).addClass(settings.container_class);\n+      let $el = $(this).addClass(settings.container_class);\n       setUp($el, settings);\n     });\n   };"
    },
    {
      "sha": "e004aefa75966488f6baef3e34a3d7d0ca6a3f20",
      "filename": "plugins/poll/assets/javascripts/lib/discourse-markdown/poll.js.es6",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/plugins/poll/assets/javascripts/lib/discourse-markdown/poll.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/plugins/poll/assets/javascripts/lib/discourse-markdown/poll.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/plugins/poll/assets/javascripts/lib/discourse-markdown/poll.js.es6?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -302,7 +302,7 @@ export function setup(helper) {\n  * http://www.opensource.org/licenses/bsd-license\n  */\n function md5cycle(x, k) {\n-  var a = x[0],\n+  let a = x[0],\n     b = x[1],\n     c = x[2],\n     d = x[3];\n@@ -406,14 +406,14 @@ function md51(s) {\n   // Converts the string to UTF-8 \"bytes\"\n   s = unescape(encodeURI(s));\n \n-  var n = s.length,\n+  let n = s.length,\n     state = [1732584193, -271733879, -1732584194, 271733878],\n     i;\n   for (i = 64; i <= s.length; i += 64) {\n     md5cycle(state, md5blk(s.substring(i - 64, i)));\n   }\n   s = s.substring(i - 64);\n-  var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+  let tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n   for (i = 0; i < s.length; i++) {\n     tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);\n   }\n@@ -431,7 +431,7 @@ function md51(s) {\n \n function md5blk(s) {\n   /* I figured global was faster.   */\n-  var md5blks = [],\n+  let md5blks = [],\n     i; /* Andy King said do it this way. */\n   for (i = 0; i < 64; i += 4) {\n     md5blks[i >> 2] =\n@@ -443,10 +443,10 @@ function md5blk(s) {\n   return md5blks;\n }\n \n-var hex_chr = \"0123456789abcdef\".split(\"\");\n+let hex_chr = \"0123456789abcdef\".split(\"\");\n \n function rhex(n) {\n-  var s = \"\",\n+  let s = \"\",\n     j = 0;\n   for (; j < 4; j++) {\n     s += hex_chr[(n >> (j * 8 + 4)) & 0x0f] + hex_chr[(n >> (j * 8)) & 0x0f];\n@@ -455,7 +455,7 @@ function rhex(n) {\n }\n \n function hex(x) {\n-  for (var i = 0; i < x.length; i++) {\n+  for (let i = 0; i < x.length; i++) {\n     x[i] = rhex(x[i]);\n   }\n   return x.join(\"\");"
    },
    {
      "sha": "cd8bf345931ba3fcf7606a1622dd700d66310ac3",
      "filename": "plugins/poll/assets/javascripts/lib/even-round.js.es6",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/plugins/poll/assets/javascripts/lib/even-round.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/plugins/poll/assets/javascripts/lib/even-round.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/plugins/poll/assets/javascripts/lib/even-round.js.es6?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -4,7 +4,7 @@ function sumsUpTo100(percentages) {\n }\n \n export default function (percentages) {\n-  var decimals = percentages.map((a) => a % 1);\n+  let decimals = percentages.map((a) => a % 1);\n   const sumOfDecimals = Math.ceil(decimals.reduce((a, b) => a + b));\n   // compensate error by adding 1 to n items with the greatest decimal part\n   for (let i = 0, max = decimals.length; i < sumOfDecimals && i < max; i++) {"
    },
    {
      "sha": "5972107295a729995e46af4e1d2efaebd15320ba",
      "filename": "plugins/poll/assets/javascripts/widgets/discourse-poll.js.es6",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/plugins/poll/assets/javascripts/widgets/discourse-poll.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/plugins/poll/assets/javascripts/widgets/discourse-poll.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/plugins/poll/assets/javascripts/widgets/discourse-poll.js.es6?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -553,7 +553,7 @@ function pieChartConfig(data, labels, opts = {}) {\n }\n \n function stripHtml(html) {\n-  var doc = new DOMParser().parseFromString(html, \"text/html\");\n+  let doc = new DOMParser().parseFromString(html, \"text/html\");\n   return doc.body.textContent || \"\";\n }\n "
    },
    {
      "sha": "9438b34679f3ee02ea3f9bd14a15e1ffd40e9566",
      "filename": "test/run-qunit.js",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/test/run-qunit.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/test/run-qunit.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/run-qunit.js?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -5,7 +5,7 @@\n // Requires chrome-launcher and chrome-remote-interface from npm\n // An up-to-date version of chrome is also required\n \n-var args = process.argv.slice(2);\n+let args = process.argv.slice(2);\n \n if (args.length < 1 || args.length > 3) {\n   console.log(\"Usage: node run-qunit.js <URL> <timeout> <result_file>\");\n@@ -128,9 +128,9 @@ async function runAllTests() {\n     }\n \n     const timeout = parseInt(args[1] || 300000, 10);\n-    var start = Date.now();\n+    let start = Date.now();\n \n-    var interval;\n+    let interval;\n \n     let runTests = async function () {\n       if (Date.now() > start + timeout) {\n@@ -218,7 +218,7 @@ function logQUnit() {\n       return;\n     }\n \n-    var msg = \"\\n    Assertion Failed:\";\n+    let msg = \"\\n    Assertion Failed:\";\n     if (context.message) {\n       msg += \" \" + context.message;\n     }\n@@ -256,7 +256,7 @@ function logQUnit() {\n       console.log(\"\\n\");\n     }\n \n-    var stats = [\n+    let stats = [\n       \"Time: \" + context.runtime + \"ms\",\n       \"Total: \" + context.total,\n       \"Passed: \" + context.passed,"
    },
    {
      "sha": "a25b5e3e1b3f0b722a4efd312a6c958a7f1a2b65",
      "filename": "yarn.lock",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/discourse/discourse/blob/c6a104295045ff95fbba12822e429cfe4fea2e84/yarn.lock",
      "raw_url": "https://github.com/discourse/discourse/raw/c6a104295045ff95fbba12822e429cfe4fea2e84/yarn.lock",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/yarn.lock?ref=c6a104295045ff95fbba12822e429cfe4fea2e84",
      "patch": "@@ -935,10 +935,10 @@ escape-string-regexp@^1.0.5:\n   resolved \"https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4\"\n   integrity sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=\n \n-eslint-config-discourse@^1.1.5:\n-  version \"1.1.5\"\n-  resolved \"https://registry.yarnpkg.com/eslint-config-discourse/-/eslint-config-discourse-1.1.5.tgz#29e274eeccd3071d86aaa9333c6550ceeb23b1cd\"\n-  integrity sha512-/2DgKfIAKRHP+ktNvYCvK2z0NVmgpMe4le1HcrXtj0EzRswqsUN1kbaU81X3cnG4iEuKxyf0n0Hp+2kHuneatg==\n+eslint-config-discourse@^1.1.8:\n+  version \"1.1.8\"\n+  resolved \"https://registry.yarnpkg.com/eslint-config-discourse/-/eslint-config-discourse-1.1.8.tgz#c297831876811ea08203aa348d1ba2a963b2ae78\"\n+  integrity sha512-ZSQfhliiO5Cfa7WcKoMkN4wW/1rBJpecpMJpfjiFsElfgPj4EV4Pzksi5CvFnRbJDoZh6DYYrQfO+tW062VOUA==\n   dependencies:\n     babel-eslint \"^10.1.0\"\n     ember-template-lint \"^2.11.0\"\n@@ -948,7 +948,7 @@ eslint-config-discourse@^1.1.5:\n     eslint-plugin-ember \"^6.10.0\"\n     eslint-plugin-lodash \"^7.1.0\"\n     eslint-plugin-node \"^8.0.0\"\n-    prettier \"2.1.2\"\n+    prettier \"2.2.1\"\n \n eslint-plugin-discourse-ember@latest:\n   version \"0.0.3\"\n@@ -2345,10 +2345,10 @@ pretender@^1.6:\n     fake-xml-http-request \"^1.6.0\"\n     route-recognizer \"^0.3.3\"\n \n-prettier@2.1.2:\n-  version \"2.1.2\"\n-  resolved \"https://registry.yarnpkg.com/prettier/-/prettier-2.1.2.tgz#3050700dae2e4c8b67c4c3f666cdb8af405e1ce5\"\n-  integrity sha512-16c7K+x4qVlJg9rEbXl7HEGmQyZlG4R9AgP+oHKRMsMsuk8s+ATStlf1NpDqyBI1HpVyfjLOeMhH2LvuNvV5Vg==\n+prettier@2.2.1:\n+  version \"2.2.1\"\n+  resolved \"https://registry.yarnpkg.com/prettier/-/prettier-2.2.1.tgz#795a1a78dd52f073da0cd42b21f9c91381923ff5\"\n+  integrity sha512-PqyhM2yCjg/oKkFPtTGUojv7gnZAoG80ttl45O6x2Ug/rMJw4wcc9k6aaf2hibP7BGVCCM33gZoGjyvt9mm16Q==\n \n process-nextick-args@~2.0.0:\n   version \"2.0.1\""
    }
  ]
}
