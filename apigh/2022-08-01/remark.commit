{
  "sha": "86d059bf9970bd136b71a246babd4f907790b70f",
  "node_id": "C_kwDOBtgov9oAKDg2ZDA1OWJmOTk3MGJkMTM2YjcxYTI0NmJhYmQ0ZjkwNzc5MGI3MGY",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2022-07-27T00:52:13Z"
    },
    "committer": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2022-07-29T17:07:49Z"
    },
    "message": "move templates from rakyll/statik to go:embed\n\nThere is no need for the rakyll/statik package starting with Go 1.16,\nwhich provides us with tools for embedding files\nwithout third-party libraries.",
    "tree": {
      "sha": "0682bb225015d8c6dc3fab508a84ca1b8ab0fe10",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/0682bb225015d8c6dc3fab508a84ca1b8ab0fe10"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/86d059bf9970bd136b71a246babd4f907790b70f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/86d059bf9970bd136b71a246babd4f907790b70f",
  "html_url": "https://github.com/umputun/remark42/commit/86d059bf9970bd136b71a246babd4f907790b70f",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/86d059bf9970bd136b71a246babd4f907790b70f/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "76f5ce32ca3cb5b1eba6738e49fe621fe061b649",
      "url": "https://api.github.com/repos/umputun/remark42/commits/76f5ce32ca3cb5b1eba6738e49fe621fe061b649",
      "html_url": "https://github.com/umputun/remark42/commit/76f5ce32ca3cb5b1eba6738e49fe621fe061b649"
    }
  ],
  "stats": {
    "total": 176,
    "additions": 39,
    "deletions": 137
  },
  "files": [
    {
      "sha": "420c2cf24461f2b5083fa781d81191896016a94d",
      "filename": "Dockerfile",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/Dockerfile",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/Dockerfile",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/Dockerfile?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -100,7 +100,6 @@ ADD backend/scripts/import.sh /usr/local/bin/import\n RUN chmod +x /entrypoint.sh /usr/local/bin/backup /usr/local/bin/restore /usr/local/bin/import\n \n COPY --from=build-backend /build/backend/remark42 /srv/remark42\n-COPY --from=build-backend /build/backend/templates /srv\n COPY --from=build-frontend /srv/frontend/apps/remark42/public/ /srv/web/\n COPY docker-init.sh /srv/init.sh\n RUN chown -R app:app /srv"
    },
    {
      "sha": "53ff84235bbd72d31563d35e3b55fc2fb74d2a6d",
      "filename": "Dockerfile.artifacts",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/Dockerfile.artifacts",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/Dockerfile.artifacts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/Dockerfile.artifacts?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -36,8 +36,6 @@ RUN \\\n     export WEB_ROOT=/build/backend/web && \\\n     find . -regex '.*\\.\\(html\\|js\\|mjs\\)$' -print -exec sed -i \"s|{% REMARK_URL %}|http://127.0.0.1:8080|g\" {} \\; && \\\n     statik --src=${WEB_ROOT} --dest=/build/backend/app/rest -p api -f && \\\n-    statik --src=/build/backend/templates --dest=/build/backend/app -p templates -ns templates -f && \\\n-    ls -la /build/backend/app/templates/statik.go && \\\n     ls -la /build/backend/app/rest/api/statik.go && \\\n     ls -la /build/backend/web/\n "
    },
    {
      "sha": "9d8345579c3e75aff78ffb040bf393925087c554",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 2,
      "deletions": 23,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Fcmd%2Fserver.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Fcmd%2Fserver.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fserver.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -877,11 +877,11 @@ func (s *ServerCommand) addAuthProviders(authenticator *auth.Service) error {\n \t\t\tContentType:  s.Auth.Email.ContentType,\n \t\t}\n \t\tsndr := sender.NewEmailClient(params, log.Default())\n-\t\ttmpl, err := s.loadEmailTemplate()\n+\t\ttmpl, err := templates.Read(s.Auth.Email.MsgTemplate)\n \t\tif err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tauthenticator.AddVerifProvider(\"email\", tmpl, sndr)\n+\t\tauthenticator.AddVerifProvider(\"email\", string(tmpl), sndr)\n \t}\n \n \tif s.Auth.Anonymous {\n@@ -925,27 +925,6 @@ func (s *ServerCommand) addAuthProviders(authenticator *auth.Service) error {\n \treturn nil\n }\n \n-// loadEmailTemplate trying to get template from statik\n-func (s *ServerCommand) loadEmailTemplate() (string, error) {\n-\tvar file []byte\n-\tvar err error\n-\n-\tif s.Auth.Email.MsgTemplate == \"email_confirmation_login.html.tmpl\" {\n-\t\tfs := templates.NewFS()\n-\t\tfile, err = fs.ReadFile(s.Auth.Email.MsgTemplate)\n-\t} else {\n-\t\t// deprecated loading from an external file, should be removed before v1.9.0\n-\t\tfile, err = os.ReadFile(s.Auth.Email.MsgTemplate)\n-\t\tlog.Printf(\"[INFO] template %s will be read from disk\", s.Auth.Email.MsgTemplate)\n-\t}\n-\n-\tif err != nil {\n-\t\treturn \"\", fmt.Errorf(\"failed to read file %s: %w\", s.Auth.Email.MsgTemplate, err)\n-\t}\n-\n-\treturn string(file), nil\n-}\n-\n // creates and registers telegram auth, which we need separately from other auth providers\n func (s *ServerCommand) makeTelegramAuth(authenticator *auth.Service) providers.TGUpdatesReceiver {\n \tif s.Auth.Telegram {"
    },
    {
      "sha": "8b0c6281d6fd9c09c7d40c3c911c48ad7ef9d55a",
      "filename": "backend/app/cmd/server_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 13,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Fcmd%2Fserver_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Fcmd%2Fserver_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fserver_test.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -667,19 +667,6 @@ func TestServerAuthHooks(t *testing.T) {\n \tclient.CloseIdleConnections()\n }\n \n-func TestServer_loadEmailTemplate(t *testing.T) {\n-\tcmd := ServerCommand{}\n-\tcmd.Auth.Email.MsgTemplate = \"testdata/email.tmpl\"\n-\tr, err := cmd.loadEmailTemplate()\n-\tassert.NoError(t, err)\n-\tassert.Equal(t, \"The token is {{.Token}}\", r)\n-\n-\tcmd.Auth.Email.MsgTemplate = \"badpath.tmpl\"\n-\tr, err = cmd.loadEmailTemplate()\n-\tassert.EqualError(t, err, \"failed to read file badpath.tmpl: open badpath.tmpl: no such file or directory\")\n-\tassert.Equal(t, r, \"\")\n-}\n-\n func TestServerCommand_parseSameSite(t *testing.T) {\n \ttbl := []struct {\n \t\tinp string"
    },
    {
      "sha": "186c7e507e9fc3ec549f2df680aef403013d58ae",
      "filename": "backend/app/notify/email.go",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Fnotify%2Femail.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Fnotify%2Femail.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fnotify%2Femail.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -100,7 +100,6 @@ func NewEmail(emailParams EmailParams, smtpParams ntf.SMTPParams) (*Email, error\n func (e *Email) setTemplates() error {\n \tvar err error\n \tvar msgTmplFile, verifyTmplFile []byte\n-\tfs := templates.NewFS()\n \n \tif e.VerificationTemplatePath == \"\" {\n \t\te.VerificationTemplatePath = defaultEmailVerificationTemplatePath\n@@ -110,10 +109,10 @@ func (e *Email) setTemplates() error {\n \t\te.MsgTemplatePath = defaultEmailTemplatePath\n \t}\n \n-\tif msgTmplFile, err = fs.ReadFile(e.MsgTemplatePath); err != nil {\n+\tif msgTmplFile, err = templates.Read(e.MsgTemplatePath); err != nil {\n \t\treturn fmt.Errorf(\"can't read message template: %w\", err)\n \t}\n-\tif verifyTmplFile, err = fs.ReadFile(e.VerificationTemplatePath); err != nil {\n+\tif verifyTmplFile, err = templates.Read(e.VerificationTemplatePath); err != nil {\n \t\treturn fmt.Errorf(\"can't read verification template: %w\", err)\n \t}\n \tif e.msgTmpl, err = template.New(\"msgTmpl\").Parse(string(msgTmplFile)); err != nil {"
    },
    {
      "sha": "622882d0c43250ba3e9464108b035f6c6cd8abc8",
      "filename": "backend/app/notify/email_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 17,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Fnotify%2Femail_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Fnotify%2Femail_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fnotify%2Femail_test.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -55,32 +55,18 @@ func Test_initTemplatesErr(t *testing.T) {\n \t\terrText     string\n \t\temailParams EmailParams\n \t}{\n-\t\t{\n-\t\t\tname:        \"with wrong (default, working in prod) path to reply template\",\n-\t\t\terrText:     \"can't read message template: open email_reply.html.tmpl: no such file or directory\",\n-\t\t\temailParams: EmailParams{},\n-\t\t},\n-\t\t{\n-\t\t\tname:    \"with wrong (default, working in prod) path to verification template\",\n-\t\t\terrText: \"can't read verification template: open email_confirmation_subscription.html.tmpl: no such file or directory\",\n-\t\t\temailParams: EmailParams{\n-\t\t\t\tMsgTemplatePath: \"testdata/msg.html.tmpl\",\n-\t\t\t},\n-\t\t},\n \t\t{\n \t\t\tname:    \"with wrong path to verification template\",\n-\t\t\terrText: \"can't read verification template: open notfound.tmpl: no such file or directory\",\n+\t\t\terrText: \"notfound.tmpl: file does not exist\",\n \t\t\temailParams: EmailParams{\n \t\t\t\tVerificationTemplatePath: \"notfound.tmpl\",\n-\t\t\t\tMsgTemplatePath:          \"testdata/msg.html.tmpl\",\n \t\t\t},\n \t\t},\n \t\t{\n \t\t\tname:    \"with wrong path to message template\",\n-\t\t\terrText: \"can't read message template: open notfound.tmpl: no such file or directory\",\n+\t\t\terrText: \"notfound.tmpl: file does not exist\",\n \t\t\temailParams: EmailParams{\n-\t\t\t\tVerificationTemplatePath: \"testdata/verification.html.tmpl\",\n-\t\t\t\tMsgTemplatePath:          \"notfound.tmpl\",\n+\t\t\t\tMsgTemplatePath: \"notfound.tmpl\",\n \t\t\t},\n \t\t},\n \t\t{"
    },
    {
      "sha": "820e95ac28d619144f6fbe8d9c18551450cee20d",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Frest%2Fapi%2Frest.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Frest%2Fapi%2Frest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -31,7 +31,6 @@ import (\n \t\"github.com/umputun/remark42/backend/app/store\"\n \t\"github.com/umputun/remark42/backend/app/store/image\"\n \t\"github.com/umputun/remark42/backend/app/store/service\"\n-\t\"github.com/umputun/remark42/backend/app/templates\"\n )\n \n // Rest is a rest access server\n@@ -377,7 +376,6 @@ func (s *Rest) controllerGroups() (public, private, admin, rss) {\n \t\ttelegramService:  s.TelegramService,\n \t\tremarkURL:        s.RemarkURL,\n \t\tanonVote:         s.AnonVote,\n-\t\ttemplates:        templates.NewFS(),\n \t}\n \n \tadmGrp := admin{"
    },
    {
      "sha": "f7b486420353343fb9951dd74de753aa3fa7fea4",
      "filename": "backend/app/rest/api/rest_private.go",
      "status": "modified",
      "additions": 9,
      "deletions": 16,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Frest%2Fapi%2Frest_private.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Frest%2Fapi%2Frest_private.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_private.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -43,7 +43,6 @@ type private struct {\n \ttelegramService  telegramService\n \tremarkURL        string\n \tanonVote         bool\n-\ttemplates        templates.FileReader\n }\n \n // telegramService is a subset of Telegram service used for setting up user telegram notifications\n@@ -473,29 +472,26 @@ func (s *private) setConfirmedEmailCtrl(w http.ResponseWriter, r *http.Request)\n func (s *private) emailUnsubscribeCtrl(w http.ResponseWriter, r *http.Request) {\n \ttkn := r.URL.Query().Get(\"tkn\")\n \tif tkn == \"\" {\n-\t\trest.SendErrorHTML(w, r, http.StatusBadRequest,\n-\t\t\tfmt.Errorf(\"missing parameter\"), \"token parameter is required\", rest.ErrInternal, s.templates)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, fmt.Errorf(\"missing parameter\"), \"token parameter is required\", rest.ErrInternal)\n \t\treturn\n \t}\n \tsiteID := r.URL.Query().Get(\"site\")\n \n \tconfClaims, err := s.authenticator.TokenService().Parse(tkn)\n \tif err != nil {\n-\t\trest.SendErrorHTML(w, r, http.StatusForbidden, err, \"failed to verify confirmation token\", rest.ErrInternal, s.templates)\n+\t\trest.SendErrorHTML(w, r, http.StatusForbidden, err, \"failed to verify confirmation token\", rest.ErrInternal)\n \t\treturn\n \t}\n \n \tif s.authenticator.TokenService().IsExpired(confClaims) {\n-\t\trest.SendErrorHTML(w, r, http.StatusForbidden,\n-\t\t\tfmt.Errorf(\"expired\"), \"failed to verify confirmation token\", rest.ErrInternal, s.templates)\n+\t\trest.SendErrorHTML(w, r, http.StatusForbidden, fmt.Errorf(\"expired\"), \"failed to verify confirmation token\", rest.ErrInternal)\n \t\treturn\n \t}\n \n \t// Handshake.ID is user.ID + \"::\" + address\n \telems := strings.Split(confClaims.Handshake.ID, \"::\")\n \tif len(elems) != 2 {\n-\t\trest.SendErrorHTML(w, r, http.StatusBadRequest,\n-\t\t\tfmt.Errorf(\"%s\", confClaims.Handshake.ID), \"invalid handshake token\", rest.ErrInternal, s.templates)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, fmt.Errorf(\"%s\", confClaims.Handshake.ID), \"invalid handshake token\", rest.ErrInternal)\n \t\treturn\n \t}\n \tuserID := elems[0]\n@@ -508,22 +504,19 @@ func (s *private) emailUnsubscribeCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tlog.Printf(\"[WARN] can't read email for %s, %v\", userID, err)\n \t}\n \tif existingAddress == \"\" {\n-\t\trest.SendErrorHTML(w, r, http.StatusConflict,\n-\t\t\tfmt.Errorf(\"user is not subscribed\"), \"user does not have active email subscription\", rest.ErrInternal, s.templates)\n+\t\trest.SendErrorHTML(w, r, http.StatusConflict, fmt.Errorf(\"user is not subscribed\"), \"user does not have active email subscription\", rest.ErrInternal)\n \t\treturn\n \t}\n \tif address != existingAddress {\n-\t\trest.SendErrorHTML(w, r, http.StatusBadRequest,\n-\t\t\tfmt.Errorf(\"wrong email unsubscription\"), \"email address in request does not match known for this user\",\n-\t\t\trest.ErrInternal, s.templates)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, fmt.Errorf(\"wrong email unsubscription\"), \"email address in request does not match known for this user\", rest.ErrInternal)\n \t\treturn\n \t}\n \n \tlog.Printf(\"[DEBUG] unsubscribe user %s\", userID)\n \n \tif err = s.dataService.DeleteUserDetail(siteID, userID, engine.UserEmail); err != nil {\n \t\tcode := parseError(err, rest.ErrInternal)\n-\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, err, \"can't delete email for user\", code, s.templates)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, err, \"can't delete email for user\", code)\n \t\treturn\n \t}\n \t// clean User.Email from the token, if user has the token\n@@ -534,7 +527,7 @@ func (s *private) emailUnsubscribeCtrl(w http.ResponseWriter, r *http.Request) {\n \tif claims.User != nil && claims.User.Email != \"\" {\n \t\tclaims.User.Email = \"\"\n \t\tif _, err = s.authenticator.TokenService().Set(w, claims); err != nil {\n-\t\t\trest.SendErrorHTML(w, r, http.StatusInternalServerError, err, \"failed to set token\", rest.ErrInternal, s.templates)\n+\t\t\trest.SendErrorHTML(w, r, http.StatusInternalServerError, err, \"failed to set token\", rest.ErrInternal)\n \t\t\treturn\n \t\t}\n \t}\n@@ -546,7 +539,7 @@ func (s *private) emailUnsubscribeCtrl(w http.ResponseWriter, r *http.Request) {\n \t\t}\n \t}\n \tMustRead := func(path string) string {\n-\t\tfile, err := s.templates.ReadFile(path)\n+\t\tfile, err := templates.Read(path)\n \t\tif err != nil {\n \t\t\tpanic(err)\n \t\t}"
    },
    {
      "sha": "203f455122e0e485aa9deda60d4374beeaa4b527",
      "filename": "backend/app/rest/api/rest_private_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Frest%2Fapi%2Frest_private_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Frest%2Fapi%2Frest_private_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_private_test.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -600,17 +600,10 @@ func TestRest_AnonVote(t *testing.T) {\n \tassert.Equal(t, map[string]store.VotedIPInfo(nil), cr.VotedIPs)\n }\n \n-type MockFS struct{}\n-\n-func (fs *MockFS) ReadFile(path string) ([]byte, error) {\n-\treturn []byte(fmt.Sprintf(\"template %s\", path)), nil\n-}\n-\n func TestRest_EmailAndTelegram(t *testing.T) {\n \tts, srv, teardown := startupT(t)\n \tdefer teardown()\n \n-\tsrv.privRest.templates = &MockFS{}\n \tsrv.privRest.telegramService = &mockTelegram{site: \"remark42\"}\n \n \t// issue good token"
    },
    {
      "sha": "93c56e1c26a1ca7c923ca290e76ed0645299030e",
      "filename": "backend/app/rest/httperrors.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Frest%2Fhttperrors.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Frest%2Fhttperrors.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fhttperrors.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -48,17 +48,17 @@ type errTmplData struct {\n \tDetails string\n }\n \n-// SendErrorHTML makes html body with provided template and responds with provided http status code,\n+// SendErrorHTML makes html body from error_response.html.tmpl template and responds with provided http status code,\n // error code is not included in render as it is intended for UI developers and not for the users\n-func SendErrorHTML(w http.ResponseWriter, r *http.Request, httpStatusCode int, err error, details string, errCode int, t templates.FileReader) {\n+func SendErrorHTML(w http.ResponseWriter, r *http.Request, httpStatusCode int, err error, details string, errCode int) {\n \t// MustExecute behaves like template.Execute, but panics if an error occurs.\n \tMustExecute := func(tmpl *template.Template, wr io.Writer, data interface{}) {\n \t\tif err = tmpl.Execute(wr, data); err != nil {\n \t\t\tpanic(err)\n \t\t}\n \t}\n \tMustRead := func(path string) string {\n-\t\tfile, e := t.ReadFile(path)\n+\t\tfile, e := templates.Read(path)\n \t\tif e != nil {\n \t\t\tpanic(e)\n \t\t}"
    },
    {
      "sha": "cc95b992a971c3d9d8e5a8c2fe178bff498c0b46",
      "filename": "backend/app/rest/httperrors_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Frest%2Fhttperrors_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Frest%2Fhttperrors_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fhttperrors_test.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -36,18 +36,11 @@ func TestSendErrorJSON(t *testing.T) {\n \tassert.Equal(t, `{\"code\":123,\"details\":\"error details 123456\",\"error\":\"error 500\"}`+\"\\n\", string(body))\n }\n \n-type MockFS struct{}\n-\n-func (fs *MockFS) ReadFile(path string) ([]byte, error) {\n-\treturn []byte(fmt.Sprintf(\"{{.Error}}{{.Details}} %s\", path)), nil\n-}\n-\n func TestSendErrorHTML(t *testing.T) {\n-\tfs := &MockFS{}\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tif r.URL.Path == \"/error\" {\n \t\t\tt.Log(\"http err request\", r.URL)\n-\t\t\tSendErrorHTML(w, r, 500, fmt.Errorf(\"error 500\"), \"error details 123456\", 987, fs)\n+\t\t\tSendErrorHTML(w, r, 500, fmt.Errorf(\"error 500\"), \"error details 123456\", 987)\n \t\t\treturn\n \t\t}\n \t\tw.WriteHeader(404)"
    },
    {
      "sha": "26189c85f6ea81f80a4a3d73020c7970830e2998",
      "filename": "backend/app/store/formatter.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Fstore%2Fformatter.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Fstore%2Fformatter.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fformatter.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -4,7 +4,7 @@ import (\n \t\"net/url\"\n \t\"strings\"\n \n-\tbfchroma \"github.com/Depado/bfchroma/v2\"\n+\t\"github.com/Depado/bfchroma/v2\"\n \t\"github.com/PuerkitoBio/goquery\"\n \t\"github.com/alecthomas/chroma/v2/formatters/html\"\n \tbf \"github.com/russross/blackfriday/v2\""
    },
    {
      "sha": "f4210f077cbd725fa45a98701fcf05eb6749d64a",
      "filename": "backend/app/templates/static/email_confirmation_login.html.tmpl",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_confirmation_login.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_confirmation_login.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_confirmation_login.html.tmpl?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "previous_filename": "backend/templates/email_confirmation_login.html.tmpl"
    },
    {
      "sha": "090829efe02a7f1eb859773c49bd3689d6dd7239",
      "filename": "backend/app/templates/static/email_confirmation_subscription.html.tmpl",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_confirmation_subscription.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_confirmation_subscription.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_confirmation_subscription.html.tmpl?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "previous_filename": "backend/templates/email_confirmation_subscription.html.tmpl"
    },
    {
      "sha": "6755e84f4f4b9cb59f526dfa87b980f0a091ad78",
      "filename": "backend/app/templates/static/email_reply.html.tmpl",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_reply.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_reply.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_reply.html.tmpl?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "previous_filename": "backend/templates/email_reply.html.tmpl"
    },
    {
      "sha": "f7ca98817b7b1777fc1e31637bbeebb1e653d17a",
      "filename": "backend/app/templates/static/email_unsubscribe.html.tmpl",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_unsubscribe.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_unsubscribe.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Ftemplates%2Fstatic%2Femail_unsubscribe.html.tmpl?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "previous_filename": "backend/templates/email_unsubscribe.html.tmpl"
    },
    {
      "sha": "57245efe35eb049be4d116f5612c5e6ee31e8f5e",
      "filename": "backend/app/templates/static/error_response.html.tmpl",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Fstatic%2Ferror_response.html.tmpl",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Fstatic%2Ferror_response.html.tmpl",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Ftemplates%2Fstatic%2Ferror_response.html.tmpl?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "previous_filename": "backend/templates/error_response.html.tmpl"
    },
    {
      "sha": "969c1788d016c5f73cc2fbfad2308eed83792b6e",
      "filename": "backend/app/templates/templates.go",
      "status": "modified",
      "additions": 13,
      "deletions": 27,
      "changes": 40,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Ftemplates.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Ftemplates.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Ftemplates%2Ftemplates.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -1,38 +1,24 @@\n package templates\n \n import (\n-\t\"net/http\"\n+\t\"embed\"\n+\t\"io/fs\"\n \t\"os\"\n \t\"path/filepath\"\n-\n-\tlog \"github.com/go-pkgz/lgr\"\n-\t\"github.com/rakyll/statik/fs\"\n )\n \n-// FS stores link to statikFS if it exists\n-type FS struct {\n-\tstatik http.FileSystem\n-}\n-\n-// FileReader describes methods of filesystem\n-type FileReader interface {\n-\tReadFile(path string) ([]byte, error)\n-}\n+//go:embed static\n+var templateFS embed.FS\n \n-// NewFS returns new FS instance, which will read from statik if it's available and from fs otherwise\n-func NewFS() *FS {\n-\tf := &FS{}\n-\tif statikFS, err := fs.NewWithNamespace(\"templates\"); err == nil {\n-\t\tlog.Printf(\"[INFO] templates will be read from statik\")\n-\t\tf.statik = statikFS\n+// Read reads either template from disk if it exists, or from embedded template\n+func Read(path string) ([]byte, error) {\n+\tif _, err := os.Stat(filepath.Clean(path)); err == nil {\n+\t\treturn os.ReadFile(filepath.Clean(path))\n \t}\n-\treturn f\n-}\n-\n-// ReadFile depends on statik achieve exists\n-func (f *FS) ReadFile(path string) ([]byte, error) {\n-\tif f.statik != nil {\n-\t\treturn fs.ReadFile(f.statik, filepath.Join(\"/\", path)) //nolint:gocritic // root folder is a requirement for statik\n+\t// remove \"static/\" prefix from path\n+\tvar contentFS, err = fs.Sub(templateFS, \"static\")\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n-\treturn os.ReadFile(filepath.Clean(path))\n+\treturn fs.ReadFile(contentFS, filepath.Clean(path))\n }"
    },
    {
      "sha": "80624048a3f7500d7ac89275acc920f29ead63bc",
      "filename": "backend/app/templates/templates_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 10,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Ftemplates_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/backend%2Fapp%2Ftemplates%2Ftemplates_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Ftemplates%2Ftemplates_test.go?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -6,19 +6,12 @@ import (\n \t\"github.com/stretchr/testify/assert\"\n )\n \n-func TestNewFS(t *testing.T) {\n-\tfs := NewFS()\n-\tassert.NotNil(t, &fs)\n-}\n-\n-func TestFS_ReadFile(t *testing.T) {\n-\tfs := NewFS()\n-\n-\tfile, err := fs.ReadFile(\"testdata/template.html.tmpl\")\n+func Test_Read(t *testing.T) {\n+\tfile, err := Read(\"testdata/template.html.tmpl\")\n \tassert.NoError(t, err)\n \tassert.Equal(t, []byte(\"template\\n\"), file)\n \n-\tfile, err = fs.ReadFile(\"testdata/bad_path.html.tmpl\")\n+\tfile, err = Read(\"testdata/bad_path.html.tmpl\")\n \tassert.Error(t, err)\n \tassert.Nil(t, file)\n }"
    },
    {
      "sha": "51e956067a38bb1e7f48304f011824478e648488",
      "filename": "site/src/docs/configuration/email/index.md",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/site%2Fsrc%2Fdocs%2Fconfiguration%2Femail%2Findex.md",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/site%2Fsrc%2Fdocs%2Fconfiguration%2Femail%2Findex.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/site%2Fsrc%2Fdocs%2Fconfiguration%2Femail%2Findex.md?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -190,7 +190,7 @@ After you set `SMTP_` variables, you can allow email authentication by setting t\n \n ## HTML templates for emails and error messages\n \n-Remark42 uses golang templates for email templating. Templates are located in `backend/templates` and embedded into binary by statik\n+Remark42 uses golang templates for email templating. Templates are located in `backend/app/templates/static` and embedded into binary by `go:embed` [directive](https://pkg.go.dev/embed).\n \n Now we have the following templates:\n "
    },
    {
      "sha": "e725d39828424ee39a997a4cb5512b06c1b1b016",
      "filename": "site/src/docs/contributing/backend/index.md",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/86d059bf9970bd136b71a246babd4f907790b70f/site%2Fsrc%2Fdocs%2Fcontributing%2Fbackend%2Findex.md",
      "raw_url": "https://github.com/umputun/remark42/raw/86d059bf9970bd136b71a246babd4f907790b70f/site%2Fsrc%2Fdocs%2Fcontributing%2Fbackend%2Findex.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/site%2Fsrc%2Fdocs%2Fcontributing%2Fbackend%2Findex.md?ref=86d059bf9970bd136b71a246babd4f907790b70f",
      "patch": "@@ -30,16 +30,14 @@ Run tests in your IDE, and re-run `make rundev` each time you want to see how yo\n \n You have to [install](https://golang.org/doc/install) the latest stable `go` toolchain to run the backend locally.\n \n-In order to have working Remark42 installation you need once to copy frontend static files to `./backend/web` directory from `master` docker image, and also copy files from `./templates` to the `./backend` as they are expected to be where application starts:\n+In order to have working Remark42 installation you need once to copy frontend static files to `./backend/web` directory from `master` docker image, as it is expected to be where application compiles:\n \n ```shell\n # frontend files\n docker pull umputun/remark42:master\n docker create -ti --name remark42files umputun/remark42:master sh\n docker cp remark42files:/srv/web/ ./backend/\n docker rm -f remark42files\n-# template files\n-cp ./backend/templates/* ./backend\n # fix frontend files to point to the right URL\n ## Mac version\n find -E ./backend/web -regex '.*\\.(html|js|mjs)$' -print -exec sed -i '' \"s|{% REMARK_URL %}|http://127.0.0.1:8080|g\" {} \\;"
    }
  ]
}
