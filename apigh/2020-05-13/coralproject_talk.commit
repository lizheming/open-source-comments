{
  "sha": "1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6MWY2OWJiMmYxNGQ3YjU0NjA1ZjU3MDRkY2QxNGExZTU2YTQ0Y2JiMw==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2020-05-11T21:01:53Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-05-11T21:01:53Z"
    },
    "message": "[CORL-1075] Metrics Cleanup (#2955)\n\n* feat: added support for metrics on another port\r\n\r\n* fix: handle cluster better\r\n\r\n* fix: linting",
    "tree": {
      "sha": "4afbad6160c7786747f4fd1a3c708a724a33a87d",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/4afbad6160c7786747f4fd1a3c708a724a33a87d"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeub1BCRBK7hj4Ov3rIwAAdHIIAA6EKQMKxEhNyyhhA/GefBe7\nW7iRuKZYisMBVJbYnhaM9o8J2QHikAi9aF5PTF5YYOH3nSdbiJa20qzSQgZfHTWx\n0IC4UwWdIxfIN2+dsRVZmaEjHUbt2zkRemIwHTqAlK+A3AyVd8J3P8YyocXc8hd6\n5luQ5jKHDh7JYo6M3WCbF9Em53yhn14Zh+TZdi6HxsbE8DNt9MtcZI8yJKzec3Dj\nbjGfEXO3OIq9igguvfx7702NHyY0+uRoeHLw995wrS6risbddMuexuGMK6ak6BxA\nsmSZcuSV8UohIgsK2lKIFAuBikaK0fVPNaJD7QkALv25vXoy3tr335Fa0bssGvc=\n=+JOD\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 4afbad6160c7786747f4fd1a3c708a724a33a87d\nparent d0ab2ef8c5728e7e9e7b807d6501a404daf037b6\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1589230913 +0000\ncommitter GitHub <noreply@github.com> 1589230913 +0000\n\n[CORL-1075] Metrics Cleanup (#2955)\n\n* feat: added support for metrics on another port\r\n\r\n* fix: handle cluster better\r\n\r\n* fix: linting"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3",
  "html_url": "https://github.com/coralproject/talk/commit/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d0ab2ef8c5728e7e9e7b807d6501a404daf037b6",
      "url": "https://api.github.com/repos/coralproject/talk/commits/d0ab2ef8c5728e7e9e7b807d6501a404daf037b6",
      "html_url": "https://github.com/coralproject/talk/commit/d0ab2ef8c5728e7e9e7b807d6501a404daf037b6"
    }
  ],
  "stats": {
    "total": 225,
    "additions": 101,
    "deletions": 124
  },
  "files": [
    {
      "sha": "0c5d683d4dd582a06db0af3d288cd7e45ebce360",
      "filename": "src/core/server/app/index.ts",
      "status": "modified",
      "additions": 70,
      "deletions": 8,
      "changes": 78,
      "blob_url": "https://github.com/coralproject/talk/blob/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/app/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/app/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/index.ts?ref=1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3",
      "patch": "@@ -1,6 +1,6 @@\n import cons from \"consolidate\";\n import cors from \"cors\";\n-import { Express } from \"express\";\n+import express, { Express } from \"express\";\n import enforceHTTPSMiddleware from \"express-enforces-ssl\";\n import { GraphQLSchema } from \"graphql\";\n import { RedisPubSub } from \"graphql-redis-subscriptions\";\n@@ -9,9 +9,16 @@ import http from \"http\";\n import { Db } from \"mongodb\";\n import nunjucks from \"nunjucks\";\n import path from \"path\";\n+import { AggregatorRegistry, register } from \"prom-client\";\n \n-import { cacheHeadersMiddleware } from \"coral-server/app/middleware/cacheHeaders\";\n-import { HTMLErrorHandler } from \"coral-server/app/middleware/error\";\n+import {\n+  cacheHeadersMiddleware,\n+  noCacheMiddleware,\n+} from \"coral-server/app/middleware/cacheHeaders\";\n+import {\n+  HTMLErrorHandler,\n+  JSONErrorHandler,\n+} from \"coral-server/app/middleware/error\";\n import { notFoundMiddleware } from \"coral-server/app/middleware/notFound\";\n import { createPassport } from \"coral-server/app/middleware/passport\";\n import { Config } from \"coral-server/config\";\n@@ -32,6 +39,7 @@ import TenantCache from \"coral-server/services/tenant/cache\";\n \n import { healthHandler, versionHandler } from \"./handlers\";\n import { compileTrust } from \"./helpers\";\n+import { basicAuth } from \"./middleware/basicAuth\";\n import { accessLogger, errorLogger } from \"./middleware/logging\";\n import { metricsRecorder } from \"./middleware/metrics\";\n import serveStatic from \"./middleware/serveStatic\";\n@@ -46,7 +54,7 @@ export interface AppOptions {\n   rejectorQueue: RejectorQueue;\n   webhookQueue: WebhookQueue;\n   notifierQueue: NotifierQueue;\n-  metrics?: Metrics;\n+  metrics: Metrics;\n   mongo: Db;\n   parent: Express;\n   persistedQueriesRequired: boolean;\n@@ -73,10 +81,8 @@ export async function createApp(options: AppOptions): Promise<Express> {\n   // Logging\n   parent.use(accessLogger);\n \n-  if (options.metrics) {\n-    // Capturing metrics.\n-    parent.use(metricsRecorder(options.metrics));\n-  }\n+  // Capturing metrics.\n+  parent.use(metricsRecorder(options.metrics));\n \n   // Configure the health check endpoint.\n   parent.get(\"/api/health\", healthHandler);\n@@ -198,3 +204,59 @@ function configureApplicationViews(options: AppOptions) {\n   // set .html as the default extension.\n   parent.set(\"view engine\", \"html\");\n }\n+\n+export default function createMetricsServer(config: Config) {\n+  const server = express();\n+\n+  // Setup access logger.\n+  server.use(accessLogger);\n+  server.use(noCacheMiddleware);\n+\n+  // Add basic auth if provided.\n+  const username = config.get(\"metrics_username\");\n+  const password = config.get(\"metrics_password\");\n+  if (username && password) {\n+    server.use(basicAuth(username, password));\n+    logger.info(\"adding authentication to metrics endpoint\");\n+  } else {\n+    logger.info(\n+      \"not adding authentication to metrics endpoint, credentials not provided\"\n+    );\n+  }\n+\n+  // If we are running in concurrency mode, we should setup the aggregator for\n+  // the cluster metrics.\n+  if (config.get(\"concurrency\") > 1) {\n+    // Create the aggregator registry for metrics.\n+    const aggregatorRegistry = new AggregatorRegistry();\n+\n+    // Use the aggregator registry to handle serving metrics.\n+    server.get(\"/cluster_metrics\", (req, res, next) => {\n+      aggregatorRegistry.clusterMetrics((err, metrics) => {\n+        if (err) {\n+          return next(err);\n+        }\n+\n+        res.set(\"Content-Type\", aggregatorRegistry.contentType);\n+        res.send(metrics);\n+      });\n+    });\n+\n+    logger.info({ path: \"/cluster_metrics\" }, \"mounted metrics handler\");\n+  } else {\n+    // Use the memory register to handle serving metrics.\n+    server.get(\"/metrics\", (req, res) => {\n+      res.set(\"Content-Type\", register.contentType);\n+      res.end(register.metrics());\n+    });\n+\n+    logger.info({ path: \"/metrics\" }, \"mounted metrics handler\");\n+  }\n+\n+  // Error handling.\n+  server.use(notFoundMiddleware);\n+  server.use(errorLogger);\n+  server.use(JSONErrorHandler());\n+\n+  return server;\n+}"
    },
    {
      "sha": "1431e72496dc531e05010ffcb163ce790407ec6c",
      "filename": "src/core/server/app/middleware/graphql/graphqlMiddleware.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 10,
      "changes": 13,
      "blob_url": "https://github.com/coralproject/talk/blob/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/app/middleware/graphql/graphqlMiddleware.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/app/middleware/graphql/graphqlMiddleware.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/graphql/graphqlMiddleware.ts?ref=1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3",
      "patch": "@@ -40,22 +40,15 @@ const NoIntrospection = (context: ValidationContext) => ({\n const graphqlMiddleware = (\n   config: Config,\n   requestOptions: ExpressGraphQLOptionsFunction,\n-  metrics?: Metrics\n+  metrics: Metrics\n ): Handler => {\n   const extensions: Array<() => GraphQLExtension> = [\n     () => new ErrorWrappingExtension(),\n     () => new LoggerExtension(),\n+    // Pass the metrics to the extension so it can increment.\n+    () => new MetricsExtension(metrics),\n   ];\n \n-  // Add the metrics extension if provided.\n-  if (metrics) {\n-    extensions.push(\n-      () =>\n-        // Pass the metrics to the extension so it can increment.\n-        new MetricsExtension(metrics)\n-    );\n-  }\n-\n   // Create a new baseOptions that will be merged into the new options.\n   const baseOptions: Omit<GraphQLOptions, \"schema\"> = {\n     // Disable the debug mode, as we already add in our logging function."
    },
    {
      "sha": "9e92763e2efa0a7a23b6541eeacd76ec3f04ada3",
      "filename": "src/core/server/app/router/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 23,
      "changes": 24,
      "blob_url": "https://github.com/coralproject/talk/blob/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/app/router/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/app/router/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/router/index.ts?ref=1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3",
      "patch": "@@ -1,15 +1,13 @@\n import cookies from \"cookie-parser\";\n import express, { Router } from \"express\";\n-import { register } from \"prom-client\";\n \n import { LanguageCode } from \"coral-common/helpers/i18n/locales\";\n import { AppOptions } from \"coral-server/app\";\n-import { noCacheMiddleware } from \"coral-server/app/middleware/cacheHeaders\";\n+\n import playground from \"coral-server/app/middleware/playground\";\n import { RouterOptions } from \"coral-server/app/router/types\";\n import logger from \"coral-server/logger\";\n \n-import { basicAuth } from \"../middleware/basicAuth\";\n import { createAPIRouter } from \"./api\";\n import { mountClientRoutes } from \"./client\";\n \n@@ -38,26 +36,6 @@ export function createRouter(app: AppOptions, options: RouterOptions) {\n     logger.warn(\"client routes are disabled\");\n   }\n \n-  if (app.metrics) {\n-    // Add basic auth if provided.\n-    const username = app.config.get(\"metrics_username\");\n-    const password = app.config.get(\"metrics_password\");\n-    if (username && password) {\n-      router.use(\"/metrics\", basicAuth(username, password));\n-      logger.info(\"adding authentication to metrics endpoint\");\n-    } else {\n-      logger.info(\n-        \"not adding authentication to metrics endpoint, credentials not provided\"\n-      );\n-    }\n-\n-    router.get(\"/metrics\", noCacheMiddleware, (req, res) => {\n-      res.set(\"Content-Type\", register.contentType);\n-      res.end(register.metrics());\n-    });\n-    logger.info({ path: \"/metrics\" }, \"mounting metrics path on app\");\n-  }\n-\n   return router;\n }\n "
    },
    {
      "sha": "8e0f40c9a4a48cd7e69f8626909169ff96e208a3",
      "filename": "src/core/server/config.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/coralproject/talk/blob/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/config.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/config.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/config.ts?ref=1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3",
      "patch": "@@ -107,12 +107,6 @@ const config = convict({\n     default: 3000,\n     env: \"PORT\",\n   },\n-  cluster_metrics_port: {\n-    doc: \"The port to bind for cluster metrics.\",\n-    format: \"port\",\n-    default: 3001,\n-    env: \"CLUSTER_METRICS_PORT\",\n-  },\n   metrics_username: {\n     doc: \"The username to use to authenticate to the metrics endpoint.\",\n     format: \"String\",\n@@ -124,9 +118,14 @@ const config = convict({\n     format: \"String\",\n     default: \"\",\n     env: \"METRICS_PASSWORD\",\n-\n     sensitive: true,\n   },\n+  metrics_port: {\n+    doc: \"The port that the metrics handler should be mounted.\",\n+    format: \"port\",\n+    default: 9000,\n+    env: \"METRICS_PORT\",\n+  },\n   dev_port: {\n     doc: \"The port to bind for the Webpack Dev Server.\",\n     format: \"port\","
    },
    {
      "sha": "d8307a47e951f64bd83fe9fd817676ef3ab23117",
      "filename": "src/core/server/graph/subscriptions/server.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/coralproject/talk/blob/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/graph/subscriptions/server.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/graph/subscriptions/server.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/subscriptions/server.ts?ref=1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3",
      "patch": "@@ -180,16 +180,13 @@ export function formatResponse(\n     // Log out the query.\n     logQuery(context, query, persisted);\n \n-    // Increment the metrics if enabled.\n-    if (metrics) {\n-      // Get the request metadata.\n-      const { operation, operationName } = getOperationMetadata(query);\n-      if (operation && operationName) {\n-        // Increment the graph query value, tagging with the name of the query.\n-        metrics.executedGraphQueriesTotalCounter\n-          .labels(operation, operationName)\n-          .inc();\n-      }\n+    // Get the request metadata.\n+    const { operation, operationName } = getOperationMetadata(query);\n+    if (operation && operationName) {\n+      // Increment the graph query value, tagging with the name of the query.\n+      metrics.executedGraphQueriesTotalCounter\n+        .labels(operation, operationName)\n+        .inc();\n     }\n \n     if (value.errors && value.errors.length > 0) {"
    },
    {
      "sha": "a0b9ef212b126fc33a0d84452fc23fb59b60d69c",
      "filename": "src/core/server/index.ts",
      "status": "modified",
      "additions": 14,
      "deletions": 66,
      "changes": 80,
      "blob_url": "https://github.com/coralproject/talk/blob/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3/src/core/server/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/index.ts?ref=1f69bb2f14d7b54605f5704dcd14a1e56a44cbb3",
      "patch": "@@ -4,16 +4,15 @@ import { GraphQLSchema } from \"graphql\";\n import { RedisPubSub } from \"graphql-redis-subscriptions\";\n import http from \"http\";\n import { Db } from \"mongodb\";\n-import { AggregatorRegistry, collectDefaultMetrics } from \"prom-client\";\n+import { collectDefaultMetrics } from \"prom-client\";\n import { SubscriptionServer } from \"subscriptions-transport-ws\";\n \n import { LanguageCode } from \"coral-common/helpers/i18n/locales\";\n-import { AppOptions, createApp, listenAndServe } from \"coral-server/app\";\n-import { basicAuth } from \"coral-server/app/middleware/basicAuth\";\n-import { noCacheMiddleware } from \"coral-server/app/middleware/cacheHeaders\";\n-import { JSONErrorHandler } from \"coral-server/app/middleware/error\";\n-import { accessLogger, errorLogger } from \"coral-server/app/middleware/logging\";\n-import { notFoundMiddleware } from \"coral-server/app/middleware/notFound\";\n+import createMetricsServer, {\n+  AppOptions,\n+  createApp,\n+  listenAndServe,\n+} from \"coral-server/app\";\n import config, { Config } from \"coral-server/config\";\n import startScheduledTasks, { ScheduledJobGroups } from \"coral-server/cron\";\n import getTenantSchema from \"coral-server/graph/schema\";\n@@ -274,60 +273,13 @@ class Server {\n       signingConfig: this.signingConfig,\n     });\n \n-    // If we are running in concurrency mode, and we are the master, we should\n-    // setup the aggregator for the cluster metrics.\n-    if (cluster.isMaster && this.config.get(\"concurrency\") > 1) {\n-      // Create the aggregator registry for metrics.\n-      const aggregatorRegistry = new AggregatorRegistry();\n-\n-      // Setup the cluster metrics server.\n-      const metricsServer = express();\n-\n-      // Setup access logger.\n-      metricsServer.use(accessLogger);\n-\n-      // Add basic auth if provided.\n-      const username = this.config.get(\"metrics_username\");\n-      const password = this.config.get(\"metrics_password\");\n-      if (username && password) {\n-        metricsServer.use(\"/cluster_metrics\", basicAuth(username, password));\n-        logger.info(\"adding authentication to metrics endpoint\");\n-      } else {\n-        logger.info(\n-          \"not adding authentication to metrics endpoint, credentials not provided\"\n-        );\n-      }\n-\n-      // Cluster metrics will be served on /cluster_metrics.\n-      metricsServer.get(\n-        \"/cluster_metrics\",\n-        noCacheMiddleware,\n-        (req, res, next) => {\n-          aggregatorRegistry.clusterMetrics((err, metrics) => {\n-            if (err) {\n-              return next(err);\n-            }\n-\n-            res.set(\"Content-Type\", aggregatorRegistry.contentType);\n-            res.send(metrics);\n-          });\n-        }\n-      );\n-\n-      // Error handling.\n-      metricsServer.use(notFoundMiddleware);\n-      metricsServer.use(errorLogger);\n-      metricsServer.use(JSONErrorHandler());\n-\n-      const port = this.config.get(\"cluster_metrics_port\");\n-\n-      // Star the server listening for cluster metrics.\n-      await listenAndServe(metricsServer, port);\n-\n-      logger.info(\n-        { port, path: \"/cluster_metrics\" },\n-        \"now listening for cluster metrics\"\n-      );\n+    // We only want to setup a metrics server iff the concurrency is 1 or the\n+    // concurrency is greater than one and this is the master process.\n+    if (config.get(\"concurrency\") === 1 || cluster.isMaster) {\n+      // Configure the metrics server and start it.\n+      const port = this.config.get(\"metrics_port\");\n+      await listenAndServe(createMetricsServer(this.config), port);\n+      logger.info({ port }, \"now listening for metrics\");\n     }\n   }\n \n@@ -370,17 +322,13 @@ class Server {\n       notifierQueue: this.tasks.notifier,\n       disableClientRoutes,\n       persistedQueryCache: this.persistedQueryCache,\n+      metrics: createMetrics(),\n       persistedQueriesRequired:\n         this.config.get(\"env\") === \"production\" &&\n         !this.config.get(\"enable_graphiql\"),\n       migrationManager: this.migrationManager,\n     };\n \n-    // Only enable the metrics server if concurrency is set to 1.\n-    if (this.config.get(\"concurrency\") === 1) {\n-      options.metrics = createMetrics();\n-    }\n-\n     // Create the Coral App, branching off from the parent app.\n     const app: Express = await createApp(options);\n "
    }
  ]
}
