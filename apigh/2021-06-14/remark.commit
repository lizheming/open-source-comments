{
  "sha": "1847184960cc53d01fc8adb468719e81e8e2a034",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjE4NDcxODQ5NjBjYzUzZDAxZmM4YWRiNDY4NzE5ZTgxZThlMmEwMzQ=",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2021-06-13T23:50:51Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-06-14T00:07:56Z"
    },
    "message": "clarify telegram notifications code and text",
    "tree": {
      "sha": "b8e7bd6fe600e0072867dd865657f8387055907b",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/b8e7bd6fe600e0072867dd865657f8387055907b"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/1847184960cc53d01fc8adb468719e81e8e2a034",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/1847184960cc53d01fc8adb468719e81e8e2a034",
  "html_url": "https://github.com/umputun/remark42/commit/1847184960cc53d01fc8adb468719e81e8e2a034",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/1847184960cc53d01fc8adb468719e81e8e2a034/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ef6979e7d61fff3a0d0e58b23dc7d894c2078627",
      "url": "https://api.github.com/repos/umputun/remark42/commits/ef6979e7d61fff3a0d0e58b23dc7d894c2078627",
      "html_url": "https://github.com/umputun/remark42/commit/ef6979e7d61fff3a0d0e58b23dc7d894c2078627"
    }
  ],
  "stats": {
    "total": 113,
    "additions": 68,
    "deletions": 45
  },
  "files": [
    {
      "sha": "8a2aebccc8875981082ea983bfcf8c28ab1fe439",
      "filename": "backend/app/notify/telegram.go",
      "status": "modified",
      "additions": 60,
      "deletions": 37,
      "changes": 97,
      "blob_url": "https://github.com/umputun/remark42/blob/1847184960cc53d01fc8adb468719e81e8e2a034/backend/app/notify/telegram.go",
      "raw_url": "https://github.com/umputun/remark42/raw/1847184960cc53d01fc8adb468719e81e8e2a034/backend/app/notify/telegram.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/telegram.go?ref=1847184960cc53d01fc8adb468719e81e8e2a034",
      "patch": "@@ -30,15 +30,18 @@ type Telegram struct {\n \tTelegramParams\n }\n \n+// telegramMsg is used to send message trough Telegram bot API\n+type telegramMsg struct {\n+\tText      string `json:\"text\"`\n+\tParseMode string `json:\"parse_mode,omitempty\"`\n+}\n+\n const telegramTimeOut = 5000 * time.Millisecond\n const telegramAPIPrefix = \"https://api.telegram.org/bot\"\n \n // NewTelegram makes telegram bot for notifications\n func NewTelegram(params TelegramParams) (*Telegram, error) {\n \tres := Telegram{TelegramParams: params}\n-\tif _, err := strconv.ParseInt(res.AdminChannelID, 10, 64); err != nil {\n-\t\tres.AdminChannelID = \"@\" + res.AdminChannelID // if channelID not a number enforce @ prefix\n-\t}\n \n \tif res.apiPrefix == \"\" {\n \t\tres.apiPrefix = telegramAPIPrefix\n@@ -64,7 +67,13 @@ func NewTelegram(params TelegramParams) (*Telegram, error) {\n \t\t}()\n \n \t\tif resp.StatusCode != http.StatusOK {\n-\t\t\treturn errors.Errorf(\"unexpected telegram status code %d\", resp.StatusCode)\n+\t\t\ttgErr := struct {\n+\t\t\t\tDescription string `json:\"description\"`\n+\t\t\t}{}\n+\t\t\tif err = json.NewDecoder(resp.Body).Decode(&tgErr); err == nil {\n+\t\t\t\treturn errors.Errorf(\"unexpected telegram API status code %d, error: %q\", resp.StatusCode, tgErr.Description)\n+\t\t\t}\n+\t\t\treturn errors.Errorf(\"unexpected telegram API status code %d\", resp.StatusCode)\n \t\t}\n \n \t\ttgResp := struct {\n@@ -92,34 +101,26 @@ func NewTelegram(params TelegramParams) (*Telegram, error) {\n \n // Send to telegram recipients\n func (t *Telegram) Send(ctx context.Context, req Request) error {\n-\tvar err error\n-\n-\tif t.AdminChannelID != \"\" {\n-\t\terr = t.sendAdminNotification(ctx, req)\n-\t\tif err != nil {\n-\t\t\treturn errors.Wrapf(err, \"problem sending admin telegram notification\")\n-\t\t}\n-\t}\n-\n-\treturn nil\n-}\n-\n-func (t *Telegram) sendAdminNotification(ctx context.Context, req Request) error {\n-\tlog.Printf(\"[DEBUG] send admin telegram notification to %s, comment id %s\", t.AdminChannelID, req.Comment.ID)\n+\tlog.Printf(\"[DEBUG] send telegram notification for comment ID %s\", req.Comment.ID)\n \n \tmsg, err := buildTelegramMessage(req)\n \tif err != nil {\n-\t\treturn errors.Wrap(err, \"failed to make telegram message body\")\n+\t\treturn errors.Wrapf(err, \"failed to make telegram message body for comment ID %s\", req.Comment.ID)\n \t}\n \n-\terr = t.sendMessage(ctx, msg, t.AdminChannelID)\n-\tif err != nil {\n-\t\treturn errors.Wrapf(err, \"failed to send admin notification about %s\", req.Comment.ID)\n+\tif t.AdminChannelID != \"\" {\n+\t\terr := t.sendMessage(ctx, msg, t.AdminChannelID)\n+\t\treturn errors.Wrapf(err,\n+\t\t\t\"problem sending admin telegram notification about comment ID %s to %s\", req.Comment.ID, t.AdminChannelID)\n \t}\n \treturn nil\n }\n \n func (t *Telegram) sendMessage(ctx context.Context, b []byte, chatID string) error {\n+\tif _, err := strconv.ParseInt(chatID, 10, 64); err != nil {\n+\t\tchatID = \"@\" + chatID // if chatID not a number enforce @ prefix\n+\t}\n+\n \tu := fmt.Sprintf(\"%s%s/sendMessage?chat_id=%s&parse_mode=Markdown&disable_web_page_preview=true\",\n \t\tt.apiPrefix, t.Token, chatID)\n \tr, err := http.NewRequest(\"POST\", u, bytes.NewReader(b))\n@@ -141,7 +142,13 @@ func (t *Telegram) sendMessage(ctx context.Context, b []byte, chatID string) err\n \t}()\n \n \tif resp.StatusCode != http.StatusOK {\n-\t\treturn errors.Errorf(\"unexpected telegram status code %d for url %q\", resp.StatusCode, u)\n+\t\ttgErr := struct {\n+\t\t\tDescription string `json:\"description\"`\n+\t\t}{}\n+\t\tif err = json.NewDecoder(resp.Body).Decode(&tgErr); err == nil {\n+\t\t\treturn errors.Errorf(\"unexpected telegram API status code %d, error: %q\", resp.StatusCode, tgErr.Description)\n+\t\t}\n+\t\treturn errors.Errorf(\"unexpected telegram API status code %d\", resp.StatusCode)\n \t}\n \n \ttgResp := struct {\n@@ -155,30 +162,42 @@ func (t *Telegram) sendMessage(ctx context.Context, b []byte, chatID string) err\n }\n \n func buildTelegramMessage(req Request) ([]byte, error) {\n-\tfrom := req.Comment.User.Name\n-\tif req.Comment.ParentID != \"\" {\n-\t\tfrom += \" → \" + req.parent.User.Name\n-\t}\n-\tfrom = \"*\" + from + \"*\"\n-\tlink := fmt.Sprintf(\"↦ [original comment](%s)\", req.Comment.Locator.URL+uiNav+req.Comment.ID)\n+\tcommentURLPrefix := req.Comment.Locator.URL + uiNav\n+\n+\tmsg := \"New reply to comment\"\n \tif req.Comment.PostTitle != \"\" {\n-\t\tlink = fmt.Sprintf(\"↦ [%s](%s)\", escapeTitle(req.Comment.PostTitle), req.Comment.Locator.URL+uiNav+req.Comment.ID)\n+\t\tmsg += fmt.Sprintf(\" for %q\", req.Comment.PostTitle)\n+\t}\n+\tmsg += \":\"\n+\n+\tif req.Comment.ParentID != \"\" {\n+\t\tmsg += fmt.Sprintf(\n+\t\t\t\"\\n[Original comment](%s) from %s at %s:\\n%s\",\n+\t\t\tcommentURLPrefix+req.parent.ID,\n+\t\t\tescapeText(req.parent.User.Name),\n+\t\t\tescapeText(req.parent.Timestamp.Format(\"02.01.2006 at 15:04\")),\n+\t\t\tescapeText(req.parent.Orig),\n+\t\t)\n \t}\n \n-\tmsg := fmt.Sprintf(\"%s\\n\\n%s\\n\\n%s\", from, req.Comment.Orig, link)\n+\tmsg += fmt.Sprintf(\n+\t\t\"\\n[Reply](%s) from %s at %s:\\n%s\",\n+\t\tcommentURLPrefix+req.Comment.ID,\n+\t\tescapeText(req.Comment.User.Name),\n+\t\tescapeText(req.Comment.Timestamp.Format(\"02.01.2006 at 15:04\")),\n+\t\tescapeText(req.Comment.Orig),\n+\t)\n \tmsg = html.UnescapeString(msg)\n-\tbody := struct {\n-\t\tText string `json:\"text\"`\n-\t}{Text: msg}\n+\tbody := telegramMsg{Text: msg, ParseMode: \"MarkdownV2\"}\n \tb, err := json.Marshal(body)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \treturn b, nil\n }\n \n-func escapeTitle(title string) string {\n-\tescSymbols := []string{\"[\", \"]\", \"(\", \")\"}\n+func escapeText(title string) string {\n+\tescSymbols := []string{\"_\", \"*\", \"[\", \"]\", \"(\", \")\", \"~\", \"`\", \">\", \"#\", \"+\", \"-\", \"=\", \"|\", \"{\", \"}\", \"!\"}\n \tres := title\n \tfor _, esc := range escSymbols {\n \t\tres = strings.Replace(res, esc, \"\\\\\"+esc, -1)\n@@ -192,5 +211,9 @@ func (t *Telegram) SendVerification(_ context.Context, _ VerificationRequest) er\n }\n \n func (t *Telegram) String() string {\n-\treturn \"telegram: \" + t.AdminChannelID\n+\tresult := \"telegram\"\n+\tif t.AdminChannelID != \"\" {\n+\t\tresult += \" with admin notifications to \" + t.AdminChannelID\n+\t}\n+\treturn result\n }"
    },
    {
      "sha": "bf7c2ea2ce6cd12e0ed53a6752a35e9eb8920512",
      "filename": "backend/app/notify/telegram_test.go",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark42/blob/1847184960cc53d01fc8adb468719e81e8e2a034/backend/app/notify/telegram_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/1847184960cc53d01fc8adb468719e81e8e2a034/backend/app/notify/telegram_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/notify/telegram_test.go?ref=1847184960cc53d01fc8adb468719e81e8e2a034",
      "patch": "@@ -28,7 +28,7 @@ func TestTelegram_New(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.NotNil(t, tb)\n \tassert.Equal(t, tb.Timeout, time.Second*5)\n-\tassert.Equal(t, \"@remark_test\", tb.AdminChannelID, \"@ added\")\n+\tassert.Equal(t, \"remark_test\", tb.AdminChannelID, \"@ added\")\n \n \tst := time.Now()\n \t_, err = NewTelegram(TelegramParams{\n@@ -54,7 +54,7 @@ func TestTelegram_New(t *testing.T) {\n \t\tTimeout:        2 * time.Second,\n \t\tapiPrefix:      ts.URL + \"/\",\n \t})\n-\tassert.EqualError(t, err, \"unexpected telegram status code 404\")\n+\tassert.EqualError(t, err, \"unexpected telegram API status code 404\")\n \n \t_, err = NewTelegram(TelegramParams{\n \t\tAdminChannelID: \"remark_test\",\n@@ -95,9 +95,9 @@ func TestTelegram_Send(t *testing.T) {\n \tdefer ts.Close()\n \n \ttb, err := NewTelegram(TelegramParams{\n-\t\tAdminChannelID: \"remark_test\",\n-\t\tToken:          \"good-token\",\n-\t\tapiPrefix:      ts.URL + \"/\",\n+\t\tAdminChannelID:    \"remark_test\",\n+\t\tToken:             \"good-token\",\n+\t\tapiPrefix:         ts.URL + \"/\",\n \t})\n \tassert.NoError(t, err)\n \tassert.NotNil(t, tb)\n@@ -126,9 +126,9 @@ func TestTelegram_Send(t *testing.T) {\n \tassert.Error(t, err, \"should fail\")\n \terr = tb.Send(context.TODO(), Request{Comment: c, parent: cp})\n \trequire.Error(t, err)\n-\tassert.Contains(t, err.Error(), \"unexpected telegram status code 404\", \"send on broken tg\")\n+\tassert.Contains(t, err.Error(), \"unexpected telegram API status code 404\", \"send on broken tg\")\n \n-\tassert.Equal(t, \"telegram: @remark_test\", tb.String())\n+\tassert.Equal(t, \"telegram with admin notifications to remark_test\", tb.String())\n \n \t// bad API URL\n \ttb.apiPrefix = \"http://non-existent\"\n@@ -210,7 +210,7 @@ func Test_escapeTitle(t *testing.T) {\n \tfor i, tt := range tbl {\n \t\ttt := tt\n \t\tt.Run(strconv.Itoa(i), func(t *testing.T) {\n-\t\t\tassert.Equal(t, tt.out, escapeTitle(tt.inp))\n+\t\t\tassert.Equal(t, tt.out, escapeText(tt.inp))\n \t\t})\n \t}\n "
    }
  ]
}
