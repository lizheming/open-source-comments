{
  "sha": "efaa63bd1db7150fbabea79a426651c0f0a07bf7",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODplZmFhNjNiZDFkYjcxNTBmYmFiZWE3OWE0MjY2NTFjMGYwYTA3YmY3",
  "commit": {
    "author": {
      "name": "Krzysztof Kotlarek",
      "email": "kotlarek.krzysztof@gmail.com",
      "date": "2021-01-11T02:43:11Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-01-11T02:43:11Z"
    },
    "message": "FIX: always truncate uncomplete emojis in excerpts (#11678)\n\nAdditional fix after https://github.com/discourse/discourse/pull/11667\r\n\r\nAlways truncate \"broken\" emojis from excerpts.",
    "tree": {
      "sha": "7500f4249b4379a01b39503a0fdfd0d2d15fadf5",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/7500f4249b4379a01b39503a0fdfd0d2d15fadf5"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/efaa63bd1db7150fbabea79a426651c0f0a07bf7",
    "comment_count": 1,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+7s/CRBK7hj4Ov3rIwAAdHIIAD1NVJGyAyDIt/rvH83eTk9V\nR/hejXawTb3uI93pSzjfhF1+6V0BXNQCAda56rDi1o7sadUjK2yjPfmlepHpGmlg\naNpqotN4AXojTYueBdbf5/cWHT0YPKMfMuppSlFsqZTb6LCi5Pceo9R9r5uUNjsW\n1qvCA2i+HrcDVXb0z8+h0nW93XCRbwFjeHpxCFFsiwRtYMbrR84ZhW4vaN/5Ki2p\nbaNrHXQMCMgjoZB8CY4zajl4VXcMd6l4/uSECsjJ37wBVsanTLYXph9YZ0U1O1+/\nNCi03UoGpCEschUycoFW5rNMksb/mjM6WRcuaE8E+4QCKrWNB8GUjVx/Z7zmqS0=\n=bOUj\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 7500f4249b4379a01b39503a0fdfd0d2d15fadf5\nparent 7f78b6ec10fba821b34752ac3a5484eaf2d4b2de\nauthor Krzysztof Kotlarek <kotlarek.krzysztof@gmail.com> 1610332991 +1100\ncommitter GitHub <noreply@github.com> 1610332991 +1100\n\nFIX: always truncate uncomplete emojis in excerpts (#11678)\n\nAdditional fix after https://github.com/discourse/discourse/pull/11667\r\n\r\nAlways truncate \"broken\" emojis from excerpts."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/efaa63bd1db7150fbabea79a426651c0f0a07bf7",
  "html_url": "https://github.com/discourse/discourse/commit/efaa63bd1db7150fbabea79a426651c0f0a07bf7",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/efaa63bd1db7150fbabea79a426651c0f0a07bf7/comments",
  "author": {
    "login": "lis2",
    "id": 72780,
    "node_id": "MDQ6VXNlcjcyNzgw",
    "avatar_url": "https://avatars1.githubusercontent.com/u/72780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lis2",
    "html_url": "https://github.com/lis2",
    "followers_url": "https://api.github.com/users/lis2/followers",
    "following_url": "https://api.github.com/users/lis2/following{/other_user}",
    "gists_url": "https://api.github.com/users/lis2/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lis2/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lis2/subscriptions",
    "organizations_url": "https://api.github.com/users/lis2/orgs",
    "repos_url": "https://api.github.com/users/lis2/repos",
    "events_url": "https://api.github.com/users/lis2/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lis2/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7f78b6ec10fba821b34752ac3a5484eaf2d4b2de",
      "url": "https://api.github.com/repos/discourse/discourse/commits/7f78b6ec10fba821b34752ac3a5484eaf2d4b2de",
      "html_url": "https://github.com/discourse/discourse/commit/7f78b6ec10fba821b34752ac3a5484eaf2d4b2de"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 11,
    "deletions": 18
  },
  "files": [
    {
      "sha": "5da11450f0ebdf3ad3009a9e0fee64b5ad805021",
      "filename": "app/models/post.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/efaa63bd1db7150fbabea79a426651c0f0a07bf7/app/models/post.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/efaa63bd1db7150fbabea79a426651c0f0a07bf7/app/models/post.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/post.rb?ref=efaa63bd1db7150fbabea79a426651c0f0a07bf7",
      "patch": "@@ -486,7 +486,7 @@ def excerpt(maxlength = nil, options = {})\n   end\n \n   def excerpt_for_topic\n-    Post.excerpt(cooked, SiteSetting.topic_excerpt_maxlength, strip_links: true, strip_images: true, strip_truncated_emoji_code: true, post: self)\n+    Post.excerpt(cooked, SiteSetting.topic_excerpt_maxlength, strip_links: true, strip_images: true, post: self)\n   end\n \n   def is_first_post?"
    },
    {
      "sha": "27c78bc530e3ea4f3778fb96dbec948dbd894fb9",
      "filename": "lib/excerpt_parser.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/efaa63bd1db7150fbabea79a426651c0f0a07bf7/lib/excerpt_parser.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/efaa63bd1db7150fbabea79a426651c0f0a07bf7/lib/excerpt_parser.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/excerpt_parser.rb?ref=efaa63bd1db7150fbabea79a426651c0f0a07bf7",
      "patch": "@@ -13,7 +13,6 @@ def initialize(length, options = nil)\n     options || {}\n     @strip_links = options[:strip_links] == true\n     @strip_images = options[:strip_images] == true\n-    @strip_truncated_emoji_code = options[:strip_truncated_emoji_code] == true\n     @text_entities = options[:text_entities] == true\n     @markdown_images = options[:markdown_images] == true\n     @keep_newlines = options[:keep_newlines] == true\n@@ -208,7 +207,7 @@ def characters(string, truncate: true, count_it: true, encode: true, before_stri\n     encode = encode ? lambda { |s| ERB::Util.html_escape(s) } : lambda { |s| s }\n     if count_it && @current_length + string.length > @length\n       length = [0, @length - @current_length - 1].max\n-      @excerpt << encode.call(string[0..length]) if truncate && !truncated_emoji_code?(string)\n+      @excerpt << encode.call(string[0..length]) if truncate && !emoji?(string)\n       @excerpt << (@text_entities ? \"...\" : \"&hellip;\")\n       @excerpt << \"</a>\" if @in_a\n       @excerpt << after_string if after_string\n@@ -220,11 +219,7 @@ def characters(string, truncate: true, count_it: true, encode: true, before_stri\n     @current_length += string.length if count_it\n   end\n \n-  def truncated_emoji_code?(string)\n-    @strip_truncated_emoji_code && emoji?(string)\n-  end\n-\n   def emoji?(string)\n-    string.match?(/:\\w+:/)\n+    string.match?(/\\A:\\w+:\\Z/)\n   end\n end"
    },
    {
      "sha": "2cf7d81fb3650312616fa438825fac10b2b0006b",
      "filename": "spec/components/pretty_text_spec.rb",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/discourse/discourse/blob/efaa63bd1db7150fbabea79a426651c0f0a07bf7/spec/components/pretty_text_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/efaa63bd1db7150fbabea79a426651c0f0a07bf7/spec/components/pretty_text_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/pretty_text_spec.rb?ref=efaa63bd1db7150fbabea79a426651c0f0a07bf7",
      "patch": "@@ -641,16 +641,14 @@ def cook(*args)\n         html = <<~EOS\n           <img src=\\\"//localhost:3000/images/emoji/twitter/bike.png?v=9\\\" title=\\\":bike:\\\" class=\\\"emoji\\\" alt=\\\":bike:\\\"> <img src=\\\"//localhost:3000/images/emoji/twitter/cat.png?v=9\\\" title=\\\":cat:\\\" class=\\\"emoji\\\" alt=\\\":cat:\\\"> <img src=\\\"//localhost:3000/images/emoji/twitter/discourse.png?v=9\\\" title=\\\":discourse:\\\" class=\\\"emoji\\\" alt=\\\":discourse:\\\">\n         EOS\n-        expect(PrettyText.excerpt(html, 10, strip_truncated_emoji_code: false)).to eq(\":bike: :ca&hellip;\")\n-\n-        expect(PrettyText.excerpt(html, 7, strip_truncated_emoji_code: true)).to eq(\":bike: &hellip;\")\n-        expect(PrettyText.excerpt(html, 8, strip_truncated_emoji_code: true)).to eq(\":bike: &hellip;\")\n-        expect(PrettyText.excerpt(html, 9, strip_truncated_emoji_code: true)).to eq(\":bike: &hellip;\")\n-        expect(PrettyText.excerpt(html, 10, strip_truncated_emoji_code: true)).to eq(\":bike: &hellip;\")\n-        expect(PrettyText.excerpt(html, 11, strip_truncated_emoji_code: true)).to eq(\":bike: &hellip;\")\n-        expect(PrettyText.excerpt(html, 12, strip_truncated_emoji_code: true)).to eq(\":bike: :cat: &hellip;\")\n-        expect(PrettyText.excerpt(html, 13, strip_truncated_emoji_code: true)).to eq(\":bike: :cat: &hellip;\")\n-        expect(PrettyText.excerpt(html, 14, strip_truncated_emoji_code: true)).to eq(\":bike: :cat: &hellip;\")\n+        expect(PrettyText.excerpt(html, 7)).to eq(\":bike: &hellip;\")\n+        expect(PrettyText.excerpt(html, 8)).to eq(\":bike: &hellip;\")\n+        expect(PrettyText.excerpt(html, 9)).to eq(\":bike: &hellip;\")\n+        expect(PrettyText.excerpt(html, 10)).to eq(\":bike: &hellip;\")\n+        expect(PrettyText.excerpt(html, 11)).to eq(\":bike: &hellip;\")\n+        expect(PrettyText.excerpt(html, 12)).to eq(\":bike: :cat: &hellip;\")\n+        expect(PrettyText.excerpt(html, 13)).to eq(\":bike: :cat: &hellip;\")\n+        expect(PrettyText.excerpt(html, 14)).to eq(\":bike: :cat: &hellip;\")\n       end\n     end\n "
    }
  ]
}
