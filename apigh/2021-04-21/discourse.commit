{
  "sha": "6b613e3076cca79e6efba1945f20ea04511dc940",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo2YjYxM2UzMDc2Y2NhNzllNmVmYmExOTQ1ZjIwZWEwNDUxMWRjOTQw",
  "commit": {
    "author": {
      "name": "Roman Rizzi",
      "email": "rizziromanalejandro@gmail.com",
      "date": "2021-04-21T11:41:36Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-04-21T11:41:36Z"
    },
    "message": "FEATURE: Review every post using the review queue. (#12734)\n\n* FEATURE: Review every post using the review queue.\r\n\r\nIf the `review_every_post` setting is enabled, posts created and edited by regular uses are sent to the review queue so staff can review them. We'll skip PMs and posts created or edited by TL4 or staff users.\r\n\r\nStaff can choose  to:\r\n\r\n- Approve the post (nothing happens)\r\n- Approve and restore the post (if deleted)\r\n- Approve and unhide the post (if hidden)\r\n- Reject and delete it\r\n- Reject and keep deleted (if deleted)\r\n- Reject and suspend the user\r\n- Reject and silence the user\r\n\r\n* Update config/locales/server.en.yml\r\n\r\nCo-authored-by: Robin Ward <robin.ward@gmail.com>\r\n\r\nCo-authored-by: Robin Ward <robin.ward@gmail.com>",
    "tree": {
      "sha": "71ad06d8952db1e9328a4677ea775d1030060399",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/71ad06d8952db1e9328a4677ea775d1030060399"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/6b613e3076cca79e6efba1945f20ea04511dc940",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJggA9wCRBK7hj4Ov3rIwAA3XwIADcmuCv33rkHiGijm2LyviDI\nQakGStKkmiR7QbJHHfg2GBeanL8E4GhVA7oTnbBWZGVGfbo8Z+uZzSvssZc0/17k\n11JPnaZSSPlvPp5OyktbSi5BEUb29hoJYHrfYrbhiaQHO0jDguezAyxj9/GQF8Q1\nAWpEiKXWuBkNJr7mPgjmDS624AuFHdZeZ7BpayJM1vkJFgBFoq8+qrf9MOklWIWB\nMG39GPDSlESL61FH3pDJf5CxjhmAC7djTp4DwgFH7KP8q8Rq2vzDwcjYsQ7qs4KR\nQkR+S3A8kBAMgOOAmIdpoTtLH84BNmNZWjIT9dxqtuBEwEU1WNRWPPLLJT0eSVs=\n=otgs\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 71ad06d8952db1e9328a4677ea775d1030060399\nparent 45ccadeeeb87a939a1744c38bbba444bcb2db234\nauthor Roman Rizzi <rizziromanalejandro@gmail.com> 1619005296 -0300\ncommitter GitHub <noreply@github.com> 1619005296 -0300\n\nFEATURE: Review every post using the review queue. (#12734)\n\n* FEATURE: Review every post using the review queue.\r\n\r\nIf the `review_every_post` setting is enabled, posts created and edited by regular uses are sent to the review queue so staff can review them. We'll skip PMs and posts created or edited by TL4 or staff users.\r\n\r\nStaff can choose  to:\r\n\r\n- Approve the post (nothing happens)\r\n- Approve and restore the post (if deleted)\r\n- Approve and unhide the post (if hidden)\r\n- Reject and delete it\r\n- Reject and keep deleted (if deleted)\r\n- Reject and suspend the user\r\n- Reject and silence the user\r\n\r\n* Update config/locales/server.en.yml\r\n\r\nCo-authored-by: Robin Ward <robin.ward@gmail.com>\r\n\r\nCo-authored-by: Robin Ward <robin.ward@gmail.com>"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/6b613e3076cca79e6efba1945f20ea04511dc940",
  "html_url": "https://github.com/discourse/discourse/commit/6b613e3076cca79e6efba1945f20ea04511dc940",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/6b613e3076cca79e6efba1945f20ea04511dc940/comments",
  "author": {
    "login": "romanrizzi",
    "id": 5025816,
    "node_id": "MDQ6VXNlcjUwMjU4MTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5025816?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/romanrizzi",
    "html_url": "https://github.com/romanrizzi",
    "followers_url": "https://api.github.com/users/romanrizzi/followers",
    "following_url": "https://api.github.com/users/romanrizzi/following{/other_user}",
    "gists_url": "https://api.github.com/users/romanrizzi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/romanrizzi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/romanrizzi/subscriptions",
    "organizations_url": "https://api.github.com/users/romanrizzi/orgs",
    "repos_url": "https://api.github.com/users/romanrizzi/repos",
    "events_url": "https://api.github.com/users/romanrizzi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/romanrizzi/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "45ccadeeeb87a939a1744c38bbba444bcb2db234",
      "url": "https://api.github.com/repos/discourse/discourse/commits/45ccadeeeb87a939a1744c38bbba444bcb2db234",
      "html_url": "https://github.com/discourse/discourse/commit/45ccadeeeb87a939a1744c38bbba444bcb2db234"
    }
  ],
  "stats": {
    "total": 381,
    "additions": 372,
    "deletions": 9
  },
  "files": [
    {
      "sha": "84c27f152f526742012e071073435cc8880a88e2",
      "filename": "app/assets/javascripts/discourse/app/components/reviewable-post-edits.js",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/app/assets/javascripts/discourse/app/components/reviewable-post-edits.js",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/app/assets/javascripts/discourse/app/components/reviewable-post-edits.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/reviewable-post-edits.js?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "previous_filename": "app/assets/javascripts/discourse/app/components/reviewable-flagged-post.js"
    },
    {
      "sha": "553f12d58808e271a5fa1e58fe27c5f21542e976",
      "filename": "app/assets/javascripts/discourse/app/templates/components/reviewable-flagged-post.hbs",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/app/assets/javascripts/discourse/app/templates/components/reviewable-flagged-post.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/app/assets/javascripts/discourse/app/templates/components/reviewable-flagged-post.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/templates/components/reviewable-flagged-post.hbs?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -1,12 +1,6 @@\n <div class=\"flagged-post-header\">\n   {{reviewable-topic-link reviewable=reviewable tagName=\"\"}}\n-  {{#if hasEdits}}\n-    <a href {{action \"showEditHistory\"}}\n-      class=\"has-edits {{historyClass}}\"\n-      title={{i18n \"post.last_edited_on\" dateTime=editedDate}}>\n-      {{d-icon \"pencil-alt\"}}\n-    </a>\n-  {{/if}}\n+  {{reviewable-post-edits reviewable=reviewable tagName=\"\"}}\n </div>\n \n <div class=\"post-contents-wrapper\">"
    },
    {
      "sha": "e6f758133c3c7afa3fdd51971ba508d7a0a34c01",
      "filename": "app/assets/javascripts/discourse/app/templates/components/reviewable-post-edits.hbs",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/app/assets/javascripts/discourse/app/templates/components/reviewable-post-edits.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/app/assets/javascripts/discourse/app/templates/components/reviewable-post-edits.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/templates/components/reviewable-post-edits.hbs?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -0,0 +1,7 @@\n+{{#if hasEdits}}\n+  <a href {{action \"showEditHistory\"}}\n+    class=\"has-edits {{historyClass}}\"\n+    title={{i18n \"post.last_edited_on\" dateTime=editedDate}}>\n+    {{d-icon \"pencil-alt\"}}\n+  </a>\n+{{/if}}"
    },
    {
      "sha": "27310675a1389802a248b81f3011ef00e99334b1",
      "filename": "app/assets/javascripts/discourse/app/templates/components/reviewable-post.hbs",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/app/assets/javascripts/discourse/app/templates/components/reviewable-post.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/app/assets/javascripts/discourse/app/templates/components/reviewable-post.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/templates/components/reviewable-post.hbs?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -0,0 +1,19 @@\n+<div class=\"flagged-post-header\">\n+  {{reviewable-topic-link reviewable=reviewable tagName=\"\"}}\n+  {{reviewable-post-edits reviewable=reviewable tagName=\"\"}}\n+</div>\n+\n+<div class=\"post-contents-wrapper\">\n+  {{reviewable-created-by user=reviewable.target_created_by tagName=\"\"}}\n+  <div class=\"post-contents\">\n+    {{reviewable-post-header reviewable=reviewable createdBy=reviewable.target_created_by tagName=\"\"}}\n+    <div class=\"post-body\">\n+      {{#if reviewable.blank_post}}\n+        <p>{{i18n \"review.deleted_post\"}}</p>\n+      {{else}}\n+        {{html-safe reviewable.cooked}}\n+      {{/if}}\n+    </div>\n+    {{yield}}\n+  </div>\n+</div>"
    },
    {
      "sha": "cb964477f932739b020f2cb5bd4dbeabeadd00ce",
      "filename": "app/models/reviewable.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/app/models/reviewable.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/app/models/reviewable.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/reviewable.rb?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -95,7 +95,7 @@ def self.valid_type?(type)\n   end\n \n   def self.types\n-    %w[ReviewableFlaggedPost ReviewableQueuedPost ReviewableUser]\n+    %w[ReviewableFlaggedPost ReviewableQueuedPost ReviewableUser ReviewablePost]\n   end\n \n   def self.custom_filters"
    },
    {
      "sha": "8dbb06596b0fc9f9165ebfa5bb19127e6adadbd2",
      "filename": "app/models/reviewable_post.rb",
      "status": "added",
      "additions": 111,
      "deletions": 0,
      "changes": 111,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/app/models/reviewable_post.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/app/models/reviewable_post.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/reviewable_post.rb?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -0,0 +1,111 @@\n+# frozen_string_literal: true\n+\n+class ReviewablePost < Reviewable\n+  def self.action_aliases\n+    { reject_and_silence: :reject_and_suspend }\n+  end\n+\n+  def self.queue_for_review_if_possible(post, created_or_edited_by)\n+    return unless SiteSetting.review_every_post\n+    return if post.post_type != Post.types[:regular] || post.topic.private_message?\n+    return if Reviewable.where(target: post, status: Reviewable.statuses[:pending]).exists?\n+    return if created_or_edited_by.bot? || created_or_edited_by.staff? || created_or_edited_by.has_trust_level?(TrustLevel[4])\n+    system_user = Discourse.system_user\n+\n+    needs_review!(\n+      target: post,\n+      topic: post.topic,\n+      created_by: system_user,\n+      reviewable_by_moderator: true,\n+      potential_spam: false\n+    ).tap do |reviewable|\n+      reviewable.add_score(\n+        system_user,\n+        ReviewableScore.types[:needs_approval],\n+        force_review: true\n+      )\n+    end\n+  end\n+\n+  def build_actions(actions, guardian, args)\n+    return unless pending?\n+\n+    if post.trashed? && guardian.can_recover_post?(post)\n+      build_action(actions, :approve_and_restore, icon: 'check')\n+    elsif post.hidden?\n+      build_action(actions, :approve_and_unhide, icon: 'check')\n+    else\n+      build_action(actions, :approve, icon: 'check')\n+    end\n+\n+    reject = actions.add_bundle(\n+      \"#{id}-reject\", icon: 'times', label: 'reviewables.actions.reject.bundle_title'\n+    )\n+\n+    if post.trashed?\n+      build_action(actions, :reject_and_keep_deleted, icon: 'trash-alt', bundle: reject)\n+    elsif guardian.can_delete_post_or_topic?(post)\n+      build_action(actions, :reject_and_delete, icon: 'trash-alt', bundle: reject)\n+    end\n+\n+    if guardian.can_suspend?(target_created_by)\n+      build_action(actions, :reject_and_suspend, icon: 'ban', bundle: reject, client_action: 'suspend')\n+      build_action(actions, :reject_and_silence, icon: 'microphone-slash', bundle: reject, client_action: 'silence')\n+    end\n+  end\n+\n+  def perform_approve(performed_by, _args)\n+    successful_transition :approved, recalculate_score: false\n+  end\n+\n+  def perform_reject_and_keep_deleted(performed_by, _args)\n+    successful_transition :rejected, recalculate_score: false\n+  end\n+\n+  def perform_approve_and_restore(performed_by, _args)\n+    PostDestroyer.new(performed_by, post).recover\n+\n+    successful_transition :approved, recalculate_score: false\n+  end\n+\n+  def perform_approve_and_unhide(performed_by, _args)\n+    post.unhide!\n+\n+    successful_transition :approved, recalculate_score: false\n+  end\n+\n+  def perform_reject_and_delete(performed_by, _args)\n+    PostDestroyer.new(performed_by, post, reviewable: self).destroy\n+\n+    successful_transition :rejected, recalculate_score: false\n+  end\n+\n+  def perform_reject_and_suspend(performed_by, _args)\n+    successful_transition :rejected, recalculate_score: false\n+  end\n+\n+  private\n+\n+  def post\n+    @post ||= (target || Post.with_deleted.find_by(id: target_id))\n+  end\n+\n+  def build_action(actions, id, icon:, button_class: nil, bundle: nil, client_action: nil, confirm: false)\n+    actions.add(id, bundle: bundle) do |action|\n+      prefix = \"reviewables.actions.#{id}\"\n+      action.icon = icon\n+      action.button_class = button_class\n+      action.label = \"#{prefix}.title\"\n+      action.description = \"#{prefix}.description\"\n+      action.client_action = client_action\n+      action.confirm_message = \"#{prefix}.confirm\" if confirm\n+    end\n+  end\n+\n+  def successful_transition(to_state, recalculate_score: true)\n+    create_result(:success, to_state)  do |result|\n+      result.recalculate_score = recalculate_score\n+      result.update_flag_stats = { status: to_state, user_ids: [created_by_id] }\n+    end\n+  end\n+end"
    },
    {
      "sha": "9e38edf50d39a87f8c78f9cf085c12e88417e133",
      "filename": "app/serializers/reviewable_post_serializer.rb",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/app/serializers/reviewable_post_serializer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/app/serializers/reviewable_post_serializer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/serializers/reviewable_post_serializer.rb?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -0,0 +1,22 @@\n+# frozen_string_literal: true\n+\n+class ReviewablePostSerializer < ReviewableSerializer\n+  target_attributes :cooked, :raw, :reply_count, :reply_to_post_number\n+  attributes :blank_post, :post_updated_at, :post_version\n+\n+  def post_version\n+    object.target&.version\n+  end\n+\n+  def post_updated_at\n+    object.target&.updated_at\n+  end\n+\n+  def blank_post\n+    true\n+  end\n+\n+  def include_blank_post?\n+    object.target.blank?\n+  end\n+end"
    },
    {
      "sha": "683958ad32b582e25292a2612030303adddd773e",
      "filename": "config/locales/client.en.yml",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/config/locales/client.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/config/locales/client.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/client.en.yml?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -569,6 +569,8 @@ en:\n           title: \"Queued Post\"\n         reviewable_user:\n           title: \"User\"\n+        reviewable_post:\n+          title: \"Post\"\n       approval:\n         title: \"Post Needs Approval\"\n         description: \"We've received your new post but it needs to be approved by a moderator before it will appear. Please be patient.\""
    },
    {
      "sha": "27bc433132780a97ccd26f8a2007f3d726ed5ac4",
      "filename": "config/locales/server.en.yml",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/config/locales/server.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/config/locales/server.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/server.en.yml?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -1585,6 +1585,7 @@ en:\n     must_approve_users: \"Staff must approve all new user accounts before they are allowed to access the site.\"\n     invite_code: \"User must type this code to be allowed account registration, ignored when empty (case-insensitive)\"\n     approve_suspect_users: \"Add suspicious users to the review queue. Suspicious users have entered a bio/website but have no reading activity.\"\n+    review_every_post: \"All posts must be reviewed. WARNING! NOT RECOMMENDED FOR BUSY SITES.\"\n     pending_users_reminder_delay: \"Notify moderators if new users have been waiting for approval for longer than this many hours. Set to -1 to disable notifications.\"\n     persistent_sessions: \"Users will remain logged in when the web browser is closed\"\n     maximum_session_age: \"User will remain logged in for n hours since last visit\"\n@@ -5011,6 +5012,17 @@ en:\n           description: \"The user will be deleted, and we'll block their IP and email address.\"\n       reject:\n         title: \"Reject\"\n+        bundle_title: \"Reject...\"\n+      reject_and_suspend:\n+        title: \"Reject and Suspend user\"\n+      reject_and_silence:\n+        title: \"Reject and Silence user\"\n+      reject_and_delete:\n+        title: \"Reject and Delete the post\"\n+      reject_and_keep_deleted:\n+        title: \"Keep post deleted\"\n+      approve_and_restore:\n+        title: \"Approve and Restore post\"\n       delete_user:\n         title: \"Delete User\"\n         confirm: \"Are you sure you want to delete that user? This will remove all of their posts and block their email and IP address.\""
    },
    {
      "sha": "b9703b5f10604cbddb5a4c228b09c737e9ab3f0f",
      "filename": "config/site_settings.yml",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/config/site_settings.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/config/site_settings.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/site_settings.yml?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -1009,6 +1009,9 @@ posting:\n   show_published_pages_login_required:\n     default: false\n   skip_auto_delete_reply_likes: 5\n+  review_every_post:\n+    default: false\n+\n \n email:\n   email_time_window_mins:"
    },
    {
      "sha": "bb28f3cdd2433dd6f834226c5ec953f24fee1e04",
      "filename": "lib/post_creator.rb",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/lib/post_creator.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/lib/post_creator.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/post_creator.rb?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -239,7 +239,13 @@ def create\n       auto_close\n     end\n \n-    handle_spam if !opts[:import_mode] && (@post || @spam)\n+    if !opts[:import_mode]\n+      handle_spam if (@spam || @post)\n+\n+      if !@spam && @post && errors.blank?\n+        ReviewablePost.queue_for_review_if_possible(@post, @user)\n+      end\n+    end\n \n     @post\n   end"
    },
    {
      "sha": "26c13b9219191d224d4b46f1cecb718989012292",
      "filename": "lib/post_revisor.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/lib/post_revisor.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/lib/post_revisor.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/post_revisor.rb?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -235,6 +235,10 @@ def revise!(editor, fields, opts = {})\n \n     TopicLink.extract_from(@post)\n \n+    if should_create_new_version?\n+      ReviewablePost.queue_for_review_if_possible(@post, @editor)\n+    end\n+\n     successfully_saved_post_and_topic\n   end\n "
    },
    {
      "sha": "0d07c5aea25cc0ad209042f0534fdcfe44e87b64",
      "filename": "spec/components/post_creator_spec.rb",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/spec/components/post_creator_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/spec/components/post_creator_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/post_creator_spec.rb?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -703,6 +703,13 @@\n       creator.create\n     end\n \n+    it 'does not create a reviewable post if the review_every_post setting is enabled' do\n+      SiteSetting.review_every_post = true\n+      GroupMessage.stubs(:create)\n+\n+      expect { creator.create }.to change(ReviewablePost, :count).by(0)\n+    end\n+\n   end\n \n   # more integration testing ... maximise our testing\n@@ -1710,4 +1717,23 @@\n       )\n     end\n   end\n+\n+  context 'queue for review' do\n+    before { SiteSetting.review_every_post = true }\n+\n+    it 'created a reviewable post after creating the post' do\n+      title = \"This is a valid title\"\n+      raw = \"This is a really awesome post\"\n+\n+      post_creator = PostCreator.new(user, title: title, raw: raw)\n+\n+      expect { post_creator.create }.to change(ReviewablePost, :count).by(1)\n+    end\n+\n+    it 'does not create a reviewable post if the post is not valid' do\n+      post_creator = PostCreator.new(user, title: '', raw: '')\n+\n+      expect { post_creator.create }.to change(ReviewablePost, :count).by(0)\n+    end\n+  end\n end"
    },
    {
      "sha": "5d1fe8bb4a4677e4c26f5ae00d40af54b665a1df",
      "filename": "spec/components/post_revisor_spec.rb",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/spec/components/post_revisor_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/spec/components/post_revisor_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/post_revisor_spec.rb?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -1069,4 +1069,31 @@\n       end\n     end\n   end\n+\n+  context 'when the review_every_post setting is enabled' do\n+    let(:post) { Fabricate(:post, post_args) }\n+    let(:revisor) { PostRevisor.new(post) }\n+\n+    before { SiteSetting.review_every_post = true }\n+\n+    it 'queues the post when a regular user edits it' do\n+      expect {\n+        revisor.revise!(post.user, { raw: 'updated body' }, revised_at: post.updated_at + 10.minutes)\n+      }.to change(ReviewablePost, :count).by(1)\n+    end\n+\n+    it 'does nothing when a staff member edits a post' do\n+      admin = Fabricate(:admin)\n+\n+      expect { revisor.revise!(admin, { raw: 'updated body' }) }.to change(ReviewablePost, :count).by(0)\n+    end\n+\n+    it 'skips ninja edits' do\n+      SiteSetting.editing_grace_period = 1.minute\n+\n+      expect {\n+        revisor.revise!(post.user, { raw: 'updated body' }, revised_at: post.updated_at + 10.seconds)\n+      }.to change(ReviewablePost, :count).by(0)\n+    end\n+  end\n end"
    },
    {
      "sha": "26f0459e19f88c2c0cf7a0c0ff2f277b4c0ce793",
      "filename": "spec/models/reviewable_post_spec.rb",
      "status": "added",
      "additions": 130,
      "deletions": 0,
      "changes": 130,
      "blob_url": "https://github.com/discourse/discourse/blob/6b613e3076cca79e6efba1945f20ea04511dc940/spec/models/reviewable_post_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6b613e3076cca79e6efba1945f20ea04511dc940/spec/models/reviewable_post_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/reviewable_post_spec.rb?ref=6b613e3076cca79e6efba1945f20ea04511dc940",
      "patch": "@@ -0,0 +1,130 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+describe ReviewablePost do\n+  fab!(:admin) { Fabricate(:admin) }\n+\n+  describe '#build_actions' do\n+    let(:post) { Fabricate.build(:post) }\n+    let(:reviewable) { ReviewablePost.new(target: post) }\n+    let(:guardian) { Guardian.new }\n+\n+    it 'Does not return available actions when the reviewable is no longer pending' do\n+      available_actions = (Reviewable.statuses.keys - [:pending]).reduce([]) do |actions, status|\n+        reviewable.status = Reviewable.statuses[status]\n+\n+        actions.concat reviewable_actions(guardian).to_a\n+      end\n+\n+      expect(available_actions).to be_empty\n+    end\n+\n+    it 'only shows the approve post action if users cannot delete the post' do\n+      expect(reviewable_actions(guardian).has?(:approve)).to eq(true)\n+      expect(reviewable_actions(guardian).has?(:reject_and_delete)).to eq(false)\n+    end\n+\n+    it 'includes the reject and delete action if the user is allowed' do\n+      expect(reviewable_actions(Guardian.new(admin)).has?(:reject_and_delete)).to eq(true)\n+    end\n+\n+    it 'includes the approve post and unhide action if the post is hidden' do\n+      post.hidden = true\n+\n+      actions = reviewable_actions(guardian)\n+\n+      expect(actions.has?(:approve_and_unhide)).to eq(true)\n+    end\n+\n+    it 'includes the reject post and keep deleted action is the post is deleted' do\n+      post.deleted_at = 1.day.ago\n+\n+      actions = reviewable_actions(guardian)\n+\n+      expect(actions.has?(:approve_and_restore)).to eq(false)\n+      expect(actions.has?(:reject_and_keep_deleted)).to eq(true)\n+    end\n+\n+    it 'includes an option to approve and restore the post if the user is allowed' do\n+\n+      post.deleted_at = 1.day.ago\n+\n+      actions = reviewable_actions(Guardian.new(admin))\n+\n+      expect(actions.has?(:approve_and_restore)).to eq(false)\n+    end\n+\n+    def reviewable_actions(guardian)\n+      actions = Reviewable::Actions.new(reviewable, guardian, {})\n+      reviewable.build_actions(actions, guardian, {})\n+\n+      actions\n+    end\n+  end\n+\n+  describe 'Performing actions' do\n+    let(:post) { Fabricate(:post) }\n+    let(:reviewable) { ReviewablePost.needs_review!(target: post, created_by: admin) }\n+\n+    before { reviewable.created_new! }\n+\n+    describe '#perform_approve' do\n+      it 'transitions to the approved state' do\n+        result = reviewable.perform admin, :approve\n+\n+        expect(result.transition_to).to eq :approved\n+      end\n+    end\n+\n+    describe '#perform_reject_and_suspend' do\n+      it 'transitions to the rejected state' do\n+        result = reviewable.perform admin, :reject_and_suspend\n+\n+        expect(result.transition_to).to eq :rejected\n+      end\n+    end\n+\n+    describe '#perform_reject_and_keep_deleted' do\n+      it 'transitions to the rejected state and keep the post deleted' do\n+        post.trash!\n+\n+        result = reviewable.perform admin, :reject_and_keep_deleted\n+\n+        expect(result.transition_to).to eq :rejected\n+        expect(Post.where(id: post.id).exists?).to eq(false)\n+      end\n+    end\n+\n+    describe '#perform_approve_and_restore' do\n+      it 'transitions to the approved state and restores the post' do\n+        post.trash!\n+\n+        result = reviewable.reload.perform admin, :approve_and_restore\n+\n+        expect(result.transition_to).to eq :approved\n+        expect(Post.where(id: post.id).exists?).to eq(true)\n+      end\n+    end\n+\n+    describe '#perform_approve_and_unhide' do\n+      it 'transitions to the approved state and unhides the post' do\n+        post.update!(hidden: true)\n+\n+        result = reviewable.reload.perform admin, :approve_and_unhide\n+\n+        expect(result.transition_to).to eq :approved\n+        expect(post.reload.hidden).to eq(false)\n+      end\n+    end\n+\n+    describe '#perform_reject_and_delete' do\n+      it 'transitions to the rejected state and deletes the post' do\n+        result = reviewable.perform admin, :reject_and_delete\n+\n+        expect(result.transition_to).to eq :rejected\n+        expect(Post.where(id: post.id).exists?).to eq(false)\n+      end\n+    end\n+  end\n+end"
    }
  ]
}
