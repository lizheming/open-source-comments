{
  "sha": "1bbf3244157c75f80395dc1530aa6b595424303b",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODoxYmJmMzI0NDE1N2M3NWY4MDM5NWRjMTUzMGFhNmI1OTU0MjQzMDNi",
  "commit": {
    "author": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2021-02-26T18:00:31Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-02-26T18:00:31Z"
    },
    "message": "FIX: When using Ember CLI theme Javascript/HTML was not being inserted (#12227)\n\nThis also supports plugins with custom HTML.",
    "tree": {
      "sha": "40ac3625781bfd6de6659da88562efce6f1df84f",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/40ac3625781bfd6de6659da88562efce6f1df84f"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/1bbf3244157c75f80395dc1530aa6b595424303b",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgOTc/CRBK7hj4Ov3rIwAAdHIIAGKycsC2X9Z1gFb6eHH3cNcv\nhY66LGD11ms6W0qgcA8yM8evy0JhDlV8HZzI1+H6FYh5m1NqLjZg5MaPQpCJuYVM\nTRo4Hdh8FJGXDecP5jiXbczqmI3KFbh4Qho1Xg9vx8QpXP6T6TL4rH+ftHrMJwJL\n/mDbrl9tYTxak0AEKV4w4iMqaOMXOTAhnsXpq66xmyUJT326OC8QdRnHpJzoIKGo\nNmSn5EsBItMQSqb7sHRHkwfIOxw1PC1qGH0nuDqSFYNgFuajZkSaSkzYT+NLuKny\ny5d2hhN7JYTppd9Y071CU5LJFLchkchizgrwYsf2XK+CERL0MzWWG27xxPxJVjo=\n=f+xw\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 40ac3625781bfd6de6659da88562efce6f1df84f\nparent aa1442fdc392444fc0f1c0d1f1468fbdb5b55898\nauthor Robin Ward <robin.ward@gmail.com> 1614362431 -0500\ncommitter GitHub <noreply@github.com> 1614362431 -0500\n\nFIX: When using Ember CLI theme Javascript/HTML was not being inserted (#12227)\n\nThis also supports plugins with custom HTML."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/1bbf3244157c75f80395dc1530aa6b595424303b",
  "html_url": "https://github.com/discourse/discourse/commit/1bbf3244157c75f80395dc1530aa6b595424303b",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/1bbf3244157c75f80395dc1530aa6b595424303b/comments",
  "author": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aa1442fdc392444fc0f1c0d1f1468fbdb5b55898",
      "url": "https://api.github.com/repos/discourse/discourse/commits/aa1442fdc392444fc0f1c0d1f1468fbdb5b55898",
      "html_url": "https://github.com/discourse/discourse/commit/aa1442fdc392444fc0f1c0d1f1468fbdb5b55898"
    }
  ],
  "stats": {
    "total": 96,
    "additions": 86,
    "deletions": 10
  },
  "files": [
    {
      "sha": "1d943729380119cddc02a25a5ac8cfdaeba1b326",
      "filename": "app/assets/javascripts/discourse/public/assets/scripts/discourse-boot.js",
      "status": "modified",
      "additions": 30,
      "deletions": 10,
      "changes": 40,
      "blob_url": "https://github.com/discourse/discourse/blob/1bbf3244157c75f80395dc1530aa6b595424303b/app/assets/javascripts/discourse/public/assets/scripts/discourse-boot.js",
      "raw_url": "https://github.com/discourse/discourse/raw/1bbf3244157c75f80395dc1530aa6b595424303b/app/assets/javascripts/discourse/public/assets/scripts/discourse-boot.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/public/assets/scripts/discourse-boot.js?ref=1bbf3244157c75f80395dc1530aa6b595424303b",
      "patch": "@@ -187,25 +187,27 @@\n   fetch(\"/bootstrap.json\")\n     .then((res) => res.json())\n     .then((data) => {\n-      config.bootstrap = data.bootstrap;\n+      let bootstrap = data.bootstrap;\n+\n+      config.bootstrap = bootstrap;\n \n       // We know better, we packaged this.\n       config.bootstrap.setup_data.markdown_it_url =\n         \"/assets/discourse-markdown.js\";\n \n-      let locale = data.bootstrap.locale_script;\n+      let locale = bootstrap.locale_script;\n \n-      if (data.bootstrap.csrf_token) {\n+      if (bootstrap.csrf_token) {\n         const csrfParam = document.createElement(\"meta\");\n         csrfParam.setAttribute(\"name\", \"csrf-param\");\n         csrfParam.setAttribute(\"content\", \"authenticity_token\");\n         head.append(csrfParam);\n         const csrfToken = document.createElement(\"meta\");\n         csrfToken.setAttribute(\"name\", \"csrf-token\");\n-        csrfToken.setAttribute(\"content\", data.bootstrap.csrf_token);\n+        csrfToken.setAttribute(\"content\", bootstrap.csrf_token);\n         head.append(csrfToken);\n       }\n-      (data.bootstrap.stylesheets || []).forEach((s) => {\n+      (bootstrap.stylesheets || []).forEach((s) => {\n         let link = document.createElement(\"link\");\n         link.setAttribute(\"rel\", \"stylesheet\");\n         link.setAttribute(\"type\", \"text/css\");\n@@ -222,9 +224,9 @@\n         head.append(link);\n       });\n \n-      let pluginJs = data.bootstrap.plugin_js;\n+      let pluginJs = bootstrap.plugin_js;\n       if (isTesting()) {\n-        // pluginJs = pluginJs.concat(data.bootstrap.plugin_test_js);\n+        // pluginJs = pluginJs.concat(bootstrap.plugin_test_js);\n       }\n \n       pluginJs.forEach((src) => {\n@@ -233,19 +235,37 @@\n         head.append(script);\n       });\n \n-      if (data.bootstrap.theme_ids) {\n+      if (bootstrap.theme_ids) {\n         let theme_ids = document.createElement(\"meta\");\n         theme_ids.setAttribute(\"name\", \"discourse_theme_ids\");\n-        theme_ids.setAttribute(\"content\", data.bootstrap.theme_ids);\n+        theme_ids.setAttribute(\"content\", bootstrap.theme_ids);\n         head.append(theme_ids);\n       }\n \n+      let themeHtml = bootstrap.theme_html;\n+      let html = bootstrap.html;\n+\n+      head.insertAdjacentHTML(\"beforeend\", themeHtml.translations || \"\");\n+      head.insertAdjacentHTML(\"beforeend\", themeHtml.js || \"\");\n+      head.insertAdjacentHTML(\"beforeend\", themeHtml.head_tag || \"\");\n+\n+      head.insertAdjacentHTML(\"afterbegin\", html.before_script_load || \"\");\n+      head.insertAdjacentHTML(\"beforeend\", html.before_head_close || \"\");\n+\n+      let main = document.getElementById(\"main\");\n+      main.insertAdjacentHTML(\"beforebegin\", themeHtml.header || \"\");\n+      main.insertAdjacentHTML(\"beforebegin\", html.header || \"\");\n+\n+      let body = document.getElementsByTagName(\"body\")[0];\n+      body.insertAdjacentHTML(\"beforeend\", themeHtml.body_tag || \"\");\n+      body.insertAdjacentHTML(\"beforeend\", html.before_body_close || \"\");\n+\n       loadScript(locale).then(() => {\n         define(\"I18n\", [\"exports\"], function (exports) {\n           return I18n;\n         });\n         window.__widget_helpers = require(\"discourse-widget-hbs/helpers\").default;\n-        let extras = (data.bootstrap.extra_locales || []).map(loadScript);\n+        let extras = (bootstrap.extra_locales || []).map(loadScript);\n         return Promise.all(extras).then(() => {\n           const event = new CustomEvent(\"discourse-booted\", { detail: config });\n           document.dispatchEvent(event);"
    },
    {
      "sha": "e80b9777f05bbb1fa1acdcd365fda4ca19d3a7fd",
      "filename": "app/controllers/bootstrap_controller.rb",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/discourse/discourse/blob/1bbf3244157c75f80395dc1530aa6b595424303b/app/controllers/bootstrap_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/1bbf3244157c75f80395dc1530aa6b595424303b/app/controllers/bootstrap_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/bootstrap_controller.rb?ref=1bbf3244157c75f80395dc1530aa6b595424303b",
      "patch": "@@ -58,6 +58,8 @@ def index\n       plugin_test_js: [script_asset_path(\"plugin_tests\")],\n       setup_data: client_side_setup_data,\n       preloaded: @preloaded,\n+      html: create_html,\n+      theme_html: create_theme_html,\n     }\n     bootstrap[:extra_locales] = extra_locales if extra_locales.present?\n     bootstrap[:csrf_token] = form_authenticity_token if current_user\n@@ -88,4 +90,39 @@ def add_style(target, opts = nil)\n     end\n   end\n \n+  def create_html\n+    html = {}\n+    return html unless allow_plugins?\n+\n+    add_plugin_html(html, :before_body_close)\n+    add_plugin_html(html, :before_head_close)\n+    add_plugin_html(html, :before_script_load)\n+    add_plugin_html(html, :header)\n+\n+    html\n+  end\n+\n+  def add_plugin_html(html, key)\n+    add_if_present(html, key, DiscoursePluginRegistry.build_html(\"server:#{key.to_s.dasherize}\", self))\n+  end\n+\n+  def create_theme_html\n+    theme_html = {}\n+    return theme_html if customization_disabled?\n+\n+    theme_view = mobile_view? ? :mobile : :desktop\n+\n+    add_if_present(theme_html, :body_tag, Theme.lookup_field(theme_ids, theme_view, 'body_tag'))\n+    add_if_present(theme_html, :head_tag, Theme.lookup_field(theme_ids, theme_view, 'head_tag'))\n+    add_if_present(theme_html, :header, Theme.lookup_field(theme_ids, theme_view, 'header'))\n+    add_if_present(theme_html, :translations, Theme.lookup_field(theme_ids, :translations, I18n.locale))\n+    add_if_present(theme_html, :js, Theme.lookup_field(theme_ids, :extra_js, nil))\n+\n+    theme_html\n+  end\n+\n+  def add_if_present(hash, key, val)\n+    hash[key] = val if val.present?\n+  end\n+\n end"
    },
    {
      "sha": "29aaa72a69d74cbcd1fbed73044559e91128dc6f",
      "filename": "spec/requests/bootstrap_controller_spec.rb",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/discourse/discourse/blob/1bbf3244157c75f80395dc1530aa6b595424303b/spec/requests/bootstrap_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/1bbf3244157c75f80395dc1530aa6b595424303b/spec/requests/bootstrap_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/bootstrap_controller_spec.rb?ref=1bbf3244157c75f80395dc1530aa6b595424303b",
      "patch": "@@ -4,6 +4,18 @@\n \n describe BootstrapController do\n \n+  let(:theme) { Fabricate(:theme, enabled: true) }\n+\n+  before do\n+    DiscoursePluginRegistry.register_html_builder('server:before-head-close') { '<b>wat</b>' }\n+    theme.set_field(target: :desktop, name: :header, value: '<h1>custom header</h1>').save\n+    SiteSetting.default_theme_id = theme.id\n+  end\n+\n+  after do\n+    DiscoursePluginRegistry.reset!\n+  end\n+\n   it \"returns data as anonymous\" do\n     get \"/bootstrap.json\"\n     expect(response.status).to eq(200)\n@@ -14,9 +26,16 @@\n     bootstrap = json['bootstrap']\n     expect(bootstrap).to be_present\n     expect(bootstrap['title']).to be_present\n+    expect(bootstrap['theme_ids']).to eq([theme.id])\n     expect(bootstrap['setup_data']['base_url']).to eq(Discourse.base_url)\n     expect(bootstrap['stylesheets']).to be_present\n \n+    expect(bootstrap['html']).to be_present\n+    expect(bootstrap['html']['before_head_close']).to eq('<b>wat</b>')\n+\n+    expect(bootstrap['theme_html']).to be_present\n+    expect(bootstrap['theme_html']['header']).to eq('<h1>custom header</h1>')\n+\n     preloaded = bootstrap['preloaded']\n     expect(preloaded['site']).to be_present\n     expect(preloaded['siteSettings']).to be_present"
    }
  ]
}
