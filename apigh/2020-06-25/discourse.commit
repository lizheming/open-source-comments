{
  "sha": "689568c2160c71de7403f52b694cd997ad5ed420",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo2ODk1NjhjMjE2MGM3MWRlNzQwM2Y1MmI2OTRjZDk5N2FkNWVkNDIw",
  "commit": {
    "author": {
      "name": "Sam Saffron",
      "email": "sam.saffron@gmail.com",
      "date": "2020-06-25T05:00:15Z"
    },
    "committer": {
      "name": "Sam Saffron",
      "email": "sam.saffron@gmail.com",
      "date": "2020-06-25T05:00:15Z"
    },
    "message": "FIX: invalid urls should not break store.has_been_uploaded?\n\nBreaking this method has wide ramification including breaking\nsearch indexing.",
    "tree": {
      "sha": "67ab025e3a6f6902598102cf21d09f3da414fd80",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/67ab025e3a6f6902598102cf21d09f3da414fd80"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/689568c2160c71de7403f52b694cd997ad5ed420",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEOSsR4Zg5f63AmUE+uWBhaNL/2fUFAl70L18ACgkQuWBhaNL/\n2fVNvRAA0kc5kxxR9tvlAXmRreK3Mr/SjeE4Ae1J5KBC0xFMbFpVzEJgMlKL+tzW\nKG6F3VHC6OyQEoZgTkrdJeVFHXYA2Uew36JdK0hCZf/kaX3qkSIa2Y4q0VdumacR\nNpM7sitp8yjn9M8+HKA6Mz8BVL8vvBG46dtoBtfqXJ+flkEEGDUjR5gHx2mpFZdE\nUujMcg8ke5dC0PvcqFLeF15YBv57JehzXslr7JUzg+C5/JnfR9CTHWXg6XlYGHxq\negWlhetC9/qcLmRYbOV1alQjJ0E6JGw8kwnvRpNFPNsg+tS6hzrfw6bSG1QMmFS7\nVRbdrdCdmxni/gNMoeQkbhmkFpTi85Sl1unqXoDTvJbLSIAxmHOUDhtr7S2RCvUn\n4/AcTUTNWg7ce8oIJHd8wJ3+LHaY4ID+A8V0lN3CxH++2gGP9FtKPcOFPQ2Y9P3V\nmIOfwHgH4IlSNlo41W/cOUB1kx6QhNBS1KQd0975YrYiSeRIjQrR0fhkxUaNzX1O\nXCMokQLrYRWCn7vyO94GBd+mQCz/5ITYCAm4fcFI2f0K7UqiGeJlI64EYUh8CX9C\nzLzrzmMpXZSYW+jhIh0C7RfpCZAPS1GiwdFbfqNO7DaVCR877cmt5ilb0HmUb/Gr\nyneTYZ/BN1MOKV6jV6qmSfK3cgjTtTuJWydybg1bhLlcxG4pMW4=\n=ewfG\n-----END PGP SIGNATURE-----",
      "payload": "tree 67ab025e3a6f6902598102cf21d09f3da414fd80\nparent 88459e08c970221ac5760abd7d0f0476aef9a70b\nauthor Sam Saffron <sam.saffron@gmail.com> 1593061215 +1000\ncommitter Sam Saffron <sam.saffron@gmail.com> 1593061215 +1000\n\nFIX: invalid urls should not break store.has_been_uploaded?\n\nBreaking this method has wide ramification including breaking\nsearch indexing.\n"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/689568c2160c71de7403f52b694cd997ad5ed420",
  "html_url": "https://github.com/discourse/discourse/commit/689568c2160c71de7403f52b694cd997ad5ed420",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/689568c2160c71de7403f52b694cd997ad5ed420/comments",
  "author": {
    "login": "SamSaffron",
    "id": 5213,
    "node_id": "MDQ6VXNlcjUyMTM=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/5213?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/SamSaffron",
    "html_url": "https://github.com/SamSaffron",
    "followers_url": "https://api.github.com/users/SamSaffron/followers",
    "following_url": "https://api.github.com/users/SamSaffron/following{/other_user}",
    "gists_url": "https://api.github.com/users/SamSaffron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/SamSaffron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/SamSaffron/subscriptions",
    "organizations_url": "https://api.github.com/users/SamSaffron/orgs",
    "repos_url": "https://api.github.com/users/SamSaffron/repos",
    "events_url": "https://api.github.com/users/SamSaffron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/SamSaffron/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "SamSaffron",
    "id": 5213,
    "node_id": "MDQ6VXNlcjUyMTM=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/5213?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/SamSaffron",
    "html_url": "https://github.com/SamSaffron",
    "followers_url": "https://api.github.com/users/SamSaffron/followers",
    "following_url": "https://api.github.com/users/SamSaffron/following{/other_user}",
    "gists_url": "https://api.github.com/users/SamSaffron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/SamSaffron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/SamSaffron/subscriptions",
    "organizations_url": "https://api.github.com/users/SamSaffron/orgs",
    "repos_url": "https://api.github.com/users/SamSaffron/repos",
    "events_url": "https://api.github.com/users/SamSaffron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/SamSaffron/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "88459e08c970221ac5760abd7d0f0476aef9a70b",
      "url": "https://api.github.com/repos/discourse/discourse/commits/88459e08c970221ac5760abd7d0f0476aef9a70b",
      "html_url": "https://github.com/discourse/discourse/commit/88459e08c970221ac5760abd7d0f0476aef9a70b"
    }
  ],
  "stats": {
    "total": 12,
    "additions": 8,
    "deletions": 4
  },
  "files": [
    {
      "sha": "6dd62140c7f4b3fa2ffaab579b56b068143cf98f",
      "filename": "lib/file_store/s3_store.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/689568c2160c71de7403f52b694cd997ad5ed420/lib/file_store/s3_store.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/689568c2160c71de7403f52b694cd997ad5ed420/lib/file_store/s3_store.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/file_store/s3_store.rb?ref=689568c2160c71de7403f52b694cd997ad5ed420",
      "patch": "@@ -89,7 +89,10 @@ def has_been_uploaded?(url)\n \n       begin\n         parsed_url = URI.parse(UrlHelper.encode(url))\n-      rescue URI::InvalidURIError, URI::InvalidComponentError\n+      rescue\n+        # There are many exceptions possible here including Addressable::URI:: excpetions\n+        # and URI:: exceptions, catch all may seem wide, but it makes no sense to raise ever\n+        # on an invalid url here\n         return false\n       end\n "
    },
    {
      "sha": "f36a3a4bed4ea2aa84954985fb8f2174509a65a8",
      "filename": "spec/multisite/s3_store_spec.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/689568c2160c71de7403f52b694cd997ad5ed420/spec/multisite/s3_store_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/689568c2160c71de7403f52b694cd997ad5ed420/spec/multisite/s3_store_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/multisite/s3_store_spec.rb?ref=689568c2160c71de7403f52b694cd997ad5ed420",
      "patch": "@@ -283,9 +283,10 @@ def build_upload\n     let(:s3_bucket) { resource.bucket(SiteSetting.s3_upload_bucket) }\n     let(:s3_helper) { store.s3_helper }\n \n-    it \"returns false for blank urls\" do\n-      url = \"\"\n-      expect(store.has_been_uploaded?(url)).to eq(false)\n+    it \"returns false for blank urls and bad urls\" do\n+      expect(store.has_been_uploaded?(\"\")).to eq(false)\n+      expect(store.has_been_uploaded?(\"http://test@test.com:test/test.git\")).to eq(false)\n+      expect(store.has_been_uploaded?(\"http:///+test@test.com/test.git\")).to eq(false)\n     end\n \n     it \"returns true if the base hostname is the same for both urls\" do"
    }
  ]
}
