{
  "sha": "df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmRmOWMwNWI0OTA1ZTlhZjNmOTljY2RlY2QxZjBmNGQ2NjBjOTFhOGM=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-06-18T23:25:35Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-06-18T23:25:35Z"
    },
    "message": "add microsoft auth",
    "tree": {
      "sha": "dbd3702471ee40c0a810ca4c3abf0caa2b70046a",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/dbd3702471ee40c0a810ca4c3abf0caa2b70046a"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
  "html_url": "https://github.com/umputun/remark42/commit/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "42d0c67cb3d7dde750217ab1bb61609900211217",
      "url": "https://api.github.com/repos/umputun/remark42/commits/42d0c67cb3d7dde750217ab1bb61609900211217",
      "html_url": "https://github.com/umputun/remark42/commit/42d0c67cb3d7dde750217ab1bb61609900211217"
    }
  ],
  "stats": {
    "total": 240,
    "additions": 205,
    "deletions": 35
  },
  "files": [
    {
      "sha": "b73647c0416212169ecfdbda0802209d8e941ba0",
      "filename": "README.md",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/README.md?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -4,7 +4,7 @@\n \n Remark42 is a self-hosted, lightweight, and simple (yet functional) comment engine, which doesn't spy on users. It can be embedded into blogs, articles or any other place where readers add comments.\n \n-* Social login via Google, Twitter, Facebook, GitHub and Yandex\n+* Social login via Google, Twitter, Facebook, Microsoft, GitHub and Yandex\n * Login via email\n * Optional anonymous access\n * Multi-level nested comments with both tree and plain presentations\n@@ -135,6 +135,8 @@ _this is the recommended way to run remark42_\n | auth.google.csec        | AUTH_GOOGLE_CSEC        |                          | Google OAuth client secret                      |\n | auth.facebook.cid       | AUTH_FACEBOOK_CID       |                          | Facebook OAuth client ID                        |\n | auth.facebook.csec      | AUTH_FACEBOOK_CSEC      |                          | Facebook OAuth client secret                    |\n+| auth.microsoft.cid      | AUTH_MICROSOFT_CID      |                          | Microsoft OAuth client ID                       |\n+| auth.microsoft.csec     | AUTH_MICROSOFT_CSEC     |                          | Microsoft OAuth client secret                   |\n | auth.github.cid         | AUTH_GITHUB_CID         |                          | Github OAuth client ID                          |\n | auth.github.csec        | AUTH_GITHUB_CSEC        |                          | Github OAuth client secret                      |\n | auth.twitter.cid        | AUTH_TWITTER_CID        |                          | Twitter Consumer API Key                        |\n@@ -284,6 +286,14 @@ _instructions for google oauth2 setup borrowed from [oauth2_proxy](https://githu\n 1.  Under **\"Facebook login\"** / **\"Settings\"** fill \"Valid OAuth redirect URIs\" with your callback url constructed as domain + `/auth/facebook/callback`\n 1.  Select **\"App Review\"** and turn public flag on. This step may ask you to provide a link to your privacy policy.\n \n+#### Microsoft Auth Provider\n+\n+1.  Register a new application [using the Azure portal](https://docs.microsoft.com/en-us/graph/auth-register-app-v2).\n+2.  Under **\"Authentication/Platform configurations/Web\"** enter the correct url constructed as domain + `/auth/microsoft/callback`. i.e. `https://example.mysite.com/auth/microsoft/callback`\n+3.  In \"Overview\" take note of the **Application (client) ID** \n+4.  Choose the new project from the top right project dropdown (only if another project is selected)\n+5.  Select \"Certificates & secrets\" and click on \"+ New Client Secret\". \n+\n ##### Twitter Auth Provider\n \n 1.\tCreate a new twitter application https://developer.twitter.com/en/apps"
    },
    {
      "sha": "f5230e870138dc066aa8dceb0e120b36d995f4ba",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server.go?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -83,6 +83,7 @@ type ServerCommand struct {\n \t\tGoogle    AuthGroup `group:\"google\" namespace:\"google\" env-namespace:\"GOOGLE\" description:\"Google OAuth\"`\n \t\tGithub    AuthGroup `group:\"github\" namespace:\"github\" env-namespace:\"GITHUB\" description:\"Github OAuth\"`\n \t\tFacebook  AuthGroup `group:\"facebook\" namespace:\"facebook\" env-namespace:\"FACEBOOK\" description:\"Facebook OAuth\"`\n+\t\tMicrosoft AuthGroup `group:\"microsoft\" namespace:\"microsoft\" env-namespace:\"MICROSOFT\" description:\"Microsoft OAuth\"`\n \t\tYandex    AuthGroup `group:\"yandex\" namespace:\"yandex\" env-namespace:\"YANDEX\" description:\"Yandex OAuth\"`\n \t\tTwitter   AuthGroup `group:\"twitter\" namespace:\"twitter\" env-namespace:\"TWITTER\" description:\"Twitter OAuth\"`\n \t\tDev       bool      `long:\"dev\" env:\"DEV\" description:\"enable dev (local) oauth2\"`\n@@ -697,6 +698,10 @@ func (s *ServerCommand) addAuthProviders(authenticator *auth.Service) error {\n \t\tauthenticator.AddProvider(\"facebook\", s.Auth.Facebook.CID, s.Auth.Facebook.CSEC)\n \t\tproviders++\n \t}\n+\tif s.Auth.Microsoft.CID != \"\" && s.Auth.Microsoft.CSEC != \"\" {\n+\t\tauthenticator.AddProvider(\"microsoft\", s.Auth.Microsoft.CID, s.Auth.Microsoft.CSEC)\n+\t\tproviders++\n+\t}\n \tif s.Auth.Yandex.CID != \"\" && s.Auth.Yandex.CSEC != \"\" {\n \t\tauthenticator.AddProvider(\"yandex\", s.Auth.Yandex.CID, s.Auth.Yandex.CSEC)\n \t\tproviders++"
    },
    {
      "sha": "8a4f990c99755165dd260b3a8f4429ad0857c9d3",
      "filename": "backend/go.mod",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/go.mod?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -12,7 +12,7 @@ require (\n \tgithub.com/go-chi/chi v4.1.1+incompatible\n \tgithub.com/go-chi/cors v1.1.1\n \tgithub.com/go-chi/render v1.0.1\n-\tgithub.com/go-pkgz/auth v0.10.2\n+\tgithub.com/go-pkgz/auth v0.11.0\n \tgithub.com/go-pkgz/jrpc v0.2.0\n \tgithub.com/go-pkgz/lcw v0.6.1\n \tgithub.com/go-pkgz/lgr v0.7.0"
    },
    {
      "sha": "a02de6f03c9040011dc7303ea351f1398a40752f",
      "filename": "backend/go.sum",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/go.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/go.sum?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -56,8 +56,8 @@ github.com/go-chi/cors v1.1.1 h1:eHuqxsIw89iXcWnWUN8R72JMibABJTN/4IOYI5WERvw=\n github.com/go-chi/cors v1.1.1/go.mod h1:K2Yje0VW/SJzxiyMYu6iPQYa7hMjQX2i/F491VChg1I=\n github.com/go-chi/render v1.0.1 h1:4/5tis2cKaNdnv9zFLfXzcquC9HbeZgCnxGnKrltBS8=\n github.com/go-chi/render v1.0.1/go.mod h1:pq4Rr7HbnsdaeHagklXub+p6Wd16Af5l9koip1OvJns=\n-github.com/go-pkgz/auth v0.10.2 h1:aYTEu0sxBi+UJXm3IIn9/cgW7bTXZkiykY23rdYZjAc=\n-github.com/go-pkgz/auth v0.10.2/go.mod h1:w4Z1qaYvuh2P3T2gNh0f8GcKCH0HHAoQtQ8iv+9+WGg=\n+github.com/go-pkgz/auth v0.11.0 h1:xi9Y0KGZUftVLx/8tGdvIfUk/+/4QLBVL6k9A8C4ycM=\n+github.com/go-pkgz/auth v0.11.0/go.mod h1:NzVqlTW0E9JXVdAaWRq81XZjICgHnNaNdUfE3CbS2T4=\n github.com/go-pkgz/expirable-cache v0.0.3 h1:rTh6qNPp78z0bQE6HDhXBHUwqnV9i09Vm6dksJLXQDc=\n github.com/go-pkgz/expirable-cache v0.0.3/go.mod h1:+IauqN00R2FqNRLCLA+X5YljQJrwB179PfiAoMPlTlQ=\n github.com/go-pkgz/jrpc v0.2.0 h1:CLy/eZyekjraVrxZV18N2R1mYLMJ/nWrgdfyIOGPY/E="
    },
    {
      "sha": "a1ff268318412ec809ab6b1f3f0c19ee0d0b4ce7",
      "filename": "backend/vendor/github.com/go-pkgz/auth/.golangci.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/.golangci.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/.golangci.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/.golangci.yml?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -4,7 +4,7 @@ linters-settings:\n   golint:\n     min-confidence: 0\n   gocyclo:\n-    min-complexity: 15\n+    min-complexity: 20\n   maligned:\n     suggest-new: true\n   goconst:"
    },
    {
      "sha": "1cae0be0a9af800bd1ed43fb0433733813774164",
      "filename": "backend/vendor/github.com/go-pkgz/auth/README.md",
      "status": "modified",
      "additions": 30,
      "deletions": 4,
      "changes": 34,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/README.md",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/README.md?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -1,7 +1,7 @@\n # auth - authentication via oauth2, direct and email\n [![Build Status](https://github.com/go-pkgz/auth/workflows/build/badge.svg)](https://github.com/go-pkgz/auth/actions) [![Coverage Status](https://coveralls.io/repos/github/go-pkgz/auth/badge.svg?branch=master)](https://coveralls.io/github/go-pkgz/auth?branch=master) [![godoc](https://godoc.org/github.com/go-pkgz/auth?status.svg)](https://pkg.go.dev/github.com/go-pkgz/auth?tab=doc)\n \n-This library provides \"social login\" with Github, Google, Facebook, Twitter and Yandex as well as custom auth providers and email verification.\n+This library provides \"social login\" with Github, Google, Facebook, Microsoft, Twitter, Yandex and Battle.net as well as custom auth providers and email verification.\n \n - Multiple oauth2 providers can be used at the same time\n - Special `dev` provider allows local testing and development\n@@ -78,6 +78,8 @@ func main() {\n - `middleware.Admin` - requires authenticated admin user\n - `middleware.Trace` - doesn't require authenticated user, but adds user info to request\n \n+Also, there is a special middleware `middleware.UpdateUser` for population and modifying UserInfo in every request. See \"Customization\" for more details.\n+\n ## Details\n \n Generally, adding support of `auth` includes a few relatively simple steps:\n@@ -249,10 +251,11 @@ In order to add a new oauth2 provider following input is required:\n There are several ways to adjust functionality of the library:\n \n 1. `SecretReader` - interface with a single method `Get(aud string) string` to return the secret used for JWT signing and verification\n-2. `ClaimsUpdater` - interface with `Update(claims Claims) Claims` method. This is the primary way to alter a token at login time and add any attributes, set ip, email, admin status and so on.\n-3. `Validator` - interface with `Validate(token string, claims Claims) bool` method. This is post-token hook and will be called on **each request** wrapped with `Auth` middleware. This will be the place for special logic to reject some tokens or users.\n+1. `ClaimsUpdater` - interface with `Update(claims Claims) Claims` method. This is the primary way to alter a token at login time and add any attributes, set ip, email, admin status and so on.\n+1. `Validator` - interface with `Validate(token string, claims Claims) bool` method. This is post-token hook and will be called on **each request** wrapped with `Auth` middleware. This will be the place for special logic to reject some tokens or users.\n+1. `UserUpdater` - interface with `Update(claims token.User) token.User` method.  This method will be called on **each request** wrapped with `UpdateUser` middleware. This will be the place for special logic modify User Info in request context. [Example of usage.]((https://github.com/go-pkgz/auth/blob/master/_example/main.go#L148))\n \n-All of the interfaces above have corresponding Func adapters - `SecretFunc`, `ClaimsUpdFunc` and `ValidatorFunc`.\n+All of the interfaces above have corresponding Func adapters - `SecretFunc`, `ClaimsUpdFunc`, `ValidatorFunc` and `UserUpdFunc`.\n \n ### Implementing black list logic or some other filters\n \n@@ -332,6 +335,15 @@ Authentication handled by external providers. You should setup oauth2 for all (o\n \n _instructions for google oauth2 setup borrowed from [oauth2_proxy](https://github.com/bitly/oauth2_proxy)_\n \n+#### Microsoft Auth Provider\n+\n+1 .Register a new application [using the Azure portal](https://docs.microsoft.com/en-us/graph/auth-register-app-v2).\n+2.  Under **\"Authentication/Platform configurations/Web\"** enter the correct url constructed as domain + `/auth/microsoft/callback`. i.e. `https://example.mysite.com/auth/microsoft/callback`\n+3. In \"Overview\" take note of the **Application (client) ID** \n+4. Choose the new project from the top right project dropdown (only if another project is selected)\n+5.  Select \"Certificates & secrets\" and click on \"+ New Client Secret\". \n+\n+\n #### GitHub Auth Provider\n \n 1.  Create a new **\"OAuth App\"**: https://github.com/settings/developers\n@@ -361,6 +373,20 @@ _instructions for google oauth2 setup borrowed from [oauth2_proxy](https://githu\n \n For more details refer to [Yandex OAuth](https://tech.yandex.com/oauth/doc/dg/concepts/about-docpage/) and [Yandex.Passport](https://tech.yandex.com/passport/doc/dg/index-docpage/) API documentation.\n \n+##### Battle.net Auth Provider\n+\n+1. Log into Battle.net as a developer: https://develop.battle.net/nav/login-redirect\n+1.  Click \"+ CREATE CLIENT\" https://develop.battle.net/access/clients/create\n+1. For \"Client name\", enter whatever you want\n+1. For \"Redirect URLs\", one of the lines must be \"http\\[s\\]://your_remark_installation:port//auth/battlenet/callback\", e.g. https://localhost:8443/auth/battlenet/callback or https://remark.mysite.com/auth/battlenet/callback\n+1. For \"Service URL\", enter the URL to your site or check \"I do not have a service URL for this client.\" checkbox if you don't have any\n+1. For \"Intended use\", describe the application you're developing\n+1. Click \"Save\".\n+1. You can see your client ID and client secret at https://develop.battle.net/access/clients by clicking the client you created\n+\n+For more details refer to [Complete Guide of Battle.net OAuth API and Login Button](https://hakanu.net/oauth/2017/01/26/complete-guide-of-battle-net-oauth-api-and-login-button/) or [the official Battle.net OAuth2 guide](https://develop.battle.net/documentation/guides/using-oauth)\n+\n+\n #### Twitter Auth Provider\n 1.\tCreate a new twitter application https://developer.twitter.com/en/apps\n 1.\tFill **App name**  and **Description** and **URL** of your site"
    },
    {
      "sha": "1cbddebefee293cf51f5a40b39ba1998ac9fb777",
      "filename": "backend/vendor/github.com/go-pkgz/auth/auth.go",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/auth.go",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/auth.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/auth.go?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -1,4 +1,4 @@\n-// Package auth provides \"social login\" with Github, Google, Facebook and Yandex as well as custom auth providers.\n+// Package auth provides \"social login\" with Github, Google, Facebook, Microsoft, Yandex and Battle.net as well as custom auth providers.\n package auth\n \n import (\n@@ -222,6 +222,10 @@ func (s *Service) AddProvider(name, cid, csecret string) {\n \t\ts.providers = append(s.providers, provider.NewService(provider.NewFacebook(p)))\n \tcase \"yandex\":\n \t\ts.providers = append(s.providers, provider.NewService(provider.NewYandex(p)))\n+\tcase \"battlenet\":\n+\t\ts.providers = append(s.providers, provider.NewService(provider.NewBattlenet(p)))\n+\tcase \"microsoft\":\n+\t\ts.providers = append(s.providers, provider.NewService(provider.NewMicrosoft(p)))\n \tcase \"twitter\":\n \t\ts.providers = append(s.providers, provider.NewService(provider.NewTwitter(p)))\n \tcase \"dev\":"
    },
    {
      "sha": "7581f674b9c927b2dd7a1638f548f54b5b912896",
      "filename": "backend/vendor/github.com/go-pkgz/auth/avatar/avatar.go",
      "status": "modified",
      "additions": 25,
      "deletions": 15,
      "changes": 40,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/avatar/avatar.go",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/avatar/avatar.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/avatar/avatar.go?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -34,7 +34,7 @@ type Proxy struct {\n }\n \n // Put stores retrieved avatar to avatar.Store. Gets image from user info. Returns proxied url\n-func (p *Proxy) Put(u token.User) (avatarURL string, err error) {\n+func (p *Proxy) Put(u token.User, client *http.Client) (avatarURL string, err error) {\n \n \t// no picture for user, try to generate identicon avatar\n \tif u.Picture == \"\" {\n@@ -52,29 +52,18 @@ func (p *Proxy) Put(u token.User) (avatarURL string, err error) {\n \t\treturn p.URL + p.RoutePath + \"/\" + avatarID, nil\n \t}\n \n-\t// load avatar from remote location\n-\tclient := http.Client{Timeout: 10 * time.Second}\n-\tvar resp *http.Response\n-\terr = retry(5, time.Second, func() error {\n-\t\tvar e error\n-\t\tresp, e = client.Get(u.Picture)\n-\t\treturn e\n-\t})\n+\tbody, err := p.load(u.Picture, client)\n \tif err != nil {\n \t\treturn \"\", errors.Wrap(err, \"failed to fetch avatar from the orig\")\n \t}\n \n \tdefer func() {\n-\t\tif e := resp.Body.Close(); e != nil {\n+\t\tif e := body.Close(); e != nil {\n \t\t\tp.Logf(\"[WARN] can't close response body, %s\", e)\n \t\t}\n \t}()\n \n-\tif resp.StatusCode != http.StatusOK {\n-\t\treturn \"\", errors.Errorf(\"failed to get avatar from the orig, status %s\", resp.Status)\n-\t}\n-\n-\tavatarID, err := p.Store.Put(u.ID, p.resize(resp.Body, p.ResizeLimit)) // put returns avatar base name, like 123456.image\n+\tavatarID, err := p.Store.Put(u.ID, p.resize(body, p.ResizeLimit)) // put returns avatar base name, like 123456.image\n \tif err != nil {\n \t\treturn \"\", err\n \t}\n@@ -83,6 +72,27 @@ func (p *Proxy) Put(u token.User) (avatarURL string, err error) {\n \treturn p.URL + p.RoutePath + \"/\" + avatarID, nil\n }\n \n+// load avatar from remote url and return body. Caller has to close the reader\n+func (p *Proxy) load(url string, client *http.Client) (rc io.ReadCloser, err error) {\n+\t// load avatar from remote location\n+\tvar resp *http.Response\n+\terr = retry(5, time.Second, func() error {\n+\t\tvar e error\n+\t\tresp, e = client.Get(url)\n+\t\treturn e\n+\t})\n+\tif err != nil {\n+\t\treturn nil, errors.Wrap(err, \"failed to fetch avatar from the orig\")\n+\t}\n+\n+\tif resp.StatusCode != http.StatusOK {\n+\t\t_ = resp.Body.Close() // caller won't close on error\n+\t\treturn nil, errors.Errorf(\"failed to get avatar from the orig, status %s\", resp.Status)\n+\t}\n+\n+\treturn resp.Body, nil\n+}\n+\n // Handler returns token routes for given provider\n func (p *Proxy) Handler(w http.ResponseWriter, r *http.Request) {\n "
    },
    {
      "sha": "f15816fa41f3d2643cfbb22ec69939ae3719d61e",
      "filename": "backend/vendor/github.com/go-pkgz/auth/go.mod",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/go.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/go.mod?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -1,5 +1,7 @@\n module github.com/go-pkgz/auth\n \n+go 1.14\n+\n require (\n \tgithub.com/dghubble/oauth1 v0.6.0\n \tgithub.com/dgrijalva/jwt-go v3.2.0+incompatible\n@@ -14,5 +16,3 @@ require (\n \tgolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d\n \tgopkg.in/oauth2.v3 v3.12.0\n )\n-\n-go 1.13"
    },
    {
      "sha": "33b3a7065787b1186465de98e68a4e77c6b8b3dc",
      "filename": "backend/vendor/github.com/go-pkgz/auth/middleware/user_updater.go",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/middleware/user_updater.go",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/middleware/user_updater.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/middleware/user_updater.go?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -0,0 +1,38 @@\n+package middleware\n+\n+import (\n+\t\"net/http\"\n+\n+\t\"github.com/go-pkgz/auth/token\"\n+)\n+\n+// UserUpdater defines interface adding extras or modifying UserInfo in request context\n+type UserUpdater interface {\n+\tUpdate(claims token.User) token.User\n+}\n+\n+// UserUpdFunc type is an adapter to allow the use of ordinary functions as UserUpdater. If f is a function\n+// with the appropriate signature, UserUpdFunc(f) is a Handler that calls f.\n+type UserUpdFunc func(user token.User) token.User\n+\n+// Update calls f(user)\n+func (f UserUpdFunc) Update(user token.User) token.User {\n+\treturn f(user)\n+}\n+\n+// UpdateUser update user info with UserUpdater if it exists in request's context. Otherwise do nothing.\n+// should be places after either Auth, Trace or AdminOnly middleware.\n+func (a *Authenticator) UpdateUser(upd UserUpdater) func(http.Handler) http.Handler {\n+\tf := func(h http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\t// call update only if user info exists, otherwise do nothing\n+\t\t\tif user, err := token.GetUserInfo(r); err == nil {\n+\t\t\t\tr = token.SetUserInfo(r, upd.Update(user))\n+\t\t\t}\n+\n+\t\t\th.ServeHTTP(w, r)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+\treturn f\n+}"
    },
    {
      "sha": "c963fd375805755878756406572450bda1a2fd1f",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/direct.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/direct.go",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/direct.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/direct.go?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -4,6 +4,7 @@ import (\n \t\"crypto/sha1\"\n \t\"errors\"\n \t\"net/http\"\n+\t\"time\"\n \n \t\"github.com/dgrijalva/jwt-go\"\n \t\"github.com/go-pkgz/rest\"\n@@ -63,7 +64,7 @@ func (p DirectHandler) LoginHandler(w http.ResponseWriter, r *http.Request) {\n \t\tName: user,\n \t\tID:   p.ProviderName + \"_\" + token.HashID(sha1.New(), user),\n \t}\n-\tu, err = setAvatar(p.AvatarSaver, u)\n+\tu, err = setAvatar(p.AvatarSaver, u, &http.Client{Timeout: 5 * time.Second})\n \tif err != nil {\n \t\trest.SendErrorJSON(w, r, p.L, http.StatusInternalServerError, err, \"failed to save avatar to proxy\")\n \t\treturn"
    },
    {
      "sha": "6d0657f126d5f9ceb198a9180cf30daf314ddacb",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/oauth1.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/oauth1.go",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/oauth1.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/oauth1.go?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -127,7 +127,7 @@ func (h Oauth1Handler) AuthHandler(w http.ResponseWriter, r *http.Request) {\n \th.Logf(\"[DEBUG] got raw user info %+v\", jData)\n \n \tu := h.mapUser(jData, data)\n-\tu, err = setAvatar(h.AvatarSaver, u)\n+\tu, err = setAvatar(h.AvatarSaver, u, &http.Client{Timeout: 5 * time.Second})\n \tif err != nil {\n \t\trest.SendErrorJSON(w, r, h.L, http.StatusInternalServerError, err, \"failed to save avatar to proxy\")\n \t\treturn"
    },
    {
      "sha": "e65586b02f7578c9f7c455ba54fc54a76945aa89",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/oauth2.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/oauth2.go",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/oauth2.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/oauth2.go?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -178,7 +178,7 @@ func (p Oauth2Handler) AuthHandler(w http.ResponseWriter, r *http.Request) {\n \tp.Logf(\"[DEBUG] got raw user info %+v\", jData)\n \n \tu := p.mapUser(jData, data)\n-\tu, err = setAvatar(p.AvatarSaver, u)\n+\tu, err = setAvatar(p.AvatarSaver, u, client)\n \tif err != nil {\n \t\trest.SendErrorJSON(w, r, p.L, http.StatusInternalServerError, err, \"failed to save avatar to proxy\")\n \t\treturn"
    },
    {
      "sha": "10d96b6b0387fd6abdb19b417b9f7d563783640c",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/providers.go",
      "status": "modified",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/providers.go",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/providers.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/providers.go?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -6,9 +6,11 @@ import (\n \t\"encoding/json\"\n \t\"fmt\"\n \n+\t\"golang.org/x/oauth2\"\n \t\"golang.org/x/oauth2/facebook\"\n \t\"golang.org/x/oauth2/github\"\n \t\"golang.org/x/oauth2/google\"\n+\t\"golang.org/x/oauth2/microsoft\"\n \t\"golang.org/x/oauth2/yandex\"\n \n \t\"github.com/dghubble/oauth1\"\n@@ -147,3 +149,45 @@ func NewTwitter(p Params) Oauth1Handler {\n \t\t},\n \t})\n }\n+\n+// NewBattlenet makes Battle.net oauth2 provider\n+func NewBattlenet(p Params) Oauth2Handler {\n+\treturn initOauth2Handler(p, Oauth2Handler{\n+\t\tname: \"battlenet\",\n+\t\tendpoint: oauth2.Endpoint{\n+\t\t\tAuthURL:   \"https://eu.battle.net/oauth/authorize\",\n+\t\t\tTokenURL:  \"https://eu.battle.net/oauth/token\",\n+\t\t\tAuthStyle: oauth2.AuthStyleInParams,\n+\t\t},\n+\t\tscopes:  []string{},\n+\t\tinfoURL: \"https://eu.battle.net/oauth/userinfo\",\n+\t\tmapUser: func(data UserData, _ []byte) token.User {\n+\t\t\tuserInfo := token.User{\n+\t\t\t\tID:   \"battlenet_\" + token.HashID(sha1.New(), data.Value(\"id\")),\n+\t\t\t\tName: data.Value(\"battletag\"),\n+\t\t\t}\n+\n+\t\t\treturn userInfo\n+\t\t},\n+\t})\n+}\n+\n+// NewMicrosoft makes microsoft azure oauth2 provider\n+func NewMicrosoft(p Params) Oauth2Handler {\n+\treturn initOauth2Handler(p, Oauth2Handler{\n+\t\tname:     \"microsoft\",\n+\t\tendpoint: microsoft.AzureADEndpoint(\"consumers\"),\n+\t\tscopes:   []string{\"User.Read\"},\n+\t\tinfoURL:  \"https://graph.microsoft.com/v1.0/me\",\n+\t\t// non-beta doesn't provide photo for consumers yet\n+\t\t// see https://github.com/microsoftgraph/microsoft-graph-docs/issues/3990\n+\t\tmapUser: func(data UserData, b []byte) token.User {\n+\t\t\tuserInfo := token.User{\n+\t\t\t\tID:      \"microsoft_\" + token.HashID(sha1.New(), data.Value(\"id\")),\n+\t\t\t\tName:    data.Value(\"displayName\"),\n+\t\t\t\tPicture: \"https://graph.microsoft.com/beta/me/photo/$value\",\n+\t\t\t}\n+\t\t\treturn userInfo\n+\t\t},\n+\t})\n+}"
    },
    {
      "sha": "e004fae9786ea4a368e73b3b7f02baf641fbb141",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/service.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/service.go",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/service.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/service.go?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -30,7 +30,7 @@ func NewService(p Provider) Service {\n \n // AvatarSaver defines minimal interface to save avatar\n type AvatarSaver interface {\n-\tPut(u token.User) (avatarURL string, err error)\n+\tPut(u token.User, client *http.Client) (avatarURL string, err error)\n }\n \n // TokenService defines interface accessing tokens\n@@ -72,9 +72,9 @@ func (p Service) Handler(w http.ResponseWriter, r *http.Request) {\n }\n \n // setAvatar saves avatar and puts proxied URL to u.Picture\n-func setAvatar(ava AvatarSaver, u token.User) (token.User, error) {\n+func setAvatar(ava AvatarSaver, u token.User, client *http.Client) (token.User, error) {\n \tif ava != nil {\n-\t\tavatarURL, e := ava.Put(u)\n+\t\tavatarURL, e := ava.Put(u, client)\n \t\tif e != nil {\n \t\t\treturn u, errors.Wrap(e, \"failed to save avatar for\")\n \t\t}"
    },
    {
      "sha": "4e14e505a4aafe21acba0e2b879d1e0346f40802",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/verify.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/verify.go",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/github.com/go-pkgz/auth/provider/verify.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/github.com/go-pkgz/auth/provider/verify.go?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -98,7 +98,7 @@ func (e VerifyHandler) LoginHandler(w http.ResponseWriter, r *http.Request) {\n \t\t}\n \t}\n \n-\tif u, err = setAvatar(e.AvatarSaver, u); err != nil {\n+\tif u, err = setAvatar(e.AvatarSaver, u, &http.Client{Timeout: 5 * time.Second}); err != nil {\n \t\trest.SendErrorJSON(w, r, e.L, http.StatusInternalServerError, err, \"failed to save avatar to proxy\")\n \t\treturn\n \t}"
    },
    {
      "sha": "3ffbc57a6906ca8e8fa9d49960e97e45efd5df54",
      "filename": "backend/vendor/golang.org/x/oauth2/microsoft/microsoft.go",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/golang.org/x/oauth2/microsoft/microsoft.go",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/golang.org/x/oauth2/microsoft/microsoft.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/golang.org/x/oauth2/microsoft/microsoft.go?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Package microsoft provides constants for using OAuth2 to access Windows Live ID.\n+package microsoft // import \"golang.org/x/oauth2/microsoft\"\n+\n+import (\n+\t\"golang.org/x/oauth2\"\n+)\n+\n+// LiveConnectEndpoint is Windows's Live ID OAuth 2.0 endpoint.\n+var LiveConnectEndpoint = oauth2.Endpoint{\n+\tAuthURL:  \"https://login.live.com/oauth20_authorize.srf\",\n+\tTokenURL: \"https://login.live.com/oauth20_token.srf\",\n+}\n+\n+// AzureADEndpoint returns a new oauth2.Endpoint for the given tenant at Azure Active Directory.\n+// If tenant is empty, it uses the tenant called `common`.\n+//\n+// For more information see:\n+// https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols#endpoints\n+func AzureADEndpoint(tenant string) oauth2.Endpoint {\n+\tif tenant == \"\" {\n+\t\ttenant = \"common\"\n+\t}\n+\treturn oauth2.Endpoint{\n+\t\tAuthURL:  \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/authorize\",\n+\t\tTokenURL: \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/token\",\n+\t}\n+}"
    },
    {
      "sha": "555539ac9a6fd7426c88073b556448b668e8621b",
      "filename": "backend/vendor/modules.txt",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/modules.txt",
      "raw_url": "https://github.com/umputun/remark42/raw/df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c/backend/vendor/modules.txt",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/vendor/modules.txt?ref=df9c05b4905e9af3f99ccdecd1f0f4d660c91a8c",
      "patch": "@@ -72,7 +72,7 @@ github.com/go-chi/cors\n # github.com/go-chi/render v1.0.1\n ## explicit\n github.com/go-chi/render\n-# github.com/go-pkgz/auth v0.10.2\n+# github.com/go-pkgz/auth v0.11.0\n ## explicit\n github.com/go-pkgz/auth\n github.com/go-pkgz/auth/avatar\n@@ -243,6 +243,7 @@ golang.org/x/oauth2/google\n golang.org/x/oauth2/internal\n golang.org/x/oauth2/jws\n golang.org/x/oauth2/jwt\n+golang.org/x/oauth2/microsoft\n golang.org/x/oauth2/yandex\n # golang.org/x/sync v0.0.0-20190423024810-112230192c58\n golang.org/x/sync/semaphore"
    }
  ]
}
