{
  "sha": "ff7678e210faa1347f8b9749e22410a9c9dfe077",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpmZjc2NzhlMjEwZmFhMTM0N2Y4Yjk3NDllMjI0MTBhOWM5ZGZlMDc3",
  "commit": {
    "author": {
      "name": "Guo Xiang Tan",
      "email": "gxtan1990@gmail.com",
      "date": "2020-07-17T03:12:31Z"
    },
    "committer": {
      "name": "Guo Xiang Tan",
      "email": "gxtan1990@gmail.com",
      "date": "2020-07-17T03:12:31Z"
    },
    "message": "FIX: Reindex posts when `Topic#title` or `Category#name` changes.",
    "tree": {
      "sha": "56173dd6948cd6e829076b38c1ec24a497f6e8f6",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/56173dd6948cd6e829076b38c1ec24a497f6e8f6"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/ff7678e210faa1347f8b9749e22410a9c9dfe077",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMOJGkc46I9vMVlDg+9EQF5qsHyAFAl8RFzgACgkQ+9EQF5qs\nHyCrzRAAhmMwkxEHc+VxvxEDa6/+jg1b2e1zbowwpNF+Q403ksPeNjVDN8jnskiF\nEEL9P4V5BdTb99/Cl3e2U+5K4sQ8mNIYF2h/QLkIrAhQQW3ilF+3LASC/FnilBiu\nte/S2yNYfqoDMCi9MYxdPoMOx8lehrHBpEJ2R0/PxHZvFKq1R24POmrlAs5wGrro\nhjHMOSxXSnQP+FcNbnJQ+GM06kX/bI156iht5BbIzxA8zAUUYgvh1aMlyP/qCvkT\nMYungzWCqeYL52+HhNvhUYnaBlKeTnGcyo3Egq6Jz2XJglsg4b2ynqzixZE0OK2p\nTY3YK/wmtILLv/LshbgDp0tHtvKZ/bP1WMtMkYUGvY2NcOCikr42pAKROV/a+UqW\n3xG4EG1SWrDJ/8CDSyLg30c099/qgDTuPcAA859u2yOgYU6u0vNCIj/Qk+YlDxHv\nPUfmQsAu+zcfU0w3nXhZLmUmttGOXfV2uvKH8V8bS4kYlWJoIP21++r5rNm5NjRd\n3jILktN7QGImexrNfsL3vJ+yUSWjpI/rkQnmfVBWMGBDzttvRcJRL3LE9a2bFiMg\nfbCPm8NvVPahXG1V41zuExSBiHs3wZ6UthX7YvGdINPjOl6B7abG4gba9GYBY1ip\nhYySIlitJryq+msSwGaHN93iwAVw0hoWkZmEoMAZvTMI/tWxj0E=\n=qFbj\n-----END PGP SIGNATURE-----",
      "payload": "tree 56173dd6948cd6e829076b38c1ec24a497f6e8f6\nparent 39fef99c3773ef40981fa12ddbaaac2ac8cf2f74\nauthor Guo Xiang Tan <gxtan1990@gmail.com> 1594955551 +0800\ncommitter Guo Xiang Tan <gxtan1990@gmail.com> 1594955551 +0800\n\nFIX: Reindex posts when `Topic#title` or `Category#name` changes.\n"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/ff7678e210faa1347f8b9749e22410a9c9dfe077",
  "html_url": "https://github.com/discourse/discourse/commit/ff7678e210faa1347f8b9749e22410a9c9dfe077",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/ff7678e210faa1347f8b9749e22410a9c9dfe077/comments",
  "author": {
    "login": "tgxworld",
    "id": 4335742,
    "node_id": "MDQ6VXNlcjQzMzU3NDI=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4335742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tgxworld",
    "html_url": "https://github.com/tgxworld",
    "followers_url": "https://api.github.com/users/tgxworld/followers",
    "following_url": "https://api.github.com/users/tgxworld/following{/other_user}",
    "gists_url": "https://api.github.com/users/tgxworld/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tgxworld/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tgxworld/subscriptions",
    "organizations_url": "https://api.github.com/users/tgxworld/orgs",
    "repos_url": "https://api.github.com/users/tgxworld/repos",
    "events_url": "https://api.github.com/users/tgxworld/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tgxworld/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tgxworld",
    "id": 4335742,
    "node_id": "MDQ6VXNlcjQzMzU3NDI=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4335742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tgxworld",
    "html_url": "https://github.com/tgxworld",
    "followers_url": "https://api.github.com/users/tgxworld/followers",
    "following_url": "https://api.github.com/users/tgxworld/following{/other_user}",
    "gists_url": "https://api.github.com/users/tgxworld/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tgxworld/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tgxworld/subscriptions",
    "organizations_url": "https://api.github.com/users/tgxworld/orgs",
    "repos_url": "https://api.github.com/users/tgxworld/repos",
    "events_url": "https://api.github.com/users/tgxworld/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tgxworld/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39fef99c3773ef40981fa12ddbaaac2ac8cf2f74",
      "url": "https://api.github.com/repos/discourse/discourse/commits/39fef99c3773ef40981fa12ddbaaac2ac8cf2f74",
      "html_url": "https://github.com/discourse/discourse/commit/39fef99c3773ef40981fa12ddbaaac2ac8cf2f74"
    }
  ],
  "stats": {
    "total": 98,
    "additions": 71,
    "deletions": 27
  },
  "files": [
    {
      "sha": "7c9a0ba1020cd929658327d71539b2215fbe7276",
      "filename": "app/models/category.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/ff7678e210faa1347f8b9749e22410a9c9dfe077/app/models/category.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/ff7678e210faa1347f8b9749e22410a9c9dfe077/app/models/category.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/category.rb?ref=ff7678e210faa1347f8b9749e22410a9c9dfe077",
      "patch": "@@ -764,6 +764,10 @@ def publish_discourse_stylesheet\n   end\n \n   def index_search\n+    if saved_change_to_attribute?(:name)\n+      SearchIndexer.queue_category_posts_reindex(self.id)\n+    end\n+\n     SearchIndexer.index(self)\n   end\n "
    },
    {
      "sha": "cbf29d191897595f4ff20588e47d3944de7634c6",
      "filename": "app/models/topic.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/discourse/discourse/blob/ff7678e210faa1347f8b9749e22410a9c9dfe077/app/models/topic.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/ff7678e210faa1347f8b9749e22410a9c9dfe077/app/models/topic.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/topic.rb?ref=ff7678e210faa1347f8b9749e22410a9c9dfe077",
      "patch": "@@ -338,8 +338,7 @@ def recover!(recovered_by = nil)\n       ApplicationController.banner_json_cache.clear\n     end\n \n-    if tags_changed || saved_change_to_attribute?(:category_id)\n-\n+    if tags_changed || saved_change_to_attribute?(:category_id) || saved_change_to_attribute?(:title)\n       SearchIndexer.queue_post_reindex(self.id)\n \n       if tags_changed"
    },
    {
      "sha": "075bd39122b201f3a88e800b11835976a172426e",
      "filename": "app/services/search_indexer.rb",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/discourse/discourse/blob/ff7678e210faa1347f8b9749e22410a9c9dfe077/app/services/search_indexer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/ff7678e210faa1347f8b9749e22410a9c9dfe077/app/services/search_indexer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/services/search_indexer.rb?ref=ff7678e210faa1347f8b9749e22410a9c9dfe077",
      "patch": "@@ -104,8 +104,8 @@ def self.update_topics_index(topic_id, title, cooked)\n     update_index(table: 'topic', id: topic_id, raw_data: [title, scrubbed_cooked])\n   end\n \n-  def self.update_posts_index(post_id, title, category, tags, cooked)\n-    update_index(table: 'post', id: post_id, raw_data: [title, category, tags, scrub_html_for_search(cooked)])\n+  def self.update_posts_index(post_id, topic_title, category_name, topic_tags, cooked)\n+    update_index(table: 'post', id: post_id, raw_data: [topic_title, category_name, topic_tags, scrub_html_for_search(cooked)])\n   end\n \n   def self.update_users_index(user_id, username, name)\n@@ -120,6 +120,20 @@ def self.update_tags_index(tag_id, name)\n     update_index(table: 'tag', id: tag_id, raw_data: [name.downcase])\n   end\n \n+  def self.queue_category_posts_reindex(category_id)\n+    return if @disabled\n+\n+    DB.exec(<<~SQL, category_id: category_id, version: REINDEX_VERSION)\n+      UPDATE post_search_data\n+      SET version = :version\n+      FROM posts\n+      INNER JOIN topics ON posts.topic_id = topics.id\n+      INNER JOIN categories ON topics.category_id = categories.id\n+      WHERE post_search_data.post_id = posts.id\n+      AND categories.id = :category_id\n+    SQL\n+  end\n+\n   def self.queue_post_reindex(topic_id)\n     return if @disabled\n "
    },
    {
      "sha": "d1be6238c1f6e830237046cc948998e7571472d0",
      "filename": "spec/components/search_spec.rb",
      "status": "modified",
      "additions": 50,
      "deletions": 23,
      "changes": 73,
      "blob_url": "https://github.com/discourse/discourse/blob/ff7678e210faa1347f8b9749e22410a9c9dfe077/spec/components/search_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/ff7678e210faa1347f8b9749e22410a9c9dfe077/spec/components/search_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/search_spec.rb?ref=ff7678e210faa1347f8b9749e22410a9c9dfe077",
      "patch": "@@ -10,30 +10,48 @@\n     SearchIndexer.enable\n   end\n \n-  context 'post indexing observer' do\n-    before do\n-      @category = Fabricate(:category_with_definition, name: 'america')\n-      @topic = Fabricate(:topic, title: 'sam saffron test topic', category: @category)\n-      @post = Fabricate(:post, topic: @topic, raw: 'this <b>fun test</b> <img src=\"bla\" title=\"my image\">')\n-      @indexed = @post.post_search_data.search_data\n-    end\n+  context 'post indexing' do\n+    fab!(:category) { Fabricate(:category_with_definition, name: 'america') }\n+    fab!(:topic) { Fabricate(:topic, title: 'sam saffron test topic', category: category) }\n+    let!(:post) { Fabricate(:post, topic: topic, raw: 'this <b>fun test</b> <img src=\"bla\" title=\"my image\">') }\n+    let!(:post2) { Fabricate(:post, topic: topic) }\n \n     it \"should index correctly\" do\n-      expect(@indexed).to match(/fun/)\n-      expect(@indexed).to match(/sam/)\n-      expect(@indexed).to match(/america/)\n+      search_data = post.post_search_data.search_data\n+\n+      expect(search_data).to match(/fun/)\n+      expect(search_data).to match(/sam/)\n+      expect(search_data).to match(/america/)\n+\n+      expect do\n+        topic.update!(title: \"harpi is the new title\")\n+      end.to change { post2.reload.post_search_data.version }.from(SearchIndexer::INDEX_VERSION).to(SearchIndexer::REINDEX_VERSION)\n+\n+      expect(post.post_search_data.reload.search_data).to match(/harpi/)\n+    end\n+\n+    it 'should update posts index when topic category changes' do\n+      expect do\n+        topic.update!(category: Fabricate(:category))\n+      end.to change { post.reload.post_search_data.version }.from(SearchIndexer::INDEX_VERSION).to(SearchIndexer::REINDEX_VERSION)\n+        .and change { post2.reload.post_search_data.version }.from(SearchIndexer::INDEX_VERSION).to(SearchIndexer::REINDEX_VERSION)\n+    end\n \n-      @topic.title = \"harpi is the new title\"\n-      @topic.save!\n-      @post.post_search_data.reload\n+    it 'should update posts index when topic tags changes' do\n+      SiteSetting.tagging_enabled = true\n+      tag = Fabricate(:tag)\n \n-      @indexed = @post.post_search_data.search_data\n+      expect do\n+        DiscourseTagging.tag_topic_by_names(topic, Guardian.new(admin), [tag.name])\n+        topic.save!\n+      end.to change { post.reload.post_search_data.version }.from(SearchIndexer::INDEX_VERSION).to(SearchIndexer::REINDEX_VERSION)\n+        .and change { post2.reload.post_search_data.version }.from(SearchIndexer::INDEX_VERSION).to(SearchIndexer::REINDEX_VERSION)\n \n-      expect(@indexed).to match(/harpi/)\n+      expect(topic.tags).to eq([tag])\n     end\n   end\n \n-  context 'user indexing observer' do\n+  context 'user indexing' do\n     before do\n       @user = Fabricate(:user, username: 'fred', name: 'bob jones')\n       @indexed = @user.user_search_data.search_data\n@@ -45,16 +63,25 @@\n     end\n   end\n \n-  context 'category indexing observer' do\n-    before do\n-      @category = Fabricate(:category_with_definition, name: 'america')\n-      @indexed = @category.category_search_data.search_data\n-    end\n+  context 'category indexing' do\n+    let!(:category) { Fabricate(:category_with_definition, name: 'america') }\n+    let!(:topic) { Fabricate(:topic, category: category) }\n+    let!(:post) { Fabricate(:post, topic: topic) }\n+    let!(:post2) { Fabricate(:post, topic: topic) }\n+    let!(:post3) { Fabricate(:post) }\n \n-    it \"should pick up on name\" do\n-      expect(@indexed).to match(/america/)\n+    it \"should index correctly\" do\n+      expect(category.category_search_data.search_data).to match(/america/)\n     end\n \n+    it 'should update posts index when category name changes' do\n+      expect do\n+        category.update!(name: 'some new name')\n+      end.to change { post.reload.post_search_data.version }.from(SearchIndexer::INDEX_VERSION).to(SearchIndexer::REINDEX_VERSION)\n+        .and change { post2.reload.post_search_data.version }.from(SearchIndexer::INDEX_VERSION).to(SearchIndexer::REINDEX_VERSION)\n+\n+      expect(post3.post_search_data.version).to eq(SearchIndexer::INDEX_VERSION)\n+    end\n   end\n \n   it 'strips zero-width characters from search terms' do"
    }
  ]
}
