{
  "sha": "e8cad4bbf31d645d7f50ad127cfb032e4c90d0ae",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODplOGNhZDRiYmYzMWQ2NDVkN2Y1MGFkMTI3Y2ZiMDMyZTRjOTBkMGFl",
  "commit": {
    "author": {
      "name": "Régis Hanol",
      "email": "regis@hanol.fr",
      "date": "2021-03-28T08:25:30Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-03-28T08:25:30Z"
    },
    "message": "PERF: improve category moderators query (#12538)\n\nIn the about page, we list a certain number of category moderators.\r\n\r\nThis rewrites the SQL query used to retrieve the most recent category moderators in order\r\nto perform better with a large number of users/categories/category moderators.\r\n\r\nTIL: you can ORDER BY inside an ARRAY_AGG in postgres\r\nTIL: you can slide ARRAYS in postgres",
    "tree": {
      "sha": "5002009ec1eabb4970719202784b51275f7e50b9",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/5002009ec1eabb4970719202784b51275f7e50b9"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/e8cad4bbf31d645d7f50ad127cfb032e4c90d0ae",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgYD16CRBK7hj4Ov3rIwAAdHIIAB5r4bbcm8vrpcew74pOMnR0\neiS0flUGYDWXJ76vkWFzcQjlTvxRiR5JUDECgWj/rKT6DqbgpMDfCcGj5K2LYBGj\nPSYN3kiDiSGEP+uWwQ1SvLksIWTzZtkVzB68KGN17CQDHczbScKMZj8pbaHAw1c3\nLjbxtGH3qqOo/cDh10I/9oT1ULYASf1miHrzGg4edwSBRYPmHOU6EDTwb1UPh8Xw\nhHoKFyd5Ouxmvp82rkLgGsWMw+00EABhM98ZpV6ClmX6NcJiJm/A8xr8NW9j2r2Z\nBSg0uBiyfDvH6KRXWf0dHzKi7PrHl4D/TIdzH39KjdGUQo0Ly0KfjmZLrVa4hHc=\n=+Ww9\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 5002009ec1eabb4970719202784b51275f7e50b9\nparent db7be947df29bb2ab27dd3abd80e3b470dcb74e5\nauthor Régis Hanol <regis@hanol.fr> 1616919930 +0200\ncommitter GitHub <noreply@github.com> 1616919930 +0200\n\nPERF: improve category moderators query (#12538)\n\nIn the about page, we list a certain number of category moderators.\r\n\r\nThis rewrites the SQL query used to retrieve the most recent category moderators in order\r\nto perform better with a large number of users/categories/category moderators.\r\n\r\nTIL: you can ORDER BY inside an ARRAY_AGG in postgres\r\nTIL: you can slide ARRAYS in postgres"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/e8cad4bbf31d645d7f50ad127cfb032e4c90d0ae",
  "html_url": "https://github.com/discourse/discourse/commit/e8cad4bbf31d645d7f50ad127cfb032e4c90d0ae",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/e8cad4bbf31d645d7f50ad127cfb032e4c90d0ae/comments",
  "author": {
    "login": "ZogStriP",
    "id": 362783,
    "node_id": "MDQ6VXNlcjM2Mjc4Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/362783?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZogStriP",
    "html_url": "https://github.com/ZogStriP",
    "followers_url": "https://api.github.com/users/ZogStriP/followers",
    "following_url": "https://api.github.com/users/ZogStriP/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZogStriP/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZogStriP/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZogStriP/subscriptions",
    "organizations_url": "https://api.github.com/users/ZogStriP/orgs",
    "repos_url": "https://api.github.com/users/ZogStriP/repos",
    "events_url": "https://api.github.com/users/ZogStriP/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZogStriP/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "db7be947df29bb2ab27dd3abd80e3b470dcb74e5",
      "url": "https://api.github.com/repos/discourse/discourse/commits/db7be947df29bb2ab27dd3abd80e3b470dcb74e5",
      "html_url": "https://github.com/discourse/discourse/commit/db7be947df29bb2ab27dd3abd80e3b470dcb74e5"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 15,
    "deletions": 19
  },
  "files": [
    {
      "sha": "5631fbb9c9ec9bfef8b1d293bbfba31164305d58",
      "filename": "app/models/about.rb",
      "status": "modified",
      "additions": 15,
      "deletions": 19,
      "changes": 34,
      "blob_url": "https://github.com/discourse/discourse/blob/e8cad4bbf31d645d7f50ad127cfb032e4c90d0ae/app/models/about.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e8cad4bbf31d645d7f50ad127cfb032e4c90d0ae/app/models/about.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/about.rb?ref=e8cad4bbf31d645d7f50ad127cfb032e4c90d0ae",
      "patch": "@@ -83,32 +83,28 @@ def stats\n   def category_moderators\n     allowed_cats = Guardian.new(@user).allowed_category_ids\n     return [] if allowed_cats.blank?\n+\n     cats_with_mods = Category.where.not(reviewable_by_group_id: nil).pluck(:id)\n+\n     category_ids = cats_with_mods & allowed_cats\n     return [] if category_ids.blank?\n \n     per_cat_limit = category_mods_limit / category_ids.size\n     per_cat_limit = 1 if per_cat_limit < 1\n-    results = DB.query(<<~SQL, category_ids: category_ids, per_cat_limit: per_cat_limit)\n-      SELECT c.id category_id, user_ids\n-      FROM categories c\n-      CROSS JOIN LATERAL (\n-        SELECT ARRAY(\n-          SELECT u.id\n-          FROM users u\n-          JOIN group_users gu\n-          ON gu.group_id = c.reviewable_by_group_id AND gu.user_id = u.id\n-          ORDER BY last_seen_at DESC\n-          LIMIT :per_cat_limit\n-        ) AS user_ids\n-      ) user_ids\n-      WHERE c.id IN (:category_ids)\n+\n+    results = DB.query(<<~SQL, category_ids: category_ids)\n+        SELECT c.id category_id\n+             , (ARRAY_AGG(u.id ORDER BY u.last_seen_at DESC))[:#{per_cat_limit}] user_ids\n+          FROM categories c\n+          JOIN group_users gu ON gu.group_id = c.reviewable_by_group_id\n+          JOIN users u ON u.id = gu.user_id\n+         WHERE c.id IN (:category_ids)\n+      GROUP BY c.id\n+      ORDER BY c.position\n     SQL\n-    moderators = {}\n-    User.where(id: results.map(&:user_ids).flatten.uniq).each do |user|\n-      moderators[user.id] = user\n-    end\n-    moderators\n+\n+    moderators = User.where(id: results.map(&:user_ids).flatten.uniq).map { |u| [u.id, u] }.to_h\n+\n     results.map do |row|\n       CategoryMods.new(row.category_id, row.user_ids.map { |id| moderators[id] })\n     end"
    }
  ]
}
