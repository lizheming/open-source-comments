{
  "sha": "2193d0243377831caf96d8eaddb859813dae2bb0",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODoyMTkzZDAyNDMzNzc4MzFjYWY5NmQ4ZWFkZGI4NTk4MTNkYWUyYmIw",
  "commit": {
    "author": {
      "name": "Guo Xiang Tan",
      "email": "gxtan1990@gmail.com",
      "date": "2020-08-06T06:15:31Z"
    },
    "committer": {
      "name": "Guo Xiang Tan",
      "email": "gxtan1990@gmail.com",
      "date": "2020-08-06T06:56:29Z"
    },
    "message": "PERF: Use PG headlines for blurb generation and highlighting for search.",
    "tree": {
      "sha": "96a71416861af7e700f557eb88dff0eed79d67c9",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/96a71416861af7e700f557eb88dff0eed79d67c9"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/2193d0243377831caf96d8eaddb859813dae2bb0",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMOJGkc46I9vMVlDg+9EQF5qsHyAFAl8rqZ0ACgkQ+9EQF5qs\nHyCT5w//Vl+sWNt2iPDLDsjngCMms3n8Eye4xD2cZtHVrTsezlON5fERelry8D3d\nVaxOnJGmiqm55lTF41j4LSPFkr3W/V4Zs33jyBL0tudhmzARaEkfKtlxU2m6IWpn\n3N4OBsZbphcoxOF+7QTyemk4n020voVKL1zQKUXOu2GTqmkO6ETmyWac9VYJQ85W\n/BEbo0WR/P2ckjV0csNIZKQFGPNCHdGe570+cgEznFpbEcpk89uDDTTmCOlS4a6y\nqEg+2aYt0e/aJn2PUWBWnWyQscOc1fPmaQuGL8rJ5/Rwl/ubKIXSbWewbh/hFUNf\nJbl71Q/mKn1bQHrw/Ks0j072v+8R1XHdat3A60XOkHqZdx+2XgiF9aXQ+JrnZG04\nBmMoGDptNa+6IT+0semLputY+bsOZoMshDbB9lke6wizfxsfBmFBwWzNuBwWZRZL\npzQg8DGG8wL0VhzNklAhfkKEMz8ZTQdu+A6Q2AkakgOf+qYzfj1BibtmhPNnzih8\n5om8byKyqH3sxCqHNnFn7M3SROD3+jkI15nxAXLwulOWdTWlqzoZsLWWeqarmgkF\neYQxIffjkQ8q67hPR34xFubpQXVcKJvBRAxSS2YhCeYRB2kFq0R2nJ/D9pG8qpvB\nvNN79EIOqvfWF/AvGqTM/U/5GeWDUZBzA1/FNKaj8URC7fFpNjo=\n=FgAL\n-----END PGP SIGNATURE-----",
      "payload": "tree 96a71416861af7e700f557eb88dff0eed79d67c9\nparent ba482c251c5687aa9003707aedd0236fddd5cae0\nauthor Guo Xiang Tan <gxtan1990@gmail.com> 1596694531 +0800\ncommitter Guo Xiang Tan <gxtan1990@gmail.com> 1596696989 +0800\n\nPERF: Use PG headlines for blurb generation and highlighting for search.\n"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/2193d0243377831caf96d8eaddb859813dae2bb0",
  "html_url": "https://github.com/discourse/discourse/commit/2193d0243377831caf96d8eaddb859813dae2bb0",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/2193d0243377831caf96d8eaddb859813dae2bb0/comments",
  "author": {
    "login": "tgxworld",
    "id": 4335742,
    "node_id": "MDQ6VXNlcjQzMzU3NDI=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4335742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tgxworld",
    "html_url": "https://github.com/tgxworld",
    "followers_url": "https://api.github.com/users/tgxworld/followers",
    "following_url": "https://api.github.com/users/tgxworld/following{/other_user}",
    "gists_url": "https://api.github.com/users/tgxworld/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tgxworld/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tgxworld/subscriptions",
    "organizations_url": "https://api.github.com/users/tgxworld/orgs",
    "repos_url": "https://api.github.com/users/tgxworld/repos",
    "events_url": "https://api.github.com/users/tgxworld/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tgxworld/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tgxworld",
    "id": 4335742,
    "node_id": "MDQ6VXNlcjQzMzU3NDI=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4335742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tgxworld",
    "html_url": "https://github.com/tgxworld",
    "followers_url": "https://api.github.com/users/tgxworld/followers",
    "following_url": "https://api.github.com/users/tgxworld/following{/other_user}",
    "gists_url": "https://api.github.com/users/tgxworld/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tgxworld/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tgxworld/subscriptions",
    "organizations_url": "https://api.github.com/users/tgxworld/orgs",
    "repos_url": "https://api.github.com/users/tgxworld/repos",
    "events_url": "https://api.github.com/users/tgxworld/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tgxworld/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ba482c251c5687aa9003707aedd0236fddd5cae0",
      "url": "https://api.github.com/repos/discourse/discourse/commits/ba482c251c5687aa9003707aedd0236fddd5cae0",
      "html_url": "https://github.com/discourse/discourse/commit/ba482c251c5687aa9003707aedd0236fddd5cae0"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 48,
    "deletions": 15
  },
  "files": [
    {
      "sha": "46699dcd6ce3c60f2fde856efd1edec1deb447ab",
      "filename": "config/site_settings.yml",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/discourse/discourse/blob/2193d0243377831caf96d8eaddb859813dae2bb0/config/site_settings.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/2193d0243377831caf96d8eaddb859813dae2bb0/config/site_settings.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/site_settings.yml?ref=2193d0243377831caf96d8eaddb859813dae2bb0",
      "patch": "@@ -1792,6 +1792,9 @@ backups:\n     hidden: true\n \n search:\n+  use_pg_headlines_for_excerpt:\n+    default: false\n+    hidden: true\n   search_ranking_normalization:\n     default: \"0\"\n     hidden: true"
    },
    {
      "sha": "efc870b465aa905aca852fd1a84969dbc6cf951f",
      "filename": "lib/search.rb",
      "status": "modified",
      "additions": 26,
      "deletions": 6,
      "changes": 32,
      "blob_url": "https://github.com/discourse/discourse/blob/2193d0243377831caf96d8eaddb859813dae2bb0/lib/search.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2193d0243377831caf96d8eaddb859813dae2bb0/lib/search.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/search.rb?ref=2193d0243377831caf96d8eaddb859813dae2bb0",
      "patch": "@@ -2,6 +2,7 @@\n \n class Search\n   DIACRITICS ||= /([\\u0300-\\u036f]|[\\u1AB0-\\u1AFF]|[\\u1DC0-\\u1DFF]|[\\u20D0-\\u20FF])/\n+  HIGHLIGHT_CSS_CLASS = 'search-highlight'\n \n   cattr_accessor :preloaded_topic_custom_fields\n   self.preloaded_topic_custom_fields = Set.new\n@@ -726,12 +727,18 @@ def find_grouped_results\n   def single_topic(id)\n     if @opts[:restrict_to_archetype].present?\n       archetype = @opts[:restrict_to_archetype] == Archetype.default ? Archetype.default : Archetype.private_message\n-      post = Post.joins(:topic)\n-        .where(\"topics.id = :id AND topics.archetype = :archetype AND posts.post_number = 1\", id: id, archetype: archetype)\n-        .first\n+\n+      post = posts_scope\n+        .joins(:topic)\n+        .find_by(\n+          \"topics.id = :id AND topics.archetype = :archetype AND posts.post_number = 1\",\n+          id: id,\n+          archetype: archetype\n+        )\n     else\n-      post = Post.find_by(topic_id: id, post_number: 1)\n+      post = posts_scope.find_by(topic_id: id, post_number: 1)\n     end\n+\n     return nil unless @guardian.can_see?(post)\n \n     @results.add(post)\n@@ -1096,7 +1103,7 @@ def aggregate_post_sql(opts)\n   def aggregate_posts(post_sql)\n     return [] unless post_sql\n \n-    posts_eager_loads(Post)\n+    posts_scope(posts_eager_loads(Post))\n       .joins(\"JOIN (#{post_sql}) x ON x.id = posts.topic_id AND x.post_number = posts.post_number\")\n       .order('row_number')\n   end\n@@ -1128,7 +1135,7 @@ def all_topics_search\n \n   def topic_search\n     if @search_context.is_a?(Topic)\n-      posts = posts_eager_loads(posts_query(limit))\n+      posts = posts_scope(posts_eager_loads(posts_query(limit)))\n         .where('posts.topic_id = ?', @search_context.id)\n \n       posts.each do |post|\n@@ -1150,4 +1157,17 @@ def posts_eager_loads(query)\n     query.includes(topic: topic_eager_loads)\n   end\n \n+  def posts_scope(default_scope = Post.all)\n+    if SiteSetting.use_pg_headlines_for_excerpt\n+      default_scope\n+        .joins(\"INNER JOIN post_search_data pd ON pd.post_id = posts.id\")\n+        .select(\n+          \"TS_HEADLINE(#{default_ts_config}, pd.raw_data, PLAINTO_TSQUERY('#{@term.present? ? PG::Connection.escape_string(@term) : nil}'), 'ShortWord=0, MaxFragments=1, MinWords=50, MaxWords=51, StartSel=''<span class=\\\"#{HIGHLIGHT_CSS_CLASS}\\\">'', StopSel=''</span>''') AS headline\",\n+          default_scope.arel.projections\n+        )\n+    else\n+      default_scope\n+    end\n+  end\n+\n end"
    },
    {
      "sha": "cac0c52897f97bffcf91cf60d60f8397788afd7c",
      "filename": "lib/search/grouped_search_results.rb",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/2193d0243377831caf96d8eaddb859813dae2bb0/lib/search/grouped_search_results.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2193d0243377831caf96d8eaddb859813dae2bb0/lib/search/grouped_search_results.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/search/grouped_search_results.rb?ref=2193d0243377831caf96d8eaddb859813dae2bb0",
      "patch": "@@ -85,8 +85,12 @@ def blurb(post)\n       }\n \n       if post.post_search_data.version > SearchIndexer::MIN_POST_REINDEX_VERSION\n-        opts[:cooked] = post.post_search_data.raw_data\n-        opts[:scrub] = false\n+        if SiteSetting.use_pg_headlines_for_excerpt\n+          return post.headline\n+        else\n+          opts[:cooked] = post.post_search_data.raw_data\n+          opts[:scrub] = false\n+        end\n       else\n         opts[:cooked] = post.cooked\n       end"
    },
    {
      "sha": "5a7de3bf61169bc898721b04d3441ac50bc98296",
      "filename": "spec/components/search_spec.rb",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/2193d0243377831caf96d8eaddb859813dae2bb0/spec/components/search_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2193d0243377831caf96d8eaddb859813dae2bb0/spec/components/search_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/search_spec.rb?ref=2193d0243377831caf96d8eaddb859813dae2bb0",
      "patch": "@@ -410,27 +410,31 @@ def create_pm(users:, group: nil)\n     end\n \n     let(:expected_blurb) do\n-      \"...quire content longer than the typical test post raw content. It really is some long content, folks. elephant\"\n+      \"hundred characters to satisfy any test conditions that require content longer than the typical test post raw content. It really is some long content, folks. <span class=\\\"search-highlight\\\">elephant</span>\"\n     end\n \n     it 'returns the post' do\n+      SiteSetting.use_pg_headlines_for_excerpt = true\n+\n       result = Search.execute('elephant',\n         type_filter: 'topic',\n         include_blurbs: true\n       )\n \n-      expect(result.posts).to contain_exactly(reply)\n-      expect(result.blurb(reply)).to eq(expected_blurb)\n+      expect(result.posts.map(&:id)).to contain_exactly(reply.id)\n+      expect(result.blurb(result.posts.first)).to eq(expected_blurb)\n     end\n \n     it 'returns the right post and blurb for searches with phrase' do\n+      SiteSetting.use_pg_headlines_for_excerpt = true\n+\n       result = Search.execute('\"elephant\"',\n         type_filter: 'topic',\n         include_blurbs: true\n       )\n \n-      expect(result.posts).to contain_exactly(reply)\n-      expect(result.blurb(reply)).to eq(expected_blurb)\n+      expect(result.posts.map(&:id)).to contain_exactly(reply.id)\n+      expect(result.blurb(result.posts.first)).to eq(expected_blurb)\n     end\n \n     it 'applies a small penalty to closed topic when ranking' do"
    },
    {
      "sha": "7a54ced1a247c966a90d0d55f62d2c0b73b0d972",
      "filename": "spec/requests/search_controller_spec.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/2193d0243377831caf96d8eaddb859813dae2bb0/spec/requests/search_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/2193d0243377831caf96d8eaddb859813dae2bb0/spec/requests/search_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/search_controller_spec.rb?ref=2193d0243377831caf96d8eaddb859813dae2bb0",
      "patch": "@@ -99,6 +99,8 @@\n     end\n \n     it \"can search correctly\" do\n+      SiteSetting.use_pg_headlines_for_excerpt = true\n+\n       get \"/search/query.json\", params: {\n         term: 'awesome'\n       }\n@@ -109,11 +111,11 @@\n \n       expect(data['posts'].length).to eq(2)\n       expect(data['posts'][0]['id']).to eq(awesome_post_2.id)\n-      expect(data['posts'][0]['blurb']).to eq(awesome_post_2.raw)\n+      expect(data['posts'][0]['blurb']).to eq(\"this is my really <span class=\\\"#{Search::HIGHLIGHT_CSS_CLASS}\\\">awesome</span> post\")\n       expect(data['topics'][0]['id']).to eq(awesome_post_2.topic_id)\n \n       expect(data['posts'][1]['id']).to eq(awesome_post.id)\n-      expect(data['posts'][1]['blurb']).to eq(awesome_post.raw)\n+      expect(data['posts'][1]['blurb']).to eq(\"this is my really <span class=\\\"#{Search::HIGHLIGHT_CSS_CLASS}\\\">awesome</span> post\")\n       expect(data['topics'][1]['id']).to eq(awesome_post.topic_id)\n     end\n "
    }
  ]
}
