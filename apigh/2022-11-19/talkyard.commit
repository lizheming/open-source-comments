{
  "sha": "05084b4d68c27fcbd042ab8661256b2659a1726e",
  "node_id": "C_kwDOAKEu-toAKDA1MDg0YjRkNjhjMjdmY2JkMDQyYWI4NjYxMjU2YjI2NTlhMTcyNmU",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2022-11-17T10:10:30Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2022-11-17T10:10:30Z"
    },
    "message": "Merge v0.2022.15 into 'release'.",
    "tree": {
      "sha": "fdd87f08b3607e14ea6fccbc7e4ca5c4cb728a02",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/fdd87f08b3607e14ea6fccbc7e4ca5c4cb728a02"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/05084b4d68c27fcbd042ab8661256b2659a1726e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/05084b4d68c27fcbd042ab8661256b2659a1726e",
  "html_url": "https://github.com/debiki/talkyard/commit/05084b4d68c27fcbd042ab8661256b2659a1726e",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/05084b4d68c27fcbd042ab8661256b2659a1726e/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0e23978d1fe214aed071e6316a8727081c1d34e4",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/0e23978d1fe214aed071e6316a8727081c1d34e4",
      "html_url": "https://github.com/debiki/talkyard/commit/0e23978d1fe214aed071e6316a8727081c1d34e4"
    },
    {
      "sha": "c733529b05ea6ffbb7e51e316adafc27aaad1eee",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/c733529b05ea6ffbb7e51e316adafc27aaad1eee",
      "html_url": "https://github.com/debiki/talkyard/commit/c733529b05ea6ffbb7e51e316adafc27aaad1eee"
    }
  ],
  "stats": {
    "total": 3833,
    "additions": 2983,
    "deletions": 850
  },
  "files": [
    {
      "sha": "d4f26fff99366d6f983291245cf2a02dd460c9d0",
      "filename": "Makefile",
      "status": "modified",
      "additions": 3,
      "deletions": 22,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/Makefile",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/Makefile",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/Makefile?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -117,30 +117,11 @@ print_help:\n \t@echo \"Running a development server\"\n \t@echo \"--------------------------\"\n \t@echo\n-\t@echo \"  Start a dev server:       make up\"\n-\t@echo \"  Stop the dev server:      make dead\"\n-\t@echo \"  View logs:                make logs\"\n-\t@echo\n-\t@echo \"  Open PostgreSQL prompt:   make db-cli\"\n-\t@echo\n-\t@echo \"  Start a Scala CLI:        make dead-app ; make play-cli\"\n-\t@echo\n-\t@echo \"Running tests\"\n-\t@echo \"--------------------------\"\n-\t@echo\n-\t@echo \"End-to-End tests:\"\n-\t@echo \"  Start Talkyard:           make up\n-\t@echo \"  Start Selenium:           d/selenium chrome\"\n-\t@echo \"  Run the tests:            s/run-e2e-tests   # or:  d/n s/run-e2e-tests ?\"\n-\t@echo \"  Stop Selenium:            d/selenium kill\"\n-\t@echo\n-\t@echo \"Unit tests:\"\n-\t@echo \"  Stop the app server:      make dead-app\"\n-\t@echo \"  Start a Scala CLI:        make play-cli\"\n-\t@echo \"  Run tests:                test  # in the CLI\"\n+\t@echo \"Use the script s/tyd instead of make, e.g.:  s/tyd up\"\n+\t@echo \"Type  s/tyd help  to find out more.\"\n \t@echo\n \t@echo \"What more do you want to know? Talk with us at\"\n-\t@echo \"https://www.talkyard.io/forum/.\"\n+\t@echo \"https://forum.talkyard.io.\"\n \t@echo\n \n "
    },
    {
      "sha": "d18e4089fccc8c396e1fcb3b16da0b4ef5972bb0",
      "filename": "appsv/model/lock.sbt",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Flock.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Flock.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Flock.sbt?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -6,11 +6,11 @@ Compile / dependencyOverrides ++= {\n     Seq.empty\n   } else {\n     Seq(\n-      \"com.fasterxml.jackson.core\" % \"jackson-annotations\" % \"2.10.5\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.10.5\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.10.5.1\",\n-      \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jdk8\" % \"2.10.5\",\n-      \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jsr310\" % \"2.10.5\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-annotations\" % \"2.11.4\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.11.4\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.11.4\",\n+      \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jdk8\" % \"2.11.4\",\n+      \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jsr310\" % \"2.11.4\",\n       \"com.google.code.findbugs\" % \"jsr305\" % \"3.0.2\",\n       \"com.google.errorprone\" % \"error_prone_annotations\" % \"2.11.0\",\n       \"com.google.guava\" % \"failureaccess\" % \"1.0.1\",\n@@ -19,8 +19,8 @@ Compile / dependencyOverrides ++= {\n       \"com.google.j2objc\" % \"j2objc-annotations\" % \"1.3\",\n       \"com.lambdaworks\" % \"scrypt\" % \"1.4.0\",\n       \"com.sun.mail\" % \"javax.mail\" % \"1.5.6\",\n-      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.2\",\n-      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.2\",\n+      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.3\",\n+      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.3\",\n       \"commons-beanutils\" % \"commons-beanutils\" % \"1.9.4\",\n       \"commons-codec\" % \"commons-codec\" % \"1.15\",\n       \"commons-collections\" % \"commons-collections\" % \"3.2.2\",\n@@ -31,12 +31,12 @@ Compile / dependencyOverrides ++= {\n       \"javax.activation\" % \"activation\" % \"1.1\",\n       \"nu.validator.htmlparser\" % \"htmlparser\" % \"1.4\",\n       \"org.apache.commons\" % \"commons-email\" % \"1.5\",\n-      \"org.apache.tika\" % \"tika-core\" % \"2.4.1\",\n+      \"org.apache.tika\" % \"tika-core\" % \"2.6.0\",\n       \"org.checkerframework\" % \"checker-qual\" % \"3.12.0\",\n       \"org.owasp.encoder\" % \"encoder\" % \"1.2.3\",\n-      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.12\",\n-      \"org.slf4j\" % \"slf4j-api\" % \"1.7.36\"\n+      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.13\",\n+      \"org.slf4j\" % \"slf4j-api\" % \"2.0.3\"\n     )\n   }\n }\n-// LIBRARY_DEPENDENCIES_HASH 44e720e1a1d4f1a620e06b31ba614a9cb8b396a9\n+// LIBRARY_DEPENDENCIES_HASH 13b3ef1665d25c3cd954982fa5d7b23a2ef68a41"
    },
    {
      "sha": "767e8fc463f628165c67c605a3d2cb440bb2bfe1",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Email.scala",
      "status": "modified",
      "additions": 73,
      "deletions": 13,
      "changes": 86,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FEmail.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FEmail.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FEmail.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -45,6 +45,36 @@ object SecretStatus {\n }\n \n \n+/** For grouping emails about the same thing, in the same email thread.\n+  */\n+sealed abstract class EmailAbout\n+\n+object EmailAbout {\n+  /* Later:\n+   case class Pat(patId: PatId)\n+   case class Cat(catId: CatId)\n+   case class Tag(tagId: TagId)\n+   */\n+\n+  /** An email about a page (orig post) or comment.\n+    *\n+    * @param pageId — the page id, as of when the email was sent (comments\n+    *   might get moved to other pages later).\n+    * @param postId — stays the same also if post moved to another page.\n+    * @param postNr — the post nr, as of when the email was sent (might change,\n+    *   if moved to another page)\n+    * @param parentNr — as of when the email was sent. None, for Orig Posts.\n+    * @param catId — as of when the email was sent.\n+    */\n+  case class Post(\n+    pageId: PageId,\n+    postId: PostId,\n+    postNr: PostNr,\n+    parentNr: Opt[PostNr],\n+    catId: Opt[CatId]) extends EmailAbout\n+}\n+\n+\n object Email {   RENAME // to EmailOut?\n \n \n@@ -57,7 +87,13 @@ object Email {   RENAME // to EmailOut?\n     toUserId: Option[UserId],\n     subject: String,\n     bodyHtmlText: String,\n-    secretValue: Opt[St] = None): Email = {\n+    aboutWhat: Opt[EmailAbout] = None,\n+    smtpMsgId: Opt[SmtpMsgId] = None,\n+    inReplyToSmtpMsgId: Opt[SmtpMsgId] = None,\n+    referencesSmtpMsgIds: ImmSeq[SmtpMsgId] = Nil,\n+    secretValue: Opt[St] = None,\n+    ): Email = {\n+\n     Email(\n           id = emailId,\n           tyype = tyype,\n@@ -68,6 +104,10 @@ object Email {   RENAME // to EmailOut?\n           createdAt = createdAt.toJavaDate,\n           subject = subject,\n           bodyHtmlText = bodyHtmlText,\n+          aboutWhat = aboutWhat,\n+          smtpMsgId = smtpMsgId,\n+          inReplyToSmtpMsgId = inReplyToSmtpMsgId,\n+          referencesSmtpMsgIds = referencesSmtpMsgIds,\n           providerEmailId = None,\n           failureText = None,\n           secretValue = secretValue,\n@@ -82,17 +122,26 @@ object Email {   RENAME // to EmailOut?\n         sendFrom: Opt[St] = None,\n         toUserId: Option[UserId],\n         subject: String,\n-        bodyHtml: St): Email = {\n+        bodyHtml: St,\n+        aboutWhat: Opt[EmailAbout] = None,\n+        smtpMsgId: Opt[SmtpMsgId] = None,\n+        inReplyToSmtpMsgId: Opt[SmtpMsgId] = None,\n+        referencesSmtpMsgIds: ImmSeq[SmtpMsgId] = Nil,\n+        ): Email = {\n     val emailId = generateRandomId()\n     newWithId(\n-      emailId,\n-      tyype,\n-      createdAt,\n-      sendTo = sendTo,\n-      sendFrom = sendFrom,\n-      toUserId = toUserId,\n-      subject = subject,\n-      bodyHtmlText = bodyHtml)\n+          emailId,\n+          tyype,\n+          createdAt,\n+          sendTo = sendTo,\n+          sendFrom = sendFrom,\n+          toUserId = toUserId,\n+          subject = subject,\n+          bodyHtmlText = bodyHtml,\n+          aboutWhat = aboutWhat,\n+          smtpMsgId = smtpMsgId,\n+          inReplyToSmtpMsgId = inReplyToSmtpMsgId,\n+          referencesSmtpMsgIds = referencesSmtpMsgIds)\n   }\n \n \n@@ -102,7 +151,9 @@ object Email {   RENAME // to EmailOut?\n         sendTo: St,\n         toUserId: Opt[UserId],\n         subject: St,\n-        bodyHtmlWithSecret: St => St): Email = {\n+        bodyHtmlWithSecret: St => St,\n+        aboutWhat: Opt[EmailAbout] = None,\n+        ): Email = {\n     val emailId = generateRandomId()\n     val secretValue = generateSecret()\n     newWithId(\n@@ -113,7 +164,12 @@ object Email {   RENAME // to EmailOut?\n           toUserId = toUserId,\n           subject = subject,\n           bodyHtmlText = bodyHtmlWithSecret(secretValue),\n-          secretValue = Some(secretValue))\n+          aboutWhat = aboutWhat,\n+          secretValue = Some(secretValue),\n+          // These not needed outside discussions, at least not now:\n+          smtpMsgId = None,\n+          inReplyToSmtpMsgId = None,\n+          referencesSmtpMsgIds = Nil)\n   }\n \n \n@@ -140,13 +196,17 @@ object Email {   RENAME // to EmailOut?\n case class Email(\n   id: String,\n   tyype: EmailType,\n-  sentTo: String,  // sometimes not used [305RMDG2]\n+  sentTo: EmailAdr,  // sometimes not used [305RMDG2]\n   toUserId: Option[UserId],\n   sentFrom: Opt[St],\n   sentOn: Option[ju.Date],\n   createdAt: ju.Date,\n+  aboutWhat: Opt[EmailAbout],\n   subject: String,\n   bodyHtmlText: String,\n+  smtpMsgId: Opt[SmtpMsgId],\n+  inReplyToSmtpMsgId: Opt[SmtpMsgId],\n+  referencesSmtpMsgIds: ImmSeq[SmtpMsgId],\n   providerEmailId: Option[String],\n   failureText: Option[String] = None,\n   secretValue: Opt[St] = None,"
    },
    {
      "sha": "ebfd3a539d1d46384768f802a79c2e655e117f8c",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Post.scala",
      "status": "modified",
      "additions": 21,
      "deletions": 7,
      "changes": 28,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPost.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPost.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPost.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -157,7 +157,7 @@ object PostType {\n   case object Idea_later // extends PostType(PageType.Idea.toInt, isComment = true)\n   case object Discussion_later // extends PostType(PageType.Discussion.toInt, isComment = true)\n \n-  // No, instead, nr < 0 and privateStaus set to something;\n+  // No, instead, is private if privatePatsId defined.  [priv_comts]\n   //se object Private extends PostType(PageType.FormalMessage.toInt, isComment = true)\n \n   /** A normal post, e.g. a forum topic or reply or blog post, whatever. */\n@@ -378,9 +378,12 @@ case class Draft(\n   * SHOULD: If a post has been flagged, it gets hidden. People can click to view it anyway, so that\n   * they can notify moderators if posts are being flagged and hidden inappropriately.\n   *\n-  * @safeRevisionNr — The highest rev nr that got reviewed by a >= TrustedMember human.\n+  * @param safeRevisionNr — The highest rev nr that got reviewed by a >= TrustedMember human.\n   *\n-  * @privateStatus — Says if a private comment thread, or private message, may be made\n+  * @param privatePatsId — If defined, this comment is private [priv_comts], and\n+  *     only its owner and the person, or people in the list or group, with id\n+  *     privatePatsId, can see it.\n+  *     --- This'll be a group or pat list setting instead: ----\n   *     *less* private, by 1) adding more private thread members, and 2) if any new\n   *     private members are allowed to see earlier private comments or not (if not,\n   *     they'll see only comments posted after they were added).\n@@ -391,6 +394,11 @@ case class Draft(\n   *     but cannot see history, 3 = can add more, with the thread starter's permission,\n   *     4 = can add more, with everyone's permission. I guess all these details won't\n   *     get implemented the nearest 7 years? Today is November 3 2022.\n+  *     ---------------------------------------------------------\n+  *\n+  * @param smtpMsgIdPrefix — For emails, the SMTP Message-ID starts with: \"$pageId.$postNr\"\n+  *     in posts created in Ty v0.2022.15 and later, but missing, in older posts.\n+  *     [init_smtp_msg_id]\n   */\n case class Post(   // [exp] ok use\n   id: PostId,\n@@ -425,7 +433,7 @@ case class Post(   // [exp] ok use\n   approvedAt: Option[ju.Date],   // RENAME to lastApprovedAt  [first_last_apr_at]\n   approvedById: Option[UserId],  // RENAME to lastApproved...\n   approvedRevisionNr: Option[Int],\n-  // privateStatus: Opt[PrivateStatus],  // later  [priv_comts]\n+  // privatePatsId: Opt[PatId],  // later  [priv_comts]\n   collapsedStatus: CollapsedStatus,\n   collapsedAt: Option[ju.Date],\n   collapsedById: Option[UserId],\n@@ -449,7 +457,9 @@ case class Post(   // [exp] ok use\n   numWrongVotes: Int,\n   numBuryVotes: Int,\n   numUnwantedVotes: Int,\n-  numTimesRead: Int) {\n+  numTimesRead: Int,\n+  smtpMsgIdPrefix: Opt[SmtpMsgIdPrefix],  // SHOULD incl in patch json? Later.\n+  ) {\n \n   require(id >= 1, \"DwE4WEKQ8\")\n \n@@ -546,7 +556,7 @@ case class Post(   // [exp] ok use\n   def isOrigPostReply: Boolean = isReply && parentNr.contains(PageParts.BodyNr) && !isBottomComment\n   def isMultireply: Boolean = isReply && multireplyPostNrs.nonEmpty\n   def isFlat: Boolean = tyype == PostType.Flat\n-  def isPrivate: Bo = false // privateStatus.isDefined  [priv_comts]\n+  def isPrivate: Bo = false // privatePatsId.isDefined  [priv_comts]\n   def isMetaMessage: Boolean = tyype == PostType.MetaMessage\n   def isBottomComment: Boolean = tyype == PostType.BottomComment   // RENAME to isProgressReply\n   def shallAppendLast: Boolean = isMetaMessage || isBottomComment\n@@ -832,6 +842,8 @@ object Post {\n     require(multireplyPostNrs.isEmpty || parent.isDefined ||\n       postType == PostType.Flat || postType == PostType.BottomComment, \"DwE4KFK28\")\n \n+    val smtpMsgIdPrefix = s\"$pageId.$postNr\"  // [init_smtp_msg_id]\n+\n     val currentSourcePatch: Option[String] =\n       if (approvedById.isDefined) None\n       else Some(makePatch(from = \"\", to = source))\n@@ -908,7 +920,9 @@ object Post {\n       numWrongVotes = 0,\n       numBuryVotes = 0,\n       numUnwantedVotes = 0,\n-      numTimesRead = 0)\n+      numTimesRead = 0,\n+      smtpMsgIdPrefix = Some(smtpMsgIdPrefix),\n+      )\n   }\n \n   def createTitle("
    },
    {
      "sha": "a6bf55ecd354b27f2eb99723b8984336ec0243f6",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Prelude.scala",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPrelude.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPrelude.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPrelude.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -957,6 +957,31 @@ object Prelude {   CLEAN_UP; RENAME // to BugDie and re-export the interesting\n     size\n   } */\n \n+\n+  implicit class JsObjectHelpers(jOb: JsObject) {\n+    def addAnyBo(fieldName: St, anyValue: Opt[Bo]): JsObject = {\n+      val value: Bo = anyValue getOrElse {\n+        return jOb\n+      }\n+      jOb + (fieldName -> JsBoolean(value))\n+    }\n+\n+    def addAnyInt32(fieldName: St, anyValue: Opt[HasInt32]): JsObject = {\n+      val value: HasInt32 = anyValue getOrElse {\n+        return jOb\n+      }\n+      jOb + (fieldName -> JsNumber(value.toInt))\n+    }\n+\n+    def addAnySt(fieldName: St, anyValue: Opt[St]): JsObject = {\n+      val value: St = anyValue getOrElse {\n+        return jOb\n+      }\n+      jOb + (fieldName -> JsString(value))\n+    }\n+  }\n+\n+\n   /**\n    * Pimps `String` with `matches(regex): Boolean` and `misses(regex)`\n    * and `dropRightWhile(Char => Boolean)` and `takeRightWhile`."
    },
    {
      "sha": "f2cada03f403e644c0e5dbf97e55d50dcedddba3",
      "filename": "appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -187,7 +187,7 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n   // Returns recently active pages first.\n   def loadPagePostNrsByPostIds(postIds: Iterable[PostId]): Map[PostId, PagePostNr]\n   def loadPageIdsWithVisiblePostsBy(patIds: Set[PatId], limit: i32): Set[PageId]\n-  def loadPageIdsUserIsMemberOf(userId: UserId, onlyPageRoles: Set[PageType]): immutable.Seq[PageId]\n+  def loadPageIdsUserIsMemberOf(userAndGroupIds: Seq[MemId], onlyPageRoles: Set[PageType]): ImmSeq[PageId]\n   def loadReadProgress(userId: UserId, pageId: PageId): Option[PageReadingProgress]\n   def loadReadProgressAndIfHasSummaryEmailed(userId: UserId, pageId: PageId)\n         : (Option[PageReadingProgress], Boolean)\n@@ -476,7 +476,7 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n     loadGroupInclDetails(groupId) // right now, Group already includes all details\n \n   def loadGroupInclDetails(groupId: UserId): Option[Group] =\n-    loadMembersAndGroupsInclDetailsById(Seq(groupId)).headOption map {\n+    loadMembersVbById(Seq(groupId)).headOption map {\n       case m: UserInclDetails => throw GotANotGroupException(m.id)\n       case g: Group => g\n     }\n@@ -485,8 +485,6 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n \n   def loadMemberInclDetailsById(userId: UserId): Option[MemberInclDetails]\n \n-  def loadMemberInclDetailsByUsername(username: String): Option[MemberInclDetails]\n-\n   def loadTheUserInclDetails(userId: UserId): UserInclDetails =\n     loadUserInclDetails(userId).getOrElse(throw UserNotFoundException(userId))\n \n@@ -580,7 +578,8 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n   }\n \n   def loadUserByPrimaryEmailOrUsername(emailOrUsername: String): Option[User]\n-  def loadMemberByUsername(username: String): Option[Member]\n+  def loadMemberVbByUsername(username: St): Opt[MemberVb]\n+  def loadMembersVbByUsername(usernames: Iterable[Username]): ImmSeq[MemberVb]\n   def loadUserInclDetailsBySsoId(ssoId: String): Option[UserInclDetails]\n   def loadUserInclDetailsByExtId(externalId: String): Option[UserInclDetails]\n   def loadUserInclDetailsByEmailAddr(email: String): Option[UserInclDetails]\n@@ -613,14 +612,14 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n   }\n \n   def loadUsersInclDetailsById(userIds: Iterable[UserId]): immutable.Seq[UserInclDetails] =\n-    loadMembersAndGroupsInclDetailsById(userIds) map {\n+    loadMembersVbById(userIds) map {\n       case user: UserInclDetails => user\n       case group: Group => throw GotAGroupException(group.id)\n     }\n \n   def loadMembersVbByRef(refs: Iterable[PatRef]): ImmSeq[MemberVb]\n \n-  def loadMembersAndGroupsInclDetailsById(userIds: Iterable[UserId]): ImmSeq[MemberVb]\n+  def loadMembersVbById(userIds: Iterable[MembId]): ImmSeq[MemberVb]\n \n   def loadParticipantsInclDetailsByIdsAsMap_wrongGuestEmailNotfPerf(ids: Iterable[UserId])\n         : immutable.Map[UserId, ParticipantInclDetails]\n@@ -630,7 +629,7 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n \n   def loadOwner(): Option[UserInclDetails]\n \n-  def loadGroupMembers(groupId: UserId): Vector[Participant]\n+  def loadGroupMembers(groupId: GroupId): Vec[Member]\n   def loadGroupParticipantsAllCustomGroups(): Vector[GroupParticipant]\n   /** Returns the ids of the members that got added (i.e. who were not already members). */\n   def addGroupMembers(groupId: UserId, memberIdsToAdd: Set[UserId]): Set[UserId]\n@@ -688,6 +687,8 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n   def loadEmailBySecretOrId(emailId: St): Opt[Email]\n   def loadEmailsSentTo(userIds: Set[UserId], after: When,\n         emailType: EmailType): Map[UserId, Seq[Email]]\n+  def loadEmailsToPatAboutThread(toPatId: PatId, pageId: PageId,\n+        parentPostNr: Opt[PostNr], limit: i32): ImmSeq[EmailOut]\n   def forgetEmailSentToAddress(userId: UserId, replaceWithAddr: String): Unit\n \n   def nextReviewTaskId(): ReviewTaskId\n@@ -788,9 +789,10 @@ case class GotAGroupException(groupId: UserId) extends Exception(\n case class GotANotGroupException(groupId: UserId) extends Exception(\n   s\"Got a not-group when trying to load group $groupId [EdE4GW1WA9]\")\n \n-case class GotAGuestException(groupId: UserId) extends Exception(\n-  s\"Got a guest when trying to load member $groupId [EdE4GAR0W1]\")\n+case class GotAGuestException(groupId: UserId, errCode: St = \"\") extends Exception(\n+  s\"Got a guest when trying to load member $groupId [TyEGOTGST${dashErr(errCode)}]\")\n \n+// COULD incl errCode\n case object GotUnknownUserException extends Exception\n \n case class UserNotFoundException(userId: UserId) extends QuickMessageException("
    },
    {
      "sha": "ee8ea9ec16f0d223181dfbcf6bf258726c4fb5c4",
      "filename": "appsv/model/src/main/scala/com/debiki/core/notifications.scala",
      "status": "modified",
      "additions": 21,
      "deletions": 2,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fnotifications.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fnotifications.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fnotifications.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -136,19 +136,38 @@ object Notification {\n   /** A notification about a post. Could be a reply to you, a @mention of you,\n     * or a new post in a topic you're watching,\n     * or a post of yours got Like voted or tagged.\n+    *\n+    * @param id  SITE_PRIVACY  [avoid_glob_seq_nrs]: Change to a *per user* sequential notf nr?\n+    *   So no one can estimate community size & activity by looking at a site global seq nr.\n+    *   Also, seems nice to get notf nr 1, 2, 3, 4 to oneself?\n+    *   Or maybe use createdAt millis or a rand nr?  Because if using a seq nr, and forwarding\n+    *   a notf email to someone, then that person could look at the seq nr and guesstimate\n+    *   one's activity in the community.\n+    * @param smtpMsgIdPrefix  If set, then the value is:  \"$pageId.$postNr.$patId.$notfId\".\n+    *   That's unnecessarily long; currently, the notfId is per site unique. But it'll get\n+    *   changed to a per user seq nr (see param `id` above)? Then, this Message-ID format\n+    *   will be nice? Or not. See param `id` again.\n     */\n   case class NewPost(  // [exp] fine, del from db: delete:  page_id  action_type  action_sub_id\n     notfType: NotificationType,\n     id: NotificationId,\n     createdAt: ju.Date,     // RENAME to generatedAt\n     generatedWhy: St = \"\",  // later: save in db, incl expl about why notfd in email\n-    uniquePostId: PostId,\n+    uniquePostId: PostId,        // RENAME to aboutPostId?\n     byUserId: UserId,\n     toUserId: UserId,\n+    smtpMsgIdPrefix: Opt[SmtpMsgIdPrefix],\n     emailId: Option[EmailId] = None,\n     emailStatus: NotfEmailStatus = NotfEmailStatus.Undecided,\n-    seenAt: Option[ju.Date] = None) extends Notification {\n+    seenAt: Option[ju.Date] = None,\n+    )\n+    extends Notification {\n+\n     override def tyype: NotificationType = notfType\n+\n+    def makeSmtpMsgId(host: St): Opt[SmtpMsgId] = {\n+      smtpMsgIdPrefix.map(prfx => s\"$prfx@$host\")\n+    }\n   }\n \n }"
    },
    {
      "sha": "32f3d7c8ac59582edfb4e9a58b2a36fb4b18d682",
      "filename": "appsv/model/src/main/scala/com/debiki/core/package.scala",
      "status": "modified",
      "additions": 28,
      "deletions": 3,
      "changes": 31,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -68,6 +68,11 @@ package object core {\n   type ErrCode = String\n   type ErrMsg = ErrorMessage // = String\n \n+  def dashErr(errCode: ErrCode): St = {\n+    if (errCode.isEmpty) \"\"\n+    else \"-\" + errCode\n+  }\n+\n   type Opt[+A] = Option[A]\n   val Opt: Option.type = Option\n \n@@ -163,19 +168,27 @@ package object core {\n   type Participant = com.debiki.core.Pat\n   val Pat: Participant.type = Participant\n   type User = UserBr  // backw compat, renaming [trait_user]\n+  type UserVb = UserInclDetails\n \n   type PatVb = ParticipantInclDetails\n+  type MembVb = MemberInclDetails\n   type MemberVb = MemberInclDetails\n \n+  // Later, these will be different?\n+  type GroupBr = Group\n+  type GroupVb = Group\n+\n   type PatId = Int\n   type ParticipantId = Int  ; RENAME // to PatId\n   type GuestId = PatId\n   type MemberId = PatId   ; RENAME // to MembId\n-  type MembId = PatId\n+  type MembId = PatId     // but hard to read: '...bI..', two lines next to each other. Instead:\n+  type MemId = PatId      // ... is this better?  NO, REMOVE.\n   type UserId = PatId\n   type GroupId = PatId\n \n-  type Username = St\n+  type Un = St  // is this nice?\n+  type Username = St   // a bit long?\n   type FullName = St\n \n   // Use MemberId instead.\n@@ -475,6 +488,9 @@ package object core {\n \n   type EmailOut = Email  // renaming from Email to EmailOut\n \n+  type SmtpMsgId = St       // [Scala_3] opaque type\n+  type SmtpMsgIdPrefix = St // [Scala_3] opaque type\n+\n   RENAME // to EventId. And, later: [Scala_3] opaque type\n   type AuditLogEntryId = Int\n   type EventId = AuditLogEntryId\n@@ -483,6 +499,13 @@ package object core {\n \n   type ApiSecretNr = Int\n \n+  type LinkMaybeBad = St\n+  sealed trait MayLink_unused\n+  object MayLink_unused {\n+    case object YesRelFollow extends MayLink_unused\n+    case object YesNoFollow extends MayLink_unused\n+    case object No extends MayLink_unused\n+  }\n \n   type Hopefully[R] = R Or Problem\n \n@@ -1612,6 +1635,8 @@ package object core {\n   def SELF_DOS = ()\n   def ASTROTURFING = ()   // Someone creates many accounts and pretends to be many people\n   def PRIVACY = ()        // Could make things a bit more private\n+  def SITE_PRIVACY = ()   // Not related to any single person, but the Ty site as a whole, e.g.\n+                          // sequential numbers that make it possible to estimate frequency.\n   def BUG = ()            // Need not be a terribly important bug.\n   def RACE = ()           // A race condition bug / situation.\n   def MUST = ()           // Fix before next release.\n@@ -1634,7 +1659,7 @@ package object core {\n   def OPTIMIZE = ()\n   def SLOW_QUERY = ()\n   def SHOULD_OPTIMIZE = ()\n-  def COULD_OPTIMIZE = () // Also see [On2] but typically O(n^2) is intentional (because simpler).\n+  def COULD_OPTIMIZE = () // Also see [On2] or [OnLogn] but typically that's intentional (because simpler).\n   def COULD_OPTIMIZE_TESTS = () // Less important\n   def WOULD_OPTIMIZE = () // Unimportant thing that could be optimized.\n   def BLOCKING_REQ = ()"
    },
    {
      "sha": "c6fdfe026066fe83f2c391618ed3f1e717b14b78",
      "filename": "appsv/model/src/main/scala/com/debiki/core/trust-threat-level.scala",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Ftrust-threat-level.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Ftrust-threat-level.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Ftrust-threat-level.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -19,8 +19,11 @@ package com.debiki.core\n \n import com.debiki.core.ThreatLevel.{MildThreat, SevereThreat}\n \n+trait HasInt32 {\n+  def toInt: i32\n+}\n \n-sealed abstract class TrustLevel(val IntVal: Int) {\n+sealed abstract class TrustLevel(val IntVal: Int) extends HasInt32 {\n   def toInt: Int = IntVal\n \n   def isBelow(other: TrustLevel): Bo =\n@@ -50,9 +53,13 @@ sealed abstract class TrustLevel(val IntVal: Int) {\n object TrustLevel {\n   case object Stranger extends TrustLevel(0)   ; REFACTOR // bump all 1, so won't start at 0\n                                       // 0 is easily buggy-mistaken for undefined, in Javascript.\n-  //se object Guest — same as Stranger, except for private communities that have invited a stranger\n-  //                  as a guest? Such an invited person would have trust level Guest and\n-  //                  could see \"public\" topics in the community although the community was private.\n+  //se object [StrangerWithSecret] — if someone doesn't yet have a real account, but via a secret link\n+  //      has been invited to look at an otherwise private discussion?\n+  //      Or has been invited to a private community, and then can view \"public\" topics, there.\n+  //      Should id be < 0? And if creating a real account, gets a > 0 id?\n+  //      Maybe different secret links, some let one create a real account,\n+  //      others just lets one view sth, for a limited time maybe. And could have a link-max-use-count.\n+\n   case object NewMember extends TrustLevel(1)   // has created a real account\n   case object BasicMember extends TrustLevel(2)\n   case object FullMember extends TrustLevel(3)"
    },
    {
      "sha": "dbbc09d44c09a3f7a8e4866fbdfd1368e37da624",
      "filename": "appsv/model/src/main/scala/com/debiki/core/user.scala",
      "status": "modified",
      "additions": 103,
      "deletions": 35,
      "changes": 138,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -288,7 +288,11 @@ object NewOauthUserData {\n \n \n \n-case class NameAndUsername(id: UserId, fullName: String, username: String)\n+case class NameAndUsername(\n+  id: UserId,\n+  fullName: St,\n+  username: St,\n+  mayMentionMeTrLv: Opt[TrustLevel])\n \n \n \n@@ -676,6 +680,33 @@ sealed trait Pat {\n   def canPromoteToBasicMember: Bo = false\n   def canPromoteToFullMember: Bo = false\n \n+  /** Sync w Typescript: store_maySendDirectMessageTo().  */\n+  def mayMessage(pat: Pat): Bo = {\n+    // It's ok to message oneself? Maybe for some kind of personal journal\n+    if (pat.isSystemOrSysbot || pat.isGuest || pat.isGone) return false\n+    if (isStaffOrCoreMember) return true\n+    SHOULD // prevent problematic users from messaging anyone but the mods? [bad_pat_dms]\n+    // if (threatLevel > ... && !pat.isStaff ) return false  // currently only client side\n+    pat match {\n+      case m: Member =>\n+        m.privPrefs.maySendMeDmsTrLv.forall(othersMinLevel =>\n+              this.effectiveTrustLevel isAtLeast othersMinLevel)\n+      case _ => false\n+    }\n+  }\n+\n+  def mayMention(pat: Pat): Bo = {\n+    if (pat.id == this.id || pat.isSystemOrSysbot || pat.isGuest || pat.isGone) return false\n+    if (isStaffOrCoreMember) return true\n+    pat match {\n+      case m: Member =>\n+        m.privPrefs.mayMentionMeTrLv.forall(othersMinLevel =>\n+              this.effectiveTrustLevel isAtLeast othersMinLevel)\n+      case _ => false\n+    }\n+  }\n+\n+\n   /** A member's full name, or guest's guest name. */\n   def anyName: Opt[St]\n \n@@ -684,6 +715,9 @@ sealed trait Pat {\n \n   def usernameOrGuestName: St\n \n+  def atUsernameOrFullName: St =\n+    anyUsername.map('@' + _) orElse anyName getOrElse UnknownUserName\n+\n   final def usernameSpaceOtherName: St =\n     (anyUsername.getOrElse(\"\") + \" \" + anyName.getOrElse(\"\")).trim\n \n@@ -698,18 +732,42 @@ sealed trait Pat {\n   final def nameHashId: St =\n     anyUsername.map(un => s\"@$un #$id\") getOrElse s\"'$usernameOrGuestName' #$id\"\n \n-  final def toMemberOrThrow: Member = {\n+  final def toMemberOrThrow: Member = toMemberOrThrowCode(\"\")\n+\n+  final def toMemberOrThrowCode(errCode: ErrCode): Member = {\n     this match {\n-      case m: User => m\n-      case g: Guest => throw GotAGuestException(g.id)\n+      case m: UserBase => m\n+      case g: Guest => throw GotAGuestException(g.id, errCode)\n       case g: Group => g\n       case UnknownParticipant => throw GotUnknownUserException\n     }\n   }\n \n+  final def toMemberVbOrDie: MemberVb = {\n+    this match {\n+      case u: UserVb => u\n+      case g: Group => g\n+      case x => die(\"TyENOTVB3963\", s\"Not a MemberVb: ${classNameOf(x)}\")\n+    }\n+  }\n+\n+  COULD_OPTIMIZE // return UserBase instead?\n   final def toUserOrThrow: User = {\n     this match {\n       case m: User => m\n+      case u: UserVb => u.briefUser // or just return UserBase instead of converting\n+      case _: UserBase => die(\"TyE59RKTJ1\", \"Should see UserBr or UserVb before UserBase\")\n+      case g: Guest => throw GotAGuestException(g.id)\n+      case g: Group => throw GotAGroupException(g.id)\n+      case UnknownParticipant => throw GotUnknownUserException\n+    }\n+  }\n+\n+  final def toUserVbOrThrow: UserVb = {\n+    this match {\n+      case _: UserBr => die(\"TyE59RKTJ2\", \"Got a UserBr not a UserVb\")\n+      case u: UserVb => u\n+      case _: UserBase => die(\"TyE59RKTJ3\", \"Should see UserBr or UserVb before UserBase\")\n       case g: Guest => throw GotAGuestException(g.id)\n       case g: Group => throw GotAGroupException(g.id)\n       case UnknownParticipant => throw GotUnknownUserException\n@@ -732,6 +790,8 @@ sealed trait Member extends Pat {\n \n   def isApproved: Opt[Bo]\n   final def isApprovedOrStaff: Bo = isApproved.is(true) || isStaff\n+\n+  def privPrefs: MemberPrivacyPrefs\n }\n \n \n@@ -821,6 +881,7 @@ case class UserBr(\n   emailNotfPrefs: EmailNotfPrefs,\n   emailVerifiedAt: Option[ju.Date] = None,\n   passwordHash: Option[String] = None,  // OPTIMIZE no need to always load? Move to MemberInclDetails?\n+  privPrefs: MemberPrivacyPrefs,\n   tinyAvatar: Option[UploadRef] = None,\n   smallAvatar: Option[UploadRef] = None,\n   isApproved: Option[Boolean],\n@@ -849,7 +910,8 @@ case class UserBr(\n   def username: Option[String] = Some(theUsername)\n \n   def nameAndUsername: NameAndUsername =\n-    NameAndUsername(id = id, fullName = fullName.getOrElse(\"\"), username = theUsername)\n+    NameAndUsername(id = id, fullName = fullName.getOrElse(\"\"), username = theUsername,\n+          mayMentionMeTrLv = privPrefs.mayMentionMeTrLv)\n \n   def effectiveTrustLevel: TrustLevel = lockedTrustLevel getOrElse trustLevel\n   def effectiveThreatLevel: ThreatLevel = lockedThreatLevel getOrElse threatLevel\n@@ -927,7 +989,7 @@ case class Guest( // [exp] ok   REFACTOR split into GuestBr and GuestVb [guest_b\n   def isModerator: Boolean = false\n   def isStaffOrMinTrustNotThreat(trustLevel: TrustLevel): Bo = false\n   def suspendedTill: Option[ju.Date] = None\n-  def effectiveTrustLevel: TrustLevel = TrustLevel.NewMember ; SHOULD // CHANGE to TrustLevel.Stranger\n+  def effectiveTrustLevel: TrustLevel = TrustLevel.NewMember  // or sometimes [StrangerWithSecret] or should that be another class?\n \n   def anyName: Opt[St] = Some(guestName)\n   def anyUsername: Opt[St] = None\n@@ -965,7 +1027,7 @@ sealed trait ParticipantInclDetails extends Pat {    RENAME   // to PatVb\n sealed trait MemberInclDetails extends ParticipantInclDetails {  RENAME // to MemberVb\n   def summaryEmailIntervalMins: Option[Int]\n   def summaryEmailIfActive: Option[Boolean]\n-  def seeActivityMinTrustLevel: Option[TrustLevel]\n+  def privPrefs: MemberPrivacyPrefs\n \n   def usernameLowercase: String\n \n@@ -975,14 +1037,17 @@ sealed trait MemberInclDetails extends ParticipantInclDetails {  RENAME // to Me\n     */\n   def uiPrefs: Option[JsObject]\n \n-  def copyTrait(uiPrefs: Option[JsObject] = null): MemberInclDetails = {\n+  def copyPrefs(uiPrefs: Opt[JsObject] = null, privPrefs: MemberPrivacyPrefs = null): MemberVb = {\n     this match {\n-      case g: Group =>\n-        g.copy(\n-          uiPrefs = if (uiPrefs ne null) uiPrefs else g.uiPrefs)\n-      case u: UserInclDetails =>\n-        u.copy(\n-          uiPrefs = if (uiPrefs ne null) uiPrefs else u.uiPrefs)\n+      case thiz: GroupVb =>\n+        thiz.copy(\n+              uiPrefs = if (uiPrefs ne null) uiPrefs else thiz.uiPrefs,\n+              privPrefs = if (privPrefs ne null) privPrefs else thiz.privPrefs,\n+              )\n+      case thiz: UserVb =>\n+        thiz.copy(\n+              uiPrefs = if (uiPrefs ne null) uiPrefs else thiz.uiPrefs,\n+              privPrefs = if (privPrefs ne null) privPrefs else thiz.privPrefs)\n     }\n   }\n }\n@@ -1008,11 +1073,11 @@ case class UserInclDetails( // ok for export\n   override val about: Option[String] = None,\n   override val website: Option[String] = None,\n   override val country: Option[String] = None,\n-  seeActivityMinTrustLevel: Option[TrustLevel] = None,\n   tinyAvatar: Option[UploadRef] = None,\n   smallAvatar: Option[UploadRef] = None,\n   mediumAvatar: Option[UploadRef] = None,\n   uiPrefs: Option[JsObject] = None,\n+  privPrefs: MemberPrivacyPrefs = MemberPrivacyPrefs.empty,\n   isOwner: Boolean = false,\n   isAdmin: Boolean = false,\n   isModerator: Boolean = false,\n@@ -1165,12 +1230,6 @@ case class UserInclDetails( // ok for export\n   }\n \n \n-  def copyWithNewPrivacyPrefs(preferences: MemberPrivacyPrefs): UserInclDetails = {\n-    copy(\n-      seeActivityMinTrustLevel = preferences.seeActivityMinTrustLevel)\n-  }\n-\n-\n   def copyWithMaxThreatLevel(newThreatLevel: ThreatLevel): UserInclDetails =\n     if (this.threatLevel.toInt >= newThreatLevel.toInt) this\n     else copy(threatLevel = newThreatLevel)\n@@ -1212,7 +1271,7 @@ case class UserInclDetails( // ok for export\n   def noDetails: Participant = briefUser\n \n \n-  def briefUser = UserBr(   // RENAME? to just noDetails? see above\n+  def briefUser: UserBr = UserBr(   // RENAME? to just noDetails? see above ... No, to toBrief?\n     id = id,\n     ssoId = ssoId,\n     extId = extId,\n@@ -1221,6 +1280,7 @@ case class UserInclDetails( // ok for export\n     email = primaryEmailAddress,\n     emailNotfPrefs = emailNotfPrefs,\n     emailVerifiedAt = emailVerifiedAt,\n+    privPrefs = privPrefs,\n     passwordHash = passwordHash,\n     isApproved = isApproved,\n     suspendedTill = suspendedTill,\n@@ -1316,11 +1376,21 @@ case class AboutGroupPrefs(\n \n \n \n+/** Currently ignore if configured for a Group. Later, will get inherited to group\n+  * members — then, among custom groups, most private settings wins (since privacy\n+  * is important).\n+  */\n case class MemberPrivacyPrefs(\n-  userId: UserId,\n-  seeActivityMinTrustLevel: Option[TrustLevel])\n+  seeActivityMinTrustLevel: Opt[TrustLevel],\n+  maySendMeDmsTrLv: Opt[TrustLevel],\n+  mayMentionMeTrLv: Opt[TrustLevel],\n+)\n \n \n+object MemberPrivacyPrefs {\n+  val empty: MemberPrivacyPrefs = MemberPrivacyPrefs(None, None, None)\n+}\n+\n \n case class UserEmailAddress(  // RENAME to MemberEmailAAddres (also groups can have email addrs)\n   userId: UserId,\n@@ -1387,17 +1457,18 @@ case class GroupAndStats(group: Group, stats: Option[GroupStats])\n   */\n case class Group( // [exp] missing: createdAt, add to MemberInclDetails & ParticipantInclDetails?\n   id: UserId,\n-  theUsername: String,\n-  name: Option[String],\n+  theUsername: Username,\n+  name: Opt[St],\n   extId: Opt[ExtId] = None,\n   createdAt: When = When.Genesis, // for now\n   // emailAddr: String  <— if adding later, don't forget to update this: [306KWUSSJ24]\n-  tinyAvatar: Option[UploadRef] = None,\n-  smallAvatar: Option[UploadRef] = None,\n-  summaryEmailIntervalMins: Option[Int] = None,  // REFACTOR break out to EmailPrefs [REFACTORNOTFS] -----\n-  summaryEmailIfActive: Option[Boolean] = None,  //\n-  grantsTrustLevel: Option[TrustLevel] = None,\n-  uiPrefs: Option[JsObject] = None,\n+  tinyAvatar: Opt[UploadRef] = None,\n+  smallAvatar: Opt[UploadRef] = None,\n+  summaryEmailIntervalMins: Opt[i32] = None,  // REFACTOR break out to EmailPrefs [REFACTORNOTFS] -----\n+  summaryEmailIfActive: Opt[Bo] = None,  //\n+  grantsTrustLevel: Opt[TrustLevel] = None,\n+  uiPrefs: Opt[JsObject] = None,\n+  privPrefs: MemberPrivacyPrefs = MemberPrivacyPrefs.empty,\n   perms: PatPerms = PatPerms.empty,\n )\n   extends Member with MemberInclDetails {  // COULD split into two? One without, one with details\n@@ -1439,9 +1510,6 @@ case class Group( // [exp] missing: createdAt, add to MemberInclDetails & Partic\n \n   //def canonicalUsername: String = User.makeUsernameCanonical(theUsername)   [CANONUN]\n \n-  // Not yet incl in Group, but could be. For now, let be core members & staff only.\n-  def seeActivityMinTrustLevel: Option[TrustLevel] = Some(TrustLevel.CoreMember)\n-\n   def anyName: Option[String] = name\n \n   def preferences: AboutGroupPrefs ="
    },
    {
      "sha": "9996ad39fb3bf22b4e674238039a948c0967c72d",
      "filename": "appsv/model/src/main/scala/com/debiki/core/watchbar.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fwatchbar.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fwatchbar.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fwatchbar.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -339,6 +339,7 @@ object BareWatchbar {\n   def withChatChannelAndDirectMessageIds(channelIds: immutable.Seq[PageId],\n         messageIds: immutable.Seq[PageId]) =\n     BareWatchbar(Nil, Nil,\n+      // Or should unread be true, how do we know?\n       chatChannels = channelIds.map(WatchbarTopic(_, unread = false)),\n       directMessages = messageIds.map(WatchbarTopic(_, unread = false)))\n "
    },
    {
      "sha": "63950cdf0e55bdd78b741c4abf412c6f59b6a6ec",
      "filename": "appsv/rdb/lock.sbt",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Flock.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Flock.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Flock.sbt?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -6,11 +6,11 @@ Compile / dependencyOverrides ++= {\n     Seq.empty\n   } else {\n     Seq(\n-      \"com.fasterxml.jackson.core\" % \"jackson-annotations\" % \"2.10.5\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.10.5\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.10.5.1\",\n-      \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jdk8\" % \"2.10.5\",\n-      \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jsr310\" % \"2.10.5\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-annotations\" % \"2.11.4\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.11.4\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.11.4\",\n+      \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jdk8\" % \"2.11.4\",\n+      \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jsr310\" % \"2.11.4\",\n       \"com.google.code.findbugs\" % \"jsr305\" % \"3.0.2\",\n       \"com.google.errorprone\" % \"error_prone_annotations\" % \"2.11.0\",\n       \"com.google.guava\" % \"failureaccess\" % \"1.0.1\",\n@@ -19,8 +19,8 @@ Compile / dependencyOverrides ++= {\n       \"com.google.j2objc\" % \"j2objc-annotations\" % \"1.3\",\n       \"com.lambdaworks\" % \"scrypt\" % \"1.4.0\",\n       \"com.sun.mail\" % \"javax.mail\" % \"1.5.6\",\n-      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.2\",\n-      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.2\",\n+      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.3\",\n+      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.3\",\n       \"commons-beanutils\" % \"commons-beanutils\" % \"1.9.4\",\n       \"commons-codec\" % \"commons-codec\" % \"1.15\",\n       \"commons-collections\" % \"commons-collections\" % \"3.2.2\",\n@@ -31,14 +31,14 @@ Compile / dependencyOverrides ++= {\n       \"javax.activation\" % \"activation\" % \"1.1\",\n       \"nu.validator.htmlparser\" % \"htmlparser\" % \"1.4\",\n       \"org.apache.commons\" % \"commons-email\" % \"1.5\",\n-      \"org.apache.tika\" % \"tika-core\" % \"2.4.1\",\n+      \"org.apache.tika\" % \"tika-core\" % \"2.6.0\",\n       \"org.checkerframework\" % \"checker-qual\" % \"3.12.0\",\n       \"org.flywaydb\" % \"flyway-core\" % \"5.0.7\",\n       \"org.owasp.encoder\" % \"encoder\" % \"1.2.3\",\n-      \"org.postgresql\" % \"postgresql\" % \"42.4.0\",\n-      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.12\",\n-      \"org.slf4j\" % \"slf4j-api\" % \"1.7.36\"\n+      \"org.postgresql\" % \"postgresql\" % \"42.4.2\",\n+      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.13\",\n+      \"org.slf4j\" % \"slf4j-api\" % \"2.0.3\"\n     )\n   }\n }\n-// LIBRARY_DEPENDENCIES_HASH dc3fac021fc349c5e0135c9d8366124e4482201c\n+// LIBRARY_DEPENDENCIES_HASH cd2996bd71e22ca7abedb8fafa6282c133d37a91"
    },
    {
      "sha": "5e6f329bcc495cb9865b1b3dddf319495acbdf1c",
      "filename": "appsv/rdb/src/main/resources/db/migration/db-wip.sql",
      "status": "modified",
      "additions": 114,
      "deletions": 49,
      "changes": 163,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-wip.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-wip.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-wip.sql?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -290,6 +290,8 @@ $_$;\n --     paused_by_id_c, done_by_id_c, closed_by_id_c, locked_by_id_c,\n --     frozen_by_id_c, unwanted_by_id_c, hidden_by_id_c, deleted_by_id_c\n -- with:  private_status_c\n+--   [edit] No, using private_pats_id_c instead. And the following might be\n+--   a user list/group setting instead: [/edit]\n --            null or 0 = not private,\n --            1 = yes, can make public,\n --            2 = yes, can*not* make public, but can add more who can see it,\n@@ -402,19 +404,6 @@ create table trees_t (  --  NO, instead, use posts_t for bookmarks?\n --   about_tag_id_c,\n -- )\n \n-alter table post_actions3 drop column action_id; -- already noted below in \"delete: ...\".\n-\n-alter table post_actions3 rename to post_pats_t; -- no, post_act(ion)s_t?\n-alter table post_actions3 rename column created_by_id to pat_id_c;\n-alter table post_actions3 rename column created_at to at_c:  -- or added_at_c;\n-alter table post_actions3 rename column type to how_c;\n-alter table post_actions3 rename column sub_id to sub_how_c;\n-\n--- Audit log, instead:\n-alter table post_actions3 drop column updated_at;\n-alter table post_actions3 drop column deleted_at;\n-alter table post_actions3 drop column deleted_by_id;\n-\n \n \n --   pages_t.pin_in_linkbar_order_c \n@@ -590,22 +579,22 @@ alter table page_users3 rename to user_pages3;\n alter table page_users3 drop column notf_level;\n alter table page_users3 drop column notf_reason; -- weird, why did I add it, and why here?\n \n-users3             —> pats_t\n-user_stats3        —> pat_dyn_data_t         -- frequently changes\n-user_visit_stats3  —> pat_visits_t\n-page_users3    __.——> pat_page_visits_t      --\n-                  `—> pat_page_dyn_data_t    --\n-\n-post_read_stats3   —> posts_read_t\n-           user_id —> posts_read_t.read_by_id_c\n+alter table users3             rename to pats_t;\n+alter table user_stats3        rename to pat_dyn_data_t;    -- frequently changes\n+alter table user_visit_stats3  rename to pat_visits_t;\n+alter table page_users3        rename to pat_page_visits_t;\n+--                                    or `pat_page_dyn_data_t  ?\n+-- \n+alter table post_read_stats3   rename to posts_read_t;\n+alter table posts_read_t rename user_id to read_by_id_c;  -- ?\n \n \n alter table users3 add column separate_email_for_every smallint;\n update users3 set separate_email_for_every = 3 where email_for_every_new_post;  -- NO\n alter table users3 drop column email_for_every_new_post;\n \n-alter table users3 add column watch_level_after_posted smallint;\n-alter table users3 add column watch_level_after_do_it_voted smallint;\n+alter table users3 add column notf_level_after_posted smallint;\n+alter table users3 add column notf_level_after_do_it_voted smallint;\n -- What's this?\n alter table users3 add column notify_if_voted_up int;\n alter table users3 add column notify_if_voted_other int;\n@@ -621,20 +610,6 @@ alter table users3 add column group_default_prio int;\n --   incl_sub_threads boolean,\n \n \n--- Incl in MemberPrivacyPrefs (Scala class):\n--- and see:   docs/design-docs/tags.dd.adoc  [perms_thoughts]  too\n-alter table pats_t add column may_see_username_min_tr_lv       trust_level_or_staff_d;\n-alter table pats_t add column may_see_full_name_min_tr_lv      trust_level_or_staff_d;\n-alter table pats_t add column may_see_bio_min_tr_lv            trust_level_or_staff_d;\n-alter table pats_t add column may_see_small_avatar_min_tr_lv   trust_level_or_staff_d;\n-alter table pats_t add column may_see_medium_avatar_min_tr_lv  trust_level_or_staff_d;\n---    table pats_t add column may_see_tags_min_tr_lv -- no, per tag type insetad.\n-alter table pats_t add column may_send_dms_min_tr_lv           trust_level_or_staff_d;\n-alter table pats_t add column may_mention_min_tr_lv            trust_level_or_staff_d;  -- ?\n-\n-alter table pats_t add column may_see_visit_stats_min_tr_lv    trust_level_or_staff_d;  -- ?\n-alter table pats_t add column may_see_post_stats_min_tr_lv     trust_level_or_staff_d;  -- ?\n-\n -- or maybe:   others_see_..._min_tr_lv ?  so clarifies it's reuqirements on *others*\n -- to see this pat.\n \n@@ -657,6 +632,7 @@ alter table pats_t add column web_scraping_prefs_c  web_scraping_prefs_d;\n -- *** No, don't, let's not store CanSeePrivate in pat_rels_t ***\n update posts_t set nr_c = -nr_c, private_status_c = ...   -- sth like this, because\n     where page_type is private-message;      -- private comments have negative post nrs.\n+    [edit] NO, using posts_t.private_pats_id_c instead [/edit]\n insert into pat_rels_t (from_pat_id_c, rel_type_c, ...)\n     select user_id, PatRelType.CanSeePrivate, ... from page_users3\n     where joined_by_id is not null and kicked_by_id is null;\n@@ -694,31 +670,98 @@ create table perms_on_pats_t (    -- can be a group or a person\n   may_see_username_c,\n   may_see_full_name_c,\n   may_see_bio_c,\n-  see_activity_min_trust_level,\n-  may_see_small_avatar_c,\n+  may_see_activity_c,\n+  may_see_tiny_avatar_c,\n   may_see_medium_avatar_c,\n-  may_see_tags_c,  -- but which tags\n-  may_send_dms_c,\n+  ...\n+  ... same as in pats_t, the ..._tr_lv_c coulmns\n );\n \n \n+alter perms_on_pages3 (\n+  for_pat_id\n+  on_category_id\n+  ...\n+  may_moderate       -- can approve and reject comments. Category moderator, [cat_mods]. Hmm?\n+  may_administrate?  -- Can give & revoke category access & edit permissions,\n+      or  _manage?   -- to groups, and ... also to individuals? Or should perms always\n+                     -- be configured on groups, and user access by adding user to group?\n+                     -- The former is more orderly? The later more flexible & chaotic?\n+)\n+\n create table perms_on_groups3 (   -- already created:   group_participants3\n+\n+    -- ACTUALLY maybe CHANGE  group_participants3\n+    --                    to  perms_on_pats_t,\n+    --\n+    -- and if it's a group, then is_member/manager/adder/bouncer\n+    -- has effect, otherwise ignored.\n+    --\n+    -- And all  pats_t.may_mention_me_tr_lv_c, may_see_my_...\n+    -- would be here too. If configured on a group, then,\n+    -- inherited, and can be overridden by individual users.\n+    --\n+    -- *This also lets users block each other*\n+    -- (which can be needed for big public communities)\n+    -- by configuring:\n+    --   perms_on_pats_t.for_pat_id         = oneself\n+    --   perms_on_pats_t.on_pat_id          = annoying person\n+    --   perms_on_pats_t.may_dir_msg_me_c          = false\n+    --   perms_on_pats_t.may_see_my_profile_page_c = false\n+    --   perms_on_pats_t.may ...                   = false\n+    --\n+    -- and once could always edit others' perms on oneself,\n+    -- unless they're admins, or site wide mods?\n+    -- Or category mods in a category one is in.\n+\n+    -- (This'd be similar to:  page_notf_prefs3  and  perms_on_pages3\n+    -- in which one inherits settings from one's groups, and can override oneself.)\n+    --\n+    -- By default, when creating a group, maybe add this  perms_on_pats_t  entry:\n+    --   perms_on_pats_t.for_pat_id = the group\n+    --   perms_on_pats_t.on_pat_id  = the group itself\n+    --   perms_on_pats_t.may_see_ ...  = true\n+    --   perms_on_pats_t.may_mention.. = true\n+    --   ...\n+    -- so that, by default, group members can see each other? Even if this is disabled\n+    -- site wide?  Or, that's a pretty rare situation. So maybe \"power admins\"\n+    -- had better do manually.\n+\n+    -- And to disable a mentions-misbehaving user from @mentioning others:\n+    --   perms_on_pats_t.for_pat_id = the misbehaving user\n+    --   perms_on_pats_t.on_pat_id  = everyone\n+    --   perms_on_pats_t.may_mention_c = false  -- or could even be a per-day number 0-9, hmm,\n+                                                -- so it's a softer limit rather than\n+                                                -- never never never.\n+\n+    -- Hmm, that softer limit mentioned just above could be made a forum default, for newbies?\n+    --   perms_on_pats_t.for_pat_id = new_members\n+    --   perms_on_pats_t.on_pat_id  = everyone\n+    --   perms_on_pats_t.may_mention_per_day_c = 5   -- or week\n+    -- Could start with supporting only 0 or unset (no limit).\n+    -- Or should rate limits be in pats_t, and inherited?\n+    --   pats_t\n+    --        pat_id_c = ...   mentions_per_day_c = ...\n+\n+\n   site_id,\n   people_id int,\n   group_id int,\n+  is_member/manager/adder/bouncer — already created\n+  -- ? Group admins can addd managers. And managers can add/remove bouncers and members.\n+  -- Bouncers can remove members (but not add). Addders can add but not remove.\n+  -- (Different use cases.)\n   is_group_admin boolean,    -- a group admin and a group manager etc, needn't\n   is_group_manager boolean,  -- be group members. so they're in a different table.\n-  is_bouncer boolean,        --\n-  may_mention: boolean,      -- (E.g. to manage a group \"Misbehaving Members\" there's\n+  is_bouncer boolean,        -- (E.g. to manage a group \"Misbehaving Members\" there's\n                              -- no need to have been added to that group oneself.)\n-)\n    -- oh, already done. Next:\n    comment on table group_participants3 is '... sth like the comment above';\n \n \n-create table group_members3 (\n+alter table group_participants3 (\n   group_id int,\n-  member_id int,\n+  pat_id int,\n   -- later:\n   show_membership boolean,  -- if the group title should be shown next to the username\n                             --  e.g.   \"@pelle  Pelle Svanslös  staff\" — if is a staff group memebr.\n@@ -728,17 +771,39 @@ create table group_members3 (\n  -- is_group_true boolean, references people3(id, is_group)  + index  deferrable\n  --  instead: is_group does a select from people3.\n --  https://stackoverflow.com/a/10136019/694469 — if works, upvote\n+\n+\n+  notify_pat_prio_c\n+      -- if the group is @mentioned or DM:d, then, should pat get notified?:\n+      -- by making this configurable, workload can be distributed between\n+      -- support staff. Or would it be better to use some bot for this?\n+      -- which knows about people's schedules.\n+      -- Let's say there's a Support team with 20 members. If someone writes\n+      -- \"Help, @support, do you know ...\" it's unnecessary to notify all 20 people.\n+      -- Better start with maybe 3, and then, if no one replies, 3 others a bit later.\n+      -- Some thoughts:\n+      always, directly\n+      always, batched\n+      always, if pat is online/working\n+      round-robin\n+      round-robin, if pat is online/working\n+      later if no one else replies\n+      later if no one else replies, and pat is online/working\n+      much later  -''-\n+      much later  -''-\n+      never\n )\n \n -- later?:\n alter table pats_t add column default_group_prio int default 10;  -- for groups\n \n \n \n-create table group_notf_prefs3 (\n+\n+create table pat_notf_prefs3 (\n   site_id int,\n-  people_id int,  -- typically  = group_id, i.e. configs group members\n-  group_id int,   -- null —> for the whole community\n+  for_pat_id_c int,  -- typically  = group_id, i.e. configs group members\n+  on_pat_id_c int,   -- null —> for the whole community. What, why? Instead, the Everyone group?\n   notify_if_sb_joins boolean,\n   notify_if_sb_leaves boolean,\n   notify_of_staff_changes boolean,"
    },
    {
      "sha": "c7ed7ded30d41b01444a15d60ee096c2be2efda0",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/NotificationsSiteDaoMixin.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FNotificationsSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FNotificationsSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FNotificationsSiteDaoMixin.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -59,10 +59,8 @@ trait NotificationsSiteDaoMixin extends SiteTransaction {\n         about_post_id_c, about_page_id_str_c,\n         ACTION_TYPE, ACTION_SUB_ID,\n         BY_USER_ID, TO_USER_ID,\n-        email_id, email_status, seen_at)\n-      values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n-      \"\"\"\n-\n+        smtp_msg_id_prefix_c, email_id, email_status, seen_at)\n+      values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) \"\"\"\n \n     val values = ArrayBuffer[AnyRef](siteId.asAnyRef, notf.id.asAnyRef, d2ts(notf.createdAt),\n       notf.tyype.toInt.asAnyRef)\n@@ -75,6 +73,7 @@ trait NotificationsSiteDaoMixin extends SiteTransaction {\n         values += NullInt //\n         values += postNotf.byUserId.asAnyRef\n         values += postNotf.toUserId.asAnyRef\n+        values += postNotf.smtpMsgIdPrefix.orNullVarchar\n         values += postNotf.emailId.orNullVarchar\n         values += postNotf.emailStatus.toInt.asAnyRef  // [306RDLA4]\n         values += postNotf.seenAt.orNullTimestamp\n@@ -84,7 +83,7 @@ trait NotificationsSiteDaoMixin extends SiteTransaction {\n   }\n \n \n-  private def deleteNotf(notfToDelete: NotificationToDelete) {\n+  private def deleteNotf(notfToDelete: NotificationToDelete): U = {\n     import NotificationType._\n     val (sql, values: List[AnyRef]) = notfToDelete match {\n       case toDelete: NotificationToDelete.ToOneMember =>\n@@ -109,6 +108,9 @@ trait NotificationsSiteDaoMixin extends SiteTransaction {\n         (sql, values)\n     }\n \n+    // Don't require any row to get deleted. For example, if a user had mentions disabled,\n+    // then, no notification would have been generated, when trying to mention hen,\n+    // and there would be nothing to delete now. [filter_mentions]\n     runUpdate(sql, values)\n   }\n \n@@ -172,8 +174,7 @@ trait NotificationsSiteDaoMixin extends SiteTransaction {\n     } getOrElse \"\"\n \n     val query = s\"\"\"\n-      select *\n-      from notifications3\n+      select * from notifications3\n       where site_id = ?\n         and about_post_id_c = ?\n         and ${"
    },
    {
      "sha": "c7edec5164001ac20494917283b70061f749c188",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PageUsersSiteDaoMixin.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageUsersSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageUsersSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageUsersSiteDaoMixin.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -136,8 +136,9 @@ trait PageUsersSiteDaoMixin extends SiteTransaction {\n   }\n \n \n-  override def loadPageIdsUserIsMemberOf(userId: UserId, onlyPageRoles: Set[PageType])\n+  override def loadPageIdsUserIsMemberOf(userAndGroupIds: Seq[MemId], onlyPageRoles: Set[PageType])\n         : immutable.Seq[PageId] = {\n+    if (userAndGroupIds.isEmpty) return Nil\n     require(onlyPageRoles.nonEmpty, \"EsE4G8U1\")\n     // Inline the page roles (rather than (?, ?, ?, ...)) because they'll always be the same\n     // for each caller (hardcoded somewhere).\n@@ -147,10 +148,10 @@ trait PageUsersSiteDaoMixin extends SiteTransaction {\n       from page_users3 tu inner join pages3 p\n         on tu.site_id = p.site_id and tu.page_id = p.page_id and p.page_role in (\n             ${ onlyPageRoles.map(_.toInt).mkString(\",\") })\n-      where tu.site_id = ? and tu.user_id = ?\n+      where tu.site_id = ? and tu.user_id in (${ makeInListFor(userAndGroupIds) })\n       order by p.last_reply_at desc\n       \"\"\"\n-    runQueryFindMany(query, List(siteId.asAnyRef, userId.asAnyRef), rs => {\n+    runQueryFindMany(query, siteId.asAnyRef :: userAndGroupIds.map(_.asAnyRef).toList, rs => {\n       rs.getString(\"page_id\")\n     })\n   }"
    },
    {
      "sha": "0cf165e8072af9b8badd1f5ea94349f12efa6b22",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PagesSiteDaoMixin.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPagesSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPagesSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPagesSiteDaoMixin.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -39,6 +39,7 @@ trait PagesSiteDaoMixin extends SiteTransaction {\n       select g.page_id, ${_PageMetaSelectListItems}\n       from pages3 g\n       where g.site_id = ?\n+        -- [open_chat_dupl]\n         and g.page_role in (${PageType.JoinlessChat.toInt}, ${PageType.OpenChat.toInt})\n         and g.pin_order is not null\n         and g.pin_where = ${PinPageWhere.Globally.toInt}"
    },
    {
      "sha": "d8751a9bd3651a69f8368254dadb6d7a1258d5f3",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PostsSiteDaoMixin.scala",
      "status": "modified",
      "additions": 17,
      "deletions": 5,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPostsSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPostsSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPostsSiteDaoMixin.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -469,8 +469,10 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n         num_wrong_votes,\n         num_bury_votes,\n         num_unwanted_votes,\n-        num_times_read)\n+        num_times_read,\n \n+        smtp_msg_id_prefix_c\n+        )\n       values (\n         ?, ?, ?, ?, ?, ?, ?, ?,\n         ?, ?,\n@@ -483,7 +485,8 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n         ?, ?, ?,\n         ?, ?,\n         ?, ?, ?,\n-        ?, ?, ?, ?, ?)\"\"\"\n+        ?, ?, ?, ?, ?,\n+        ?)\"\"\"\n \n     val values = List[AnyRef](\n       siteId.asAnyRef, post.id.asAnyRef, post.extImpId.orNullVarchar, post.pageId, post.nr.asAnyRef,\n@@ -537,7 +540,10 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n       post.numWrongVotes.asAnyRef,\n       post.numBuryVotes.asAnyRef,\n       post.numUnwantedVotes.asAnyRef,\n-      post.numTimesRead.asAnyRef)\n+      post.numTimesRead.asAnyRef,\n+\n+      post.smtpMsgIdPrefix.orNullVarchar,\n+      )\n \n     runUpdate(statement, values)\n   }\n@@ -597,7 +603,9 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n         num_wrong_votes = ?,\n         num_bury_votes = ?,\n         num_unwanted_votes = ?,\n-        num_times_read = ?\n+        num_times_read = ?,\n+\n+        smtp_msg_id_prefix_c = ?\n \n       where site_id = ? and unique_post_id = ?\"\"\"\n \n@@ -655,6 +663,8 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n       post.numUnwantedVotes.asAnyRef,\n       post.numTimesRead.asAnyRef,\n \n+      post.smtpMsgIdPrefix.orNullVarchar,\n+\n       siteId.asAnyRef, post.id.asAnyRef)\n \n     runUpdate(statement, values)\n@@ -708,7 +718,9 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n       numWrongVotes = rs.getInt(\"NUM_WRONG_VOTES\"),\n       numBuryVotes = rs.getInt(\"NUM_BURY_VOTES\"),\n       numUnwantedVotes = rs.getInt(\"NUM_UNWANTED_VOTES\"),\n-      numTimesRead = rs.getInt(\"NUM_TIMES_READ\"))\n+      numTimesRead = rs.getInt(\"NUM_TIMES_READ\"),\n+      smtpMsgIdPrefix = getOptString(rs, \"smtp_msg_id_prefix_c\"),\n+      )\n   }\n \n "
    },
    {
      "sha": "5c92d8fd62a248c63f6215587785b173d14737f6",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/Rdb.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdb.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdb.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdb.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -412,6 +412,12 @@ object Rdb {\n     Some(javaArray.to[Vec].map(_.toInt))\n   }\n \n+  def getOptTrustLevel(rs: js.ResultSet, column: St): Opt[TrustLevel] = {\n+    val asInt = rs.getInt(column)\n+    if (rs.wasNull()) None\n+    else TrustLevel.fromInt(asInt)\n+  }\n+\n   def isUniqueConstrViolation(sqlException: js.SQLException): Boolean = {\n     // This status code means \"A violation of the constraint imposed\n     // by a unique index or a unique constraint occurred\"."
    },
    {
      "sha": "9238261142a7e46a08219f0ca5a46111ae30b2c5",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSiteTransaction.scala",
      "status": "modified",
      "additions": 101,
      "deletions": 12,
      "changes": 113,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSiteTransaction.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -161,6 +161,12 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n   }\n \n \n+  def makeSqlArrayOfStringsUniqueNullIfEmpty(values: Iterable[St]): AnyRef = {\n+    if (values.isEmpty) NullArray\n+    else makeSqlArrayOfStringsUnique(values)\n+  }\n+\n+\n   def makeSqlArrayOfStringsUnique(values: Iterable[String]): js.Array = {\n     val distinctValues = values.toVector.sorted.distinct\n     theOneAndOnlyConnection.createArrayOf(\"varchar\", distinctValues.toArray[Object])\n@@ -958,28 +964,67 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n     require(email.secretStatus.isEmptyOr(SecretStatus.Valid))\n     require(email.numRepliesBack.isEmptyOr(0))\n \n-    val vals = List(\n+    val vals = ArrayBuffer(\n           siteId.asAnyRef,\n           email.id,\n           email.tyype.toInt.asAnyRef,\n           email.sentTo,\n           email.toUserId.orNullInt,\n           email.sentFrom.orNullVarchar,\n+          NullInt, // later: byPatId\n           d2ts(email.createdAt),\n           email.subject,\n           email.bodyHtmlText,\n+          email.smtpMsgId.orNullVarchar,\n+          email.inReplyToSmtpMsgId.orNullVarchar,\n+          makeSqlArrayOfStringsUniqueNullIfEmpty(email.referencesSmtpMsgIds),\n           email.secretValue.orNullVarchar,\n           email.secretStatus.map(_.toInt).orNullInt)\n \n-    runUpdateSingleRow(\"\"\"\n-      insert into emails_out3(\n-        SITE_ID, ID, TYPE, SENT_TO, TO_USER_ID,\n-        sent_from_c,\n-        CREATED_AT, SUBJECT, BODY_HTML,\n-        secret_value_c, secret_status_c)\n-      values (\n-        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n-      \"\"\", vals)\n+    val aboutFields: St = email.aboutWhat match {\n+      case None => \"\"\n+      case Some(aboutWhat) => aboutWhat match {\n+        case aboutPost: EmailAbout.Post =>\n+          vals += aboutPost.catId.orNullInt32\n+          vals += aboutPost.pageId\n+          vals += aboutPost.postId.asAnyRef\n+          vals += aboutPost.postNr.asAnyRef\n+          vals += aboutPost.parentNr.orNullInt32\n+          \"\"\",\n+              about_cat_id_c,\n+              about_page_id_str_c,\n+              about_post_id_c,\n+              about_post_nr_c,\n+              about_parent_nr_c\"\"\"\n+\n+        // case ... =>  // later, also:\n+        //    about_pat_id_c,\n+        //    about_tag_id_c,\n+      }\n+    }\n+\n+    val statement = s\"\"\"\n+          insert into emails_out3(\n+              SITE_ID,\n+              ID,\n+              TYPE,\n+              SENT_TO,\n+              TO_USER_ID,\n+              sent_from_c,\n+              by_pat_id_c,\n+              CREATED_AT,\n+              subject,\n+              body_html,\n+              smtp_msg_id_c,\n+              smtp_in_reply_to_c,\n+              smtp_references_c,\n+              secret_value_c,\n+              secret_status_c${\n+              aboutFields})\n+          values (\n+              ${ makeInListFor(vals) }) \"\"\"\n+\n+      runUpdateSingleRow(statement, vals.toList)\n   }\n \n \n@@ -1074,6 +1119,27 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n   }\n \n \n+  def loadEmailsToPatAboutThread(toPatId: PatId, pageId: PageId,\n+        parentPostNr: Opt[PostNr], limit: i32): ImmSeq[EmailOut] = {\n+    // For now, just load all emails about the page, starting with oldest first so\n+    // we'll for sure load the notf about the page itself.\n+    SHOULD // always load the first email, and the, say, last 9 — so that the SMTP\n+    // 'References' header can refer to the first email about the page, and\n+    // the last 9 (but not the maybe 100 in between, could be many, if is a chat).\n+    val query = s\"\"\"\n+          select * from emails_out3\n+          where site_id = ?\n+            and to_user_id = ?\n+            and about_page_id_str_c = ?\n+          order by created_at\n+          limit $limit \"\"\"\n+\n+    val values = List(siteId.asAnyRef, toPatId.asAnyRef, pageId)\n+\n+    runQueryFindMany(query, values, getEmail)\n+  }\n+\n+\n   private def getEmail(rs: ResultSet): Email = {\n     val emailId = rs.getString(\"id\")\n     val emailTypeInt = rs.getInt(\"type\")\n@@ -1087,17 +1153,40 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n       sentOn = getOptionalDate(rs, \"sent_on\"),\n       sentFrom = getOptString(rs, \"sent_from_c\"),\n       createdAt = getDate(rs, \"created_at\"),\n+      aboutWhat = _getEmailAbout(rs),\n       subject = rs.getString(\"subject\"),\n       bodyHtmlText = rs.getString(\"body_html\"),\n-      providerEmailId = Option(rs.getString(\"provider_email_id\")),\n-      failureText = Option(rs.getString(\"failure_text\")),\n+      smtpMsgId = getOptString(rs, \"smtp_msg_id_c\"),\n+      inReplyToSmtpMsgId = getOptString(rs, \"smtp_in_reply_to_c\"),\n+      referencesSmtpMsgIds = getOptArrayOfStrings(rs, \"smtp_references_c\") getOrElse Nil,\n+      providerEmailId = getOptString(rs, \"provider_email_id\"),\n+      failureText = getOptString(rs, \"failure_text\"),\n       secretValue = getOptString(rs, \"secret_value_c\"),\n       secretStatus = getOptInt(rs, \"secret_status_c\").flatMap(SecretStatus.fromInt),\n       numRepliesBack = getOptInt(rs, \"num_replies_back_c\"),\n       canLoginAgain = getOptBool(rs, \"can_login_again\"))\n   }\n \n \n+  private def _getEmailAbout(rs: ResultSet): Opt[EmailAbout] = Some {\n+    val pageId: PageId = getOptString(rs, \"about_page_id_str_c\") getOrElse {\n+      return None\n+    }\n+    // Then this email is about a post — since  about_page_id_str_c was defined\n+    // (the way Ty works now).\n+    val postId: PostId = getOptInt32(rs, \"about_post_id_c\") getOrDie \"TyE0POSTNR0385\"\n+    val postNr: PostNr = getOptInt32(rs, \"about_post_nr_c\") getOrDie \"TyE0POSID0385\"\n+    val parentNr: Opt[PostNr] = getOptInt32(rs, \"about_parent_nr_c\")\n+    val catId: Opt[CatId] = getOptInt32(rs, \"about_cat_id_c\")\n+    EmailAbout.Post(\n+          pageId = pageId,\n+          postId = postId,\n+          postNr = postNr,\n+          parentNr = parentNr,\n+          catId = catId)\n+  }\n+\n+\n   def forgetEmailSentToAddress(userId: UserId, replaceWithAddr: String) {\n     TESTS_MISSING\n     val statement = \"\"\""
    },
    {
      "sha": "c6101b5c1468fede97ed1afe5b89edf632823179",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -588,6 +588,7 @@ class RdbSystemTransaction(\n         n.site_id, n.notf_id, n.notf_type, n.created_at,\n         n.about_post_id_c, n.about_page_id_str_c, n.action_type, n.action_sub_id,\n         n.by_user_id, n.to_user_id,\n+        n.smtp_msg_id_prefix_c,\n         n.email_id, n.email_status, n.seen_at\n       from notifications3 n inner join users3 u\n         on n.site_id = u.site_id\n@@ -618,10 +619,16 @@ class RdbSystemTransaction(\n         (where, \"\", vals)\n       case (None, None) =>\n         // Load notfs for which emails perhaps are to be sent, for all tenants.\n+        // Need to sort by oldest first, so, when a newer notf is considered,\n+        // we know for which older notfs emails were sent, and can reference\n+        // such emails in the SMTP 'References' header.  [older_notfs_emails]\n+        // But maybe should [avoid_glob_seq_nrs].\n         val where =\n           o\"\"\"n.email_status = ${NotfEmailStatus.Undecided.toInt}\n              and n.created_at <= ?\"\"\"\n-        val orderBy = \"order by n.created_at asc\"\n+        // n.created_at might be the same for many? If using a start-of transaction timestamp.\n+        // But notf_id is 1, 2, 3, ... .\n+        val orderBy = \"order by n.notf_id asc\"\n         val someMinsAgo = new ju.Date(now.millis - delayMinsOpt.get.toLong * 60 * 1000)\n         val vals = someMinsAgo::Nil\n         (where, orderBy, vals)\n@@ -630,19 +637,18 @@ class RdbSystemTransaction(\n     }\n \n     val query = s\"$baseQueryOpenPara $moreWhere ) $orderBy limit $limit\"\n-    var notfsByTenant =\n-       Map[SiteId, Vector[Notification]]().withDefaultValue(Vector.empty)\n+    var notfsBySiteId = Map[SiteId, Vec[Notification]]().withDefaultValue(Vector.empty)\n \n     runQuery(query, values, rs => {\n       while (rs.next) {\n         val siteId = rs.getInt(\"site_id\")\n         val notf = getNotification(rs)\n-        val notfsForTenant: Vector[Notification] = notfsByTenant(siteId)\n-        notfsByTenant = notfsByTenant + (siteId -> (notfsForTenant :+ notf))\n+        val notfsForSite: Vec[Notification] = notfsBySiteId(siteId)\n+        notfsBySiteId = notfsBySiteId + (siteId -> (notfsForSite :+ notf))\n       }\n     })\n \n-    notfsByTenant\n+    notfsBySiteId\n   }\n \n "
    },
    {
      "sha": "92ea952ada2b72883b33ac7236afba2b007a15ce",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbUtil.scala",
      "status": "modified",
      "additions": 50,
      "deletions": 3,
      "changes": 53,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -203,13 +203,21 @@ object RdbUtil {\n       primary_email_addr,\n       summary_email_interval_mins,\n       summary_email_if_active,\n+      about,\n+      website,\n       avatar_tiny_base_url,\n       avatar_tiny_hash_path,\n       avatar_small_base_url,\n       avatar_small_hash_path,\n       ui_prefs,\n+      may_see_my_activity_tr_lv_c,\n+      may_mention_me_tr_lv_c,\n+      may_dir_msg_me_tr_lv_c,\n+      why_may_not_mention_msg_me_html_c,\n       max_upload_bytes_c,\n-      allowed_upload_extensions_c\n+      allowed_upload_extensions_c,\n+      deactivated_at,\n+      deleted_at\n       \"\"\"\n \n \n@@ -241,6 +249,10 @@ object RdbUtil {\n       |u.avatar_small_base_url,\n       |u.avatar_small_hash_path,\n       |u.ui_prefs, ${\"\" /* WOULD exclude here, if had time to micro optimize */}\n+      |u.may_see_my_activity_tr_lv_c,\n+      |u.may_mention_me_tr_lv_c,\n+      |u.may_dir_msg_me_tr_lv_c,\n+      |u.why_may_not_mention_msg_me_html_c,\n       |u.max_upload_bytes_c,${\"\"          /* would excl  */}\n       |u.allowed_upload_extensions_c,${\"\" /* would excl  */}\n       |u.is_owner u_is_owner,\n@@ -310,6 +322,7 @@ object RdbUtil {\n         tinyAvatar = tinyAvatar,\n         smallAvatar = smallAvatar,\n         uiPrefs = getOptJsObject(rs, \"ui_prefs\"),\n+        privPrefs = getPrivPrefs(rs),\n         perms = perms,\n         summaryEmailIntervalMins = None,\n         summaryEmailIfActive = None,\n@@ -325,6 +338,7 @@ object RdbUtil {\n       emailNotfPrefs = emailNotfPrefs,\n       emailVerifiedAt = getOptionalDate(rs, \"u_email_verified_at\"),\n       passwordHash = Option(rs.getString(\"u_password_hash\")),\n+      privPrefs = getPrivPrefs(rs),\n       tinyAvatar = tinyAvatar,\n       smallAvatar = smallAvatar,\n       isApproved = getOptBool(rs, \"u_is_approved\"),\n@@ -354,6 +368,7 @@ object RdbUtil {\n       tinyAvatar = getAnyUploadRef(rs, \"avatar_tiny_base_url\", \"avatar_tiny_hash_path\"),\n       smallAvatar = getAnyUploadRef(rs, \"avatar_small_base_url\", \"avatar_small_hash_path\"),\n       uiPrefs = getOptJsObject(rs, \"ui_prefs\"),\n+      privPrefs = getPrivPrefs(rs),\n       perms = perms,\n       summaryEmailIntervalMins = getOptInt(rs, \"summary_email_interval_mins\"),\n       summaryEmailIfActive = getOptBool(rs, \"summary_email_if_active\"),\n@@ -386,14 +401,34 @@ object RdbUtil {\n     |email_verified_at,\n     |password_hash,\n     |email_for_every_new_post,\n-    |may_see_my_activity_tr_lv_c,\n     |avatar_tiny_base_url,\n     |avatar_tiny_hash_path,\n     |avatar_small_base_url,\n     |avatar_small_hash_path,\n     |avatar_medium_base_url,\n     |avatar_medium_hash_path,\n     |ui_prefs,\n+    |may_search_engines_index_me_c,\n+    |may_see_my_username_tr_lv_c,\n+    |may_see_my_full_name_tr_lv_c,\n+    |may_see_my_tiny_avatar_tr_lv_c,\n+    |may_see_my_medium_avatar_tr_lv_c,\n+    |may_see_my_brief_bio_tr_lv_c,\n+    |may_see_my_full_bio_tr_lv_c,\n+    |may_see_my_profile_tr_lv_c,\n+    |may_see_me_in_lists_tr_lv_c,\n+    |may_see_if_im_online_tr_lv_c,\n+    |may_see_my_activity_tr_lv_c,\n+    |may_see_my_visit_stats_tr_lv_c,\n+    |may_see_my_post_stats_tr_lv_c,\n+    |may_see_my_approx_stats_tr_lv_c,\n+    |may_see_my_exact_stats_tr_lv_c,\n+    |may_find_me_by_email_tr_lv_c,\n+    |may_follow_me_tr_lv_c,\n+    |may_mention_me_tr_lv_c,\n+    |may_mention_me_same_disc_tr_lv_c,\n+    |may_dir_msg_me_tr_lv_c,\n+    |why_may_not_mention_msg_me_html_c,\n     |is_approved,\n     |approved_at,\n     |approved_by_id,\n@@ -486,7 +521,7 @@ object RdbUtil {\n       country = getOptString(rs, \"country\"),\n       website = getOptString(rs, \"website\"),\n       about = getOptString(rs, \"about\"),\n-      seeActivityMinTrustLevel = getOptInt(rs, \"may_see_my_activity_tr_lv_c\").flatMap(TrustLevel.fromInt),\n+      privPrefs = getPrivPrefs(rs),\n       isApproved = getOptionalBoolean(rs, \"is_approved\"),\n       reviewedAt = getOptionalDate(rs, \"approved_at\"),\n       reviewedById = getOptInt(rs, \"approved_by_id\"),\n@@ -505,6 +540,16 @@ object RdbUtil {\n       deletedAt = getOptWhen(rs, \"deleted_at\"))\n   }\n \n+\n+  def getPrivPrefs(rs: js.ResultSet): MemberPrivacyPrefs = {\n+    MemberPrivacyPrefs(\n+          seeActivityMinTrustLevel = getOptTrustLevel(rs, \"may_see_my_activity_tr_lv_c\"),\n+          maySendMeDmsTrLv = getOptTrustLevel(rs, \"may_dir_msg_me_tr_lv_c\"),\n+          mayMentionMeTrLv = getOptTrustLevel(rs, \"may_mention_me_tr_lv_c\"),\n+          )\n+  }\n+\n+\n   val UserStatsSelectListItems: String = i\"\"\"\n     |snooze_notfs_until,\n     |last_seen_at,\n@@ -630,6 +675,7 @@ object RdbUtil {\n     val actionSubId = getOptionalInt(rs, \"action_sub_id\")\n     val byUserId = rs.getInt(\"by_user_id\")\n     val toUserId = rs.getInt(\"to_user_id\")\n+    val smtpMsgIdPrefix = getOptString(rs, \"smtp_msg_id_prefix_c\")\n     val emailId = Option(rs.getString(\"email_id\"))\n     val emailStatusInt = rs.getInt(\"email_status\")\n     val emailStatus = NotfEmailStatus.fromInt(emailStatusInt).getOrDie(\n@@ -650,6 +696,7 @@ object RdbUtil {\n           uniquePostId = uniquePostId,\n           byUserId = byUserId,\n           toUserId = toUserId,\n+          smtpMsgIdPrefix = smtpMsgIdPrefix,\n           emailId = emailId,\n           emailStatus = emailStatus,\n           seenAt = seenAt)"
    },
    {
      "sha": "b356d8edae940b063bf268a22cf43e8e3578494c",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/UserSiteDaoMixin.scala",
      "status": "modified",
      "additions": 138,
      "deletions": 111,
      "changes": 249,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -154,7 +154,7 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   }\n \n \n-  def loadGroupMembers(groupId: UserId): Vector[Participant] = {\n+  def loadGroupMembers(groupId: UserId): Vector[Member] = {\n     // In e2e test: TyT4AWJL208R\n     groupId match {\n       case Group.AdminsId =>\n@@ -179,9 +179,9 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n \n \n   private def loadMembersOfBuiltInGroup(\n-        adminsOnly: Boolean = false, modsOnly: Boolean = false, staffOnly: Boolean = false,\n-        everyone: Boolean = false,\n-        builtInGroup: Option[UserId] = None): Vector[Participant] = {\n+        adminsOnly: Bo = false, modsOnly: Bo = false, staffOnly: Bo = false,\n+        everyone: Bo = false,\n+        builtInGroup: Opt[GroupId] = None): Vec[Member] = {\n \n     import Group.{AdminsId, ModeratorsId => ModsId}\n \n@@ -221,14 +221,12 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n         and ($conditions)\"\"\"\n \n     runQueryFindMany(query, values.toList, rs => {\n-      val user = getParticipant(rs)\n-      dieIf(user.isGuest, \"TyE5ABK20A2\")\n-      user\n+      getParticipant(rs).toMemberOrThrowCode(\"TyE5ABK20A2\")\n     })\n   }\n \n \n-  private def loadMembersOfCustomGroup(groupId: UserId): Vector[Participant] = {\n+  private def loadMembersOfCustomGroup(groupId: GroupId): Vector[Member] = {\n     val values = ArrayBuffer[AnyRef](siteId.asAnyRef, groupId.asAnyRef)\n \n     val query = s\"\"\"\n@@ -243,9 +241,7 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n       \"\"\"\n \n     runQueryFindMany(query, values.toList, rs => {\n-      val user = getParticipant(rs)\n-      dieIf(user.isGuest, \"TyE603KRJL\")\n-      user\n+      getParticipant(rs).toMemberOrThrowCode(\"TyE603KRJL\")\n     })\n   }\n \n@@ -331,35 +327,42 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n \n   def insertGroup(group: Group) {\n     val sql = \"\"\"\n-      insert into users3(\n-        site_id,\n-        user_id,\n-        ext_id,\n-        username,\n-        full_name,\n-        created_at,\n-        summary_email_interval_mins,\n-        summary_email_if_active,\n-        -- grants_trust_level,  — later\n-        ui_prefs,\n-        max_upload_bytes_c,\n-        allowed_upload_extensions_c,\n-        is_group)\n-      values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, true)\n-      \"\"\"\n+          insert into users3(\n+            site_id,\n+            user_id,\n+            ext_id,\n+            username,\n+            full_name,\n+            created_at,\n+            summary_email_interval_mins,\n+            summary_email_if_active,\n+            -- grants_trust_level,  — later\n+            ui_prefs,\n+            may_see_my_activity_tr_lv_c,\n+            may_mention_me_tr_lv_c,\n+            may_dir_msg_me_tr_lv_c,\n+            max_upload_bytes_c,\n+            allowed_upload_extensions_c,\n+            is_group)\n+          values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, true) \"\"\"\n+\n     val values = List(\n-      siteId.asAnyRef,\n-      group.id.asAnyRef,\n-      group.extId.orNullVarchar,\n-      group.theUsername,\n-      group.name.orNullVarchar,\n-      group.createdAt.asTimestamp,\n-      group.summaryEmailIntervalMins.orNullInt,\n-      group.summaryEmailIfActive.orNullBoolean,\n-      //group.grantsTrustLevel.map(_.toInt).orNullInt,\n-      group.uiPrefs.orNullJson,\n-      group.perms.maxUploadBytes.orNullInt,\n-      group.perms.allowedUplExts.orNullVarchar)\n+          siteId.asAnyRef,\n+          group.id.asAnyRef,\n+          group.extId.orNullVarchar,\n+          group.theUsername,\n+          group.name.orNullVarchar,\n+          group.createdAt.asTimestamp,\n+          group.summaryEmailIntervalMins.orNullInt,\n+          group.summaryEmailIfActive.orNullBoolean,\n+          //group.grantsTrustLevel.map(_.toInt).orNullInt,\n+          group.uiPrefs.orNullJson,\n+          group.privPrefs.seeActivityMinTrustLevel.map(_.toInt).orNullInt,\n+          group.privPrefs.mayMentionMeTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.maySendMeDmsTrLv.map(_.toInt).orNullInt,\n+          group.perms.maxUploadBytes.orNullInt,\n+          group.perms.allowedUplExts.orNullVarchar)\n+\n     runUpdateExactlyOneRow(sql, values)\n   }\n \n@@ -394,24 +397,30 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n         summary_email_if_active = ?,\n         -- grants_trust_level = ?,  — later\n         ui_prefs = ?,\n+        may_see_my_activity_tr_lv_c = ?,\n+        may_mention_me_tr_lv_c = ?,\n+        may_dir_msg_me_tr_lv_c = ?,\n         max_upload_bytes_c = ?,\n         allowed_upload_extensions_c = ?\n       where site_id = ?\n         and user_id = ?\n       \"\"\"\n \n     val values = List(\n-      group.extId.orNullVarchar,\n-      group.anyName.orNullVarchar,\n-      group.theUsername,\n-      group.summaryEmailIntervalMins.orNullInt,\n-      group.summaryEmailIfActive.orNullBoolean,\n-      //group.grantsTrustLevel.map(_.toInt).orNullInt,\n-      group.uiPrefs.orNullJson,\n-      group.perms.maxUploadBytes.orNullInt,\n-      group.perms.allowedUplExts.orNullVarchar,\n-      siteId.asAnyRef,\n-      group.id.asAnyRef)\n+          group.extId.orNullVarchar,\n+          group.anyName.orNullVarchar,\n+          group.theUsername,\n+          group.summaryEmailIntervalMins.orNullInt,\n+          group.summaryEmailIfActive.orNullBoolean,\n+          //group.grantsTrustLevel.map(_.toInt).orNullInt,\n+          group.uiPrefs.orNullJson,\n+          group.privPrefs.seeActivityMinTrustLevel.map(_.toInt).orNullInt,\n+          group.privPrefs.mayMentionMeTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.maySendMeDmsTrLv.map(_.toInt).orNullInt,\n+          group.perms.maxUploadBytes.orNullInt,\n+          group.perms.allowedUplExts.orNullVarchar,\n+          siteId.asAnyRef,\n+          group.id.asAnyRef)\n \n     try runUpdateSingleRow(statement, values)\n     catch {\n@@ -426,6 +435,8 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n     val builtInGroups = ppt match {\n       case _: Guest | UnknownParticipant => return Vector(Group.EveryoneId)\n       case u: User => getBuiltInGroupIdsForUser(u)\n+      case u: UserInclDetails => getBuiltInGroupIdsForUser(u)\n+      case _: UserBase => die(\"TyE26MP431\", \"Should see User or UserInclDetails before UserBase\")\n       case g: Group => getBuiltInGroupIdsForGroup(g)\n     }\n \n@@ -454,7 +465,7 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   }\n \n \n-  private def getBuiltInGroupIdsForUser(member: User): Vector[UserId] = {\n+  private def getBuiltInGroupIdsForUser(member: UserBase): Vector[UserId] = {\n     val G = Group\n \n     if (member.isAdmin)\n@@ -585,12 +596,14 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n             IS_APPROVED, APPROVED_AT, APPROVED_BY_ID,\n             IS_OWNER, IS_ADMIN, IS_MODERATOR,\n             about, website, country,\n+            ui_prefs,\n             may_see_my_activity_tr_lv_c,\n+            may_mention_me_tr_lv_c, may_dir_msg_me_tr_lv_c,\n             trust_level, locked_trust_level, threat_level, locked_threat_level,\n             deactivated_at, deleted_at)\n         values (\n-            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n-            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n+            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n+            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n         \"\"\",\n         List[AnyRef](\n           siteId.asAnyRef,\n@@ -614,7 +627,10 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n           user.about.trimOrNullVarchar,\n           user.website.trimOrNullVarchar,\n           user.country.trimOrNullVarchar,\n-          user.seeActivityMinTrustLevel.map(_.toInt).orNullInt,\n+          user.uiPrefs.orNullJson,\n+          user.privPrefs.seeActivityMinTrustLevel.map(_.toInt).orNullInt,\n+          user.privPrefs.mayMentionMeTrLv.map(_.toInt).orNullInt,\n+          user.privPrefs.maySendMeDmsTrLv.map(_.toInt).orNullInt,\n           user.trustLevel.toInt.asAnyRef,\n           user.lockedTrustLevel.map(_.toInt).orNullInt,\n           user.threatLevel.toInt.asAnyRef,\n@@ -638,17 +654,11 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   }\n \n \n-  def loadUserByPrimaryEmailOrUsername(emailOrUsername: String): Option[User] = {\n+  def loadUserByPrimaryEmailOrUsername(emailOrUsername: String): Opt[UserBr] = {\n     loadMemberByPrimaryEmailOrUsernameImpl(emailOrUsername, maybeEmail = true).map(_.toUserOrThrow)\n   }\n \n \n-  def loadMemberByUsername(username: String): Option[Member] = {\n-    dieIf(username contains '@', \"TyE2ABKJ40\", s\"Got an email address\")\n-    loadMemberByPrimaryEmailOrUsernameImpl(username, maybeEmail = false)\n-  }\n-\n-\n   private def loadMemberByPrimaryEmailOrUsernameImpl(emailOrUsername: St, maybeEmail: Bo)\n         : Opt[Member] = {\n     val values = MutArrBuf[AnyRef](siteId.asAnyRef, emailOrUsername)\n@@ -676,29 +686,30 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   }\n \n \n-  def loadUserInclDetailsBySsoId(ssoId: String): Option[UserInclDetails] = {\n-    loadMemberInclDetailsImpl(\"sso_id\", ssoId)\n+  def loadUserInclDetailsBySsoId(ssoId: St): Opt[UserVb] = {\n+    loadMemberInclDetailsImpl(\"sso_id\", ssoId).map(_.toUserVbOrThrow)\n   }\n \n \n-  def loadUserInclDetailsByExtId(externalId: String): Option[UserInclDetails] = {\n-    loadMemberInclDetailsImpl(\"ext_id\", externalId)\n+  def loadUserInclDetailsByExtId(externalId: St): Opt[UserVb] = {\n+    loadMemberInclDetailsImpl(\"ext_id\", externalId).map(_.toUserVbOrThrow)\n   }\n \n \n-  def loadUserInclDetailsByEmailAddr(emailAddress: String): Option[UserInclDetails] = {\n-    loadMemberInclDetailsImpl(\"primary_email_addr\", emailAddress)\n+  def loadUserInclDetailsByEmailAddr(emailAddress: St): Opt[UserVb] = {\n+    loadMemberInclDetailsImpl(\"primary_email_addr\", emailAddress).map(_.toUserVbOrThrow)\n   }\n \n \n-  def loadMemberInclDetailsImpl(columnName: String, value: AnyRef): Option[UserInclDetails] = {\n+  def loadMemberInclDetailsImpl(columnName: St, value: AnyRef): Opt[MemberVb] = {\n     val query = s\"\"\"\n       select $CompleteUserSelectListItemsWithUserId\n-      from users3 u\n-      where u.site_id = ?\n-        and u.$columnName = ?\n-        and u.user_id >= $LowestTalkToMemberId\"\"\"\n-    runQueryFindOneOrNone(query, List(siteId.asAnyRef, value.asAnyRef), getUserInclDetails)\n+      from users3\n+      where site_id = ?\n+        and $columnName = ?\n+        and user_id >= $LowestTalkToMemberId\"\"\"\n+    runQueryFindOneOrNone(query, List(siteId.asAnyRef, value.asAnyRef), rs =>\n+          getMemberInclDetails(rs))\n   }\n \n \n@@ -828,53 +839,61 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   }\n \n \n-  def loadMemberInclDetailsByUsername(username: String): Option[MemberInclDetails] = {\n-    loadMemberOrGroupInclDetailsImpl(\"lower(username)\", username.toLowerCase)\n+  def loadMemberVbByUsername(username: Username): Opt[MemberVb] = {\n+    dieIf(username contains '@', \"TyEUSRNMISEML\", s\"Got an email address, not a username\")\n+    _loadMemberVbByFieldValue(\"lower(username)\", username.toLowerCase)\n   }\n \n \n-  def loadMemberInclDetailsById(userId: UserId): Option[MemberInclDetails] = {\n+  def loadMemberInclDetailsById(userId: UserId): Option[MemberVb] = {\n     require(Participant.isRoleId(userId), \"DwE5FKE2\")\n-    loadMemberOrGroupInclDetailsImpl(\"user_id\", userId.asAnyRef)\n+    _loadMemberVbByFieldValue(\"user_id\", userId.asAnyRef)\n   }\n \n \n-  def loadOwner(): Option[UserInclDetails] = {\n-    loadMemberOrGroupInclDetailsImpl(\"is_owner\", true.asAnyRef) map {\n-      case member: UserInclDetails => member\n-      case group: Group => die(\"EdE2QYTK05\", s\"Owner ${group.id}@$siteId is a group\")\n+  SHOULD // allow many owners, and load many instead of just one here.\n+  def loadOwner(): Opt[UserVb] = {\n+    _loadMemberVbByFieldValue(\"is_owner\", true.asAnyRef) map {\n+      case u: UserVb => u\n+      case x => die(\"TyEOWNRTYPE\", s\"Owner ${x.id}@$siteId is a ${classNameOf(x)}\")\n     }\n   }\n \n \n-  private def loadMemberOrGroupInclDetailsImpl(field: String, value: AnyRef)\n-        : Option[MemberInclDetails] = {\n-    val sql = s\"\"\"\n-      select $CompleteUserSelectListItemsWithUserId\n-      from users3\n-      where site_id = ? and $field = ?\n-      \"\"\"\n-    runQueryFindOneOrNone(sql, List(siteId.asAnyRef, value), rs => {\n-      getMemberInclDetails(rs)\n-    })\n+  private def _loadMemberVbByFieldValue(field: St, value: AnyRef): Opt[MemberVb] = {\n+    val membs = _loadMembersVbByFieldValues(field, Vec(value))\n+    dieIf(membs.size > 1, \"TyE603JSEJWQ\", o\"\"\"Column pats_t.$field isn't unique,\n+          found ${membs.size} members, expected 0 or 1\"\"\")\n+    membs.headOption\n   }\n \n \n-  def loadMembersAndGroupsInclDetailsById(userIds: Iterable[UserId])\n-        : immutable.Seq[MemberInclDetails] = {\n-    if (userIds.isEmpty) return Nil\n+  def loadMembersVbById(userIds: Iterable[MembId]): immutable.Seq[MemberVb] = {\n+    dieIf(userIds exists Participant.isGuestId, \"TyE54032RKJ56\")\n+    _loadMembersVbByFieldValues(\"user_id\", userIds.map(_.asAnyRef))\n+  }\n+\n+\n+  private def _loadMembersVbByFieldValues(field: St, values: Iterable[AnyRef]): ImmSeq[MemberVb] = {\n+    if (values.isEmpty) return Vec.empty\n     val query = s\"\"\"\n       select $CompleteUserSelectListItemsWithUserId\n       from users3\n-      where site_id = ? and user_id in (${makeInListFor(userIds)})\n-      \"\"\"\n-    val values = siteId.asAnyRef :: userIds.toList.map(_.asAnyRef)\n-    runQueryFindMany(query, values, rs => {\n+      where site_id = ?\n+        and $field in (${makeInListFor(values)})\n+        and user_id >= $LowestNonGuestId \"\"\"\n+\n+    runQueryFindMany(query, siteId.asAnyRef :: values.toList, rs => {\n       getMemberInclDetails(rs)\n     })\n   }\n \n \n+  def loadMembersVbByUsername(usernames: Iterable[Username]): ImmSeq[MembVb] = {\n+    _loadMembersVbByFieldValues(\"lower(username)\", usernames.map(_.toLowerCase))\n+  }\n+\n+\n   def loadParticipantsInclDetailsByIdsAsMap_wrongGuestEmailNotfPerf(\n         ids: Iterable[UserId]): immutable.Map[UserId, ParticipantInclDetails] = {\n     loadParticipantsInclDetails_wrongGuestEmailNotfPerf_Impl[UserId](\n@@ -1069,14 +1088,16 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n         country = ?,\n         website = ?,\n         about = ?,\n-        may_see_my_activity_tr_lv_c = ?,\n         avatar_tiny_base_url = ?,\n         avatar_tiny_hash_path = ?,\n         avatar_small_base_url = ?,\n         avatar_small_hash_path = ?,\n         avatar_medium_base_url = ?,\n         avatar_medium_hash_path = ?,\n         ui_prefs = ?,\n+        may_see_my_activity_tr_lv_c = ?,\n+        may_mention_me_tr_lv_c = ?,\n+        may_dir_msg_me_tr_lv_c = ?,\n         is_approved = ?,\n         approved_at = ?,\n         approved_by_id = ?,\n@@ -1111,14 +1132,16 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n       user.country.trimOrNullVarchar,\n       user.website.trimOrNullVarchar,\n       user.about.trimOrNullVarchar,\n-      user.seeActivityMinTrustLevel.map(_.toInt).orNullInt,\n       user.tinyAvatar.map(_.baseUrl).orNullVarchar,\n       user.tinyAvatar.map(_.hashPath).orNullVarchar,\n       user.smallAvatar.map(_.baseUrl).orNullVarchar,\n       user.smallAvatar.map(_.hashPath).orNullVarchar,\n       user.mediumAvatar.map(_.baseUrl).orNullVarchar,\n       user.mediumAvatar.map(_.hashPath).orNullVarchar,\n       user.uiPrefs.orNullJson,\n+      user.privPrefs.seeActivityMinTrustLevel.map(_.toInt).orNullInt,\n+      user.privPrefs.mayMentionMeTrLv.map(_.toInt).orNullInt,\n+      user.privPrefs.maySendMeDmsTrLv.map(_.toInt).orNullInt,\n       user.isApproved.orNullBoolean,\n       user.reviewedAt.orNullTimestamp,\n       user.reviewedById.orNullInt,\n@@ -1175,24 +1198,28 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   //\n   def listUsernamesOnPage(pageId: PageId): Seq[NameAndUsername] = {\n     val sql = \"\"\"\n-      select distinct u.user_id, u.full_name, u.USERNAME\n+      select distinct\n+          u.user_id,\n+          u.full_name,\n+          u.USERNAME,\n+          u.may_mention_me_tr_lv_c,\n+          u.why_may_not_mention_msg_me_html_c\n       from posts3 p inner join users3 u\n          on p.SITE_ID = u.SITE_ID\n         and p.CREATED_BY_ID = u.USER_ID\n         and u.USERNAME is not null\n       where p.SITE_ID = ? and p.PAGE_ID = ?\"\"\"\n     val values = List(siteId.asAnyRef, pageId)\n-    val result = ArrayBuffer[NameAndUsername]()\n-    db.queryAtnms(sql, values, rs => {\n-      while (rs.next()) {\n-        val userId = rs.getInt(\"user_id\")\n-        val fullName = Option(rs.getString(\"full_name\")) getOrElse \"\"\n-        val username = rs.getString(\"USERNAME\")\n-        dieIf(username eq null, \"DwE5BKG1\")\n-        result += NameAndUsername(userId, fullName = fullName, username = username)\n-      }\n+    runQueryFindMany(sql, values, rs => {\n+      val userId = rs.getInt(\"user_id\")\n+      val fullName = Option(rs.getString(\"full_name\")) getOrElse \"\"\n+      val username = rs.getString(\"USERNAME\")\n+      val mayMentionMeTrLv = getOptTrustLevel(rs, \"may_mention_me_tr_lv_c\")\n+      val _whyMayNot = getOptString(rs, \"why_may_not_mention_msg_me_html_c\")\n+      dieIf(username eq null, \"DwE5BKG1\")\n+      NameAndUsername(\n+            id = userId, fullName = fullName, username = username, mayMentionMeTrLv)\n     })\n-    result.to[immutable.Seq]\n   }\n \n "
    },
    {
      "sha": "7aa3dd86212ead8af54630cfcb450ed6b2884d81",
      "filename": "appsv/server/controllers/InviteController.scala",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FInviteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FInviteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FInviteController.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -76,6 +76,10 @@ class InviteController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       \"TyE703SKHFLD2\", o\"\"\"Can only invite to one single group, for now —\n       but you specified ${addToGroupsAtUsernames.length} groups.\"\"\")\n \n+    // For now, only admins can add to groups. Also see [who_may_invite] below.\n+    throwForbiddenIf(addToGroupsAtUsernames.nonEmpty && !requester.isAdmin,\n+          \"TyEMAY0ADDGRP\", \"Only admins can add users to groups, via invites\")\n+\n     // (Min length + 1 for the '@'.)\n     addToGroupsAtUsernames.find(_.length < Participant.MinUsernameLength + 1).foreach(atName =>\n       throwForbidden(\"TyE393RKR4\", s\"Bad group name: $atName\"))\n@@ -86,19 +90,20 @@ class InviteController @Inject()(cc: ControllerComponents, edContext: TyContext)\n         \"TyE06RKHZHN3\", s\"Group usernames should be prefixed by '@', but this is not: '$atUsername'\")\n       val username = atUsername drop 1\n       dao.readOnlyTransaction { tx =>\n-        val member = tx.loadMemberByUsername(username).getOrThrowBadArgument(\n+        val member = tx.loadMemberVbByUsername(username).getOrThrowBadArgument(\n           \"TyE204KARTGF_\", \"addToGroup\", s\"Group not found: @$username\")\n         member match {\n-          case u: User =>\n-            throwForbidden(\"TyE305MKSTR2_\", s\"User @$username is a user, not a group\")\n-          case g: Group =>\n+          case g: GroupVb =>\n             // Later, do allow this? Need to write a bit extra code to properly init\n             // trust levels and is-admin and is-mod flags, then. [305FDF4R]\n             def cannotInviteTo(what: String) =\n               s\"Cannot invite to $what groups, but this is a $what group: @$username\"\n             throwForbiddenIf(g.isBuiltIn, \"TyE6WG20GV_\", cannotInviteTo(\"built-in\"))\n             throwForbiddenIf(g.isStaff, \"TyE4FKS2PDHJ\", cannotInviteTo(\"staff\"))\n             g\n+          case x =>\n+            throwForbidden(\"TyE305MKSTR2_\",\n+                  s\"User @$username is a ${classNameOf(x)}, but should be a group\")\n         }\n       }\n     }\n@@ -145,7 +150,7 @@ class InviteController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       }\n     }\n \n-    // Right now, only for staff and core members. [5WBJAF2]\n+    // Right now, only for staff and core members. [who_may_invite]\n     throwForbiddenIf(!requester.isStaffOrCoreMember,\n        \"TyE403INA0\", \"Currently only staff and core members may send invites\")\n "
    },
    {
      "sha": "e550bda58069a9d10037c8e96288a5c5cddd179e",
      "filename": "appsv/server/controllers/PageController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FPageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FPageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FPageController.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -325,7 +325,7 @@ class PageController @Inject()(cc: ControllerComponents, edContext: TyContext)\n           request =>\n     import request.{dao, theRequesterId}\n     val pageId = (request.body \\ \"removePageIdFromRecent\").as[PageId]\n-    val anyChangedWatchbar = dao.removeFromWatchbarRecent(Set(pageId), theRequesterId)\n+    val anyChangedWatchbar = dao.removeFromWatchbarRecent(Set(pageId), request.authzCtxWithReqer)\n     replyWithWatchbar(anyChangedWatchbar, dao)\n   }\n "
    },
    {
      "sha": "980d4c09cd2b04a9326bb21be40af8b93a7e2d5d",
      "filename": "appsv/server/controllers/ReplyController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FReplyController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FReplyController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FReplyController.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -86,6 +86,8 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     // throwNoUnless(Authz.mayPostReply(authzContext, postType, \"EdEZBXK3M2\")\n \n     // For now, don't follow links in replies. COULD rel=follow if all authors + editors = trusted.\n+    // (Here, and at other calls to forBodyOrComment(), is a better place to remember\n+    // whom to mention — so the author will know for sure; compare with: [filter_mentions].)\n     val postRenderSettings = dao.makePostRenderSettings(pageMeta.pageType)\n     val textAndHtml = dao.textAndHtmlMaker.forBodyOrComment(\n       text,"
    },
    {
      "sha": "70e3a8c84f235bcf8457547d40906846e8accc0d",
      "filename": "appsv/server/controllers/ResetPasswordController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FResetPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FResetPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FResetPasswordController.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -99,7 +99,7 @@ class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: TyC\n         }\n         else {\n           // Usernames are publicly visible.\n-          // Unless user is unlisted?  [unlist_users]  Not impl.\n+          // Unless user is private / name hidden?  [private_pats]  Not impl.\n           val settings = dao.getWholeSiteSettings()\n           val notify = !settings.userMustBeAuthenticated\n           logger.info(o\"\"\"s$siteId: Not sending password reset email to non-existing"
    },
    {
      "sha": "5490d955afd42b4a33add354526e7417643c9682",
      "filename": "appsv/server/controllers/UserController.scala",
      "status": "modified",
      "additions": 69,
      "deletions": 42,
      "changes": 111,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FUserController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FUserController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FUserController.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -116,8 +116,8 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n     var (userJson, anyStatsJson, pat) = Try(who.toInt).toOption match {\n       case Some(id) => loadPatJsonAnyDetailsById(id, includeStats = true, request)\n-      case None => loadMemberOrGroupJsonInclDetailsByEmailOrUsername(\n-        who, includeStats = true, request)\n+      case None => loadMemberJsonInclDetailsByEmailOrUsername(\n+                                who, includeStats = true, request)\n     }\n     val groupsMaySee = dao.getGroupsReqrMaySee(requesterOrUnknown)\n     val pptGroupIdsMaybeRestr = dao.getOnesGroupIds(pat)\n@@ -187,7 +187,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n \n   // A tiny bit dupl code [5YK02F4]\n-  private def loadMemberOrGroupJsonInclDetailsByEmailOrUsername(emailOrUsername: String,\n+  private def loadMemberJsonInclDetailsByEmailOrUsername(emailOrUsername: String,\n         includeStats: Boolean, request: DebikiRequest[_])\n         : (JsObject, JsValue, Participant) = {\n     val callerIsStaff = request.user.exists(_.isStaff)\n@@ -202,8 +202,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       throwNotImplemented(\"EsE5KY02\", \"Lookup by email not implemented\")\n \n     request.dao.readOnlyTransaction { tx =>\n-      val memberOrGroup =\n-            tx.loadMemberInclDetailsByUsername(emailOrUsername) getOrElse {\n+      val member = tx.loadMemberVbByUsername(emailOrUsername) getOrElse {\n         if (isEmail)\n           throwNotFound(\"EsE4PYW20\", \"User not found\")\n \n@@ -226,18 +225,20 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n         }) getOrElse throwNotFound(\"EsE8PKU02\", \"User not found\")\n       }\n \n-      val groups = tx.loadGroups(memberOrGroup)\n+      // Later, check if the requester may see the member. [private_pats]\n \n-      memberOrGroup match {\n-        case member: UserInclDetails =>\n-          val stats = includeStats ? tx.loadUserStats(member.id) | None\n-          val callerIsUserHerself = request.user.exists(_.id == member.id)\n+      val groups = tx.loadGroups(member)\n+\n+      member match {\n+        case user: UserVb =>\n+          val stats = includeStats ? tx.loadUserStats(user.id) | None\n+          val callerIsUserHerself = request.user.exists(_.id == user.id)\n           val isStaffOrSelf = callerIsStaff || callerIsUserHerself\n           val userJson = JsUserInclDetails(\n-            member, Map.empty, groups, callerIsAdmin = callerIsAdmin,\n+            user, Map.empty, groups, callerIsAdmin = callerIsAdmin,\n             callerIsStaff = callerIsStaff, callerIsUserHerself = callerIsUserHerself)\n-          (userJson, stats.map(JsUserStats(_, isStaffOrSelf)).getOrElse(JsNull), member.noDetails)\n-        case group: Group =>\n+          (userJson, stats.map(JsUserStats(_, isStaffOrSelf)).getOrElse(JsNull), user.noDetails)\n+        case group: GroupVb =>\n           val groupJson = jsonForGroupInclDetails(\n             group, callerIsAdmin = callerIsAdmin, callerIsStaff = callerIsStaff)\n           (groupJson, JsNull, group)\n@@ -254,6 +255,14 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       //\"createdAtEpoch\" -> JsWhen(group.createdAt),\n       \"username\" -> group.theUsername,\n       \"fullName\" -> JsStringOrNull(group.name))\n+\n+    // These currently needs to be public, so others get to know if they cannot\n+    // mention or message this user. [some_pub_priv_prefs]\n+    val privPrefs = group.privPrefs\n+    json = json.addAnyInt32(\"maySendMeDmsTrLv\", privPrefs.maySendMeDmsTrLv)\n+    json = json.addAnyInt32(\"mayMentionMeTrLv\", privPrefs.mayMentionMeTrLv)\n+    json = json.addAnyInt32(\"seeActivityMinTrustLevel\", privPrefs.seeActivityMinTrustLevel)\n+\n     if (callerIsStaff) {\n       json += \"summaryEmailIntervalMins\" -> JsNumberOrNull(group.summaryEmailIntervalMins)\n       json += \"summaryEmailIfActive\" -> JsBooleanOrNull(group.summaryEmailIfActive)\n@@ -463,7 +472,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   private def throwForbiddenIfActivityPrivate(\n           userId: UserId, requester: Opt[Pat], dao: SiteDao): U = {\n     // Also browser side [THRACTIPRV]\n-    // Related idea: [unlist_users].\n+    // Related idea: [private_pats].\n     throwForbiddenIf(!maySeeActivity(userId, requester, dao),\n           \"TyE4JKKQX3\", \"Not allowed to list activity for this user\")\n   }\n@@ -479,7 +488,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       return true\n \n     val memberInclDetails = dao.loadTheMemberInclDetailsById(userId)\n-    memberInclDetails.seeActivityMinTrustLevel match {\n+    memberInclDetails.privPrefs.seeActivityMinTrustLevel match {\n       case None => true\n       case Some(minLevel) =>\n         requester.exists(_.effectiveTrustLevel.toInt >= minLevel.toInt)\n@@ -1421,17 +1430,19 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n \n   private def listAllUsersImpl(usernamePrefix: String, request: ApiRequest[_]): JsArray = {\n+    import request.requester\n     // Also load deleted anon12345 members. Simpler, and they'll typically be very few or none. [5KKQXA4]\n     // ... stop doing that?\n     val members = request.dao.loadUsersWithUsernamePrefix(\n       usernamePrefix, caseSensitive = false, limit = 50)\n     JsArray(\n       members map { member =>\n         // [PUB_API] .ts: ListUsersApiResponse, ListGroupsApiResponse, ListMembersApiResponse\n-        Json.obj(\n-          \"id\" -> member.id,\n-          \"username\" -> member.username,\n-          \"fullName\" -> member.fullName)\n+        val jOb = Json.obj(\n+              \"id\" -> member.id,\n+              \"username\" -> member.username,\n+              \"fullName\" -> member.fullName)\n+        _plusAnyNotMention(requester, member.privPrefs.mayMentionMeTrLv, jOb)\n       })\n   }\n \n@@ -1441,7 +1452,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     */\n   def listUsernames(pageId: PageId, prefix: St): Action[U] = GetActionRateLimited(\n           RateLimits.ReadsFromDb, MinAuthnStrength.EmbeddingStorageSid12) { request =>\n-    import request.dao\n+    import request.{dao, requester}\n \n     val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdE4Z0B8P5\")\n     val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n@@ -1459,27 +1470,52 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)), \"EdEZBXKSM2\")\n \n     // Also load deleted anon12345 members. Simpler, and they'll typically be very few or none. [5KKQXA4]\n+    COULD // load groups too, so it'll be simpler to e.g. mention @support.\n+    // But this lists names on a page, but groups won't reply, so won't get listed. Hmm.\n+    // Maybe if one has typed >= 3 chars matching any group's or user's username, then,\n+    // show that group/user, also if hen hasn't replied on this page?\n+    // Or maybe two lists: People on this page, and all others?\n+    // There could even be a group setting: [mentions_prio_c], which admins can raise,\n+    // for their @support group — maybe then it'd get listed directly if just typing ' @'?\n     val names = dao.listUsernames(\n       pageId = pageId, prefix = prefix, caseSensitive = false, limit = 50)\n \n     val json = JsArray(\n       names map { nameAndUsername =>\n-        Json.obj(\n-          \"id\" -> nameAndUsername.id,\n-          \"username\" -> nameAndUsername.username,\n-          \"fullName\" -> nameAndUsername.fullName)\n+        val jOb = Json.obj(\n+              \"id\" -> nameAndUsername.id,\n+              \"username\" -> nameAndUsername.username,\n+              \"fullName\" -> nameAndUsername.fullName)\n+        _plusAnyNotMention(requester, nameAndUsername.mayMentionMeTrLv, jOb)\n       })\n     OkSafeJson(json)\n   }\n \n \n+  /** This is just for client side UX. The server side checks are here: [filter_mentions].\n+    */\n+  private def _plusAnyNotMention(reqer: Opt[Pat], mayMentionMeTrLv: Opt[TrustLevel],\n+          jOb: JsObject): JsObject = {\n+    // Later: [private_pats] If the requester may not see the listed member, remove hen\n+    // from the list instead of adding mayMention: flase.\n+    var res = jOb\n+    mayMentionMeTrLv foreach { minLevel =>\n+      if (!reqer.exists(_.effectiveTrustLevel.isAtLeast(minLevel))) {\n+        res += \"mayMention\" -> JsFalse\n+        //s += \"whyNotMention\" -> \" ...\" // later\n+      }\n+    }\n+    res\n+  }\n+\n+\n   /** maxBytes = 3000 because the about text might be fairly long.\n     */\n   def saveAboutMemberPrefs: Action[JsValue] = PostJsonAction(RateLimits.ConfigUser,\n         maxBytes = 3000) { request =>\n     val prefs = aboutMemberPrefsFromJson(request.body)\n-    throwUnlessMayEditPrefs(prefs.userId, request.theRequester)\n-    request.dao.saveAboutMemberPrefs(prefs, request.who)\n+    _quickThrowUnlessMayEditPrefs(prefs.userId, request.theRequester)\n+    request.dao.saveAboutMemberPrefsIfAuZ(prefs, request.who)\n \n     // Try to reuse: [load_pat_stats_grps]\n     val (patJson, _, _) = loadPatJsonAnyDetailsById(\n@@ -1590,20 +1626,19 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n   def saveMemberPrivacyPrefs: Action[JsValue] = PostJsonAction(RateLimits.ConfigUser,\n         maxBytes = 100) { request =>\n-    val prefs: MemberPrivacyPrefs = memberPrivacyPrefsFromJson(request.body)\n-    throwUnlessMayEditPrefs(prefs.userId, request.theRequester)\n-    request.dao.saveMemberPrivacyPrefs(prefs, request.who)\n+    val userId = parseInt32(request.body, \"userId\")\n+    val prefs: MemberPrivacyPrefs = JsX.memberPrivacyPrefsFromJson(request.body)\n+    _quickThrowUnlessMayEditPrefs(userId, request.theRequester)\n+    request.dao.saveMemberPrivacyPrefsIfAuZ(forUserId = userId, prefs, byWho = request.who)\n \n     // Try to reuse: [load_pat_stats_grps]\n-    val (patJson, _, _) = loadPatJsonAnyDetailsById(\n-          prefs.userId, includeStats = false, request)\n+    val (patJson, _, _) = loadPatJsonAnyDetailsById(userId, includeStats = false, request)\n     OkSafeJson(Json.obj(\"patNoStatsNoGroupIds\" -> patJson))\n   }\n \n \n-  private def throwUnlessMayEditPrefs(userId: UserId, requester: Participant): Unit = {\n-    // There's a check elsewhere  [mod_0_conf_adm] that mods cannot\n-    // change admins' preferences.\n+  private def _quickThrowUnlessMayEditPrefs(userId: UserId, requester: Participant): Unit = {\n+    // There's a check elsewhere  [mod_0_conf_adm] that mods cannot change admins' preferences.\n     val staffOrSelf = requester.isStaff || requester.id == userId\n     throwForbiddenIf(!staffOrSelf, \"TyE5KKQSFW0\", \"May not edit other people's preferences\")\n     throwForbiddenIf(userId < LowestTalkToMemberId,\n@@ -1692,13 +1727,5 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     // ----------------------------------------------------\n   }\n \n-\n-  private def memberPrivacyPrefsFromJson(json: JsValue): MemberPrivacyPrefs = {\n-    val anySeeActivityInt = (json \\ \"seeActivityMinTrustLevel\").asOpt[Int]\n-    MemberPrivacyPrefs(\n-      userId = (json \\ \"userId\").as[UserId],\n-      seeActivityMinTrustLevel = anySeeActivityInt.flatMap(TrustLevel.fromInt))\n-  }\n-\n }\n "
    },
    {
      "sha": "2626986ad817ddfe28b1c61a576bdd9f2f79e982",
      "filename": "appsv/server/controllers/ViewPageController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -249,9 +249,10 @@ class ViewPageController @Inject()(cc: ControllerComponents, edContext: TyContex\n   def markPageAsSeen(pageId: PageId): Action[JsValue] = PostJsonAction(NoRateLimits,\n         MinAuthnStrength.EmbeddingStorageSid12, maxBytes = 2) { request =>\n     CHECK_AUTHN_STRENGTH\n-    val watchbar = request.dao.getOrCreateWatchbar(request.theUserId)\n-    val newWatchbar = watchbar.markPageAsSeen(pageId)\n-    request.dao.saveWatchbar(request.theUserId, newWatchbar)\n+    request.dao.getAnyWatchbar(request.theReqerId) foreach { watchbar =>\n+      val newWatchbar = watchbar.markPageAsSeen(pageId)\n+      request.dao.saveWatchbar(request.theUserId, newWatchbar)\n+    }\n     Ok\n   }\n "
    },
    {
      "sha": "2671a76e7f8e1ed22ed2e33074ca7e9c2b3278e5",
      "filename": "appsv/server/debiki/MailerActor.scala",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2FMailerActor.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2FMailerActor.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FMailerActor.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -489,6 +489,24 @@ class MailerActor(\n         apacheCommonsEmail.setFrom(fromAddr, fromName, \"UTF-8\")\n     }\n \n+    // (We generate these message ids ourselves; they don't include any weird chars.)\n+    email.smtpMsgId.foreach(id => apacheCommonsEmail.addHeader(\"Message-ID\", s\"<$id>\"))\n+    email.inReplyToSmtpMsgId.foreach(id => apacheCommonsEmail.addHeader(\"In-Reply-To\", s\"<$id>\"))\n+    if (email.referencesSmtpMsgIds.nonEmpty) {\n+      // There's a max header length: 998 chars, see https://www.rfc-editor.org/rfc/rfc5322\n+      // from year 2008:\n+      //   > Each line of characters MUST be no more than 998 characters, and\n+      //   > SHOULD be no more than 78 characters\n+      // (That RFC supersedes RFC 2822 from year 2001, which supersedes RFC 822\n+      // from year 1982 about ARPA Internet text messages.)\n+      //\n+      // Let's wrap the lines, so we won't run into that 998 limit. To show that a line\n+      // is the continuation of the header value on the previous line, one adds\n+      // some leading whitespace — that's what  \"\\r\\n  \" does, here:\n+      val refSt = email.referencesSmtpMsgIds.mkString(start = \"<\", sep = \">\\r\\n  <\", end = \">\")\n+      apacheCommonsEmail.addHeader(\"References\", refSt)\n+    }\n+\n     // The address a human (hens email client) should reply to.  This is different\n     // from the address the SMTP servers would return the email to, if there are\n     // problems: they instead return the email to the 'MAIL FROM:some@addr.ess'"
    },
    {
      "sha": "236ed5542be45a3e1b377e547294ceb07a7a29bc",
      "filename": "appsv/server/debiki/Nashorn.scala",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2FNashorn.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2FNashorn.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FNashorn.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -28,6 +28,7 @@ import Nashorn._\n import jdk.nashorn.api.scripting.ScriptObjectMirror\n import org.scalactic.{Bad, ErrorMessage, Good, Or}\n import talkyard.server.TyLogging\n+import talkyard.server.rendr.NashornParams\n import scala.collection.mutable.ArrayBuffer\n \n \n@@ -197,15 +198,11 @@ class Nashorn(\n   }\n \n \n-  def renderAndSanitizeCommonMark(\n-        commonMarkSource: String,\n-        siteIdHostnames: SiteIdHostnames,\n-        embeddedOriginOrEmpty: String,\n-        allowClassIdDataAttrs: Boolean,\n-        followLinks: Boolean): RenderCommonmarkResult = {\n+  def renderAndSanitizeCommonMark(commonMarkSource: St, renderParams: NashornParams)\n+          : RenderCommonmarkResult = {\n \n-    val siteId = siteIdHostnames.id\n-    val pubSiteId = siteIdHostnames.pubId\n+    val siteId = renderParams.siteIdHostnames.id\n+    val pubSiteId = renderParams.siteIdHostnames.pubId\n \n     if (isTestSoDisableScripts)\n       return RenderCommonmarkResult(\"Scripts disabled [EsM5GY52]\", Set.empty)\n@@ -234,7 +231,7 @@ class Nashorn(\n \n     val uploadsUrlPrefix =\n       cdnOrigin.getOrElse(\n-        embeddedOriginOrEmpty) +\n+        renderParams.embeddedOriginOrEmpty) +\n            talkyard.server.UploadsUrlBasePath + pubSiteId + '/'\n \n     // This link preview renderer fetches previews from the database,\n@@ -251,8 +248,11 @@ class Nashorn(\n     val (safeHtmlNoPreviews, mentions) = withJavascriptEngine(engine => {\n       val resultObj: Object = engine.invokeFunction(\"renderAndSanitizeCommonMark\",\n             commonMarkSource,\n-            true.asInstanceOf[Object], // allowClassIdDataAttrs.asInstanceOf[Object],\n-            followLinks.asInstanceOf[Object],\n+            true.asInstanceOf[Object],  // was: renderParams.allowClassIdDataAttrs\n+            renderParams.followLinks.asInstanceOf[Object],\n+            // renderParams.mayMention  // Later? [filter_mentions] @Mentions that didn't\n+                                        // generate any notifications could get another\n+                                        // color, e.g. dark gray not blue?\n             prevwRenderer, uploadsUrlPrefix)\n \n       val result: ScriptObjectMirror = resultObj match {"
    },
    {
      "sha": "aaab86a8f73d8cfdb29d1eee0a0526692402abdc",
      "filename": "appsv/server/debiki/ReactJson.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2FReactJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2FReactJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FReactJson.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -21,7 +21,7 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import controllers.ForumController\n import debiki.dao._\n-import talkyard.server.authz.{Authz, ForumAuthzContext}\n+import talkyard.server.authz.{Authz, ForumAuthzContext, AuthzCtxOnAllWithReqer}\n import talkyard.server.http._\n import talkyard.server.security.{SidStatus, SidOk}\n import java.{lang => jl, util => ju}\n@@ -801,10 +801,12 @@ class JsonMaker(dao: SiteDao) {\n       return None\n     }\n \n-    val permissions = pageRequest.authzContext.tooManyPermissions\n-    val permsOnSiteTooMany = dao.getPermsOnSiteForEveryone()\n+    val authzCtx: AuthzCtxOnAllWithReqer = pageRequest.authzCtxOnAllWithReqer.get\n+    val permissions = authzCtx.tooManyPermissions\n+    val permsOnSiteTooMany = dao.getPermsOnSiteForEveryone()  // backw compat\n+\n+    var watchbar: BareWatchbar = dao.getOrCreateWatchbar(authzCtx)\n \n-    var watchbar: BareWatchbar = dao.getOrCreateWatchbar(requester.id)\n     if (pageRequest.pageExists) {\n       // (See comment above about ought-to-rename this whole function / stuff.)\n       RACE // if the user opens a page, and someone adds her to a chat at the same time.\n@@ -814,8 +816,8 @@ class JsonMaker(dao: SiteDao) {\n \n           // Double check we may see the page(s) we're adding to the watchbar. [WATCHSEC]\n           SEC_TESTS_MISSING // TyT602KRGJG\n-          val (maySee, debugCode) = dao.maySeePageUseCache(\n-                pageRequest.thePageMeta, Some(requester))\n+          val (maySee, debugCode) = dao.maySeePageUseCacheAndAuthzCtx(\n+                pageRequest.thePageMeta, authzCtx)\n           if (!maySee)\n             dao.context.security.throwIndistinguishableNotFound(debugCode)\n \n@@ -840,17 +842,17 @@ class JsonMaker(dao: SiteDao) {\n \n \n   def userNoPageToJson(request: DebikiRequest[_]): Opt[MeAndStuff] = Some {\n-    import request.authzContext\n     require(request.dao == dao, \"TyE4JK5WS2\")\n-    val requester = request.user getOrElse {\n+    val authzContext: AuthzCtxOnAllWithReqer = request.authzCtxOnAllWithReqer getOrElse {\n       return None\n     }\n+    val requester = authzContext.theReqer\n     val permissions = authzContext.tooManyPermissions\n-    val permsOnSiteTooMany = dao.getPermsOnSiteForEveryone()\n-    val watchbar = dao.getOrCreateWatchbar(requester.id)\n+    val permsOnSiteTooMany = dao.getPermsOnSiteForEveryone()  // backw compat\n+    val watchbar = dao.getOrCreateWatchbar(authzContext)\n     val watchbarWithTitles = dao.fillInWatchbarTitlesEtc(watchbar)\n     val myGroupsEveryoneLast: Seq[Group] =\n-      request.authzContext.groupIdsEveryoneLast map dao.getTheGroup\n+          authzContext.groupIdsEveryoneLast map dao.getTheGroup\n \n     val site = if (requester.isStaffOrCoreMember) dao.getSite else None\n "
    },
    {
      "sha": "3539dcd47933a1f11ae1fda47180698becbe636c",
      "filename": "appsv/server/debiki/TextAndHtml.scala",
      "status": "modified",
      "additions": 43,
      "deletions": 18,
      "changes": 61,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2FTextAndHtml.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2FTextAndHtml.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FTextAndHtml.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -19,6 +19,7 @@ package debiki\n \n import com.debiki.core._\n import com.debiki.core.Prelude._\n+import talkyard.server.rendr.{RenderParams, NashornParams}\n import org.scalactic.{ErrorMessage, Or}\n import play.api.libs.json.JsArray\n import scala.collection.{immutable, mutable}\n@@ -288,8 +289,24 @@ object TextAndHtmlMaker {   MOVE // to just  TextAndHtml\n \n \n /** Thread safe.\n+  *\n+  * COULD pass mayMention: Map[Username, Bo] to here, and render usernames that\n+  * couldn't be mentioned in bold gray link color, and those who were mentioned\n+  * and notified, in blue?  So the reader sees at a glance, if the @mentioned_person\n+  * was notified or not?  But let's wait, is a bit complicated (since would\n+  * require 2 passes over the commonmark: one to find mentions and and lookup may-mention,\n+  * and another to process the commonmark whilst *using* that info. See [filter_mentions].\n+  *\n+  * And a link map too — to show which ones should be rel=follow, nofollow,\n+  * or not links at all (if suspicious). [filter_links]\n   */\n-class TextAndHtmlMaker(val site: SiteIdHostnames, nashorn: Nashorn) {\n+class TextAndHtmlMaker(\n+  val site: SiteIdHostnames,\n+  nashorn: Nashorn,\n+  val mayMention: Set[Username] => Map[Username, Bo] = _ => Map.empty.withDefaultValue(true)\n+  // Later:\n+  // val mayLink: LinkMaybeBad => MayLink_unused, — as a map?\n+  ) {\n \n   private class TextAndHtmlImpl(\n     val text: String,\n@@ -306,9 +323,9 @@ class TextAndHtmlMaker(val site: SiteIdHostnames, nashorn: Nashorn) {\n \n     def append(text: String): TextAndHtml = {\n       append(new TextAndHtmlMaker(site = site, nashorn).apply(\n-        text, embeddedOriginOrEmpty = embeddedOriginOrEmpty,\n-        followLinks = followLinks,\n-        allowClassIdDataAttrs = allowClassIdDataAttrs))\n+        text, RenderParams(embeddedOriginOrEmpty = embeddedOriginOrEmpty,\n+                followLinks = followLinks,\n+                allowClassIdDataAttrs = allowClassIdDataAttrs)))\n     }\n \n     def append(moreTextAndHtml: TextAndHtml): TextAndHtml = {\n@@ -370,31 +387,39 @@ class TextAndHtmlMaker(val site: SiteIdHostnames, nashorn: Nashorn) {\n \n   def forBodyOrComment(text: String, embeddedOriginOrEmpty: String = \"\",\n         followLinks: Boolean = false, allowClassIdDataAttrs: Boolean = false): TextAndHtml =\n-    apply(text, embeddedOriginOrEmpty = embeddedOriginOrEmpty,\n-          followLinks = followLinks, allowClassIdDataAttrs = allowClassIdDataAttrs)\n+    apply(text, RenderParams(\n+          embeddedOriginOrEmpty = embeddedOriginOrEmpty,\n+          followLinks = followLinks, allowClassIdDataAttrs = allowClassIdDataAttrs))\n \n   // COULD escape all CommonMark so becomes real plain text\n   def forBodyOrCommentAsPlainTextWithLinks(text: String): TextAndHtml =\n-    apply(text, embeddedOriginOrEmpty = \"\",\n-          followLinks = false, allowClassIdDataAttrs = false)\n+    apply(text, RenderParams(embeddedOriginOrEmpty = \"\",\n+          followLinks = false, allowClassIdDataAttrs = false))\n \n   def forHtmlAlready(html: String): TextAndHtml = {\n     findLinksEtc(html, RenderCommonmarkResult(html, Set.empty),\n         embeddedOriginOrEmpty = \"\",\n         followLinks = false, allowClassIdDataAttrs = false)\n   }\n \n-  private def apply(\n-    text: String,\n-    embeddedOriginOrEmpty: String,\n-    followLinks: Boolean,\n-    allowClassIdDataAttrs: Boolean): TextAndHtml = {\n-\n+  private def apply(text: St, renderParams: RenderParams): TextAndHtml = {\n+    // Later, if doing this in an external process / VM,  [ext_markup_processor]\n+    // then, might need to do two passes: 1) first to find all @mentioned_usernames\n+    // and links, and looking up those usernames and see which names\n+    // the post author may mention, and looking up the linked-to domains\n+    // and see which links should be no/follow or even just plain text, and\n+    // then 2) a second pass with mayMention and mayLinkTo included.\n+    // [filter_mentions] [filter_links]\n     val renderResult = nashorn.renderAndSanitizeCommonMark(\n-          text, site, embeddedOriginOrEmpty = embeddedOriginOrEmpty,\n-          allowClassIdDataAttrs = allowClassIdDataAttrs, followLinks = followLinks)\n-    findLinksEtc(text, renderResult, embeddedOriginOrEmpty = embeddedOriginOrEmpty,\n-          followLinks = followLinks, allowClassIdDataAttrs = allowClassIdDataAttrs)\n+          text, NashornParams(\n+                  site,\n+                  embeddedOriginOrEmpty = renderParams.embeddedOriginOrEmpty,\n+                  allowClassIdDataAttrs = renderParams.allowClassIdDataAttrs,\n+                  followLinks = renderParams.followLinks,\n+                  mayMention))  // later: mayLinkTo, too\n+    findLinksEtc(text, renderResult, embeddedOriginOrEmpty = renderParams.embeddedOriginOrEmpty,\n+          followLinks = renderParams.followLinks,\n+          allowClassIdDataAttrs = renderParams.allowClassIdDataAttrs)\n   }\n \n "
    },
    {
      "sha": "7a506c99a52bf8b0ad1e411ff147f17cf781e6b2",
      "filename": "appsv/server/debiki/dao/MessagesDao.scala",
      "status": "modified",
      "additions": 72,
      "deletions": 29,
      "changes": 101,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FMessagesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FMessagesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FMessagesDao.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -19,7 +19,7 @@ package debiki.dao\n \n import com.debiki.core._\n import com.debiki.core.Prelude._\n-import debiki.EdHttp.throwForbidden\n+import debiki.EdHttp.{throwForbidden, throwForbiddenIf}\n import talkyard.server.pubsub\n import debiki.{TextAndHtml, TitleSourceAndHtml}\n \n@@ -32,43 +32,65 @@ trait MessagesDao {\n     * gets auto added to the page? [5KTE02Z]\n     */\n   def startGroupTalk(title: TitleSourceAndHtml, body: TextAndHtml, pageRole: PageType,\n-        toUserIds: Set[UserId], sentByWho: Who, spamRelReqStuff: SpamRelReqStuff,\n+        // RENAME toMemIds to toMemberIds, and  MemId  to MembId\n+        toMemIds: Set[MemId], sentByWho: Who, spamRelReqStuff: SpamRelReqStuff,\n         deleteDraftNr: Option[DraftNr]): PagePathWithId = {\n \n     if (!pageRole.isPrivateGroupTalk)\n       throwForbidden(\"EsE5FKU02\", s\"Not a private group talk page role: $pageRole\")\n \n     // The system user can send (internally, from within the server), but not receive, messages.\n-    if (toUserIds.contains(SystemUserId))\n+    if (toMemIds.contains(SystemUserId))\n       throwForbidden(\"EsE2WUY0\", \"Cannot send messages to the System user\")\n \n-    if (toUserIds.exists(_ <= MaxGuestId))\n+    if (toMemIds.exists(_ <= MaxGuestId))\n       throwForbidden(\"EsE6UPY2\", \"Cannot send messages to guests\")\n \n     val sentById = sentByWho.id\n     if (sentById <= MaxGuestId)\n       throwForbidden(\"EsE5JGKU9\", \"Guests cannot send messages\")\n \n-    if (toUserIds.contains(sentById))\n+    if (toMemIds.contains(sentById))\n       throwForbidden(\"EsE6GK0I2\", o\"\"\"Cannot send a message to yourself. You are: $sentById,\n-          sending to: ${ toUserIds.mkString(\", \") }\"\"\")\n+          sending to: ${ toMemIds.mkString(\", \") }\"\"\")\n+\n+    throwForbiddenIf(toMemIds.exists(id => Group.EveryoneId <= id && id <= Group.FullMembersId),\n+          \"TyEMSGMANY\", o\"\"\"Cannot direct-message groups Everyone, Basic and Full Members.\n+          But you can post a forum topic instead?\"\"\")\n \n     quickCheckIfSpamThenThrow(sentByWho, body, spamRelReqStuff)\n \n-    val (pagePath, notfs, sender) = writeTx { (tx, staleStuff) =>\n+    // ----- Database\n+\n+    val (pagePath, notfs, sender, toMemsInclGroupMems: Set[Member]) = writeTx { (tx, staleStuff) =>\n       val sender = loadUserAndLevels(sentByWho, tx)\n+      val toMembers = tx.loadParticipants(toMemIds).map(_.toMemberOrThrowCode(\"DM-MEMB\"))\n \n       // 1) Don't let unpolite users start private-messaging other well behaved users.\n       // But do let them talk with staff, e.g. ask \"why am I not allowed to ...\".\n       // 2) TrustLevle.New members haven't spent much time at the site, and it's a bit risky to\n       // let them start sending PMs directly.\n       if ((sender.threatLevel.toInt >= ThreatLevel.ModerateThreat.toInt ||\n           sender.trustLevel.isStrangerOrNewMember) && !sender.isStaff) {\n-        val toUsers = tx.loadParticipants(toUserIds)\n-        if (toUsers.exists(!_.isStaff))\n+        if (toMembers.exists(!_.isStaff))\n           throwForbidden(\"EsE8GY2F4_\", \"You may send direct messages to staff only\")\n       }\n \n+      TESTS_MISSING // [server_blocks_dms]  — No, now impl? Here:\n+      // Tests:\n+      //  - block-dir-msgs.2br.d  TyTBLOCKDIRMSGS\n+      val mayNotMessage = toMembers.filter(!sender.user.mayMessage(_))\n+      throwForbiddenIf(mayNotMessage.nonEmpty, \"EsEMAY0MSG\",\n+            s\"You cannot send direct messages to: ${\n+            mayNotMessage.map(_.atUsernameOrFullName).mkString(\", \")}\")\n+\n+      val toGroups: ImmSeq[Group] = toMembers collect { case g: Group => g }\n+      // [sub_groups] Would load sub group members, recursively?\n+      val toUsersViaGroups: ImmSeq[Member] = toGroups.map(_.id) flatMap tx.loadGroupMembers\n+      val toUsersDirectly: ImmSeq[User] = toMembers collect { case u: User => u }\n+      val toMemsInclGroupMems: Set[Member] =\n+            toUsersDirectly.toSet ++ toUsersViaGroups.toSet ++ toGroups.toSet\n+\n       // This generates no review task — staff aren't asked to review and approve\n       // direct messages; such messages can be semi private.\n       val (pagePath, bodyPost, _) = createPageImpl(\n@@ -80,48 +102,69 @@ trait MessagesDao {\n \n       // If this is a private topic, they'll get notified about all posts,\n       // by default, although no notf pref configured here. [PRIVCHATNOTFS]\n-      (toUserIds + sentById) foreach { userId =>\n-        tx.insertMessageMember(pagePath.pageId, userId,\n-          addedById = sentById)\n+      // Soome of toMemIds might be groups — then, the group members can see\n+      // the private topic, and get notified about replies.\n+      (toMemIds + sentById) foreach { memId =>\n+        tx.insertMessageMember(pagePath.pageId, memId, addedById = sentById)\n       }\n \n       AUDIT_LOG // missing\n \n       val notifications =\n         if (pageRole.isChat) {\n-          unimplementedIf(toUserIds.nonEmpty, \"EsE7PKW02\")\n+          unimplementedIf(toMemIds.nonEmpty, \"EsE7PKW02\")\n           Notifications.None\n         }\n         else {\n-          notfGenerator(tx).generateForMessage(sender.user, bodyPost, toUserIds)\n+          // This skips users who have blocked DM:s.\n+          COULD_OPTIMIZE // Somehow reuse toMemsInclGroupMems?\n+          notfGenerator(tx).generateForMessage(sender.user, bodyPost, toMemIds)\n         }\n \n       deleteDraftNr.foreach(nr => tx.deleteDraft(sentByWho.id, nr))\n \n       tx.saveDeleteNotifications(notifications)\n-      (pagePath, notifications, sender)\n+      (pagePath, notifications, sender, toMemsInclGroupMems)\n     }\n \n-    (toUserIds + sentById) foreach { userId =>\n-      RACE // [WATCHBRACE]\n-      var watchbar: BareWatchbar = getOrCreateWatchbar(userId)\n-      val hasSeenIt = userId == sender.id\n-      watchbar = watchbar.addPage(pagePath.pageId, pageRole, hasSeenIt)\n-      saveWatchbar(userId, watchbar)\n-\n-      // We know that the sender is online currently, so s/he should start watching the\n-      // page immediately. Other page members, however, might be offline. Ignore them.\n-      if (userId == sender.id) {\n-        logger.debug(s\"s$siteId: Telling PubSubActor: ${\n-              sender.nameHashId} starts watching page ${pagePath.pageId} [TyM50AKTG3]\")\n+    // ----- Watchbar\n+\n+    // Update watchbars for those who got added to this new dir msg, including\n+    // those added indirectly via groups.  But not those who have disabled\n+    // DM:s from this sender [filter_dms] (e.g. admins in large forums who are short\n+    // of time, and don't want to get notified just becaus someone messages Staff).\n+    RACE // [WATCHBRACE]\n+\n+    // 1/2: We know that the sender is online currently — hen should start watching\n+    // the page immediately.\n+    {\n+      val senderAuthzCtx = getAuthzCtxOnPagesForPat(sender.user)\n+      var watchbar: BareWatchbar = getOrCreateWatchbar(senderAuthzCtx)\n+      watchbar = watchbar.addPage(pagePath.pageId, pageRole, hasSeenIt = true)\n+      saveWatchbar(sender.id, watchbar)\n+      logger.debug(s\"s$siteId: Telling PubSubActor: ${\n+            sender.nameHashId} created & starts watching page ${pagePath.pageId} [TyM50AKTG3]\")\n+      pubSub.userWatchesPages(siteId, sentById, watchbar.watchedPageIds)\n+    }\n \n-        pubSub.userWatchesPages(siteId, sentById, watchbar.watchedPageIds)\n+    // 2/2: Others might not even have visited the site before, and might not yet have\n+    // any watchbar to update. Then, nothing to do here. This new private message will\n+    // get lazy-added to their watchbar on creation. [lazy_watchbar]\n+    for {\n+      member: Member <- toMemsInclGroupMems\n+      // The sender might have messaged a group hen is in:\n+      if member.id != sender.id\n+      if !member.isGroup && !member.isBuiltIn\n+    } {\n+      getAnyWatchbar(member.id) foreach { watchbar =>\n+        val watchbarAfter = watchbar.addPage(pagePath.pageId, pageRole, hasSeenIt = false)\n+        saveWatchbar(member.id, watchbarAfter)\n       }\n     }\n \n     // (Tested here: [TyTPAGENOTF])\n     pubSub.publish(\n-      pubsub.NewPageMessage(siteId, notfs), byId = sentById)\n+          pubsub.NewPageMessage(siteId, notfs), byId = sentById)\n \n     pagePath\n   }"
    },
    {
      "sha": "8ccd1b3db087b866b0b70181c091e874bc3cc183",
      "filename": "appsv/server/debiki/dao/PostsDao.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -511,10 +511,10 @@ trait PostsDao {\n \n     // ----- Trust level\n \n-    val alwaysReqAppr = author.trustLevel.isAtMost(settings.requireApprovalIfTrustLte)\n+    val alwaysReqApprBef = author.trustLevel.isAtMost(settings.requireApprovalIfTrustLte)\n     val alwaysReviewAfter = author.trustLevel.isAtMost(settings.reviewAfterIfTrustLte)\n \n-    if (alwaysReqAppr) {\n+    if (alwaysReqApprBef) {\n       // Tests: TyT305RKTH205\n       autoApprove = false\n       reviewReasons.append(ReviewReason.IsByLowTrustLevel)\n@@ -525,7 +525,9 @@ trait PostsDao {\n \n     if (alwaysReviewAfter) {\n       TESTS_MISSING\n-      reviewReasons.append(ReviewReason.IsByLowTrustLevel)\n+      if (!alwaysReqApprBef) {\n+        reviewReasons.append(ReviewReason.IsByLowTrustLevel)\n+      }\n       if (maxPostsPendRevwAftr > 0 && numPending + 1 > maxPostsPendRevwAftr)\n         throwForbidden(\"TyE2MNYPNDRVW_\", o\"\"\"You cannot post more posts until\n               your previous posts have been reviewed by staff\"\"\")\n@@ -2392,9 +2394,10 @@ trait PostsDao {\n         \"EsE7YKG42_\", \"New parent post not found\")\n \n       // [priv_comts]\n-      // If a post is private, don't allow moving it to any parent post that *more* peolpe can see.\n-      // If creating a placeholder like: \"Sub thread moved to: ...\", then, copy the who-can-see\n-      // list to that placeholder, so only the same people can see it.\n+      // If a private post gets moved, its Post.privatePatsId won't change just because of\n+      // that — it'll stay private.\n+      // If creating a placeholder like: \"Sub thread moved to: ...\", then, copy\n+      // Post.privatePatsId to that placeholder, so it's private too.\n \n       // Anyone assigned to the post, will stay [assigned_to] it also after it's been moved.\n       // (AssignedTo relationships are (will be) in  pat_rels_t  whose  to_post_id_c  points to"
    },
    {
      "sha": "88523b5d9509386171f9879b8430eea7baba9a19",
      "filename": "appsv/server/debiki/dao/SiteDao.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FSiteDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FSiteDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FSiteDao.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -648,6 +648,13 @@ class SiteDao(\n   }\n \n \n+  def loadEmailsToPatAboutThread(toPatId: PatId, pageId: PageId, parentPostNr: Opt[PostNr],\n+          limit: i32): ImmSeq[EmailOut] = {\n+    readTx(_.loadEmailsToPatAboutThread(toPatId = toPatId, pageId = pageId,\n+          parentPostNr = parentPostNr, limit = limit))\n+  }\n+\n+\n   def loadEmailByIdOrErr(emailId: St, maxAgeDays: Opt[i32] = None)\n           : EmailOut Or ErrMsg = {\n     val email = readOnlyTransaction(_.loadEmailByIdOnly(emailId)) getOrElse {"
    },
    {
      "sha": "36aea9c73cdbc6223dc5675a50ef21c04fba7087",
      "filename": "appsv/server/debiki/dao/UploadsDao.scala",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FUploadsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FUploadsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FUploadsDao.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -23,6 +23,7 @@ import com.google.{common => guava}\n import debiki.{Globals, ImageUtils, TextAndHtmlMaker}\n import debiki.EdHttp._\n import talkyard.server.UploadsUrlBasePath\n+import talkyard.server.rendr.NashornParams\n import java.{io => jio, lang => jl, util => ju}\n import java.awt.image.BufferedImage\n import java.nio.{file => jf}\n@@ -222,7 +223,17 @@ trait UploadsDao {\n   }\n \n \n-  /** Do as part of  [[debiki.TextAndHtmlMaker.findLinksEtc]]  ? */\n+  /** Do as part of  [[debiki.TextAndHtmlMaker.findLinksEtc]]  ?\n+    *\n+    * Finds upload refs for the current version of the post — but also\n+    * for the most recent *approved* version, which might be different.\n+    *\n+    * Details: The approved version is the one shown to others, whilst the current\n+    * version can be a new version the author has started editing\n+    * — and if hen has e.g. added and removed images, the upload refs will be\n+    * different in the current version. We need to remember also images in the current\n+    * version, otherwise they could disappear, be gone before edits published.\n+    */\n   @deprecated(\"now\")\n   def findUploadRefsInPost(post: Post, site: Opt[Site] = None): Set[UploadRef] = {\n     val pubId = site.map(_.pubId) getOrElse thePubSiteId()\n@@ -232,9 +243,10 @@ trait UploadsDao {\n       if (post.nr == PageParts.TitleNr) Nil\n       else {\n         val renderResult = context.nashorn.renderAndSanitizeCommonMark(  // [nashorn_in_tx]\n-              post.currentSource, site getOrElse theSite(),\n+              post.currentSource, NashornParams(site getOrElse theSite(),\n               embeddedOriginOrEmpty = \"\",\n-              allowClassIdDataAttrs = false, followLinks = false)\n+              allowClassIdDataAttrs = false, followLinks = false,\n+              mayMention = _ => Map.empty.withDefaultValue(true)))\n         findUploadRefsInHtml(renderResult.safeHtml, pubId)\n       }\n     approvedRefs ++ currentRefs"
    },
    {
      "sha": "73d1c51fcf903ed0069e71782555af5049e0bc8e",
      "filename": "appsv/server/debiki/dao/UserDao.scala",
      "status": "modified",
      "additions": 233,
      "deletions": 134,
      "changes": 367,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -31,7 +31,7 @@ import scala.collection.mutable.ArrayBuffer\n import talkyard.server._\n import talkyard.server.dao.StaleStuff\n import talkyard.server.authn.{Join, Leave, JoinOrLeave, StayIfMaySee}\n-import talkyard.server.authz.AuthzCtxOnPats\n+import talkyard.server.authz.{AuthzCtxOnPats, AuthzCtxOnAllWithReqer, AuthzCtxWithReqer}\n \n \n case class LoginNotFoundException(siteId: SiteId, userId: UserId)\n@@ -40,9 +40,21 @@ case class LoginNotFoundException(siteId: SiteId, userId: UserId)\n \n case class ReadMoreResult(\n   numMoreNotfsSeen: Int,\n-  gotPromoted: Boolean)\n+  )\n \n \n+case class EditMemberCtx(\n+  tx: SiteTx,\n+  statleStuff: StaleStuff,\n+  member: MemberVb,\n+  reqer: User)\n+\n+\n+private case class JoinLeavePageDbResult(\n+  patIdsCouldntJoin: Set[PatId],\n+  pageMeta: PageMeta,\n+  anyChange: Bo)\n+\n \n trait UserDao {\n   self: SiteDao =>\n@@ -78,6 +90,7 @@ trait UserDao {\n     */\n   def acceptInviteCreateUser(secretKey: String, browserIdData: BrowserIdData)\n         : (UserInclDetails, Invite, Boolean) = {\n+\n     val result = readWriteTransaction { tx =>\n       var invite = tx.loadInviteBySecretKey(secretKey) getOrElse throwForbidden(\n         \"DwE6FKQ2\", \"Bad invite key\")\n@@ -157,12 +170,12 @@ trait UserDao {\n         inUseFrom = tx.now, userId = newUser.id))\n       tx.upsertUserStats(UserStats.forNewUser(\n         newUser.id, firstSeenAt = tx.now, emailedAt = Some(invite.createdWhen)))\n-      joinPinnedGlobalChats(newUser, tx)\n       anyGroups.foreach { group =>\n         tx.addGroupMembers(group.id, Set(newUser.id))\n       }\n       tx.updateInvite(invite)\n       tx.insertAuditLogEntry(makeCreateUserAuditEntry(newUser, browserIdData, tx.now))\n+\n       (newUser, invite, false)\n     }\n \n@@ -175,6 +188,9 @@ trait UserDao {\n       memCache.remove(groupMembersKey(groupId))  // [inv2groups]\n     }\n \n+    // Need not — happens lazily on first access:  [auto_join_chats]\n+    // _addPinnedGlobalChatsToWatchbar(newUser, tx)\n+\n     result\n   }\n \n@@ -317,23 +333,53 @@ trait UserDao {\n \n \n   def lockUserTrustLevel(memberId: UserId, newTrustLevel: Opt[TrustLevel]): U = {\n-    writeTx { (tx, staleStuff) =>\n+\n+    // ----- Step 1/3:  Update database\n+\n+    val (membAft, promoted, chatsPatLeft) = writeTx { (tx, staleStuff) =>\n       val membBef = tx.loadTheUserInclDetails(memberId)\n       val membAft = membBef.copy(lockedTrustLevel = newTrustLevel)\n       tx.updateUserInclDetails(membAft)\n       val promoted = membAft.effectiveTrustLevel.isAbove(membBef.effectiveTrustLevel)\n       val demoted = membAft.effectiveTrustLevel.isBelow(membBef.effectiveTrustLevel)\n       if (promoted) {\n-        joinPinnedGlobalChats(membAft, tx)    // [join_opn_cht]\n+        (membAft, true, Nil)\n       }\n       else if (demoted) {\n-        leaveChatsMayNotSee(membAft)(tx, staleStuff)   // [leave_opn_cht]\n+        val chatsPatLeft = _leavePagesMayNotSee_updateDb(membAft)(tx, staleStuff)   // [leave_opn_cht]\n+        (membAft, false, chatsPatLeft)\n+      }\n+      else {\n+        // Nothing changed — trust level locked at the current trust level, right.\n+        // (But better continue below, so the mem cache gets updated, although\n+        // theoretically shouldn't matter.)\n+        (membAft, false, Nil)\n       }\n     }\n+\n+    // ----- Step 2/3:  Update mem cache\n+\n+    COULD // use staleStuff above instead? (Then this step 2/3 disappears.)\n+\n     removeUserFromMemCache(memberId)\n     // Now the user might have joined / left trust level groups.\n     uncacheOnesGroupIds(Seq(memberId))\n     uncacheBuiltInGroups()\n+\n+    // ----- Step 3/3:  Update watchbar\n+\n+    // Do this outside the tx and after having refreshed the cache above.\n+    if (promoted) {\n+      // [join_opn_cht]\n+      BUG // Harmless. Publishes presence, although the user might be away. [presence_bug]\n+      _addPinnedGlobalChatsToWatchbar(membAft)\n+    }\n+    else if (chatsPatLeft.nonEmpty) {\n+      for (pageMeta <- chatsPatLeft) {\n+        _joinLeavePage_updateWatchbar(\n+            userIds = Set(memberId), couldntAdd = Set.empty, Remove, pageToJoinLeave = pageMeta)\n+      }\n+    }\n   }\n \n \n@@ -554,8 +600,6 @@ trait UserDao {\n \n       tx.insertIdentity(identity)  // use saveIdentityLinkToUser() instead somehow?\n \n-      joinPinnedGlobalChats(user, tx)\n-\n       // Dupl code [2ABKS03R]\n       if (newUserData.isOwner) {\n         tx.upsertPageNotfPref(PageNotfPref(userId, NotfLevel.WatchingAll, wholeSite = true))\n@@ -650,7 +694,6 @@ trait UserDao {\n         inUseFrom = now, userId = user.id))\n     tx.upsertUserStats(UserStats.forNewUser(\n         user.id, firstSeenAt = userData.firstSeenAt.getOrElse(now), emailedAt = None))\n-    joinPinnedGlobalChats(user, tx)\n \n     // Dupl code [2ABKS03R]\n     // Initially, when the forum / comments site is tiny, it's good to be notified\n@@ -703,6 +746,7 @@ trait UserDao {\n         guest.id, firstSeenAtOr0 = tx.now, lastSeenAt = tx.now))\n       guest\n     }\n+    // Ignore site version, see [pat_cache].\n     memCache.put(\n           patKey(user.id),\n           MemCacheValueIgnoreVersion(user))\n@@ -753,7 +797,7 @@ trait UserDao {\n     }\n \n     // Don't save any site cache version, because user specific data doesn't change\n-    // when site specific data changes.\n+    // when site specific data changes. [pat_cache]\n     memCache.put(\n           patKey(loginGrant.user.id),\n           MemCacheValueIgnoreVersion(loginGrant.user))\n@@ -1076,7 +1120,7 @@ trait UserDao {\n \n \n   private def getGroupStatsIfReqrMaySee(group: Group, requester: Participant): Option[GroupStats] = {\n-    // Hmm this counts not only users, but child groups too. [NESTDGRPS]\n+    // Hmm this counts not only users, but child groups too. [sub_groups]\n     val members = listGroupMembersIfReqrMaySee(group.id, requester) getOrElse {\n       return None\n     }\n@@ -1135,7 +1179,7 @@ trait UserDao {\n       val newMembers = tx.loadParticipants(memberIdsToAdd)\n       newMembers.find(_.isGroup) foreach { group =>\n         // Currently trust level groups are already nested in each other — but let's\n-        // wait with allowing nesting custom groups in each other. [NESTDGRPS]\n+        // wait with allowing nesting custom groups in each other. [sub_groups]\n         // [ck_grp_ckl]\n         throwForbidden(\"TyEGRINGR\", s\"Cannot add groups to groups. Is a group: ${group.nameParaId}\")\n       }\n@@ -1217,7 +1261,7 @@ trait UserDao {\n   def getOnesGroupIds(ppt: Participant): Vector[UserId] = {\n     ppt match {\n       case _: Guest | UnknownParticipant => Vector(Group.EveryoneId)\n-      case _: User | _: Group =>\n+      case _: Member =>\n         memCache.lookup[Vector[UserId]](\n           onesGroupIdsKey(ppt.id),\n           orCacheAndReturn = {\n@@ -1233,8 +1277,18 @@ trait UserDao {\n     if (Participant.isGuestId(who.id))\n       throwForbidden(\"EsE3GBS5\", \"Guest users cannot join/leave pages\")\n \n-    val watchbarsByUserId = joinLeavePageUpdateWatchbar(Set(who.id), pageId,\n-          if (join) Join else Leave, who, anyTx = None)\n+    val joinOrLeave = if (join) Join else Leave\n+\n+    val databaseResult = _joinLeavePage_updateDb(Set(who.id), pageId,\n+          joinOrLeave, who, anyTx = None)\n+\n+    if (!databaseResult.anyChange)\n+      return None\n+\n+    val watchbarsByUserId = _joinLeavePage_updateWatchbar(\n+          userIds = Set(who.id), couldntAdd = databaseResult.patIdsCouldntJoin,\n+          joinOrLeave, pageToJoinLeave = databaseResult.pageMeta)\n+\n     val anyNewWatchbar = watchbarsByUserId.get(who.id)\n     anyNewWatchbar\n   }\n@@ -1246,10 +1300,11 @@ trait UserDao {\n     * (e.g. visible only to Trusted users) — and then those are added to the\n     * watchbar, those too.\n     */\n-  def joinPinnedGlobalChats(user: UserInclDetails, tx: SiteTx): U = {\n+  private def _addPinnedGlobalChatsToWatchbar(user: UserBase): U = {\n     // Tests:  promote-demote-by-staff-join-leave-chats.2br  TyTE2E5H3GFRVK\n \n-    val chatsInclForbidden = tx.loadOpenChatsPinnedGlobally()\n+    // Dupl code, also done when creating a watchbar. [auto_join_chats]\n+    val chatsInclForbidden = readTx(_.loadOpenChatsPinnedGlobally())\n     BUG // Don't join a chat again, if has left it. Needn't fix now, barely matters.\n     val joinedChats = chatsInclForbidden // ArrayBuffer[PageMeta]()\n \n@@ -1259,7 +1314,7 @@ trait UserDao {\n       if (maySee) {\n         val couldntAdd = mutable.Set[UserId]()\n \n-        joinLeavePage(Set(user.id), chatPageMeta.pageId, add = true,\n+        _joinLeavePageOrThrow(Set(user.id), chatPageMeta.pageId, add = true,\n             byWho = Who.System, couldntAdd, tx)\n \n         if (!couldntAdd.contains(user.id)) {\n@@ -1269,42 +1324,58 @@ trait UserDao {\n     } */\n \n     // This will do access permission checks.\n-    addRemovePagesToWatchbar(joinedChats, user.noDetails, Add, UseTx(tx))\n+    val userAuthzCtx = getAuthzCtxOnPagesForPat(user)\n+    _addRemovePagesToWatchbar(joinedChats, userAuthzCtx, Add)\n   }\n \n \n-  private def leaveChatsMayNotSee(user: UserInclDetails)(\n-          tx: SiteTx, staleStuff: StaleStuff): U = {\n-    // Remove [chat channels pat may no longer see] from hens watchbar,\n-    // otherwise hen will get confused if clicking them and getting\n-    // access permission errors?\n-    // (But don't remove pat from private chats.)\n+  private def _leavePagesMayNotSee_updateDb(user: UserVb)(\n+          tx: SiteTx, staleStuff: StaleStuff): ImmSeq[PageMeta] = {\n+    // Remove [chat channels pat may no longer see] from hens watchbar, otherwise hen\n+    // will get confused if clicking them and getting access permission errors.\n+\n+    SHOULD // Remove pat from [private_chats] too, once private chats have been implemented.\n+    // Hmm but they won't work like that? They aren't tied to trust levels and category\n+    // permissions, instead, created outside any cat and a few pats added explicitly.\n \n     // Tests:  promote-demote-by-staff-join-leave-chats.2br  TyTE2E5H3GFRVK.TyTE2ELWRTRU38\n     UX; COULD // remove also non-pinned open chats pat may no longer see.\n     // [demoted_rm_all_chats]\n \n     val chatsInclForbidden = tx.loadOpenChatsPinnedGlobally()\n-    for (page <- chatsInclForbidden) {\n-      joinLeavePageUpdateWatchbar(Set(user.id), page.pageId,\n+    val chatsPatLeft = chatsInclForbidden flatMap { page =>\n+      val result = _joinLeavePage_updateDb(Set(user.id), page.pageId,\n             StayIfMaySee, Who.System, Some((tx, staleStuff)))\n+      if (result.anyChange) Some(result.pageMeta)\n+      else None\n     }\n+    chatsPatLeft\n   }\n \n \n   def addUsersToPage(userIds: Set[UserId], pageId: PageId, byWho: Who): U = {\n-    joinLeavePageUpdateWatchbar(userIds, pageId, Add, byWho, anyTx = None)\n+    val result = _joinLeavePage_updateDb(userIds, pageId, Add, byWho, anyTx = None)\n+    if (result.anyChange) {\n+      dieIf(result.patIdsCouldntJoin.size >= userIds.size, \"TyE603MRDL\",\n+            \"No user added, but still anyChange is true\")\n+      _joinLeavePage_updateWatchbar(\n+            userIds = userIds, couldntAdd = Set.empty, Add, pageToJoinLeave = result.pageMeta)\n+    }\n   }\n \n \n   def removeUsersFromPage(userIds: Set[UserId], pageId: PageId, byWho: Who): U = {\n-    joinLeavePageUpdateWatchbar(userIds, pageId, Remove, byWho, anyTx = None)\n+    val result = _joinLeavePage_updateDb(userIds, pageId, Remove, byWho, anyTx = None)\n+    if (result.anyChange) {\n+      _joinLeavePage_updateWatchbar(\n+            userIds = userIds, couldntAdd = Set.empty, Remove, pageToJoinLeave = result.pageMeta)\n+    }\n   }\n \n \n-  private def joinLeavePageUpdateWatchbar(userIds: Set[UserId], pageId: PageId,\n-          joinOrLeave: JoinOrLeave, byWho: Who, anyTx: Opt[(SiteTx, StaleStuff)])\n-          : Map[UserId, BareWatchbar] = {\n+  private def _joinLeavePage_updateDb(userIds: Set[UserId], pageId: PageId,\n+          joinOrLeave: JoinOrLeave, byWho: Who, anyTx: Opt[(SiteTx, StaleStuff)])  // REFACTOR use TxCtx\n+          : JoinLeavePageDbResult = {\n \n     if (byWho.isGuest)\n       throwForbidden(\"EsE2GK7S\", \"Guests cannot add/remove people to pages\")\n@@ -1317,12 +1388,12 @@ trait UserDao {\n \n     val couldntAdd = mutable.Set[UserId]()\n \n-    COULD_OPTIMIZE  // return pats from joinLeavePage(), or load here.\n-    // So won't need to load again, in addRemovePagesToWatchbar().\n+    COULD_OPTIMIZE  // return pats from _joinLeavePageOrThrow(), or load here.\n+    // So won't need to load again, in PinnedGlobaladdRemovePagesToWatchbar() [.2x_load_memb]\n \n-    val pageMeta = writeTxTryReuse(anyTx) { (tx, _) =>\n+    val (pageMeta, anyChange) = writeTxTryReuse(anyTx) { (tx, _) =>\n       // This checks if byWho may see the page, and may add userIds to it.\n-      joinLeavePage(userIds, pageId, joinOrLeave, byWho, couldntAdd, tx)\n+      _joinLeavePageOrThrow(userIds, pageId, joinOrLeave, byWho, couldntAdd, tx)\n     }\n \n     SHOULD // push new member notf to browsers, so that this gets updated: [5FKE0WY2]\n@@ -1335,18 +1406,28 @@ trait UserDao {\n       refreshPageInMemCache(pageId)\n     }\n \n+    JoinLeavePageDbResult(patIdsCouldntJoin = couldntAdd.toSet, pageMeta, anyChange = anyChange)\n+  }\n+\n+\n+  private def _joinLeavePage_updateWatchbar(userIds: Set[UserId], couldntAdd: Set[UserId],\n+        joinOrLeave: JoinOrLeave, pageToJoinLeave: PageMeta): Map[UserId, BareWatchbar] = {\n+\n     var watchbarsByUserId = Map[UserId, BareWatchbar]()\n     userIds foreach { userId =>\n       if (couldntAdd.contains(userId)) {\n         // Need not update the watchbar.\n       }\n       else {\n-        COULD_OPTIMIZE  // needn't do access control again in addRemovePagesToWatchbar(),\n-        // already done above.\n-\n-        val pat = getTheUser(userId, anyTx)\n-        addRemovePagesToWatchbar(Some(pageMeta), pat, addOrRemove = joinOrLeave,\n-              CacheOrTx.apply2(anyTx)) foreach { newWatchbar =>\n+        COULD_OPTIMIZE  // needn't do access control again in _addRemovePagesToWatchbar(),\n+        // already done above, but results currently forgotten — pass back from\n+        // _joinLeavePageOrThrow() to here?\n+\n+        COULD_OPTIMIZE  // Pass on pat from _joinLeavePage_updateDb() to here.  [.2x_load_memb]\n+        val pat = getTheUser(userId, anyTx = None)\n+        val patAuthzCtx = getAuthzCtxOnPagesForPat(pat)\n+        _addRemovePagesToWatchbar(Some(pageToJoinLeave), patAuthzCtx, addOrRemove = joinOrLeave\n+              ) foreach { newWatchbar =>\n           watchbarsByUserId += userId -> newWatchbar\n         }\n       }\n@@ -1355,9 +1436,14 @@ trait UserDao {\n   }\n \n \n-  private def joinLeavePage(userIds: Set[UserId], pageId: PageId, joinOrLeave: JoinOrLeave,\n-        byWho: Who, couldntAdd: mutable.Set[UserId], tx: SiteTx): PageMeta = {\n+  /** Returns:  (PageMeta, anyChange: Bo)\n+    */\n+  private def _joinLeavePageOrThrow(\n+        userIdsToJoinLeave: Set[UserId], pageIdToJoinLeave: PageId,\n+        joinOrLeave: JoinOrLeave, byWho: Who, couldntAdd: mutable.Set[UserId],\n+        tx: SiteTx): (PageMeta, Bo) = {\n \n+    val userIds = userIdsToJoinLeave\n     // Tests:  promote-demote-by-staff-join-leave-chats.2br  TyTE2E5H3GFRVK.TyT502RKTJF4\n     //          — trying to join a page one may not see\n \n@@ -1366,18 +1452,18 @@ trait UserDao {\n     val me = usersById.getOrElse(byWho.id, throwForbidden(\n           \"EsE6KFE0X\", s\"Your user cannot be found, id: ${byWho.id}\"))\n \n-    val pageMeta = tx.loadPageMeta(pageId) getOrElse\n+    val pageMeta = tx.loadPageMeta(pageIdToJoinLeave) getOrElse\n           security.throwIndistinguishableNotFound(\"42PKD0\")\n \n-    // AuthZ check 1/3.\n+    // AuthZ check 1/3:  May the *requester* see the page? (Hen might be sbd else than userIds.)\n     throwIfMayNotSeePage(pageMeta, Some(me))(tx)\n \n-    // Right now, to join a forum page = sub community, one just adds it to one's watchbar.\n+    // Right now, to join a forum page =  [sub_communities], one just adds it to one's watchbar.\n     // But we don't add/remove the user from the page members list, so nothing to do here.\n     if (pageMeta.pageType == PageType.Forum)\n-      return pageMeta\n+      return (pageMeta, false)\n \n-    lazy val numMembersAlready = tx.loadMessageMembers(pageId).size\n+    lazy val numMembersAlready = tx.loadMessageMembers(pageIdToJoinLeave).size\n     if (add && numMembersAlready + userIds.size > 400) {\n       // I guess something, not sure what?, would break if too many people join\n       // the same page.\n@@ -1410,7 +1496,8 @@ trait UserDao {\n \n       userIds foreach { id =>\n         COULD_OPTIMIZE // batch insert all users at once (would slightly speed up imports)\n-        val wasAdded = tx.insertMessageMember(pageId, userId = id, addedById = me.id)\n+        val wasAdded = tx.insertMessageMember(\n+              pageIdToJoinLeave, userId = id, addedById = me.id)\n         if (wasAdded) {\n           anyChange = true\n         }\n@@ -1442,7 +1529,7 @@ trait UserDao {\n               die(\"TyE0MRG603MR\", s\"Weird joinOrLeave: $joinOrLeave\")\n             }\n       userIdsToRemove foreach { id: UserId =>\n-        tx.removePageMember(pageId, userId = id, removedById = byWho.id)\n+        tx.removePageMember(pageIdToJoinLeave, userId = id, removedById = byWho.id)\n       }\n       anyChange = userIdsToRemove.nonEmpty\n     }\n@@ -1456,21 +1543,21 @@ trait UserDao {\n     //\n     COULD_OPTIMIZE // only if (anyChange) ..\n     tx.updatePageMeta(pageMeta, oldMeta = pageMeta, markSectionPageStale = false)\n-    pageMeta\n+    (pageMeta, anyChange)\n   }\n \n \n-  private def addRemovePagesToWatchbar(pages: Iterable[PageMeta], pat: Pat,\n-        addOrRemove: AddOrRemove, cacheOrTx: CacheOrTx): Opt[BareWatchbar] = {\n+  private def _addRemovePagesToWatchbar(pages: Iterable[PageMeta],\n+        patAuthzCtx: AuthzCtxOnAllWithReqer, addOrRemove: AddOrRemove): Opt[BareWatchbar] = {\n     RACE // when loading & saving the watchbar. E.g. if a user joins\n     // a page henself, and another member adds hen to the page,\n     // or another page, at the same time. Then, possibly the lost update bug\n     // — harmless, just the watchbar.\n \n-    val oldWatchbar = getOrCreateWatchbar(pat.id)\n+    val oldWatchbar = getOrCreateWatchbar(patAuthzCtx)\n     var newWatchbar = oldWatchbar\n     for (page: PageMeta <- pages) {\n-      val (maySee, _) = maySeePage(page, Some(pat), cacheOrTx)\n+      val (maySee, _) = maySeePageUseCacheAndAuthzCtx(page, patAuthzCtx)\n       if (addOrRemove == Remove) {\n         newWatchbar = newWatchbar.removePage(page, tryKeepInRecent = maySee)\n       }\n@@ -1491,23 +1578,27 @@ trait UserDao {\n         }\n       }\n     }\n-    saveWatchbarPublPresence(oldWatchbar, newWatchbar = newWatchbar, pat.id)\n+\n+    _saveWatchbar_updateWatchedPages(\n+          oldWatchbar, newWatchbar = newWatchbar, patAuthzCtx.theReqer.id)\n   }\n \n \n-  def removeFromWatchbarRecent(pageIds: Iterable[PageId], requesterId: PatId)\n+  def removeFromWatchbarRecent(pageIds: Iterable[PageId], authzCtx: AuthzCtxWithReqer)\n           : Opt[BareWatchbar] = {\n     TESTS_MISSING\n-    val oldWatchbar = getOrCreateWatchbar(requesterId)\n-    var newWatchbar = oldWatchbar\n-    for (pageId <- pageIds) {\n-      newWatchbar = newWatchbar.removeFromRecent(pageId)\n+    getAnyWatchbar(authzCtx.theReqer.id) flatMap { oldWatchbar =>\n+      var newWatchbar = oldWatchbar\n+      for (pageId <- pageIds) {\n+        newWatchbar = newWatchbar.removeFromRecent(pageId)\n+      }\n+      _saveWatchbar_updateWatchedPages(\n+            oldWatchbar, newWatchbar = newWatchbar, authzCtx.theReqer.id)\n     }\n-    saveWatchbarPublPresence(oldWatchbar, newWatchbar = newWatchbar, requesterId)\n   }\n \n \n-  private def saveWatchbarPublPresence(oldWatchbar: BareWatchbar,\n+  private def _saveWatchbar_updateWatchedPages(oldWatchbar: BareWatchbar,\n           newWatchbar: BareWatchbar, userId: UserId): Opt[BareWatchbar] = {\n \n     if (oldWatchbar == newWatchbar) {\n@@ -1521,6 +1612,8 @@ trait UserDao {\n     // If pages were added to the watchbar, we should start watching them. If we left\n     // a private page, it'll disappear from the watchbar — then we should stop watching it.\n     if (oldWatchbar.watchedPageIds != newWatchbar.watchedPageIds) {\n+      BUG // This sends a Presence.Active about the user — sometimes hen isn't. [presence_bug]\n+      // Move the Presence.Active part of this, to higher up the stack?\n       pubSub.userWatchesPages(siteId, userId, newWatchbar.watchedPageIds)\n     }\n \n@@ -1543,10 +1636,13 @@ trait UserDao {\n \n     // Don't track system, superadmins, deleted users — they aren't real members.\n     if (user.id < LowestTalkToMemberId)\n-      return ReadMoreResult(0, gotPromoted = false)\n+      return ReadMoreResult(0)\n+\n+    var promotedUser: Opt[UserVb] = None\n+    var numMoreNotfsSeen = 0\n \n     COULD_OPTIMIZE // use Dao instead, so won't touch db. Also: (5ABKR20L)\n-    val result = readWriteTransaction { tx =>\n+    readWriteTransaction { tx =>\n       val pageMeta = tx.loadPageMeta(pageId) getOrElse {\n         throwNotFound(\"TyETRCK0PAGE\", s\"No page with id '$pageId'\")\n       }\n@@ -1595,55 +1691,54 @@ trait UserDao {\n       COULD_OPTIMIZE // aggregate the reading progress in Redis instead. Save every 5? 10? minutes,\n       // so won't write to the db so very often.  (5ABKR20L)\n \n-      val numMoreNotfsSeen = tx.markNotfsForPostIdsAsSeen(\n-        user.id, postIdsSeen, skipEmails = user.emailNotfPrefs != EmailNotfPrefs.ReceiveAlways)\n+      numMoreNotfsSeen = tx.markNotfsForPostIdsAsSeen(\n+            user.id, postIdsSeen,\n+            skipEmails = user.emailNotfPrefs != EmailNotfPrefs.ReceiveAlways)\n \n       tx.upsertReadProgress(userId = user.id, pageId = pageId, resultingProgress)\n       tx.upsertUserStats(statsAfter)\n \n-      var gotPromoted = false\n       if (user.canPromoteToBasicMember) {\n         if (statsAfter.meetsBasicMemberRequirements) {\n-          promoteUser(user.id, TrustLevel.BasicMember, tx)\n-          gotPromoted = true\n+          promotedUser = _promoteUser(user.id, TrustLevel.BasicMember, tx)\n         }\n       }\n       else if (user.canPromoteToFullMember) {\n         if (statsAfter.meetsFullMemberRequirements) {\n-          promoteUser(user.id, TrustLevel.FullMember, tx)\n-          gotPromoted = true\n+          promotedUser =_promoteUser(user.id, TrustLevel.FullMember, tx)\n         }\n       }\n       else {\n         // Higher trust levels require running expensive queries; don't do that here.\n         // Instead, will be done once a day in some background job.\n       }\n-\n-      ReadMoreResult(numMoreNotfsSeen = numMoreNotfsSeen, gotPromoted = gotPromoted)\n     }\n \n-    if (result.gotPromoted) {\n+    promotedUser foreach { user =>\n       // Has now joined a higher trust level group.\n       uncacheOnesGroupIds(Seq(user.id))\n       uncacheBuiltInGroups()\n+\n+      WOULD_OPTIMIZE // Only needed if hens watchbar alredy exists\n+      _addPinnedGlobalChatsToWatchbar(user)\n     }\n \n-    result\n+    ReadMoreResult(numMoreNotfsSeen = numMoreNotfsSeen)\n   }\n \n \n   def rememberVisit(user: Participant, lastVisitedAt: When): ReadMoreResult = {\n     require(user.isMember, \"TyEBZSR27\") // see above [8PLKW46]\n     if (user.id < LowestTalkToMemberId)\n-      return ReadMoreResult(0, gotPromoted = false)\n+      return ReadMoreResult(0)\n     readWriteTransaction { tx =>\n       val statsBefore = tx.loadUserStats(user.id) getOrDie \"EdE2FPJR9\"\n       val statsAfter = statsBefore.addMoreStats(UserStats(\n         userId = user.id,\n         lastSeenAt = lastVisitedAt))\n       tx.upsertUserStats(statsAfter)\n     }\n-    ReadMoreResult(numMoreNotfsSeen = 0, gotPromoted = false)\n+    ReadMoreResult(numMoreNotfsSeen = 0)\n   }\n \n \n@@ -1681,7 +1776,10 @@ trait UserDao {\n   }\n \n \n-  private def promoteUser(userId: UserId, newTrustLevel: TrustLevel, tx: SiteTx): U = {\n+  /** Returns the user after (with new trust level) iff got a higher effective trust level\n+    * (taking into account if trust levela has been locked by staff).\n+    */\n+  private def _promoteUser(userId: UserId, newTrustLevel: TrustLevel, tx: SiteTx): Opt[UserVb] = {\n     // If trust level locked, we'll promote the member anyway — but\n     // member.effectiveTrustLevel won't change, because it considers the locked\n     // trust level first.  If so, the [got more trust so can join more chats]\n@@ -1691,9 +1789,8 @@ trait UserDao {\n     tx.updateUserInclDetails(userAft)\n     TESTS_MISSING // Now new chat channels might be available  TyTE2E603RM8J\n     val gotMoreTrust = userAft.effectiveTrustLevel.isAbove(userBef.effectiveTrustLevel)\n-    if (gotMoreTrust) {\n-      joinPinnedGlobalChats(userAft, tx)\n-    }\n+    if (gotMoreTrust) Some(userAft)\n+    else None\n   }\n \n \n@@ -1870,40 +1967,55 @@ trait UserDao {\n \n \n   def savePageNotfPrefIfAuZ(pageNotfPref: PageNotfPref, byWho: Who): U = {\n-    editMemberThrowUnlessSelfStaff(pageNotfPref.peopleId, byWho, \"TyE2AS0574\", \"change notf prefs\") { tx =>\n+    _editMemberThrowUnlessSelfStaff(\n+          pageNotfPref.peopleId, byWho, \"TyE2AS0574\", \"change notf prefs\") {\n+            case EditMemberCtx(tx, _, _, _) =>\n       tx.upsertPageNotfPref(pageNotfPref)\n     }\n   }\n \n \n   def deletePageNotfPrefIfAuZ(pageNotfPref: PageNotfPref, byWho: Who): Unit = {\n-    editMemberThrowUnlessSelfStaff(pageNotfPref.peopleId, byWho, \"TyE5KP0GJL\", \"delete notf prefs\") { tx =>\n+    _editMemberThrowUnlessSelfStaff(\n+          pageNotfPref.peopleId, byWho, \"TyE5KP0GJL\", \"delete notf prefs\") {\n+            case EditMemberCtx(tx, _, _, _) =>\n       tx.deletePageNotfPref(pageNotfPref)\n     }\n   }\n \n \n-  def saveMemberPrivacyPrefs(preferences: MemberPrivacyPrefs, byWho: Who): MemberInclDetails = {\n-    editMemberThrowUnlessSelfStaff(preferences.userId, byWho, \"TyE4AKT2W\", \"edit privacy prefs\") { tx =>\n-      val memberBefore = tx.loadTheUserInclDetails(preferences.userId)  // [7FKFA20]\n-      val memberAfter = memberBefore.copyWithNewPrivacyPrefs(preferences)\n-      tx.updateUserInclDetails(memberAfter)\n+  def saveMemberPrivacyPrefsIfAuZ(forUserId: UserId, preferences: MemberPrivacyPrefs, byWho: Who)\n+          : MemberInclDetails = {\n+    _editMemberThrowUnlessSelfStaff(\n+          forUserId, byWho, \"TyE4AKT2W\", \"edit privacy prefs\") {\n+            case EditMemberCtx(tx, staleStuff, memberBefore, _) =>\n+\n+      // Later: Could let only full members (or people who knows how the software works)\n+      // change their who-may-mention-or-message-me settings?  [tech_level]\n+      // For now, just hide that, client side, doesn't really matter anyway. And >= core members\n+      // can always mention everyone anyway.  [can_config_what_priv_prefs]\n+      /* Don't / wait with:\n+      throwForbiddenIff(!memberBefore.isStaffOrCoreMember,\n+            \"TyEM0EDPRFS1\", \"May not edit these prefs\")\n+      throwForbiddenIff(!memberBefore.isStaffOrCoreMember,\n+            \"TyEM0EDPRFS2\", \"May not edit ...\")  */\n \n-      // Privacy preferences aren't cached, currently need not:\n-      //removeUserFromMemCache(memberAfter.id)\n+      val memberAfter = memberBefore.copyPrefs(privPrefs = preferences)\n+      tx.updateMemberInclDetails(memberAfter)\n+\n+      staleStuff.addPatIds(Set(forUserId))\n     }\n   }\n \n \n-  def saveAboutMemberPrefs(preferences: AboutUserPrefs, byWho: Who): MemberInclDetails = {\n+  def saveAboutMemberPrefsIfAuZ(preferences: AboutUserPrefs, byWho: Who): MemberInclDetails = {\n     // Similar to saveAboutGroupPrefs below. (0QE15TW93)\n     SECURITY // should create audit log entry. Should allow staff to change usernames.\n     BUG // the lost update bug (if staff + user henself changes the user's prefs at the same time)\n-    var clearMemCacheAfterTx = false\n \n-    val membAft = editMemberThrowUnlessSelfStaff2(\n+    val membAft = _editMemberThrowUnlessSelfStaff(\n           preferences.userId, byWho, \"TyE2WK7G4\", \"configure about prefs\") {\n-              (tx, _, me) =>\n+            case EditMemberCtx(tx, staleStuff, _, me) =>\n \n       val user = tx.loadTheUserInclDetails(preferences.userId)  // [7FKFA20]\n \n@@ -1940,22 +2052,18 @@ trait UserDao {\n         tx.reconsiderSendingSummaryEmailsTo(user.id)  // related: [5KRDUQ0]\n       }\n \n-      // Clear the page cache (by clearing all caches), if we changed the user's name.\n-      // COULD have above markPagesWithUserAvatarAsStale() return a page id list and\n-      // uncache only those pages.\n+      staleStuff.addPatIds(Set(user.id))\n+\n+      // Clear the page cache, if we changed the user's name.\n+      COULD_OPTIMIZE // Have above markPagesWithUserAvatarAsStale() return a page id list and\n+      // uncache only those pages / bump only page versions for the pages on which the user\n+      // has posted something that's been cached.\n+      // Or use staleStuff.markPagesWithUserAvatarAsStale() or addPagesWithVisiblePostsBy()?\n       if (preferences.changesStuffIncludedEverywhere(user)) {\n-        // COULD_OPTIMIZE bump only page versions for the pages on which the user has posted something.\n-        // Use markPagesWithUserAvatarAsStale ?\n-        emptyCacheImpl(tx)  ; SHOULD_OPTIMIZE // use staleStuff.addPagesWithVisiblePostsBy() instead\n-        clearMemCacheAfterTx = true\n+        staleStuff.addAllPages()\n       }\n     }\n \n-    if (clearMemCacheAfterTx) {\n-      memCache.clearThisSite()\n-    }\n-    removeUserFromMemCache(preferences.userId)\n-\n     membAft\n   }\n \n@@ -2052,23 +2160,23 @@ trait UserDao {\n \n \n   def savePatPerms(patId: PatId, perms: PatPerms, byWho: Who): U = {\n-    editMemberThrowUnlessSelfStaff2(patId, byWho, \"TyE3ASHW6703\", \"edit pat perms\") {\n-        (tx, memberInclDetails, _) =>\n+    _editMemberThrowUnlessSelfStaff(patId, byWho, \"TyE3ASHW6703\", \"edit pat perms\") {\n+          case EditMemberCtx(tx, staleStuff, memberInclDetails, _) =>\n       val groupBef: Group = memberInclDetails.asGroupOr(IfBadAbortReq)\n       val groupAft = groupBef.copy(perms = perms)\n       tx.updateMemberInclDetails(groupAft)\n+      staleStuff.addPatIds(Set(patId))\n     }\n-    removeUserFromMemCache(patId)\n-    memCache.remove(allGroupsKey)\n+    memCache.remove(allGroupsKey) ; CLEAN_UP // use staleStuff instead, new fn needed?\n   }\n \n \n   def saveUiPrefs(memberId: UserId, prefs: JsObject, byWho: Who): Unit = {\n-    editMemberThrowUnlessSelfStaff2(memberId, byWho, \"TyE3ASHWB67\", \"change UI prefs\") {\n-        (tx, memberInclDetails, _) =>\n-      tx.updateMemberInclDetails(memberInclDetails.copyTrait(uiPrefs = Some(prefs)))\n+    _editMemberThrowUnlessSelfStaff(memberId, byWho, \"TyE3ASHWB67\", \"change UI prefs\") {\n+          case EditMemberCtx(tx, staleStuff, memberInclDetails, _) =>\n+      tx.updateMemberInclDetails(memberInclDetails.copyPrefs(uiPrefs = Some(prefs)))\n+      staleStuff.addPatIds(Set(memberId))\n     }\n-    removeUserFromMemCache(memberId)\n   }\n \n \n@@ -2241,7 +2349,7 @@ trait UserDao {\n         reviewedById = memberBefore.reviewedById,\n         primaryEmailAddress = anonEmail,\n         emailNotfPrefs = EmailNotfPrefs.DontReceive,\n-        seeActivityMinTrustLevel = memberBefore.seeActivityMinTrustLevel,\n+        privPrefs = memberBefore.privPrefs,\n         suspendedAt = memberBefore.suspendedAt,\n         suspendedTill = memberBefore.suspendedTill,\n         suspendedById = memberBefore.suspendedById,\n@@ -2355,25 +2463,16 @@ trait UserDao {\n   }\n \n \n-  private def editMemberThrowUnlessSelfStaff[R](userId: UserId, byWho: Who, errorCode: St,\n-        mayNotWhat: St)(block: SiteTx => U): MemberInclDetails = {\n-    editMemberThrowUnlessSelfStaff2[R](userId, byWho, errorCode, mayNotWhat) { (tx, _, _) =>\n-      block(tx)\n-    }\n-  }\n-\n-\n-  /** Loads useId and byWho in a read-write transaction, and checks if they are\n+  /** Loads userId and byWho in a read-write transaction, and checks if they are\n     * the same person (that is, one edits one's own settings) or if byWho is staff.\n     * If isn't the same preson, or isn't staff, then, throws 403 Forbidden.\n-    * Plus, staff users who are moderators only, may not edit admin users — that also\n-    * results in 403 Forbidden.\n+    * Plus, staff users who are moderators only, may not edit admins — that also\n+    * throws 403 Forbidden.\n     *\n-    * block = (tx, member-to-edit, me) => side effects...  .\n+    * @param block — EditMemberCtx(tx, staleStuff, member-to-edit, reqer) => side effects...  .\n     */\n-  private def editMemberThrowUnlessSelfStaff2[R](userId: UserId, byWho: Who, errorCode: St,\n-        mayNotWhat: St)(block: (SiteTransaction, MemberInclDetails, User) => U)\n-        : MemberInclDetails = {\n+  private def _editMemberThrowUnlessSelfStaff[R](userId: UserId, byWho: Who, errorCode: St,\n+        mayNotWhat: St)(block: EditMemberCtx => U): MemberVb = {\n     SECURITY // review all fns in UserDao, and in UserController, and use this helper fn?\n     // Also create a helper fn:  readMemberThrowUnlessSelfStaff2 ...\n \n@@ -2384,7 +2483,7 @@ trait UserDao {\n     throwForbiddenIf(userId < Participant.LowestNormalMemberId,\n       errorCode + \"-ISBTI\", s\"May not $mayNotWhat for special built-in users\")\n \n-    readWriteTransaction { tx =>\n+    writeTx { (tx, staleStuff) =>\n       val me = tx.loadTheUser(byWho.id)\n       throwForbiddenIf(me.id != userId && !me.isStaff,\n           errorCode + \"-ISOTR\", s\"May not $mayNotWhat for others\")\n@@ -2395,7 +2494,7 @@ trait UserDao {\n       throwForbiddenIf(member.isAdmin && !me.isAdmin,\n           errorCode + \"-ISADM\", s\"May not $mayNotWhat for admins\") // [mod_0_conf_adm]\n \n-      block(tx, member, me)\n+      block(EditMemberCtx(tx, staleStuff, member, reqer = me))\n \n       tx.loadTheMemberInclDetails(userId)\n     }"
    },
    {
      "sha": "c958682fd0c68597145af7a22864873b54ce196f",
      "filename": "appsv/server/debiki/dao/WatchbarDao.scala",
      "status": "modified",
      "additions": 48,
      "deletions": 11,
      "changes": 59,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FWatchbarDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Fdebiki%2Fdao%2FWatchbarDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FWatchbarDao.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -19,6 +19,7 @@ package debiki.dao\n \n import com.debiki.core._\n import com.debiki.core.Prelude._\n+import talkyard.server.authz.{AuthzCtxOnAllWithReqer, AuthzCtxWithReqer}\n \n \n /** Returns an empty watchbar. Only the CachingWatchbarDao does something useful.\n@@ -55,17 +56,52 @@ trait WatchbarDao {\n   }\n \n \n-  def getOrCreateWatchbar(userId: UserId): BareWatchbar = {\n+  def getAnyWatchbar(userId: UserId): Opt[BareWatchbar] = {\n+    memCache.lookup[BareWatchbar](\n+        key(userId),\n+        orCacheAndReturn = {\n+          // [weird_dbl_cache]\n+          redisCache.loadWatchbar(userId)\n+        })\n+  }\n+\n+\n+  RENAME // to getOrCreateCacheWatchbar?\n+  /** Initializes the watchbar with defalt chats and other chats the user has already joined.\n+    */\n+  def getOrCreateWatchbar(authzCtx: AuthzCtxOnAllWithReqer): BareWatchbar = {\n     // Hmm, double caching? Mem + Redis. This doesn't make sense? Let's keep it like this for\n     // a while and see what'll happen. At least it's fast. And lasts across Play app restarts.\n+    // [weird_dbl_cache]\n+    val userId = authzCtx.theReqer.id\n     memCache.lookup[BareWatchbar](\n       key(userId),\n       orCacheAndReturn = redisCache.loadWatchbar(userId) orElse Some({\n-        readOnlyTransaction { transaction =>\n-          val chatChannelIds = transaction.loadPageIdsUserIsMemberOf(\n-            userId, Set(PageType.OpenChat, PageType.PrivateChat))\n-          val directMessageIds = transaction.loadPageIdsUserIsMemberOf(userId, Set(PageType.FormalMessage))\n-          BareWatchbar.withChatChannelAndDirectMessageIds(chatChannelIds, directMessageIds)\n+        readTx { tx =>\n+          // Dupl code, also done when promoting a user. [auto_join_chats]\n+          val defaultChatsInclForbidden = tx.loadOpenChatsPinnedGlobally()\n+          val defaultChats = defaultChatsInclForbidden filter { defChat =>\n+            val (may, _) = maySeePageUseCacheAndAuthzCtx(defChat, authzCtx)\n+            may\n+          }\n+          val defaultChatIds = defaultChats.map(_.pageId)\n+\n+          val memberOfChatIds = tx.loadPageIdsUserIsMemberOf(\n+                authzCtx.groupIdsUserIdFirst, Set(PageType.OpenChat, PageType.PrivateChat))\n+          // A PageType.OpenChat might be both a default chat, and one pat has joined,\n+          // so remove them from the has-joined list. [open_chat_dupl]\n+          val idsExclDefault = memberOfChatIds.filterNot(defaultChatIds contains _)\n+\n+          // Let's show the default chats first — they can be things like \"Support\" or \"Welcome\",\n+          // which makes sense to show first, before one's own more specific chats?\n+          // Ok to `++` concatenate here — different page types: JoinlessChat vs PrivateChat,\n+          // whilst OpenChat is de-duplicated above. So there won't be any duplicates.\n+          val allPatsChatIds = defaultChatIds ++ idsExclDefault\n+\n+          val directMessageIds = tx.loadPageIdsUserIsMemberOf(   // [lazy_watchbar]\n+                authzCtx.groupIdsUserIdFirst, Set(PageType.FormalMessage))\n+\n+          BareWatchbar.withChatChannelAndDirectMessageIds(allPatsChatIds, directMessageIds)\n         }\n       }),\n       ignoreSiteCacheVersion = true) getOrDie \"EsE4UYKF5\"\n@@ -75,18 +111,19 @@ trait WatchbarDao {\n   /* BUG race conditions, if e.g. saveWatchbar & markPageAsUnreadInWatchbar called at the\n   * same time. Could perhaps solve by creating a Watchbar actor that serializes access?\n   */\n-  def saveWatchbar(userId: UserId, watchbar: Watchbar): Unit = {\n+  def saveWatchbar(userId: UserId, watchbar: Watchbar): Unit = {   RENAME // to ...InMem? or cacheWatchbar?\n     memCache.put(\n       key(userId),\n       MemCacheValueIgnoreVersion(watchbar))\n     redisCache.saveWatchbar(userId, watchbar)\n   }\n \n \n-  def markPageAsUnreadInWatchbar(userId: UserId, pageId: PageId): Unit = {\n-    val watchbar = getOrCreateWatchbar(userId)\n-    val newWatchbar = watchbar.markPageAsUnread(pageId)\n-    saveWatchbar(userId, newWatchbar)\n+  def markPageAsUnreadInWatchbar(userId: UserId, pageId: PageId): U = {\n+    getAnyWatchbar(userId) foreach { watchbar =>\n+      val newWatchbar = watchbar.markPageAsUnread(pageId)\n+      saveWatchbar(userId, newWatchbar)\n+    }\n   }\n \n "
    },
    {
      "sha": "6f2c25625ca479b51b0fb7666769576fc5091c7c",
      "filename": "appsv/server/talkyard/server/JsX.scala",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -263,14 +263,18 @@ object JsX {   RENAME // to JsonPaSe\n       \"bio\" -> JsStringOrNull(user.about),\n       \"websiteUrl\" -> JsStringOrNull(user.website),\n       \"location\" -> JsStringOrNull(user.country),\n-      \"seeActivityMinTrustLevel\" -> JsNumberOrNull(user.seeActivityMinTrustLevel.map(_.toInt)),\n+      \"seeActivityMinTrustLevel\" -> JsNumberOrNull(user.privPrefs.seeActivityMinTrustLevel.map(_.toInt)),\n       \"avatarTinyHashPath\" -> JsStringOrNull(user.tinyAvatar.map(_.hashPath)),\n       \"avatarSmallHashPath\" -> JsStringOrNull(user.smallAvatar.map(_.hashPath)),\n       \"avatarMediumHashPath\" -> JsStringOrNull(user.mediumAvatar.map(_.hashPath)),\n       \"suspendedTillEpoch\" -> DateEpochOrNull(user.suspendedTill),  // REMOVE\n       \"suspendedTillMs\" -> DateEpochOrNull(user.suspendedTill),  // RENAME\n       \"effectiveTrustLevel\" -> user.effectiveTrustLevel.toInt)\n \n+    // Currently needs to be public, see [some_pub_priv_prefs].\n+    userJson = userJson.addAnyInt32(\"maySendMeDmsTrLv\", user.privPrefs.maySendMeDmsTrLv)\n+    userJson = userJson.addAnyInt32(\"mayMentionMeTrLv\", user.privPrefs.mayMentionMeTrLv)\n+\n     if (callerIsStaff_ || callerIsUserHerself) {\n       val anyReviewer = user.reviewedById.flatMap(usersById.get)\n       val safeEmail =\n@@ -321,6 +325,19 @@ object JsX {   RENAME // to JsonPaSe\n   }\n \n \n+  def memberPrivacyPrefsFromJson(json: JsValue): MemberPrivacyPrefs = {\n+    MemberPrivacyPrefs(\n+          seeActivityMinTrustLevel =\n+              parseOptInt32(json, \"seeActivityTrLv\", altField = \"seeActivityMinTrustLevel\")\n+                  .flatMap(TrustLevel.fromInt),\n+          maySendMeDmsTrLv =\n+              parseOptInt32(json, \"maySendMeDmsTrLv\").flatMap(TrustLevel.fromInt),\n+          mayMentionMeTrLv =\n+              parseOptInt32(json, \"mayMentionMeTrLv\").flatMap(TrustLevel.fromInt),\n+          )\n+  }\n+\n+\n   /// ts: Session\n   def JsSession(sess: TySessionInDbMaybeBad, inclPart1: Bo = true): JsObject = {\n     // Don't include the actual session id. (That is, exclude parts 2 – 5. *Could* maybe"
    },
    {
      "sha": "2fba6c5b6796319cb763085ba1e9a0fe6947c31e",
      "filename": "appsv/server/talkyard/server/PostRenderer.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2FPostRenderer.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2FPostRenderer.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2FPostRenderer.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -20,6 +20,7 @@ package talkyard.server\n import com.debiki.core._\n import com.debiki.core.Prelude.die\n import debiki.{Nashorn, TextAndHtml}\n+import talkyard.server.rendr.NashornParams\n \n \n case class PostRendererSettings(\n@@ -65,13 +66,13 @@ class PostRenderer(private val nashorn: Nashorn) {\n       }\n     }\n     else {\n-      // Reuse @mentions? [4WKAB02]\n+      // Reuse @mentions? [4WKAB02] [filter_mentions]\n+      val renderParams = NashornParams(site,\n+            embeddedOriginOrEmpty = settings.embeddedOriginOrEmpty,\n+            allowClassIdDataAttrs = isBody, followLinks = followLinks,\n+            mayMention = _ => Map.empty.withDefaultValue(true))\n       val renderResult = nashorn.renderAndSanitizeCommonMark(\n-          post.currentSource,\n-          site,\n-          embeddedOriginOrEmpty = settings.embeddedOriginOrEmpty,\n-          allowClassIdDataAttrs = isBody,\n-          followLinks = followLinks)\n+            post.currentSource, renderParams)\n       renderResult.safeHtml\n     }\n   }"
    },
    {
      "sha": "e6428051785825f54827138ff87f34824cf083b0",
      "filename": "appsv/server/talkyard/server/authz/Authz.scala",
      "status": "modified",
      "additions": 45,
      "deletions": 11,
      "changes": 56,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -32,9 +32,8 @@ object MayMaybe {\n }\n \n \n-\n sealed trait AuthzCtx {\n-  def requester: Option[Participant]\n+  def requester: Opt[Pat]\n   def groupIdsUserIdFirst: immutable.Seq[GroupId]\n \n   final def isStaff: Bo = requester.exists(_.isStaff)\n@@ -81,39 +80,69 @@ trait AuthzCtxOnPats extends AuthzCtx {\n \n \n /** Quicker to create than a full AuthzCtxOnForum, but lacks info about what cats\n-  * and pages the reqer may see,\n+  * and forum pages the reqer may see. However, enough for access checking DM:s\n+  * (then, having been added to a DM, or being member of a group that's been\n+  * added to the DM, is enough).\n   */\n-case class AuthzCtxOnPatsOnly(\n-  requester: Opt[Pat],\n+case class AuthzCtxOnPatsNoReqer(\n   groupIdsUserIdFirst: ImmSeq[GroupId],\n   // tooManyPermsOnPats: ImmSeq[PermsOnPats], — later\n   )\n   extends AuthzCtx with AuthzCtxOnPats {\n \n-  //def maySeeOthersEmailAddrs: Bo = requester.exists(_.isAdmin)\n+  def requester: Opt[Pat] = None\n+}\n+\n+\n+sealed trait WithReqer {\n+  def theReqer: Pat\n }\n \n \n+trait AuthzCtxWithReqer extends AuthzCtx with AuthzCtxOnPats with WithReqer {\n+  def requester: Opt[Pat] = Some(theReqer)\n+}\n+\n+case class AuthzCtxOnPatsWithReqer(theReqer: Pat, groupIdsUserIdFirst: ImmSeq[MemId])\n+  extends AuthzCtxWithReqer {}\n+\n+\n trait AuthzCtxOnPages extends AuthzCtx {\n   def tooManyPermissions: ImmSeq[PermsOnPages]\n }\n \n \n+/** AuthZ info about the requester (if any) on both contents and other participants.\n+  */\n+trait AuthzCtxOnAll extends AuthzCtx with AuthzCtxOnPats with AuthzCtxOnPages {\n+  def isPublic: Bo = requester.isEmpty\n+}\n+\n /** Includes permission info about all types of things in the community,\n   * e.g. not just pages, but also pats and tags/badges.\n   */\n-case class AuthzCtxOnForum(   // maybe rename to AuthzCtxOnAll ?\n+// REFACTOR: Change to AuthzCtxOnAllNoReqer and use AuthzCtxOnAllWithReqer if there is a requer?\n+// And use trait AuthzCtxOnAll at other places, insetad of this impl class.\n+// groupIdsUserIdFirst would be just Some(EveryoneId)? (a list of len 1)\n+case class AuthzCtxOnForum(\n   requester: Opt[Pat],\n   groupIdsUserIdFirst: immutable.Seq[GroupId],\n   // rename to tooManyPermsOnPages? Will also be a tooManyPermsOnPats, see above.\n   tooManyPermissions: immutable.Seq[PermsOnPages],\n   )\n-  extends AuthzCtx with AuthzCtxOnPats with AuthzCtxOnPages {\n+  extends AuthzCtxOnAll {}\n \n-  def isPublic: Bo = requester.isEmpty\n+\n+case class AuthzCtxOnAllWithReqer(\n+  theReqer: Pat,\n+  groupIdsUserIdFirst: ImmSeq[GroupId],\n+  tooManyPermissions: ImmSeq[PermsOnPages],\n+  )\n+  extends AuthzCtxOnAll with AuthzCtxWithReqer {\n }\n \n \n+\n /*  Delete this?\n case class CategoryAuthzContext(\n   requester: Option[User],\n@@ -307,6 +336,8 @@ object Authz {\n   }\n \n \n+  /** Sync w ts:  store_mayIReply()\n+    */\n   def mayPostReply(\n     userAndLevels: UserAndLevels,\n     groupIds: immutable.Seq[GroupId],\n@@ -539,15 +570,18 @@ object Authz {\n \n       // Only page participants may see things like private chats. [PRIVCHATNOTFS]\n       if (meta.pageType.isPrivateGroupTalk) {\n-        val thePageMembers = pageMembers getOrDie \"EdE2SUH5G\"\n+        val thePageMembers: Set[MembId] = pageMembers getOrDie \"EdE2SUH5G\"\n         val theUser = user getOrElse {\n           return MayWhat.mayNotSee(\"EdE0SEE0USER\")\n         }\n \n         if (!theUser.isMember)\n           return MayWhat.mayNotSee(\"EdE0SEE0MBR\")\n \n-        if (!thePageMembers.contains(theUser.id))\n+        val userIsMember: Bo = thePageMembers contains theUser.id\n+        // This is O(n) if `contains` is O(1), otherwise O(n log m), right. [OnLogn]\n+        val groupIsMember = () => groupIds.exists(gId => thePageMembers contains gId)\n+        if (!userIsMember && !groupIsMember())\n           return MayWhat.mayNotSee(\"EdE0SEE0PAGEMBR\")\n \n         isPageMember = true"
    },
    {
      "sha": "8e479d5cf875c4b7ed59ef931c0d0f96fa498997",
      "filename": "appsv/server/talkyard/server/authz/AuthzSiteDaoMixin.scala",
      "status": "modified",
      "additions": 23,
      "deletions": 1,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -47,7 +47,16 @@ trait AuthzSiteDaoMixin {\n \n   def getAuthzContextOnPats(pat: Opt[Pat]): AuthzCtxOnPats = {\n     val groupIds = getGroupIdsOwnFirst(pat)\n-    AuthzCtxOnPatsOnly(pat, groupIds)\n+    pat match {\n+      case None => AuthzCtxOnPatsNoReqer(groupIds)\n+      case Some(thePat) => AuthzCtxOnPatsWithReqer(thePat, groupIds)\n+    }\n+  }\n+\n+\n+  def getAuthzCtxWithReqer(reqer: Pat): AuthzCtxWithReqer = {\n+    val groupIds = getGroupIdsOwnFirst(Some(reqer))\n+    AuthzCtxOnPatsWithReqer(reqer, groupIds)\n   }\n \n \n@@ -64,6 +73,19 @@ trait AuthzSiteDaoMixin {\n   }\n \n \n+  def anyAuthCtxOnPagesForPat(anyPat: Opt[Pat]): Opt[AuthzCtxOnAllWithReqer] = Some {\n+    val pat = anyPat getOrElse { return None }\n+    getAuthzCtxOnPagesForPat(pat)\n+  }\n+\n+\n+  def getAuthzCtxOnPagesForPat(pat: Pat): AuthzCtxOnAllWithReqer = {\n+    val groupIds = getGroupIdsOwnFirst(Some(pat))\n+    val permissions = getPermsForPeople(groupIds)\n+    AuthzCtxOnAllWithReqer(pat, groupIds, permissions)\n+  }\n+\n+\n   /** Returns (may-see, debug-code) where debug-code is any\n     * why-forbidden reason code..\n     *"
    },
    {
      "sha": "195a1a36160fd2ce8c3e03beb080514a9f88fea6",
      "filename": "appsv/server/talkyard/server/dao/StaleStuff.scala",
      "status": "modified",
      "additions": 14,
      "deletions": 9,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2FStaleStuff.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2FStaleStuff.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2FStaleStuff.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -60,11 +60,6 @@ class StaleStuff {\n   private val _stalePages = mut.Map[PageId, StalePage]()\n   private val _stalePpIdsMemCacheOnly = mut.Set[PatId]()\n \n-  def nonEmpty: Bo =\n-    _allPagesStale ||\n-    _stalePages.nonEmpty ||\n-    _stalePpIdsMemCacheOnly.nonEmpty\n-\n \n   // ----- Participants\n \n@@ -210,19 +205,29 @@ class StaleStuff {\n \n \n   def clearStaleStuffInMemory(dao: debiki.dao.SiteDao): U = {\n+\n+    // ----- Pages\n+\n     if (areAllPagesStale) {\n       // Currently then need to: (although clears unnecessarily much)\n       dao.memCache.clearThisSite()\n     }\n-    else if (nonEmpty) {\n-      staleParticipantIdsInMem foreach { ppId =>\n-        dao.removeUserFromMemCache(ppId)\n-      }\n+    else if (_stalePages.nonEmpty) {\n       stalePageIdsInMem foreach { pageId =>\n         dao.refreshPageInMemCache(pageId)\n       }\n       dao.uncacheLinks(this)\n     }\n+\n+    // ----- Pats\n+\n+    // dao.memCache.clearThisSite() above doesn't uncache pats — because pat cache items\n+    // ignore the site version. [pat_cache]\n+    if (_stalePpIdsMemCacheOnly.nonEmpty) {\n+      staleParticipantIdsInMem foreach { ppId =>\n+        dao.removeUserFromMemCache(ppId)\n+      }\n+    }\n   }\n \n }"
    },
    {
      "sha": "93d77e956b567f962ec18a938162239534bab362",
      "filename": "appsv/server/talkyard/server/dao/package.scala",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2Fpackage.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -0,0 +1,10 @@\n+package talkyard.server\n+\n+import com.debiki.core.SiteTx\n+\n+package object dao {\n+\n+  case class TxCtx(tx: SiteTx, staleStuff: StaleStuff)\n+  // + maxLimits, rateLimits?\n+\n+}"
    },
    {
      "sha": "a9fae67084e38b4ee16593bf10a84969263c8e55",
      "filename": "appsv/server/talkyard/server/http/DebikiRequest.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FDebikiRequest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FDebikiRequest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FDebikiRequest.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -25,7 +25,7 @@ import debiki._\n import debiki.dao.{SiteDao, SystemDao}\n import debiki.EdHttp._\n import talkyard.server.TyContext\n-import talkyard.server.authz.ForumAuthzContext\n+import talkyard.server.authz.{AuthzCtxWithReqer, ForumAuthzContext, AuthzCtxOnAllWithReqer}\n import talkyard.server.security.{BrowserId, SidOk, SidStatus, XsrfOk}\n import java.{util => ju}\n import play.api.mvc._\n@@ -117,7 +117,10 @@ abstract class AuthnReqHeader extends SomethingToRateLimit {\n \n   def whoOrUnknown: Who = Who(requesterIdOrUnknown, theBrowserIdData)\n \n+  def authzCtxWithReqer: AuthzCtxWithReqer = dao.getAuthzCtxWithReqer(theRequester)\n   lazy val authzContext: ForumAuthzContext = dao.getForumAuthzContext(requester)\n+  lazy val authzCtxOnAllWithReqer: Opt[AuthzCtxOnAllWithReqer] =\n+    dao.anyAuthCtxOnPagesForPat(reqer)\n \n   def theBrowserIdData = BrowserIdData(ip = ip, idCookie = browserId.map(_.cookieValue),\n     fingerprint = 0) // skip for now"
    },
    {
      "sha": "fe3e1242fa96b87cae640587d2341c6c98666f54",
      "filename": "appsv/server/talkyard/server/notf/NotificationGenerator.scala",
      "status": "modified",
      "additions": 159,
      "deletions": 69,
      "changes": 228,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotificationGenerator.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotificationGenerator.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotificationGenerator.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -23,6 +23,7 @@ import debiki._\n import debiki.Globals.isDevOrTest\n import debiki.EdHttp.throwForbiddenIf\n import talkyard.server.notf.NotificationGenerator._\n+import talkyard.server.rendr.NashornParams\n import scala.collection.{immutable, mutable}\n import scala.util.matching.Regex\n \n@@ -53,7 +54,7 @@ case class NotificationGenerator(\n   tx: SiteTransaction,\n   dao: debiki.dao.SiteDao,\n   nashorn: Nashorn,\n-  config: debiki.Config) {\n+  config: debiki.Config) extends talkyard.server.TyLogging {\n \n   dieIf(Globals.isDevOrTest && tx.siteId != dao.siteId, \"TyE603RSKHAN3\")\n \n@@ -81,6 +82,7 @@ case class NotificationGenerator(\n   private var anyAuthor: Option[Participant] = None\n   private def author: Participant = anyAuthor getOrDie \"TyE5RK2WAG8\"\n   private def siteId = tx.siteId\n+  override def anySiteId = Some(tx.siteId)\n   private lazy val site: SiteIdHostnames = dao.theSite()\n \n   def generatedNotifications: Notifications =\n@@ -171,8 +173,8 @@ case class NotificationGenerator(\n         // (If the replying-to-post is by a group (currently cannot happen), and someone in the group\n         // replies to that group, then hen might get a notf about hens own reply. Fine, not much to\n         // do about that.)\n-        makeAboutPostNotfs(\n-              notfType, newPost, inCategoryId = page.categoryId, replyingToUser)\n+        _makeAboutPostNotfs(\n+              notfType, about = newPost, inCategoryId = page.categoryId, replyingToUser)\n       }\n     }\n \n@@ -192,27 +194,33 @@ case class NotificationGenerator(\n     BUG // harmless. If a mention is removed, and added back, a new notf is sent. TyT2ABKS057\n     // Probably don't want that?\n     if (!skipMentions) {\n-      val mentionedUsernames = anyNewTextAndHtml.map(_.usernameMentions) getOrElse findMentions(  // [nashorn_in_tx] [save_post_lns_mentions]\n-            newPost.approvedSource getOrDie \"DwE82FK4\", site, nashorn)\n+      val mentionedUsernames: Set[Username] =\n+            anyNewTextAndHtml.map(_.usernameMentions) getOrElse findMentions(  // [nashorn_in_tx] [save_post_lns_mentions]\n+                newPost.approvedSource getOrDie \"DwE82FK4\", site, nashorn)\n \n-      var mentionedMembers: Set[Participant] = mentionedUsernames.flatMap(tx.loadMemberByUsername)\n+      var mentionedMembers: Set[MemberVb] = tx.loadMembersVbByUsername(mentionedUsernames).toSet\n \n       // Can create more mention aliases, like @new-members (= trust levels new & basic only),\n       // and @guests and @here-now and @everyone (= all members)\n       val allMentioned = mentionsAllInChannel(mentionedUsernames)\n       if (allMentioned) {\n-        if (mayMentionGroups(author)) {\n+        if (mayMentionGroups(author)) {  // [who_may_mention_all]\n+          // Notify all page members including members of [groups that are page members],\n+          // except for anyone who is also mentioned directly via hens @username — hen\n+          // will be @username-mentioned only.\n           // ((If user U is a page member, and also mentioned via group G,\n-          // then, removing G.id here, won't remove U from moreToAdd.\n-          // Instead, U is added to moreToAdd, and will be @channel mentioned,\n+          // that is, U is mentioned indirectly both via '@all' and via '@group_name',\n+          // then, removing G.id here, won't remove U from moreIds.\n+          // Instead, U is added to moreIds, and will be @channel mentioned,\n           // instead of @group_name mentioned. Doesn't matter?))\n-          val moreToAdd: Set[UserId] = pageMemberIds -- mentionedMembers.map(_.id)\n-          mentionedMembers ++= tx.loadUsersAsMap(moreToAdd).values.toSet\n+          val moreIds: Set[UserId] = pageMemberIds -- mentionedMembers.map(_.id)\n+          val moreMentions: ImmSeq[MemberVb] = tx.loadMembersVbById(moreIds)\n+          mentionedMembers ++= moreMentions\n         }\n       }\n \n       for {\n-        userOrGroup <- mentionedMembers\n+        userOrGroup: MembVb <- mentionedMembers\n         // Right now ignore self-mentions. Later, allow? Could work like a personal to-do item?\n         // Then would have to remove a db constraint. Could do later. Right now feels best\n         // to keep it so it'll catch bugs.\n@@ -222,27 +230,34 @@ case class NotificationGenerator(\n         // Authz checks that we won't notify people outside a private chat\n         // about any mentions (because they cannot see the chat). [PRIVCHATNOTFS]\n       } {\n-        makeAboutPostNotfs(\n-            NotificationType.Mention, newPost, inCategoryId = page.categoryId,\n-            userOrGroup)\n+        _makeAboutPostNotfs(\n+              NotificationType.Mention,\n+              about = newPost,\n+              inCategoryId = page.categoryId,\n+              sendTo = userOrGroup,\n+              sentFrom = Some(author))\n       }\n     }\n \n     // Indirect replies.\n     // If the post @mentions some of those indirectly replied to, then we've won't\n     // generate any indirect reply notfs to them — they'll get a Mention\n     // notf only (generated above).\n-    maybeGenReplyNotf(NotificationType.IndirectReply, ancestorsParentFirst drop 1)\n+    maybeGenReplyNotf(\n+          NotificationType.IndirectReply, ancestorsParentFirst drop 1)\n \n     // People watching this topic or category\n-    genWatchingSomethingNotfs(page, newPost, pageMemberIds)\n+    _genWatchingSomethingNotfs(\n+          page, about = newPost, pageMemberIds, sentFrom = author)\n \n     generatedNotifications\n   }\n \n \n-  private def genWatchingSomethingNotfs(page: Page, newPost: Post,\n-          pageMemberIds: Set[UserId]): U = {\n+  private def _genWatchingSomethingNotfs(page: Page, about: Post,\n+          pageMemberIds: Set[UserId], sentFrom: Pat): U = {\n+\n+    val newPost = about\n \n     val isEmbDiscFirstReply =\n           page.pageType == PageType.EmbeddedComments &&\n@@ -394,14 +409,15 @@ case class NotificationGenerator(\n \n     makeNewPostSubscrNotfFor(\n           allPrefsOnPage, newPost, isEmbDiscFirstReply, minNotfLevel,\n-          memberIdsHandled, wantSilencePatIds)\n+          memberIdsHandled, wantSilencePatIds,\n+          sentFrom = sentFrom)\n \n     // If private page, skip cat & whole site notf prefs\n     // — only page members and people (like moderators) who explicitly follow\n     // this page, get notified. — So, forum admins won't get notified about\n     // new private group chats for example (unless they get added).\n     if (page.meta.pageType.isPrivateGroupTalk)\n-      return\n+      return ()\n \n     // ----- Ancestor categories [subcats]\n \n@@ -412,7 +428,8 @@ case class NotificationGenerator(\n             addWhy(notfPrefsOnCategory,\n                   s\"You're subscribed to category '${ancCat.name}'\"),\n             newPost, isEmbDiscFirstReply, minNotfLevel, memberIdsHandled,\n-            wantSilencePatIds)\n+            wantSilencePatIds,\n+            sentFrom = sentFrom)\n     }\n \n     // ----- Tags\n@@ -431,7 +448,8 @@ case class NotificationGenerator(\n     makeNewPostSubscrNotfFor(\n           addWhy(notfPrefsOnSite, \"You've subscribed to the whole site\"),\n           newPost, isEmbDiscFirstReply, minNotfLevel, memberIdsHandled,\n-          wantSilencePatIds)\n+          wantSilencePatIds,\n+          sentFrom = sentFrom)\n   }\n \n \n@@ -444,33 +462,34 @@ case class NotificationGenerator(\n   }*/\n \n \n-  /** Private messages are sent to all toUserIds, but not to any user mentioned in the\n+  /** Direct messages are sent to all toUserIds, but not to any user mentioned in the\n     * message.\n     */\n   def generateForMessage(sender: Participant, pageBody: Post, toUserIds: Set[UserId])\n         : Notifications = {\n     unimplementedIf(pageBody.approvedById.isEmpty, \"Unapproved private message? [EsE7MKB3]\")\n     anyAuthor = Some(tx.loadTheParticipant(pageBody.createdById))\n     tx.loadParticipants(toUserIds.filter(_ != sender.id)) foreach { user =>\n-      makeAboutPostNotfs(\n-          // But what if is 2 ppl chat — then would want to incl 1st message instead.\n-          NotificationType.Message, pageBody, inCategoryId = None, user)\n+      _makeAboutPostNotfs(\n+          // But what if is 2 ppl chat — then would want to incl 1st message instead? Because\n+          // the first (the Orig Post) is just an auto gen \"this is a chat\" or sth text.\n+          NotificationType.Message, about = pageBody, inCategoryId = None, sendTo = user)\n     }\n     generatedNotifications\n   }\n \n \n-  private def makeAboutPostNotfs(\n+  private def _makeAboutPostNotfs(\n         notfType: NotificationType,\n-        post: Post,\n+        about: Post,\n         inCategoryId: Option[CategoryId],\n         sendTo: Participant,\n         sentFrom: Option[Participant] = None, // default is post author\n         minNotfLevel: NotfLevel = NotfLevel.Hushed): Unit = {\n \n     // legacy variable names CLEAN_UP but not now\n     val toUserMaybeGroup = sendTo\n-    val newPost = post\n+    val newPost = about\n \n     if (sentToUserIds.contains(toUserMaybeGroup.id))\n       return\n@@ -483,12 +502,29 @@ case class NotificationGenerator(\n       }\n     }\n \n+    val isMention = notfType == NotificationType.Mention\n+    val isDirMsg = notfType == NotificationType.Message\n+\n+    // [filter_mentions] Could be better to do this when saving a post, so that the author\n+    // will know for sure that the people hen could mention when composing the post,\n+    // will get mentioned. But the way things work now, if a mentioned person changes hens\n+    // priv prefs before the post gets approved, then, the mention might get removed here.\n+    if (isMention && !author.mayMention(toUserMaybeGroup))\n+      return\n+\n+    // [filter_dms]\n+    if (isDirMsg && !author.mayMessage(toUserMaybeGroup)) {\n+      bugWarn(\"TyEBADMSG39546\", s\"Message sent although wasn't allowed to? From: ${\n+            author.id}, to: ${toUserMaybeGroup.id}.\")\n+      return\n+    }\n+\n     // Access control.\n     // Sync w [2069RSK25]. Test: [2069RSK25-A]\n     // (If this is a group and it may not see the post, then don't generate any\n     // notfs on behalf of this group, even if there're individual group *members*\n     // who may see the post (because of other groups they're in). [5AKTG7374])\n-    val pageMeta = tx.loadPageMeta(newPost.pageId) getOrDie \"TyE05WKSJF3\"\n+    tx.loadPageMeta(newPost.pageId) getOrDie \"TyE05WKSJF3\" // <— for troubleshooting? Or what's this?\n     val (maySeePost, whyNot) = dao.maySeePost(newPost, Some(toUserMaybeGroup),\n         maySeeUnlistedPages = true)(tx)\n     if (!maySeePost.may)\n@@ -501,13 +537,13 @@ case class NotificationGenerator(\n       else {\n         // Is a group mention / a reply to a post by a group.\n \n-        val isMention = notfType == NotificationType.Mention\n         val toGroup = toUserMaybeGroup\n         val groupId = toGroup.id\n \n         throwForbiddenIf(isMention && groupId == Group.EveryoneId,\n           \"TyEBDGRPMT01\", s\"May not mention ${toGroup.idSpaceName}\")\n \n+        CLEAN_UP; REMOVE // this later? There's another check above [filter_mentions].\n         if (isMention && !mayMentionGroups(author)) {\n           // For now, may still mention core members, staff and admins, so can ask how the site works.\n           throwForbiddenIf(\n@@ -528,7 +564,8 @@ case class NotificationGenerator(\n         dieIf(groupMembers.exists(_.isGuest), \"TyE7ABK402\")\n \n         // If loading e.g. the AllMembers group, all higher trust level groups get loaded too,\n-        // because they're members of the AllMembers group. [NESTDGRPS]\n+        // because they're members of the AllMembers group. But later, if [sub_groups] supported,\n+        // then, recursively expand any group tree?\n         groupMembers = groupMembers.filter(!_.isGroup)\n         // Alternatively:\n         /*\n@@ -542,15 +579,32 @@ case class NotificationGenerator(\n         throwForbiddenIf(isMention && groupMembers.size > maxMentions, \"TyEMNYMBRS\",\n           s\"${groupMembers.size} group members — but may not group-mention more than $maxMentions\")\n \n+        // Could filter away group members who the author may not mention,\n+        // here instead?  [.move_may]\n+\n         // UX SHOULD use a group notf type instead, it'll look a bit different: look less important.\n         (groupMembers, notfType)\n       }\n \n     for {\n       toPat <- toPats\n       toUserId = toPat.id\n+      // Later: Could recursively expand [sub_groups], notify everyone in a \"group tree\".\n       if toUserId <= MaxGuestId || Participant.LowestNormalMemberId <= toUserId\n       if !sentToUserIds.contains(toUserId)\n+\n+      // Move these may-mention and may-message tests to the  toUserMaybeGroup.isGroup\n+      // if branch above? No need to be done here again if is not-a-group? [.move_may]\n+      // -------\n+      // (If sendTo is a group, and author may mention that group, but author may not\n+      // mention group member toPat, then what? For now, skip such mentions.\n+      // Maybe depends: sometimes, if pat is an overworked admin, hen wants no notification.\n+      // But maybe if hen is in a Support group, then, hen might want to get notified\n+      // — but maybe only via the group, might not want to get mentioned individually.\n+      // Later, this could be a per user and group setting. [inherit_group_priv_prefs])\n+      if !isMention || author.mayMention(toPat) // [filter_mentions] here too\n+      if !isDirMsg || author.mayMessage(toPat)  // [filter_dms]\n+      // -------\n     } {\n       // Generate notifications, regardless of email settings, so shown in the user's inbox.\n       // We won't send any *email* though, if the user has unsubscribed from such emails.\n@@ -590,7 +644,8 @@ case class NotificationGenerator(\n   private def makeNewPostSubscrNotfFor(\n         notfPrefs: Seq[PageNotfPrefAndWhy], newPost: Post,\n         isEmbDiscFirstReply: Bo, minNotfLevel: NotfLevel,\n-        memberIdsHandled: MutSet[PatId], wantSilencePatIds: MutSet[PatId]): U = {\n+        memberIdsHandled: MutSet[PatId], wantSilencePatIds: MutSet[PatId],\n+        sentFrom: Pat): U = {\n \n     val membersById = tx.loadParticipantsAsMap(notfPrefs.map(_.peopleId))\n     val memberIdsHandlingNow = mutable.HashSet[MemberId]()\n@@ -633,7 +688,25 @@ case class NotificationGenerator(\n       groupMaySee = maySeePost(group)\n       if groupMaySee  // or ...\n       groupMembers = tx.loadGroupMembers(group.id)\n+\n+      // Skip unwanted DMs. [filter_dms] If this is a DM sent to a group, some\n+      // group members might not want DM:s from this sender — for example, an admin\n+      // who is short of time, and wants hents other co-workers to answer questions\n+      // from new members sent to @staff,\n+      // However, in some cases one might want to get notified via a group but not\n+      // directly — e.g. if one is in a @support group, but don't want to be messaged\n+      // about support privately (only via the group). This can be a group membership\n+      // setting. [inherit_group_priv_prefs]\n       member <- groupMembers\n+      isDirMsg = pageMeta.pageType.isPrivateGroupTalk\n+      if !isDirMsg || sentFrom.mayMessage(member)\n+      // Later, maybe:  sentFrom.mayMessage(member, viaGroup = group)\n+      // and then the member's group membership settings matter too.\n+      //\n+      // But no need to:\n+      //   if !isDirMsg || sentFrom.mayMessage(group)\n+      // because the group itself is already explicitly subscribed to notifications.\n+\n       // ... or what if a group has enabled site wide notfs, and cannot see category C,\n       // but user U is in that group *can* see C (because of other group hen is in)\n       // — then, should U get notified about topics in C or not?\n@@ -659,7 +732,7 @@ case class NotificationGenerator(\n       // Muted, and another category notf pref from another group, says EveryPost — then the\n       // more chatty setting (EveryPost), wins. [CHATTYPREFS]\n       if (memberIdsHandled.contains(member.id))\n-        return\n+        return ()\n \n       memberIdsHandlingNow += member.id\n \n@@ -677,11 +750,11 @@ case class NotificationGenerator(\n         // (she wants silence).\n         TESTS_MISSING\n         wantSilenceHereafterPatIds.add(member.id)\n-        return\n+        return ()\n       }\n \n       if (member.id == newPost.createdById)\n-        return\n+        return ()\n \n       UX; COULD // NotificationType.NewPage instead? Especially if: isEmbDiscFirstReply.\n       genOneNotfMaybe(\n@@ -740,48 +813,53 @@ case class NotificationGenerator(\n         s\"appr.HtmlSan.: ${newPost.approvedHtmlSanitized}, safeHtml: ${textAndHtml.safeHtml} [TyE4WB78]\")\n     }\n \n-    val oldMentions: Set[String] =\n+    val oldMentions: Set[Username] =\n           findMentions(oldPost.approvedSource getOrDie \"TyE0YKW3\", site, nashorn)  // [nashorn_in_tx]\n \n-    val newMentions: Set[String] =\n+    val newMentions: Set[Username] =\n           anyNewTextAndHtml.map(_.usernameMentions) getOrElse findMentions(  // [nashorn_in_tx]\n                 newPost.approvedSource getOrDie \"DwE2BF81\", site, nashorn)\n \n-    val deletedMentions = oldMentions -- newMentions\n-    val createdMentions = newMentions -- oldMentions\n+    val deletedMentions: Set[Username] = oldMentions -- newMentions\n+    val createdMentions: Set[Username] = newMentions -- oldMentions\n+\n+    var mentionsDeletedForUsers: Set[MemberVb] =\n+          tx.loadMembersVbByUsername(deletedMentions).toSet\n \n-    var mentionsDeletedForUsers = deletedMentions.flatMap(tx.loadMemberByUsername)\n-    var mentionsCreatedForUsers = createdMentions.flatMap(tx.loadMemberByUsername)\n+    var mentionsCreatedForUsers: Set[MemberVb] =\n+          tx.loadMembersVbByUsername(createdMentions).toSet\n \n-    val newMentionsIncludesAll = mentionsAllInChannel(newMentions)\n-    val oldMentionsIncludesAll = mentionsAllInChannel(oldMentions)\n+    val newMentionsIncludesAll: Bo = mentionsAllInChannel(newMentions)\n+    val oldMentionsIncludesAll: Bo = mentionsAllInChannel(oldMentions)\n \n-    lazy val mayAddGroup =\n+    lazy val mayAddGroup: Bo =\n       mayMentionGroups(author)\n \n-    val mentionsForAllCreated = newMentionsIncludesAll && !oldMentionsIncludesAll && mayAddGroup\n-    val mentionsForAllDeleted = oldMentionsIncludesAll && !newMentionsIncludesAll\n+    val mentionsForAllCreated: Bo = newMentionsIncludesAll && !oldMentionsIncludesAll && mayAddGroup\n+    val mentionsForAllDeleted: Bo = oldMentionsIncludesAll && !newMentionsIncludesAll\n     dieIf(mentionsForAllCreated && mentionsForAllDeleted, \"EdE2WK4Q0\")\n \n     lazy val previouslyMentionedUserIds: Set[UserId] =\n-      tx.loadNotificationsAboutPost(newPost.id, NotificationType.Mention).map(_.toUserId).toSet\n+          tx.loadNotificationsAboutPost(newPost.id, NotificationType.Mention\n+                                          ).map(_.toUserId).toSet\n \n     if (mentionsForAllDeleted) {\n       // CLEAN_UP COULD simplify this whole function — needn't load mentionsDeletedForUsers above.\n-      val usersMentionedAfter = newMentions.flatMap(tx.loadUserByPrimaryEmailOrUsername)\n+      val usersMentionedAfter = tx.loadMembersVbByUsername(newMentions).toSet\n       val toDelete: Set[UserId] = previouslyMentionedUserIds -- usersMentionedAfter.map(_.id)\n       // (COULD_OPTIMIZE: needn't load anything here — we have the user ids already.)\n-      mentionsDeletedForUsers = tx.loadUsersAsMap(toDelete).values.toSet\n+      // But better skip loading above instead, see CLEAN_UP above.\n+      mentionsDeletedForUsers = tx.loadMembersVbById(toDelete).toSet\n     }\n \n     if (mentionsForAllCreated) {\n       val pageMemberIds: Set[UserId] = tx.loadMessageMembers(newPost.pageId)\n       mentionsDeletedForUsers = mentionsDeletedForUsers.filterNot(u => pageMemberIds.contains(u.id))\n       BUG; REFACTOR // [5BKR03] in rare cases, people might get two notfs: if they're a page member,\n       // and also if they're in a group that gets @group_mentioned now, when editing.\n-      val moreToAdd: Set[UserId] =\n-        pageMemberIds -- previouslyMentionedUserIds -- mentionsCreatedForUsers.map(_.id)\n-      mentionsCreatedForUsers ++= tx.loadUsersAsMap(moreToAdd).values.toSet\n+      val moreIds: Set[UserId] =\n+            pageMemberIds -- previouslyMentionedUserIds -- mentionsCreatedForUsers.map(_.id)\n+      mentionsCreatedForUsers ++= tx.loadMembersVbById(moreIds)\n     }\n \n     // Delete mentions.\n@@ -797,16 +875,19 @@ case class NotificationGenerator(\n \n     // Create mentions.\n     for {\n-      user <- mentionsCreatedForUsers\n-      if user.id != newPost.createdById\n+      mentionedMember <- mentionsCreatedForUsers\n+      if mentionedMember.id != newPost.createdById\n     } {\n       BUG // harmless. might mention people again, if previously mentioned directly,\n       // and now again via a @group_mention. See REFACTOR above.\n       BUG // harmless:  Notf.NewPost.createdAt should be the date of the edit,\n       // not the post creation date\n-      makeAboutPostNotfs(\n-            NotificationType.Mention, newPost,\n-            inCategoryId = pageMeta.flatMap(_.categoryId), user)\n+      _makeAboutPostNotfs(\n+            NotificationType.Mention,\n+            about = newPost,\n+            inCategoryId = pageMeta.flatMap(_.categoryId),\n+            sendTo = mentionedMember,\n+            sentFrom = Some(author))\n     }\n \n     generatedNotifications\n@@ -824,8 +905,8 @@ case class NotificationGenerator(\n       return generatedNotifications\n     }\n \n-    makeAboutPostNotfs(\n-          NotificationType.OneLikeVote, post, inCategoryId = inCategoryId,\n+    _makeAboutPostNotfs(\n+          NotificationType.OneLikeVote, about = post, inCategoryId = inCategoryId,\n           sendTo = upvotedPostAuthor, sentFrom = Some(voter))\n \n     generatedNotifications\n@@ -846,8 +927,8 @@ case class NotificationGenerator(\n       // This is about the new (from the notf recipient's point of view) post,\n       // so the notf is from the post author, not from the one who added the tag\n       // (unless hen is the author).\n-      makeAboutPostNotfs(\n-            NotificationType.PostTagged, post,\n+      _makeAboutPostNotfs(\n+            NotificationType.PostTagged, about = post,\n             inCategoryId = pageMeta.flatMap(_.categoryId),\n             sendTo = user)\n     }\n@@ -876,10 +957,10 @@ case class NotificationGenerator(\n     // One cannot talk with deactivated or deleted pats, or System or Sysbot.\n     // (But one can mention e.g. @admins or @core_members — built-in pats.)\n     if (toPat.isGone || toPat.isSystemOrSysbot)\n-      return\n+      return ()\n \n     if (toPat.isSuspendedAt(tx.now) && !isPrivMsgFromStaff)\n-      return\n+      return ()\n \n     val emailStatus: NotfEmailStatus =\n           if (avoidDuplEmailToUserIds.contains(toPat.id))\n@@ -892,7 +973,7 @@ case class NotificationGenerator(\n     }\n     else {\n       if (sentToUserIds.contains(toPat.id))\n-        return\n+        return ()\n \n       sentToUserIds += toPat.id\n     }\n@@ -906,13 +987,16 @@ case class NotificationGenerator(\n           byUserId = fromPatId,\n           createdAt = aboutPost.createdAt,\n           uniquePostId = aboutPost.id,\n+          smtpMsgIdPrefix = aboutPost.smtpMsgIdPrefix.map(_ + s\".${toPat.id}.$newNotfId\"),\n           emailStatus = emailStatus)\n   }\n \n \n   private def bumpAndGetNextNotfId(): NotificationId = {\n     nextNotfId match {\n       case None =>\n+        // Generate random 64 bit number instead?  Or a timestamp.  [avoid_glob_seq_nrs]\n+        // And have a look in the db so there's no collision.\n         nextNotfId = Some(tx.nextNotificationId())\n       case Some(id) =>\n         nextNotfId = Some(id + 1)\n@@ -930,6 +1014,8 @@ object NotificationGenerator {\n \n \n   def mayMentionGroups(user: Participant): Boolean = {\n+    REMOVE // Using the permission system instead: pats_t.may_mention_me_tr_lv_c.\n+    // But how is that going to work for \"virtual\" groups like @all and @here? [who_may_mention_all]\n     user.isStaffOrMinTrustNotThreat(TrustLevel.BasicMember)\n   }\n \n@@ -944,17 +1030,21 @@ object NotificationGenerator {\n     \"(?s)^(.*[^a-zA-Z0-9_])?@[a-zA-Z0-9_][a-zA-Z0-9_.-]*[a-zA-Z0-9].*\".r  // [UNPUNCT]\n \n \n-  def findMentions(text: String, site: SiteIdHostnames, nashorn: Nashorn): Set[String] = {\n+  // Try to remove? Save mentions in posts_t instead, see:  approved_html_sanitized_c.\n+  private def findMentions(text: St, site: SiteIdHostnames, nashorn: Nashorn): Set[St] = {\n     // Try to avoid rendering Commonmark source via Nashorn, if cannot possibly be any mentions:\n     if (!MaybeMentionsRegex.matches(text))\n       return Set.empty\n \n+    // Do twice? First to find all mentions, then, find out which ones one may not mention,\n+    // then, do again but color @someone_one_may_not_mention in gray not blue? [filter_mentions]\n     val result = nashorn.renderAndSanitizeCommonMark(\n       // BUG? COULD incl origin here, so links won't be interpreted relative any\n       // web browser client's address? — Right now, no images incl in reply notf emails\n       // anyway, so need not fix now.\n-      text, site, embeddedOriginOrEmpty = \"\",\n-      allowClassIdDataAttrs = false, followLinks = false)\n+      text, NashornParams(site, embeddedOriginOrEmpty = \"\",\n+            allowClassIdDataAttrs = false, followLinks = false,\n+            mayMention = _ => Map.empty.withDefaultValue(true)))\n \n     result.mentions\n   }"
    },
    {
      "sha": "93978589630540288da06560f197ece90802c991",
      "filename": "appsv/server/talkyard/server/notf/NotifierActor.scala",
      "status": "modified",
      "additions": 81,
      "deletions": 6,
      "changes": 87,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotifierActor.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotifierActor.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotifierActor.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -161,6 +161,7 @@ class NotifierActor (val systemDao: SystemDao, val siteDaoFactory: SiteDaoFactor\n         createdAt = now,\n         sendTo = user.email,\n         toUserId = Some(userId),\n+        aboutWhat = None,\n         subject = s\"[usability.testing.exchange] Reminder about giving feedback\",\n         bodyHtmlText = i\"\"\"\n           |<p>Hi $userName,</p>\n@@ -196,11 +197,12 @@ class NotifierActor (val systemDao: SystemDao, val siteDaoFactory: SiteDaoFactor\n           |-- the open source software that powers Usability Testing Exchange.)\n           |</p>\n           |\"\"\")\n-      dao.readWriteTransaction { tx =>\n+\n+      dao.writeTx { (tx, _) =>\n         tx.saveUnsentEmail(email)\n       }\n       globals.sendEmail(email, dao.siteId)\n-      dao.readWriteTransaction { tx =>\n+      dao.writeTx { (tx, _) =>\n         tx.updateSentEmail(\n           email.copy(sentOn = Some(globals.now().toJavaDate)))\n       }\n@@ -301,7 +303,20 @@ class NotifierActor (val systemDao: SystemDao, val siteDaoFactory: SiteDaoFactor\n     }\n \n     val site = siteDao.theSite()\n-    constructAndSendEmail(siteDao, site, user, notfs.take(MaxNotificationsPerEmail))\n+    val siteId = site.id\n+\n+    // Should have been sorted already. [older_notfs_emails]\n+    val notfsSorted = notfs.sortBy(_.id)\n+    warnDevDieIf(notfsSorted.map(_.id) != notfs.map(_.id), \"TyE502RKGL5\",\n+          s\"s$siteId: Notfs sort order appears random\")\n+\n+    // Currently sending [one_email_at_a_time], for threaded emails.\n+    COULD // group by page id, and send one email for all notfs about post on one page?\n+    val notfsToSendNow = notfsSorted.take(MaxNotificationsPerEmail)\n+    for (notf <- notfsToSendNow) {\n+      constructAndSendEmail(siteDao, site, user, Seq(notf))\n+    }\n+\n     None\n   }\n \n@@ -315,11 +330,16 @@ class NotifierActor (val systemDao: SystemDao, val siteDaoFactory: SiteDaoFactor\n \n     val anyOrigin = globals.originOf(site)\n \n+    // Note that, since notfs are sorted chronologically, when we generate this email,\n+    // then, emails about earlier posts (if any) on the same page have already been\n+    // generated, and we know their SMTP Message-ID:s,  [older_notfs_emails]\n+    // so we can include those ids in the 'In-Reply-To' and 'References' headers.\n     val email = constructEmail(siteDao, anyOrigin, user, userNotfs) getOrElse {\n       logger.debug(o\"\"\"Not sending any email to ${user.usernameOrGuestName} because the page\n         or the comment is gone or not approved or something like that.\"\"\")\n       return\n     }\n+\n     siteDao.saveUnsentEmailConnectToNotfs(email, userNotfs)\n \n     logger.debug(\"About to send email to \"+ email.sentTo)\n@@ -338,7 +358,7 @@ class NotifierActor (val systemDao: SystemDao, val siteDaoFactory: SiteDaoFactor\n \n     // Always use the same subject line, even if only 1 comment, so ends up in the same\n     // email thread. Include site name, so simpler for people to find the email.\n-    val subject = s\"[$siteName] New notifications\"   // I18N\n+    var subject = \"\"\n \n     // The following creates different and more specific email titles — but results\n     // in email clients creating many different email threads, making people annoyed\n@@ -380,9 +400,64 @@ class NotifierActor (val systemDao: SystemDao, val siteDaoFactory: SiteDaoFactor\n         subjText.toString\n       } */\n \n+    // This helps email clients create an email thread per Talkyard discussion page.\n+    // Later on, even comment sub threads so Mutt will work well.\n+    val (aboutWhat: Opt[EmailAbout], thisMsgId: Opt[SmtpMsgId],\n+         inReplyToMsgId: Opt[SmtpMsgId], refsMsgIds: ImmSeq[SmtpMsgId]) = {\n+      if (notfs.length != 1) {\n+        // If many notfs, then, what should the SMTP Message-ID be?  But this cannot\n+        // happen currently — we send [one_email_at_a_time], nowadays (Nov 2022).\n+        (None, None, None, Nil)\n+      }\n+      else notfs.head match {\n+        case notf: Notification.NewPost =>\n+          // Incl page title in subject line.\n+          val anyPost = dao.loadPostByUniqueId(notf.uniquePostId)\n+          val anyPageStuff = anyPost.flatMap(post => dao.getOnePageStuffById(post.pageId))\n+\n+          val (aboutWhat: Opt[EmailAbout], referencesMsgIds: ImmSeq[SmtpMsgId])\n+                  = anyPageStuff match {\n+            case None => (None, Nil)\n+            case Some(page) =>\n+              subject = s\"[$siteName] ${page.title}\"\n+              val post = anyPost getOrDie \"TyE603MRSKD64\"\n+\n+              val earlierEmailsSamePage: ImmSeq[EmailOut] = dao.loadEmailsToPatAboutThread(\n+                    toPatId = notf.toUserId, pageId = page.pageId,\n+                    parentPostNr = post.parentNr, limit = 30)\n+\n+              val aboutWhat = EmailAbout.Post(\n+                    postId = post.id,\n+                    pageId = page.pageId,\n+                    postNr = post.nr,\n+                    parentNr = post.parentNr,\n+                    catId = page.categoryId)\n+\n+              (Some(aboutWhat), earlierEmailsSamePage.flatMap(_.smtpMsgId))\n+          }\n+\n+          // For now. Some day, could try to reply to the closest ancestor post instead\n+          // (since Ty is threaded).\n+          val inReplyToMsgId: Opt[SmtpMsgId] = referencesMsgIds.lastOption\n+\n+          val host = origin.dropWhile(_ != ':').drop(3)  // removes \"http(s)://\"\n+          val thisMsgId: Opt[SmtpMsgId] = notf.makeSmtpMsgId(host)\n+\n+          (aboutWhat, thisMsgId, inReplyToMsgId, referencesMsgIds)\n+\n+        case _ =>\n+          (None, None, Nil, Nil)\n+      }\n+    }\n+\n+    if (subject.isEmpty)\n+      subject = s\"[$siteName] New notifications\"   // I18N\n+\n     val email = Email.createGenId(EmailType.Notification, createdAt = globals.now(),\n-      sendTo = user.email, toUserId = Some(user.id),\n-      subject = subject, bodyHtml = \"?\")\n+          sendTo = user.email, toUserId = Some(user.id),\n+          aboutWhat = aboutWhat, subject = subject, bodyHtml = \"?\",\n+          smtpMsgId = thisMsgId, inReplyToSmtpMsgId = inReplyToMsgId,\n+          referencesSmtpMsgIds = refsMsgIds)\n \n     // If this is an embedded discussion, there is no Debiki canonical host address to use.\n     // So use the site-by-id origin, e.g. https://site-123.debiki.com, which always works."
    },
    {
      "sha": "37dfeb4c8d8712b63110e2f0f3cb5336ca197b76",
      "filename": "appsv/server/talkyard/server/package.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpackage.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -55,6 +55,13 @@ package object server {\n \n     protected def anySiteId: Opt[SiteId] = None\n \n+    protected def anySiteIdPrefix: St = {\n+      val id = anySiteId getOrElse {\n+        return \"\"\n+      }\n+      s\"s{id}: \"\n+    }\n+\n     protected def bugWarnIf(condition: Boolean, errorCode: String,\n           problem: => String = \"\"): Boolean = {\n       bugWarnDieIfThen(condition, errorCode, problem, thenDo = null)\n@@ -74,7 +81,7 @@ package object server {\n     protected def bugWarn(errorCode: String, problem: => String = \"\") {\n       Prelude.dieIf(Globals.isDevOrTest, errorCode, problem)\n       val message = Prelude.formatErrorMessage(errorCode, problem)\n-      logger.warn(s\"BUG: $message\")\n+      logger.warn(anySiteIdPrefix + s\"BUG: $message\")\n     }\n \n "
    },
    {
      "sha": "033429371f7a00d58404829b9f8d7b9131cd0fb1",
      "filename": "appsv/server/talkyard/server/pubsub/WebSocketMessageHandler.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpubsub%2FWebSocketMessageHandler.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpubsub%2FWebSocketMessageHandler.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpubsub%2FWebSocketMessageHandler.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -144,7 +144,15 @@ class WebSocketMessageHandler(\n                   // What if the client has opened another page, during this handshake?\n                   // Then the watchbar might not include that page. Fairly harmless.\n                   val dao = globals.siteDao(site.id)\n-                  val watchbar = dao.getOrCreateWatchbar(requester.id)\n+                  val watchbar = requester match {\n+                    case member: Member =>\n+                      val authzCtx = dao.getAuthzCtxOnPagesForPat(member)\n+                      dao.getOrCreateWatchbar(authzCtx)\n+                    case _ =>\n+                      // All strangers start with the same watchbar.\n+                      dao.getStrangersWatchbar()\n+                  }\n+\n                   val clientWithPages = client.copy(watchedPageIds = watchbar.watchedPageIds)\n \n                   logger.debug(o\"\"\"$prefix $who connected, telling PubSubActor, it'll"
    },
    {
      "sha": "d0b87dd434e94264e5d89e3420500a9dece1fa66",
      "filename": "appsv/server/talkyard/server/rendr/package.scala",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Frendr%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Frendr%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Frendr%2Fpackage.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -0,0 +1,25 @@\n+package talkyard.server\n+\n+import com.debiki.core._\n+\n+\n+package object rendr {\n+\n+  case class RenderParams(\n+    embeddedOriginOrEmpty: St,\n+    allowClassIdDataAttrs: Bo,\n+    followLinks: Bo,\n+    )\n+\n+  case class NashornParams(\n+    siteIdHostnames: SiteIdHostnames,\n+    embeddedOriginOrEmpty: St,\n+    allowClassIdDataAttrs: Bo,\n+    followLinks: Bo,\n+    mayMention: Set[Username] => Map[Username, Bo],\n+    //mayMentionAll/Channel/...: Bo?\n+    ) {\n+\n+  }\n+\n+}"
    },
    {
      "sha": "39d088af2c6a9edf0a837fff659df91a9b51b87d",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatch.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatch.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatch.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatch.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -506,7 +506,12 @@ case class SimpleSitePatch(\n         numWrongVotes = 0,\n         numBuryVotes = 0,\n         numUnwantedVotes = 0,\n-        numTimesRead = 0)\n+        numTimesRead = 0,\n+        // SHOULD maybe init smtpMsgIdPrefix here? But isn't nextPageId a temp id,\n+        // so too early to do?  So skip, for now:  [init_smtp_msg_id]\n+        // smtpMsgIdPrefix = Some(s\"${nextPageId.toString}.${PageParts.TitleNr}\")\n+        smtpMsgIdPrefix = None,\n+        )\n \n       nextPostId += 1\n       val bodyPost = titlePost.copy("
    },
    {
      "sha": "4b3b422308b859f05f0efd47f117d519d18738e8",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatchParser.scala",
      "status": "modified",
      "additions": 19,
      "deletions": 12,
      "changes": 31,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchParser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchParser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchParser.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -672,6 +672,7 @@ case class SitePatchParser(context: TyContext) {\n         // RENAME to extId here and everywhere else ... Done, can soon remove 'orElse ...'.\n         extId = readOptString(jsObj, \"extId\") orElse readOptString(jsObj, \"extImpId\"),\n         createdAt = readWhen(jsObj, \"createdAtMs\"),\n+        privPrefs = JsX.memberPrivacyPrefsFromJson(jsObj),\n         tinyAvatar = None,   // [readlater] Option[UploadRef]  \"avatarTinyHashPath\"\n         smallAvatar = None,  // [readlater] Option[UploadRef]\n         summaryEmailIntervalMins = readOptInt(jsObj, \"summaryEmailIntervalMins\"),\n@@ -755,11 +756,11 @@ case class SitePatchParser(context: TyContext) {\n         about = readOptString(jsObj, \"bio\", \"about\"),\n         website = readOptString(jsObj, \"websiteUrl\", \"website\"),\n         country = readOptString(jsObj, \"location\", \"country\"),\n-        seeActivityMinTrustLevel = readOptInt(jsObj, \"seeActivityMinTrustLevel\").flatMap(TrustLevel.fromInt),\n+        privPrefs = JsX.memberPrivacyPrefsFromJson(jsObj),\n         tinyAvatar = None, // [readlater]\n         smallAvatar = None, // [readlater]\n         mediumAvatar = None, // [readlater]\n-        uiPrefs = None,   // [readlater]\n+        uiPrefs = (jsObj \\ \"uiPrefs\").asOpt[JsObject],\n         isOwner = readOptBool(jsObj, \"isOwner\") getOrElse false,\n         isAdmin = readOptBool(jsObj, \"isAdmin\") getOrElse false,\n         isModerator = readOptBool(jsObj, \"isModerator\") getOrElse false,\n@@ -1056,15 +1057,19 @@ case class SitePatchParser(context: TyContext) {\n         return Bad(s\"Bad not email status: $notfEmailStatusInt\")\n       }\n       Good(Notification.NewPost(\n-        notfType,\n-        id = notfId,\n-        createdAt = readDateMs(jsObj, \"createdAtMs\"),\n-        uniquePostId = readInt(jsObj, \"postId\"),\n-        byUserId = readInt(jsObj, \"byUserId\"),\n-        toUserId = readInt(jsObj, \"toUserId\"),\n-        emailId = readOptString(jsObj, \"emailId\"), // OOPS, FK :- (\n-        emailStatus = notfEmailStatus,\n-        seenAt = readOptDateMs(jsObj, \"seenAt\")))\n+            notfType,\n+            id = notfId,\n+            createdAt = readDateMs(jsObj, \"createdAtMs\"),\n+            uniquePostId = readInt(jsObj, \"postId\"),\n+            byUserId = readInt(jsObj, \"byUserId\"),\n+            toUserId = readInt(jsObj, \"toUserId\"),\n+            smtpMsgIdPrefix = readOptString(jsObj, \"smtpMsgIdPrefix\"),\n+            // OOPS, there's a foreign key, 'ntfs_r_emails' from notfs_t to emails_out_t.\n+            // Any email must be included in the patch (so the FK to emails_out_t won't\n+            // break). — Maybe notfs_t.email_id_c shouldn't be an FK?  [improve_imp_exp]\n+            emailId = readOptString(jsObj, \"emailId\"),\n+            emailStatus = notfEmailStatus,\n+            seenAt = readOptDateMs(jsObj, \"seenAt\")))\n     }\n     catch {\n       case ex: IllegalArgumentException =>\n@@ -1485,7 +1490,9 @@ case class SitePatchParser(context: TyContext) {\n         numWrongVotes = readOptInt(jsObj, \"numWrongVotes\").getOrElse(0)  ,\n         numBuryVotes = readOptInt(jsObj, \"numBuryVotes\").getOrElse(0),\n         numUnwantedVotes = readOptInt(jsObj, \"numUnwantedVotes\").getOrElse(0)  ,\n-        numTimesRead = readOptInt(jsObj, \"numTimesRead\").getOrElse(0)))\n+        numTimesRead = readOptInt(jsObj, \"numTimesRead\").getOrElse(0),\n+        smtpMsgIdPrefix = readOptString(jsObj, \"smtpMsgIdPrefix\"),\n+        ))\n     }\n     catch {\n       case ex: IllegalArgumentException =>"
    },
    {
      "sha": "2f3fccff3a86abdf2c275bebf3244d4365eec1d9",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatcher.scala",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatcher.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatcher.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatcher.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -505,7 +505,13 @@ case class SitePatcher(globals: debiki.Globals) {\n                     collapsedById = postInPatch.collapsedById.map(remappedPpTempId),\n                     closedById = postInPatch.closedById.map(remappedPpTempId),\n                     bodyHiddenById = postInPatch.bodyHiddenById.map(remappedPpTempId),\n-                    deletedById = postInPatch.deletedById.map(remappedPpTempId))\n+                    deletedById = postInPatch.deletedById.map(remappedPpTempId),\n+\n+                    // Now this page and post have real ids, so we know what the\n+                    // SMTP Message-ID should be.  [init_smtp_msg_id]\n+                    smtpMsgIdPrefix = postInPatch.smtpMsgIdPrefix orElse Some(\n+                          s\"$realPageId.$realNr\"),\n+                    )\n \n                   nextPostId += 1\n                   postTempIdsToInsert += postInPatch.id\n@@ -1330,7 +1336,9 @@ case class SitePatcher(globals: debiki.Globals) {\n         }\n         else {\n           tx.insertMember(user) // [UPSMEMBRNOW]\n-          newDao.joinPinnedGlobalChats(user, tx)\n+          // Skip — the user isn't online (this site is getting *imported*\n+          // and also, we clear the mem cache and Redis at the end of this fn anyway.\n+          // newDao.joinPinnedGlobalChats(user, tx)  —  don't\n         }\n       }\n "
    },
    {
      "sha": "82367e5ca3919a4672958a10a35f12acacf601df",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 17,
      "deletions": 3,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.editor.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -89,9 +89,23 @@ export const listUsernamesTrigger = {\n         }\n       })\n     },\n-    component: ({ entity: { id, username, fullName }}) =>\n-      r.div({}, `${username} (${fullName})`),\n-    output: (item, trigger) => '@' + item.username\n+    component: ({ entity: { id, username, fullName, mayMention }}) => {\n+      const text = `${username} (${fullName})`;\n+      return mayMention !== false\n+          ? r.div({}, text)\n+          : r.div({ className: 'c_Disabled',\n+                    onClick: (event) => event.stopPropagation() }, // [mention_disabled]\n+              // Later: Show any  pats_t.why_may_not_mention_msg_me_html_c  info here.\n+              text, r.i({}, \"  — mentions disabled\"));    // I18N\n+    },\n+    output: (item, trigger) => {\n+      // Also see: [mentions_prio]\n+      if (item.mayMention === false) {\n+        // Then skip the '@' so this won't becoem a @mention.\n+        return item.username;\n+      }\n+      return '@' + item.username;\n+    },\n   },\n \n   // Emojis. List: https://unicode.org/emoji/charts/full-emoji-list.html"
    },
    {
      "sha": "9d2c9bc3ee56863b3b5c2efa0f083e397ec2b6b5",
      "filename": "client/app-editor/editor/editor.styl",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-editor%2Feditor%2Feditor.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-editor%2Feditor%2Feditor.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.styl?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -481,7 +481,7 @@ html.es-watchbar-open.es-forum #debiki-editor-controller\n // username selector if typing '@...'  ?  Maybe no need for any extra\n // component like rta.\n .rta__autocomplete\n-  max-width: 340px;\n+  max-width: 360px;\n \n .rta__entity\n   font-size: 14px;\n@@ -490,6 +490,15 @@ html.mouse .rta__entity\n   padding: 3px 0 3px 5px !important;\n \n \n+// Hack. Make disabled items (e.g. usernames one cannot mention) unclickable, and gray.\n+.rta__entity .c_Disabled\n+  background: #fff;\n+  color: #777;\n+  margin: -3px 0 -3px -6px;\n+  padding: 5px 0 5px 6px;\n+  //pointer-events: none; — using event.stopPropagation() instead. [mention_disabled]\n+\n+\n // Compact buttons if narrow screen, so won't wrap to 2nd line.\n @media (max-width: $spacyButtonsMinWidth - 1)\n   #esMinimizeBtn"
    },
    {
      "sha": "b392edcbd88c9551aabe21a77e6167b6c173fa3f",
      "filename": "client/app-more/page-dialogs/about-user-dialog.more.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -272,8 +272,9 @@ const AboutUser = createComponent({\n               target: '_blank' },\n           t.aud.ViewProfl);\n \n-    const userIsPageMember = page_isGroupTalk(page.pageRole) &&\n-        _.includes(page.pageMemberIds, user.id);\n+    const userIsPageMember = (page_isGroupTalk(page.pageRole) &&\n+        // Use [me_isPageMember] instead, in case any group user is in, is a member?\n+        _.includes(page.pageMemberIds, user.id));\n     const removeFromPageButton = userIsPageMember &&\n         (isStaff(me) || store_thisIsMyPage(store)) && !userIsMe\n       ? Button({ onClick: this.removeFromPage, id: 'e2eUD_RemoveB' }, t.aud.RmFromTpc)"
    },
    {
      "sha": "66bc26c2d4de820c1889d8c4147dcea640fb9d2e",
      "filename": "client/app-more/page-dialogs/add-remove-people-dialogs.more.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-more%2Fpage-dialogs%2Fadd-remove-people-dialogs.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-more%2Fpage-dialogs%2Fadd-remove-people-dialogs.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2Fadd-remove-people-dialogs.more.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -123,6 +123,7 @@ function makeLabelValues(users: MemberIdName[], pageMemberIds: UserId[]): ReactS\n     if (user.fullName) {\n       prettyName += ' (' + user.fullName + ')';\n     }\n+    // Use [me_isPageMember] instead, in case any group user is in, is a member?\n     const alreadyMember =  _.includes(pageMemberIds, user.id);\n     if (alreadyMember) {\n       prettyName += \" — already added\";"
    },
    {
      "sha": "00d05c216c7ce80ab228cefde149c3d16436c8b4",
      "filename": "client/app-more/users/user-preferences.more.ts",
      "status": "modified",
      "additions": 90,
      "deletions": 19,
      "changes": 109,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-more%2Fusers%2Fuser-preferences.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-more%2Fusers%2Fuser-preferences.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fuser-preferences.more.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -19,6 +19,7 @@\n /// <reference path=\"../more-prelude.more.ts\" />\n /// <reference path=\"../util/UsernameInput.more.ts\" />\n /// <reference path=\"../util/stupid-dialog.more.ts\" />\n+/// <reference path=\"../util/trust-level-dialog.more.ts\" />\n /// <reference path=\"./ActivitySummaryEmailsInterval.more.ts\" />\n \n //------------------------------------------------------------------------------\n@@ -38,7 +39,7 @@ const accountPathSeg = 'account';  // [4JKT28TS]\n \n \n export const UserPreferences = createFactory({\n- displayName: 'UserPreferences',\n+  displayName: 'UserPreferences',\n \n   render: function() {\n     const user: UserInclDetails = this.props.user;\n@@ -81,8 +82,8 @@ export const UserPreferences = createFactory({\n           );\n \n     const isGuest = user_isGuest(user);\n-    const isNormalMember = user.id >= LowestNormalMemberId;\n-    const isBuiltInUser = user.id < LowestAuthenticatedUserId;\n+    const isNormalMember = user.id >= Pats.MinNotSysMemberId;\n+    const isBuiltInUser = member_isBuiltIn(user);\n     const isGuestOrBuiltIn = isGuest || isBuiltInUser;\n     const isGroupGuestOrBuiltIn = user.isGroup || isGuestOrBuiltIn;\n \n@@ -94,9 +95,10 @@ export const UserPreferences = createFactory({\n           r.div({ className: 's_UP_Act_Nav' },\n             r.ul({ className: 'dw-sub-nav nav nav-pills nav-stacked' },\n               LiNavLink({ to: aboutPath, className: 's_UP_Prf_Nav_AbtL' }, t.upp.About),\n+              // It's possible to configure built-in groups (which are \"normal\" members).\n               !isNormalMember ? null: LiNavLink({\n                   to: prefsPathSlash + notfsPathSeg, className: 's_UP_Prf_Nav_NtfsL' }, t.Notifications),\n-              isGroupGuestOrBuiltIn ? null : LiNavLink({\n+              !isNormalMember ? null : LiNavLink({\n                   to: privacyPath, className: 'e_UP_Prf_Nav_PrivL' }, t.upp.Privacy),\n               isGroupGuestOrBuiltIn ? null : LiNavLink({\n                   to: securityPath, className: 'e_UP_Prf_Nav_SecL' }, t.upp.Security),\n@@ -708,16 +710,35 @@ const NotfPrefsTab = createFactory({\n });\n \n \n+interface PrivacyPrefsTabProps {\n+  store: Store;\n+  user: UserInclDetails;\n+  updatePat: (patNoStatsNoGroupIds: PatVb) => Vo;\n+}\n+\n+\n+interface PrivacyPrefsTabState {\n+  savingStatus?: St;\n+  hideActivityForStrangers: Bo;\n+  hideActivityForAll: Bo;\n+  maySendMeDmsTrLv?: TrustLevelOrStaff;\n+  mayMentionMeTrLv?: TrustLevelOrStaff;\n+}\n+\n \n const PrivacyPrefsTab = createFactory({\n   displayName: 'PrivacyPrefsTab',\n \n   getInitialState: function() {\n-    const user: UserInclDetails = this.props.user;\n-    return {\n+    const props: PrivacyPrefsTabProps = this.props;\n+    const user: UserInclDetails = props.user;\n+    const state: PrivacyPrefsTabState = {\n       hideActivityForStrangers: user.seeActivityMinTrustLevel >= TrustLevel.FullMember,\n       hideActivityForAll: user.seeActivityMinTrustLevel >= TrustLevel.CoreMember,\n+      maySendMeDmsTrLv: user.maySendMeDmsTrLv,\n+      mayMentionMeTrLv: user.mayMentionMeTrLv,\n     };\n+    return state;\n   },\n \n   componentWillUnmount: function() {\n@@ -726,44 +747,59 @@ const PrivacyPrefsTab = createFactory({\n \n   savePrivacyPrefs: function(event) {\n     event.preventDefault();\n-    const seeActivityMinTrustLevel = this.state.hideActivityForAll ? TrustLevel.CoreMember : (\n-        this.state.hideActivityForStrangers ? TrustLevel.FullMember : null);\n-    const user: UserInclDetails = this.props.user;\n+    const props: PrivacyPrefsTabProps = this.props;\n+    const state: PrivacyPrefsTabState = this.state;\n+    const seeActivityMinTrustLevel = state.hideActivityForAll ? TrustLevel.CoreMember : (\n+        state.hideActivityForStrangers ? TrustLevel.FullMember : null);\n+    const user: UserInclDetails = props.user;\n     const prefs = {\n       userId: user.id,\n-      seeActivityMinTrustLevel: seeActivityMinTrustLevel,\n+      seeActivityMinTrustLevel,\n+      maySendMeDmsTrLv: state.maySendMeDmsTrLv,\n+      mayMentionMeTrLv: state.mayMentionMeTrLv,\n     };\n     // Dupl code [save_pat_pref].\n     Server.saveMemberPrivacyPrefs(prefs, (r: { patNoStatsNoGroupIds: PatVb }) => {\n       if (this.isGone) return;\n       this.setState({\n         savingStatus: 'Saved',\n       });\n-      this.props.updatePat(r.patNoStatsNoGroupIds);\n+      props.updatePat(r.patNoStatsNoGroupIds);\n     });\n     this.setState({ savingStatus: 'Saving' });\n   },\n \n   render: function() {\n-    const state = this.state;\n-    const me: Myself = this.props.store.me;\n-    const user: UserInclDetails = this.props.user;\n+    const props: PrivacyPrefsTabProps = this.props;\n+    const state: PrivacyPrefsTabState = this.state;\n+    const me: Me = props.store.me;\n+    const user: UserInclDetails = props.user;\n+    const isSelf = user.id === me.id;\n \n     // Dupl Saving... code [7UKBQT2]\n     let savingInfo = null;\n-    if (this.state.savingStatus === 'Saving') {\n+    if (state.savingStatus === 'Saving') {\n       savingInfo = r.i({}, ' ' + t.SavingDots);\n     }\n-    else if (this.state.savingStatus === 'Saved') {\n+    else if (state.savingStatus === 'Saved') {\n       savingInfo = r.i({ className: 'e_Saved' }, ' ' + t.SavedDot);\n     }\n \n+    // Maybe most new members would mess up these settings? [can_config_what_priv_prefs]\n+    // Currently these settings have no effect, for groups. [inherit_group_priv_prefs]\n+    const canConfigWhoMayMessage = isSelf && pat_isBitAdv(me) || pat_isStaff(me);  // UX BUG but not if me is mod, and user is admin\n+    const you =\n+            user.isGroup ? \"members of this group\" : (    // I18N\n+            user.id === me.id ? \"you\" : \"this user\");\n+\n+\n     return (\n-      r.form({ role: 'form', onSubmit: this.savePrivacyPrefs },\n+      r.form({ role: 'form', className: 'e_PrivPrefsF', onSubmit: this.savePrivacyPrefs },\n \n         // If in the future, adding options for being a bit invisible and not receiving\n         // messages from others — then, stop publishing presence here: [PRESPRIV].\n \n+        user.isGroup ? null : rFr({},\n         Input({ type: 'checkbox', className: 'e_HideActivityStrangersCB',\n             label: rFragment({},\n               t.upp.HideActivityStrangers_1, r.br(),\n@@ -772,6 +808,7 @@ const PrivacyPrefsTab = createFactory({\n             onChange: (event: CheckboxEvent) => this.setState({\n               hideActivityForStrangers: event.target.checked,\n               hideActivityForAll: false,\n+              savingStatus: null,\n             }) }),\n \n         Input({ type: 'checkbox', className: 'e_HideActivityAllCB',\n@@ -782,9 +819,43 @@ const PrivacyPrefsTab = createFactory({\n             onChange: (event: CheckboxEvent) => this.setState({\n               hideActivityForStrangers: event.target.checked || state.hideActivityForStrangers,\n               hideActivityForAll: event.target.checked,\n-            }) }),\n+              savingStatus: null,\n+            }) })),\n+\n+        // This is notf prefs, rather than privacy? Maybe should move\n+        // to tne notf prefs tab? Not important, let's wait.\n+        //\n+        !canConfigWhoMayMessage ? null : rFr({},\n+          r.div({ className: 'e_WhoMayMention' },\n+            r.span({}, `Min trust level to @mention ${you}: `),  // I18N\n+            TrustLevelBtn({\n+                diagTitle: rFr({},\n+                    `Min trust level to get to notify ${you} by typing `,  // I18N\n+                    r.code({}, `@${user.username}`), ':'),\n+                curLevel: firstValOf(\n+                      state.mayMentionMeTrLv, user.mayMentionMeTrLv, TrustLevelOrStaff.New),\n+                minLevel: TrustLevelOrStaff.New,\n+                maxLevel: TrustLevelOrStaff.CoreMember,\n+                saveFn: (newLevel) => {\n+                  this.setState({ mayMentionMeTrLv: newLevel, savingStatus: null });\n+                }})),\n+\n+          r.div({ className: 'e_WhoMayDm' },\n+            r.span({}, `Min trust level to direct-message (DM) ${you}: `),  // I18N\n+            TrustLevelBtn({\n+                diagTitle: `Min trust level to get to direct-message ${you}:`,  // I18N\n+                curLevel: firstValOf(\n+                      state.maySendMeDmsTrLv, user.maySendMeDmsTrLv, TrustLevelOrStaff.New),\n+                minLevel: TrustLevelOrStaff.New,\n+                maxLevel: TrustLevelOrStaff.CoreMember,\n+                saveFn: (newLevel) => {\n+                  this.setState({ maySendMeDmsTrLv: newLevel, savingStatus: null });\n+                }})),\n+        ),\n+\n+        InputTypeSubmit({ className: 'e_SavePrivacy', style: { marginTop: '11px' },\n+              value: t.Save }),\n \n-        InputTypeSubmit({ className: 'e_SavePrivacy', style: { marginTop: '11px' }, value: t.Save }),\n         savingInfo));\n   }\n });"
    },
    {
      "sha": "b3965f3258354399181b36e344fcca009d273c4f",
      "filename": "client/app-more/users/users-page.more.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-more%2Fusers%2Fusers-page.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-more%2Fusers%2Fusers-page.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fusers-page.more.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -486,9 +486,10 @@ const PatTopPanel = createComponent({\n         LinkButton({ href: linkToUserInAdminArea(user), className: 's_UP_AdminB' },\n           \"View in Admin Area\");\n \n-    const sendMessageButton = !store_maySendDirectMessageTo(store, user) ? null :\n-        PrimaryButton({ onClick: this.sendMessage, className: 's_UP_SendMsgB' },\n-          t.SendMsg);\n+    const sendMessageButton = store_maySendDirectMessageTo(store, user)\n+        ? PrimaryButton({ onClick: this.sendMessage, className: 's_UP_SendMsgB' },\n+              t.SendMsg)\n+        : r.span({ className: 'e_CantDirMsg' });\n \n     const groupList = GroupList(\n         user, groupsMaySee, 's_UP_Ab_Stats_Stat_Groups_Group');"
    },
    {
      "sha": "75044f7c6e95240be8a3aca6d19c165832404b1d",
      "filename": "client/app-more/util/trust-level-dialog.more.ts",
      "status": "added",
      "additions": 146,
      "deletions": 0,
      "changes": 146,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-more%2Futil%2Ftrust-level-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-more%2Futil%2Ftrust-level-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Futil%2Ftrust-level-dialog.more.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright (c) 2022 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+/// <reference path=\"../more-prelude.more.ts\" />\n+\n+//------------------------------------------------------------------------------\n+   namespace debiki2 {\n+//------------------------------------------------------------------------------\n+\n+const r = ReactDOMFactories;\n+const DropdownModal = utils.DropdownModal;\n+const ExplainingListItem = util.ExplainingListItem;\n+\n+\n+export interface TrustLevelBtnProps {\n+  diagTitle: St,\n+  className?: St,\n+  minLevel?: TrustLevelOrStaff,\n+  maxLevel?: TrustLevelOrStaff,\n+  curLevel: TrustLevelOrStaff | U;\n+  saveFn: (newLevel: TrustLevelOrStaff) => Vo;\n+}\n+\n+\n+// Bit dupl code? [open_diag_btn]\n+export function TrustLevelBtn(props: TrustLevelBtnProps) {\n+  const className = `e_TrLv-${props.curLevel} ${props.className || ''}`;\n+  return (\n+      Button({ className, onClick: event => {\n+          const atRect = cloneEventTargetRect(event);\n+          openTrustLevelDiag({ ...props, atRect });\n+        }},\n+        trustLevel_toString(props.curLevel as any), ' ', r.span({ className: 'caret' })\n+      ));\n+}\n+\n+\n+interface TrustLevelDiagState {\n+  diagTitle: St,\n+  atRect: Rect;\n+  minLevel?: TrustLevelOrStaff,\n+  maxLevel?: TrustLevelOrStaff,\n+  curLevel: TrustLevelOrStaff | U;\n+  saveFn: (newLevel: TrustLevelOrStaff) => Vo;\n+}\n+\n+\n+let setDiagState: (_: TrustLevelDiagState) => Vo;\n+\n+function openTrustLevelDiag(ps: TrustLevelDiagState) {\n+  if (!setDiagState) {\n+    ReactDOM.render(TrustLevelDiag(), utils.makeMountNode());  // or [use_portal] ?\n+  }\n+  setDiagState(ps);\n+}\n+\n+\n+/// Some dupl code? [6KUW24]  but this with React hooks.\n+///\n+const TrustLevelDiag = React.createFactory<{}>(function() {\n+  //displayName: 'TrustLevelDiag',\n+\n+  const [diagState, setDiagState2] =\n+        React.useState<TrustLevelDiagState | N>(null);\n+\n+  setDiagState = setDiagState2;\n+\n+  const isOpen = !!diagState;\n+  const atRect: Rect = (isOpen ? diagState.atRect : {}) as Rect;\n+\n+  function close() {\n+    setDiagState(null);\n+  }\n+\n+  let title: St | U;\n+  let strangersItem: RElm | U;\n+  let allMembersItem: RElm | U;\n+  let basicMembersItem: RElm | U;\n+  let fullMembersItem: RElm | U;\n+  let trustedMembersItem: RElm | U;\n+  let coreMembersItem: RElm | U;\n+  let staffItem: RElm | U;\n+  let adminsItem: RElm | U;\n+\n+  if (isOpen) {\n+    const min = diagState.minLevel || TrustLevelOrStaff.Min;\n+    const max = diagState.maxLevel || TrustLevelOrStaff.Max;\n+    const makeItem = (level: TrustLevelOrStaff): RElm => {\n+      return level < min || max < level ? null : (\n+            ExplainingListItem({\n+                active: diagState.curLevel === level,\n+                title: r.span({ className: 'e_TrLv-' + level  },\n+                          trustLevel_toString(level as any)),\n+                // text: trustLevel_descr(level),  — later?\n+                onSelect: () => {\n+                  diagState.saveFn(level);\n+                  close();\n+                }}));\n+    }\n+\n+    title = diagState.diagTitle;\n+    strangersItem = makeItem(TrustLevelOrStaff.Stranger);\n+    allMembersItem = makeItem(TrustLevelOrStaff.New);\n+    basicMembersItem = makeItem(TrustLevelOrStaff.Basic);\n+    fullMembersItem = makeItem(TrustLevelOrStaff.FullMember);\n+    trustedMembersItem = makeItem(TrustLevelOrStaff.Trusted);\n+    // Skip:  makeItem(TrustLevelOrStaff.Regular, ...);\n+    coreMembersItem = makeItem(TrustLevelOrStaff.CoreMember);\n+    staffItem = makeItem(TrustLevelOrStaff.Staff);\n+    adminsItem = makeItem(TrustLevelOrStaff.Admin);\n+  }\n+\n+  return (\n+      DropdownModal({ show: isOpen, onHide: close, atX: atRect.left, atY: atRect.top,\n+            pullLeft: true, showCloseButton: true, className: 'e_TruLvD' },\n+        r.div({ className: 's_ExplDrp_Ttl' }, title),\n+        strangersItem,\n+        allMembersItem,\n+        basicMembersItem,\n+        fullMembersItem,\n+        trustedMembersItem,\n+        coreMembersItem,\n+        staffItem,\n+        adminsItem,\n+        ));\n+});\n+\n+\n+//------------------------------------------------------------------------------\n+   }\n+//------------------------------------------------------------------------------\n+// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list"
    },
    {
      "sha": "c2bf5faa7dd3b35752f5070ae62a66a7f9ae8f9f",
      "filename": "client/app-slim/constants.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fconstants.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fconstants.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fconstants.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -58,14 +58,15 @@ const MaxVirtPostNr = -1000 * 1000;\n const MinRealPostNr = TitleNr;\n \n // COULD_OPTIMIZE SMALLER_BUNDLE MOVE to  const enum PatIds or Pats?\n+//  — Doing, see client/types-and-const-enums.ts, const enum Pats.\n const NoUserId = 0;\n const SystemUserId = 1;\n const SysbotUserId = 2;\n //const SuperAdminId = 3;  ?\n //const SuperStaffId = 4;  ?\n const MinMemberId = SystemUserId;\n-const LowestAuthenticatedUserId = 100;   // also in scala  [8PWK1Q2W]\n-const LowestNormalMemberId = 10;         // also in scala  [S7KPWG42]\n+const LowestAuthenticatedUserId = 100;   // also in scala  [8PWK1Q2W] RENAMING to Pats.MinAuthnMemberId\n+const LowestNormalMemberId = 10;         // also in scala  [S7KPWG42] RENAMING to Pats.MinNotSysMemberId?\n \n const MaxUsernameLength = 20;            // in scala [6AKBR20Q]\n "
    },
    {
      "sha": "442879b43862e4f41b97a11f8a0eb66ee288e995",
      "filename": "client/app-slim/me-getters.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 9,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fme-getters.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fme-getters.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fme-getters.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -40,12 +40,12 @@ export function me_hasSid(): Bo {\n }\n \n \n-export function me_isAuthenticated(me: Myself): boolean {\n+export function me_isAuthenticated(me: Me): Bo {\n   return me.id && me.id >= MinMemberId;\n }\n \n \n-export function me_toBriefUser(me: Myself): BriefUser {\n+export function me_toBriefUser(me: Me): Pat {\n   return {\n     id: me.id,\n     fullName: me.fullName,\n@@ -59,20 +59,22 @@ export function me_toBriefUser(me: Myself): BriefUser {\n   }\n }\n \n-export function me_hasVoted(me: Myself, postId: PostId, what: string): boolean {\n+export function me_hasVoted(me: Me, postId: PostId, what: St): Bo {\n   const votes = me.myCurrentPageData.votes[postId] || [];\n   return votes.indexOf(what) !== -1;\n }\n \n \n-export function store_maySendDirectMessageTo(store: Store, user: UserInclDetails): boolean {\n+/// Sync w Scala: Pat.mayMessage().\n+///\n+export function store_maySendDirectMessageTo(store: Store, user: PatVb): Bo {\n   const settings: SettingsVisibleClientSide = store.settings;\n-  const me: Myself = store.me;\n+  const me: Me = store.me;\n \n   if (settings.enableDirectMessages === false)\n     return false;\n \n-  if (user_isGone(user))   // compilation error?\n+  if (user_isGone(user))\n     return false;\n \n   if (!user_isMember(me) || !user_isMember(user))\n@@ -84,13 +86,15 @@ export function store_maySendDirectMessageTo(store: Store, user: UserInclDetails\n   if (me.id === user.id)\n     return false;\n \n-  if (user.isGroup) // group messages not yet impl\n+  const myTrustLevel = user_trustLevel(me);\n+\n+  if (user.maySendMeDmsTrLv && myTrustLevel < user.maySendMeDmsTrLv)\n     return false;\n \n-  if (isStaff(me) || isStaff(user))\n+  if (user_isStaffOrCoreMember(me))\n     return true;\n \n-  return me.trustLevel >= TrustLevel.Basic && me.threatLevel <= ThreatLevel.HopefullySafe;\n+  return me.threatLevel <= ThreatLevel.HopefullySafe || isStaff(user); // [bad_pat_dms]\n }\n \n //------------------------------------------------------------------------------"
    },
    {
      "sha": "ae62fe21da8d0f575ef4ad6bc1dc637b7338bca6",
      "filename": "client/app-slim/model.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fmodel.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fmodel.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fmodel.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -1469,7 +1469,11 @@ interface PatVb extends MemberInclDetails, BioWebsiteLocation {\n   emailNotfPrefs: EmailNotfPrefs,\n   // mailingListMode: undefined | true;  // default false  — later\n   hasPassword?: boolean;\n+  // ------- (Could break out interface? Or maybe pointless.)\n   seeActivityMinTrustLevel?: TrustLevel;\n+  maySendMeDmsTrLv?: TrustLevelOrStaff;\n+  mayMentionMeTrLv?: TrustLevelOrStaff;\n+  // -------\n   uiPrefs: UiPrefs;\n   isAdmin: boolean;\n   isModerator: boolean;"
    },
    {
      "sha": "fb652912821a72b5777fb0284b5e2df7b3f63b75",
      "filename": "client/app-slim/notification/notf-prefs-button.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fnotification%2Fnotf-prefs-button.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fnotification%2Fnotf-prefs-button.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fnotification%2Fnotf-prefs-button.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -23,6 +23,7 @@\n //------------------------------------------------------------------------------\n \n \n+// Bit dupl code? [open_diag_btn]\n export function PageNotfPrefButton(props: {\n       target: PageNotfPrefTarget, store: Store, className?: St,\n       ownPrefs: OwnPageNotfPrefs,  // RENAME to membersPrefs"
    },
    {
      "sha": "813e44763f3d5a1512dff138d8ac64e325f8c0c6",
      "filename": "client/app-slim/oop-methods.ts",
      "status": "modified",
      "additions": 64,
      "deletions": 6,
      "changes": 70,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Foop-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Foop-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Foop-methods.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -641,15 +641,35 @@ export function me_uiPrefs(me: Myself): UiPrefs {\n }\n \n \n+/// Oops should use at more places. [me_isPageMember]\n+///\n+function me_isPageMember(me: Me, page: Page): Bo {\n+  if (page.pageMemberIds.indexOf(me.id) >= 0)\n+    return true;\n+\n+  // Has any group one is in, been added to the page?\n+  for (let i = 0; i < me.myGroupIds.length; ++i) {\n+    const groupId = me.myGroupIds[i];\n+    if (page.pageMemberIds.indexOf(groupId) >= 0)\n+      return true;\n+  }\n+\n+  return false;\n+}\n+\n+\n // Groups\n //----------------------------------\n \n \n // Members\n //----------------------------------\n \n-export function member_isBuiltIn(member: Member): boolean {\n-  return member.id < LowestAuthenticatedUserId;\n+// RENAME to pat_isBuiltIn\n+export function member_isBuiltIn(member: Member): Bo {\n+  return (MaxGuestId < member.id && member.id < Pats.MinAuthnMemberId\n+          // The Unknown user is both a guest and built-in.\n+          || member.id === UnknownUserId);\n }\n \n \n@@ -658,6 +678,11 @@ export function member_isBuiltIn(member: Member): boolean {\n //----------------------------------\n \n \n+// Dupl code [disp_name]\n+export function pat_name(pat: Me | Pat): St {\n+  return pat.fullName || (pat.username ? '@' + pat.username : \"_no_name_\");\n+}\n+\n // Returns 0 if not snoozing or time's up.\n //\n export function pp_snoozeLeftMs(me: Myself): number {\n@@ -691,6 +716,23 @@ export function user_isTrustMinNotThreat(user: UserInclDetails | Myself, trustLe\n }\n \n \n+/// If a bit advanced functionality should be shown to this user (or group members).\n+///\n+export function pat_isBitAdv(pat: PatVb | Me): Bo {\n+  // For now, let's assume people who have become full members, are \"advanced\".\n+  // Later, there could be a checkbox in one's user settings. [tech_level]\n+  return user_trustLevel(pat) >= TrustLevel.FullMember || isStaff(pat);\n+}\n+\n+\n+/// If more advanced functionality should be shown.\n+///\n+export function pat_isMoreAdv(pat: PatVb | Me): Bo {\n+  // For now.\n+  return user_trustLevel(pat) >= TrustLevel.Trusted || isStaff(pat);\n+}\n+\n+\n export function user_isGone(user: Myself | BriefUser | UserInclDetails | ParticipantAnyDetails): boolean {\n   // These two casts work for ParticipantAnyDetails too.\n   const membInclDetails = <Myself | UserInclDetails> user;\n@@ -869,7 +911,9 @@ export function store_mayICreateTopics(store: Store, category: Cat | U): Bo {\n }\n \n \n-// Some dupl code! (8FUZWY02Q60)\n+/// Sync w Scala: Authz.mayPostReply()\n+/// Some dupl code! (8FUZWY02Q60)\n+///\n export function store_mayIReply(store: Store, post: Post): boolean {\n   const page: Page = store.currentPage;\n   // Each reply on a mind map page is a mind map node. Thus, by replying, one modifies the mind map\n@@ -881,15 +925,24 @@ export function store_mayIReply(store: Store, post: Post): boolean {\n   const ancestorCategories: Ancestor[] = page.ancestorsRootFirst;\n   const me = store.me;\n \n+  // It's ok to reply to deleted comments? E.g. if you had in mind to write\n+  // \"The above comment was deleted because: ...\" but you happened to delete it first.\n+  if (isStaff(me))\n+    return true;\n+\n   // Later: [8PA2WFM] Perhaps let staff reply, although not approved. So staff can say\n   // \"If you please remove <sth that violates the site guidelines>, I'll approve the comment\".\n   // Or \"I won't approve this comment. It's off-topic because ...\".\n   if (post_isDeletedOrCollapsed(post) || !post.isApproved)\n     return false;\n \n-  if (page.pageMemberIds.indexOf(me.id) >= 0)\n+  // ----- Page member?\n+\n+  if (me_isPageMember(me, page))\n     may = true;\n \n+  // ----- Whole site perms?\n+\n   me.permsOnPages.forEach((p: PermsOnPage) => {\n     if (p.onWholeSite) {\n       if (isDefined2(p.mayPostComment)) {\n@@ -898,6 +951,8 @@ export function store_mayIReply(store: Store, post: Post): boolean {\n     }\n   });\n \n+  // ----- Category perms?\n+\n   // Here we loop through the cats in the correct order though, [0GMK2WAL].\n   for (let i = 0; i < ancestorCategories.length; ++i) {\n     const ancestor = ancestorCategories[i];\n@@ -929,8 +984,11 @@ function store_mayIEditImpl(store: Store, post: Post, isEditPage: boolean): bool\n   if (post_isDeletedOrCollapsed(post))\n     return false;\n \n-  const page: Page = store.currentPage;\n   const me = store.me;\n+  if (me.isAdmin)\n+    return true;\n+\n+  const page: Page = store.currentPage;\n   const isMindMap = page.pageRole === PageRole.MindMap;\n   const isWiki = post_isWiki(post);\n   const isOwnPage = store_thisIsMyPage(store);\n@@ -948,7 +1006,7 @@ function store_mayIEditImpl(store: Store, post: Post, isEditPage: boolean): bool\n \n   // Direct messages aren't placed in any category and thus aren't affected by permissions.\n   // Need this extra 'if':\n-  if (page.pageMemberIds.indexOf(me.id) >= 0 && isOwn)\n+  if (me_isPageMember(me, page) && isOwn)\n     may = true;\n \n   // Least specific: Whole site permissions. Can be overridden per category and"
    },
    {
      "sha": "7a2615c921797d482105caec626d961c50414d44",
      "filename": "client/app-slim/page/chat.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fpage%2Fchat.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fpage%2Fchat.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fpage%2Fchat.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -53,6 +53,7 @@ export const ChatMessages = createComponent({\n   render: function() {\n     const store: Store = this.props.store;\n     const page: Page = store.currentPage;\n+    // Use [me_isPageMember] instead, in case any group user is in, is a member?\n     const isChatMember = _.some(store.currentPage.pageMemberIds, id => id === store.me.id);\n     const editorOrJoinButton = isChatMember || page.pageRole === PageRole.JoinlessChat\n         ? ChatMessageEditor({ store: store, scrollDownToViewNewMessage: this.scrollDown })"
    },
    {
      "sha": "5fb562b65cf277000f6279fbfd0b2c353b299355",
      "filename": "client/app-slim/page/post-actions.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fpage%2Fpost-actions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fpage%2Fpost-actions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fpage%2Fpost-actions.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -298,7 +298,7 @@ export const PostActions = createComponent({\n     const replyingToClass = store_isReplyingTo(store, post)  ? ' s_PA_B-Active' : '';\n     const disabledClass = isEditorOpenAlready ? ' s_PA_B-Disabled' : '';\n \n-    const replyButton = !store_mayIReply(store, post) ? null :\n+    const replyButton = !store_mayIReply(store, post) ? null :  // or  <span .e_MayNotRe> ?\n           r.a({ className: 'dw-a dw-a-reply ' + makeReplyBtnIcon(store)\n                 + disabledClass + replyingToClass,\n               // Highlight the post this Reply button replies to."
    },
    {
      "sha": "5c99af051949019a2a6ac868465c457ef740753d",
      "filename": "client/app-slim/prelude.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fprelude.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fprelude.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fprelude.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -517,6 +517,11 @@ export function firstDefinedOf(x, y, z?) {\n }\n \n \n+export function firstValOf(x, y, z?) {\n+  return isVal(x) ? x : (isVal(y) ? y : z);\n+}\n+\n+\n /** Like _.groupBy but keeps just one value per key.\n     RENAME to arr_groupByKeepOne ?\n   */"
    },
    {
      "sha": "2df424effa43b8163a36494dd993776ae19dfe04",
      "filename": "client/app-slim/rules.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Frules.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Frules.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Frules.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -93,7 +93,7 @@ export function store_maySendInvites(store: Store, user: Myself | UserInclDetail\n   if (store.settings.ssoUrl) {\n     return mayMayNot(false, \"SSO enabled\");\n   }\n-  // Currently only staff and core members may send invites. [5WBJAF2]\n+  // Currently only staff and core members may send invites. [who_may_invite]\n   if (!user_isStaffOrCoreMember(user) || user.isGroup) {\n     return mayMayNot(false, \"is not staff or core member\");\n   }\n@@ -131,6 +131,7 @@ export function pat_isStaff(user: Me | Pat): Bo {\n // Old name  CLEAN_UP REMOVE\n export const isStaff: (user: Me | Pat) => Bo = pat_isStaff;\n \n+// RENAME to pat_isStaffOrCore\n export function user_isStaffOrCoreMember(user: Myself | UserInclDetails): boolean {\n   return isStaff(user) || user_trustLevel(user) >= TrustLevel.CoreMember;\n }"
    },
    {
      "sha": "b1cb52c8754c39a23c138e7e2cfabc76199bcf26",
      "filename": "client/app-slim/slim-bundle.d.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fslim-bundle.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-slim%2Fslim-bundle.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fslim-bundle.d.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -336,6 +336,7 @@ declare namespace debiki2 {\n \n   function uppercaseFirst(text: string): string;\n   function firstDefinedOf(x, y, z?): any;\n+  function firstValOf(x, y, z?): any;\n   function groupByKeepOne<V>(vs: V[], fn: (v: V) => number): { [key: number]: V };\n   function isNullOrUndefined(x): boolean;  // REMOVE  use  notVal(x)  instead\n   function isVal(x): Bo;\n@@ -364,13 +365,17 @@ declare namespace debiki2 {\n   function user_isTrustMinNotThreat(me: UserInclDetails | Myself, trustLevel: TrustLevel): boolean;\n   //function threatLevel_toString(threatLevel: ThreatLevel): [St, St];\n   function threatLevel_toElem(threatLevel: ThreatLevel);\n+  function pat_name(pat: Me | Pat): St;\n   function pat_isMember(pat: UserInclDetails | Me | Pat | PatId): Bo;\n   var isGuest;\n   function pat_isGuest(pat: UserInclDetails | Me | Pat): Bo;\n   function user_isGuest(pat: UserInclDetails | Me | Pat): Bo;\n   function pat_isSys(pat: Pat): Bo;\n   function pat_isStaff(pat: Me | Pat): Bo;\n+  function user_isStaffOrCoreMember(pat: Me | UserInclDetails): Bo;\n   function store_maySendDirectMessageTo(store: Store, user: UserInclDetails): boolean;\n+  function pat_isBitAdv(pat: PatVb | Me): Bo;\n+  function pat_isMoreAdv(pat: PatVb | Me): Bo;\n   var page_isGroupTalk;\n \n   function store_getAuthorOrMissing(store: DiscStore, post: Post): Pat;"
    },
    {
      "sha": "14bf532777a002ce62fec5a37cfb53f38104fd1a",
      "filename": "client/app-staff/admin/staff-tours.staff.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-staff%2Fadmin%2Fstaff-tours.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Fapp-staff%2Fadmin%2Fstaff-tours.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-staff%2Fadmin%2Fstaff-tours.staff.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -30,6 +30,7 @@ function closeSidebarFn() {\n   debiki2.sidebar.contextBar.closeSidebar();\n }\n \n+// Dupl code [disp_name]\n function displayName(me: Myself): string {\n   return me.fullName || me.username;\n }"
    },
    {
      "sha": "cd494dff558c4acb4ff7ccc52ba9da5a7ed259b0",
      "filename": "client/types-and-const-enums.ts",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Ftypes-and-const-enums.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/client%2Ftypes-and-const-enums.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Ftypes-and-const-enums.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -497,6 +497,23 @@ const enum DummyTrustLevel {\n   Admin = 8,\n }\n \n+/// Any way to avoid repetition? (See TrustLevel above.)\n+/// Note that Max is different here though!\n+const enum TrustLevelOrStaff {\n+  Min = 0,\n+  Stranger = Min,\n+  New = 1,\n+  Basic = 2,\n+  FullMember = 3,\n+  Trusted = 4,\n+  Regular = 5,\n+  CoreMember = 6,\n+  Staff = 7,\n+  Admin = 8,\n+  Max = Admin,\n+}\n+\n+\n const enum ThreatLevel {\n   SuperSafe = 1,\n   SeemsSafe = 2,\n@@ -521,6 +538,9 @@ const enum BlockedReason {  // [auto_block]\n \n const enum Pats {\n   MaxGuestId = -2,\n+  NoPatId = 0,\n+  MinNotSysMemberId = 10,\n+  MinAuthnMemberId = 100,\n }\n \n "
    },
    {
      "sha": "991860c5746fea1e3b09316a0e21bc5ec1221cf1",
      "filename": "decisions.adoc",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/decisions.adoc",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/decisions.adoc",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/decisions.adoc?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -504,6 +504,8 @@ Using these links tables will make it possible for e.g. a single flag to flag\n many things, e.g. all astroturfing accounts the flagger thinks belong to the same\n real world person. Or a post can be PostRelType.AssignedTo more than one person.\n Or a private comments sub thread can be made visible to more than one other group\n-or person. Or having two people listed as co-authors of an article. — Instead of,\n-as in most other software, always just one of whatever it is.\n+or person.  Or having two people listed as co-authors of an article.\n+[Edit] Private comments and post owner(s) and many-authors will be implemented\n+differently: Post.* fields pointing by id to a person/group/list-of-people. [/Edit]\n+— Instead of, as in most other software, always just one of whatever it is.\n "
    },
    {
      "sha": "4550da9fe48ad9eeb0e60fd26110f6f305fdb1fc",
      "filename": "docs/abbreviations.txt",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/docs%2Fabbreviations.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/docs%2Fabbreviations.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fabbreviations.txt?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -211,12 +211,12 @@ Tl  = title, no, Ttl instead, see below.\n Tn  = tiny. Also Vvb and Vb = (very) verbose, Br = brief.\n Tp, Tpc = topic  [.TsT_to_TpT]\n Trt = threat\n-Tru = trust\n+Tr,\n+Tru = trust   eg. TrLv = trust level\n Tsk = task\n Ttl = title\n Top = top (as in popular)\n Txt = text\n-Tr  = Trust,  eg. TrLv = trust level NO change to Tru & Trt\n Tx  = text (tx = transaction is only server side)\n Typ = type\n U   = user"
    },
    {
      "sha": "17d072a1293b68fe0efc3d224105800b460ddd61",
      "filename": "docs/maybe-do-later.txt",
      "status": "modified",
      "additions": 79,
      "deletions": 9,
      "changes": 88,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/docs%2Fmaybe-do-later.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/docs%2Fmaybe-do-later.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fmaybe-do-later.txt?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -88,6 +88,10 @@ But missing: Search in sub cats, if searching in base cat.\n [forum_page]\n More configurable, & discussions too, see:  y2999/wip_sect_disc_props_views_stats.sql\n \n+[watchbar_to_linkbar]\n+RENAME the \"watchbar\" to \"linkbar\", the page meta bar to \"pagebar\", and the right\n+sidebar to \"contextbar\" ?\n+\n [propagate_cat_perms]\n It'd be nice if there was a way to get an overview of sub cat permissions,\n when looking at a base cat. And if one could propagate the base category's\n@@ -144,10 +148,22 @@ Rename User to Participant and User to Member.  Participant = Guest or Member, M\n Rename variables named like \"member\" to \"user\", \"memberOrGroup\" to \"member\", \"user\" to \"participant\"\n Rename \"indie\" to user\" and \"people\" to \"members\"\n \n+[private_chats] Later.\n \n-[private_pats][unlist_users]  Unlisted / less-visible / \"hidden\"? users?\n+[private_pats][some_pub_priv_prefs]  Unlisted / less-visible / \"hidden\"? users?\n So cannot see / list users unless has access to the same categories, or is in\n the same group(s) or high enough trust level or sth like that?\n+The opposite: Easy to find pats, e.g.:\n+      type ' @' and the '@support' group is suggested [mentions_prio_c].\n+\n+[tech_level] Let users configure their tech level — let's say sbd who knows all about\n+Ty joins a new forum. Then, although a New Member, hen can up hens tech level and get\n+access to features the software otherwise would have thought were too complicated.\n+Store in pats_t.tech_level_c.\n+\n+[inherit_group_priv_prefs]\n+One should inherit privacy and noise settings from one's closest trust level group,\n+and from any custom group one is in? But one's own settings should override.\n \n [user_version] [tag_versions]\n Add a version field to pats_t and an in-mem user? So knows if the in-mem one is stale;\n@@ -492,15 +508,17 @@ to know & remember who will try to answer it, later.\n [priv_comts] Private comments:\n (Aka \"whispers\" in Discourse and \"private items\" in Basecamp long ago, and \"private comments\"\n in other software.)\n-Add posts_t.private_status_c, and pat_rels_t.rel_type_c = PatLinkType.CanSeePrivate\n+Add posts_t.private_pats_id_c, and a new participant type:  lists of pats,\n to remember who can see private comments.\n-New permissions:  Who may post/reply-to/delete private comments.\n-          Or no?  Instead, this'll be *the same* as who may post direct messages (DMs)\n+New permissions\n+        - Who may post/reply-to/delete private comments.\n+            Or no?  Instead, this'll be *the same* as who may post direct messages (DMs)\n                   because private comments are *the same*, it's just that they\n                   appear inline in another discussion, instead of on a separate page.\n-                  Who may add, remove, manage users from/in private comment threads?\n             So,  a single Who-may-post-private-messages setting that applies\n             to both DMs and private comment sub threads.  [can_post_private_c]\n+        - Who may add, remove, manage users from/in private comment threads? Hmm.\n+          That'll be a  pats_t.how_private_c setting?\n Ex: Privately talk with mods, directly next to the comment being discussed.\n     Or a support group asks the Original Poster,\n       in a support topic for tech details; then the maybe new-member can reply,\n@@ -511,10 +529,6 @@ Yes?: Private comments nrs can be big & random & < 0?\n     Otherwise, people can look at post nrs and look after gaps in the number\n     sequence (if > 0) and know that maybe there're private comment sub threads.\n \n-    And a private_status_c:  is private, and: may add more who can see? May never? etc.\n-\n-Don't add any special post type, for priv comts? Their post_t.private_status_c is enough?\n-\n Don't incl priv comts when caching a page — only load lazily if current user can see.\n \n Skip: Should there be a priv_comt_root_id so, if loading a descentant privt comt,\n@@ -542,6 +556,49 @@ When composing a message, see who will get notified — e.g. if mentioning a gro\n or editing a message, can be unclar if a newly edit-added @username gets notified or not\n (they do get notified).\n \n+[filter_mentions] Render usernames that couldn't be mentioned in gray?\n+[filter_links] Don't link to bad places, e.g. malware site — show such links in plain text\n+               maybe with a warning? (depends on the community)\n+\n+\n+[mentions_prio][mentions_prio_c]\n+Maybe let  0@username generate a link, but no (zero) notification? or ...\n+       ... [@username]? no that's harder to type?\n+           =@username could be a looower prio notification, the software won't send any\n+                      email notf, only show if one visits the forum?\n+           -@username be a lower prio notification, deliver in a batch per daily\n+            @username be a low prio notification, deliver every <custom> hours\n+  no ——>   +@username or ...\n+  |    ... !@username could be an urgent notification, like, \"I'm blocked until answered\"\n+  |       !!@username be a really urgent notification, like, \"Server is down\"\n+  |        @@username alternatively?  But '@@' almost looks like just: '@'.\n+  |               '!@' is more clear?\n+  |     or 9@username could be high prio? hmm but '!' is maybe more intuitive.\n+  `\\\n+    `—— Instead, maybe:\n+        +@username  could subscribe that user to notifications about new comments on that page?\n+            Some communities relies on mention-to-subscribe quite a lot.\n+            If it's a private chat, @username gets added to the chat members and can\n+            thereafter see the chat (& gets notified about new messages).\n+            But @username only links to hens profile, won't add to the chat.\n+            And maybe:\n+        ++@username  could *assign* the page to that user. (Would assign\n+           the user to the closest ancestor post that is a *task* — in the future,\n+           also comments can be tasks (mini tasks).)\n+\n+           Would  --@username  un-assign, then?\n+           What would  -@username do? Doesn't make sense to unsubscribe sbd else from notfs?\n+\n+\n+    (skip: ?@username be a question  — maybe it'd be better with marking comments as to-do?\n+          !?@username be an urgent question )\n+\n+           @@username (two '@') could be a group notification?\n+                      E.g. Hi @@support, what [...]?  and probably @@support have\n+                      configued <custom> (see above) to be quick?\n+                      Ty would auto add the 2nd '@' even if one typed just 1, if it's a group?\n+\n+\n [power_admin]\n Various fancy admin features, disabled by default.\n \n@@ -569,6 +626,8 @@ members in the group — except for some specific groups, e.g. staff.\n And who-may-join feautre, and Join/Leave group buttons.\n Don't let one self-join groups that grants a trust level higher than one's current level.\n \n+[sub_groups]\n+\n [cont_settings_t]\n Per group and content set settings.\n Might need more fine grained settings — per pages-in-category/tag/written-by-authors,\n@@ -660,6 +719,12 @@ Also see:   [sec_tst_rscs] in sanitize-posts.2browsers.test.ts.\n \n SECURITY  [br_authn_nonce]\n \n+SITE_PRIVACY  [avoid_glob_seq_nrs]\n+Generate publicly visible ids that aren't enumerable, e.g. let browser side visible\n+user ids and post ids, notification ids, etc, be short random strings, or\n+random 64 bit ints, rather than sequential numbers.\n+What notf ids and SMTP Message-ID to use instead? [older_notfs_emails]\n+\n [emb_login_req]\n Make  login-required work also for embeded comments.\n \n@@ -755,6 +820,9 @@ server / bot.\n Custom headers.\n Sign.\n \n+[improve_imp_exp]\n+Remove fk from notfs_t to emails_out_t?\n+\n \n [extensions] [themes]\n Needs new table: t_extensions\n@@ -984,6 +1052,8 @@ https://docusaurus.io/docs/markdown-features/code-blocks#syntax-highlighting )\n Upgr Webdriverio from 6 to 7.\n Add Typescript-ESLint warning: no-floating-promises!\n \n+[java_8_to_11]\n+\n \n Better troubleshooting\n ====="
    },
    {
      "sha": "390de069d7c942cdc26a9088e3b258d5c920f417",
      "filename": "docs/tests-map.txt",
      "status": "modified",
      "additions": 21,
      "deletions": 2,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/docs%2Ftests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/docs%2Ftests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Ftests-map.txt?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -286,6 +286,12 @@ sessions:\n             - TESTS_MISSING\n \n \n+privacy:  [.noise_and_privacy]\n+  can cannot:\n+    see email:\n+    see username:\n+    see if I'm online:\n+\n navigation:\n   from anywhere, to anywhere:\n           - navigation-as-stranger.test.ts  TyT5WKAB024\n@@ -374,6 +380,7 @@ groups:\n           - group-permissions-similar-topics.2browsers.test.ts  TyT05BMRSH2J\n           - permissions-edit-wiki-posts.2browsers.test.ts  TyT603RKDEJ46\n \n+\n security:\n   access denied,\n   not found page, 404:\n@@ -721,10 +728,17 @@ mentions:\n   group mentions:\n           - group-mentions.2browsers  TyT4AWJL208R\n   channel mentions:\n+    mention @all in DM:\n+            - TESTS_MISSING  was a bug but fixed\n+                  (notfCreatedAlreadyTo() didn't want groups as message members)\n+    mention @all in chat:\n   no dupl mentions when combining @channel, @member, @group:\n   when really many members:\n           - many-users-mention-list-join-group.2browsers.test.ts  TyT2602SKJJ356\n \n+  may mention me trust level:\n+            - block-mentions.2br.d  TyTMAYMENTION\n+\n \n link previews:\n   editor maximized, split, noraml,\n@@ -839,14 +853,16 @@ post -\n \n messages,\n private messages,\n+DM:s,\n direct messages:\n             - direct-messages-notfs.3br.d  TyT602RKDL42\n   delete posts,  [.delposts]\n   test email notf link:\n             - direct-messages-delete.2browsers.test.ts   TyT5033FKSNS57\n   not searchable by the wrong people:\n             - api-search-full-text.test.ts  TyT5027KRUTP\n-\n+  may direct-message me trust level:\n+            - block-dir-msgs.2br.d  TyTBLOCKDIRMSGS\n \n chat:\n   create channel:  chat.2browsers.test.ts  (4FE2)\n@@ -975,6 +991,8 @@ users online -\n     I go on/off:\n     other on/off:\n   unchanged after server restart:\n+  not see if I'm online:\n+            - see [.noise_and_privacy]\n \n watchbar -\n   recent list:\n@@ -1470,7 +1488,8 @@ email notifications:  (5ABKR024)\n custom forms:\n             - custom-forms.3br.d  TyTCUSTFORMS\n \n-terms and privacy:\n+terms of use,\n+privacy policy:\n   read after have signed up:\n   read when signing up:\n     public community:"
    },
    {
      "sha": "ac3492b9525ddef788ec04c8b0c4d4b16c5b0239",
      "filename": "lock.sbt",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/lock.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/lock.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/lock.sbt?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -8,28 +8,28 @@ Compile / dependencyOverrides ++= {\n     Seq(\n       \"ch.qos.logback\" % \"logback-classic\" % \"1.2.11\",\n       \"ch.qos.logback\" % \"logback-core\" % \"1.2.11\",\n-      \"com.auth0\" % \"java-jwt\" % \"3.19.2\",\n+      \"com.auth0\" % \"java-jwt\" % \"3.19.3\",\n       \"com.carrotsearch\" % \"hppc\" % \"0.7.1\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-annotations\" % \"2.13.3\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.13.3\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.13.3\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-annotations\" % \"2.13.4\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.13.4\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.13.4.2\",\n       \"com.fasterxml.jackson.dataformat\" % \"jackson-dataformat-cbor\" % \"2.11.4\",\n       \"com.fasterxml.jackson.dataformat\" % \"jackson-dataformat-smile\" % \"2.8.11\",\n       \"com.fasterxml.jackson.dataformat\" % \"jackson-dataformat-yaml\" % \"2.8.11\",\n       \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jdk8\" % \"2.11.4\",\n       \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jsr310\" % \"2.11.4\",\n       \"com.fasterxml.jackson.module\" % \"jackson-module-parameter-names\" % \"2.11.4\",\n-      \"com.fasterxml.jackson.module\" % \"jackson-module-scala_2.12\" % \"2.13.3\",\n+      \"com.fasterxml.jackson.module\" % \"jackson-module-scala_2.12\" % \"2.13.4\",\n       \"com.github.ben-manes.caffeine\" % \"caffeine\" % \"2.8.8\",\n       \"com.github.ben-manes.caffeine\" % \"jcache\" % \"2.8.8\",\n       \"com.github.etaty\" % \"rediscala_2.12\" % \"1.9.0\",\n       \"com.github.jnr\" % \"jffi\" % \"1.2.17\",\n       \"com.github.jnr\" % \"jnr-a64asm\" % \"1.0.0\",\n       \"com.github.jnr\" % \"jnr-ffi\" % \"2.1.9\",\n       \"com.github.jnr\" % \"jnr-x86asm\" % \"1.0.2\",\n-      \"com.github.scribejava\" % \"scribejava-apis\" % \"8.3.1\",\n-      \"com.github.scribejava\" % \"scribejava-core\" % \"8.3.1\",\n-      \"com.github.scribejava\" % \"scribejava-java8\" % \"8.3.1\",\n+      \"com.github.scribejava\" % \"scribejava-apis\" % \"8.3.2\",\n+      \"com.github.scribejava\" % \"scribejava-core\" % \"8.3.2\",\n+      \"com.github.scribejava\" % \"scribejava-java8\" % \"8.3.2\",\n       \"com.github.spullara.mustache.java\" % \"compiler\" % \"0.9.3\",\n       \"com.google.code.findbugs\" % \"jsr305\" % \"3.0.2\",\n       \"com.google.code.gson\" % \"gson\" % \"2.8.8\",\n@@ -63,8 +63,8 @@ Compile / dependencyOverrides ++= {\n       \"com.typesafe.play\" % \"play-cache_2.12\" % \"2.8.16\",\n       \"com.typesafe.play\" % \"play-caffeine-cache_2.12\" % \"2.8.16\",\n       \"com.typesafe.play\" % \"play-exceptions\" % \"2.8.16\",\n-      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.2\",\n-      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.2\",\n+      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.3\",\n+      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.3\",\n       \"com.typesafe.play\" % \"play-logback_2.12\" % \"2.8.16\",\n       \"com.typesafe.play\" % \"play-server_2.12\" % \"2.8.16\",\n       \"com.typesafe.play\" % \"play-streams_2.12\" % \"2.8.16\",\n@@ -88,7 +88,7 @@ Compile / dependencyOverrides ++= {\n       \"dev.paseto\" % \"jpaseto-gson\" % \"0.7.0\",\n       \"dev.paseto\" % \"jpaseto-impl\" % \"0.7.0\",\n       \"dev.paseto\" % \"jpaseto-sodium\" % \"0.7.0\",\n-      \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.2.10\",\n+      \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.2.12\",\n       \"io.dropwizard.metrics\" % \"metrics-healthchecks\" % \"4.2.9\",\n       \"io.jaegertracing\" % \"jaeger-client\" % \"0.35.5\",\n       \"io.jaegertracing\" % \"jaeger-core\" % \"0.35.5\",\n@@ -140,7 +140,7 @@ Compile / dependencyOverrides ++= {\n       \"org.apache.lucene\" % \"lucene-spatial3d\" % \"7.7.3\",\n       \"org.apache.lucene\" % \"lucene-suggest\" % \"7.7.3\",\n       \"org.apache.thrift\" % \"libthrift\" % \"0.12.0\",\n-      \"org.apache.tika\" % \"tika-core\" % \"2.4.1\",\n+      \"org.apache.tika\" % \"tika-core\" % \"2.6.0\",\n       \"org.apache.tuweni\" % \"tuweni-bytes\" % \"0.10.0\",\n       \"org.apache.tuweni\" % \"tuweni-crypto\" % \"0.10.0\",\n       \"org.apache.tuweni\" % \"tuweni-io\" % \"0.10.0\",\n@@ -163,7 +163,7 @@ Compile / dependencyOverrides ++= {\n       \"org.elasticsearch.plugin\" % \"transport-netty4-client\" % \"6.8.23\",\n       \"org.flywaydb\" % \"flyway-core\" % \"5.0.7\",\n       \"org.hdrhistogram\" % \"HdrHistogram\" % \"2.1.9\",\n-      \"org.jsoup\" % \"jsoup\" % \"1.15.2\",\n+      \"org.jsoup\" % \"jsoup\" % \"1.15.3\",\n       \"org.lz4\" % \"lz4-java\" % \"1.8.0\",\n       \"org.osgi\" % \"org.osgi.service.component.annotations\" % \"1.4.0\",\n       \"org.ow2.asm\" % \"asm\" % \"5.0.3\",\n@@ -172,18 +172,18 @@ Compile / dependencyOverrides ++= {\n       \"org.ow2.asm\" % \"asm-tree\" % \"5.0.3\",\n       \"org.ow2.asm\" % \"asm-util\" % \"5.0.3\",\n       \"org.owasp.encoder\" % \"encoder\" % \"1.2.3\",\n-      \"org.postgresql\" % \"postgresql\" % \"42.4.0\",\n+      \"org.postgresql\" % \"postgresql\" % \"42.4.2\",\n       \"org.reactivestreams\" % \"reactive-streams\" % \"1.0.3\",\n       \"org.scala-lang.modules\" % \"scala-java8-compat_2.12\" % \"0.9.1\",\n       \"org.scala-lang.modules\" % \"scala-parser-combinators_2.12\" % \"1.1.2\",\n       \"org.scala-lang.modules\" % \"scala-xml_2.12\" % \"1.2.0\",\n       \"org.scala-stm\" % \"scala-stm_2.12\" % \"0.9.1\",\n-      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.12\",\n+      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.13\",\n       \"org.slf4j\" % \"jcl-over-slf4j\" % \"1.7.36\",\n       \"org.slf4j\" % \"jul-to-slf4j\" % \"1.7.36\",\n-      \"org.slf4j\" % \"slf4j-api\" % \"1.7.36\",\n+      \"org.slf4j\" % \"slf4j-api\" % \"2.0.3\",\n       \"org.yaml\" % \"snakeyaml\" % \"1.17\"\n     )\n   }\n }\n-// LIBRARY_DEPENDENCIES_HASH 512b69de24946b8407e8a3c470772cd0add63e10\n+// LIBRARY_DEPENDENCIES_HASH 9cc7d375c9a57a2a34441513fcea1f89228fb952"
    },
    {
      "sha": "81e6b8f80947aa6f0291321285ebfd99dc8cd40c",
      "filename": "project/Dependencies.scala",
      "status": "modified",
      "additions": 16,
      "deletions": 14,
      "changes": 30,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/project%2FDependencies.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/project%2FDependencies.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/project%2FDependencies.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -20,7 +20,7 @@ object ProjectDirectory {\n object Dependencies {\n \n   object Play {\n-    val json = \"com.typesafe.play\" %% \"play-json\" % \"2.9.2\"\n+    val json = \"com.typesafe.play\" %% \"play-json\" % \"2.9.3\"\n   }\n \n   object Libs {\n@@ -39,13 +39,13 @@ object Dependencies {\n     // supports listener-notify.\n     // https://stackoverflow.com/questions/21632243/\n     //        how-do-i-get-asynchronous-event-driven-listen-notify-support-in-java-using-a-p\n-    val postgresqlJbcdClient = \"org.postgresql\" % \"postgresql\" % \"42.4.0\"\n+    val postgresqlJbcdClient = \"org.postgresql\" % \"postgresql\" % \"42.4.2\"\n \n     // Database migrations.\n     val flywaydb = \"org.flywaydb\" % \"flyway-core\" % \"5.0.7\"   // scala-steward:off\n \n     // HikariCP — \"A solid high-performance JDBC connection pool at last\"\n-    // Java 11 needs/can/should use \"5.0.1\"\n+    // Java 11 needs/can/should use \"5.0.1\". [java_8_to_11]\n     val hikariCp = \"com.zaxxer\" % \"HikariCP\" % \"4.0.3\"\n \n     // ElasticSearch client, in https://mvnrepository.com.\n@@ -62,11 +62,11 @@ object Dependencies {\n \n     // Does v1.25 recognize .woff and .woff2 file extensions? Then can remove\n     // extra checks in module ty-core. [5AKR20]\n-    val apacheTika = \"org.apache.tika\" % \"tika-core\" % \"2.4.1\"\n+    val apacheTika = \"org.apache.tika\" % \"tika-core\" % \"2.6.0\"\n \n-    val jsoup = \"org.jsoup\" % \"jsoup\" % \"1.15.2\"\n+    val jsoup = \"org.jsoup\" % \"jsoup\" % \"1.15.3\"\n \n-    val jacksonModuleScala = \"com.fasterxml.jackson.module\" %% \"jackson-module-scala\" % \"2.13.3\"\n+    val jacksonModuleScala = \"com.fasterxml.jackson.module\" %% \"jackson-module-scala\" % \"2.13.4\"\n \n     // ScribeJava, an OAuth lib, also works for OIDC (OpenID Connect).\n     // ScribeJava is listed by Microsoft as compatible with Azure,\n@@ -75,17 +75,19 @@ object Dependencies {\n     // https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-v2-libraries#compatible-client-libraries\n     //\n     // VENDOR_THIS — it'd be good to Maven-build via Makefile?\n-    val scribeJava = \"com.github.scribejava\" % \"scribejava-apis\" % \"8.3.1\"\n+    val scribeJava = \"com.github.scribejava\" % \"scribejava-apis\" % \"8.3.2\"\n \n \n     // ----- Logging\n \n+    // Logback 1.3 (and 1.2?) requires Java 8 at runtime,  1.4 Java 11.  [java_8_to_11]\n+\n     // Fluentd better understands json logs.\n     // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic\n-    val logbackClassic = \"ch.qos.logback\" % \"logback-classic\" % \"1.2.11\"\n+    val logbackClassic = \"ch.qos.logback\" % \"logback-classic\" % \"1.3.4\"\n \n     // https://mvnrepository.com/artifact/ch.qos.logback/logback-core\n-    val logbackCore = \"ch.qos.logback\" % \"logback-core\" % \"1.2.11\"\n+    val logbackCore = \"ch.qos.logback\" % \"logback-core\" % \"1.3.4\"\n \n     // Docs: https://github.com/logstash/logstash-logback-encoder/tree/logstash-logback-encoder-4.9\n     val logstashLogbackEncoder = \"net.logstash.logback\" % \"logstash-logback-encoder\" % \"7.2\"\n@@ -94,7 +96,7 @@ object Dependencies {\n \n     // ----- Metrics, tracing\n \n-    val metricsCore = \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.2.10\"\n+    val metricsCore = \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.2.12\"\n \n     // Deprecated. SHOULD migrate to OpenTelemetry, they say, https://opentelemetry.io/.\n     // 1.8.1 exists now.\n@@ -123,7 +125,7 @@ object Dependencies {\n     //\n     // Let's use Java-JWT. It's well-known and its readme has a simple decoding example.\n     // Repo: https://github.com/auth0/java-jwt\n-    val auth0JavaJwt = \"com.auth0\" % \"java-jwt\" % \"3.19.2\"\n+    val auth0JavaJwt = \"com.auth0\" % \"java-jwt\" % \"3.19.3\"\n \n \n     // ----- PASETO tokens\n@@ -154,12 +156,12 @@ object Dependencies {\n \n     // ----- Test\n \n-    val scalactic = \"org.scalactic\" %% \"scalactic\" % \"3.2.12\"\n-    val scalaTest = \"org.scalatest\" %% \"scalatest\" % \"3.2.12\" % \"test\"\n+    val scalactic = \"org.scalactic\" %% \"scalactic\" % \"3.2.14\"\n+    val scalaTest = \"org.scalatest\" %% \"scalatest\" % \"3.2.14\" % \"test\"\n     val scalaTestPlusPlay = \"org.scalatestplus.play\" %% \"scalatestplus-play\" % \"5.1.0\" % Test\n \n     // Don't use, migrate to ScalaTest instead, some day.\n-    val specs2 = \"org.specs2\" %% \"specs2-core\" % \"3.10.0\" % \"test\"\n+    val specs2 = \"org.specs2\" %% \"specs2-core\" % \"3.10.0\" % \"test\"  // scala-steward:off\n   }\n \n }"
    },
    {
      "sha": "6a9f0388941f89fd7a2b517ecff11c2c67aecdfb",
      "filename": "project/build.properties",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/project%2Fbuild.properties",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/project%2Fbuild.properties",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/project%2Fbuild.properties?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -1 +1 @@\n-sbt.version=1.6.2\n+sbt.version=1.7.3"
    },
    {
      "sha": "c158fa6043e7d04313bc38b2cb4cb19f216b407f",
      "filename": "project/plugins.sbt",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/project%2Fplugins.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/project%2Fplugins.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/project%2Fplugins.sbt?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -18,10 +18,10 @@ resolvers ++= Seq(\n   Resolver.sbtPluginRepo(\"releases\")) // =  https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases/\n \n // Use the Play sbt plugin for Play projects\n-addSbtPlugin(\"com.typesafe.play\" % \"sbt-plugin\" % \"2.8.16\")\n+addSbtPlugin(\"com.typesafe.play\" % \"sbt-plugin\" % \"2.8.18\")\n \n // A refactoring and linting tool for Scala\n-addSbtPlugin(\"ch.epfl.scala\" % \"sbt-scalafix\" % \"0.10.1\")\n+addSbtPlugin(\"ch.epfl.scala\" % \"sbt-scalafix\" % \"0.10.4\")\n \n // Pin dependencies.\n addSbtPlugin(\"com.github.tkawachi\" % \"sbt-lock\" % \"0.8.0\")"
    },
    {
      "sha": "29a51f375830c9c7fbdf75df7cd3ae91897150da",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans%2Ftyse-v0-dev?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -1 +1 @@\n-Subproject commit 0762d69d1af6897545a94135c228bb49840c5831\n+Subproject commit 29a51f375830c9c7fbdf75df7cd3ae91897150da"
    },
    {
      "sha": "def36bf7818984e34a83130bce003edacce22f48",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/s%2Frun-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/s%2Frun-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s%2Frun-e2e-tests.sh?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -452,6 +452,9 @@ function runAllE2eTests {\n \n   $r s/wdio --only notfs-mark-seen-as-seen.2browsers $args  # RENAME append -automatically\n \n+  $r s/wdio-7 --only block-mentions.2br.d --cd -i $args\n+  $r s/wdio-7 --only block-dir-msgs.2br.d --cd -i $args\n+\n   # RENAME these to  modn-... ,  and MOVE to (4862065) below?\n   $r s/wdio --only new-user-review-ok.2br.mtime $args\n   #$r s/wdio --only new-user-review-bad.2browsers $args"
    },
    {
      "sha": "c03fb48de24f8af2f82e6683f80129655a779ce3",
      "filename": "s/tyd.ts",
      "status": "modified",
      "additions": 50,
      "deletions": 1,
      "changes": 51,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/s%2Ftyd.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/s%2Ftyd.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s%2Ftyd.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -99,8 +99,57 @@ logDebug(`opts str: ${tyu.stringifyOpts(opts)}`);\n const yarnOfflineSt = opts.offline || opts.o ? '--offline' : '';\n \n \n+function logHelpText() {\n+  logMessage(`\n+\n+Starting a development server\n+--------------------------\n+\n+  Start a dev server:       s/tyd u   # 'u' for 'up', runs 'docker-compose up'\n+  Restart app container:    s/tyd r   # 'restart', e.g.:  s/tyd r app\n+  Rebuild imgs and restart: s/tyd rr  # 'rebuild restart'\n+  Stop containers:          s/tyd k   # 'kill', e.g.  s/tyd kill app\n+  Remove containers:        s/tyd d   # 'down'\n+  View logs:                s/tyd l   # 'logs'\n+  View recent app logs:     s/tyd lra # 'logs, recent, app'\n+\n+Console\n+--------------------------\n+\n+  Open PostgreSQL prompt:   s/tyd cd  # for 'console, database'\n+  Start a Scala CLI:        s/tyd ca  # for 'console, app server'\n+\n+Running tests\n+--------------------------\n+\n+End-to-End tests:\n+  We're slowly migrating from Webdriverio 6 to 7. The Wdio 6 test files are in\n+  tests/e2e/ and the Wdio 7 files are in tests/e2e-wdio7/.\n+\n+  First start Talkyard:     s/tyd u\n+\n+  Run Webdriverio 7 tests:  s/tyd e7 --retry 2 --skipFacebook --cd  # uses Chromedriver\n+\n+  Run Webdriverio 6 tests:  s/tyd e6 --retry 2 --skipFacebook   # start Selenium first\n+  Start Selenium:           d/selenium chrome\n+  Stop Selenium:            d/selenium kill\n+\n+  Testing external login:   The s/tyd ... above but add '--3 --secretsPath ../e2e-secrets.json'\n+                            to include login credentials. You need to create\n+                            e2e-secrets.json yourself, and create Gmail and GitHub etc\n+                            test accounts yourself. Docs missing, sorry.\n+\n+  Run all tests:            s/run-e2e-tests  # done automatically when building prod images\n+\n+Unit tests:\n+  Start a Scala CLI:        s/tyd ca  # this first stops any app container\n+  Run tests (in the CLI):   test\n+`);\n+}\n+\n+\n if (mainCmd === 'h' || mainCmd === 'help') {\n-  logMessage(`You help me or I help you? Open  s/tyd.ts  and read`);\n+  logHelpText();\n   process.exit(0);\n }\n "
    },
    {
      "sha": "b0117a62d5d82ba4e326a20c5f6619004b064f6c",
      "filename": "tests/app/debiki/dao/DaoAppSuite.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fapp%2Fdebiki%2Fdao%2FDaoAppSuite.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fapp%2Fdebiki%2Fdao%2FDaoAppSuite.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FDaoAppSuite.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -264,7 +264,7 @@ class DaoAppSuite(\n   def updateMemberPreferences(dao: SiteDao, memberId: UserId,\n         fn: AboutUserPrefs => AboutUserPrefs) {\n     val member = dao.loadTheUserInclDetailsById(memberId)\n-    dao.saveAboutMemberPrefs(fn(member.preferences_debugTest), Who(memberId, browserIdData))\n+    dao.saveAboutMemberPrefsIfAuZ(fn(member.preferences_debugTest), Who(memberId, browserIdData))\n   }\n \n "
    },
    {
      "sha": "0bf4a92c65afd1f9e241f3b05542d9e01b256d0e",
      "filename": "tests/app/debiki/dao/MessagesDaoAppSpec.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fapp%2Fdebiki%2Fdao%2FMessagesDaoAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fapp%2Fdebiki%2Fdao%2FMessagesDaoAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FMessagesDaoAppSpec.scala?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -40,7 +40,7 @@ class MessagesDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackg\n       val userTwo = createPasswordUser(\"qqwwffpp\", dao, trustLevel = TrustLevel.BasicMember)\n       val pagePath = dao.startGroupTalk(TitleSourceAndHtml(\"title_558206\"),\n         body = textAndHtmlMaker.testBody(\"message_2749\"), PageType.FormalMessage,\n-        toUserIds = Set(userTwo.id), sentByWho = Who(userOne.id, browserIdData),\n+        toMemIds = Set(userTwo.id), sentByWho = Who(userOne.id, browserIdData),\n         dummySpamRelReqStuff, deleteDraftNr = None)\n \n       dao.readOnlyTransaction { transaction =>\n@@ -114,7 +114,7 @@ class MessagesDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackg\n       info(\"a moderate threat can message admin\"); {\n         val pagePath = dao.startGroupTalk(TitleSourceAndHtml(\"title_0482745\"),\n           body = textAndHtmlMaker.testBody(\"body_0482745\"), PageType.FormalMessage,\n-          toUserIds = Set(admin.id), sentByWho = Who(sender.id, browserIdData),\n+          toMemIds = Set(admin.id), sentByWho = Who(sender.id, browserIdData),\n           dummySpamRelReqStuff, deleteDraftNr = None)\n \n         val pageMeta = dao.readOnlyTransaction(_.loadThePageMeta(pagePath.pageId))\n@@ -135,7 +135,7 @@ class MessagesDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackg\n \n     def sendMessageTo(toWhom: Set[UserId], fromUserId: UserId, dao: SiteDao): PagePathWithId =\n       dao.startGroupTalk(TitleSourceAndHtml(\"title_0482745\"),\n-        body = textAndHtmlMaker.testBody(\"body_0482745\"), PageType.FormalMessage, toUserIds = toWhom,\n+        body = textAndHtmlMaker.testBody(\"body_0482745\"), PageType.FormalMessage, toMemIds = toWhom,\n         sentByWho = Who(fromUserId, browserIdData), dummySpamRelReqStuff, deleteDraftNr = None)\n   }\n "
    },
    {
      "sha": "29aeae51a1984753f368110b176afe8e852947ec",
      "filename": "tests/e2e-wdio7/package.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fpackage.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fpackage.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fpackage.json?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -14,7 +14,7 @@\n     \"@wdio/spec-reporter\": \"^7.20.3\",\n     \"@wdio/types\": \"^7.20.3\",\n     \"axios\": \"^0.26.1\",\n-    \"chromedriver\": \"^105.0.0\",\n+    \"chromedriver\": \"^106.0.1\",\n     \"paseto.js\": \"^0.1.7\",\n     \"ts-node\": \"^10.2.1\",\n     \"wdio-chromedriver-service\": \"^7.3.2\""
    },
    {
      "sha": "b0af5dbc8faadfb61cc177d19e02386014e01cb0",
      "filename": "tests/e2e-wdio7/specs/block-dir-msgs.2br.d.e2e.ts",
      "status": "added",
      "additions": 305,
      "deletions": 0,
      "changes": 305,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fspecs%2Fblock-dir-msgs.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fspecs%2Fblock-dir-msgs.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fblock-dir-msgs.2br.d.e2e.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -0,0 +1,305 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+import settings from '../utils/settings';\n+\n+let allBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let alice: Member;\n+let mons: Member;\n+let corax: Member;\n+let corax_brB: TyE2eTestBrowser;\n+let maria: Member;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;  // or TwoPagesTestForum or EmptyTestForum or LargeTestForum\n+\n+let numEmailsTotal = 0;\n+\n+\n+describe(`block-dir-msgs.2br.d  TyTBLOCKDIRMSGS`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Some E2E Test\",\n+      categoryAExtId: 'cat_a_ext_id',\n+      members: ['alice', 'mons', 'corax', 'memah', 'maria']\n+    });\n+\n+    // Disable review notifications, or notf email counts will be off.\n+    // (since Owen would get emails).\n+    builder.settings({\n+      numFirstPostsToApprove: 0,\n+      //maxPostsPendApprBefore: 0,\n+      numFirstPostsToReview: 0,\n+    });\n+    builder.getSite().pageNotfPrefs = [{\n+      memberId: forum.members.owen.id,\n+      notfLevel: c.TestPageNotfLevel.Normal,\n+      wholeSite: true,\n+    }];\n+\n+    allBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    alice = forum.members.alice;\n+    mons = forum.members.mons;\n+    maria = forum.members.maria;\n+\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+\n+    corax = forum.members.corax;\n+    corax_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    await server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Owen logs in to his privacy settings`, async () => {\n+    await owen_brA.userProfilePage.openPreferencesFor(owen.username, site.origin);\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+    await owen_brA.userProfilePage.preferences.switchToPrivacy();\n+  });\n+\n+\n+\n+  // ----- DM:s work\n+\n+\n+  it(`Memah logs in`, async () => {\n+    await memah_brB.userProfilePage.openActivityFor(owen.username, site.origin);\n+    await memah_brB.complex.loginWithPasswordViaTopbar(memah);\n+  });\n+\n+  it(`Memah DM:s (direct-messages) Owen`, async () => {\n+    numEmailsTotal += 1;\n+    await memah_brB.userProfilePage.clickSendMessage();\n+    await memah_brB.editor.editTitle(\"What is it\");\n+    await memah_brB.editor.editText(\"What time is it Owen\");\n+    await memah_brB.editor.saveWaitForNewPage();\n+  });\n+  it(`Owen gets notified`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, owen.emailAddress, \"What time is it\");\n+  });\n+\n+\n+\n+  // ----- Block DM:s\n+\n+  // Server side:  [server_blocks_dms]\n+\n+  it(`Memah starts typing another message`, async () => {\n+    await memah_brB.userProfilePage.openActivityFor(owen.username);\n+    await memah_brB.userProfilePage.clickSendMessage();\n+    await memah_brB.editor.editTitle(\"Where\");\n+    await memah_brB.editor.editText(\"Where did I say the meeting should be, Owen\");\n+  });\n+\n+\n+  it(`Owen disables DM:s for everyone but >= core members`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.setMayDirMsgMeTrustLevel(\n+            c.TestTrustLevel.CoreMember);\n+  });\n+  it(`... saves`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+\n+  it(`Memah tries to send her new DM`, async () => {\n+    await memah_brB.editor.clickSave();\n+  });\n+  it(`... but it's rejected by the server`, async () => {\n+    await memah_brB.serverErrorDialog.waitAndAssertTextMatches('EsEMAY0MSG');  // edt code\n+  });\n+\n+  // Client side:\n+\n+  it(`Memah reloads the page`, async () => {\n+    await memah_brB.refresh2();\n+  });\n+\n+  it(`... sees that Owen has disabled DM:s`, async () => {\n+    assert.not(await memah_brB.userProfilePage.canSendDirectMessageTo());\n+  });\n+\n+\n+\n+  // ----- Group members can block group DM:s\n+\n+  it(`Memah goes to the Staff group`, async () => {\n+    await memah_brB.userProfilePage.openActivityFor('staff');\n+  });\n+\n+  it(`Memah sends a message to Staff`, async () => {\n+    numEmailsTotal += 2;\n+    await memah_brB.userProfilePage.clickSendMessage();\n+    await memah_brB.editor.editTitle(\"Where\");\n+    await memah_brB.editor.editText(\"Owen where did I say the meeting should be tomorrow\");\n+    await memah_brB.editor.saveWaitForNewPage();\n+  });\n+\n+  it(`Admin Alice gets notified`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, alice.emailAddress, \"where did I say\");\n+  });\n+  it(`... and Moderator Mons`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, mons.emailAddress, \"where did I say\");\n+  });\n+  it(`... but not Owen — he blocks DM:s from new members,\n+            also when sent via a group he is in`, async () => {\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, numEmailsTotal, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+\n+\n+  // ----- Groups can block DM:s\n+\n+  // Server side:  [server_blocks_dms]\n+\n+  it(`Memah goes to Staff again`, async () => {\n+    await memah_brB.userProfilePage.openActivityFor('staff');\n+  });\n+  it(`... starts typing another message to Staff`, async () => {\n+    await memah_brB.userProfilePage.clickSendMessage();\n+    await memah_brB.editor.editTitle(\"Rain\");\n+    await memah_brB.editor.editText(\n+            \"Everyone, I want an umbrella. Or does my cat like water\");\n+  });\n+\n+  it(`Owen goes to the Staff group's preferences`, async () => {\n+    await owen_brA.userProfilePage.openPreferencesFor('staff', site.origin);\n+    await owen_brA.userProfilePage.preferences.switchToPrivacy();\n+  });\n+  it(`... disables DM:s, and saves`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.setMayDirMsgMeTrustLevel(\n+            c.TestTrustLevel.CoreMember);\n+    await owen_brA.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+\n+  it(`Memah tries to send the new DM`, async () => {\n+    await memah_brB.editor.clickSave();\n+  });\n+  it(`... but it's rejected by the server`, async () => {\n+    await memah_brB.serverErrorDialog.waitAndAssertTextMatches('EsEMAY0MSG');  // edt code\n+  });\n+\n+  // Client side:\n+\n+  it(`Memah reloads the page`, async () => {\n+    await memah_brB.refresh2();\n+  });\n+\n+  it(`... sees that DM:s to Staff are now disabled`, async () => {\n+    assert.not(await memah_brB.userProfilePage.canSendDirectMessageTo());\n+  });\n+\n+\n+\n+  // ----- Higher trust levels can still DM others\n+\n+\n+  it(`Memah leaves`, async () => {\n+    await memah_brB.go2(site.origin);\n+    await memah_brB.topbar.clickLogout();\n+  });\n+\n+  it(`Corax core arrives, goes to Staff`, async () => {\n+    await corax_brB.complex.loginWithPasswordViaTopbar(corax);\n+    await corax_brB.userProfilePage.openActivityFor('staff');\n+  });\n+\n+\n+  it(`Corax messages Staff`, async () => {\n+    numEmailsTotal += 3;\n+    await memah_brB.userProfilePage.clickSendMessage();\n+    await corax_brB.editor.editTitle(\"All questions\");\n+    await corax_brB.editor.editText(\"All questions are good questions, lets reenable DMs\");\n+    await corax_brB.editor.saveWaitForNewPage();\n+  });\n+\n+  it(`Admin Alice gets notified`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, alice.emailAddress, \"All questions\");\n+  });\n+  it(`... and Moderator Mons`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, mons.emailAddress, \"All questions\");\n+  });\n+  it(`... and Owen, because he hasn't blocked Core Members`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, owen.emailAddress, \"All questions\");\n+  });\n+  it(`... no one else`, async () => {\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, numEmailsTotal, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+\n+\n+  // ----- Re-enabling DM:s\n+\n+\n+  it(`Owen enables DM:s for Staff again, and saves`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.setMayDirMsgMeTrustLevel(\n+            c.TestTrustLevel.New);\n+    await owen_brA.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+\n+\n+  it(`Corax leaves`, async () => {\n+    await corax_brB.topbar.clickLogout();\n+  });\n+  it(`Memah returns, goes to Staff`, async () => {\n+    await memah_brB.complex.loginWithPasswordViaTopbar(memah);\n+    await memah_brB.userProfilePage.openActivityFor('staff');\n+  });\n+\n+  it(`Now Memah can message Staff again`, async () => {\n+    assert.that(await memah_brB.userProfilePage.canSendDirectMessageTo());\n+  });\n+\n+  it(`Memah messages Staff`, async () => {\n+    numEmailsTotal += 2;\n+    await memah_brB.userProfilePage.clickSendMessage();\n+    await memah_brB.editor.editTitle(\"If I was a cat\");\n+    await memah_brB.editor.editText(\"and could keep my current weight, would that be a lot\");\n+    await memah_brB.editor.saveWaitForNewPage();\n+  });\n+\n+  it(`Admin Alice gets notified`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, alice.emailAddress, \"current weight\");\n+  });\n+  it(`... and Moderator Mons`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, mons.emailAddress, \"current weight\");\n+  });\n+  it(`... but not Owen, he still blocks DM:s from new members`, async () => {\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, numEmailsTotal, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+\n+\n+  // TESTS_MISSING — DM a custom group too, not just built-in groups,\n+  // and verify works. And blocking DMs too.\n+\n+\n+});\n+"
    },
    {
      "sha": "53b0f199d612d6bc6385e793c110aee7a5a75983",
      "filename": "tests/e2e-wdio7/specs/block-mentions.2br.d.e2e.ts",
      "status": "added",
      "additions": 250,
      "deletions": 0,
      "changes": 250,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fspecs%2Fblock-mentions.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fspecs%2Fblock-mentions.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fblock-mentions.2br.d.e2e.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -0,0 +1,250 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let modya: Member;\n+let maria: Member;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+let numEmailsTotal = 0;\n+\n+\n+describe(`block-mentions.2br.d  TyTMAYMENTION`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Some E2E Test\",\n+      categoryAExtId: 'cat_a_ext_id',\n+      members: ['modya', 'corax', 'memah', 'maria']\n+    });\n+\n+    // Disable review notifications, or notf email counts will be off.\n+    // (since Owen would get emails).\n+    builder.settings({\n+      numFirstPostsToApprove: 0,\n+      //maxPostsPendApprBefore: 0,\n+      numFirstPostsToReview: 0,\n+    });\n+    builder.getSite().pageNotfPrefs = [{\n+      memberId: forum.members.owen.id,\n+      notfLevel: c.TestPageNotfLevel.Normal,\n+      wholeSite: true,\n+    }];\n+\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    modya = forum.members.modya;\n+    maria = forum.members.maria;\n+\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    await server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Owen logs in to his privacy settings, ... `, async () => {\n+    await owen_brA.userProfilePage.openPreferencesFor(owen.username, site.origin);\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+    await owen_brA.userProfilePage.preferences.switchToPrivacy();\n+  });\n+\n+\n+  it(`... disables @mentions for everyone but >= core members`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.setMayMentionMeTrustLevel(\n+            c.TestTrustLevel.CoreMember);\n+  });\n+  it(`... saves`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+\n+\n+  it(`Memah logs in`, async () => {\n+    await memah_brB.go2(site.origin);\n+    await memah_brB.complex.loginWithPasswordViaTopbar(memah);\n+  });\n+\n+\n+\n+  // ----- Block @mentions in new topic\n+\n+\n+  it(`... creates a page, mentions Owen first, no notf sent ...`, async () => {\n+    numEmailsTotal += 0;\n+    await memah_brB.complex.createAndSaveTopic({ title: \"Hi Owen and Maria\", body:\n+          `Let me mention something, @${owen.username} — something important, so much, wow`});\n+  });\n+\n+\n+  it(`... and then Maria`, async () => {\n+    numEmailsTotal += 1;\n+    await memah_brB.complex.replyToOrigPost(\n+          `And @${maria.username} you too, it is rare and special also, ,,, Hello`);\n+  });\n+\n+\n+  it(`Maria gets notified`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, maria.emailAddress, \"rare and special\");\n+  });\n+  it(`... but not Owen — he has restricted @mentions`, async () => {\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, numEmailsTotal, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+\n+\n+  // ----- Block @mentions in comments\n+\n+\n+  it(`Memah again mentions first Owen ...`, async () => {\n+    numEmailsTotal += 0;\n+    await memah_brB.complex.replyToOrigPost(\n+          `Actually @${owen.username}`);\n+  });\n+\n+\n+  it(`... then then Maria`, async () => {\n+    numEmailsTotal += 1;\n+    await memah_brB.complex.replyToOrigPost(\n+          `And @${maria.username} — I'm upset, I will not tell you,`);\n+  });\n+\n+\n+  it(`Maria gets notified`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, maria.emailAddress, \"not tell you\");\n+  });\n+  it(`... but not Owen — he has restricted @mentions`, async () => {\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, numEmailsTotal, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+\n+\n+  // ----- Clear settings\n+\n+\n+  it(`Owen enables mentions again, but disables direct messages (DM:s)`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.setMayMentionMeTrustLevel(\n+            c.TestTrustLevel.New);\n+    await owen_brA.userProfilePage.preferences.privacy.setMayDirMsgMeTrustLevel(\n+            c.TestTrustLevel.CoreMember);\n+  });\n+  it(`... saves`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+\n+\n+  it(`Memah mentions both Owen and Maria`, async () => {\n+    numEmailsTotal += 2;\n+    await memah_brB.complex.replyToOrigPost(\n+          `That's what happens when you don't reply!\n+          @${owen.username} and @${maria.username} — it is important, much, very`);     // FOK\n+  });\n+\n+\n+  it(`Now both Owen and Maria get notified`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, maria.emailAddress, \"what happens\");\n+    await server.waitUntilLastEmailMatches(site.id, owen.emailAddress, \"what happens\");\n+  });\n+  it(`Total emails is correct`, async () => {\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, numEmailsTotal, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+\n+\n+  // ----- Group mentions: Built-in groups\n+\n+\n+  it(`Owen disables mentions again`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.setMayMentionMeTrustLevel(\n+            c.TestTrustLevel.CoreMember);\n+  });\n+  it(`... saves`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+\n+  // Own settings override group settings:\n+\n+  it(`Maria mentions @staff`, async () => {\n+    numEmailsTotal += 1;\n+    await memah_brB.complex.replyToOrigPost(\n+          `Any other @staff member who wants to listen`);\n+  });\n+\n+  it(`Moderator Modya gets notified — she has no personal @mentions settings`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, modya.emailAddress, \"wants to listen\");\n+  });\n+  it(`Owen doesn't get notified — he has restricted mentioins of him,\n+          and that also affects group mentions`, async () => {\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, numEmailsTotal, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+  // Groups can block mentions:\n+\n+  it(`Owen goes to Staff's privacy preferences`, async () => {\n+    await owen_brA.userProfilePage.openPreferencesFor('staff');\n+    await owen_brA.userProfilePage.preferences.switchToPrivacy();\n+  });\n+  it(`... disables mentions for @staff`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.setMayMentionMeTrustLevel(\n+            c.TestTrustLevel.CoreMember);\n+  });\n+  it(`... saves`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+\n+  it(`Memah mentions @staff again`, async () => {\n+    numEmailsTotal += 0;\n+    await memah_brB.complex.replyToOrigPost(\n+          `Ok, @staff — some important to say I have`);\n+  });\n+  it(`... and mentions Maria`, async () => {\n+    numEmailsTotal += 1;\n+    await memah_brB.complex.replyToOrigPost(\n+          `And @${maria.username} — hello lets try again`);\n+  });\n+\n+  it(`Maria gets @mention-notified`, async () => {\n+    await server.waitUntilLastEmailMatches(site.id, maria.emailAddress, \"try again\");\n+  });\n+  it(`... but no staff member`, async () => {\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, numEmailsTotal, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+\n+\n+  // ----- Group mentions: Custom groups\n+\n+  // TESTS_MISSING. the above, but with a custom @group, too? Construct a group &\n+  // memberships when creating the site? So this test won't take so long to run.\n+\n+\n+});\n+"
    },
    {
      "sha": "310bf93859cd870cb1e6afae9d6ed730aed62d24",
      "filename": "tests/e2e-wdio7/specs/cats-perf-many.2br.d.e2e.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fspecs%2Fcats-perf-many.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fspecs%2Fcats-perf-many.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fcats-perf-many.2br.d.e2e.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -4,20 +4,15 @@ import * as _ from 'lodash';\n import assert from '../utils/ty-assert';\n import server from '../utils/server';\n import { buildSite } from '../utils/site-builder';\n-import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/ty-e2e-test-browser';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n import { logBitHappy, j2s, logError, die, logBoring } from '../utils/log-and-die';\n import c from '../test-constants';\n-import settings = require('../utils/settings');\n+import settings from '../utils/settings';\n \n-let allBrowsers: TyAllE2eTestBrowsers;\n let brA: TyE2eTestBrowser;\n let brB: TyE2eTestBrowser;\n let owen: Member;\n let owen_brA: TyE2eTestBrowser;\n-let maja: Member;\n-let maja_brB: TyE2eTestBrowser;\n-let memah: Member;\n-let memah_brB: TyE2eTestBrowser;\n let stranger_brB: TyE2eTestBrowser;\n \n // For embedded comments:  EMBCMTS\n@@ -136,17 +131,12 @@ describe(`cats-perf-many.2br.d  TyTECATPREFMNY`, () => {\n       wholeSite: true,\n     }];\n \n-    allBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n     brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n     brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n \n     owen = forum.members.owen;\n     owen_brA = brA;\n \n-    maja = forum.members.maja;\n-    maja_brB = brB;\n-    memah = forum.members.memah;\n-    memah_brB = brB;\n     stranger_brB = brB;\n \n     assert.refEq(builder.getSite(), forum.siteData);"
    },
    {
      "sha": "ec1ce2e59865c9887599b7fee451a8445f5b4c0a",
      "filename": "tests/e2e-wdio7/specs/dir.manual.2br.e2e.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fspecs%2Fdir.manual.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fspecs%2Fdir.manual.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fdir.manual.2br.e2e.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -29,7 +29,7 @@ describe(\"some-e2e-test  TyT1234ABC\", () => {\n     const builder = buildSite();\n     forum = builder.addTwoPagesForum({  // or: builder.addLargeForum\n       title: \"Some E2E Test\",\n-      members: ['maria', 'memah', 'michael'],\n+      members: ['alice', 'mons', 'corax', 'trillian', 'maria', 'memah', 'michael'],\n     });\n     assert.refEq(builder.getSite(), forum.siteData);\n "
    },
    {
      "sha": "a0f0d95e9d03668dd482ce030aa3c0c71f5129b9",
      "filename": "tests/e2e-wdio7/utils/ty-e2e-test-browser.ts",
      "status": "modified",
      "additions": 20,
      "deletions": 2,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -7333,6 +7333,11 @@ export class TyE2eTestBrowser {\n         await this.waitAndClick('.s_UP_SendMsgB');\n       },\n \n+      canSendDirectMessageTo: async (): Pr<Bo> => {\n+        await this.isVisible('.s_UP_SendMsgB, .e_CantDirMsg'); // maybe can return elm instead?\n+        return await this.isVisible('.s_UP_SendMsgB');\n+      },\n+\n       _goHere: async (username: St, ps: { isGroup?: true, origin?: St }, suffix: St) => {\n         await this.go((ps.origin || '') +\n                 `/-/${ps.isGroup ? 'groups' : 'users'}/${username}${suffix}`);\n@@ -7664,7 +7669,7 @@ export class TyE2eTestBrowser {\n \n         switchToPrivacy: async () => {\n           await this.waitAndClick('.e_UP_Prf_Nav_PrivL');\n-          await this.waitForVisible('.e_HideActivityAllCB');\n+          await this.waitForVisible('.e_PrivPrefsF');\n         },\n \n         // ---- Should be wrapped in `about { .. }`:\n@@ -7738,8 +7743,21 @@ export class TyE2eTestBrowser {\n             await this.setCheckbox('.e_HideActivityAllCB input', enabled);\n           },\n \n+          setMayMentionMeTrustLevel: async (level: Nr) => {\n+            await this.waitAndClick('.e_WhoMayMention .btn');\n+            await this.waitAndClick(`.e_TruLvD .e_TrLv-${level}`);\n+            await this.waitForVisible(`.e_WhoMayMention .e_TrLv-${level}.btn`);\n+          },\n+\n+          setMayDirMsgMeTrustLevel: async (level: Nr) => {\n+            await this.waitAndClick('.e_WhoMayDm .btn');\n+            await this.waitAndClick(`.e_TruLvD .e_TrLv-${level}`);\n+            await this.waitForVisible(`.e_WhoMayDm .e_TrLv-${level}.btn`);\n+          },\n+\n           savePrivacySettings: async () => {\n-            dieIf(await this.isVisible('.e_Saved'), 'TyE6UKHRQP4'); // unimplemented\n+            dieIf(await this.isVisible('.e_Saved'),\n+                  \"E2e bug? No changes to save? [TyEE496MRKT]\");\n             await this.waitAndClick('.e_SavePrivacy');\n             await this.waitForVisible('.e_Saved');\n           },"
    },
    {
      "sha": "023d86b39ccdc8cb06422fac34499b1194068357",
      "filename": "tests/e2e-wdio7/yarn.lock",
      "status": "modified",
      "additions": 30,
      "deletions": 16,
      "changes": 46,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fyarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e-wdio7%2Fyarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fyarn.lock?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -290,10 +290,10 @@\n   dependencies:\n     defer-to-connect \"^2.0.0\"\n \n-\"@testim/chrome-version@^1.1.2\":\n-  version \"1.1.2\"\n-  resolved \"https://registry.yarnpkg.com/@testim/chrome-version/-/chrome-version-1.1.2.tgz#092005c5b77bd3bb6576a4677110a11485e11864\"\n-  integrity sha512-1c4ZOETSRpI0iBfIFUqU4KqwBAB2lHUAlBjZz/YqOHqwM9dTTzjV6Km0ZkiEiSCx/tLr1BtESIKyWWMww+RUqw==\n+\"@testim/chrome-version@^1.1.3\":\n+  version \"1.1.3\"\n+  resolved \"https://registry.yarnpkg.com/@testim/chrome-version/-/chrome-version-1.1.3.tgz#fbb68696899d7b8c1b9b891eded9c04fe2cd5529\"\n+  integrity sha512-g697J3WxV/Zytemz8aTuKjTGYtta9+02kva3C1xc7KXB8GdbfE1akGJIsZLyY/FSh2QrnE+fiB7vmWU3XNcb6A==\n \n \"@tracerbench/trace-event@^7.0.0\":\n   version \"7.0.0\"\n@@ -1211,16 +1211,17 @@ chrome-launcher@^0.15.0:\n     is-wsl \"^2.2.0\"\n     lighthouse-logger \"^1.0.0\"\n \n-chromedriver@^105.0.0:\n-  version \"105.0.0\"\n-  resolved \"https://registry.yarnpkg.com/chromedriver/-/chromedriver-105.0.0.tgz#81a68e2bc0618a640defd7317ddf6ae9127fc5e4\"\n-  integrity sha512-BX3GOUW5m6eiW9cVVF8hw+EFxvrGqYCxbwOqnpk8PjbNFqL5xjy7yel+e6ilJPjckAYFutMKs8XJvOs/W85vvg==\n+chromedriver@^106.0.1:\n+  version \"106.0.1\"\n+  resolved \"https://registry.yarnpkg.com/chromedriver/-/chromedriver-106.0.1.tgz#f3850cc0a6904336b552d1b13a8ae1705d127bbe\"\n+  integrity sha512-thaBvbDEPgGocSp4/SBIajQz3G7UQfUqCOHZBp9TVhRJv7c91eZrUGcjeJUaNF4p9CfSjCYNYzs4EVVryqmddA==\n   dependencies:\n-    \"@testim/chrome-version\" \"^1.1.2\"\n+    \"@testim/chrome-version\" \"^1.1.3\"\n     axios \"^0.27.2\"\n-    del \"^6.0.0\"\n+    compare-versions \"^5.0.1\"\n+    del \"^6.1.1\"\n     extract-zip \"^2.0.1\"\n-    https-proxy-agent \"^5.0.0\"\n+    https-proxy-agent \"^5.0.1\"\n     proxy-from-env \"^1.1.0\"\n     tcp-port-used \"^1.0.1\"\n \n@@ -1318,6 +1319,11 @@ combined-stream@^1.0.8:\n   dependencies:\n     delayed-stream \"~1.0.0\"\n \n+compare-versions@^5.0.1:\n+  version \"5.0.1\"\n+  resolved \"https://registry.yarnpkg.com/compare-versions/-/compare-versions-5.0.1.tgz#14c6008436d994c3787aba38d4087fabe858555e\"\n+  integrity sha512-v8Au3l0b+Nwkp4G142JcgJFh1/TUhdxut7wzD1Nq1dyp5oa3tXaqb03EXOAB6jS4gMlalkjAUPZBMiAfKUixHQ==\n+\n compress-commons@^4.1.0:\n   version \"4.1.1\"\n   resolved \"https://registry.yarnpkg.com/compress-commons/-/compress-commons-4.1.1.tgz#df2a09a7ed17447642bad10a85cc9a19e5c42a7d\"\n@@ -1531,10 +1537,10 @@ defer-to-connect@^2.0.0:\n   resolved \"https://registry.yarnpkg.com/defer-to-connect/-/defer-to-connect-2.0.1.tgz#8016bdb4143e4632b77a3449c6236277de520587\"\n   integrity sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==\n \n-del@^6.0.0:\n-  version \"6.0.0\"\n-  resolved \"https://registry.yarnpkg.com/del/-/del-6.0.0.tgz#0b40d0332cea743f1614f818be4feb717714c952\"\n-  integrity sha512-1shh9DQ23L16oXSZKB2JxpL7iMy2E0S9d517ptA1P8iw0alkPtQcrKH7ru31rYtKwF499HkTu+DRzq3TCKDFRQ==\n+del@^6.1.1:\n+  version \"6.1.1\"\n+  resolved \"https://registry.yarnpkg.com/del/-/del-6.1.1.tgz#3b70314f1ec0aa325c6b14eb36b95786671edb7a\"\n+  integrity sha512-ua8BhapfP0JUJKC/zV9yHHDW/rDoDxP4Zhn3AkA6/xT6gY7jYXJiaeyBZznYVujhZZET+UgcbZiQ7sN3WqcImg==\n   dependencies:\n     globby \"^11.0.1\"\n     graceful-fs \"^4.2.4\"\n@@ -2129,14 +2135,22 @@ http2-wrapper@^1.0.0-beta.5.2:\n     quick-lru \"^5.1.1\"\n     resolve-alpn \"^1.0.0\"\n \n-https-proxy-agent@5.0.0, https-proxy-agent@^5.0.0:\n+https-proxy-agent@5.0.0:\n   version \"5.0.0\"\n   resolved \"https://registry.yarnpkg.com/https-proxy-agent/-/https-proxy-agent-5.0.0.tgz#e2a90542abb68a762e0a0850f6c9edadfd8506b2\"\n   integrity sha512-EkYm5BcKUGiduxzSt3Eppko+PiNWNEpa4ySk9vTC6wDsQJW9rHSa+UhGNJoRYp7bz6Ht1eaRIa6QaJqO5rCFbA==\n   dependencies:\n     agent-base \"6\"\n     debug \"4\"\n \n+https-proxy-agent@^5.0.1:\n+  version \"5.0.1\"\n+  resolved \"https://registry.yarnpkg.com/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz#c59ef224a04fe8b754f3db0063a25ea30d0005d6\"\n+  integrity sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==\n+  dependencies:\n+    agent-base \"6\"\n+    debug \"4\"\n+\n iconv-lite@^0.4.24:\n   version \"0.4.24\"\n   resolved \"https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.4.24.tgz#2022b4b25fbddc21d2f524974a474aafe733908b\""
    },
    {
      "sha": "c23466e8e6e916bdb60fb778129602c4d40d8002",
      "filename": "tests/e2e/specs/invites-weird-email-addrs.2browsers.test.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e%2Fspecs%2Finvites-weird-email-addrs.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/tests%2Fe2e%2Fspecs%2Finvites-weird-email-addrs.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Finvites-weird-email-addrs.2browsers.test.ts?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -21,7 +21,6 @@ let staffsBrowser: TyE2eTestBrowser;\n let othersBrowser: TyE2eTestBrowser;\n let owen: Member;\n let owensBrowser: TyE2eTestBrowser;\n-let janesBrowser: TyE2eTestBrowser;\n \n let siteId;\n let siteIdAddress: IdAddress;\n@@ -46,14 +45,25 @@ const fidosSiblingsUsername = 'e2e_test_fido_wiffw[\\\\d]';\n const fidosSiblingsPassword = 'publ-fi020';\n \n /*  oops, this addr got rejected by Apace Commons Email (but accepted by Apache's validator)\n-    Incl below as  invalidEmailAddress4  instead, hmm.\n+  Incl below as  invalidEmailAddress4  instead, hmm.\n+  ... But now year 2022 it's suddenly allowed (a library upgrade?). [.unicode_started_working]\n+  However, Nodejs errors out when trying to access:\n+    http://localhost/-/last-e2e-test-email?sentTo=e2e-test--så_漢字_❤_é@example.com&siteId=...\n+  so let's wait with testing this addr.\n+\n const unicondasEmailAddress = 'e2e-test--så_漢字_❤_é@example.com';\n const unicondasUsername = 'e2e_test_sa_zz_z_e'; */\n \n const invalidEmailAddress = 'e2e-test--double..dot@example.com';\n const invalidEmailAddress2 = 'e2e-test--end-dot.@example.com';\n const invalidEmailAddress3 = 'e2e-test--co,mma@example.com';\n+/*\n+This suddenly works:  [.unicode_started_working]\n const invalidEmailAddress4 = 'e2e-test--så_漢字_❤_é@example.com';\n+// ... But Unicode still not allowed in the @domain.name:\n+// No, this addr works too! Does Apache Commons Email convert it to punycode?\n+const invalidEmailAddress4 = 'e2e-test--unicode-inet-addr@så-漢字-❤-é.com';\n+*/\n \n describe(\"invites-werd-email-addrs  TyT7KBAJ2AD4\", () => {\n \n@@ -74,7 +84,6 @@ describe(\"invites-werd-email-addrs  TyT7KBAJ2AD4\", () => {\n     othersBrowser = new TyE2eTestBrowser(browserB);\n     owen = forum.members.owen;\n     owensBrowser = staffsBrowser;\n-    janesBrowser = othersBrowser;\n   });\n \n   it(\"Owen goes to the Invites tab\", () => {\n@@ -114,10 +123,12 @@ describe(\"invites-werd-email-addrs  TyT7KBAJ2AD4\", () => {\n     owensBrowser.serverErrorDialog.waitForBadEmailAddressError();\n     owensBrowser.serverErrorDialog.close();\n \n+    /*  Not invalid any more.\n     owensBrowser.inviteDialog.typeInvite(invalidEmailAddress4);\n     owensBrowser.inviteDialog.clickSubmit();\n     owensBrowser.serverErrorDialog.waitForBadEmailAddressError();\n     owensBrowser.serverErrorDialog.close();\n+    */\n   });\n \n   let inviteLinkJane;\n@@ -185,6 +196,7 @@ describe(\"invites-werd-email-addrs  TyT7KBAJ2AD4\", () => {\n       owensBrowser.debug();\n       othersBrowser.go(inviteLinkUniconda);\n       othersBrowser.topbar.waitForMyMenuVisible();\n+      // What will this be, what username got generated:\n       othersBrowser.topbar.assertMyUsernameMatches(unicondasUsername);\n     });*/\n   //});"
    },
    {
      "sha": "80a21d2c2f2f5fe615735e7ed7b6c14d4a37b456",
      "filename": "vendors/jars",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/vendors%2Fjars?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -1 +1 @@\n-Subproject commit 2cdda656880dc774f06226f79eca123092c146c7\n+Subproject commit 80a21d2c2f2f5fe615735e7ed7b6c14d4a37b456"
    },
    {
      "sha": "b717afb38a8e4f5c7afe91bcc6fb6dd578863e6f",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/05084b4d68c27fcbd042ab8661256b2659a1726e/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/05084b4d68c27fcbd042ab8661256b2659a1726e/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=05084b4d68c27fcbd042ab8661256b2659a1726e",
      "patch": "@@ -1 +1 @@\n-v0.2022.14\n+v0.2022.15"
    }
  ]
}
