{
  "sha": "d7e9be99f9dd9cd73f02b1609357e111a5a59084",
  "node_id": "C_kwDOBtgov9oAKGQ3ZTliZTk5ZjlkZDljZDczZjAyYjE2MDkzNTdlMTExYTVhNTkwODQ",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2022-12-26T16:13:38Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2023-01-03T07:41:26Z"
    },
    "message": "make Close() calls idempotent\n\nPreviously, few of them resulted in panics when called more than once.",
    "tree": {
      "sha": "f5593a00d353d7702b77b5c847e5b1371bf0628d",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/f5593a00d353d7702b77b5c847e5b1371bf0628d"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/d7e9be99f9dd9cd73f02b1609357e111a5a59084",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/d7e9be99f9dd9cd73f02b1609357e111a5a59084",
  "html_url": "https://github.com/umputun/remark42/commit/d7e9be99f9dd9cd73f02b1609357e111a5a59084",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/d7e9be99f9dd9cd73f02b1609357e111a5a59084/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "067a8bcb21a5efe6ffcbfa4f1eafa865e6ca327e",
      "url": "https://api.github.com/repos/umputun/remark42/commits/067a8bcb21a5efe6ffcbfa4f1eafa865e6ca327e",
      "html_url": "https://github.com/umputun/remark42/commit/067a8bcb21a5efe6ffcbfa4f1eafa865e6ca327e"
    }
  ],
  "stats": {
    "total": 391,
    "additions": 296,
    "deletions": 95
  },
  "files": [
    {
      "sha": "db052979bd5f4e92c9d42f3d6d847de2d432083d",
      "filename": "backend/_example/memory_store/accessor/data_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2F_example%2Fmemory_store%2Faccessor%2Fdata_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2F_example%2Fmemory_store%2Faccessor%2Fdata_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Faccessor%2Fdata_test.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -624,6 +624,7 @@ func TestMemData_DeleteComment(t *testing.T) {\n func TestMemData_Close(t *testing.T) {\n \tb := prepMem(t)\n \tassert.NoError(t, b.Close())\n+\tassert.NoError(t, b.Close(), \"second call should not result in panic or errors\")\n }\n \n func TestMemData_DeleteHard(t *testing.T) {"
    },
    {
      "sha": "40d5c619cade94059be25e843d0239731f76d919",
      "filename": "backend/_example/memory_store/go.mod",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2F_example%2Fmemory_store%2Fgo.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2F_example%2Fmemory_store%2Fgo.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Fgo.mod?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -6,7 +6,7 @@ require (\n \tgithub.com/go-pkgz/jrpc v0.3.0\n \tgithub.com/go-pkgz/lgr v0.10.4\n \tgithub.com/jessevdk/go-flags v1.5.0\n-\tgithub.com/stretchr/testify v1.8.0\n+\tgithub.com/stretchr/testify v1.8.1\n \tgithub.com/umputun/remark42/backend v1.10.1\n )\n "
    },
    {
      "sha": "48445533775a62ff057ebe3e5f4acf31e250bc08",
      "filename": "backend/_example/memory_store/go.sum",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2F_example%2Fmemory_store%2Fgo.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2F_example%2Fmemory_store%2Fgo.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Fgo.sum?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -60,11 +60,13 @@ github.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf\n github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\n github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\n github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\n+github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\n github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n-github.com/stretchr/testify v1.8.0 h1:pSgiaMZlXftHpm5L7V1+rVB+AZJydKsMxsQBIJw4PKk=\n github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\n+github.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=\n+github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\n go.etcd.io/bbolt v1.3.6 h1:/ecaJf0sk1l4l6V4awd65v2C3ILy7MSj+s/x1ADCIMU=\n go.etcd.io/bbolt v1.3.6/go.mod h1:qXsaaIqmgQH0T+OPdb99Bf+PKfBBQVAdyD6TY9G8XM4=\n golang.org/x/image v0.0.0-20220617043117-41969df76e82 h1:KpZB5pUSBvrHltNEdK/tw0xlPeD13M6M6aGP32gKqiw="
    },
    {
      "sha": "b1d2fd3d17a9d98066176dc1f1cb1452db2c4bc9",
      "filename": "backend/_example/memory_store/server/data_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2F_example%2Fmemory_store%2Fserver%2Fdata_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2F_example%2Fmemory_store%2Fserver%2Fdata_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Fserver%2Fdata_test.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -338,6 +338,6 @@ func TestRPC_closeHndl(t *testing.T) {\n \tapi := fmt.Sprintf(\"http://localhost:%d/test\", port)\n \n \tre := engine.RPC{Client: jrpc.Client{API: api, Client: http.Client{Timeout: 1 * time.Second}}}\n-\terr := re.Close()\n-\tassert.NoError(t, err)\n+\tassert.NoError(t, re.Close())\n+\tassert.NoError(t, re.Close(), \"second call should not result in panic or errors\")\n }"
    },
    {
      "sha": "d8bdddbef436170066bd869061d93dc19a901820",
      "filename": "backend/app/notify/notify.go",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fnotify%2Fnotify.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fnotify%2Fnotify.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fnotify%2Fnotify.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -143,6 +143,12 @@ func (s *Service) SubmitVerification(req VerificationRequest) {\n // Close queue channel and wait for completion\n func (s *Service) Close() {\n \tif s.queue != nil {\n+\t\t// don't panic in case service is already closed\n+\t\tselect {\n+\t\tcase <-s.ctx.Done():\n+\t\t\treturn\n+\t\tdefault:\n+\t\t}\n \t\tlog.Print(\"[DEBUG] close notifier\")\n \t\tclose(s.queue)\n \t\tclose(s.verificationQueue)"
    },
    {
      "sha": "07b88c307c8c10214b12c9c7fb50bdc75a228a4e",
      "filename": "backend/app/notify/notify_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fnotify%2Fnotify_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fnotify%2Fnotify_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fnotify%2Fnotify_test.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -21,6 +21,8 @@ func TestService_NoDestinations(t *testing.T) {\n \ts.Submit(Request{Comment: store.Comment{ID: \"123\"}})\n \ts.Submit(Request{Comment: store.Comment{ID: \"123\"}})\n \ts.Close()\n+\t// second call should not result in panic\n+\ts.Close()\n }\n \n func TestService_WithDestinations(t *testing.T) {"
    },
    {
      "sha": "b51f4ebe1d0d3f6857c9a9780274a1536780a8bd",
      "filename": "backend/app/store/engine/bolt_test.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fstore%2Fengine%2Fbolt_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fstore%2Fengine%2Fbolt_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fengine%2Fbolt_test.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -911,6 +911,13 @@ func TestBoltDB_NewFailed(t *testing.T) {\n \tassert.EqualError(t, err, \"failed to make boltdb for /tmp/no-such-place/tmp.db: open /tmp/no-such-place/tmp.db: no such file or directory\")\n }\n \n+func TestBoltDB_DoubleClose(t *testing.T) {\n+\tvar b, teardown = prep(t)\n+\tdefer teardown()\n+\tassert.NoError(t, b.Close())\n+\tassert.NoError(t, b.Close(), \"second call should not result in panic or errors\")\n+}\n+\n // makes new boltdb, put two records\n func prep(t *testing.T) (b *BoltDB, teardown func()) {\n \t_ = os.Remove(testDB)"
    },
    {
      "sha": "25cd253da24bd404e8e373d0619ee75e6034b08a",
      "filename": "backend/app/store/engine/remote_test.go",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fstore%2Fengine%2Fremote_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fstore%2Fengine%2Fremote_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fengine%2Fremote_test.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -186,11 +186,17 @@ func TestRemote_Delete(t *testing.T) {\n }\n \n func TestRemote_Close(t *testing.T) {\n-\tts := testServer(t, `{\"method\":\"store.close\",\"id\":1}`, `{}`)\n+\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\tbody, err := io.ReadAll(r.Body)\n+\t\trequire.NoError(t, err)\n+\t\tassert.Contains(t, string(body), \"{\\\"method\\\":\\\"store.close\\\",\\\"id\\\":\")\n+\t\tt.Logf(\"req: %s\", string(body))\n+\t\t_, _ = fmt.Fprint(w, \"{}\")\n+\t}))\n \tdefer ts.Close()\n \tc := RPC{Client: jrpc.Client{API: ts.URL, Client: http.Client{}}}\n-\terr := c.Close()\n-\tassert.NoError(t, err)\n+\tassert.NoError(t, c.Close())\n+\tassert.NoError(t, c.Close(), \"second call should not result in panic or errors\")\n }\n \n func testServer(t *testing.T, req, resp string) *httptest.Server {"
    },
    {
      "sha": "5e234009b97ed09d5cdd893170bbb2d2fbfabf53",
      "filename": "backend/app/store/image/image_test.go",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fstore%2Fimage%2Fimage_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fstore%2Fimage%2Fimage_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fimage_test.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -286,3 +286,11 @@ func TestCachedImgID(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.Equal(t, \"cached_images/\"+Sha1Str(\"example.org\")+\"-\"+Sha1Str(imgURL), img)\n }\n+\n+func TestService_DoubleClose(t *testing.T) {\n+\tstore := StoreMock{}\n+\tsvc := NewService(&store, ServiceParams{EditDuration: 20 * time.Millisecond})\n+\tsvc.Close(context.TODO())\n+\t// second call should not result in panic\n+\tsvc.Close(context.TODO())\n+}"
    },
    {
      "sha": "e4ff08f7b6b7e889bc0d99592878720f439aeafc",
      "filename": "backend/app/store/service/service_test.go",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -1638,6 +1638,30 @@ func Benchmark_ServiceCreate(b *testing.B) {\n \t}\n }\n \n+func TestService_DoubleClose_Bolt(t *testing.T) {\n+\tdbFile := fmt.Sprintf(\"%s/test-remark42-%d.db\", os.TempDir(), rand.Intn(9999999999))\n+\tdefer func() { _ = os.Remove(dbFile) }()\n+\n+\tboltStore, err := engine.NewBoltDB(bolt.Options{}, engine.BoltSite{FileName: dbFile, SiteID: \"radio-t\"})\n+\tsvc := DataStore{Engine: boltStore, EditDuration: 50 * time.Millisecond, AdminStore: admin.NewStaticKeyStore(\"secret 123\")}\n+\trequire.NoError(t, err)\n+\tassert.NoError(t, boltStore.Close())\n+\tassert.NoError(t, boltStore.Close(), \"second call should not result in panic or errors\")\n+\tassert.NoError(t, svc.Close())\n+\tassert.NoError(t, svc.Close(), \"second call should not result in panic or errors\")\n+}\n+\n+func TestService_DoubleClose_Static(t *testing.T) {\n+\tks := admin.NewStaticKeyStore(\"secret 123\")\n+\teng, teardown := prepStoreEngine(t)\n+\tdefer teardown()\n+\tb := DataStore{Engine: eng, AdminStore: ks,\n+\t\tTitleExtractor: NewTitleExtractor(http.Client{Timeout: 5 * time.Second})}\n+\tb.Close()\n+\t// second call should not result in panic or errors\n+\tb.Close()\n+}\n+\n // makes new boltdb, put two records\n func prepStoreEngine(t *testing.T) (e engine.Interface, teardown func()) {\n \ttestDBLoc, err := os.MkdirTemp(\"\", \"test_image_r42\")"
    },
    {
      "sha": "2dd5af762d7e78d74872b17c5c558befa70d6644",
      "filename": "backend/app/store/service/title_test.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fstore%2Fservice%2Ftitle_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fapp%2Fstore%2Fservice%2Ftitle_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Ftitle_test.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -123,3 +123,10 @@ func TestTitle_GetFailed(t *testing.T) {\n \t}\n \tassert.Equal(t, int32(1), atomic.LoadInt32(&hits), \"hit once, errors cached\")\n }\n+\n+func TestTitle_DoubleClosed(t *testing.T) {\n+\tex := NewTitleExtractor(http.Client{Timeout: 5 * time.Second})\n+\tex.Close()\n+\t// second call should not result in panic\n+\tex.Close()\n+}"
    },
    {
      "sha": "831a11dedc185df7b7607b1319047f4dd9a8a4a5",
      "filename": "backend/go.mod",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fgo.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fgo.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fgo.mod?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -11,9 +11,9 @@ require (\n \tgithub.com/go-chi/chi/v5 v5.0.7\n \tgithub.com/go-chi/cors v1.2.1\n \tgithub.com/go-chi/render v1.0.2\n-\tgithub.com/go-pkgz/auth v1.20.0\n+\tgithub.com/go-pkgz/auth v1.20.1-0.20221226231300-65f433fba0f1\n \tgithub.com/go-pkgz/jrpc v0.3.0\n-\tgithub.com/go-pkgz/lcw v1.0.1\n+\tgithub.com/go-pkgz/lcw v1.0.3-0.20221226231215-a66ea7c4aff7\n \tgithub.com/go-pkgz/lgr v0.10.4\n \tgithub.com/go-pkgz/notify v0.2.0\n \tgithub.com/go-pkgz/repeater v1.1.3\n@@ -29,7 +29,7 @@ require (\n \tgithub.com/rs/xid v1.4.0\n \tgithub.com/russross/blackfriday/v2 v2.1.0\n \tgithub.com/skip2/go-qrcode v0.0.0-20200617195104-da1b6568686e\n-\tgithub.com/stretchr/testify v1.8.0\n+\tgithub.com/stretchr/testify v1.8.1\n \tgo.etcd.io/bbolt v1.3.6\n \tgo.uber.org/goleak v1.2.0\n \tgolang.org/x/crypto v0.0.0-20220622213112-05595931fe9d\n@@ -48,15 +48,15 @@ require (\n \tgithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect\n \tgithub.com/dlclark/regexp2 v1.4.0 // indirect\n \tgithub.com/go-oauth2/oauth2/v4 v4.5.1 // indirect\n-\tgithub.com/go-pkgz/email v0.4.0 // indirect\n+\tgithub.com/go-pkgz/email v0.4.1 // indirect\n \tgithub.com/go-pkgz/expirable-cache v0.1.0 // indirect\n \tgithub.com/go-redis/redis/v8 v8.11.5 // indirect\n \tgithub.com/golang/protobuf v1.5.2 // indirect\n \tgithub.com/golang/snappy v0.0.4 // indirect\n \tgithub.com/gorilla/css v1.0.0 // indirect\n \tgithub.com/gorilla/websocket v1.5.0 // indirect\n \tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n-\tgithub.com/hashicorp/golang-lru v0.5.4 // indirect\n+\tgithub.com/hashicorp/golang-lru v0.6.0 // indirect\n \tgithub.com/klauspost/compress v1.15.2 // indirect\n \tgithub.com/montanaflynn/stats v0.0.0-20171201202039-1bf9dbcd8cbe // indirect\n \tgithub.com/nullrocks/identicon v0.0.0-20180626043057-7875f45b0022 // indirect"
    },
    {
      "sha": "4a1d6a86169514c8e62b20a4d4844fbb890c4abf",
      "filename": "backend/go.sum",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fgo.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fgo.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fgo.sum?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -69,8 +69,8 @@ github.com/alecthomas/repr v0.1.0 h1:ENn2e1+J3k09gyj2shc0dHr/yjaWSHRlrJ4DPMevDqE\n github.com/alecthomas/repr v0.1.0/go.mod h1:2kn6fqh/zIyPLmm3ugklbEi5hg5wS435eygvNfaDQL8=\n github.com/alicebob/gopher-json v0.0.0-20200520072559-a9ecdc9d1d3a h1:HbKu58rmZpUGpz5+4FfNmIU+FmZg2P3Xaj2v2bfNWmk=\n github.com/alicebob/gopher-json v0.0.0-20200520072559-a9ecdc9d1d3a/go.mod h1:SGnFV6hVsYE877CKEZ6tDNTjaSXYUk6QqoIK6PrAtcc=\n-github.com/alicebob/miniredis/v2 v2.22.0 h1:lIHHiSkEyS1MkKHCHzN+0mWrA4YdbGdimE5iZ2sHSzo=\n-github.com/alicebob/miniredis/v2 v2.22.0/go.mod h1:XNqvJdQJv5mSuVMc0ynneafpnL/zv52acZ6kqeS0t88=\n+github.com/alicebob/miniredis/v2 v2.23.1 h1:jR6wZggBxwWygeXcdNyguCOCIjPsZyNUNlAkTx2fu0U=\n+github.com/alicebob/miniredis/v2 v2.23.1/go.mod h1:84TWKZlxYkfgMucPBf5SOQBYJceZeQRFIaQgNMiCX6Q=\n github.com/andybalholm/brotli v1.0.4 h1:V7DdXeJtZscaqfNuAdSRuRFzuiKlHSC/Zh3zl9qY3JY=\n github.com/andybalholm/brotli v1.0.4/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=\n github.com/andybalholm/cascadia v1.3.1 h1:nhxRkql1kdYCc8Snf7D5/D3spOX+dBgjA6u8x004T2c=\n@@ -140,17 +140,17 @@ github.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2\n github.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\n github.com/go-oauth2/oauth2/v4 v4.5.1 h1:3vxp+cjLqDe1TbogbwtMyeHRHr1tD+ksrK7xNppYRDs=\n github.com/go-oauth2/oauth2/v4 v4.5.1/go.mod h1:wk/2uLImWIa9VVQDgxz99H2GDbhmfi/9/Xr+GvkSUSQ=\n-github.com/go-pkgz/auth v1.20.0 h1:9SHkolgv9+zOI9U+8IFXra0pl/H90oE4+ciJWtXoDl4=\n-github.com/go-pkgz/auth v1.20.0/go.mod h1:jz0djN+4XoCyieuOzc+rB9l0RdqeuiXoQfE02yonLAI=\n+github.com/go-pkgz/auth v1.20.1-0.20221226231300-65f433fba0f1 h1:MJA4rZAwjd+KpaR2PqrxeDPloNu9Wml1UVQjL2fOtVM=\n+github.com/go-pkgz/auth v1.20.1-0.20221226231300-65f433fba0f1/go.mod h1:fG1CP4+LDPnebYeO1BAZg/euTQQ8cnGn+5ZrXvJfckA=\n github.com/go-pkgz/email v0.3.1-0.20221002173339-19d25a20d99c/go.mod h1:TpnmSLkQW3FyICit2hn7WIhCUDrhCX6btzz5wS3wHRI=\n-github.com/go-pkgz/email v0.4.0 h1:NiYCwKPR6sW8nJsOR3GyB9Yw1AQZdnY78Xnhd9SLHEs=\n-github.com/go-pkgz/email v0.4.0/go.mod h1:TpnmSLkQW3FyICit2hn7WIhCUDrhCX6btzz5wS3wHRI=\n+github.com/go-pkgz/email v0.4.1 h1:2vtP2gibsSzqhz6eD5DklSp11m657XEVf17fuXaxMvk=\n+github.com/go-pkgz/email v0.4.1/go.mod h1:BdxglsQnymzhfdbnncEE72a6DrucZHy6I+42LK2jLEc=\n github.com/go-pkgz/expirable-cache v0.1.0 h1:3bw0m8vlTK8qlwz5KXuygNBTkiKRTPrAGXU0Ej2AC1g=\n github.com/go-pkgz/expirable-cache v0.1.0/go.mod h1:GTrEl0X+q0mPNqN6dtcQXksACnzCBQ5k/k1SwXJsZKs=\n github.com/go-pkgz/jrpc v0.3.0 h1:Fls38KqPsHzvp0FWfivr6cGnncC+iFBodHBqvUPY+0U=\n github.com/go-pkgz/jrpc v0.3.0/go.mod h1:MFtKs75JESiSqVicsQkgN2iDFFuCd3gVT1/vKiwRi00=\n-github.com/go-pkgz/lcw v1.0.1 h1:svYC6LIyzRaHF3TwJ8GCS+2RkJreBfaFjoeS+UYwJBc=\n-github.com/go-pkgz/lcw v1.0.1/go.mod h1:CPJJzunpmGToOtD0Ga82TV152eL69sYEIIPcy9fbxlU=\n+github.com/go-pkgz/lcw v1.0.3-0.20221226231215-a66ea7c4aff7 h1:PJ1JEt2G0Dn7OUkLEgbNIrABRcbkCPM8v58BIBOSkm8=\n+github.com/go-pkgz/lcw v1.0.3-0.20221226231215-a66ea7c4aff7/go.mod h1:adhOCEhc8G6+Bd992MMp0h796aBxZ/b4feUGU5twkRU=\n github.com/go-pkgz/lgr v0.10.4 h1:l7qyFjqEZgwRgaQQSEp6tve4A3OU80VrfzpvtEX8ngw=\n github.com/go-pkgz/lgr v0.10.4/go.mod h1:CD0s1z6EFpIUplV067gitF77tn25JItzwHNKAPqeCF0=\n github.com/go-pkgz/notify v0.2.0 h1:mxHjcLc3goT+k1qnBPJ06PpNuVUDcu21Xy+6hEo4IaU=\n@@ -270,8 +270,8 @@ github.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+l\n github.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\n github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\n github.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\n-github.com/hashicorp/golang-lru v0.5.4 h1:YDjusn29QI/Das2iO9M0BHnIbxPeyuCHsjMW+lJfyTc=\n-github.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\n+github.com/hashicorp/golang-lru v0.6.0 h1:uL2shRDx7RTrOrTCUZEGP/wJUFiUI8QT6E7z5o8jga4=\n+github.com/hashicorp/golang-lru v0.6.0/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\n github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\n github.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\n github.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\n@@ -343,15 +343,17 @@ github.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9\n github.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\n github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\n github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\n+github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\n github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\n github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\n github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\n github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\n github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n-github.com/stretchr/testify v1.8.0 h1:pSgiaMZlXftHpm5L7V1+rVB+AZJydKsMxsQBIJw4PKk=\n github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\n+github.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=\n+github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\n github.com/tidwall/btree v0.0.0-20191029221954-400434d76274 h1:G6Z6HvJuPjG6XfNGi/feOATzeJrfgTNJY+rGrHbA04E=\n github.com/tidwall/btree v0.0.0-20191029221954-400434d76274/go.mod h1:huei1BkDWJ3/sLXmO+bsCNELL+Bp2Kks9OLyQFkzvA8=\n github.com/tidwall/buntdb v1.1.2 h1:noCrqQXL9EKMtcdwJcmuVKSEjqu1ua99RHHgbLTEHRo=\n@@ -403,8 +405,8 @@ github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9de\n github.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\n github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\n github.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\n-github.com/yuin/gopher-lua v0.0.0-20210529063254-f4c35e4016d9 h1:k/gmLsJDWwWqbLCur2yWnJzwQEKRcAHXo6seXGuSwWw=\n-github.com/yuin/gopher-lua v0.0.0-20210529063254-f4c35e4016d9/go.mod h1:E1AXubJBdNmFERAOucpDIxNzeGfLzg0mYh+UfMWdChA=\n+github.com/yuin/gopher-lua v0.0.0-20220504180219-658193537a64 h1:5mLPGnFdSsevFRFc9q3yYbBkB6tsm4aCwwQV/j1JQAQ=\n+github.com/yuin/gopher-lua v0.0.0-20220504180219-658193537a64/go.mod h1:GBR0iDaNXjAgGg9zfCvksxSRnQx76gclCIb7kdAd1Pw=\n go.etcd.io/bbolt v1.3.6 h1:/ecaJf0sk1l4l6V4awd65v2C3ILy7MSj+s/x1ADCIMU=\n go.etcd.io/bbolt v1.3.6/go.mod h1:qXsaaIqmgQH0T+OPdb99Bf+PKfBBQVAdyD6TY9G8XM4=\n go.mongodb.org/mongo-driver v1.10.2 h1:4Wk3cnqOrQCn0P92L3/mmurMxzdvWWs5J9jinAVKD+k="
    },
    {
      "sha": "67c4ebac53861dbb7aef4b6a7f26e192c1b0f518",
      "filename": "backend/vendor/github.com/go-pkgz/auth/.golangci.yml",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2F.golangci.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2F.golangci.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2F.golangci.yml?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -29,17 +29,13 @@ linters:\n     - revive\n     - govet\n     - unconvert\n-    - megacheck\n-    - structcheck\n+    - unused\n     - gas\n     - gocyclo\n     - misspell\n     - unparam\n-    - varcheck\n-    - deadcode\n     - typecheck\n     - ineffassign\n-    - varcheck\n     - stylecheck\n     - gochecknoinits\n     - exportloopref\n@@ -67,5 +63,9 @@ issues:\n     - text: \"Use of weak cryptographic primitive\"\n       linters:\n         - gosec\n+    - path: _test\\.go\n+      text: \"Potential Slowloris Attack because ReadHeaderTimeout is not configured in the http.Server\"\n+      linters:\n+        - gosec\n \n   exclude-use-default: false"
    },
    {
      "sha": "575be4c1c8bb879165301fe6415a73d300a2379d",
      "filename": "backend/vendor/github.com/go-pkgz/auth/README.md",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2FREADME.md?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -153,10 +153,6 @@ Such provider acts like any other, i.e. will be registered as `/auth/local/login\n \n The API for this provider supports both GET and POST requests:\n \n-* GET request with user credentials provided as query params:\n-  ```\n-  GET /auth/<name>/login?user=<user>&passwd=<password>&aud=<site_id>&session=[1|0]\n-  ```\n * POST request could be encoded as application/x-www-form-urlencoded or application/json:\n   ```\n   POST /auth/<name>/login?session=[1|0]\n@@ -172,6 +168,10 @@ The API for this provider supports both GET and POST requests:\n     \"aud\": \"bar\",\n   }\n   ```\n+* GET request with user credentials provided as query params, but be aware that [the https query string is not secure](https://stackoverflow.com/a/323286/633961):\n+  ```\n+  GET /auth/<name>/login?user=<user>&passwd=<password>&aud=<site_id>&session=[1|0]\n+  ```\n \n _note: password parameter doesn't have to be naked/real password and can be any kind of password hash prepared by caller._\n "
    },
    {
      "sha": "a6f4b0ab695ba53555c56a86941ec5dc2ae7ca9c",
      "filename": "backend/vendor/github.com/go-pkgz/auth/avatar/gridfs.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Favatar%2Fgridfs.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Favatar%2Fgridfs.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Favatar%2Fgridfs.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -59,7 +59,6 @@ func (gf *GridFS) Get(avatar string) (reader io.ReadCloser, size int, err error)\n \treturn io.NopCloser(buf), int(sz), nil\n }\n \n-//\n // ID returns a fingerprint of the avatar content. Uses MD5 because gridfs provides it directly\n func (gf *GridFS) ID(avatar string) (id string) {\n \n@@ -143,7 +142,7 @@ func (gf *GridFS) List() (ids []string, err error) {\n \treturn ids, nil\n }\n \n-// Close gridfs does nothing but satisfies interface\n+// Close gridfs store\n func (gf *GridFS) Close() error {\n \tctx, cancel := context.WithTimeout(context.Background(), gf.timeout)\n \tdefer cancel()"
    },
    {
      "sha": "f387d2f7d479dfa31017ec285e8e7cdaa1939424",
      "filename": "backend/vendor/github.com/go-pkgz/auth/avatar/localfs.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Favatar%2Flocalfs.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Favatar%2Flocalfs.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Favatar%2Flocalfs.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -104,7 +104,7 @@ func (fs *LocalFS) List() (ids []string, err error) {\n \treturn ids, nil\n }\n \n-// Close gridfs does nothing but satisfies interface\n+// Close LocalFS does nothing but satisfies interface\n func (fs *LocalFS) Close() error {\n \treturn nil\n }"
    },
    {
      "sha": "d3a48d995b4b3716e541fdf4b5141bf79f58f41f",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/custom_server.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fprovider%2Fcustom_server.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fprovider%2Fcustom_server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fprovider%2Fcustom_server.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -88,7 +88,8 @@ func (c *CustomServer) Run(ctx context.Context) {\n \t}\n \n \tc.httpServer = &http.Server{\n-\t\tAddr: fmt.Sprintf(\":%s\", port),\n+\t\tAddr:              fmt.Sprintf(\":%s\", port),\n+\t\tReadHeaderTimeout: 5 * time.Second,\n \t\tHandler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\t\tswitch {\n \t\t\tcase strings.HasSuffix(r.URL.Path, \"/authorize\"):"
    },
    {
      "sha": "b225e20ac2832d52bbf155c80cc271230e33b56f",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/dev_provider.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fprovider%2Fdev_provider.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fprovider%2Fdev_provider.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fprovider%2Fdev_provider.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -57,7 +57,8 @@ func (d *DevAuthServer) Run(ctx context.Context) { // nolint (gocyclo)\n \t}\n \n \td.httpServer = &http.Server{\n-\t\tAddr: fmt.Sprintf(\":%d\", d.Provider.Port),\n+\t\tAddr:              fmt.Sprintf(\":%d\", d.Provider.Port),\n+\t\tReadHeaderTimeout: 5 * time.Second,\n \t\tHandler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\t\td.Logf(\"[DEBUG] dev oauth request %s %s %+v\", r.Method, r.URL, r.Header)\n \t\t\tswitch {"
    },
    {
      "sha": "033eb51d6195b314a9d82e6365b7d7b9f7eab393",
      "filename": "backend/vendor/github.com/go-pkgz/email/email.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Femail%2Femail.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Femail%2Femail.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Femail%2Femail.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -177,7 +177,7 @@ func (em *Sender) client() (c *smtp.Client, err error) {\n \t}\n \n \tif em.tls {\n-\t\tconn, e := tls.Dial(\"tcp\", srvAddress, tlsConf)\n+\t\tconn, e := tls.DialWithDialer(&net.Dialer{Timeout: em.timeOut}, \"tcp\", srvAddress, tlsConf)\n \t\tif e != nil {\n \t\t\treturn nil, fmt.Errorf(\"failed to dial smtp tls to %s: %w\", srvAddress, e)\n \t\t}"
    },
    {
      "sha": "b84ca8d721c214fc0487c508e8eb588058ceaa85",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/.golangci.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2F.golangci.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2F.golangci.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2F.golangci.yml?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -26,18 +26,14 @@ linters:\n     - revive\n     - govet\n     - unconvert\n-    - megacheck\n-    - structcheck\n     - gas\n     - gocyclo\n     - dupl\n     - misspell\n     - unparam\n-    - varcheck\n-    - deadcode\n+    - unused\n     - typecheck\n     - ineffassign\n-    - varcheck\n     - stylecheck\n     - gochecknoinits\n     - exportloopref"
    },
    {
      "sha": "6a553a106a762cc42329693435a74ffe951e155e",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/README.md",
      "status": "modified",
      "additions": 21,
      "deletions": 14,
      "changes": 35,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2FREADME.md?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -30,22 +30,30 @@ Main features:\n ## Usage\n \n ```go\n-cache, err := lcw.NewLruCache(lcw.MaxKeys(500), lcw.MaxCacheSize(65536), lcw.MaxValSize(200), lcw.MaxKeySize(32))\n-if err != nil {\n-    panic(\"failed to create cache\")\n-}\n-defer cache.Close()\n+package main\n \n-val, err := cache.Get(\"key123\", func() (lcw.Value, error) {\n-    res, err := getDataFromSomeSource(params) // returns string\n-    return res, err\n-})\n+import (\n+\t\"github.com/go-pkgz/lcw\"\n+)\n \n-if err != nil {\n-    panic(\"failed to get data\")\n-}\n+func main() {\n+\tcache, err := lcw.NewLruCache(lcw.MaxKeys(500), lcw.MaxCacheSize(65536), lcw.MaxValSize(200), lcw.MaxKeySize(32))\n+\tif err != nil {\n+\t\tpanic(\"failed to create cache\")\n+\t}\n+\tdefer cache.Close()\n+\n+\tval, err := cache.Get(\"key123\", func() (interface{}, error) {\n+\t\tres, err := getDataFromSomeSource(params) // returns string\n+\t\treturn res, err\n+\t})\n \n-s := val.(string) // cached value\n+\tif err != nil {\n+\t\tpanic(\"failed to get data\")\n+\t}\n+\n+\ts := val.(string) // cached value\n+}\n ```\n \n ### Cache with URI\n@@ -73,7 +81,6 @@ Cache can be created with URIs:\n   that mutable values can be changed outside of cache. `ExampleLoadingCache_Mutability` illustrates that.\n - All byte-size limits (MaxCacheSize and MaxValSize) only work for values implementing `lcw.Sizer` interface.\n - Negative limits (max options) rejected\n-- `lgr.Value` wraps `interface{}` and should be converted back to the concrete type.\n - The implementation started as a part of [remark42](https://github.com/umputun/remark)\n   and later on moved to [go-pkgz/rest](https://github.com/go-pkgz/rest/tree/master/cache)\n   library and finally generalized to become `lcw`."
    },
    {
      "sha": "3861f0c41acb61acecd714cc5bc5c3bd2f1be418",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/cache.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2Fcache.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2Fcache.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2Fcache.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -6,8 +6,6 @@\n // 3 flavors of cache provided - NoP (do-nothing cache), ExpirableCache (TTL based), and LruCache\n package lcw\n \n-//go:generate sh -c \"mockery -inpkg -name LoadingCache -print > /tmp/cache-mock.tmp && mv /tmp/cache-mock.tmp cache_mock.go\"\n-\n import (\n \t\"fmt\"\n )"
    },
    {
      "sha": "b1d386e3c385aa46ebc28237cf1e3a0f99282df7",
      "filename": "backend/vendor/github.com/go-pkgz/lcw/internal/cache/cache.go",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2Finternal%2Fcache%2Fcache.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2Finternal%2Fcache%2Fcache.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flcw%2Finternal%2Fcache%2Fcache.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -185,6 +185,12 @@ func (c *LoadingCache) ItemCount() int {\n func (c *LoadingCache) Close() {\n \tc.mu.Lock()\n \tdefer c.mu.Unlock()\n+\t// don't panic in case service is already closed\n+\tselect {\n+\tcase <-c.done:\n+\t\treturn\n+\tdefault:\n+\t}\n \tclose(c.done)\n }\n "
    },
    {
      "sha": "49202fc41e645679a0f8d1088237b5b4aa22f49d",
      "filename": "backend/vendor/github.com/hashicorp/golang-lru/.golangci.yml",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2F.golangci.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2F.golangci.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2F.golangci.yml?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -0,0 +1,30 @@\n+linters:\n+  enable:\n+    - megacheck\n+    - revive\n+    - govet\n+    - unconvert\n+    - megacheck\n+    - gas\n+    - gocyclo\n+    - dupl\n+    - misspell\n+    - unparam\n+    - unused\n+    - typecheck\n+    - ineffassign\n+    - stylecheck\n+    - exportloopref\n+    - gocritic\n+    - nakedret\n+    - gosimple\n+    - prealloc\n+  fast: false\n+  disable-all: true\n+\n+issues:\n+  exclude-rules:\n+    - path: _test\\.go\n+      linters:\n+        - dupl\n+  exclude-use-default: false"
    },
    {
      "sha": "15fcad0306e36e91e5aee4fc59fe1b8e3925dff8",
      "filename": "backend/vendor/github.com/hashicorp/golang-lru/2q.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2F2q.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2F2q.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2F2q.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -44,7 +44,7 @@ func New2Q(size int) (*TwoQueueCache, error) {\n \n // New2QParams creates a new TwoQueueCache using the provided\n // parameter values.\n-func New2QParams(size int, recentRatio float64, ghostRatio float64) (*TwoQueueCache, error) {\n+func New2QParams(size int, recentRatio, ghostRatio float64) (*TwoQueueCache, error) {\n \tif size <= 0 {\n \t\treturn nil, fmt.Errorf(\"invalid size\")\n \t}\n@@ -138,7 +138,6 @@ func (c *TwoQueueCache) Add(key, value interface{}) {\n \t// Add to the recently seen list\n \tc.ensureSpace(false)\n \tc.recent.Add(key, value)\n-\treturn\n }\n \n // ensureSpace is used to ensure we have space in the cache"
    },
    {
      "sha": "0e5d580e0e9643a332da623d3b9976c8569b8c5e",
      "filename": "backend/vendor/github.com/hashicorp/golang-lru/LICENSE",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2FLICENSE",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2FLICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2FLICENSE?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -1,3 +1,5 @@\n+Copyright (c) 2014 HashiCorp, Inc.\n+\n Mozilla Public License, version 2.0\n \n 1. Definitions"
    },
    {
      "sha": "063bb16056ef4c7fd391d03d262ec8615e2488de",
      "filename": "backend/vendor/github.com/hashicorp/golang-lru/README.md",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2FREADME.md?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -7,7 +7,7 @@ thread safe LRU cache. It is based on the cache in Groupcache.\n Documentation\n =============\n \n-Full docs are available on [Godoc](http://godoc.org/github.com/hashicorp/golang-lru)\n+Full docs are available on [Godoc](https://pkg.go.dev/github.com/hashicorp/golang-lru)\n \n Example\n ======="
    },
    {
      "sha": "e396f8428aa3b0953d1442f6f5554fe08f837d60",
      "filename": "backend/vendor/github.com/hashicorp/golang-lru/arc.go",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Farc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Farc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Farc.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -173,7 +173,6 @@ func (c *ARCCache) Add(key, value interface{}) {\n \n \t// Add to the recently seen list\n \tc.t1.Add(key, value)\n-\treturn\n }\n \n // replace is used to adaptively evict from either T1 or T2"
    },
    {
      "sha": "895d8e3ea0c14949d41025d5cc8217bec260db73",
      "filename": "backend/vendor/github.com/hashicorp/golang-lru/lru.go",
      "status": "modified",
      "additions": 100,
      "deletions": 19,
      "changes": 119,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Flru.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Flru.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Flru.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -6,10 +6,17 @@ import (\n \t\"github.com/hashicorp/golang-lru/simplelru\"\n )\n \n+const (\n+\t// DefaultEvictedBufferSize defines the default buffer size to store evicted key/val\n+\tDefaultEvictedBufferSize = 16\n+)\n+\n // Cache is a thread-safe fixed size LRU cache.\n type Cache struct {\n-\tlru  simplelru.LRUCache\n-\tlock sync.RWMutex\n+\tlru                      *simplelru.LRU\n+\tevictedKeys, evictedVals []interface{}\n+\tonEvictedCB              func(k, v interface{})\n+\tlock                     sync.RWMutex\n }\n \n // New creates an LRU of the given size.\n@@ -19,30 +26,63 @@ func New(size int) (*Cache, error) {\n \n // NewWithEvict constructs a fixed size cache with the given eviction\n // callback.\n-func NewWithEvict(size int, onEvicted func(key interface{}, value interface{})) (*Cache, error) {\n-\tlru, err := simplelru.NewLRU(size, simplelru.EvictCallback(onEvicted))\n-\tif err != nil {\n-\t\treturn nil, err\n+func NewWithEvict(size int, onEvicted func(key, value interface{})) (c *Cache, err error) {\n+\t// create a cache with default settings\n+\tc = &Cache{\n+\t\tonEvictedCB: onEvicted,\n \t}\n-\tc := &Cache{\n-\t\tlru: lru,\n+\tif onEvicted != nil {\n+\t\tc.initEvictBuffers()\n+\t\tonEvicted = c.onEvicted\n \t}\n-\treturn c, nil\n+\tc.lru, err = simplelru.NewLRU(size, onEvicted)\n+\treturn\n+}\n+\n+func (c *Cache) initEvictBuffers() {\n+\tc.evictedKeys = make([]interface{}, 0, DefaultEvictedBufferSize)\n+\tc.evictedVals = make([]interface{}, 0, DefaultEvictedBufferSize)\n+}\n+\n+// onEvicted save evicted key/val and sent in externally registered callback\n+// outside of critical section\n+func (c *Cache) onEvicted(k, v interface{}) {\n+\tc.evictedKeys = append(c.evictedKeys, k)\n+\tc.evictedVals = append(c.evictedVals, v)\n }\n \n // Purge is used to completely clear the cache.\n func (c *Cache) Purge() {\n+\tvar ks, vs []interface{}\n \tc.lock.Lock()\n \tc.lru.Purge()\n+\tif c.onEvictedCB != nil && len(c.evictedKeys) > 0 {\n+\t\tks, vs = c.evictedKeys, c.evictedVals\n+\t\tc.initEvictBuffers()\n+\t}\n \tc.lock.Unlock()\n+\t// invoke callback outside of critical section\n+\tif c.onEvictedCB != nil {\n+\t\tfor i := 0; i < len(ks); i++ {\n+\t\t\tc.onEvictedCB(ks[i], vs[i])\n+\t\t}\n+\t}\n }\n \n // Add adds a value to the cache. Returns true if an eviction occurred.\n func (c *Cache) Add(key, value interface{}) (evicted bool) {\n+\tvar k, v interface{}\n \tc.lock.Lock()\n \tevicted = c.lru.Add(key, value)\n+\tif c.onEvictedCB != nil && evicted {\n+\t\tk, v = c.evictedKeys[0], c.evictedVals[0]\n+\t\tc.evictedKeys, c.evictedVals = c.evictedKeys[:0], c.evictedVals[:0]\n+\t}\n \tc.lock.Unlock()\n-\treturn evicted\n+\tif c.onEvictedCB != nil && evicted {\n+\t\tc.onEvictedCB(k, v)\n+\t}\n+\treturn\n }\n \n // Get looks up a key's value from the cache.\n@@ -75,61 +115,102 @@ func (c *Cache) Peek(key interface{}) (value interface{}, ok bool) {\n // recent-ness or deleting it for being stale, and if not, adds the value.\n // Returns whether found and whether an eviction occurred.\n func (c *Cache) ContainsOrAdd(key, value interface{}) (ok, evicted bool) {\n+\tvar k, v interface{}\n \tc.lock.Lock()\n-\tdefer c.lock.Unlock()\n-\n \tif c.lru.Contains(key) {\n+\t\tc.lock.Unlock()\n \t\treturn true, false\n \t}\n \tevicted = c.lru.Add(key, value)\n+\tif c.onEvictedCB != nil && evicted {\n+\t\tk, v = c.evictedKeys[0], c.evictedVals[0]\n+\t\tc.evictedKeys, c.evictedVals = c.evictedKeys[:0], c.evictedVals[:0]\n+\t}\n+\tc.lock.Unlock()\n+\tif c.onEvictedCB != nil && evicted {\n+\t\tc.onEvictedCB(k, v)\n+\t}\n \treturn false, evicted\n }\n \n // PeekOrAdd checks if a key is in the cache without updating the\n // recent-ness or deleting it for being stale, and if not, adds the value.\n // Returns whether found and whether an eviction occurred.\n func (c *Cache) PeekOrAdd(key, value interface{}) (previous interface{}, ok, evicted bool) {\n+\tvar k, v interface{}\n \tc.lock.Lock()\n-\tdefer c.lock.Unlock()\n-\n \tprevious, ok = c.lru.Peek(key)\n \tif ok {\n+\t\tc.lock.Unlock()\n \t\treturn previous, true, false\n \t}\n-\n \tevicted = c.lru.Add(key, value)\n+\tif c.onEvictedCB != nil && evicted {\n+\t\tk, v = c.evictedKeys[0], c.evictedVals[0]\n+\t\tc.evictedKeys, c.evictedVals = c.evictedKeys[:0], c.evictedVals[:0]\n+\t}\n+\tc.lock.Unlock()\n+\tif c.onEvictedCB != nil && evicted {\n+\t\tc.onEvictedCB(k, v)\n+\t}\n \treturn nil, false, evicted\n }\n \n // Remove removes the provided key from the cache.\n func (c *Cache) Remove(key interface{}) (present bool) {\n+\tvar k, v interface{}\n \tc.lock.Lock()\n \tpresent = c.lru.Remove(key)\n+\tif c.onEvictedCB != nil && present {\n+\t\tk, v = c.evictedKeys[0], c.evictedVals[0]\n+\t\tc.evictedKeys, c.evictedVals = c.evictedKeys[:0], c.evictedVals[:0]\n+\t}\n \tc.lock.Unlock()\n+\tif c.onEvictedCB != nil && present {\n+\t\tc.onEvictedCB(k, v)\n+\t}\n \treturn\n }\n \n // Resize changes the cache size.\n func (c *Cache) Resize(size int) (evicted int) {\n+\tvar ks, vs []interface{}\n \tc.lock.Lock()\n \tevicted = c.lru.Resize(size)\n+\tif c.onEvictedCB != nil && evicted > 0 {\n+\t\tks, vs = c.evictedKeys, c.evictedVals\n+\t\tc.initEvictBuffers()\n+\t}\n \tc.lock.Unlock()\n+\tif c.onEvictedCB != nil && evicted > 0 {\n+\t\tfor i := 0; i < len(ks); i++ {\n+\t\t\tc.onEvictedCB(ks[i], vs[i])\n+\t\t}\n+\t}\n \treturn evicted\n }\n \n // RemoveOldest removes the oldest item from the cache.\n-func (c *Cache) RemoveOldest() (key interface{}, value interface{}, ok bool) {\n+func (c *Cache) RemoveOldest() (key, value interface{}, ok bool) {\n+\tvar k, v interface{}\n \tc.lock.Lock()\n \tkey, value, ok = c.lru.RemoveOldest()\n+\tif c.onEvictedCB != nil && ok {\n+\t\tk, v = c.evictedKeys[0], c.evictedVals[0]\n+\t\tc.evictedKeys, c.evictedVals = c.evictedKeys[:0], c.evictedVals[:0]\n+\t}\n \tc.lock.Unlock()\n+\tif c.onEvictedCB != nil && ok {\n+\t\tc.onEvictedCB(k, v)\n+\t}\n \treturn\n }\n \n // GetOldest returns the oldest entry\n-func (c *Cache) GetOldest() (key interface{}, value interface{}, ok bool) {\n-\tc.lock.Lock()\n+func (c *Cache) GetOldest() (key, value interface{}, ok bool) {\n+\tc.lock.RLock()\n \tkey, value, ok = c.lru.GetOldest()\n-\tc.lock.Unlock()\n+\tc.lock.RUnlock()\n \treturn\n }\n "
    },
    {
      "sha": "9233583c91c1d7f769d288c4d509238c23fe8d72",
      "filename": "backend/vendor/github.com/hashicorp/golang-lru/simplelru/lru.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Fsimplelru%2Flru.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Fsimplelru%2Flru.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Fsimplelru%2Flru.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -25,7 +25,7 @@ type entry struct {\n // NewLRU constructs an LRU of the given size\n func NewLRU(size int, onEvict EvictCallback) (*LRU, error) {\n \tif size <= 0 {\n-\t\treturn nil, errors.New(\"Must provide a positive size\")\n+\t\treturn nil, errors.New(\"must provide a positive size\")\n \t}\n \tc := &LRU{\n \t\tsize:      size,\n@@ -109,7 +109,7 @@ func (c *LRU) Remove(key interface{}) (present bool) {\n }\n \n // RemoveOldest removes the oldest item from the cache.\n-func (c *LRU) RemoveOldest() (key interface{}, value interface{}, ok bool) {\n+func (c *LRU) RemoveOldest() (key, value interface{}, ok bool) {\n \tent := c.evictList.Back()\n \tif ent != nil {\n \t\tc.removeElement(ent)\n@@ -120,7 +120,7 @@ func (c *LRU) RemoveOldest() (key interface{}, value interface{}, ok bool) {\n }\n \n // GetOldest returns the oldest entry\n-func (c *LRU) GetOldest() (key interface{}, value interface{}, ok bool) {\n+func (c *LRU) GetOldest() (key, value interface{}, ok bool) {\n \tent := c.evictList.Back()\n \tif ent != nil {\n \t\tkv := ent.Value.(*entry)"
    },
    {
      "sha": "cb7f8caf03d6c823e8c3047b14a4bd8f35886a1b",
      "filename": "backend/vendor/github.com/hashicorp/golang-lru/simplelru/lru_interface.go",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Fsimplelru%2Flru_interface.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Fsimplelru%2Flru_interface.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Fsimplelru%2Flru_interface.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -1,3 +1,4 @@\n+// Package simplelru provides simple LRU implementation based on build-in container/list.\n package simplelru\n \n // LRUCache is the interface for simple LRU cache.\n@@ -34,6 +35,6 @@ type LRUCache interface {\n \t// Clears all cache entries.\n \tPurge()\n \n-  // Resizes cache, returning number evicted\n-  Resize(int) int\n+\t// Resizes cache, returning number evicted\n+\tResize(int) int\n }"
    },
    {
      "sha": "492760782c5eafdbec94dbd31ae7a9580346feb6",
      "filename": "backend/vendor/github.com/hashicorp/golang-lru/testing.go",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Ftesting.go",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Ftesting.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fhashicorp%2Fgolang-lru%2Ftesting.go?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -0,0 +1,16 @@\n+package lru\n+\n+import (\n+\t\"crypto/rand\"\n+\t\"math\"\n+\t\"math/big\"\n+\t\"testing\"\n+)\n+\n+func getRand(tb testing.TB) int64 {\n+\tout, err := rand.Int(rand.Reader, big.NewInt(math.MaxInt64))\n+\tif err != nil {\n+\t\ttb.Fatal(err)\n+\t}\n+\treturn out.Int64()\n+}"
    },
    {
      "sha": "0e757ebd8bd39a9295f714188230b1bdb8d0435c",
      "filename": "backend/vendor/modules.txt",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fmodules.txt",
      "raw_url": "https://github.com/umputun/remark42/raw/d7e9be99f9dd9cd73f02b1609357e111a5a59084/backend%2Fvendor%2Fmodules.txt",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fmodules.txt?ref=d7e9be99f9dd9cd73f02b1609357e111a5a59084",
      "patch": "@@ -65,7 +65,7 @@ github.com/go-chi/render\n github.com/go-oauth2/oauth2/v4\n github.com/go-oauth2/oauth2/v4/errors\n github.com/go-oauth2/oauth2/v4/server\n-# github.com/go-pkgz/auth v1.20.0\n+# github.com/go-pkgz/auth v1.20.1-0.20221226231300-65f433fba0f1\n ## explicit; go 1.17\n github.com/go-pkgz/auth\n github.com/go-pkgz/auth/avatar\n@@ -74,16 +74,16 @@ github.com/go-pkgz/auth/middleware\n github.com/go-pkgz/auth/provider\n github.com/go-pkgz/auth/provider/sender\n github.com/go-pkgz/auth/token\n-# github.com/go-pkgz/email v0.4.0\n-## explicit; go 1.17\n+# github.com/go-pkgz/email v0.4.1\n+## explicit; go 1.19\n github.com/go-pkgz/email\n # github.com/go-pkgz/expirable-cache v0.1.0\n ## explicit; go 1.14\n github.com/go-pkgz/expirable-cache\n # github.com/go-pkgz/jrpc v0.3.0\n ## explicit; go 1.16\n github.com/go-pkgz/jrpc\n-# github.com/go-pkgz/lcw v1.0.1\n+# github.com/go-pkgz/lcw v1.0.3-0.20221226231215-a66ea7c4aff7\n ## explicit; go 1.15\n github.com/go-pkgz/lcw\n github.com/go-pkgz/lcw/eventbus\n@@ -143,7 +143,7 @@ github.com/hashicorp/errwrap\n # github.com/hashicorp/go-multierror v1.1.1\n ## explicit; go 1.13\n github.com/hashicorp/go-multierror\n-# github.com/hashicorp/golang-lru v0.5.4\n+# github.com/hashicorp/golang-lru v0.6.0\n ## explicit; go 1.12\n github.com/hashicorp/golang-lru\n github.com/hashicorp/golang-lru/simplelru\n@@ -196,7 +196,7 @@ github.com/slack-go/slack/internal/backoff\n github.com/slack-go/slack/internal/errorsx\n github.com/slack-go/slack/internal/timex\n github.com/slack-go/slack/slackutilsx\n-# github.com/stretchr/testify v1.8.0\n+# github.com/stretchr/testify v1.8.1\n ## explicit; go 1.13\n github.com/stretchr/testify/assert\n github.com/stretchr/testify/require"
    }
  ]
}
