{
  "sha": "533800a87ba1e170be6620bff2f8b5f97713cefa",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo1MzM4MDBhODdiYTFlMTcwYmU2NjIwYmZmMmY4YjVmOTc3MTNjZWZh",
  "commit": {
    "author": {
      "name": "Bianca Nenciu",
      "email": "nbianca@users.noreply.github.com",
      "date": "2021-02-25T12:00:58Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-02-25T12:00:58Z"
    },
    "message": "Add watched words of type \"replace\" (#12020)\n\nThis commit includes other various improvements to watched words.\r\n\r\nauto_silence_first_post_regex site setting was removed because it overlapped\r\nwith 'require approval' watched words.",
    "tree": {
      "sha": "784435de9c2fe5cfc35adec21e3959622b8b1197",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/784435de9c2fe5cfc35adec21e3959622b8b1197"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/533800a87ba1e170be6620bff2f8b5f97713cefa",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgN5F6CRBK7hj4Ov3rIwAAdHIIAJdlAMudLlVYONJJUOTEsLhL\nq8KReTnBR1DG/npqM2/1AEEO+WjSFpFOzJ199b89COYsVty2pwJC+5awVejYeuA/\nnFB3PK3aiIOZPIKvfnDMRa6yAhEJFVGwE1KRSbl8HM+WQKAGRYeM08rfHjSWrPNn\nHvbvrBouIcbdtIG02gKkUGGrbsfhIcaZmehdOoVElDndwQ6ZjQngpPJI1qGt38i2\ng1mPdLp/GRbSE9oIqeDk2tmWwKiaXK0THykbPTJrGcfnTHHV2kg/9TjjBExn2TX+\npJgZdaWoPHQQYL5+T/FZkHfTzyYqSoTHJe1X97ctioZu3uKViT/fYVWv40OKdI0=\n=WWxC\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 784435de9c2fe5cfc35adec21e3959622b8b1197\nparent a9a93b15ec49fcf16bbcc82e12436074745d2b69\nauthor Bianca Nenciu <nbianca@users.noreply.github.com> 1614254458 +0200\ncommitter GitHub <noreply@github.com> 1614254458 +0200\n\nAdd watched words of type \"replace\" (#12020)\n\nThis commit includes other various improvements to watched words.\r\n\r\nauto_silence_first_post_regex site setting was removed because it overlapped\r\nwith 'require approval' watched words."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/533800a87ba1e170be6620bff2f8b5f97713cefa",
  "html_url": "https://github.com/discourse/discourse/commit/533800a87ba1e170be6620bff2f8b5f97713cefa",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/533800a87ba1e170be6620bff2f8b5f97713cefa/comments",
  "author": {
    "login": "nbianca",
    "id": 23153890,
    "node_id": "MDQ6VXNlcjIzMTUzODkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/23153890?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nbianca",
    "html_url": "https://github.com/nbianca",
    "followers_url": "https://api.github.com/users/nbianca/followers",
    "following_url": "https://api.github.com/users/nbianca/following{/other_user}",
    "gists_url": "https://api.github.com/users/nbianca/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nbianca/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nbianca/subscriptions",
    "organizations_url": "https://api.github.com/users/nbianca/orgs",
    "repos_url": "https://api.github.com/users/nbianca/repos",
    "events_url": "https://api.github.com/users/nbianca/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nbianca/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a9a93b15ec49fcf16bbcc82e12436074745d2b69",
      "url": "https://api.github.com/repos/discourse/discourse/commits/a9a93b15ec49fcf16bbcc82e12436074745d2b69",
      "html_url": "https://github.com/discourse/discourse/commit/a9a93b15ec49fcf16bbcc82e12436074745d2b69"
    }
  ],
  "stats": {
    "total": 538,
    "additions": 384,
    "deletions": 154
  },
  "files": [
    {
      "sha": "fb24a6f388fcbac5065f2a029246c0a029e49207",
      "filename": "app/assets/javascripts/admin/addon/components/admin-watched-word.js",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/components/admin-watched-word.js",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/components/admin-watched-word.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/components/admin-watched-word.js?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -1,17 +1,9 @@\n import Component from \"@ember/component\";\n import I18n from \"I18n\";\n import bootbox from \"bootbox\";\n-import { iconHTML } from \"discourse-common/lib/icon-library\";\n \n export default Component.extend({\n   classNames: [\"watched-word\"],\n-  watchedWord: null,\n-  xIcon: iconHTML(\"times\").htmlSafe(),\n-\n-  init() {\n-    this._super(...arguments);\n-    this.set(\"watchedWord\", this.get(\"word.word\"));\n-  },\n \n   click() {\n     this.word"
    },
    {
      "sha": "cf0ceb3f455f328788c8c226c9cb9915130a9e02",
      "filename": "app/assets/javascripts/admin/addon/components/watched-word-form.js",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/components/watched-word-form.js",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/components/watched-word-form.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/components/watched-word-form.js?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -15,6 +15,11 @@ export default Component.extend({\n   actionKey: null,\n   showMessage: false,\n \n+  @discourseComputed(\"actionKey\")\n+  canReplace(actionKey) {\n+    return actionKey === \"replace\";\n+  },\n+\n   @discourseComputed(\"regularExpressions\")\n   placeholderKey(regularExpressions) {\n     return (\n@@ -56,6 +61,7 @@ export default Component.extend({\n \n         const watchedWord = WatchedWord.create({\n           word: this.word,\n+          replacement: this.canReplace ? this.replacement : null,\n           action: this.actionKey,\n         });\n \n@@ -64,6 +70,7 @@ export default Component.extend({\n           .then((result) => {\n             this.setProperties({\n               word: \"\",\n+              replacement: \"\",\n               formSubmitted: false,\n               showMessage: true,\n               message: I18n.t(\"admin.watched_words.form.success\"),"
    },
    {
      "sha": "6b7de3bf95e0822f3e149d1803b981579acfa60c",
      "filename": "app/assets/javascripts/admin/addon/models/watched-word.js",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/models/watched-word.js",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/models/watched-word.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/models/watched-word.js?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -8,7 +8,11 @@ const WatchedWord = EmberObject.extend({\n       \"/admin/logs/watched_words\" + (this.id ? \"/\" + this.id : \"\") + \".json\",\n       {\n         type: this.id ? \"PUT\" : \"POST\",\n-        data: { word: this.word, action_key: this.action },\n+        data: {\n+          word: this.word,\n+          replacement: this.replacement,\n+          action_key: this.action,\n+        },\n         dataType: \"json\",\n       }\n     );"
    },
    {
      "sha": "058329145c10fae243b899adec4940964eff11ba",
      "filename": "app/assets/javascripts/admin/addon/templates/components/admin-watched-word.hbs",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/templates/components/admin-watched-word.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/templates/components/admin-watched-word.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/templates/components/admin-watched-word.hbs?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -1 +1 @@\n-{{xIcon}}{{watchedWord}}\n+{{d-icon \"times\"}} {{word.word}} {{#if word.replacement}}&rarr; {{word.replacement}}{{/if}}"
    },
    {
      "sha": "79231fa80446f8615604ab1fb4e34f79de475732",
      "filename": "app/assets/javascripts/admin/addon/templates/components/watched-word-form.hbs",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/templates/components/watched-word-form.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/templates/components/watched-word-form.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/templates/components/watched-word-form.hbs?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -1,5 +1,15 @@\n-<b>{{i18n \"admin.watched_words.form.label\"}}</b>\n-{{text-field value=word disabled=formSubmitted class=\"watched-word-input\" autocorrect=\"off\" autocapitalize=\"off\" placeholderKey=placeholderKey title=(i18n placeholderKey)}}\n+<div class=\"watched-word-input\">\n+  <label for=\"watched-word\">{{i18n \"admin.watched_words.form.label\"}}</label>\n+  {{text-field id=\"watched-word\" value=word disabled=formSubmitted class=\"watched-word-input\" autocorrect=\"off\" autocapitalize=\"off\" placeholderKey=placeholderKey title=(i18n placeholderKey)}}\n+</div>\n+\n+{{#if canReplace}}\n+  <div class=\"watched-word-input\">\n+    <label for=\"watched-replacement\">{{i18n \"admin.watched_words.form.replacement_label\"}}</label>\n+    {{text-field id=\"watched-replacement\" value=replacement disabled=formSubmitted class=\"watched-word-input\" autocorrect=\"off\" autocapitalize=\"off\" placeholderKey=\"admin.watched_words.form.replacement_placeholder\"}}\n+  </div>\n+{{/if}}\n+\n {{d-button class=\"btn-default\" action=(action \"submit\") disabled=formSubmitted label=\"admin.watched_words.form.add\"}}\n \n {{#if showMessage}}"
    },
    {
      "sha": "87c192ed67e89d228f1da10c8f4bde563c1e95ea",
      "filename": "app/assets/javascripts/admin/addon/templates/components/watched-word-uploader.hbs",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/templates/components/watched-word-uploader.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/templates/components/watched-word-uploader.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/templates/components/watched-word-uploader.hbs?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -3,4 +3,3 @@\n   {{i18n \"admin.watched_words.form.upload\"}}\n   <input class=\"hidden-upload-field\" disabled={{addDisabled}} type=\"file\" accept=\"text/plain\">\n </label>\n-<span class=\"instructions\">{{i18n \"admin.watched_words.one_word_per_line\"}}</span>"
    },
    {
      "sha": "1c7e816f17f5ea50c08b4ca16a2aa3655d79d6a8",
      "filename": "app/assets/javascripts/admin/addon/templates/watched-words-action.hbs",
      "status": "modified",
      "additions": 35,
      "deletions": 38,
      "changes": 73,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/templates/watched-words-action.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/admin/addon/templates/watched-words-action.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/admin/addon/templates/watched-words-action.hbs?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -1,50 +1,47 @@\n-<h2>{{model.name}}</h2>\n+<div class=\"watched-word-container\">\n+  <h2>{{model.name}}</h2>\n \n-<p class=\"about\">{{actionDescription}}</p>\n+  <div class=\"watched-word-controls\">\n+    {{d-button\n+      class=\"btn-default download-link\"\n+      href=downloadLink\n+      icon=\"download\"\n+      label=\"admin.watched_words.download\"}}\n \n-<div class=\"watched-word-controls\">\n-  {{watched-word-form\n-    actionKey=actionNameKey\n-    action=(action \"recordAdded\")\n-    filteredContent=filteredContent\n-    regularExpressions=adminWatchedWords.regularExpressions}}\n-\n-  <div class=\"download-upload-controls\">\n-    <div class=\"download\">\n-      {{d-button\n-        class=\"btn-default download-link\"\n-        href=downloadLink\n-        icon=\"download\"\n-        label=\"admin.watched_words.download\"}}\n-    </div>\n     {{watched-word-uploader uploading=uploading actionKey=actionNameKey done=(action \"uploadComplete\")}}\n+\n+    {{d-button\n+      label=\"admin.watched_words.test.button_label\"\n+      icon=\"far-eye\"\n+      action=(action \"test\")}}\n+\n+    {{d-button\n+      class=\"btn-danger clear-all\"\n+      label=\"admin.watched_words.clear_all\"\n+      icon=\"trash-alt\"\n+      action=(action \"clearAll\")}}\n   </div>\n </div>\n \n-<div>\n+<p class=\"about\">{{actionDescription}}</p>\n+\n+{{watched-word-form\n+  actionKey=actionNameKey\n+  action=(action \"recordAdded\")\n+  filteredContent=filteredContent\n+  regularExpressions=adminWatchedWords.regularExpressions}}\n+\n+{{#if wordCount}}\n   <label class=\"show-words-checkbox\">\n     {{input type=\"checkbox\" checked=adminWatchedWords.showWords disabled=adminWatchedWords.disableShowWords}}\n-    {{i18n \"admin.watched_words.show_words\"}}\n+    {{i18n \"admin.watched_words.show_words\" count=wordCount}}\n   </label>\n-</div>\n-<div class=\"watched-words-list\">\n-  {{#if showWordsList}}\n+{{/if}}\n+\n+{{#if showWordsList}}\n+  <div class=\"watched-words-list\">\n     {{#each filteredContent as |word| }}\n       <div class=\"watched-word-box\">{{admin-watched-word word=word action=(action \"recordRemoved\")}}</div>\n     {{/each}}\n-  {{else}}\n-    {{i18n \"admin.watched_words.word_count\" count=wordCount}}\n-  {{/if}}\n-</div>\n-\n-<div class=\"clear-all-row\">\n-  {{d-button\n-    label=\"admin.watched_words.test.button_label\"\n-    icon=\"far-eye\"\n-    action=(action \"test\")}}\n-  {{d-button\n-    class=\"btn-danger clear-all\"\n-    label=\"admin.watched_words.clear_all\"\n-    icon=\"trash-alt\"\n-    action=(action \"clearAll\")}}\n-</div>\n+  </div>\n+{{/if}}"
    },
    {
      "sha": "588d0dab3d4b8f1e291c81e37e59e1155d29a181",
      "filename": "app/assets/javascripts/discourse/app/lib/text.js",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/discourse/app/lib/text.js",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/discourse/app/lib/text.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/lib/text.js?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -21,6 +21,7 @@ function getOpts(opts) {\n       customEmojiTranslation: context.site.custom_emoji_translation,\n       siteSettings: context.siteSettings,\n       formatUsername,\n+      watchedWordsReplacements: context.site.watched_words_replace,\n     },\n     opts\n   );"
    },
    {
      "sha": "36a2e4db9a1fd449cdcfbbc89294f6c72eec50af",
      "filename": "app/assets/javascripts/discourse/tests/acceptance/admin-watched-words-test.js",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/discourse/tests/acceptance/admin-watched-words-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/discourse/tests/acceptance/admin-watched-words-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/acceptance/admin-watched-words-test.js?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -12,7 +12,11 @@ acceptance(\"Admin - Watched Words\", function (needs) {\n   test(\"list words in groups\", async function (assert) {\n     await visit(\"/admin/logs/watched_words/action/block\");\n \n-    assert.ok(exists(\".watched-words-list\"));\n+    assert.ok(\n+      !exists(\".watched-words-list\"),\n+      \"Don't show bad words by default.\"\n+    );\n+\n     assert.ok(\n       !exists(\".watched-words-list .watched-word\"),\n       \"Don't show bad words by default.\""
    },
    {
      "sha": "2143505b5147f9884f460fdc0edc5e9dfa297850",
      "filename": "app/assets/javascripts/pretty-text/addon/pretty-text.js",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/pretty-text/addon/pretty-text.js",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/pretty-text/addon/pretty-text.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/addon/pretty-text.js?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -33,6 +33,7 @@ export function buildOptions(state) {\n     censoredRegexp,\n     disableEmojis,\n     customEmojiTranslation,\n+    watchedWordsReplacements,\n   } = state;\n \n   let features = {\n@@ -82,6 +83,7 @@ export function buildOptions(state) {\n       siteSettings.enable_advanced_editor_preview_sync,\n     previewing,\n     disableEmojis,\n+    watchedWordsReplacements,\n   };\n \n   // note, this will mutate options due to the way the API is designed"
    },
    {
      "sha": "f006efb37f3268e363a9a31ffe3bbf82a2f3f24d",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/watched-words-replace.js",
      "status": "added",
      "additions": 179,
      "deletions": 0,
      "changes": 179,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/pretty-text/engines/discourse-markdown/watched-words-replace.js",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/javascripts/pretty-text/engines/discourse-markdown/watched-words-replace.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/watched-words-replace.js?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -0,0 +1,179 @@\n+function isLinkOpen(str) {\n+  return /^<a[>\\s]/i.test(str);\n+}\n+\n+function isLinkClose(str) {\n+  return /^<\\/a\\s*>/i.test(str);\n+}\n+\n+function findAllMatches(text, matchers, useRegExp) {\n+  const matches = [];\n+\n+  if (useRegExp) {\n+    matchers.forEach((matcher) => {\n+      let match;\n+      while ((match = matcher.pattern.exec(text)) !== null) {\n+        matches.push({\n+          index: match.index,\n+          text: match[0],\n+          replacement: matcher.replacement,\n+        });\n+      }\n+    });\n+  } else {\n+    const lowerText = text.toLowerCase();\n+    matchers.forEach((matcher) => {\n+      const lowerPattern = matcher.pattern.toLowerCase();\n+      let index = -1;\n+      while ((index = lowerText.indexOf(lowerPattern, index + 1)) !== -1) {\n+        matches.push({\n+          index,\n+          text: text.substr(index, lowerPattern.length),\n+          replacement: matcher.replacement,\n+        });\n+      }\n+    });\n+  }\n+\n+  return matches.sort((a, b) => a.index - b.index);\n+}\n+\n+export function setup(helper) {\n+  helper.registerOptions((opts, siteSettings) => {\n+    opts.watchedWordsRegularExpressions =\n+      siteSettings.watched_words_regular_expressions;\n+  });\n+\n+  helper.registerPlugin((md) => {\n+    const replacements = md.options.discourse.watchedWordsReplacements;\n+    if (!replacements) {\n+      return;\n+    }\n+\n+    const matchers = Object.keys(replacements).map((word) => ({\n+      pattern: md.options.discourse.watchedWordsRegularExpressions\n+        ? new RegExp(word, \"gi\")\n+        : word,\n+      replacement: replacements[word],\n+    }));\n+\n+    const cache = {};\n+\n+    md.core.ruler.push(\"watched-words-replace\", (state) => {\n+      for (let j = 0, l = state.tokens.length; j < l; j++) {\n+        if (state.tokens[j].type !== \"inline\") {\n+          continue;\n+        }\n+\n+        let tokens = state.tokens[j].children;\n+\n+        let htmlLinkLevel = 0;\n+\n+        // We scan from the end, to keep position when new tags added.\n+        // Use reversed logic in links start/end match\n+        for (let i = tokens.length - 1; i >= 0; i--) {\n+          const currentToken = tokens[i];\n+\n+          // Skip content of markdown links\n+          if (currentToken.type === \"link_close\") {\n+            i--;\n+            while (\n+              tokens[i].level !== currentToken.level &&\n+              tokens[i].type !== \"link_open\"\n+            ) {\n+              i--;\n+            }\n+            continue;\n+          }\n+\n+          // Skip content of html tag links\n+          if (currentToken.type === \"html_inline\") {\n+            if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n+              htmlLinkLevel--;\n+            }\n+\n+            if (isLinkClose(currentToken.content)) {\n+              htmlLinkLevel++;\n+            }\n+          }\n+\n+          if (htmlLinkLevel > 0) {\n+            continue;\n+          }\n+\n+          if (currentToken.type === \"text\") {\n+            const text = currentToken.content;\n+            const matches = (cache[text] =\n+              cache[text] ||\n+              findAllMatches(\n+                text,\n+                matchers,\n+                md.options.discourse.watchedWordsRegularExpressions\n+              ));\n+\n+            // Now split string to nodes\n+            const nodes = [];\n+            let level = currentToken.level;\n+            let lastPos = 0;\n+\n+            let token;\n+            for (let ln = 0; ln < matches.length; ln++) {\n+              if (matches[ln].index < lastPos) {\n+                continue;\n+              }\n+\n+              if (matches[ln].index > lastPos) {\n+                token = new state.Token(\"text\", \"\", 0);\n+                token.content = text.slice(lastPos, matches[ln].index);\n+                token.level = level;\n+                nodes.push(token);\n+              }\n+\n+              let url = state.md.normalizeLink(matches[ln].replacement);\n+              if (state.md.validateLink(url) && /^https?/.test(url)) {\n+                token = new state.Token(\"link_open\", \"a\", 1);\n+                token.attrs = [[\"href\", url]];\n+                token.level = level++;\n+                token.markup = \"linkify\";\n+                token.info = \"auto\";\n+                nodes.push(token);\n+\n+                token = new state.Token(\"text\", \"\", 0);\n+                token.content = matches[ln].text;\n+                token.level = level;\n+                nodes.push(token);\n+\n+                token = new state.Token(\"link_close\", \"a\", -1);\n+                token.level = --level;\n+                token.markup = \"linkify\";\n+                token.info = \"auto\";\n+                nodes.push(token);\n+              } else {\n+                token = new state.Token(\"text\", \"\", 0);\n+                token.content = matches[ln].replacement;\n+                token.level = level;\n+                nodes.push(token);\n+              }\n+\n+              lastPos = matches[ln].index + matches[ln].text.length;\n+            }\n+\n+            if (lastPos < text.length) {\n+              token = new state.Token(\"text\", \"\", 0);\n+              token.content = text.slice(lastPos);\n+              token.level = level;\n+              nodes.push(token);\n+            }\n+\n+            // replace current node\n+            state.tokens[j].children = tokens = md.utils.arrayReplaceAt(\n+              tokens,\n+              i,\n+              nodes\n+            );\n+          }\n+        }\n+      }\n+    });\n+  });\n+}"
    },
    {
      "sha": "e5de3d67227af0e97a0c09fc49b0997710691459",
      "filename": "app/assets/stylesheets/common/admin/staff_logs.scss",
      "status": "modified",
      "additions": 17,
      "deletions": 40,
      "changes": 57,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/stylesheets/common/admin/staff_logs.scss",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/assets/stylesheets/common/admin/staff_logs.scss",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/stylesheets/common/admin/staff_logs.scss?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -329,28 +329,13 @@ table.screened-ip-addresses {\n   vertical-align: top;\n }\n \n-.admin-watched-words {\n-  .clear-all-row {\n-    display: flex;\n-    margin-top: 10px;\n-    justify-content: flex-end;\n-    .clear-all {\n-      margin-left: 5px;\n-    }\n-  }\n-}\n-\n-.watched-word-controls {\n+.watched-word-container {\n   display: flex;\n-  flex-wrap: wrap;\n-  margin-bottom: 1em;\n   justify-content: space-between;\n-  .download-upload-controls {\n-    display: flex;\n-  }\n-  .download {\n-    justify-content: flex-end;\n-  }\n+}\n+\n+.watched-words-uploader {\n+  display: inline-block;\n }\n \n .watched-words-list {\n@@ -361,47 +346,39 @@ table.screened-ip-addresses {\n .watched-word {\n   display: inline-block;\n   cursor: pointer;\n+\n   .d-icon {\n     margin-right: 0.25em;\n     color: var(--primary-medium);\n   }\n+\n   &:hover .d-icon {\n     color: var(--danger);\n   }\n }\n \n .watched-word-form {\n-  display: inline-block;\n   .success-message {\n     margin-left: 1em;\n   }\n }\n \n-.watched-words-uploader {\n-  margin-left: 5px;\n-  display: flex;\n-  flex-direction: column;\n-  align-items: flex-end;\n-  @media screen and (max-width: 500px) {\n-    flex: 1 1 100%;\n-    margin-top: 0.5em;\n-  }\n-  .instructions {\n-    font-size: $font-down-1;\n-    margin-top: 5px;\n-  }\n-}\n-\n-.watched-words-detail {\n-  .about {\n-    margin: 0.5em 0 1em 0;\n-  }\n+.watched-words-detail .about,\n+.watched-word-form {\n+  margin: 0.5em 0 1em 0;\n }\n \n .watched-words-test-modal p {\n   margin-top: 0;\n }\n \n+.watched-word-input {\n+  label {\n+    display: inline-block;\n+    min-width: 120px;\n+  }\n+}\n+\n // Search logs\n \n table.search-logs-list {"
    },
    {
      "sha": "b356a765eec514bc8011602f87f519698ded5587",
      "filename": "app/controllers/admin/watched_words_controller.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/controllers/admin/watched_words_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/controllers/admin/watched_words_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/admin/watched_words_controller.rb?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -69,7 +69,7 @@ def clear_all\n   private\n \n   def watched_words_params\n-    params.permit(:id, :word, :action_key)\n+    params.permit(:id, :word, :replacement, :action_key)\n   end\n \n end"
    },
    {
      "sha": "200059978e39a3149d71e0a38abcf02fe46dd1e0",
      "filename": "app/models/watched_word.rb",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/models/watched_word.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/models/watched_word.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/watched_word.rb?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -7,7 +7,8 @@ def self.actions\n       block: 1,\n       censor: 2,\n       require_approval: 3,\n-      flag: 4\n+      flag: 4,\n+      replace: 5\n     )\n   end\n \n@@ -37,6 +38,7 @@ def self.normalize_word(w)\n   def self.create_or_update_word(params)\n     new_word = normalize_word(params[:word])\n     w = WatchedWord.where(\"word ILIKE ?\", new_word).first || WatchedWord.new(word: new_word)\n+    w.replacement = params[:replacement] if params[:replacement]\n     w.action_key = params[:action_key] if params[:action_key]\n     w.action = params[:action] if params[:action]\n     w.save\n@@ -57,11 +59,12 @@ def clear_cache\n #\n # Table name: watched_words\n #\n-#  id         :integer          not null, primary key\n-#  word       :string           not null\n-#  action     :integer          not null\n-#  created_at :datetime         not null\n-#  updated_at :datetime         not null\n+#  id          :integer          not null, primary key\n+#  word        :string           not null\n+#  action      :integer          not null\n+#  created_at  :datetime         not null\n+#  updated_at  :datetime         not null\n+#  replacement :string\n #\n # Indexes\n #"
    },
    {
      "sha": "52493214498bb7b4e679e46ac3ea42a41781712a",
      "filename": "app/serializers/site_serializer.rb",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/serializers/site_serializer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/serializers/site_serializer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/serializers/site_serializer.rb?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -28,7 +28,8 @@ class SiteSerializer < ApplicationSerializer\n     :default_dark_color_scheme,\n     :censored_regexp,\n     :shared_drafts_category_id,\n-    :custom_emoji_translation\n+    :custom_emoji_translation,\n+    :watched_words_replace\n   )\n \n   has_many :categories, serializer: SiteCategorySerializer, embed: :objects\n@@ -175,6 +176,10 @@ def include_shared_drafts_category_id?\n     scope.can_see_shared_draft?\n   end\n \n+  def watched_words_replace\n+    WordWatcher.get_cached_words(:replace)\n+  end\n+\n   private\n \n   def ordered_flags(flags)"
    },
    {
      "sha": "654237168861e59f337d93527e1d2da046caeedc",
      "filename": "app/serializers/watched_word_serializer.rb",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/serializers/watched_word_serializer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/serializers/watched_word_serializer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/serializers/watched_word_serializer.rb?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -1,9 +1,13 @@\n # frozen_string_literal: true\n \n class WatchedWordSerializer < ApplicationSerializer\n-  attributes :id, :word, :action\n+  attributes :id, :word, :replacement, :action\n \n   def action\n     WatchedWord.actions[object.action]\n   end\n+\n+  def include_replacement?\n+    action == :replace\n+  end\n end"
    },
    {
      "sha": "92d278b6b370aca28f7acea29426aa486e00268b",
      "filename": "app/services/word_watcher.rb",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/app/services/word_watcher.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/app/services/word_watcher.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/services/word_watcher.rb?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -7,7 +7,12 @@ def initialize(raw)\n   end\n \n   def self.words_for_action(action)\n-    WatchedWord.where(action: WatchedWord.actions[action.to_sym]).limit(1000).pluck(:word)\n+    words = WatchedWord.where(action: WatchedWord.actions[action.to_sym]).limit(1000)\n+    if action.to_sym == :replace\n+      words.pluck(:word, :replacement).to_h\n+    else\n+      words.pluck(:word)\n+    end\n   end\n \n   def self.words_for_action_exists?(action)\n@@ -26,6 +31,9 @@ def self.get_cached_words(action)\n   def self.word_matcher_regexp(action, raise_errors: false)\n     words = get_cached_words(action)\n     if words\n+      if action.to_sym == :replace\n+        words = words.keys\n+      end\n       words = words.map do |w|\n         word = word_to_regexp(w)\n         word = \"(#{word})\" if SiteSetting.watched_words_regular_expressions?"
    },
    {
      "sha": "8512284510d176f36ad73e3c25b649a9ada48acb",
      "filename": "config/locales/client.en.yml",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/config/locales/client.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/config/locales/client.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/client.en.yml?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -4603,31 +4603,33 @@ en:\n         title: \"Watched Words\"\n         search: \"search\"\n         clear_filter: \"Clear\"\n-        show_words: \"show words\"\n-        one_word_per_line: \"One word per line\"\n+        show_words:\n+          one: \"show %{count} word\"\n+          other: \"show %{count} words\"\n         download: Download\n         clear_all: Clear All\n         clear_all_confirm_block: \"Are you sure you want to clear all watched words for the Block action?\"\n         clear_all_confirm_censor: \"Are you sure you want to clear all watched words for the Censor action?\"\n         clear_all_confirm_flag: \"Are you sure you want to clear all watched words for the Flag action?\"\n         clear_all_confirm_require_approval: \"Are you sure you want to clear all watched words for the Require Approval action?\"\n-        word_count:\n-          one: \"%{count} word\"\n-          other: \"%{count} words\"\n         actions:\n           block: \"Block\"\n           censor: \"Censor\"\n           require_approval: \"Require Approval\"\n           flag: \"Flag\"\n+          replace: \"Replace\"\n         action_descriptions:\n           block: \"Prevent posts containing these words from being posted. The user will see an error message when they try to submit their post.\"\n           censor: \"Allow posts containing these words, but replace them with characters that hide the censored words.\"\n           require_approval: \"Posts containing these words will require approval by staff before they can be seen.\"\n           flag: \"Allow posts containing these words, but flag them as inappropriate so moderators can review them.\"\n+          replace: \"Replace words in posts with other words or links\"\n         form:\n-          label: \"New Word:\"\n+          label: \"New Word\"\n           placeholder: \"full word or * as wildcard\"\n           placeholder_regexp: \"regular expression\"\n+          replacement_label: \"Replacement\"\n+          replacement_placeholder: \"example or https://example.com\"\n           add: \"Add\"\n           success: \"Success\"\n           exists: \"Already exists\""
    },
    {
      "sha": "f5d23d879d731f41e706272d4a14ced94d0539d4",
      "filename": "config/locales/server.en.yml",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/config/locales/server.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/config/locales/server.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/server.en.yml?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -1943,7 +1943,6 @@ en:\n     min_first_post_typing_time: \"Minimum amount of time in milliseconds a user must type during first post, if threshold is not met post will automatically enter the needs approval queue. Set to 0 to disable (not recommended)\"\n     auto_silence_fast_typers_on_first_post: \"Automatically silence users that do not meet min_first_post_typing_time\"\n     auto_silence_fast_typers_max_trust_level: \"Maximum trust level to auto silence fast typers\"\n-    auto_silence_first_post_regex: \"Case insensitive regex that if passed will cause first post by user to be silenced and sent to approval queue. Example: raging|a[bc]a , will cause all posts containing raging or aba or aca to be silenced on first. Only applies to first post.\"\n     reviewable_claiming: \"Does reviewable content need to be claimed before it can be acted upon?\"\n     reviewable_default_topics: \"Show reviewable content grouped by topic by default\"\n     reviewable_default_visibility: \"Don't show reviewable items unless they meet this priority\"\n@@ -4905,7 +4904,6 @@ en:\n       trust_level: \"Users at low trust levels must have replies approved by staff. See `approve_unless_trust_level`.\"\n       new_topics_unless_trust_level: \"Users at low trust levels must have topics approved by staff. See `approve_new_topics_unless_trust_level`.\"\n       fast_typer: \"New user typed their first post suspiciously fast, suspected bot or spammer behavior. See `min_first_post_typing_time`.\"\n-      auto_silence_regexp: \"New user whose first post matches the `auto_silence_first_post_regex` setting.\"\n       watched_word: \"This post included a Watched Word. See your <a href='%{base_url}/admin/logs/watched_words'>list of watched words</a>.\"\n       staged: \"New topics and posts for staged users must be approved by staff. See `approve_unless_staged`.\"\n       category: \"Posts in this category require manual approval by staff. See the category settings.\""
    },
    {
      "sha": "46705b46d939788fb6ae055fbdce0955448f4dcb",
      "filename": "config/site_settings.yml",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/config/site_settings.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/config/site_settings.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/site_settings.yml?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -1660,7 +1660,6 @@ spam:\n   min_first_post_typing_time: 3000\n   auto_silence_fast_typers_on_first_post: true\n   auto_silence_fast_typers_max_trust_level: 0\n-  auto_silence_first_post_regex: \"\"\n   high_trust_flaggers_auto_hide_posts: true\n   cooldown_hours_until_reflag:\n     default: 24"
    },
    {
      "sha": "ead20c6005884ab7acd547e1d5dba728dcd4c2f2",
      "filename": "db/migrate/20210204190020_move_auto_silence_first_post_regex_to_watched_words.rb",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/db/migrate/20210204190020_move_auto_silence_first_post_regex_to_watched_words.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/db/migrate/20210204190020_move_auto_silence_first_post_regex_to_watched_words.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/db/migrate/20210204190020_move_auto_silence_first_post_regex_to_watched_words.rb?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -0,0 +1,24 @@\n+# frozen_string_literal: true\n+\n+class MoveAutoSilenceFirstPostRegexToWatchedWords < ActiveRecord::Migration[6.0]\n+  def up\n+    execute <<~SQL\n+      INSERT INTO watched_words (word, action, created_at, updated_at)\n+      SELECT value, 3, created_at, updated_at\n+      FROM site_settings\n+      WHERE name = 'auto_silence_first_post_regex'\n+      ON CONFLICT DO NOTHING\n+    SQL\n+\n+    execute <<~SQL\n+      INSERT INTO watched_words (word, action, created_at, updated_at)\n+      SELECT unnest(string_to_array(value, '|')), 3, created_at, updated_at\n+      FROM site_settings\n+      WHERE name = 'auto_silence_first_post_regex'\n+      ON CONFLICT DO NOTHING\n+    SQL\n+  end\n+\n+  def down\n+  end\n+end"
    },
    {
      "sha": "8496793806b89c58061e145fab1449c656a43c62",
      "filename": "db/migrate/20210204195932_add_replacement_to_watched_words.rb",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/db/migrate/20210204195932_add_replacement_to_watched_words.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/db/migrate/20210204195932_add_replacement_to_watched_words.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/db/migrate/20210204195932_add_replacement_to_watched_words.rb?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -0,0 +1,7 @@\n+# frozen_string_literal: true\n+\n+class AddReplacementToWatchedWords < ActiveRecord::Migration[6.0]\n+  def change\n+    add_column :watched_words, :replacement, :string, null: true\n+  end\n+end"
    },
    {
      "sha": "cf0bf3e27283dce3592e9055f35851d8cee3fbc8",
      "filename": "lib/new_post_manager.rb",
      "status": "modified",
      "additions": 0,
      "deletions": 23,
      "changes": 23,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/lib/new_post_manager.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/lib/new_post_manager.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/new_post_manager.rb?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -54,25 +54,6 @@ def self.is_fast_typer?(manager)\n     manager.user.trust_level <= SiteSetting.auto_silence_fast_typers_max_trust_level\n   end\n \n-  def self.matches_auto_silence_regex?(manager)\n-    args = manager.args\n-\n-    pattern = SiteSetting.auto_silence_first_post_regex\n-\n-    return false unless pattern.present?\n-    return false unless is_first_post?(manager)\n-\n-    begin\n-      regex = Regexp.new(pattern, Regexp::IGNORECASE)\n-    rescue => e\n-      Rails.logger.warn \"Invalid regex in auto_silence_first_post_regex #{e}\"\n-      return false\n-    end\n-\n-    \"#{args[:title]} #{args[:raw]}\" =~ regex\n-\n-  end\n-\n   def self.exempt_user?(user)\n     user.staff?\n   end\n@@ -102,8 +83,6 @@ def self.post_needs_approval?(manager)\n \n     return :fast_typer if is_fast_typer?(manager)\n \n-    return :auto_silence_regex if matches_auto_silence_regex?(manager)\n-\n     return :staged if SiteSetting.approve_unless_staged? && user.staged?\n \n     return :category if post_needs_approval_in_its_category?(manager)\n@@ -168,8 +147,6 @@ def self.default_handler(manager)\n     I18n.with_locale(SiteSetting.default_locale) do\n       if is_fast_typer?(manager)\n         UserSilencer.silence(manager.user, Discourse.system_user, keep_posts: true, reason: I18n.t(\"user.new_user_typed_too_fast\"))\n-      elsif matches_auto_silence_regex?(manager)\n-        UserSilencer.silence(manager.user, Discourse.system_user, keep_posts: true, reason: I18n.t(\"user.content_matches_auto_silence_regex\"))\n       elsif reason == :email_spam && is_first_post?(manager)\n         UserSilencer.silence(manager.user, Discourse.system_user, keep_posts: true, reason: I18n.t(\"user.email_in_spam_header\"))\n       end"
    },
    {
      "sha": "399403402a787a5d2b3136d24bfb331c0acf4c90",
      "filename": "lib/pretty_text.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/lib/pretty_text.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/lib/pretty_text.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/pretty_text.rb?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -172,6 +172,7 @@ def self.markdown(text, opts = {})\n         __optInput.emojiUnicodeReplacer = __emojiUnicodeReplacer;\n         __optInput.lookupUploadUrls = __lookupUploadUrls;\n         __optInput.censoredRegexp = #{WordWatcher.word_matcher_regexp(:censor)&.source.to_json};\n+        __optInput.watchedWordsReplacements = #{WordWatcher.get_cached_words(:replace).to_json};\n       JS\n \n       if opts[:topicId]"
    },
    {
      "sha": "814ee8516574627804f99594c875ebb1b90fe19d",
      "filename": "spec/components/pretty_text_spec.rb",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/spec/components/pretty_text_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/spec/components/pretty_text_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/pretty_text_spec.rb?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -1351,6 +1351,56 @@ def expect_cooked_match(raw, expected_cooked)\n     end\n   end\n \n+  describe \"watched words - replace\" do\n+    after(:all) { Discourse.redis.flushdb }\n+\n+    it \"replaces words with other words\" do\n+      Fabricate(:watched_word, action: WatchedWord.actions[:replace], word: \"dolor sit\", replacement: \"something else\")\n+\n+      expect(PrettyText.cook(\"Lorem ipsum dolor sit amet\")).to match_html(<<~HTML)\n+        <p>Lorem ipsum something else amet</p>\n+      HTML\n+    end\n+\n+    it \"replaces words with links\" do\n+      Fabricate(:watched_word, action: WatchedWord.actions[:replace], word: \"meta\", replacement: \"https://meta.discourse.org\")\n+\n+      expect(PrettyText.cook(\"Meta is a Discourse forum\")).to match_html(<<~HTML)\n+        <p>\n+          <a href=\\\"https://meta.discourse.org\\\" rel=\\\"noopener nofollow ugc\\\">Meta</a>\n+          is a Discourse forum\n+        </p>\n+      HTML\n+    end\n+\n+    it \"works with regex\" do\n+      Fabricate(:watched_word, action: WatchedWord.actions[:replace], word: \"f.o\", replacement: \"test\")\n+\n+      expect(PrettyText.cook(\"foo\")).to match_html(\"<p>foo</p>\")\n+      expect(PrettyText.cook(\"f.o\")).to match_html(\"<p>test</p>\")\n+\n+      SiteSetting.watched_words_regular_expressions = true\n+\n+      expect(PrettyText.cook(\"foo\")).to match_html(\"<p>test</p>\")\n+      expect(PrettyText.cook(\"f.o\")).to match_html(\"<p>test</p>\")\n+    end\n+\n+    it \"supports overlapping words\" do\n+      Fabricate(:watched_word, action: WatchedWord.actions[:replace], word: \"discourse\", replacement: \"https://discourse.org\")\n+      Fabricate(:watched_word, action: WatchedWord.actions[:replace], word: \"is\", replacement: \"https://example.com\")\n+\n+      expect(PrettyText.cook(\"Meta is a Discourse forum\")).to match_html(<<~HTML)\n+        <p>\n+          Meta\n+          <a href=\"https://example.com\" rel=\"noopener nofollow ugc\">is</a>\n+          a\n+          <a href=\"https://discourse.org\" rel=\"noopener nofollow ugc\">Discourse</a>\n+          forum\n+        </p>\n+      HTML\n+    end\n+  end\n+\n   it 'supports typographer' do\n     SiteSetting.enable_markdown_typographer = true\n     expect(PrettyText.cook('(tm)')).to eq('<p>™</p>')"
    },
    {
      "sha": "92d352805187e5e9e250b13659c09a60564601e1",
      "filename": "spec/requests/posts_controller_spec.rb",
      "status": "modified",
      "additions": 0,
      "deletions": 20,
      "changes": 20,
      "blob_url": "https://github.com/discourse/discourse/blob/533800a87ba1e170be6620bff2f8b5f97713cefa/spec/requests/posts_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/533800a87ba1e170be6620bff2f8b5f97713cefa/spec/requests/posts_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/posts_controller_spec.rb?ref=533800a87ba1e170be6620bff2f8b5f97713cefa",
      "patch": "@@ -857,26 +857,6 @@\n         end\n       end\n \n-      it 'silences correctly based on auto_silence_first_post_regex' do\n-        SiteSetting.auto_silence_first_post_regex = \"I love candy|i eat s[1-5]\"\n-\n-        post \"/posts.json\", params: {\n-          raw: 'this is the test content',\n-          title: 'when I eat s3 sometimes when not looking'\n-        }\n-\n-        expect(response.status).to eq(200)\n-        parsed = response.parsed_body\n-\n-        expect(parsed[\"action\"]).to eq(\"enqueued\")\n-        reviewable = ReviewableQueuedPost.find_by(created_by: user)\n-        score = reviewable.reviewable_scores.first\n-        expect(score.reason).to eq('auto_silence_regex')\n-\n-        user.reload\n-        expect(user).to be_silenced\n-      end\n-\n       it \"can send a message to a group\" do\n         group = Group.create(name: 'test_group', messageable_level: Group::ALIAS_LEVELS[:nobody])\n         user1 = user"
    }
  ]
}
