{
  "sha": "6c155dba775441ccef9ac21c770102857978286d",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo2YzE1NWRiYTc3NTQ0MWNjZWY5YWMyMWM3NzAxMDI4NTc5NzgyODZk",
  "commit": {
    "author": {
      "name": "Martin Brennan",
      "email": "mjrbrennan@gmail.com",
      "date": "2021-01-15T04:31:59Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-01-15T04:31:59Z"
    },
    "message": "FIX: Stop incorrect emailing of group email from PostAlerter (#11723)\n\nFixes bug introduced by https://github.com/discourse/discourse/commit/bd25627198dd74442cc4014975e7af2d3b142622\r\n\r\nWhat happens is we send notifications to everyone involved in the group inbox topic about new posts, however we pass the param `skip_send_email_to: email_addresses`. In the above commit I removed the group email address from this `email_addresses` array. This breaks the IMAP inbox because we email the group with the reply, and the IMAP sync tool finds this email and opens a new unrelated topic with it.",
    "tree": {
      "sha": "33a91498a8f339f53ac38361b14207e8fceb9527",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/33a91498a8f339f53ac38361b14207e8fceb9527"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/6c155dba775441ccef9ac21c770102857978286d",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgARq/CRBK7hj4Ov3rIwAAdHIIADd89wpNCA1V5tzzgQc0v1Ew\nUARSfm5MliGdwGWHNMuL8oTEMEbX+odemlnhFbOQVzPPs5G4a5iDLCf7rujqljze\nnC3CCHfBCuSg49E7pyVHznRnXkrJnr+1SX5M5BT0HvZthTasHPO4ZAK8LBoLuO7h\nAb0t9qSjxSv52Q/9IAdXq5pXKCT+kdXuzjvyFVns0x9yOz0Fd7TvLU2QO6Q0hd2o\nq1KIcBfHCKdIk7rMLjo/nRwVtsv+351JI+tdffk99+mnkm5B5V5a86cys7A9fKgp\nbltoE6ioCJiM8Mdp2qLyb60irqF5rHfyLupuDuwRzdWNzExizGkPmJmDyWczuJM=\n=1xPk\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 33a91498a8f339f53ac38361b14207e8fceb9527\nparent eeb7aa735a847842a001d53aca50ec42557ebd8c\nauthor Martin Brennan <mjrbrennan@gmail.com> 1610685119 +1000\ncommitter GitHub <noreply@github.com> 1610685119 +1000\n\nFIX: Stop incorrect emailing of group email from PostAlerter (#11723)\n\nFixes bug introduced by https://github.com/discourse/discourse/commit/bd25627198dd74442cc4014975e7af2d3b142622\r\n\r\nWhat happens is we send notifications to everyone involved in the group inbox topic about new posts, however we pass the param `skip_send_email_to: email_addresses`. In the above commit I removed the group email address from this `email_addresses` array. This breaks the IMAP inbox because we email the group with the reply, and the IMAP sync tool finds this email and opens a new unrelated topic with it."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/6c155dba775441ccef9ac21c770102857978286d",
  "html_url": "https://github.com/discourse/discourse/commit/6c155dba775441ccef9ac21c770102857978286d",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/6c155dba775441ccef9ac21c770102857978286d/comments",
  "author": {
    "login": "martin-brennan",
    "id": 920448,
    "node_id": "MDQ6VXNlcjkyMDQ0OA==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/920448?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/martin-brennan",
    "html_url": "https://github.com/martin-brennan",
    "followers_url": "https://api.github.com/users/martin-brennan/followers",
    "following_url": "https://api.github.com/users/martin-brennan/following{/other_user}",
    "gists_url": "https://api.github.com/users/martin-brennan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/martin-brennan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/martin-brennan/subscriptions",
    "organizations_url": "https://api.github.com/users/martin-brennan/orgs",
    "repos_url": "https://api.github.com/users/martin-brennan/repos",
    "events_url": "https://api.github.com/users/martin-brennan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/martin-brennan/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eeb7aa735a847842a001d53aca50ec42557ebd8c",
      "url": "https://api.github.com/repos/discourse/discourse/commits/eeb7aa735a847842a001d53aca50ec42557ebd8c",
      "html_url": "https://github.com/discourse/discourse/commit/eeb7aa735a847842a001d53aca50ec42557ebd8c"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 19,
    "deletions": 2
  },
  "files": [
    {
      "sha": "8701af812c303c75df3e7cd0084828da0bbf37a7",
      "filename": "app/services/post_alerter.rb",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/discourse/discourse/blob/6c155dba775441ccef9ac21c770102857978286d/app/services/post_alerter.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6c155dba775441ccef9ac21c770102857978286d/app/services/post_alerter.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/services/post_alerter.rb?ref=6c155dba775441ccef9ac21c770102857978286d",
      "patch": "@@ -575,12 +575,20 @@ def notify_pm_users(post, reply_to_user, notified)\n     warn_if_not_sidekiq\n \n     # users who interacted with the post by _directly_ emailing the group\n+    emails_to_skip_send = nil\n     if group = group_notifying_via_smtp(post)\n       email_addresses = post.topic.incoming_email_addresses(group: group)\n \n       if email_addresses.any?\n         Jobs.enqueue(:group_smtp_email, group_id: group.id, post_id: post.id, email: email_addresses)\n       end\n+\n+      # add the group's email back into the array, because it is used for\n+      # skip_send_email_to in the case of user private message notifications\n+      # (we do not want the group to be sent any emails from here because it\n+      # will make another email for IMAP to pick up in the group's mailbox)\n+      emails_to_skip_send = email_addresses.dup\n+      emails_to_skip_send << group.email_username\n     end\n \n     # users that aren't part of any mentioned groups\n@@ -589,7 +597,7 @@ def notify_pm_users(post, reply_to_user, notified)\n     users.each do |user|\n       notification_level = TopicUser.get(post.topic, user)&.notification_level\n       if reply_to_user == user || notification_level == TopicUser.notification_levels[:watching] || user.staged?\n-        create_notification(user, Notification.types[:private_message], post, skip_send_email_to: email_addresses)\n+        create_notification(user, Notification.types[:private_message], post, skip_send_email_to: emails_to_skip_send)\n       end\n     end\n \n@@ -600,7 +608,7 @@ def notify_pm_users(post, reply_to_user, notified)\n       case TopicUser.get(post.topic, user)&.notification_level\n       when TopicUser.notification_levels[:watching]\n         # only create a notification when watching the group\n-        create_notification(user, Notification.types[:private_message], post, skip_send_email_to: email_addresses)\n+        create_notification(user, Notification.types[:private_message], post, skip_send_email_to: emails_to_skip_send)\n       when TopicUser.notification_levels[:tracking]\n         notify_group_summary(user, post)\n       end"
    },
    {
      "sha": "b1aaa58dd10b1a60f7725c12d40f28dd417e44d1",
      "filename": "spec/services/post_alerter_spec.rb",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/6c155dba775441ccef9ac21c770102857978286d/spec/services/post_alerter_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6c155dba775441ccef9ac21c770102857978286d/spec/services/post_alerter_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/services/post_alerter_spec.rb?ref=6c155dba775441ccef9ac21c770102857978286d",
      "patch": "@@ -1269,6 +1269,7 @@ def set_topic_notification_level(user, topic, level_name)\n     end\n \n     it \"sends notifications for new posts in topic\" do\n+      PostAlerter.any_instance.expects(:create_notification).at_least_once\n       post = Fabricate(\n         :post,\n         topic: topic,\n@@ -1281,6 +1282,11 @@ def set_topic_notification_level(user, topic, level_name)\n             cc_addresses: \"bar@discourse.org\"\n           )\n       )\n+      staged_group_user = Fabricate(:staged, email: \"discourse@example.com\")\n+      Fabricate(:topic_user, user: staged_group_user, topic: post.topic)\n+      topic.allowed_users << staged_group_user\n+      topic.save\n+\n       expect { PostAlerter.new.after_save_post(post, true) }.to change { ActionMailer::Base.deliveries.size }.by(0)\n \n       post = Fabricate(:post, topic: topic)\n@@ -1304,6 +1310,9 @@ def set_topic_notification_level(user, topic, level_name)\n       )\n       expect { PostAlerter.new.after_save_post(post, true) }.to change { ActionMailer::Base.deliveries.size }.by(0)\n \n+      # we never want the group to be notified by email about these posts\n+      PostAlerter.any_instance.expects(:create_notification).with(kind_of(User), Notification.types[:private_message], kind_of(Post), skip_send_email_to: [\"foo@discourse.org\", \"bar@discourse.org\", \"baz@discourse.org\", \"discourse@example.com\"]).at_least_once\n+\n       post = Fabricate(:post, topic: topic.reload)\n       expect { PostAlerter.new.after_save_post(post, true) }.to change { ActionMailer::Base.deliveries.size }.by(1)\n       email = ActionMailer::Base.deliveries.last"
    }
  ]
}
