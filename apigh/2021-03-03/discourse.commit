{
  "sha": "c047640ad4547cef87bf2c2a8326e210d0b276dd",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpjMDQ3NjQwYWQ0NTQ3Y2VmODdiZjJjMmE4MzI2ZTIxMGQwYjI3NmRk",
  "commit": {
    "author": {
      "name": "Dan Ungureanu",
      "email": "dan@ungureanu.me",
      "date": "2021-03-03T09:45:29Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-03-03T09:45:29Z"
    },
    "message": "FEATURE: Various improvements to invite system (#12023)\n\nThe user interface has been reorganized to show email and link invites\r\nin the same screen. Staff has more control over creating and updating\r\ninvites. Bulk invite has also been improved with better explanations.\r\n\r\nOn the server side, many code paths for email and link invites have\r\nbeen merged to avoid duplicated logic. The API returns better responses\r\nwith more appropriate HTTP status codes.",
    "tree": {
      "sha": "34c471d4f0de70d5d30450d5e3a86b9717a8e2c3",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/34c471d4f0de70d5d30450d5e3a86b9717a8e2c3"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/c047640ad4547cef87bf2c2a8326e210d0b276dd",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgP1q5CRBK7hj4Ov3rIwAAdHIIAEVch8jGdaeCog6A8sBqpLXq\nFYvdnl2KPREz110wzqYhn6B/9VBbtPEUNr82qB/XxcA9pWh49bxAExqaexAO0Yf/\ngd4MX4Xla5pkjGSgahsw02yPRVygwPjxAutWj3D1xqetBWzcbhOHyzp0ywxStHPv\nlemfdn0l9s4n7ZrajoZlHmYpfKOriic10kDSpUbtW01FUQBGJxOQDH0GarWij9Y+\na4KmQiIu2n6tXYONRvssFAtOiYYd1ZlhJyifMtNgttsjJjFw5Wv1q6wM6Oj1r8m3\nvA1bxuVCwKKlhmlcPb6hc9jGuKuXnlimOa0K5aHNlQwK+H9hHIlVW6Rm4BmAe24=\n=ViWJ\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 34c471d4f0de70d5d30450d5e3a86b9717a8e2c3\nparent 039d0d3641e4c2d7ebc9c2ce17d5353fb5a9dce1\nauthor Dan Ungureanu <dan@ungureanu.me> 1614764729 +0200\ncommitter GitHub <noreply@github.com> 1614764729 +0200\n\nFEATURE: Various improvements to invite system (#12023)\n\nThe user interface has been reorganized to show email and link invites\r\nin the same screen. Staff has more control over creating and updating\r\ninvites. Bulk invite has also been improved with better explanations.\r\n\r\nOn the server side, many code paths for email and link invites have\r\nbeen merged to avoid duplicated logic. The API returns better responses\r\nwith more appropriate HTTP status codes."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/c047640ad4547cef87bf2c2a8326e210d0b276dd",
  "html_url": "https://github.com/discourse/discourse/commit/c047640ad4547cef87bf2c2a8326e210d0b276dd",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/c047640ad4547cef87bf2c2a8326e210d0b276dd/comments",
  "author": {
    "login": "udan11",
    "id": 4147664,
    "node_id": "MDQ6VXNlcjQxNDc2NjQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4147664?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/udan11",
    "html_url": "https://github.com/udan11",
    "followers_url": "https://api.github.com/users/udan11/followers",
    "following_url": "https://api.github.com/users/udan11/following{/other_user}",
    "gists_url": "https://api.github.com/users/udan11/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/udan11/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/udan11/subscriptions",
    "organizations_url": "https://api.github.com/users/udan11/orgs",
    "repos_url": "https://api.github.com/users/udan11/repos",
    "events_url": "https://api.github.com/users/udan11/events{/privacy}",
    "received_events_url": "https://api.github.com/users/udan11/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "039d0d3641e4c2d7ebc9c2ce17d5353fb5a9dce1",
      "url": "https://api.github.com/repos/discourse/discourse/commits/039d0d3641e4c2d7ebc9c2ce17d5353fb5a9dce1",
      "html_url": "https://github.com/discourse/discourse/commit/039d0d3641e4c2d7ebc9c2ce17d5353fb5a9dce1"
    }
  ],
  "stats": {
    "total": 2326,
    "additions": 1265,
    "deletions": 1061
  },
  "files": [
    {
      "sha": "ca1409b1b8f30fcd8fab30f23f6bfd4ee29630f8",
      "filename": "app/assets/javascripts/discourse/app/components/copy-button.js",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/components/copy-button.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/components/copy-button.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/copy-button.js?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -0,0 +1,16 @@\n+import Component from \"@ember/component\";\n+import { action } from \"@ember/object\";\n+\n+export default Component.extend({\n+  tagName: \"\",\n+\n+  @action\n+  copy() {\n+    const target = document.querySelector(this.selector);\n+    target.select();\n+    target.setSelectionRange(0, target.value.length);\n+    try {\n+      document.execCommand(\"copy\");\n+    } catch (err) {}\n+  },\n+});"
    },
    {
      "sha": "79fe2a1c956cec9d5e75335bffae49e59dbcdd5d",
      "filename": "app/assets/javascripts/discourse/app/components/create-invite-uploader.js",
      "status": "added",
      "additions": 111,
      "deletions": 0,
      "changes": 111,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/components/create-invite-uploader.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/components/create-invite-uploader.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/create-invite-uploader.js?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -0,0 +1,111 @@\n+import Component from \"@ember/component\";\n+import getUrl from \"discourse-common/lib/get-url\";\n+import discourseComputed from \"discourse-common/utils/decorators\";\n+import {\n+  displayErrorForUpload,\n+  validateUploadedFiles,\n+} from \"discourse/lib/uploads\";\n+\n+export default Component.extend({\n+  tagName: \"\",\n+\n+  data: null,\n+  uploading: false,\n+  progress: 0,\n+  uploaded: null,\n+\n+  @discourseComputed(\"messageBus.clientId\")\n+  clientId() {\n+    return this.messageBus && this.messageBus.clientId;\n+  },\n+\n+  @discourseComputed(\"data\", \"uploading\")\n+  submitDisabled(data, uploading) {\n+    return !data || uploading;\n+  },\n+\n+  didInsertElement() {\n+    this._super(...arguments);\n+\n+    this.setProperties({\n+      data: null,\n+      uploading: false,\n+      progress: 0,\n+      uploaded: null,\n+    });\n+\n+    const $upload = $(\"#csv-file\");\n+\n+    $upload.fileupload({\n+      url: getUrl(\"/invites/upload_csv.json\") + \"?client_id=\" + this.clientId,\n+      dataType: \"json\",\n+      dropZone: null,\n+      replaceFileInput: false,\n+      autoUpload: false,\n+    });\n+\n+    $upload.on(\"fileuploadadd\", (e, data) => {\n+      this.set(\"data\", data);\n+    });\n+\n+    $upload.on(\"fileuploadsubmit\", (e, data) => {\n+      const isValid = validateUploadedFiles(data.files, {\n+        user: this.currentUser,\n+        siteSettings: this.siteSettings,\n+        bypassNewUserRestriction: true,\n+        csvOnly: true,\n+      });\n+\n+      data.formData = { type: \"csv\" };\n+      this.setProperties({ progress: 0, uploading: isValid });\n+\n+      return isValid;\n+    });\n+\n+    $upload.on(\"fileuploadprogress\", (e, data) => {\n+      const progress = parseInt((data.loaded / data.total) * 100, 10);\n+      this.set(\"progress\", progress);\n+    });\n+\n+    $upload.on(\"fileuploaddone\", (e, data) => {\n+      const upload = data.result;\n+      this.set(\"uploaded\", upload);\n+      this.reset();\n+    });\n+\n+    $upload.on(\"fileuploadfail\", (e, data) => {\n+      if (data.errorThrown !== \"abort\") {\n+        displayErrorForUpload(data, this.siteSettings);\n+      }\n+      this.reset();\n+    });\n+  },\n+\n+  willDestroyElement() {\n+    this._super(...arguments);\n+\n+    if (this.messageBus) {\n+      this.messageBus.unsubscribe(\"/uploads/csv\");\n+    }\n+\n+    const $upload = $(this.element);\n+\n+    try {\n+      $upload.fileupload(\"destroy\");\n+    } catch (e) {\n+      /* wasn't initialized yet */\n+    } finally {\n+      $upload.off();\n+    }\n+  },\n+\n+  reset() {\n+    this.setProperties({\n+      data: null,\n+      uploading: false,\n+      progress: 0,\n+    });\n+\n+    document.getElementById(\"csv-file\").value = \"\";\n+  },\n+});"
    },
    {
      "sha": "9ab2c015b9932c8bc54b164653d760a5444c93a1",
      "filename": "app/assets/javascripts/discourse/app/components/csv-uploader.js",
      "status": "removed",
      "additions": 0,
      "deletions": 49,
      "changes": 49,
      "blob_url": "https://github.com/discourse/discourse/blob/039d0d3641e4c2d7ebc9c2ce17d5353fb5a9dce1/app/assets/javascripts/discourse/app/components/csv-uploader.js",
      "raw_url": "https://github.com/discourse/discourse/raw/039d0d3641e4c2d7ebc9c2ce17d5353fb5a9dce1/app/assets/javascripts/discourse/app/components/csv-uploader.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/csv-uploader.js?ref=039d0d3641e4c2d7ebc9c2ce17d5353fb5a9dce1",
      "patch": "@@ -1,49 +0,0 @@\n-import Component from \"@ember/component\";\n-import I18n from \"I18n\";\n-import UploadMixin from \"discourse/mixins/upload\";\n-import bootbox from \"bootbox\";\n-import discourseComputed from \"discourse-common/utils/decorators\";\n-import { on } from \"@ember/object/evented\";\n-\n-export default Component.extend(UploadMixin, {\n-  type: \"csv\",\n-  tagName: \"span\",\n-  uploadUrl: \"/invites/upload_csv\",\n-  i18nPrefix: \"user.invited.bulk_invite\",\n-\n-  validateUploadedFilesOptions() {\n-    return { csvOnly: true };\n-  },\n-\n-  @discourseComputed(\"uploading\")\n-  uploadButtonText(uploading) {\n-    return uploading ? I18n.t(\"uploading\") : I18n.t(`${this.i18nPrefix}.text`);\n-  },\n-\n-  @discourseComputed(\"uploading\")\n-  uploadButtonDisabled(uploading) {\n-    // https://github.com/emberjs/ember.js/issues/10976#issuecomment-132417731\n-    return uploading ? true : null;\n-  },\n-\n-  uploadDone() {\n-    bootbox.alert(I18n.t(`${this.i18nPrefix}.success`));\n-  },\n-\n-  uploadOptions() {\n-    return { autoUpload: false };\n-  },\n-\n-  _init: on(\"didInsertElement\", function () {\n-    const $upload = $(this.element);\n-\n-    $upload.on(\"fileuploadadd\", (e, data) => {\n-      bootbox.confirm(\n-        I18n.t(`${this.i18nPrefix}.confirmation_message`),\n-        I18n.t(\"cancel\"),\n-        I18n.t(\"go_ahead\"),\n-        (result) => (result ? data.submit() : data.abort())\n-      );\n-    });\n-  }),\n-});"
    },
    {
      "sha": "0ebeb099924c1eacb69208a9e2985c1dfae723a6",
      "filename": "app/assets/javascripts/discourse/app/controllers/create-invite-bulk.js",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/controllers/create-invite-bulk.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/controllers/create-invite-bulk.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/create-invite-bulk.js?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -0,0 +1,24 @@\n+import Controller from \"@ember/controller\";\n+import { action } from \"@ember/object\";\n+import ModalFunctionality from \"discourse/mixins/modal-functionality\";\n+\n+export default Controller.extend(ModalFunctionality, {\n+  data: null,\n+\n+  onShow() {\n+    this.set(\"data\", null);\n+  },\n+\n+  onClose() {\n+    if (this.data) {\n+      this.data.abort();\n+      this.set(\"data\", null);\n+    }\n+  },\n+\n+  @action\n+  submit(data) {\n+    this.set(\"data\", data);\n+    data.submit();\n+  },\n+});"
    },
    {
      "sha": "008e2d76b9cd66dd0668fa77fb79a0f21ce2027d",
      "filename": "app/assets/javascripts/discourse/app/controllers/create-invite.js",
      "status": "added",
      "additions": 144,
      "deletions": 0,
      "changes": 144,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/controllers/create-invite.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/controllers/create-invite.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/create-invite.js?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -0,0 +1,144 @@\n+import Controller from \"@ember/controller\";\n+import { action } from \"@ember/object\";\n+import { equal } from \"@ember/object/computed\";\n+import discourseComputed from \"discourse-common/utils/decorators\";\n+import { extractError } from \"discourse/lib/ajax-error\";\n+import { bufferedProperty } from \"discourse/mixins/buffered-content\";\n+import ModalFunctionality from \"discourse/mixins/modal-functionality\";\n+import Group from \"discourse/models/group\";\n+import Invite from \"discourse/models/invite\";\n+import I18n from \"I18n\";\n+\n+export default Controller.extend(\n+  ModalFunctionality,\n+  bufferedProperty(\"invite\"),\n+  {\n+    allGroups: null,\n+\n+    invite: null,\n+    invites: null,\n+\n+    autogenerated: false,\n+    showAdvanced: false,\n+    showOnly: false,\n+\n+    type: \"link\",\n+\n+    topicId: null,\n+    topicTitle: null,\n+    groupIds: null,\n+\n+    onShow() {\n+      Group.findAll().then((groups) => {\n+        this.set(\"allGroups\", groups.filterBy(\"automatic\", false));\n+      });\n+\n+      this.setProperties({\n+        autogenerated: false,\n+        showAdvanced: false,\n+        showOnly: false,\n+      });\n+\n+      this.setInvite(Invite.create());\n+    },\n+\n+    onClose() {\n+      if (this.autogenerated) {\n+        this.invite\n+          .destroy()\n+          .then(() => this.invites.removeObject(this.invite));\n+      }\n+    },\n+\n+    setInvite(invite) {\n+      this.setProperties({\n+        invite,\n+        type: invite.email ? \"email\" : \"link\",\n+        groupIds: invite.groups ? invite.groups.map((g) => g.id) : null,\n+      });\n+\n+      if (invite.topics && invite.topics.length > 0) {\n+        this.setProperties({\n+          topicId: invite.topics[0].id,\n+          topicTitle: invite.topics[0].title,\n+        });\n+      } else {\n+        this.setProperties({ topicId: null, topicTitle: null });\n+      }\n+    },\n+\n+    save(autogenerated) {\n+      this.set(\"autogenerated\", autogenerated);\n+\n+      const data = {\n+        group_ids: this.groupIds,\n+        topic_id: this.topicId,\n+        expires_at: this.buffered.get(\"expires_at\"),\n+      };\n+\n+      if (this.type === \"link\") {\n+        data.max_redemptions_allowed = this.buffered.get(\n+          \"max_redemptions_allowed\"\n+        );\n+      } else if (this.type === \"email\") {\n+        data.email = this.buffered.get(\"email\");\n+        data.custom_message = this.buffered.get(\"custom_message\");\n+      }\n+\n+      const newRecord = !this.invite.id;\n+      return this.invite\n+        .save(data)\n+        .then(() => {\n+          this.rollbackBuffer();\n+\n+          if (newRecord) {\n+            this.invites.unshiftObject(this.invite);\n+          }\n+\n+          if (!this.autogenerated) {\n+            this.appEvents.trigger(\"modal-body:flash\", {\n+              text: I18n.t(\"user.invited.invite.invite_saved\"),\n+              messageClass: \"success\",\n+            });\n+          }\n+        })\n+        .catch((e) =>\n+          this.appEvents.trigger(\"modal-body:flash\", {\n+            text: extractError(e),\n+            messageClass: \"error\",\n+          })\n+        );\n+    },\n+\n+    isLink: equal(\"type\", \"link\"),\n+    isEmail: equal(\"type\", \"email\"),\n+\n+    @discourseComputed(\"buffered.expires_at\")\n+    expiresAtRelative(expires_at) {\n+      return moment.duration(moment(expires_at) - moment()).humanize();\n+    },\n+\n+    @discourseComputed(\"type\", \"buffered.email\")\n+    disabled(type, email) {\n+      if (type === \"email\") {\n+        return !email;\n+      }\n+\n+      return false;\n+    },\n+\n+    @discourseComputed(\"type\", \"invite.email\", \"buffered.email\")\n+    saveLabel(type, email, bufferedEmail) {\n+      return type === \"email\" && email !== bufferedEmail\n+        ? \"user.invited.invite.send_invite_email\"\n+        : \"user.invited.invite.save_invite\";\n+    },\n+\n+    @action\n+    saveInvite() {\n+      this.appEvents.trigger(\"modal-body:clearFlash\");\n+\n+      this.save();\n+    },\n+  }\n+);"
    },
    {
      "sha": "1d5df0fdb3a42ace3bf523788428501d2c174acb",
      "filename": "app/assets/javascripts/discourse/app/controllers/user-invited-show.js",
      "status": "modified",
      "additions": 93,
      "deletions": 83,
      "changes": 176,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/controllers/user-invited-show.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/controllers/user-invited-show.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/user-invited-show.js?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -1,23 +1,24 @@\n-import discourseComputed, { observes } from \"discourse-common/utils/decorators\";\n-import { equal, reads } from \"@ember/object/computed\";\n import Controller from \"@ember/controller\";\n-import I18n from \"I18n\";\n-import { INPUT_DELAY } from \"discourse-common/config/environment\";\n-import Invite from \"discourse/models/invite\";\n+import { action } from \"@ember/object\";\n+import { equal, reads } from \"@ember/object/computed\";\n import bootbox from \"bootbox\";\n+import { INPUT_DELAY } from \"discourse-common/config/environment\";\n import discourseDebounce from \"discourse-common/lib/debounce\";\n+import discourseComputed, { observes } from \"discourse-common/utils/decorators\";\n import { popupAjaxError } from \"discourse/lib/ajax-error\";\n+import showModal from \"discourse/lib/show-modal\";\n+import Invite from \"discourse/models/invite\";\n+import I18n from \"I18n\";\n \n export default Controller.extend({\n   user: null,\n   model: null,\n   filter: null,\n-  totalInvites: null,\n   invitesCount: null,\n   canLoadMore: true,\n   invitesLoading: false,\n   reinvitedAll: false,\n-  rescindedAll: false,\n+  removedAll: false,\n   searchTerm: null,\n \n   init() {\n@@ -43,32 +44,26 @@ export default Controller.extend({\n   inviteRedeemed: equal(\"filter\", \"redeemed\"),\n   invitePending: equal(\"filter\", \"pending\"),\n \n-  @discourseComputed(\"filter\")\n-  inviteLinks(filter) {\n-    return filter === \"links\" && this.currentUser.staff;\n-  },\n-\n   @discourseComputed(\"filter\")\n   showBulkActionButtons(filter) {\n     return (\n       filter === \"pending\" &&\n-      this.model.invites.length > 4 &&\n+      this.model.invites.length > 1 &&\n       this.currentUser.staff\n     );\n   },\n \n   canInviteToForum: reads(\"currentUser.can_invite_to_forum\"),\n   canBulkInvite: reads(\"currentUser.admin\"),\n-  canSendInviteLink: reads(\"currentUser.staff\"),\n \n-  @discourseComputed(\"totalInvites\", \"inviteLinks\")\n-  showSearch(totalInvites, inviteLinks) {\n-    return totalInvites >= 10 && !inviteLinks;\n+  @discourseComputed(\"invitesCount.total\")\n+  showSearch(invitesCountTotal) {\n+    return invitesCountTotal > 0;\n   },\n \n   @discourseComputed(\"invitesCount.total\", \"invitesCount.pending\")\n   pendingLabel(invitesCountTotal, invitesCountPending) {\n-    if (invitesCountTotal > 50) {\n+    if (invitesCountTotal > 0) {\n       return I18n.t(\"user.invited.pending_tab_with_count\", {\n         count: invitesCountPending,\n       });\n@@ -79,7 +74,7 @@ export default Controller.extend({\n \n   @discourseComputed(\"invitesCount.total\", \"invitesCount.redeemed\")\n   redeemedLabel(invitesCountTotal, invitesCountRedeemed) {\n-    if (invitesCountTotal > 50) {\n+    if (invitesCountTotal > 0) {\n       return I18n.t(\"user.invited.redeemed_tab_with_count\", {\n         count: invitesCountRedeemed,\n       });\n@@ -88,74 +83,89 @@ export default Controller.extend({\n     }\n   },\n \n-  @discourseComputed(\"invitesCount.total\", \"invitesCount.links\")\n-  linksLabel(invitesCountTotal, invitesCountLinks) {\n-    if (invitesCountTotal > 50) {\n-      return I18n.t(\"user.invited.links_tab_with_count\", {\n-        count: invitesCountLinks,\n-      });\n-    } else {\n-      return I18n.t(\"user.invited.links_tab\");\n-    }\n+  @action\n+  createInvite() {\n+    const controller = showModal(\"create-invite\");\n+    controller.set(\"invites\", this.model.invites);\n+    controller.save(true);\n   },\n \n-  actions: {\n-    rescind(invite) {\n-      invite.rescind();\n-      return false;\n-    },\n-\n-    rescindAll() {\n-      bootbox.confirm(I18n.t(\"user.invited.rescind_all_confirm\"), (confirm) => {\n-        if (confirm) {\n-          Invite.rescindAll()\n-            .then(() => {\n-              this.set(\"rescindedAll\", true);\n-            })\n-            .catch(popupAjaxError);\n-        }\n-      });\n-    },\n-\n-    reinvite(invite) {\n-      invite.reinvite();\n-      return false;\n-    },\n-\n-    reinviteAll() {\n-      bootbox.confirm(\n-        I18n.t(\"user.invited.reinvite_all_confirm\"),\n-        (confirm) => {\n-          if (confirm) {\n-            Invite.reinviteAll()\n-              .then(() => this.set(\"reinvitedAll\", true))\n-              .catch(popupAjaxError);\n-          }\n-        }\n-      );\n-    },\n+  @action\n+  createInviteCsv() {\n+    showModal(\"create-invite-bulk\");\n+  },\n \n-    loadMore() {\n-      const model = this.model;\n+  @action\n+  editInvite(invite) {\n+    const controller = showModal(\"create-invite\");\n+    controller.set(\"showAdvanced\", true);\n+    controller.setInvite(invite);\n+  },\n \n-      if (this.canLoadMore && !this.invitesLoading) {\n-        this.set(\"invitesLoading\", true);\n-        Invite.findInvitedBy(\n-          this.user,\n-          this.filter,\n-          this.searchTerm,\n-          model.invites.length\n-        ).then((invite_model) => {\n-          this.set(\"invitesLoading\", false);\n-          model.invites.pushObjects(invite_model.invites);\n-          if (\n-            invite_model.invites.length === 0 ||\n-            invite_model.invites.length < this.siteSettings.invites_per_page\n-          ) {\n-            this.set(\"canLoadMore\", false);\n-          }\n-        });\n+  @action\n+  showInvite(invite) {\n+    const controller = showModal(\"create-invite\");\n+    controller.set(\"showOnly\", true);\n+    controller.setInvite(invite);\n+  },\n+\n+  @action\n+  destroyInvite(invite) {\n+    invite.destroy();\n+    this.model.invites.removeObject(invite);\n+  },\n+\n+  @action\n+  destroyAllExpired() {\n+    bootbox.confirm(I18n.t(\"user.invited.remove_all_confirm\"), (confirm) => {\n+      if (confirm) {\n+        Invite.destroyAllExpired()\n+          .then(() => {\n+            this.set(\"removedAll\", true);\n+          })\n+          .catch(popupAjaxError);\n       }\n-    },\n+    });\n+  },\n+\n+  @action\n+  reinvite(invite) {\n+    invite.reinvite();\n+    return false;\n+  },\n+\n+  @action\n+  reinviteAll() {\n+    bootbox.confirm(I18n.t(\"user.invited.reinvite_all_confirm\"), (confirm) => {\n+      if (confirm) {\n+        Invite.reinviteAll()\n+          .then(() => this.set(\"reinvitedAll\", true))\n+          .catch(popupAjaxError);\n+      }\n+    });\n+  },\n+\n+  @action\n+  loadMore() {\n+    const model = this.model;\n+\n+    if (this.canLoadMore && !this.invitesLoading) {\n+      this.set(\"invitesLoading\", true);\n+      Invite.findInvitedBy(\n+        this.user,\n+        this.filter,\n+        this.searchTerm,\n+        model.invites.length\n+      ).then((invite_model) => {\n+        this.set(\"invitesLoading\", false);\n+        model.invites.pushObjects(invite_model.invites);\n+        if (\n+          invite_model.invites.length === 0 ||\n+          invite_model.invites.length < this.siteSettings.invites_per_page\n+        ) {\n+          this.set(\"canLoadMore\", false);\n+        }\n+      });\n+    }\n   },\n });"
    },
    {
      "sha": "41f4e651ca55d10485295a3e7d70fd23cc5a9b70",
      "filename": "app/assets/javascripts/discourse/app/models/invite.js",
      "status": "modified",
      "additions": 14,
      "deletions": 24,
      "changes": 38,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/models/invite.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/models/invite.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/invite.js?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -7,12 +7,19 @@ import { popupAjaxError } from \"discourse/lib/ajax-error\";\n import { userPath } from \"discourse/lib/url\";\n \n const Invite = EmberObject.extend({\n-  rescind() {\n-    ajax(\"/invites\", {\n+  save(data) {\n+    const promise = this.id\n+      ? ajax(`/invites/${this.id}`, { type: \"PUT\", data })\n+      : ajax(\"/invites\", { type: \"POST\", data });\n+\n+    return promise.then((result) => this.setProperties(result));\n+  },\n+\n+  destroy() {\n+    return ajax(\"/invites\", {\n       type: \"DELETE\",\n       data: { id: this.id },\n-    });\n-    this.set(\"rescinded\", true);\n+    }).then(() => this.set(\"destroyed\", true));\n   },\n \n   reinvite() {\n@@ -48,37 +55,20 @@ Invite.reopenClass({\n     }\n     data.offset = offset || 0;\n \n-    let path;\n-    if (filter === \"links\") {\n-      path = userPath(`${user.username_lower}/invite_links.json`);\n-    } else {\n-      path = userPath(`${user.username_lower}/invited.json`);\n-    }\n-\n-    return ajax(path, {\n+    return ajax(userPath(`${user.username_lower}/invited.json`), {\n       data,\n     }).then((result) => {\n       result.invites = result.invites.map((i) => Invite.create(i));\n       return EmberObject.create(result);\n     });\n   },\n \n-  findInvitedCount(user) {\n-    if (!user) {\n-      Promise.resolve();\n-    }\n-\n-    return ajax(\n-      userPath(`${user.username_lower}/invited_count.json`)\n-    ).then((result) => EmberObject.create(result.counts));\n-  },\n-\n   reinviteAll() {\n     return ajax(\"/invites/reinvite-all\", { type: \"POST\" });\n   },\n \n-  rescindAll() {\n-    return ajax(\"/invites/rescind-all\", { type: \"POST\" });\n+  destroyAllExpired() {\n+    return ajax(\"/invites/destroy-all-expired\", { type: \"POST\" });\n   },\n });\n "
    },
    {
      "sha": "621a680f4fe20c2333100df4d457fcca5f32c3ad",
      "filename": "app/assets/javascripts/discourse/app/models/topic.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/models/topic.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/models/topic.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/topic.js?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -426,9 +426,9 @@ const Topic = RestModel.extend({\n   },\n \n   generateInviteLink(email, group_ids, topic_id) {\n-    return ajax(\"/invites/link\", {\n+    return ajax(\"/invites\", {\n       type: \"POST\",\n-      data: { email, group_ids, topic_id },\n+      data: { email, skip_email: true, group_ids, topic_id },\n     });\n   },\n "
    },
    {
      "sha": "5f7892bee53f5cba90e5c06eb8c743dd9065b0fb",
      "filename": "app/assets/javascripts/discourse/app/models/user.js",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/models/user.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/models/user.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/models/user.js?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -711,9 +711,9 @@ const User = RestModel.extend({\n   },\n \n   generateInviteLink(email, group_ids, topic_id) {\n-    return ajax(\"/invites/link\", {\n+    return ajax(\"/invites\", {\n       type: \"POST\",\n-      data: { email, group_ids, topic_id },\n+      data: { email, skip_email: true, group_ids, topic_id },\n     });\n   },\n \n@@ -722,7 +722,7 @@ const User = RestModel.extend({\n     max_redemptions_allowed,\n     expires_at\n   ) {\n-    return ajax(\"/invites/link\", {\n+    return ajax(\"/invites\", {\n       type: \"POST\",\n       data: { group_ids, max_redemptions_allowed, expires_at },\n     });"
    },
    {
      "sha": "c728db8591290c5cab27556415b9a89bb42a2273",
      "filename": "app/assets/javascripts/discourse/app/routes/user-invited-show.js",
      "status": "modified",
      "additions": 1,
      "deletions": 59,
      "changes": 60,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/routes/user-invited-show.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/routes/user-invited-show.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/routes/user-invited-show.js?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -1,13 +1,8 @@\n import DiscourseRoute from \"discourse/routes/discourse\";\n import Invite from \"discourse/models/invite\";\n-import { getAbsoluteURL } from \"discourse-common/lib/get-url\";\n-import showModal from \"discourse/lib/show-modal\";\n \n export default DiscourseRoute.extend({\n   model(params) {\n-    Invite.findInvitedCount(this.modelFor(\"user\")).then((result) =>\n-      this.set(\"invitesCount\", result)\n-    );\n     this.inviteFilter = params.filter;\n     return Invite.findInvitedBy(this.modelFor(\"user\"), params.filter);\n   },\n@@ -21,63 +16,10 @@ export default DiscourseRoute.extend({\n   setupController(controller, model) {\n     controller.setProperties({\n       model,\n+      invitesCount: model.counts,\n       user: this.controllerFor(\"user\").get(\"model\"),\n       filter: this.inviteFilter,\n       searchTerm: \"\",\n-      totalInvites: model.invites.length,\n-      invitesCount: this.invitesCount,\n     });\n   },\n-\n-  actions: {\n-    showInvite() {\n-      const panels = [\n-        {\n-          id: \"invite\",\n-          title: \"user.invited.single_user\",\n-          model: {\n-            inviteModel: this.currentUser,\n-            userInvitedShow: this.controllerFor(\"user-invited-show\"),\n-          },\n-        },\n-      ];\n-\n-      if (this.get(\"currentUser.staff\")) {\n-        panels.push({\n-          id: \"invite-link\",\n-          title: \"user.invited.multiple_user\",\n-          model: {\n-            inviteModel: this.currentUser,\n-            userInvitedShow: this.controllerFor(\"user-invited-show\"),\n-          },\n-        });\n-        panels.reverse();\n-      }\n-\n-      showModal(\"share-and-invite\", {\n-        modalClass: \"share-and-invite\",\n-        panels,\n-      });\n-    },\n-\n-    editInvite(inviteKey) {\n-      const inviteLink = getAbsoluteURL(`/invites/${inviteKey}`);\n-      this.currentUser.setProperties({ finished: true, inviteLink });\n-      const panels = [\n-        {\n-          id: \"invite-link\",\n-          title: \"user.invited.invite_link.title\",\n-          model: {\n-            inviteModel: this.currentUser,\n-            userInvitedShow: this.controllerFor(\"user-invited-show\"),\n-          },\n-        },\n-      ];\n-\n-      showModal(\"share-and-invite\", {\n-        modalClass: \"share-and-invite\",\n-        panels,\n-      });\n-    },\n-  },\n });"
    },
    {
      "sha": "37971e40fc5b39981418e2e26276d1d7df6e985c",
      "filename": "app/assets/javascripts/discourse/app/templates/components/copy-button.hbs",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/templates/components/copy-button.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/templates/components/copy-button.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/templates/components/copy-button.hbs?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -0,0 +1 @@\n+{{d-button icon=\"copy\" action=(action \"copy\")}}"
    },
    {
      "sha": "acc33b06b85ba5a03875b81a9ef8922b32584923",
      "filename": "app/assets/javascripts/discourse/app/templates/components/create-invite-uploader.hbs",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/templates/components/create-invite-uploader.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/templates/components/create-invite-uploader.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/templates/components/create-invite-uploader.hbs?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -0,0 +1,5 @@\n+{{yield (hash data=data\n+              uploading=uploading\n+              progress=progress\n+              uploaded=uploaded\n+              submitDisabled=submitDisabled)}}"
    },
    {
      "sha": "4d03e30953e00a8198e443d928f0a40abecc5890",
      "filename": "app/assets/javascripts/discourse/app/templates/components/csv-uploader.hbs",
      "status": "removed",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/039d0d3641e4c2d7ebc9c2ce17d5353fb5a9dce1/app/assets/javascripts/discourse/app/templates/components/csv-uploader.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/039d0d3641e4c2d7ebc9c2ce17d5353fb5a9dce1/app/assets/javascripts/discourse/app/templates/components/csv-uploader.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/templates/components/csv-uploader.hbs?ref=039d0d3641e4c2d7ebc9c2ce17d5353fb5a9dce1",
      "patch": "@@ -1,7 +0,0 @@\n-<label class=\"btn\" disabled={{uploadButtonDisabled}}>\n-  {{d-icon \"upload\"}}&nbsp;{{uploadButtonText}}\n-  <input class=\"hidden-upload-field\" disabled={{uploading}} type=\"file\" accept=\".csv\">\n-</label>\n-{{#if uploading}}\n-  <span>{{i18n \"upload_selector.uploading\"}} {{uploadProgress}}%</span>\n-{{/if}}"
    },
    {
      "sha": "3973a3912e5af1dc77ae8349b3dd8fd47cd0ebe3",
      "filename": "app/assets/javascripts/discourse/app/templates/modal/create-invite-bulk.hbs",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/templates/modal/create-invite-bulk.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/templates/modal/create-invite-bulk.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/templates/modal/create-invite-bulk.hbs?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -0,0 +1,28 @@\n+{{#create-invite-uploader as |status|}}\n+  {{#d-modal-body title=\"user.invited.bulk_invite.text\"}}\n+    {{#if status.uploaded}}\n+      {{i18n \"user.invited.bulk_invite.success\"}}\n+    {{else}}\n+      {{html-safe (i18n \"user.invited.bulk_invite.instructions\")}}\n+\n+      <input id=\"csv-file\" disabled={{status.uploading}} type=\"file\" accept=\".csv\">\n+    {{/if}}\n+  {{/d-modal-body}}\n+\n+  <div class=\"modal-footer\">\n+    {{#unless status.uploaded}}\n+      {{d-button\n+        icon=(if isEmail \"envelope\" \"link\")\n+        translatedLabel=(if status.uploading (i18n \"user.invited.bulk_invite.progress\" progress=status.progress)\n+                                             (i18n \"user.invited.bulk_invite.text\"))\n+        class=\"btn-primary\"\n+        action=(action \"submit\" status.data)\n+        disabled=status.submitDisabled\n+      }}\n+    {{/unless}}\n+\n+    {{d-button label=\"close\"\n+              class=\"btn-primary\"\n+              action=(route-action \"closeModal\")}}\n+  </div>\n+{{/create-invite-uploader}}"
    },
    {
      "sha": "1987d4b18534693012b401be82063d136d9334ab",
      "filename": "app/assets/javascripts/discourse/app/templates/modal/create-invite.hbs",
      "status": "added",
      "additions": 118,
      "deletions": 0,
      "changes": 118,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/templates/modal/create-invite.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/templates/modal/create-invite.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/templates/modal/create-invite.hbs?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -0,0 +1,118 @@\n+{{#d-modal-body title=(if showOnly \"user.invited.invite.show_link\" (if inviteId \"user.invited.invite.edit_title\" \"user.invited.invite.new_title\"))}}\n+  <div class=\"input-group\">\n+    <label for=\"invite_link\">{{i18n \"user.invited.invite.instructions\"}}</label>\n+    {{input name=\"invite_link\"\n+            class=\"invite-link\"\n+            value=invite.link\n+            readonly=true}}\n+    {{copy-button selector=\"input.invite-link\"}}\n+  </div>\n+\n+  <p>{{i18n \"user.invited.invite.expires_at_time\" time=expiresAtRelative}}</p>\n+\n+  {{#unless showOnly}}\n+    <p>\n+      {{#if showAdvanced}}\n+        {{d-icon \"caret-down\"}}\n+        <a href {{action (mut showAdvanced) false}}>{{i18n \"user.invited.invite.hide_advanced\"}}</a>\n+      {{else}}\n+        {{d-icon \"caret-right\"}}\n+        <a href {{action (mut showAdvanced) true}}>{{i18n \"user.invited.invite.show_advanced\"}}</a>\n+      {{/if}}\n+    </p>\n+  {{/unless}}\n+\n+  {{#if showAdvanced}}\n+    <div class=\"input-group\">\n+      <div class=\"radio-group\">\n+        {{radio-button id=\"invite-type-link\" name=\"invite-type\" value=\"link\" selection=type}}\n+        <label for=\"invite-type-link\">{{i18n \"user.invited.invite.type_link\"}}</label>\n+      </div>\n+\n+      <div class=\"radio-group\">\n+        {{radio-button id=\"invite-type-email\" name=\"invite-type\" value=\"email\" selection=type}}\n+        <label for=\"invite-type-email\">{{i18n \"user.invited.invite.type_email\"}}</label>\n+      </div>\n+    </div>\n+\n+    {{#if isLink}}\n+      <div class=\"input-group invite-max-redemptions\">\n+        <label for=\"invite-max-redemptions\">{{i18n \"user.invited.invite.max_redemptions_allowed\"}}</label>\n+        {{input\n+          id=\"invite-max-redemptions\"\n+          type=\"number\"\n+          value=buffered.max_redemptions_allowed\n+          min=\"1\"\n+          max=siteSettings.invite_link_max_redemptions_limit\n+        }}\n+      </div>\n+    {{/if}}\n+\n+    {{#if isEmail}}\n+      <div class=\"input-group\">\n+        <label for=\"invite-email\">{{i18n \"user.invited.invite.email\"}}</label>\n+        {{input\n+          id=\"invite-email\"\n+          value=buffered.email\n+          placeholderKey=\"topic.invite_reply.email_placeholder\"\n+        }}\n+      </div>\n+    {{/if}}\n+\n+    {{#if currentUser.staff}}\n+      <div class=\"input-group\">\n+        <label>{{i18n \"user.invited.invite.add_to_groups\"}}</label>\n+        {{group-chooser\n+          content=allGroups\n+          value=groupIds\n+          labelProperty=\"name\"\n+          onChange=(action (mut groupIds))\n+        }}\n+      </div>\n+\n+      <div class=\"input-group\">\n+        {{choose-topic\n+          selectedTopicId=topicId\n+          topicTitle=topicTitle\n+          additionalFilters=\"status:public\"\n+          label=\"user.invited.invite.invite_to_topic\"\n+        }}\n+      </div>\n+\n+      <div class=\"input-group\">\n+        {{future-date-input\n+          displayLabel=(i18n \"user.invited.invite.expires_at\")\n+          includeDateTime=true\n+          includeMidFuture=true\n+          clearable=true\n+          onChangeInput=(action (mut buffered.expires_at))\n+        }}\n+      </div>\n+\n+      {{#if isEmail}}\n+        <div class=\"input-group\">\n+          <label for=\"invite-message\">{{i18n \"user.invited.invite.custom_message\"}}</label>\n+          {{textarea id=\"invite-message\" value=buffered.custom_message}}\n+        </div>\n+      {{/if}}\n+    {{/if}}\n+  {{/if}}\n+{{/d-modal-body}}\n+\n+<div class=\"modal-footer\">\n+  {{#unless showOnly}}\n+    {{d-button\n+      icon=(if isEmail \"envelope\" \"link\")\n+      label=saveLabel\n+      class=\"btn-primary\"\n+      action=(action \"saveInvite\")\n+      disabled=disabled\n+    }}\n+  {{/unless}}\n+\n+  {{d-button\n+    label=\"close\"\n+    class=\"btn-primary\"\n+    action=(route-action \"closeModal\")\n+  }}\n+</div>"
    },
    {
      "sha": "3b3ab896a177a24b2e25f06108b93856d0bc5a48",
      "filename": "app/assets/javascripts/discourse/app/templates/user-invited-show.hbs",
      "status": "modified",
      "additions": 64,
      "deletions": 64,
      "changes": 128,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/templates/user-invited-show.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/app/templates/user-invited-show.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/templates/user-invited-show.hbs?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -2,30 +2,25 @@\n   {{#if canInviteToForum}}\n     {{#load-more class=\"user-content\" selector=\".user-invite-list tr\" action=(action \"loadMore\")}}\n       <section>\n-        <h2>{{i18n \"user.invited.title\"}}</h2>\n-\n         {{#if model.can_see_invite_details}}\n           <div class=\"admin-controls invite-controls\">\n             <nav>\n               <ul class=\"nav nav-pills\">\n                 {{nav-item route=\"userInvited.show\" routeParam=\"pending\" i18nLabel=pendingLabel}}\n                 {{nav-item route=\"userInvited.show\" routeParam=\"redeemed\" i18nLabel=redeemedLabel}}\n-                {{#if canSendInviteLink}}\n-                  {{nav-item route=\"userInvited.show\" routeParam=\"links\" i18nLabel=linksLabel}}\n-                {{/if}}\n               </ul>\n             </nav>\n \n             <div class=\"pull-right\">\n-              {{d-button icon=\"plus\" action=(route-action \"showInvite\") label=\"user.invited.create\"}}\n+              {{d-button icon=\"plus\" action=(action \"createInvite\") label=\"user.invited.create\"}}\n               {{#if canBulkInvite}}\n-                {{csv-uploader uploading=uploading}}\n+                {{d-button icon=\"upload\" action=(action \"createInviteCsv\") label=\"user.invited.bulk_invite.text\"}}\n               {{/if}}\n               {{#if showBulkActionButtons}}\n-                {{#if rescindedAll}}\n-                  {{i18n \"user.invited.rescinded_all\"}}\n+                {{#if removedAll}}\n+                  {{i18n \"user.invited.removed_all\"}}\n                 {{else}}\n-                  {{d-button icon=\"times\" action=(action \"rescindAll\") label=\"user.invited.rescind_all\"}}\n+                  {{d-button icon=\"times\" action=(action \"destroyAllExpired\") label=\"user.invited.remove_all\"}}\n                 {{/if}}\n                 {{#if reinvitedAll}}\n                   {{i18n \"user.invited.reinvited_all\"}}\n@@ -44,10 +39,10 @@\n         {{/if}}\n \n         {{#if model.invites}}\n-          <table class=\"table user-invite-list\">\n-            <tbody>\n-              <tr>\n-                {{#if inviteRedeemed}}\n+          {{#if inviteRedeemed}}\n+            <table class=\"table user-invite-list\">\n+              <thead>\n+                <tr>\n                   <th>{{i18n \"user.invited.user\"}}</th>\n                   <th>{{i18n \"user.invited.redeemed_at\"}}</th>\n                   {{#if model.can_see_invite_details}}\n@@ -56,25 +51,13 @@\n                     <th>{{i18n \"user.invited.posts_read_count\"}}</th>\n                     <th>{{i18n \"user.invited.time_read\"}}</th>\n                     <th>{{i18n \"user.invited.days_visited\"}}</th>\n-                    {{#if canSendInviteLink}}\n-                      <th>{{i18n \"user.invited.source\"}}</th>\n-                    {{/if}}\n+                    <th>{{i18n \"user.invited.invited_via\"}}</th>\n                   {{/if}}\n-                {{else if invitePending}}\n-                  <th colspan=\"1\">{{i18n \"user.invited.user\"}}</th>\n-                  <th colspan=\"6\">{{i18n \"user.invited.sent\"}}</th>\n-                {{else if inviteLinks}}\n-                  <th>{{i18n \"user.invited.link_url\"}}</th>\n-                  <th>{{i18n \"user.invited.link_created_at\"}}</th>\n-                  <th>{{i18n \"user.invited.link_redemption_stats\"}}</th>\n-                  <th colspan=\"2\">{{i18n \"user.invited.link_groups\"}}</th>\n-                  <th>{{i18n \"user.invited.link_expires_at\"}}</th>\n-                  <th></th>\n-                {{/if}}\n-              </tr>\n-              {{#each model.invites as |invite|}}\n-                <tr>\n-                  {{#if inviteRedeemed}}\n+                </tr>\n+              </thead>\n+              <tbody>\n+                {{#each model.invites as |invite|}}\n+                  <tr>\n                     <td>\n                       {{#link-to \"user\" invite.user}}{{avatar invite.user imageSize=\"tiny\"}}{{/link-to}}\n                       {{#link-to \"user\" invite.user}}{{invite.user.username}}{{/link-to}}\n@@ -90,50 +73,67 @@\n                           /\n                         <span title={{i18n \"user.invited.account_age_days\"}}>{{html-safe invite.user.days_since_created}}</span>\n                       </td>\n-                      {{#if canSendInviteLink}}\n-                        <td>{{html-safe invite.invite_source}}</td>\n-                      {{/if}}\n+                      <td>{{html-safe invite.invite_source}}</td>\n                     {{/if}}\n-                  {{else if invitePending}}\n-                    <td>{{invite.email}}</td>\n-                    <td>{{format-date invite.updated_at}}</td>\n+                  </tr>\n+                {{/each}}\n+              </tbody>\n+            </table>\n+          {{else}}\n+            <table class=\"table user-invite-list\">\n+              <thead>\n+                <tr>\n+                  <th>{{i18n \"user.invited.invited_via\"}}</th>\n+                  {{#if currentUser.staff}}\n+                    <th>{{i18n \"user.invited.groups\"}}</th>\n+                  {{/if}}\n+                  <th>{{i18n \"user.invited.sent\"}}</th>\n+                  <th>{{i18n \"user.invited.expires_at\"}}</th>\n+                  <th></th>\n+                </tr>\n+              </thead>\n+              <tbody>\n+                {{#each model.invites as |invite|}}\n+                  <tr>\n                     <td>\n-                      {{#if invite.expired}}\n-                        <div>{{i18n \"user.invited.expired\"}}</div>\n-                      {{/if}}\n-                      {{#if invite.rescinded}}\n-                        {{i18n \"user.invited.rescinded\"}}\n+                      {{#if invite.email}}\n+                        {{invite.email}}\n                       {{else}}\n-                        {{d-button icon=\"times\" action=(action \"rescind\") actionParam=invite label=\"user.invited.rescind\"}}\n+                        {{i18n \"user.invited.invited_via_link\" count=invite.redemption_count max=invite.max_redemptions_allowed}}\n                       {{/if}}\n                     </td>\n+                    {{#if currentUser.staff}}\n+                      <td>\n+                        {{#each invite.groups as |g|}}\n+                          <a href=\"/g/{{g.name}}\">{{g.name}}</a>\n+                        {{else}}\n+                          &mdash;\n+                        {{/each}}\n+                      </td>\n+                    {{/if}}\n+                    <td>{{format-date invite.updated_at}}</td>\n                     <td>\n-                      {{#if invite.reinvited}}\n-                        <div>{{i18n \"user.invited.reinvited\"}}</div>\n+                      {{#if invite.expired}}\n+                        {{i18n \"user.invited.expired\"}}\n                       {{else}}\n-                        {{d-button icon=\"sync\" action=(action \"reinvite\") actionParam=invite label=\"user.invited.reinvite\"}}\n+                        {{raw-date invite.expires_at}}\n                       {{/if}}\n                     </td>\n-                  {{else if inviteLinks}}\n-                    <td>{{d-button icon=\"link\" action=(route-action \"editInvite\" invite.invite_key) label=\"user.invited.copy_link\"}}</td>\n-                    <td>{{format-date invite.created_at}}</td>\n-                    <td>{{number invite.redemption_count}} / {{number invite.max_redemptions_allowed}}</td>\n-                    <td colspan=\"2\">{{ invite.group_names }}</td>\n-                    <td>{{raw-date invite.expires_at leaveAgo=\"true\"}}</td>\n-                    <td>\n-                      {{#if invite.rescinded}}\n-                        {{i18n \"user.invited.rescinded\"}}\n-                      {{else}}\n-                        {{d-button icon=\"times\" action=(action \"rescind\") actionParam=invite label=\"user.invited.rescind\"}}\n+                    <td class=\"actions\">\n+                      {{d-button icon=\"pencil-alt\" action=(action \"editInvite\" invite) title=\"user.invited.edit\"}}\n+                      {{d-button icon=\"trash-alt\" class=\"cancel\" action=(action \"destroyInvite\" invite) title=(if invite.destroyed \"user.invited.removed\" \"user.invited.remove\")}}\n+                      {{d-button icon=\"link\" action=(action \"showInvite\" invite) title=\"user.invited.copy_link\"}}\n+                      {{#if invite.email}}\n+                        {{d-button icon=\"sync\" action=(action \"reinvite\" invite) disabled=invite.reinvited label=(if invite.reinvited \"user.invited.reinvited\" \"user.invited.reinvite\")}}\n                       {{/if}}\n                     </td>\n-                  {{/if}}\n-                </tr>\n-              {{/each}}\n-            </tbody>\n-          </table>\n-          {{conditional-loading-spinner condition=invitesLoading}}\n+                  </tr>\n+                {{/each}}\n+              </tbody>\n+            </table>\n+          {{/if}}\n \n+          {{conditional-loading-spinner condition=invitesLoading}}\n         {{else}}\n           <div class=\"user-invite-none\">\n             {{#if canBulkInvite}}"
    },
    {
      "sha": "04e1178d44164b73effcf6d52987ae8ccbb8396b",
      "filename": "app/assets/javascripts/discourse/tests/helpers/create-pretender.js",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/tests/helpers/create-pretender.js",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/javascripts/discourse/tests/helpers/create-pretender.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/tests/helpers/create-pretender.js?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -188,12 +188,6 @@ export function applyDefaultHandlers(pretender) {\n     });\n   });\n \n-  pretender.get(\"/u/eviltrout/invited_count.json\", () => {\n-    return response({\n-      counts: { pending: 1, redeemed: 0, total: 0 },\n-    });\n-  });\n-\n   pretender.get(\"/u/eviltrout/invited.json\", () => {\n     return response({ invites: [{ id: 1 }] });\n   });"
    },
    {
      "sha": "d7717460ff985aa9ccc5f2001fb109a4a9e11202",
      "filename": "app/assets/stylesheets/common/base/modal.scss",
      "status": "modified",
      "additions": 134,
      "deletions": 0,
      "changes": 134,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/stylesheets/common/base/modal.scss",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/stylesheets/common/base/modal.scss",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/stylesheets/common/base/modal.scss?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -766,3 +766,137 @@\n     text-align: right;\n   }\n }\n+\n+.json-schema-editor-modal {\n+  h3.card-title {\n+    margin-top: 0;\n+    label {\n+      display: none;\n+    }\n+  }\n+\n+  .card .je-object__container {\n+    border-bottom: 1px dashed var(--primary-low);\n+    padding-bottom: 1em;\n+    margin-bottom: 1em;\n+    position: relative;\n+\n+    .card-title label {\n+      display: inline-block;\n+      font-size: $font-down-1;\n+      color: var(--primary-medium);\n+    }\n+    .form-group {\n+      label {\n+        display: inline-block;\n+        width: 33%;\n+      }\n+      .form-control {\n+        width: 66%;\n+      }\n+    }\n+    .btn-group:last-child {\n+      position: absolute;\n+      right: 0px;\n+      top: 0px;\n+      .btn {\n+        font-size: $font-down-2;\n+      }\n+    }\n+  }\n+\n+  .btn-group {\n+    margin-top: 0;\n+  }\n+\n+  .json-editor-btn-delete {\n+    @extend .btn-danger !optional;\n+    @extend .no-text !optional;\n+    .d-icon + span {\n+      display: none;\n+    }\n+  }\n+\n+  .card-body > .btn-group {\n+    // !important needed to override inline style :-(\n+    display: block !important;\n+    text-align: right;\n+  }\n+}\n+\n+.create-invite-modal {\n+  .input-group {\n+    margin-bottom: 1em;\n+\n+    &:last-child {\n+      margin-bottom: 0;\n+    }\n+\n+    input[type=\"text\"] {\n+      width: 100%;\n+\n+      &.invite-link {\n+        width: 85%;\n+      }\n+    }\n+  }\n+\n+  .radio-group {\n+    input[type=\"radio\"] {\n+      display: table-cell;\n+      vertical-align: middle;\n+      margin-top: -1px;\n+    }\n+\n+    label {\n+      display: inline-block;\n+    }\n+  }\n+\n+  .group-chooser,\n+  .future-date-input-selector {\n+    width: 100%;\n+  }\n+\n+  .input-group input[type=\"text\"],\n+  .input-group .btn,\n+  .future-date-input .select-kit-header,\n+  .control-group:nth-child(2) input,\n+  .control-group:nth-child(3) input {\n+    height: 34px;\n+  }\n+\n+  .input-group .btn {\n+    vertical-align: top;\n+  }\n+\n+  .future-date-input {\n+    .date-picker-wrapper {\n+      input {\n+        margin: 0;\n+      }\n+    }\n+\n+    .control-group:nth-child(2),\n+    .control-group:nth-child(3) {\n+      display: inline-block;\n+      margin-bottom: 0;\n+      width: 49%;\n+\n+      input {\n+        margin-bottom: 0;\n+        width: 150px;\n+      }\n+    }\n+  }\n+\n+  .invite-max-redemptions {\n+    label {\n+      display: inline;\n+    }\n+\n+    input {\n+      width: 80px;\n+    }\n+  }\n+}"
    },
    {
      "sha": "5c22640ffebeddb6da4330eee436e01e5f0807b8",
      "filename": "app/assets/stylesheets/desktop/modal.scss",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/stylesheets/desktop/modal.scss",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/stylesheets/desktop/modal.scss",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/stylesheets/desktop/modal.scss?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -107,3 +107,10 @@\n     min-width: 500px;\n   }\n }\n+\n+.create-invite-modal,\n+.create-invite-bulk-modal {\n+  .modal-inner-container {\n+    width: 700px;\n+  }\n+}"
    },
    {
      "sha": "988be6e14baed9a543b34f513960f3edbf146fbe",
      "filename": "app/assets/stylesheets/desktop/user.scss",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/stylesheets/desktop/user.scss",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/assets/stylesheets/desktop/user.scss",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/stylesheets/desktop/user.scss?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -90,6 +90,10 @@\n   tr {\n     td {\n       padding: 0.667em;\n+      &.actions {\n+        white-space: nowrap;\n+        width: 100px;\n+      }\n     }\n   }\n }"
    },
    {
      "sha": "8d2becaaae2cd436cc839518ed0ffee1ef837708",
      "filename": "app/controllers/groups_controller.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/controllers/groups_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/controllers/groups_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/groups_controller.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -374,7 +374,7 @@ def add_members\n       end\n \n       emails.each do |email|\n-        Invite.invite_by_email(email, current_user, nil, [group.id])\n+        Invite.generate(current_user, email: email, group_ids: [group.id])\n       end\n \n       render json: success_json.merge!("
    },
    {
      "sha": "17f39297b701bd66136006d9a9c1bc5aadb6cdb6",
      "filename": "app/controllers/invites_controller.rb",
      "status": "modified",
      "additions": 128,
      "deletions": 116,
      "changes": 244,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/controllers/invites_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/controllers/invites_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/invites_controller.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -2,10 +2,7 @@\n \n class InvitesController < ApplicationController\n \n-  requires_login only: [\n-    :destroy, :create, :create_invite_link, :rescind_all_invites,\n-    :resend_invite, :resend_all_invites, :upload_csv\n-  ]\n+  requires_login only: [:create, :destroy, :destroy_all, :resend_invite, :resend_all_invites, :upload_csv]\n \n   skip_before_action :check_xhr, except: [:perform_accept_invitation]\n   skip_before_action :preload_json, except: [:show]\n@@ -23,84 +20,55 @@ def show\n         invited_by: UserNameSerializer.new(invite.invited_by, scope: guardian, root: false),\n         email: invite.email,\n         username: UserNameSuggester.suggest(invite.email),\n-        is_invite_link: invite.is_invite_link?)\n-      )\n+        is_invite_link: invite.is_invite_link?\n+      ))\n \n       render layout: 'application'\n     else\n-      flash.now[:error] = if invite.present? && invite.expired?\n+      flash.now[:error] = if invite&.expired?\n         I18n.t('invite.expired', base_url: Discourse.base_url)\n-      elsif invite.present? && invite.redeemed?\n+      elsif invite&.redeemed?\n         I18n.t('invite.not_found_template', site_name: SiteSetting.title, base_url: Discourse.base_url)\n       else\n         I18n.t('invite.not_found', base_url: Discourse.base_url)\n       end\n+\n       render layout: 'no_ember'\n     end\n   end\n \n-  def perform_accept_invitation\n-    params.require(:id)\n-    params.permit(:email, :username, :name, :password, :timezone, user_custom_fields: {})\n-    invite = Invite.find_by(invite_key: params[:id])\n-\n-    if invite.present?\n-      begin\n-        user = if invite.is_invite_link?\n-          invite.redeem_invite_link(email: params[:email], username: params[:username], name: params[:name], password: params[:password], user_custom_fields: params[:user_custom_fields], ip_address: request.remote_ip)\n-        else\n-          invite.redeem(username: params[:username], name: params[:name], password: params[:password], user_custom_fields: params[:user_custom_fields], ip_address: request.remote_ip)\n-        end\n-\n-        if user.present?\n-          log_on_user(user) if user.active?\n-          user.update_timezone_if_missing(params[:timezone])\n-          post_process_invite(user)\n-          response = { success: true }\n-        else\n-          response = { success: false, message: I18n.t('invite.not_found_json') }\n-        end\n-\n-        if user.present? && user.active?\n-          topic = invite.topics.first\n-          response[:redirect_to] = topic.present? ? path(\"#{topic.relative_url}\") : path(\"/\")\n-        elsif user.present?\n-          response[:message] = I18n.t('invite.confirm_email')\n-        end\n-\n-        render json: response\n-      rescue ActiveRecord::RecordInvalid, ActiveRecord::RecordNotSaved => e\n-        render json: {\n-          success: false,\n-          errors: e.record&.errors&.to_hash || {},\n-          message: I18n.t('invite.error_message')\n-        }\n-      rescue Invite::UserExists => e\n-        render json: { success: false, message: [e.message] }\n-      end\n-    else\n-      render json: { success: false, message: I18n.t('invite.not_found_json') }\n+  def create\n+    if params[:email].present? && Invite.exists?(email: params[:email])\n+      return render json: failed_json, status: 422\n     end\n-  end\n \n-  def create\n-    params.require(:email)\n+    if params[:topic_id].present?\n+      topic = Topic.find_by(id: params[:topic_id])\n+      raise Discourse::InvalidParameters.new(:topic_id) if topic.blank?\n+      guardian.ensure_can_invite_to!(topic)\n+    end\n \n-    groups = Group.lookup_groups(\n-      group_ids: params[:group_ids],\n-      group_names: params[:group_names]\n-    )\n+    if params[:group_ids].present? || params[:group_names].present?\n+      groups = Group.lookup_groups(group_ids: params[:group_ids], group_names: params[:group_names])\n+    end\n \n     guardian.ensure_can_invite_to_forum!(groups)\n-    group_ids = groups.map(&:id)\n-\n-    if Invite.exists?(email: params[:email])\n-      return render json: failed_json, status: 422\n-    end\n \n     begin\n-      if Invite.invite_by_email(params[:email], current_user, nil, group_ids, params[:custom_message])\n-        render json: success_json\n+      invite = Invite.generate(current_user,\n+        invite_key: params[:invite_key],\n+        email: params[:email],\n+        skip_email: params[:skip_email],\n+        invited_by: current_user,\n+        custom_message: params[:custom_message],\n+        max_redemptions_allowed: params[:max_redemptions_allowed],\n+        topic_id: topic&.id,\n+        group_ids: groups&.map(&:id),\n+        expires_at: params[:expires_at],\n+      )\n+\n+      if invite.present?\n+        render_serialized(invite, InviteSerializer, scope: guardian, root: nil, show_emails: params.has_key?(:email))\n       else\n         render json: failed_json, status: 422\n       end\n@@ -109,73 +77,120 @@ def create\n     end\n   end\n \n-  def create_invite_link\n-    params.permit(:email, :max_redemptions_allowed, :expires_at, :group_ids, :group_names, :topic_id)\n+  def update\n+    invite = Invite.find_by(invited_by: current_user, id: params[:id])\n+    raise Discourse::InvalidParameters.new(:id) if invite.blank?\n \n-    is_single_invite = params[:email].present?\n-    unless is_single_invite\n-      guardian.ensure_can_send_invite_links!(current_user)\n+    if params[:topic_id].present?\n+      topic = Topic.find_by(id: params[:topic_id])\n+      raise Discourse::InvalidParameters.new(:topic_id) if topic.blank?\n+      guardian.ensure_can_invite_to!(topic)\n     end\n \n-    groups = Group.lookup_groups(\n-      group_ids: params[:group_ids],\n-      group_names: params[:group_names]\n-    )\n-    if !guardian.can_invite_to_forum?(groups)\n-      raise StandardError.new I18n.t(\"invite.cant_invite_to_group\")\n+    if params[:group_ids].present? || params[:group_names].present?\n+      groups = Group.lookup_groups(group_ids: params[:group_ids], group_names: params[:group_names])\n     end\n-    group_ids = groups.map(&:id)\n \n-    if is_single_invite\n-      invite_exists = Invite.exists?(email: params[:email], invited_by_id: current_user.id)\n-      if invite_exists && !guardian.can_send_multiple_invites?(current_user)\n-        return render json: failed_json, status: 422\n+    guardian.ensure_can_invite_to_forum!(groups)\n+\n+    Invite.transaction do\n+      if params.has_key?(:topic_id)\n+        invite.topic_invites.destroy_all\n+        invite.topic_invites.create!(topic_id: topic.id) if topic.present?\n       end\n \n-      if params[:topic_id].present?\n-        topic = Topic.find_by(id: params[:topic_id])\n+      if params.has_key?(:group_ids) || params.has_key?(:group_names)\n+        invite.invited_groups.destroy_all\n+        groups.each { |group| invite.invited_groups.find_or_create_by!(group_id: group.id) } if groups.present?\n+      end\n \n-        if topic.present?\n-          guardian.ensure_can_invite_to!(topic)\n-        else\n-          raise Discourse::InvalidParameters.new(:topic_id)\n+      if params.has_key?(:email)\n+        old_email = invite.email.presence\n+        new_email = params[:email].presence\n+\n+        if old_email != new_email\n+          invite.emailed_status = Invite.emailed_status_types[new_email ? :pending : :not_required]\n         end\n+\n+        invite.email = new_email\n       end\n-    end\n \n-    invite_link = if is_single_invite\n-      Invite.generate_single_use_invite_link(params[:email], current_user, topic, group_ids)\n-    else\n-      Invite.generate_multiple_use_invite_link(\n-        invited_by: current_user,\n-        max_redemptions_allowed: params[:max_redemptions_allowed],\n-        expires_at: params[:expires_at],\n-        group_ids: group_ids\n-      )\n+      invite.update!(params.permit(:custom_message, :max_redemptions_allowed, :expires_at))\n     end\n-    if invite_link.present?\n-      render_json_dump(invite_link)\n-    else\n-      render json: failed_json, status: 422\n+\n+    if invite.emailed_status == Invite.emailed_status_types[:pending]\n+      invite.update_column(:emailed_status, Invite.emailed_status_types[:sending])\n+      Jobs.enqueue(:invite_email, invite_id: invite.id)\n     end\n-  rescue => e\n-    render json: { errors: [e.message] }, status: 422\n+\n+    render_serialized(invite, InviteSerializer, scope: guardian, root: nil, show_emails: params.has_key?(:email))\n   end\n \n   def destroy\n     params.require(:id)\n \n     invite = Invite.find_by(invited_by_id: current_user.id, id: params[:id])\n     raise Discourse::InvalidParameters.new(:id) if invite.blank?\n+\n     invite.trash!(current_user)\n \n     render json: success_json\n   end\n \n-  def rescind_all_invites\n-    guardian.ensure_can_rescind_all_invites!(current_user)\n+  def perform_accept_invitation\n+    params.require(:id)\n+    params.permit(:email, :username, :name, :password, :timezone, user_custom_fields: {})\n+\n+    invite = Invite.find_by(invite_key: params[:id])\n+\n+    if invite.present?\n+      begin\n+        user = invite.redeem(\n+          email: invite.is_invite_link? ? params[:email] : invite.email,\n+          username: params[:username],\n+          name: params[:name],\n+          password: params[:password],\n+          user_custom_fields: params[:user_custom_fields],\n+          ip_address: request.remote_ip\n+        )\n+      rescue ActiveRecord::RecordInvalid, ActiveRecord::RecordNotSaved => e\n+        return render json: failed_json.merge(errors: e.record&.errors&.to_hash, message: I18n.t('invite.error_message')), status: 412\n+      rescue Invite::UserExists => e\n+        return render json: failed_json.merge(message: e.message), status: 412\n+      end\n+\n+      if user.blank?\n+        return render json: failed_json.merge(message: I18n.t('invite.not_found_json')), status: 404\n+      end\n+\n+      log_on_user(user) if user.active?\n+      user.update_timezone_if_missing(params[:timezone])\n+      post_process_invite(user)\n+\n+      topic = invite.topics.first\n+      response = {}\n+\n+      if user.present? && user.active?\n+        response[:redirect_to] = topic.present? ? path(topic.relative_url) : path(\"/\")\n+      elsif user.present?\n+        response[:message] = I18n.t('invite.confirm_email')\n+        cookies[:destination_url] = path(topic.relative_url) if topic.present?\n+      end\n+\n+      render json: success_json.merge(response)\n+    else\n+      render json: failed_json.merge(message: I18n.t('invite.not_found_json')), status: 404\n+    end\n+  end\n+\n+  def destroy_all_expired\n+    guardian.ensure_can_destroy_all_invites!(current_user)\n+\n+    Invite\n+      .where(invited_by: current_user)\n+      .where('expires_at < ?', Time.zone.now)\n+      .find_each { |invite| invite.trash!(current_user) }\n \n-    Invite.rescind_all_expired_invites_from(current_user)\n     render json: success_json\n   end\n \n@@ -195,7 +210,14 @@ def resend_invite\n   def resend_all_invites\n     guardian.ensure_can_resend_all_invites!(current_user)\n \n-    Invite.resend_all_invites_from(current_user.id)\n+    Invite\n+      .left_outer_joins(:invited_users)\n+      .where(invited_by: current_user)\n+      .where('invites.email IS NOT NULL')\n+      .where('invited_users.user_id IS NULL')\n+      .group('invites.id')\n+      .find_each { |invite| invite.resend_invite }\n+\n     render json: success_json\n   end\n \n@@ -233,15 +255,7 @@ def upload_csv\n     end\n   end\n \n-  def fetch_username\n-    params.require(:username)\n-    params[:username]\n-  end\n-\n-  def fetch_email\n-    params.require(:email)\n-    params[:email]\n-  end\n+  private\n \n   def ensure_new_registrations_allowed\n     unless SiteSetting.allow_new_registrations\n@@ -259,8 +273,6 @@ def ensure_not_logged_in\n     end\n   end\n \n-  private\n-\n   def post_process_invite(user)\n     user.enqueue_welcome_message('welcome_invite') if user.send_welcome_message\n "
    },
    {
      "sha": "cf2ddc4bf731d1c3773603c9c144846708252718",
      "filename": "app/controllers/users_controller.rb",
      "status": "modified",
      "additions": 30,
      "deletions": 61,
      "changes": 91,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/controllers/users_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/controllers/users_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/users_controller.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -11,7 +11,7 @@ class UsersController < ApplicationController\n     :update_second_factor, :create_second_factor_backup, :select_avatar,\n     :notification_level, :revoke_auth_token, :register_second_factor_security_key,\n     :create_second_factor_security_key, :feature_topic, :clear_featured_topic,\n-    :bookmarks, :invited, :invite_links, :check_sso_email, :check_sso_payload\n+    :bookmarks, :invited, :check_sso_email, :check_sso_payload\n   ]\n \n   skip_before_action :check_xhr, only: [\n@@ -402,85 +402,54 @@ def summary\n \n   def invited\n     if guardian.can_invite_to_forum?\n-      offset = params[:offset].to_i || 0\n-      filter_by = params[:filter] || \"redeemed\"\n+      filter = params[:filter] || \"redeemed\"\n       inviter = fetch_user_from_params(include_inactive: current_user.staff? || SiteSetting.show_inactive_accounts)\n \n-      invites = if guardian.can_see_invite_details?(inviter) && filter_by == \"pending\"\n-        Invite.find_pending_invites_from(inviter, offset)\n-      elsif filter_by == \"redeemed\"\n-        Invite.find_redeemed_invites_from(inviter, offset)\n+      invites = if filter == \"pending\" && guardian.can_see_invite_details?(inviter)\n+        Invite.includes(:topics, :groups).pending(inviter)\n+      elsif filter == \"redeemed\"\n+        Invite.redeemed_users(inviter)\n       else\n-        []\n+        Invite.none\n       end\n \n+      invites = invites.offset(params[:offset].to_i || 0).limit(SiteSetting.invites_per_page)\n+\n       show_emails = guardian.can_see_invite_emails?(inviter)\n       if params[:search].present? && invites.present?\n         filter_sql = '(LOWER(users.username) LIKE :filter)'\n         filter_sql = '(LOWER(invites.email) LIKE :filter) or (LOWER(users.username) LIKE :filter)' if show_emails\n         invites = invites.where(filter_sql, filter: \"%#{params[:search].downcase}%\")\n       end\n \n+      pending_count = Invite.pending(inviter).reorder(nil).count.to_i\n+      redeemed_count = Invite.redeemed_users(inviter).reorder(nil).count.to_i\n+\n       render json: MultiJson.dump(InvitedSerializer.new(\n-        OpenStruct.new(invite_list: invites.to_a, show_emails: show_emails, inviter: inviter, type: filter_by),\n+        OpenStruct.new(\n+          invite_list: invites.to_a,\n+          show_emails: show_emails,\n+          inviter: inviter,\n+          type: filter,\n+          counts: {\n+            pending: pending_count,\n+            redeemed: redeemed_count,\n+            total: pending_count + redeemed_count\n+          }\n+        ),\n         scope: guardian,\n         root: false\n       ))\n-    else\n-      if current_user&.staff?\n-        message = if SiteSetting.enable_discourse_connect\n-          I18n.t(\"invite.disabled_errors.discourse_connect_enabled\")\n-        elsif !SiteSetting.enable_local_logins\n-          I18n.t(\"invite.disabled_errors.local_logins_disabled\")\n-        end\n-\n-        render_invite_error(message)\n-      else\n-        render_json_error(I18n.t(\"invite.disabled_errors.invalid_access\"))\n-      end\n-    end\n-  end\n-\n-  def invite_links\n-    if guardian.can_invite_to_forum?\n-      inviter = fetch_user_from_params(include_inactive: current_user.try(:staff?) || (current_user && SiteSetting.show_inactive_accounts))\n-      guardian.ensure_can_see_invite_details!(inviter)\n-\n-      offset = params[:offset].to_i || 0\n-      invites = Invite.find_links_invites_from(inviter, offset)\n-\n-      render json: MultiJson.dump(invites: serialize_data(invites.to_a, InviteLinkSerializer), can_see_invite_details:  guardian.can_see_invite_details?(inviter))\n-    else\n-      if current_user&.staff?\n-        message = if SiteSetting.enable_discourse_connect\n-          I18n.t(\"invite.disabled_errors.discourse_connect_enabled\")\n-        elsif !SiteSetting.enable_local_logins\n-          I18n.t(\"invite.disabled_errors.local_logins_disabled\")\n-        end\n-\n-        render_invite_error(message)\n-      else\n-        render_json_error(I18n.t(\"invite.disabled_errors.invalid_access\"))\n+    elsif current_user&.staff?\n+      message = if SiteSetting.enable_discourse_connect\n+        I18n.t(\"invite.disabled_errors.discourse_connect_enabled\")\n+      elsif !SiteSetting.enable_local_logins\n+        I18n.t(\"invite.disabled_errors.local_logins_disabled\")\n       end\n-    end\n-  end\n-\n-  def invited_count\n-    if guardian.can_invite_to_forum?\n-      inviter = fetch_user_from_params(include_inactive: current_user.try(:staff?) || (current_user && SiteSetting.show_inactive_accounts))\n \n-      pending_count = Invite.find_pending_invites_count(inviter)\n-      redeemed_count = Invite.find_redeemed_invites_count(inviter)\n-      links_count = Invite.find_links_invites_count(inviter)\n-\n-      render json: { counts: { pending: pending_count, redeemed: redeemed_count, links: links_count,\n-                               total: (pending_count.to_i + redeemed_count.to_i) } }\n+      render_invite_error(message)\n     else\n-      if current_user&.staff?\n-        render json: { counts: 0 }\n-      else\n-        render_json_error(I18n.t(\"invite.disabled_errors.invalid_access\"))\n-      end\n+      render_json_error(I18n.t(\"invite.disabled_errors.invalid_access\"))\n     end\n   end\n "
    },
    {
      "sha": "2965abc4067d4425a2b11393d84651a138281a5e",
      "filename": "app/jobs/regular/bulk_invite.rb",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/jobs/regular/bulk_invite.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/jobs/regular/bulk_invite.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/bulk_invite.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -107,13 +107,14 @@ def send_invite(invite)\n           end\n         else\n           if @total_invites > Invite::BULK_INVITE_EMAIL_LIMIT\n-            invite = Invite.create_invite_by_email(email, @current_user,\n+            invite = Invite.generate(@current_user,\n+              email: email,\n               topic: topic,\n               group_ids: groups.map(&:id),\n               emailed_status: Invite.emailed_status_types[:bulk_pending]\n             )\n           else\n-            Invite.invite_by_email(email, @current_user, topic, groups.map(&:id))\n+            Invite.generate(@current_user, email: email, topic: topic, group_ids: groups.map(&:id))\n           end\n         end\n       rescue => e"
    },
    {
      "sha": "f33eeb667be2d8fbd19b6cc812ed7b8a9b077e32",
      "filename": "app/models/invite.rb",
      "status": "modified",
      "additions": 66,
      "deletions": 197,
      "changes": 263,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/models/invite.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/models/invite.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/invite.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -2,6 +2,7 @@\n \n class Invite < ActiveRecord::Base\n   class UserExists < StandardError; end\n+\n   include RateLimiter::OnCreateRecord\n   include Trashable\n \n@@ -25,8 +26,12 @@ class UserExists < StandardError; end\n   has_many :groups, through: :invited_groups\n   has_many :topic_invites\n   has_many :topics, through: :topic_invites, source: :topic\n+\n   validates_presence_of :invited_by_id\n   validates :email, email: true, allow_blank: true\n+  validate :ensure_max_redemptions_allowed\n+  validate :user_doesnt_already_exist\n+  validate :ensure_no_invalid_email_invites\n \n   before_create do\n     self.invite_key ||= SecureRandom.hex\n@@ -37,14 +42,8 @@ class UserExists < StandardError; end\n     self.email = Email.downcase(email) unless email.nil?\n   end\n \n-  validate :ensure_max_redemptions_allowed\n-  validate :user_doesnt_already_exist\n-  validate :ensure_no_invalid_email_invites\n   attr_accessor :email_already_exists\n \n-  scope :single_use_invites, -> { where('invites.max_redemptions_allowed = 1') }\n-  scope :multiple_use_invites, -> { where('invites.max_redemptions_allowed > 1') }\n-\n   def self.emailed_status_types\n     @emailed_status_types ||= Enum.new(not_required: 0, pending: 1, bulk_pending: 2, sending: 3, sent: 4)\n   end\n@@ -76,228 +75,127 @@ def expired?\n     expires_at < Time.zone.now\n   end\n \n-  # link_valid? indicates whether the invite link can be used to log in to the site\n-  def link_valid?\n-    invalidated_at.nil?\n-  end\n-\n-  def redeem(username: nil, name: nil, password: nil, user_custom_fields: nil, ip_address: nil)\n-    if !expired? && !destroyed? && link_valid?\n-      InviteRedeemer.new(invite: self, email: self.email, username: username, name: name, password: password, user_custom_fields: user_custom_fields, ip_address: ip_address).redeem\n-    end\n-  end\n-\n-  def self.invite_by_email(email, invited_by, topic = nil, group_ids = nil, custom_message = nil)\n-    create_invite_by_email(email, invited_by,\n-      topic: topic,\n-      group_ids: group_ids,\n-      custom_message: custom_message,\n-      emailed_status: emailed_status_types[:pending]\n-    )\n+  def link\n+    \"#{Discourse.base_url}/invites/#{invite_key}\"\n   end\n \n-  def self.generate_single_use_invite_link(email, invited_by, topic = nil, group_ids = nil)\n-    invite = create_invite_by_email(email, invited_by,\n-      topic: topic,\n-      group_ids: group_ids,\n-      emailed_status: emailed_status_types[:not_required]\n-    )\n-\n-    \"#{Discourse.base_url}/invites/#{invite.invite_key}\" if invite\n+  def link_valid?\n+    invalidated_at.nil?\n   end\n \n-  # Create an invite for a user, supplying an optional topic\n-  #\n-  # Return the previously existing invite if already exists. Returns nil if the invite can't be created.\n-  def self.create_invite_by_email(email, invited_by, opts = nil)\n+  def self.generate(invited_by, opts = nil)\n     opts ||= {}\n \n-    topic = opts[:topic]\n-    group_ids = opts[:group_ids]\n-    custom_message = opts[:custom_message]\n-    emailed_status = opts[:emailed_status] || emailed_status_types[:pending]\n-    lower_email = Email.downcase(email)\n+    email = Email.downcase(opts[:email]) if opts[:email].present?\n \n-    if user = find_user_by_email(lower_email)\n-      raise UserExists.new(I18n.t(\"invite.user_exists\",\n-        email: lower_email,\n+    if user = find_user_by_email(email)\n+      raise UserExists.new(I18n.t(\n+        \"invite.user_exists\",\n+        email: email,\n         username: user.username,\n         base_path: Discourse.base_path\n       ))\n     end\n \n-    invite = Invite.with_deleted\n-      .where(email: lower_email, invited_by_id: invited_by.id)\n-      .order('created_at DESC')\n-      .first\n+    if email.present?\n+      invite = Invite\n+        .with_deleted\n+        .where(email: email, invited_by_id: invited_by.id)\n+        .order('created_at DESC')\n+        .first\n \n-    if invite && (invite.expired? || invite.deleted_at)\n-      invite.destroy\n-      invite = nil\n+      if invite && (invite.expired? || invite.deleted_at)\n+        invite.destroy\n+        invite = nil\n+      end\n     end\n \n-    if invite\n-      if invite.emailed_status == Invite.emailed_status_types[:not_required]\n-        emailed_status = invite.emailed_status\n-      end\n+    emailed_status = if opts[:skip_email] || invite&.emailed_status == emailed_status_types[:not_required]\n+      emailed_status_types[:not_required]\n+    elsif opts[:emailed_status].present?\n+      opts[:emailed_status]\n+    elsif email.present?\n+      emailed_status_types[:pending]\n+    else\n+      emailed_status_types[:not_required]\n+    end\n \n+    if invite\n       invite.update_columns(\n         created_at: Time.zone.now,\n         updated_at: Time.zone.now,\n-        expires_at: SiteSetting.invite_expiry_days.days.from_now,\n+        expires_at: opts[:expires_at] || SiteSetting.invite_expiry_days.days.from_now,\n         emailed_status: emailed_status\n       )\n     else\n-      create_args = {\n-        invited_by: invited_by,\n-        email: lower_email,\n-        emailed_status: emailed_status\n-      }\n+      create_args = opts.slice(:invite_key, :email, :moderator, :custom_message, :max_redemptions_allowed)\n+      create_args[:invited_by] = invited_by\n+      create_args[:email] = email\n+      create_args[:emailed_status] = emailed_status\n+      create_args[:expires_at] = opts[:expires_at] || SiteSetting.invite_expiry_days.days.from_now\n \n-      create_args[:moderator] = true if opts[:moderator]\n-      create_args[:custom_message] = custom_message if custom_message\n       invite = Invite.create!(create_args)\n     end\n \n-    if topic && !invite.topic_invites.pluck(:topic_id).include?(topic.id)\n-      invite.topic_invites.create!(invite_id: invite.id, topic_id: topic.id)\n-      # to correct association\n-      topic.reload\n+    topic_id = opts[:topic]&.id || opts[:topic_id]\n+    if topic_id.present?\n+      invite.topic_invites.find_or_create_by!(topic_id: topic_id)\n     end\n \n+    group_ids = opts[:group_ids]\n     if group_ids.present?\n-      group_ids = group_ids - invite.invited_groups.pluck(:group_id)\n-\n       group_ids.each do |group_id|\n-        invite.invited_groups.create!(group_id: group_id)\n+        invite.invited_groups.find_or_create_by!(group_id: group_id)\n       end\n     end\n \n     if emailed_status == emailed_status_types[:pending]\n-      invite.update_column(:emailed_status, Invite.emailed_status_types[:sending])\n+      invite.update_column(:emailed_status, emailed_status_types[:sending])\n       Jobs.enqueue(:invite_email, invite_id: invite.id)\n     end\n \n     invite.reload\n-    invite\n   end\n \n-  def self.generate_multiple_use_invite_link(invited_by:, max_redemptions_allowed: 5, expires_at: 1.month.from_now, group_ids: nil)\n-    Invite.transaction do\n-      create_args = {\n-        invited_by: invited_by,\n-        max_redemptions_allowed: max_redemptions_allowed.to_i,\n-        expires_at: expires_at,\n-        emailed_status: emailed_status_types[:not_required]\n-      }\n-      invite = Invite.create!(create_args)\n-\n-      if group_ids.present?\n-        now = Time.zone.now\n-        invited_groups = group_ids.map { |group_id| { group_id: group_id, invite_id: invite.id, created_at: now, updated_at: now } }\n-        InvitedGroup.insert_all(invited_groups)\n-      end\n-\n-      \"#{Discourse.base_url}/invites/#{invite.invite_key}\"\n+  def redeem(email: nil, username: nil, name: nil, password: nil, user_custom_fields: nil, ip_address: nil)\n+    if !expired? && !destroyed? && link_valid?\n+      raise UserExists.new I18n.t(\"invite_link.email_taken\") if is_invite_link? && UserEmail.exists?(email: email)\n+      email = self.email if email.blank? && !is_invite_link?\n+      InviteRedeemer.new(invite: self, email: email, username: username, name: name, password: password, user_custom_fields: user_custom_fields, ip_address: ip_address).redeem\n     end\n   end\n \n-  # redeem multiple use invite link\n-  def redeem_invite_link(email: nil, username: nil, name: nil, password: nil, user_custom_fields: nil, ip_address: nil)\n-    DistributedMutex.synchronize(\"redeem_invite_link_#{self.id}\") do\n-      reload\n-      if is_invite_link? && !expired? && !redeemed? && !destroyed? && link_valid?\n-        raise UserExists.new I18n.t(\"invite_link.email_taken\") if UserEmail.exists?(email: email)\n-        InviteRedeemer.new(invite: self, email: email, username: username, name: name, password: password, user_custom_fields: user_custom_fields, ip_address: ip_address).redeem\n-      end\n-    end\n+  def self.redeem_from_email(email)\n+    invite = Invite.find_by(email: Email.downcase(email))\n+    InviteRedeemer.new(invite: invite, email: invite.email).redeem if invite\n+    invite\n   end\n \n   def self.find_user_by_email(email)\n     User.with_email(Email.downcase(email)).where(staged: false).first\n   end\n \n-  def self.get_group_ids(group_names)\n-    group_ids = []\n-    if group_names\n-      group_names = group_names.split(',')\n-      group_names.each { |group_name|\n-        group_detail = Group.find_by_name(group_name)\n-        group_ids.push(group_detail.id) if group_detail\n-      }\n-    end\n-    group_ids\n-  end\n-\n-  def self.find_all_pending_invites_from(inviter, offset = 0, limit = SiteSetting.invites_per_page)\n-    Invite.single_use_invites\n+  def self.pending(inviter)\n+    Invite.distinct\n       .joins(\"LEFT JOIN invited_users ON invites.id = invited_users.invite_id\")\n       .joins(\"LEFT JOIN users ON invited_users.user_id = users.id\")\n-      .where('invited_users.user_id IS NULL')\n       .where(invited_by_id: inviter.id)\n-      .where('invites.email IS NOT NULL')\n+      .where('redemption_count < max_redemptions_allowed')\n       .order('invites.updated_at DESC')\n-      .limit(limit)\n-      .offset(offset)\n   end\n \n-  def self.find_pending_invites_from(inviter, offset = 0)\n-    find_all_pending_invites_from(inviter, offset)\n-  end\n-\n-  def self.find_pending_invites_count(inviter)\n-    find_all_pending_invites_from(inviter, 0, nil).reorder(nil).count\n-  end\n-\n-  def self.find_all_redeemed_invites_from(inviter, offset = 0, limit = SiteSetting.invites_per_page)\n-    InvitedUser.includes(:invite)\n+  def self.redeemed_users(inviter)\n+    InvitedUser\n+      .includes(:invite)\n       .includes(user: :user_stat)\n       .where('invited_users.user_id IS NOT NULL')\n       .where('invites.invited_by_id = ?', inviter.id)\n       .order('user_stats.time_read DESC, invited_users.redeemed_at DESC')\n-      .limit(limit)\n-      .offset(offset)\n       .references('invite')\n       .references('user')\n       .references('user_stat')\n   end\n \n-  def self.find_redeemed_invites_from(inviter, offset = 0)\n-    find_all_redeemed_invites_from(inviter, offset)\n-  end\n-\n-  def self.find_redeemed_invites_count(inviter)\n-    find_all_redeemed_invites_from(inviter, 0, nil).reorder(nil).count\n-  end\n-\n-  def self.find_all_links_invites_from(inviter, offset = 0, limit = SiteSetting.invites_per_page)\n-    Invite.multiple_use_invites\n-      .includes(invited_groups: :group)\n-      .where(invited_by_id: inviter.id)\n-      .order('invites.updated_at DESC')\n-      .limit(limit)\n-      .offset(offset)\n-  end\n-\n-  def self.find_links_invites_from(inviter, offset = 0)\n-    find_all_links_invites_from(inviter, offset)\n-  end\n-\n-  def self.find_links_invites_count(inviter)\n-    find_all_links_invites_from(inviter, 0, nil).reorder(nil).count\n-  end\n-\n-  def self.filter_by(email_or_username)\n-    if email_or_username\n-      where(\n-        '(LOWER(invites.email) LIKE :filter) or (LOWER(users.username) LIKE :filter)',\n-        filter: \"%#{email_or_username.downcase}%\"\n-      )\n-    else\n-      all\n-    end\n-  end\n-\n   def self.invalidate_for_email(email)\n     i = Invite.find_by(email: Email.downcase(email))\n     if i\n@@ -307,38 +205,11 @@ def self.invalidate_for_email(email)\n     i\n   end\n \n-  def self.redeem_from_email(email)\n-    invite = Invite.single_use_invites.find_by(email: Email.downcase(email))\n-    InviteRedeemer.new(invite: invite, email: invite.email).redeem if invite\n-    invite\n-  end\n-\n   def resend_invite\n     self.update_columns(updated_at: Time.zone.now, invalidated_at: nil, expires_at: SiteSetting.invite_expiry_days.days.from_now)\n     Jobs.enqueue(:invite_email, invite_id: self.id)\n   end\n \n-  def self.resend_all_invites_from(user_id)\n-    Invite.single_use_invites\n-      .left_outer_joins(:invited_users)\n-      .where('invited_users.user_id IS NULL AND invites.email IS NOT NULL AND invited_by_id = ?', user_id)\n-      .group('invites.id')\n-      .find_each do |invite|\n-      invite.resend_invite\n-    end\n-  end\n-\n-  def self.rescind_all_expired_invites_from(user)\n-    Invite.single_use_invites\n-      .includes(:invited_users)\n-      .where('invited_users.user_id IS NULL AND invites.email IS NOT NULL AND invited_by_id = ? AND invites.expires_at < ?',\n-                user.id, Time.zone.now)\n-      .references('invited_users')\n-      .find_each do |invite|\n-      invite.trash!(user)\n-    end\n-  end\n-\n   def limit_invites_per_day\n     RateLimiter.new(invited_by, \"invites-per-day\", SiteSetting.max_invites_per_day, 1.day.to_i)\n   end\n@@ -348,12 +219,10 @@ def self.base_directory\n   end\n \n   def ensure_max_redemptions_allowed\n-    if self.max_redemptions_allowed.nil? || self.max_redemptions_allowed == 1\n-      self.max_redemptions_allowed ||= 1\n-    else\n-      if !self.max_redemptions_allowed.between?(2, SiteSetting.invite_link_max_redemptions_limit)\n-        errors.add(:max_redemptions_allowed, I18n.t(\"invite_link.max_redemptions_limit\", max_limit: SiteSetting.invite_link_max_redemptions_limit))\n-      end\n+    if self.max_redemptions_allowed.nil?\n+      self.max_redemptions_allowed = 1\n+    elsif !self.max_redemptions_allowed.between?(1, SiteSetting.invite_link_max_redemptions_limit)\n+      errors.add(:max_redemptions_allowed, I18n.t(\"invite_link.max_redemptions_limit\", max_limit: SiteSetting.invite_link_max_redemptions_limit))\n     end\n   end\n "
    },
    {
      "sha": "3b9edabd213c47dc430081234b6a6917a2f21ef2",
      "filename": "app/models/invite_redeemer.rb",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/models/invite_redeemer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/models/invite_redeemer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/invite_redeemer.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -110,7 +110,7 @@ def mark_invite_redeemed\n \n   def get_invited_user\n     result = get_existing_user\n-    result ||= InviteRedeemer.create_user_from_invite(invite: invite, email: email, username: username, name: name, password: password, user_custom_fields: user_custom_fields, ip_address: ip_address)\n+    result ||= InviteRedeemer.create_user_from_invite(email: email, invite: invite, username: username, name: name, password: password, user_custom_fields: user_custom_fields, ip_address: ip_address)\n     result.send_welcome_message = false\n     result\n   end\n@@ -164,7 +164,8 @@ def notify_invitee\n   end\n \n   def delete_duplicate_invites\n-    Invite.single_use_invites\n+    Invite\n+      .where('invites.max_redemptions_allowed = 1')\n       .joins(\"LEFT JOIN invited_users ON invites.id = invited_users.invite_id\")\n       .where('invited_users.user_id IS NULL')\n       .where('invites.email = ? AND invites.id != ?', email, invite.id)"
    },
    {
      "sha": "dd9d2871d1412d4cb6116ad5b4f07565668879d1",
      "filename": "app/models/topic.rb",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/models/topic.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/models/topic.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/topic.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -1055,8 +1055,11 @@ def invite(invited_by, username_or_email, group_ids = nil, custom_message = nil)\n         !!invite_to_topic(invited_by, target_user, group_ids, guardian)\n       end\n     elsif is_email && guardian.can_invite_via_email?(self)\n-      !!Invite.invite_by_email(\n-        username_or_email, invited_by, self, group_ids, custom_message\n+      !!Invite.generate(invited_by,\n+        email: username_or_email,\n+        topic: self,\n+        group_ids: group_ids,\n+        custom_message: custom_message\n       )\n     end\n   end"
    },
    {
      "sha": "460273161efd436bfd113c359b19a42d3d934edb",
      "filename": "app/serializers/invite_serializer.rb",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/serializers/invite_serializer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/serializers/invite_serializer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/serializers/invite_serializer.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -1,7 +1,18 @@\n # frozen_string_literal: true\n \n class InviteSerializer < ApplicationSerializer\n-  attributes :id, :email, :updated_at, :expired\n+  attributes :id,\n+             :link,\n+             :email,\n+             :redemption_count,\n+             :max_redemptions_allowed,\n+             :custom_message,\n+             :updated_at,\n+             :expires_at,\n+             :expired\n+\n+  has_many :topics, embed: :object, serializer: BasicTopicSerializer\n+  has_many :groups, embed: :object, serializer: BasicGroupSerializer\n \n   def include_email?\n     options[:show_emails] && !object.redeemed?"
    },
    {
      "sha": "e31fd0f08c9493164ac83004ac7bd48b1af414d2",
      "filename": "app/serializers/invited_serializer.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/serializers/invited_serializer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/app/serializers/invited_serializer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/serializers/invited_serializer.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -1,18 +1,12 @@\n # frozen_string_literal: true\n \n class InvitedSerializer < ApplicationSerializer\n-  attributes :invites, :can_see_invite_details\n+  attributes :invites, :can_see_invite_details, :counts\n \n   def invites\n-    serializer = if object.type == \"pending\"\n-      InviteSerializer\n-    else\n-      InvitedUserSerializer\n-    end\n-\n     ActiveModel::ArraySerializer.new(\n       object.invite_list,\n-      each_serializer: serializer,\n+      each_serializer: object.type == \"pending\" ? InviteSerializer : InvitedUserSerializer,\n       scope: scope,\n       root: false,\n       show_emails: object.show_emails\n@@ -23,7 +17,7 @@ def can_see_invite_details\n     scope.can_see_invite_details?(object.inviter)\n   end\n \n-  def read_attribute_for_serialization(attr)\n-    object.respond_to?(attr) ? object.public_send(attr) : public_send(attr)\n+  def counts\n+    object.counts\n   end\n end"
    },
    {
      "sha": "4d3f9bdd418a87c32dd0a4d1f9b06315791306f0",
      "filename": "config/locales/client.en.yml",
      "status": "modified",
      "additions": 57,
      "deletions": 25,
      "changes": 82,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/config/locales/client.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/config/locales/client.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/client.en.yml?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -1439,47 +1439,44 @@ en:\n       notification_level_when_replying: \"When I post in a topic, set that topic to\"\n \n       invited:\n-        search: \"type to search invites...\"\n         title: \"Invites\"\n-        user: \"Invited User\"\n+        pending_tab: \"Pending\"\n+        pending_tab_with_count: \"Pending (%{count})\"\n+        redeemed_tab: \"Redeemed\"\n+        redeemed_tab_with_count: \"Redeemed (%{count})\"\n+        invited_via: \"Invited Via\"\n+        invited_via_link: \"link (%{count} / %{max} redeemed)\"\n+        groups: \"Groups\"\n         sent: \"Last Sent\"\n+        expires_at: \"Expires\"\n+        edit: \"Edit\"\n+        remove: \"Remove\"\n+        copy_link: \"Get Link\"\n+        reinvite: \"Send Email\"\n+        reinvited: \"Invite re-sent\"\n+        removed: \"Removed\"\n+        search: \"type to search invites...\"\n+        user: \"Invited User\"\n         none: \"No invites to display.\"\n         truncated:\n           one: \"Showing the first invite.\"\n           other: \"Showing the first %{count} invites.\"\n         redeemed: \"Redeemed Invites\"\n-        redeemed_tab: \"Redeemed\"\n-        redeemed_tab_with_count: \"Redeemed (%{count})\"\n         redeemed_at: \"Redeemed\"\n         pending: \"Pending Invites\"\n-        pending_tab: \"Pending\"\n-        pending_tab_with_count: \"Pending (%{count})\"\n         topics_entered: \"Topics Viewed\"\n         posts_read_count: \"Posts Read\"\n         expired: \"This invite has expired.\"\n-        rescind: \"Remove\"\n-        rescinded: \"Invite removed\"\n-        rescind_all: \"Remove Expired Invites\"\n-        rescinded_all: \"All Expired Invites removed!\"\n-        rescind_all_confirm: \"Are you sure you want to remove all expired invites?\"\n-        reinvite: \"Resend Invite\"\n-        reinvite_all: \"Resend all Invites\"\n+        remove_all: \"Remove Expired Invites\"\n+        removed_all: \"All Expired Invites removed!\"\n+        remove_all_confirm: \"Are you sure you want to remove all expired invites?\"\n+        reinvite_all: \"Resend All Invites\"\n         reinvite_all_confirm: \"Are you sure you want to resend all invites?\"\n-        reinvited: \"Invite re-sent\"\n-        reinvited_all: \"All Invites re-sent!\"\n+        reinvited_all: \"All Invites Sent!\"\n         time_read: \"Read Time\"\n         days_visited: \"Days Visited\"\n         account_age_days: \"Account age in days\"\n-        source: \"Invited Via\"\n-        links_tab: \"Links\"\n-        links_tab_with_count: \"Links (%{count})\"\n-        link_url: \"Link\"\n-        link_created_at: \"Created\"\n-        link_redemption_stats: \"Redemptions\"\n-        link_groups: Groups\n-        link_expires_at: Expires\n         create: \"Invite\"\n-        copy_link: \"Show Link\"\n         generate_link: \"Create Invite Link\"\n         link_generated: \"Here's your invite link!\"\n         valid_for: \"Invite link is only valid for this email address: %{email}\"\n@@ -1491,12 +1488,47 @@ en:\n           error: \"There was an error generating Invite link\"\n           max_redemptions_allowed_label: \"How many people are allowed to register using this link?\"\n           expires_at: \"When will this invite link expire?\"\n+\n+        invite:\n+          new_title: \"Create Invite\"\n+          edit_title: \"Edit Invite\"\n+          show_link: \"Invite Link\"\n+\n+          instructions: \"Share this link to instantly grant access to this site:\"\n+          copy_link: \"copy link\"\n+          expires_at_time: \"Your invite expires in %{time}.\"\n+\n+          show_advanced: \"Show Advanced Options\"\n+          hide_advanced: \"Hide Advanced Options\"\n+\n+          type_email: \"Automatically send invitation link via email\"\n+          type_link: \"Manually share an invite link to people\"\n+\n+          email: \"Email address of invited person:\"\n+          max_redemptions_allowed: \"Number of times the invite can be used before expiring:\"\n+\n+          add_to_groups: \"Include invited people to groups:\"\n+          invite_to_topic: \"Invite people to topic:\"\n+          expires_at: \"Set an expiration date for invite:\"\n+          custom_message: \"Personalize your invites by adding a custom message:\"\n+\n+          send_invite_email: \"Send Invite Email\"\n+          save_invite: \"Save Invite\"\n+\n+          invite_saved: \"Invite was saved.\"\n+\n         bulk_invite:\n           none: \"No invitations to display on this page.\"\n+\n           text: \"Bulk Invite\"\n+          instructions: |\n+            <p>Invite a list of users to get your community going quickly. Prepare a <a href=\"https://en.wikipedia.org/wiki/Comma-separated_values\">CSV file</a> containing at least one row per email address of users you want to invite. The following comma separated information can be provided if you want to add people to groups or send them to a specific topic the first time they sign in.</p>\n+            <pre>john@smith.com,first_group_name;second_group_name,42</pre>\n+            <p>Every email address in your uploaded CSV file will be sent an invitation, and you will be able to manage it later.</p>\n+\n+          progress: \"Uploaded %{progress}%...\"\n           success: \"File uploaded successfully, you will be notified via message when the process is complete.\"\n           error: \"Sorry, file should be CSV format.\"\n-          confirmation_message: \"You’re about to email invites to everyone in the uploaded file.\"\n \n       password:\n         title: \"Password\""
    },
    {
      "sha": "db8379d1d0266e2f12a21006d4b1952193fe40f9",
      "filename": "config/routes.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/config/routes.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/config/routes.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/routes.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -478,9 +478,7 @@\n       get \"#{root_path}/:username/summary\" => \"users#summary\", constraints: { username: RouteFormat.username }\n       put \"#{root_path}/:username/notification_level\" => \"users#notification_level\", constraints: { username: RouteFormat.username }\n       get \"#{root_path}/:username/invited\" => \"users#invited\", constraints: { username: RouteFormat.username }\n-      get \"#{root_path}/:username/invited_count\" => \"users#invited_count\", constraints: { username: RouteFormat.username }\n       get \"#{root_path}/:username/invited/:filter\" => \"users#invited\", constraints: { username: RouteFormat.username }\n-      get \"#{root_path}/:username/invite_links\" => \"users#invite_links\", constraints: { username: RouteFormat.username }\n       post \"#{root_path}/action/send_activation_email\" => \"users#send_activation_email\"\n       get \"#{root_path}/:username/summary\" => \"users#show\", constraints: { username: RouteFormat.username }\n       get \"#{root_path}/:username/activity/topics.rss\" => \"list#user_topics_feed\", format: :rss, constraints: { username: RouteFormat.username }\n@@ -822,12 +820,12 @@\n \n     resources :invites, except: [:show]\n     get \"/invites/:id\" => \"invites#show\", constraints: { format: :html }\n+    put \"/invites/:id\" => \"invites#update\"\n \n     post \"invites/upload_csv\" => \"invites#upload_csv\"\n-    post \"invites/rescind-all\" => \"invites#rescind_all_invites\"\n+    post \"invites/destroy-all-expired\" => \"invites#destroy_all_expired\"\n     post \"invites/reinvite\" => \"invites#resend_invite\"\n     post \"invites/reinvite-all\" => \"invites#resend_all_invites\"\n-    post \"invites/link\" => \"invites#create_invite_link\"\n     delete \"invites\" => \"invites#destroy\"\n     put \"invites/show/:id\" => \"invites#perform_accept_invitation\", as: 'perform_accept_invite'\n "
    },
    {
      "sha": "779148222a214862f0db33ccf1a7e382aa03719d",
      "filename": "lib/guardian.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 9,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/lib/guardian.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/lib/guardian.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/guardian.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -400,19 +400,11 @@ def can_bulk_invite_to_forum?(user)\n     SiteSetting.enable_local_logins\n   end\n \n-  def can_send_invite_links?(user)\n-    user.staff?\n-  end\n-\n-  def can_send_multiple_invites?(user)\n-    user.staff?\n-  end\n-\n   def can_resend_all_invites?(user)\n     user.staff?\n   end\n \n-  def can_rescind_all_invites?(user)\n+  def can_destroy_all_invites?(user)\n     user.staff?\n   end\n "
    },
    {
      "sha": "4dfee9af9c89d31c322a540f71adb69f7ab4af97",
      "filename": "lib/wizard/builder.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/lib/wizard/builder.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/lib/wizard/builder.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/wizard/builder.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -276,10 +276,10 @@ def build\n             users = JSON.parse(updater.fields[:invite_list])\n \n             users.each do |u|\n-              args = {}\n+              args = { email: u['email'] }\n               args[:moderator] = true if u['role'] == 'moderator'\n               begin\n-                Invite.create_invite_by_email(u['email'], @wizard.user, args)\n+                Invite.generate(@wizard.user, args)\n               rescue => e\n                 updater.errors.add(:invite_list, e.message.concat(\"<br>\"))\n               end"
    },
    {
      "sha": "f7168d3e8335e3ac56aa4dcdb0d26e53f905f53d",
      "filename": "spec/models/invite_spec.rb",
      "status": "modified",
      "additions": 52,
      "deletions": 176,
      "changes": 228,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/spec/models/invite_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/spec/models/invite_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/invite_spec.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -82,29 +82,28 @@\n       context 'email' do\n         it 'enqueues a job to email the invite' do\n           expect do\n-            Invite.invite_by_email(iceking, inviter, topic)\n+            Invite.generate(inviter, email: iceking, topic: topic)\n           end.to change { Jobs::InviteEmail.jobs.size }\n         end\n       end\n \n       context 'links' do\n         it 'does not enqueue a job to email the invite' do\n-          expect do\n-            Invite.generate_single_use_invite_link(iceking, inviter, topic)\n-          end.not_to change { Jobs::InviteEmail.jobs.size }\n+          expect { Invite.generate(inviter, email: iceking, topic: topic, skip_email: true) }\n+            .not_to change { Jobs::InviteEmail.jobs.size }\n         end\n       end\n \n       context 'destroyed' do\n         it \"can invite the same user after their invite was destroyed\" do\n-          Invite.invite_by_email(iceking, inviter, topic).destroy!\n-          invite = Invite.invite_by_email(iceking, inviter, topic)\n+          Invite.generate(inviter, email: iceking, topic: topic).destroy!\n+          invite = Invite.generate(inviter, email: iceking, topic: topic)\n           expect(invite).to be_present\n         end\n       end\n \n       context 'after created' do\n-        let(:invite) { Invite.invite_by_email(iceking, inviter, topic) }\n+        let(:invite) { Invite.generate(inviter, email: iceking, topic: topic) }\n \n         it 'belongs to the topic' do\n           expect(topic.invites).to eq([invite])\n@@ -115,7 +114,7 @@\n           fab!(:coding_horror) { Fabricate(:coding_horror) }\n \n           let(:new_invite) do\n-            Invite.invite_by_email(iceking, coding_horror, topic)\n+            Invite.generate(coding_horror, email: iceking, topic: topic)\n           end\n \n           it 'returns a different invite' do\n@@ -132,19 +131,15 @@\n               iceking@ADVENTURETIME.ooo\n               ICEKING@adventuretime.ooo\n             }.each do |email|\n-              expect(Invite.invite_by_email(\n-                email, inviter, topic\n-              )).to eq(invite)\n+              expect(Invite.generate(inviter, email: email, topic: topic)).to eq(invite)\n             end\n           end\n \n           it 'updates timestamp of existing invite' do\n             freeze_time\n             invite.update!(created_at: 10.days.ago)\n \n-            resend_invite = Invite.invite_by_email(\n-              'iceking@adventuretime.ooo', inviter, topic\n-            )\n+            resend_invite = Invite.generate(inviter, email: 'iceking@adventuretime.ooo', topic: topic)\n \n             expect(resend_invite.created_at).to eq_time(Time.zone.now)\n           end\n@@ -153,10 +148,7 @@\n             SiteSetting.invite_expiry_days = 1\n             invite.update!(expires_at: 2.days.ago)\n \n-            new_invite = Invite.invite_by_email(\n-              'iceking@adventuretime.ooo', inviter, topic\n-            )\n-\n+            new_invite = Invite.generate(inviter, email: 'iceking@adventuretime.ooo', topic: topic)\n             expect(new_invite).not_to eq(invite)\n             expect(new_invite).not_to be_expired\n           end\n@@ -166,7 +158,7 @@\n           fab!(:another_topic) { Fabricate(:topic, user: topic.user) }\n \n           it 'should be the same invite' do\n-            new_invite = Invite.invite_by_email(iceking, inviter, another_topic)\n+            new_invite = Invite.generate(inviter, email: iceking, topic: another_topic)\n             expect(new_invite).to eq(invite)\n             expect(another_topic.invites).to eq([invite])\n             expect(invite.topics).to match_array([topic, another_topic])\n@@ -186,20 +178,20 @@\n         it 'correctly marks invite emailed_status for email invites' do\n           expect(invite.emailed_status).to eq(Invite.emailed_status_types[:sending])\n \n-          Invite.invite_by_email(iceking, inviter, topic)\n+          Invite.generate(inviter, email: iceking, topic: topic)\n           expect(invite.reload.emailed_status).to eq(Invite.emailed_status_types[:sending])\n         end\n \n         it 'does not mark emailed_status as sending after generating invite link' do\n           expect(invite.emailed_status).to eq(Invite.emailed_status_types[:sending])\n \n-          Invite.generate_single_use_invite_link(iceking, inviter, topic)\n+          Invite.generate(inviter, email: iceking, topic: topic, emailed_status: Invite.emailed_status_types[:not_required])\n           expect(invite.reload.emailed_status).to eq(Invite.emailed_status_types[:not_required])\n \n-          Invite.invite_by_email(iceking, inviter, topic)\n+          Invite.generate(inviter, email: iceking, topic: topic)\n           expect(invite.reload.emailed_status).to eq(Invite.emailed_status_types[:not_required])\n \n-          Invite.generate_single_use_invite_link(iceking, inviter, topic)\n+          Invite.generate(inviter, email: iceking, topic: topic, emailed_status: Invite.emailed_status_types[:not_required])\n           expect(invite.reload.emailed_status).to eq(Invite.emailed_status_types[:not_required])\n         end\n       end\n@@ -208,32 +200,23 @@\n     context 'invite links' do\n       let(:inviter) { Fabricate(:user) }\n \n-      it 'with single use can exist' do\n-        Invite.generate_multiple_use_invite_link(invited_by: inviter, max_redemptions_allowed: 1)\n-        invite_link = Invite.last\n-        expect(invite_link.is_invite_link?).to eq(true)\n-      end\n-\n-      it \"has sane defaults\" do\n-        Invite.generate_multiple_use_invite_link(invited_by: inviter)\n-        invite_link = Invite.last\n-        expect(invite_link.max_redemptions_allowed).to eq(5)\n-        expect(invite_link.expires_at.to_date).to eq(1.month.from_now.to_date)\n-        expect(invite_link.emailed_status).to eq(Invite.emailed_status_types[:not_required])\n-        expect(invite_link.is_invite_link?).to eq(true)\n+      it \"can be created\" do\n+        invite = Invite.generate(inviter, max_redemptions_allowed: 5)\n+        expect(invite.max_redemptions_allowed).to eq(5)\n+        expect(invite.expires_at.to_date).to eq(SiteSetting.invite_expiry_days.days.from_now.to_date)\n+        expect(invite.emailed_status).to eq(Invite.emailed_status_types[:not_required])\n+        expect(invite.is_invite_link?).to eq(true)\n       end\n \n       it 'checks for max_redemptions_allowed range' do\n         SiteSetting.invite_link_max_redemptions_limit = 1000\n-        expect do\n-          Invite.generate_multiple_use_invite_link(invited_by: inviter, max_redemptions_allowed: 1001)\n-        end.to raise_error(ActiveRecord::RecordInvalid)\n+        expect { Invite.generate(inviter, max_redemptions_allowed: 1001) }\n+          .to raise_error(ActiveRecord::RecordInvalid)\n       end\n \n       it 'does not enqueue a job to email the invite' do\n-        expect do\n-          Invite.generate_multiple_use_invite_link(invited_by: inviter)\n-        end.not_to change { Jobs::InviteEmail.jobs.size }\n+        expect { Invite.generate(inviter) }\n+          .not_to change { Jobs::InviteEmail.jobs.size }\n       end\n     end\n   end\n@@ -242,17 +225,16 @@\n     fab!(:topic) { Fabricate(:topic, category_id: nil, archetype: 'private_message') }\n     fab!(:coding_horror) { Fabricate(:coding_horror) }\n \n-    it \"works\" do\n-      expect do\n-        Invite.invite_by_email(coding_horror.email, topic.user, topic)\n-      end.to raise_error(Invite::UserExists)\n+    it \"raises the right error\" do\n+      expect { Invite.generate(topic.user, email: coding_horror.email, topic: topic) }\n+        .to raise_error(Invite::UserExists)\n     end\n   end\n \n   context 'a staged user' do\n     it 'creates an invite for a staged user' do\n       Fabricate(:staged, email: 'staged@account.com')\n-      invite = Invite.invite_by_email('staged@account.com', Fabricate(:coding_horror))\n+      invite = Invite.generate(Fabricate(:coding_horror), email: 'staged@account.com')\n \n       expect(invite).to be_valid\n       expect(invite.email).to eq('staged@account.com')\n@@ -424,33 +406,28 @@\n       fab!(:invite_link) { Fabricate(:invite, email: nil, max_redemptions_allowed: 5, expires_at: 1.month.from_now, emailed_status: Invite.emailed_status_types[:not_required]) }\n \n       it 'works correctly' do\n-        user = invite_link.redeem_invite_link(email: 'foo@example.com')\n+        user = invite_link.redeem(email: 'foo@example.com')\n         expect(user.is_a?(User)).to eq(true)\n         expect(user.send_welcome_message).to eq(true)\n         expect(user.trust_level).to eq(SiteSetting.default_invitee_trust_level)\n         expect(user.active).to eq(false)\n-        invite_link.reload\n-        expect(invite_link.redemption_count).to eq(1)\n+        expect(invite_link.reload.redemption_count).to eq(1)\n       end\n \n       it 'returns error if user with that email already exists' do\n         user = Fabricate(:user)\n-        expect do\n-          invite_link.redeem_invite_link(email: user.email)\n-        end.to raise_error(Invite::UserExists)\n+        expect { invite_link.redeem(email: user.email) }.to raise_error(Invite::UserExists)\n       end\n     end\n   end\n \n-  describe '.find_all_pending_invites_from' do\n+  describe '.pending' do\n     context 'with user that has invited' do\n       it 'returns invites' do\n         inviter = Fabricate(:user)\n         invite = Fabricate(:invite, invited_by: inviter)\n \n-        invites = Invite.find_all_pending_invites_from(inviter)\n-\n-        expect(invites).to include invite\n+        expect(Invite.pending(inviter)).to include(invite)\n       end\n     end\n \n@@ -459,107 +436,46 @@\n         user = Fabricate(:user)\n         Fabricate(:invite)\n \n-        invites = Invite.find_all_pending_invites_from(user)\n-\n-        expect(invites).to be_empty\n+        expect(Invite.pending(user)).to be_empty\n       end\n     end\n-  end\n \n-  describe '.find_pending_invites_from' do\n     it 'returns pending invites only' do\n       inviter = Fabricate(:user)\n-      redeemed_invite = Fabricate(\n-        :invite,\n-        invited_by: inviter,\n-        email: 'redeemed@example.com'\n-      )\n-      Fabricate(:invited_user, invite: redeemed_invite, user: Fabricate(:user))\n-\n-      pending_invite = Fabricate(\n-        :invite,\n-        invited_by: inviter,\n-        email: 'pending@example.com'\n-      )\n \n-      invites = Invite.find_pending_invites_from(inviter)\n+      redeemed_invite = Fabricate(:invite, invited_by: inviter, email: 'redeemed@example.com')\n+      redeemed_invite.redeem\n \n-      expect(invites.length).to eq(1)\n-      expect(invites.first).to eq pending_invite\n+      pending_invite = Fabricate(:invite, invited_by: inviter, email: 'pending@example.com')\n+      pending_link_invite = Fabricate(:invite, invited_by: inviter, max_redemptions_allowed: 5)\n \n-      expect(Invite.find_pending_invites_count(inviter)).to eq(1)\n+      expect(Invite.pending(inviter)).to contain_exactly(pending_invite, pending_link_invite)\n     end\n   end\n \n-  describe '.find_redeemed_invites_from' do\n+  describe '.redeemed_users' do\n     it 'returns redeemed invites only' do\n       inviter = Fabricate(:user)\n-      Fabricate(\n-        :invite,\n-        invited_by: inviter,\n-        email: 'pending@example.com'\n-      )\n-\n-      redeemed_invite = Fabricate(\n-        :invite,\n-        invited_by: inviter,\n-        email: 'redeemed@example.com'\n-      )\n-      Fabricate(:invited_user, invite: redeemed_invite, user: Fabricate(:user))\n \n-      invites = Invite.find_redeemed_invites_from(inviter)\n+      Fabricate(:invite, invited_by: inviter, email: 'pending@example.com')\n \n-      expect(invites.length).to eq(1)\n-      expect(invites.first).to eq redeemed_invite.invited_users.first\n+      redeemed_invite = Fabricate(:invite, invited_by: inviter, email: 'redeemed@example.com')\n+      Fabricate(:invited_user, invite: redeemed_invite, user: Fabricate(:user))\n \n-      expect(Invite.find_redeemed_invites_count(inviter)).to eq(1)\n+      expect(Invite.redeemed_users(inviter)).to contain_exactly(redeemed_invite.invited_users.first)\n     end\n \n     it 'returns redeemed invites for invite links' do\n       inviter = Fabricate(:user)\n-      invite_link = Fabricate(\n-        :invite,\n-        invited_by: inviter,\n-        max_redemptions_allowed: 50\n-      )\n-      Fabricate(:invited_user, invite: invite_link, user: Fabricate(:user))\n-      Fabricate(:invited_user, invite: invite_link, user: Fabricate(:user))\n-      Fabricate(:invited_user, invite: invite_link, user: Fabricate(:user))\n-\n-      invites = Invite.find_redeemed_invites_from(inviter)\n-      expect(invites.length).to eq(3)\n-      expect(Invite.find_redeemed_invites_count(inviter)).to eq(3)\n-    end\n-  end\n+      invite_link = Fabricate(:invite, invited_by: inviter, max_redemptions_allowed: 50)\n \n-  describe '.find_links_invites_from' do\n-    it 'returns invite links only' do\n-      inviter = Fabricate(:user)\n-      Fabricate(\n-        :invite,\n-        invited_by: inviter,\n-        email: 'pending@example.com'\n-      )\n+      redeemed = [\n+        Fabricate(:invited_user, invite: invite_link, user: Fabricate(:user)),\n+        Fabricate(:invited_user, invite: invite_link, user: Fabricate(:user)),\n+        Fabricate(:invited_user, invite: invite_link, user: Fabricate(:user))\n+      ]\n \n-      invite_link_1 = Fabricate(\n-        :invite,\n-        invited_by: inviter,\n-        max_redemptions_allowed: 5\n-      )\n-\n-      invite_link_2 = Fabricate(\n-        :invite,\n-        invited_by: inviter,\n-        max_redemptions_allowed: 50\n-      )\n-\n-      invites = Invite.find_links_invites_from(inviter)\n-\n-      expect(invites.length).to eq(2)\n-      expect(invites.first).to eq(invite_link_2)\n-      expect(invites.first.max_redemptions_allowed).to eq(50)\n-\n-      expect(Invite.find_links_invites_count(inviter)).to eq(2)\n+      expect(Invite.redeemed_users(inviter)).to match_array(redeemed)\n     end\n   end\n \n@@ -605,46 +521,6 @@\n     end\n   end\n \n-  describe '.resend_all_invites_from' do\n-    it 'resends all non-redeemed invites by a user' do\n-      SiteSetting.invite_expiry_days = 30\n-      user = Fabricate(:user)\n-      new_invite = Fabricate(:invite, invited_by: user)\n-      expired_invite = Fabricate(:invite, invited_by: user)\n-      expired_invite.update!(expires_at: 2.days.ago)\n-      redeemed_invite = Fabricate(:invite, invited_by: user)\n-      Fabricate(:invited_user, invite: redeemed_invite, user: Fabricate(:user))\n-      redeemed_invite.update!(expires_at: 5.days.ago)\n-\n-      Invite.resend_all_invites_from(user.id)\n-      new_invite.reload\n-      expired_invite.reload\n-      redeemed_invite.reload\n-\n-      expect(new_invite.expires_at.to_date).to eq(30.days.from_now.to_date)\n-      expect(expired_invite.expires_at.to_date).to eq(30.days.from_now.to_date)\n-      expect(redeemed_invite.expires_at.to_date).to eq(5.days.ago.to_date)\n-    end\n-  end\n-\n-  describe '.rescind_all_expired_invites_from' do\n-    it 'removes all expired invites sent by a user' do\n-      SiteSetting.invite_expiry_days = 1\n-      user = Fabricate(:user)\n-      invite_1 = Fabricate(:invite, invited_by: user)\n-      invite_2 = Fabricate(:invite, invited_by: user)\n-      expired_invite = Fabricate(:invite, invited_by: user)\n-      expired_invite.update!(expires_at: 2.days.ago)\n-      Invite.rescind_all_expired_invites_from(user)\n-      invite_1.reload\n-      invite_2.reload\n-      expired_invite.reload\n-      expect(invite_1.deleted_at).to eq(nil)\n-      expect(invite_2.deleted_at).to eq(nil)\n-      expect(expired_invite.deleted_at).to be_present\n-    end\n-  end\n-\n   describe '#emailed_status_types' do\n     context \"verify enum sequence\" do\n       before do"
    },
    {
      "sha": "5084ae7f0c14f0b432c928c35d3770cf72c3916d",
      "filename": "spec/requests/api/invites_spec.rb",
      "status": "modified",
      "additions": 0,
      "deletions": 27,
      "changes": 27,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/spec/requests/api/invites_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/spec/requests/api/invites_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/api/invites_spec.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -33,31 +33,4 @@\n       end\n     end\n   end\n-\n-  path '/invites/link.json' do\n-    post 'Generate an invite link, but do not send an email' do\n-      tags 'Invites'\n-      consumes 'application/json'\n-      parameter name: 'Api-Key', in: :header, type: :string, required: true\n-      parameter name: 'Api-Username', in: :header, type: :string, required: true\n-\n-      parameter name: :request_body, in: :body, schema: {\n-        type: :object,\n-        properties: {\n-          email: { type: :string },\n-          group_names: { type: :string },\n-          custom_message: { type: :string },\n-        }, required: ['email']\n-      }\n-\n-      produces 'application/json'\n-      response '200', 'success response' do\n-        schema type: :string, example: \"http://discourse.example.com/invites/token_value\"\n-\n-        let(:request_body) { { email: 'not-a-user-yet@example.com' } }\n-        run_test!\n-      end\n-    end\n-  end\n-\n end"
    },
    {
      "sha": "735f8c94f1de37945dcf9ac111b4cc09efc8ae9a",
      "filename": "spec/requests/invites_controller_spec.rb",
      "status": "modified",
      "additions": 106,
      "deletions": 85,
      "changes": 191,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/spec/requests/invites_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/spec/requests/invites_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/invites_controller_spec.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -118,11 +118,10 @@\n \n       it \"fails for normal user if invite email already exists\" do\n         user = sign_in(trust_level_4)\n-        invite = Invite.invite_by_email(\"invite@example.com\", user)\n+        invite = Invite.generate(user, email: \"invite@example.com\")\n         post \"/invites.json\", params: { email: invite.email }\n         expect(response.status).to eq(422)\n-        json = response.parsed_body\n-        expect(json[\"failed\"]).to be_present\n+        expect(response.parsed_body[\"failed\"]).to be_present\n       end\n \n       it \"allows admins to invite to groups\" do\n@@ -147,7 +146,7 @@\n \n       it \"does not allow admins to send multiple invites to same email\" do\n         user = sign_in(admin)\n-        invite = Invite.invite_by_email(\"invite@example.com\", user)\n+        invite = Invite.generate(user, email: \"invite@example.com\")\n         post \"/invites.json\", params: { email: invite.email }\n         expect(response.status).to eq(422)\n       end\n@@ -156,17 +155,14 @@\n         sign_in(admin)\n         post \"/invites.json\", params: { email: \"test@mailinator.com\" }\n         expect(response.status).to eq(422)\n-        json = response.parsed_body\n-        expect(json[\"errors\"]).to be_present\n+        expect(response.parsed_body[\"errors\"]).to be_present\n       end\n     end\n-  end\n \n-  describe \"#create_invite_link\" do\n     describe 'single use invite link' do\n       it 'requires you to be logged in' do\n-        post \"/invites/link.json\", params: {\n-          email: 'jake@adventuretime.ooo'\n+        post \"/invites.json\", params: {\n+          email: 'jake@adventuretime.ooo', skip_email: true\n         }\n         expect(response.status).to eq(403)\n       end\n@@ -176,29 +172,23 @@\n \n         it \"fails if you can't invite to the forum\" do\n           sign_in(Fabricate(:user))\n-          post \"/invites/link.json\", params: { email: email }\n-          expect(response.status).to eq(422)\n+          post \"/invites.json\", params: { email: email, skip_email: true }\n+          expect(response.status).to eq(403)\n         end\n \n         it \"fails for normal user if invite email already exists\" do\n           user = sign_in(trust_level_4)\n-          invite = Invite.invite_by_email(\"invite@example.com\", user)\n-\n-          post \"/invites/link.json\", params: {\n-            email: invite.email\n-          }\n+          invite = Invite.generate(user, email: \"invite@example.com\")\n \n+          post \"/invites.json\", params: { email: invite.email, skip_email: true }\n           expect(response.status).to eq(422)\n         end\n \n-        it \"returns the right response when topic_id is invalid\" do\n+        it \"fails when topic_id is invalid\" do\n           sign_in(trust_level_4)\n \n-          post \"/invites/link.json\", params: {\n-            email: email, topic_id: -9999\n-          }\n-\n-          expect(response.status).to eq(422)\n+          post \"/invites.json\", params: { email: email, skip_email: true, topic_id: -9999 }\n+          expect(response.status).to eq(400)\n         end\n \n         it \"verifies that inviter is authorized to invite new user to a group-private topic\" do\n@@ -207,19 +197,19 @@\n           group_private_topic = Fabricate(:topic, category: private_category)\n           sign_in(trust_level_4)\n \n-          post \"/invites/link.json\", params: {\n-            email: email, topic_id: group_private_topic.id\n+          post \"/invites.json\", params: {\n+            email: email, skip_email: true, topic_id: group_private_topic.id\n           }\n \n-          expect(response.status).to eq(422)\n+          expect(response.status).to eq(403)\n         end\n \n         it \"allows admins to invite to groups\" do\n           group = Fabricate(:group)\n           sign_in(admin)\n \n-          post \"/invites/link.json\", params: {\n-            email: email, group_ids: [group.id]\n+          post \"/invites.json\", params: {\n+            email: email, skip_email: true, group_ids: [group.id]\n           }\n \n           expect(response.status).to eq(200)\n@@ -231,8 +221,8 @@\n           Fabricate(:group, name: \"support\")\n           sign_in(admin)\n \n-          post \"/invites/link.json\", params: {\n-            email: email, group_names: \"security,support\"\n+          post \"/invites.json\", params: {\n+            email: email, skip_email: true, group_names: \"security,support\"\n           }\n \n           expect(response.status).to eq(200)\n@@ -243,61 +233,74 @@\n \n     describe 'multiple use invite link' do\n       it 'requires you to be logged in' do\n-        post \"/invites/link.json\", params: {\n+        post \"/invites.json\", params: {\n           max_redemptions_allowed: 5\n         }\n         expect(response).to be_forbidden\n       end\n \n       context 'while logged in' do\n-        it \"fails for non-staff users\" do\n-          sign_in(trust_level_4)\n-          post \"/invites/link.json\", params: {\n-            max_redemptions_allowed: 5\n-          }\n-          expect(response.status).to eq(422)\n-        end\n-\n         it \"allows staff to invite to groups\" do\n           moderator = Fabricate(:moderator)\n           sign_in(moderator)\n           group = Fabricate(:group)\n           group.add_owner(moderator)\n \n-          post \"/invites/link.json\", params: {\n+          post \"/invites.json\", params: {\n             max_redemptions_allowed: 5,\n             group_ids: [group.id]\n           }\n \n           expect(response.status).to eq(200)\n-          expect(Invite.multiple_use_invites.last.invited_groups.count).to eq(1)\n+          expect(Invite.last.invited_groups.count).to eq(1)\n         end\n \n         it \"allows multiple group invite\" do\n           Fabricate(:group, name: \"security\")\n           Fabricate(:group, name: \"support\")\n           sign_in(admin)\n \n-          post \"/invites/link.json\", params: {\n+          post \"/invites.json\", params: {\n             max_redemptions_allowed: 5,\n             group_names: \"security,support\"\n           }\n \n           expect(response.status).to eq(200)\n-          expect(Invite.multiple_use_invites.last.invited_groups.count).to eq(2)\n+          expect(Invite.last.invited_groups.count).to eq(2)\n         end\n       end\n     end\n   end\n \n+  context '#update' do\n+    fab!(:invite) { Fabricate(:invite, invited_by: admin, email: 'test@example.com') }\n+\n+    before do\n+      sign_in(admin)\n+    end\n+\n+    it 'updating email address resends invite email' do\n+      put \"/invites/#{invite.id}\", params: { email: 'test2@example.com' }\n+\n+      expect(response.status).to eq(200)\n+      expect(Jobs::InviteEmail.jobs.size).to eq(1)\n+    end\n+\n+    it 'updating does not resend invite email' do\n+      put \"/invites/#{invite.id}\", params: { custom_message: \"new message\" }\n+\n+      expect(response.status).to eq(200)\n+      expect(invite.reload.custom_message).to eq(\"new message\")\n+      expect(Jobs::InviteEmail.jobs.size).to eq(0)\n+    end\n+  end\n+\n   context '#perform_accept_invitation' do\n     context 'with an invalid invite id' do\n       it \"redirects to the root and doesn't change the session\" do\n         put \"/invites/show/doesntexist.json\"\n-        expect(response.status).to eq(200)\n-        json = response.parsed_body\n-        expect(json[\"success\"]).to eq(false)\n-        expect(json[\"message\"]).to eq(I18n.t('invite.not_found_json'))\n+        expect(response.status).to eq(404)\n+        expect(response.parsed_body[\"message\"]).to eq(I18n.t('invite.not_found_json'))\n         expect(session[:current_user_id]).to be_blank\n       end\n     end\n@@ -307,20 +310,15 @@\n       it \"responds with error message\" do\n         invite.update_attribute(:email, \"John Doe <john.doe@example.com>\")\n         put \"/invites/show/#{invite.invite_key}.json\"\n-        expect(response.status).to eq(200)\n-        json = response.parsed_body\n-        expect(json[\"success\"]).to eq(false)\n-        expect(json[\"message\"]).to eq(I18n.t('invite.error_message'))\n+        expect(response.status).to eq(412)\n+        expect(response.parsed_body[\"message\"]).to eq(I18n.t('invite.error_message'))\n         expect(session[:current_user_id]).to be_blank\n       end\n     end\n \n     context 'with a deleted invite' do\n       fab!(:topic) { Fabricate(:topic) }\n-\n-      let(:invite) do\n-        Invite.invite_by_email(\"iceking@adventuretime.ooo\", topic.user, topic)\n-      end\n+      let(:invite) { Invite.generate(topic.user, email: \"iceking@adventuretime.ooo\", topic: topic) }\n \n       before do\n         invite.destroy!\n@@ -329,10 +327,8 @@\n       it \"redirects to the root\" do\n         put \"/invites/show/#{invite.invite_key}.json\"\n \n-        expect(response.status).to eq(200)\n-        json = response.parsed_body\n-        expect(json[\"success\"]).to eq(false)\n-        expect(json[\"message\"]).to eq(I18n.t('invite.not_found_json'))\n+        expect(response.status).to eq(404)\n+        expect(response.parsed_body[\"message\"]).to eq(I18n.t('invite.not_found_json'))\n         expect(session[:current_user_id]).to be_blank\n       end\n     end\n@@ -343,19 +339,15 @@\n       it \"response is not successful\" do\n         put \"/invites/show/#{invite_link.invite_key}.json\"\n \n-        expect(response.status).to eq(200)\n-        json = response.parsed_body\n-        expect(json[\"success\"]).to eq(false)\n-        expect(json[\"message\"]).to eq(I18n.t('invite.not_found_json'))\n+        expect(response.status).to eq(404)\n+        expect(response.parsed_body[\"message\"]).to eq(I18n.t('invite.not_found_json'))\n         expect(session[:current_user_id]).to be_blank\n       end\n     end\n \n     context 'with a valid invite id' do\n       fab!(:topic) { Fabricate(:topic) }\n-      let(:invite) do\n-        Invite.invite_by_email(\"iceking@adventuretime.ooo\", topic.user, topic)\n-      end\n+      let(:invite) { Invite.generate(topic.user, email: \"iceking@adventuretime.ooo\", topic: topic) }\n \n       it 'redeems the invite' do\n         put \"/invites/show/#{invite.invite_key}.json\"\n@@ -387,9 +379,7 @@\n           it 'redirects to the first topic the user was invited to' do\n             put \"/invites/show/#{invite.invite_key}.json\"\n             expect(response.status).to eq(200)\n-            json = response.parsed_body\n-            expect(json[\"success\"]).to eq(true)\n-            expect(json[\"redirect_to\"]).to eq(topic.relative_url)\n+            expect(response.parsed_body[\"redirect_to\"]).to eq(topic.relative_url)\n           end\n \n           context \"if a timezone guess is provided\" do\n@@ -406,10 +396,8 @@\n         context 'failure' do\n           it \"doesn't log in the user if there's a validation error\" do\n             put \"/invites/show/#{invite.invite_key}.json\", params: { password: \"password\" }\n-            expect(response.status).to eq(200)\n-            json = response.parsed_body\n-            expect(json[\"success\"]).to eq(false)\n-            expect(json[\"errors\"][\"password\"]).to be_present\n+            expect(response.status).to eq(412)\n+            expect(response.parsed_body[\"errors\"][\"password\"]).to be_present\n           end\n         end\n \n@@ -418,7 +406,6 @@\n             user.send_welcome_message = true\n             put \"/invites/show/#{invite.invite_key}.json\"\n             expect(response.status).to eq(200)\n-            expect(response.parsed_body[\"success\"]).to eq(true)\n \n             expect(Jobs::SendSystemMessage.jobs.size).to eq(1)\n           end\n@@ -474,7 +461,6 @@\n                 end.to change { UserAuthToken.count }.by(1)\n \n                 expect(response.status).to eq(200)\n-                expect(response.parsed_body[\"success\"]).to eq(true)\n \n                 expect(Jobs::InvitePasswordInstructionsEmail.jobs.size).to eq(0)\n                 expect(Jobs::CriticalUserEmail.jobs.size).to eq(0)\n@@ -494,7 +480,6 @@\n                 end.not_to change { UserAuthToken.count }\n \n                 expect(response.status).to eq(200)\n-                expect(response.parsed_body[\"success\"]).to eq(true)\n                 expect(response.parsed_body[\"message\"]).to eq(I18n.t(\"invite.confirm_email\"))\n \n                 invited_user = User.find_by_email(invite.email)\n@@ -527,7 +512,6 @@\n         end.not_to change { UserAuthToken.count }\n \n         expect(response.status).to eq(200)\n-        expect(response.parsed_body[\"success\"]).to eq(true)\n         expect(response.parsed_body[\"message\"]).to eq(I18n.t(\"invite.confirm_email\"))\n \n         invite_link.reload\n@@ -553,9 +537,7 @@\n     context 'new registrations are disabled' do\n       fab!(:topic) { Fabricate(:topic) }\n \n-      let(:invite) do\n-        Invite.invite_by_email(\"iceking@adventuretime.ooo\", topic.user, topic)\n-      end\n+      let(:invite) { Invite.generate(topic.user, email: \"iceking@adventuretime.ooo\", topic: topic) }\n \n       before { SiteSetting.allow_new_registrations = false }\n \n@@ -572,9 +554,7 @@\n     context 'user is already logged in' do\n       fab!(:topic) { Fabricate(:topic) }\n \n-      let(:invite) do\n-        Invite.invite_by_email(\"iceking@adventuretime.ooo\", topic.user, topic)\n-      end\n+      let(:invite) { Invite.generate(topic.user, email: \"iceking@adventuretime.ooo\", topic: topic) }\n \n       let!(:user) { sign_in(Fabricate(:user)) }\n \n@@ -589,6 +569,26 @@\n     end\n   end\n \n+  context \"#destroy_all\" do\n+    it 'removes all expired invites sent by a user' do\n+      SiteSetting.invite_expiry_days = 1\n+\n+      user = Fabricate(:admin)\n+      invite_1 = Fabricate(:invite, invited_by: user)\n+      invite_2 = Fabricate(:invite, invited_by: user)\n+      expired_invite = Fabricate(:invite, invited_by: user)\n+      expired_invite.update!(expires_at: 2.days.ago)\n+\n+      sign_in(user)\n+      post \"/invites/destroy-all-expired\"\n+\n+      expect(response.status).to eq(200)\n+      expect(invite_1.reload.deleted_at).to eq(nil)\n+      expect(invite_2.reload.deleted_at).to eq(nil)\n+      expect(expired_invite.reload.deleted_at).to be_present\n+    end\n+  end\n+\n   context '#resend_invite' do\n     it 'requires you to be logged in' do\n       post \"/invites/reinvite.json\", params: { email: 'first_name@example.com' }\n@@ -623,6 +623,28 @@\n     end\n   end\n \n+  context '#resend_all_invites' do\n+    it 'resends all non-redeemed invites by a user' do\n+      SiteSetting.invite_expiry_days = 30\n+\n+      user = Fabricate(:admin)\n+      new_invite = Fabricate(:invite, invited_by: user)\n+      expired_invite = Fabricate(:invite, invited_by: user)\n+      expired_invite.update!(expires_at: 2.days.ago)\n+      redeemed_invite = Fabricate(:invite, invited_by: user)\n+      Fabricate(:invited_user, invite: redeemed_invite, user: Fabricate(:user))\n+      redeemed_invite.update!(expires_at: 5.days.ago)\n+\n+      sign_in(user)\n+      post \"/invites/reinvite-all\"\n+\n+      expect(response.status).to eq(200)\n+      expect(new_invite.reload.expires_at.to_date).to eq(30.days.from_now.to_date)\n+      expect(expired_invite.reload.expires_at.to_date).to eq(30.days.from_now.to_date)\n+      expect(redeemed_invite.reload.expires_at.to_date).to eq(5.days.ago.to_date)\n+    end\n+  end\n+\n   context '#upload_csv' do\n     it 'requires you to be logged in' do\n       post \"/invites/upload_csv.json\"\n@@ -658,8 +680,7 @@\n \n         expect(response.status).to eq(422)\n         expect(Jobs::BulkInvite.jobs.size).to eq(1)\n-        json = response.parsed_body\n-        expect(json[\"errors\"][0]).to eq(I18n.t(\"bulk_invite.max_rows\", max_bulk_invites: SiteSetting.max_bulk_invites))\n+        expect(response.parsed_body[\"errors\"][0]).to eq(I18n.t(\"bulk_invite.max_rows\", max_bulk_invites: SiteSetting.max_bulk_invites))\n       end\n     end\n   end"
    },
    {
      "sha": "dca299f508cf86a700b211e107bf93c05725b428",
      "filename": "spec/requests/users_controller_spec.rb",
      "status": "modified",
      "additions": 24,
      "deletions": 44,
      "changes": 68,
      "blob_url": "https://github.com/discourse/discourse/blob/c047640ad4547cef87bf2c2a8326e210d0b276dd/spec/requests/users_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/c047640ad4547cef87bf2c2a8326e210d0b276dd/spec/requests/users_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/users_controller_spec.rb?ref=c047640ad4547cef87bf2c2a8326e210d0b276dd",
      "patch": "@@ -1584,28 +1584,6 @@ def post_user(extra_params = {})\n     end\n   end\n \n-  describe \"#invited_count\" do\n-    it \"fails for anonymous users\" do\n-      user = Fabricate(:user)\n-      get \"/u/#{user.username}/invited_count.json\"\n-      expect(response.status).to eq(422)\n-    end\n-\n-    it \"works for users who can see invites\" do\n-      inviter = Fabricate(:user, trust_level: 2)\n-      sign_in(inviter)\n-      invitee = Fabricate(:user)\n-      _invite = Fabricate(:invite, invited_by: inviter)\n-      Fabricate(:invited_user, invite: _invite, user: invitee)\n-      get \"/u/#{user.username}/invited_count.json\"\n-      expect(response.status).to eq(200)\n-\n-      json = response.parsed_body\n-      expect(json).to be_present\n-      expect(json['counts']).to be_present\n-    end\n-  end\n-\n   describe '#invited' do\n     it 'fails for anonymous users' do\n       user = Fabricate(:user)\n@@ -1616,10 +1594,14 @@ def post_user(extra_params = {})\n \n     it 'returns success' do\n       user = Fabricate(:user, trust_level: 2)\n+      Fabricate(:invite, invited_by: user)\n+\n       sign_in(user)\n       get \"/u/#{user.username}/invited.json\", params: { username: user.username }\n \n       expect(response.status).to eq(200)\n+      expect(response.parsed_body[\"counts\"][\"pending\"]).to eq(1)\n+      expect(response.parsed_body[\"counts\"][\"total\"]).to eq(1)\n     end\n \n     it 'filters by all if viewing self' do\n@@ -1748,32 +1730,13 @@ def post_user(extra_params = {})\n             expect(response.status).to eq(422)\n           end\n         end\n-      end\n \n-      context 'with redeemed invites' do\n-        it 'returns invites' do\n-          sign_in(Fabricate(:moderator))\n-          inviter = Fabricate(:user)\n-          invitee = Fabricate(:user)\n-          invite = Fabricate(:invite, invited_by: inviter)\n-          Fabricate(:invited_user, invite: invite, user: invitee)\n-\n-          get \"/u/#{inviter.username}/invited.json\"\n-          expect(response.status).to eq(200)\n-\n-          invites = response.parsed_body['invites']\n-          expect(invites.size).to eq(1)\n-          expect(invites[0]).to include('id' => invite.id)\n-        end\n-      end\n-\n-      context 'with invite links' do\n         context 'with permission to see invite links' do\n           it 'returns invites' do\n             inviter = sign_in(Fabricate(:admin))\n             invite = Fabricate(:invite, invited_by: inviter,  email: nil, max_redemptions_allowed: 5, expires_at: 1.month.from_now, emailed_status: Invite.emailed_status_types[:not_required])\n \n-            get \"/u/#{inviter.username}/invite_links.json\"\n+            get \"/u/#{inviter.username}/invited/pending.json\"\n             expect(response.status).to eq(200)\n \n             invites = response.parsed_body['invites']\n@@ -1788,7 +1751,7 @@ def post_user(extra_params = {})\n             inviter = Fabricate(:admin)\n             Fabricate(:invite, invited_by: inviter,  email: nil, max_redemptions_allowed: 5, expires_at: 1.month.from_now, emailed_status: Invite.emailed_status_types[:not_required])\n \n-            get \"/u/#{inviter.username}/invite_links.json\"\n+            get \"/u/#{inviter.username}/invited/pending.json\"\n             expect(response.status).to eq(403)\n           end\n         end\n@@ -1799,7 +1762,7 @@ def post_user(extra_params = {})\n             inviter = sign_in(Fabricate(:admin))\n             Fabricate(:invite, invited_by: inviter,  email: nil, max_redemptions_allowed: 5, expires_at: 1.month.from_now, emailed_status: Invite.emailed_status_types[:not_required])\n \n-            get \"/u/#{inviter.username}/invite_links.json\"\n+            get \"/u/#{inviter.username}/invited/pending.json\"\n             expect(response.status).to eq(200)\n \n             expect(response.parsed_body['error']).to include(I18n.t(\n@@ -1808,6 +1771,23 @@ def post_user(extra_params = {})\n           end\n         end\n       end\n+\n+      context 'with redeemed invites' do\n+        it 'returns invites' do\n+          sign_in(Fabricate(:moderator))\n+          inviter = Fabricate(:user)\n+          invitee = Fabricate(:user)\n+          invite = Fabricate(:invite, invited_by: inviter)\n+          Fabricate(:invited_user, invite: invite, user: invitee)\n+\n+          get \"/u/#{inviter.username}/invited.json\"\n+          expect(response.status).to eq(200)\n+\n+          invites = response.parsed_body['invites']\n+          expect(invites.size).to eq(1)\n+          expect(invites[0]).to include('id' => invite.id)\n+        end\n+      end\n     end\n   end\n "
    }
  ]
}
