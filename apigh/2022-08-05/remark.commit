{
  "sha": "a9836aaea08000d08606050b0f874d0764f345bf",
  "node_id": "C_kwDOBtgov9oAKGE5ODM2YWFlYTA4MDAwZDA4NjA2MDUwYjBmODc0ZDA3NjRmMzQ1YmY",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2022-07-27T01:35:52Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2022-08-03T20:41:02Z"
    },
    "message": "move static web files from rakyll/statik to go:embed\n\nThere is no need for the rakyll/statik package starting with Go 1.16,\nwhich provides us with tools for embedding files\nwithout third-party libraries.",
    "tree": {
      "sha": "b5efbb230d61ff9ea8ef4a8fe30cd41bbf516af7",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/b5efbb230d61ff9ea8ef4a8fe30cd41bbf516af7"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/a9836aaea08000d08606050b0f874d0764f345bf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/a9836aaea08000d08606050b0f874d0764f345bf",
  "html_url": "https://github.com/umputun/remark42/commit/a9836aaea08000d08606050b0f874d0764f345bf",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/a9836aaea08000d08606050b0f874d0764f345bf/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "27b28dba0d2e12f6b03b2fd3bc55386223be7ac1",
      "url": "https://api.github.com/repos/umputun/remark42/commits/27b28dba0d2e12f6b03b2fd3bc55386223be7ac1",
      "html_url": "https://github.com/umputun/remark42/commit/27b28dba0d2e12f6b03b2fd3bc55386223be7ac1"
    }
  ],
  "stats": {
    "total": 630,
    "additions": 62,
    "deletions": 568
  },
  "files": [
    {
      "sha": "04a841f1101177ec36e34084c01b14814fbde0a2",
      "filename": ".gitignore",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/.gitignore",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/.gitignore",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/.gitignore?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -4,7 +4,6 @@ target\n /logs/\n /target/\n /var/\n-/web/\n debug\n debug.test\n .vscode\n@@ -18,7 +17,7 @@ remark42\n /bin/\n /backend/var/\n /backend/app/var/\n-/backend/web/\n+/backend/app/cmd/web/\n /backend/*.html.tmpl\n compose-private-backend.yml\n compose-private-frontend.yml"
    },
    {
      "sha": "04cdbcb49b6449cb141eadb5f1585981699daeb2",
      "filename": "Dockerfile",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/Dockerfile",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/Dockerfile",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/Dockerfile?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -55,6 +55,9 @@ ARG SKIP_BACKEND_TEST\n ARG BACKEND_TEST_TIMEOUT\n \n ADD backend /build/backend\n+# to embed the frontend files statically into Remark42 binary\n+COPY --from=build-frontend /srv/frontend/apps/remark42/public/ /build/backend/app/cmd/web/\n+RUN find /build/backend/app/cmd/web/ -regex '.*\\.\\(html\\|js\\|mjs\\)$' -print -exec sed -i \"s|{% REMARK_URL %}|http://127.0.0.1:8080|g\" {} \\;\n WORKDIR /build/backend\n \n # install gcc in order to be able to go test package with -race\n@@ -108,6 +111,5 @@ RUN ln -s /srv/remark42 /usr/bin/remark42\n EXPOSE 8080\n HEALTHCHECK --interval=30s --timeout=3s CMD curl --fail http://localhost:8080/ping || exit 1\n \n-\n RUN chmod +x /srv/init.sh\n CMD [\"/srv/remark42\", \"server\"]"
    },
    {
      "sha": "39321dd181f30d8ed8851ebf9e0cb230162788f2",
      "filename": "Dockerfile.artifacts",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/Dockerfile.artifacts",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/Dockerfile.artifacts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/Dockerfile.artifacts?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -30,14 +30,9 @@ ADD backend /build/backend\n ADD README.md /build/\n ADD LICENSE /build/\n \n-COPY --from=build-frontend /srv/frontend/apps/remark42/public/ /build/backend/web/\n+COPY --from=build-frontend /srv/frontend/apps/remark42/public/ /build/backend/app/cmd/web/\n \n-RUN \\\n-    export WEB_ROOT=/build/backend/web && \\\n-    find . -regex '.*\\.\\(html\\|js\\|mjs\\)$' -print -exec sed -i \"s|{% REMARK_URL %}|http://127.0.0.1:8080|g\" {} \\; && \\\n-    statik --src=${WEB_ROOT} --dest=/build/backend/app/rest -p api -f && \\\n-    ls -la /build/backend/app/rest/api/statik.go && \\\n-    ls -la /build/backend/web/\n+RUN find /build/backend/app/cmd/web/ -regex '.*\\.\\(html\\|js\\|mjs\\)$' -print -exec sed -i \"s|{% REMARK_URL %}|http://127.0.0.1:8080|g\" {} \\;\n \n RUN \\\n   version=$(\"/script/version.sh\") && echo \"version=${version}\" && \\"
    },
    {
      "sha": "5a6c73b7ce2dd218ba0e3ddc1661eac7346e8388",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fapp%2Fcmd%2Fserver.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fapp%2Fcmd%2Fserver.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fserver.go?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -2,6 +2,7 @@ package cmd\n \n import (\n \t\"context\"\n+\t\"embed\"\n \t\"fmt\"\n \t\"net/http\"\n \t\"net/url\"\n@@ -41,6 +42,9 @@ import (\n \t\"github.com/umputun/remark42/backend/app/templates\"\n )\n \n+//go:embed web\n+var webFS embed.FS\n+\n // ServerCommand with command line flags and env\n type ServerCommand struct {\n \tStore      StoreGroup      `group:\"store\" namespace:\"store\" env-namespace:\"STORE\"`\n@@ -556,6 +560,7 @@ func (s *ServerCommand) newServerApp(ctx context.Context) (*serverApp, error) {\n \t\tVersion:             s.Revision,\n \t\tDataService:         dataService,\n \t\tWebRoot:             s.WebRoot,\n+\t\tWebFS:               webFS,\n \t\tRemarkURL:           s.RemarkURL,\n \t\tImageProxy:          imgProxy,\n \t\tCommentFormatter:    commentFormatter,"
    },
    {
      "sha": "0e34ff8f9d98883eb4c1293be46a7b1401533117",
      "filename": "backend/app/cmd/web/index.html",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fapp%2Fcmd%2Fweb%2Findex.html",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fapp%2Fcmd%2Fweb%2Findex.html",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fweb%2Findex.html?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -0,0 +1 @@\n+This stub page would be replaced by the frontend statically built HTML during the Docker image build."
    },
    {
      "sha": "1b7ede59155005a8b7b4732b390644031b3da142",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 18,
      "deletions": 21,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fapp%2Frest%2Fapi%2Frest.go",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fapp%2Frest%2Fapi%2Frest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest.go?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -3,10 +3,13 @@ package api\n import (\n \t\"bytes\"\n \t\"context\"\n+\t\"embed\"\n \t\"encoding/json\"\n \t\"fmt\"\n+\t\"io/fs\"\n \t\"net/http\"\n \t\"net/mail\"\n+\t\"os\"\n \t\"regexp\"\n \t\"strings\"\n \t\"sync\"\n@@ -23,7 +26,6 @@ import (\n \tlog \"github.com/go-pkgz/lgr\"\n \tR \"github.com/go-pkgz/rest\"\n \t\"github.com/go-pkgz/rest/logger\"\n-\t\"github.com/rakyll/statik/fs\"\n \n \t\"github.com/umputun/remark42/backend/app/notify\"\n \t\"github.com/umputun/remark42/backend/app/rest\"\n@@ -49,6 +51,7 @@ type Rest struct {\n \n \tAnonVote        bool\n \tWebRoot         string\n+\tWebFS           embed.FS\n \tRemarkURL       string\n \tReadOnlyAge     int\n \tSharedSecret    string\n@@ -351,8 +354,8 @@ func (s *Rest) routes() chi.Router {\n \t\trroot.Post(\"/email/unsubscribe.html\", s.privRest.emailUnsubscribeCtrl)\n \t})\n \n-\t// file server for static content from /web\n-\taddFileServer(router, \"/web\", http.Dir(s.WebRoot), s.Version)\n+\t// file server for static content from s.WebRoot on path /web\n+\taddFileServer(router, s.WebFS, s.WebRoot, s.Version)\n \treturn router\n }\n \n@@ -463,34 +466,28 @@ func (s *Rest) configCtrl(w http.ResponseWriter, r *http.Request) {\n \trender.JSON(w, r, cnf)\n }\n \n-// serves static files from /web or embedded by statik\n-func addFileServer(r chi.Router, path string, root http.FileSystem, version string) {\n+// serves static files from the webRoot directory or files embedded into the compiled binary if that directory is absent\n+func addFileServer(r chi.Router, embedFS embed.FS, webRoot, version string) {\n \tvar webFS http.Handler\n \n-\tstatikFS, err := fs.New()\n-\tif err != nil {\n-\t\tlog.Printf(\"[DEBUG] no embedded assets loaded, %s\", err)\n-\t\tlog.Printf(\"[INFO] run file server for %s, path %s\", root, path)\n-\t\twebFS = http.FileServer(root)\n+\tif _, err := os.Stat(webRoot); err == nil {\n+\t\tlog.Printf(\"[INFO] run file server from %s from the disk\", webRoot)\n+\t\twebFS = http.FileServer(http.Dir(webRoot))\n \t} else {\n-\t\tlog.Printf(\"[INFO] run file server for %s, embedded\", root)\n-\t\twebFS = http.FileServer(statikFS)\n+\t\tlog.Printf(\"[INFO] run file server, embedded\")\n+\t\tvar contentFS, _ = fs.Sub(embedFS, \"web\")\n+\t\twebFS = http.FileServer(http.FS(contentFS))\n \t}\n \n-\torigPath := path\n-\twebFS = http.StripPrefix(path, webFS)\n-\tif path != \"/\" && path[len(path)-1] != '/' {\n-\t\tr.Get(path, http.RedirectHandler(path+\"/\", http.StatusMovedPermanently).ServeHTTP)\n-\t\tpath += \"/\"\n-\t}\n-\tpath += \"*\"\n+\twebFS = http.StripPrefix(\"/web\", webFS)\n+\tr.Get(\"/web\", http.RedirectHandler(\"/web/\", http.StatusMovedPermanently).ServeHTTP)\n \n \tr.With(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(20, nil)),\n \t\tmiddleware.Timeout(10*time.Second),\n \t\tcacheControl(time.Hour, version),\n-\t).Get(path, func(w http.ResponseWriter, r *http.Request) {\n+\t).Get(\"/web/*\", func(w http.ResponseWriter, r *http.Request) {\n \t\t// don't show dirs, just serve files\n-\t\tif strings.HasSuffix(r.URL.Path, \"/\") && len(r.URL.Path) > 1 && r.URL.Path != (origPath+\"/\") {\n+\t\tif strings.HasSuffix(r.URL.Path, \"/\") && len(r.URL.Path) > 1 && r.URL.Path != (\"/web/\") {\n \t\t\thttp.NotFound(w, r)\n \t\t\treturn\n \t\t}"
    },
    {
      "sha": "390e0a13eab39f44c0a82f09953f5a17cef99047",
      "filename": "backend/go.mod",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fgo.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fgo.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fgo.mod?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -26,7 +26,6 @@ require (\n \tgithub.com/jessevdk/go-flags v1.5.0\n \tgithub.com/kyokomi/emoji/v2 v2.2.9\n \tgithub.com/microcosm-cc/bluemonday v1.0.19\n-\tgithub.com/rakyll/statik v0.1.7\n \tgithub.com/rs/xid v1.4.0\n \tgithub.com/russross/blackfriday/v2 v2.1.0\n \tgithub.com/skip2/go-qrcode v0.0.0-20200617195104-da1b6568686e"
    },
    {
      "sha": "e354915524e657300ea111e211ed3fb635cbb469",
      "filename": "backend/go.sum",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fgo.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fgo.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fgo.sum?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -316,8 +316,6 @@ github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINE\n github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\n github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\n github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\n-github.com/rakyll/statik v0.1.7 h1:OF3QCZUuyPxuGEP7B4ypUa7sB/iHtqOTDYZXGM8KOdQ=\n-github.com/rakyll/statik v0.1.7/go.mod h1:AlZONWzMtEnMs7W4e/1LURLiI49pIMmp6V9Unghqrcc=\n github.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=\n github.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\n github.com/rs/xid v1.4.0 h1:qd7wPTDkN6KQx2VmMBLrpHkiyQwgFXRnkOLacUiaSNY="
    },
    {
      "sha": "a4c5efd822fb2c4aaf6d946aded2738b9bf7d603",
      "filename": "backend/vendor/github.com/rakyll/statik/LICENSE",
      "status": "removed",
      "additions": 0,
      "deletions": 202,
      "changes": 202,
      "blob_url": "https://github.com/umputun/remark42/blob/27b28dba0d2e12f6b03b2fd3bc55386223be7ac1/backend%2Fvendor%2Fgithub.com%2Frakyll%2Fstatik%2FLICENSE",
      "raw_url": "https://github.com/umputun/remark42/raw/27b28dba0d2e12f6b03b2fd3bc55386223be7ac1/backend%2Fvendor%2Fgithub.com%2Frakyll%2Fstatik%2FLICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Frakyll%2Fstatik%2FLICENSE?ref=27b28dba0d2e12f6b03b2fd3bc55386223be7ac1",
      "patch": "@@ -1,202 +0,0 @@\n-\n-                                 Apache License\n-                           Version 2.0, January 2004\n-                        http://www.apache.org/licenses/\n-\n-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n-\n-   1. Definitions.\n-\n-      \"License\" shall mean the terms and conditions for use, reproduction,\n-      and distribution as defined by Sections 1 through 9 of this document.\n-\n-      \"Licensor\" shall mean the copyright owner or entity authorized by\n-      the copyright owner that is granting the License.\n-\n-      \"Legal Entity\" shall mean the union of the acting entity and all\n-      other entities that control, are controlled by, or are under common\n-      control with that entity. For the purposes of this definition,\n-      \"control\" means (i) the power, direct or indirect, to cause the\n-      direction or management of such entity, whether by contract or\n-      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n-      outstanding shares, or (iii) beneficial ownership of such entity.\n-\n-      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n-      exercising permissions granted by this License.\n-\n-      \"Source\" form shall mean the preferred form for making modifications,\n-      including but not limited to software source code, documentation\n-      source, and configuration files.\n-\n-      \"Object\" form shall mean any form resulting from mechanical\n-      transformation or translation of a Source form, including but\n-      not limited to compiled object code, generated documentation,\n-      and conversions to other media types.\n-\n-      \"Work\" shall mean the work of authorship, whether in Source or\n-      Object form, made available under the License, as indicated by a\n-      copyright notice that is included in or attached to the work\n-      (an example is provided in the Appendix below).\n-\n-      \"Derivative Works\" shall mean any work, whether in Source or Object\n-      form, that is based on (or derived from) the Work and for which the\n-      editorial revisions, annotations, elaborations, or other modifications\n-      represent, as a whole, an original work of authorship. For the purposes\n-      of this License, Derivative Works shall not include works that remain\n-      separable from, or merely link (or bind by name) to the interfaces of,\n-      the Work and Derivative Works thereof.\n-\n-      \"Contribution\" shall mean any work of authorship, including\n-      the original version of the Work and any modifications or additions\n-      to that Work or Derivative Works thereof, that is intentionally\n-      submitted to Licensor for inclusion in the Work by the copyright owner\n-      or by an individual or Legal Entity authorized to submit on behalf of\n-      the copyright owner. For the purposes of this definition, \"submitted\"\n-      means any form of electronic, verbal, or written communication sent\n-      to the Licensor or its representatives, including but not limited to\n-      communication on electronic mailing lists, source code control systems,\n-      and issue tracking systems that are managed by, or on behalf of, the\n-      Licensor for the purpose of discussing and improving the Work, but\n-      excluding communication that is conspicuously marked or otherwise\n-      designated in writing by the copyright owner as \"Not a Contribution.\"\n-\n-      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n-      on behalf of whom a Contribution has been received by Licensor and\n-      subsequently incorporated within the Work.\n-\n-   2. Grant of Copyright License. Subject to the terms and conditions of\n-      this License, each Contributor hereby grants to You a perpetual,\n-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n-      copyright license to reproduce, prepare Derivative Works of,\n-      publicly display, publicly perform, sublicense, and distribute the\n-      Work and such Derivative Works in Source or Object form.\n-\n-   3. Grant of Patent License. Subject to the terms and conditions of\n-      this License, each Contributor hereby grants to You a perpetual,\n-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n-      (except as stated in this section) patent license to make, have made,\n-      use, offer to sell, sell, import, and otherwise transfer the Work,\n-      where such license applies only to those patent claims licensable\n-      by such Contributor that are necessarily infringed by their\n-      Contribution(s) alone or by combination of their Contribution(s)\n-      with the Work to which such Contribution(s) was submitted. If You\n-      institute patent litigation against any entity (including a\n-      cross-claim or counterclaim in a lawsuit) alleging that the Work\n-      or a Contribution incorporated within the Work constitutes direct\n-      or contributory patent infringement, then any patent licenses\n-      granted to You under this License for that Work shall terminate\n-      as of the date such litigation is filed.\n-\n-   4. Redistribution. You may reproduce and distribute copies of the\n-      Work or Derivative Works thereof in any medium, with or without\n-      modifications, and in Source or Object form, provided that You\n-      meet the following conditions:\n-\n-      (a) You must give any other recipients of the Work or\n-          Derivative Works a copy of this License; and\n-\n-      (b) You must cause any modified files to carry prominent notices\n-          stating that You changed the files; and\n-\n-      (c) You must retain, in the Source form of any Derivative Works\n-          that You distribute, all copyright, patent, trademark, and\n-          attribution notices from the Source form of the Work,\n-          excluding those notices that do not pertain to any part of\n-          the Derivative Works; and\n-\n-      (d) If the Work includes a \"NOTICE\" text file as part of its\n-          distribution, then any Derivative Works that You distribute must\n-          include a readable copy of the attribution notices contained\n-          within such NOTICE file, excluding those notices that do not\n-          pertain to any part of the Derivative Works, in at least one\n-          of the following places: within a NOTICE text file distributed\n-          as part of the Derivative Works; within the Source form or\n-          documentation, if provided along with the Derivative Works; or,\n-          within a display generated by the Derivative Works, if and\n-          wherever such third-party notices normally appear. The contents\n-          of the NOTICE file are for informational purposes only and\n-          do not modify the License. You may add Your own attribution\n-          notices within Derivative Works that You distribute, alongside\n-          or as an addendum to the NOTICE text from the Work, provided\n-          that such additional attribution notices cannot be construed\n-          as modifying the License.\n-\n-      You may add Your own copyright statement to Your modifications and\n-      may provide additional or different license terms and conditions\n-      for use, reproduction, or distribution of Your modifications, or\n-      for any such Derivative Works as a whole, provided Your use,\n-      reproduction, and distribution of the Work otherwise complies with\n-      the conditions stated in this License.\n-\n-   5. Submission of Contributions. Unless You explicitly state otherwise,\n-      any Contribution intentionally submitted for inclusion in the Work\n-      by You to the Licensor shall be under the terms and conditions of\n-      this License, without any additional terms or conditions.\n-      Notwithstanding the above, nothing herein shall supersede or modify\n-      the terms of any separate license agreement you may have executed\n-      with Licensor regarding such Contributions.\n-\n-   6. Trademarks. This License does not grant permission to use the trade\n-      names, trademarks, service marks, or product names of the Licensor,\n-      except as required for reasonable and customary use in describing the\n-      origin of the Work and reproducing the content of the NOTICE file.\n-\n-   7. Disclaimer of Warranty. Unless required by applicable law or\n-      agreed to in writing, Licensor provides the Work (and each\n-      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-      implied, including, without limitation, any warranties or conditions\n-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n-      PARTICULAR PURPOSE. You are solely responsible for determining the\n-      appropriateness of using or redistributing the Work and assume any\n-      risks associated with Your exercise of permissions under this License.\n-\n-   8. Limitation of Liability. In no event and under no legal theory,\n-      whether in tort (including negligence), contract, or otherwise,\n-      unless required by applicable law (such as deliberate and grossly\n-      negligent acts) or agreed to in writing, shall any Contributor be\n-      liable to You for damages, including any direct, indirect, special,\n-      incidental, or consequential damages of any character arising as a\n-      result of this License or out of the use or inability to use the\n-      Work (including but not limited to damages for loss of goodwill,\n-      work stoppage, computer failure or malfunction, or any and all\n-      other commercial damages or losses), even if such Contributor\n-      has been advised of the possibility of such damages.\n-\n-   9. Accepting Warranty or Additional Liability. While redistributing\n-      the Work or Derivative Works thereof, You may choose to offer,\n-      and charge a fee for, acceptance of support, warranty, indemnity,\n-      or other liability obligations and/or rights consistent with this\n-      License. However, in accepting such obligations, You may act only\n-      on Your own behalf and on Your sole responsibility, not on behalf\n-      of any other Contributor, and only if You agree to indemnify,\n-      defend, and hold each Contributor harmless for any liability\n-      incurred by, or claims asserted against, such Contributor by reason\n-      of your accepting any such warranty or additional liability.\n-\n-   END OF TERMS AND CONDITIONS\n-\n-   APPENDIX: How to apply the Apache License to your work.\n-\n-      To apply the Apache License to your work, attach the following\n-      boilerplate notice, with the fields enclosed by brackets \"[]\"\n-      replaced with your own identifying information. (Don't include\n-      the brackets!)  The text should be enclosed in the appropriate\n-      comment syntax for the file format. We also recommend that a\n-      file or class name and description of purpose be included on the\n-      same \"printed page\" as the copyright notice for easier\n-      identification within third-party archives.\n-\n-   Copyright 2014 Google Inc.\n-\n-   Licensed under the Apache License, Version 2.0 (the \"License\");\n-   you may not use this file except in compliance with the License.\n-   You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License."
    },
    {
      "sha": "5a5b46f2f48484e6e1f0ed57fe9cc41782296438",
      "filename": "backend/vendor/github.com/rakyll/statik/fs/fs.go",
      "status": "removed",
      "additions": 0,
      "deletions": 238,
      "changes": 238,
      "blob_url": "https://github.com/umputun/remark42/blob/27b28dba0d2e12f6b03b2fd3bc55386223be7ac1/backend%2Fvendor%2Fgithub.com%2Frakyll%2Fstatik%2Ffs%2Ffs.go",
      "raw_url": "https://github.com/umputun/remark42/raw/27b28dba0d2e12f6b03b2fd3bc55386223be7ac1/backend%2Fvendor%2Fgithub.com%2Frakyll%2Fstatik%2Ffs%2Ffs.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Frakyll%2Fstatik%2Ffs%2Ffs.go?ref=27b28dba0d2e12f6b03b2fd3bc55386223be7ac1",
      "patch": "@@ -1,238 +0,0 @@\n-// Copyright 2014 Google Inc. All Rights Reserved.\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//      http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-// Package fs contains an HTTP file system that works with zip contents.\n-package fs\n-\n-import (\n-\t\"archive/zip\"\n-\t\"bytes\"\n-\t\"errors\"\n-\t\"fmt\"\n-\t\"io\"\n-\t\"io/ioutil\"\n-\t\"net/http\"\n-\t\"os\"\n-\t\"path\"\n-\t\"path/filepath\"\n-\t\"sort\"\n-\t\"strings\"\n-\t\"time\"\n-)\n-\n-var zipData = map[string]string{}\n-\n-// file holds unzipped read-only file contents and file metadata.\n-type file struct {\n-\tos.FileInfo\n-\tdata []byte\n-\tfs   *statikFS\n-}\n-\n-type statikFS struct {\n-\tfiles map[string]file\n-\tdirs  map[string][]string\n-}\n-\n-const defaultNamespace = \"default\"\n-\n-// IsDefaultNamespace returns true if the assetNamespace is\n-// the default one\n-func IsDefaultNamespace(assetNamespace string) bool {\n-\treturn assetNamespace == defaultNamespace\n-}\n-\n-// Register registers zip contents data, later used to initialize\n-// the statik file system.\n-func Register(data string) {\n-\tRegisterWithNamespace(defaultNamespace, data)\n-}\n-\n-// RegisterWithNamespace registers zip contents data and set asset namespace,\n-// later used to initialize the statik file system.\n-func RegisterWithNamespace(assetNamespace string, data string) {\n-\tzipData[assetNamespace] = data\n-}\n-\n-// New creates a new file system with the default registered zip contents data.\n-// It unzips all files and stores them in an in-memory map.\n-func New() (http.FileSystem, error) {\n-\treturn NewWithNamespace(defaultNamespace)\n-}\n-\n-// NewWithNamespace creates a new file system with the registered zip contents data.\n-// It unzips all files and stores them in an in-memory map.\n-func NewWithNamespace(assetNamespace string) (http.FileSystem, error) {\n-\tasset, ok := zipData[assetNamespace]\n-\tif !ok {\n-\t\treturn nil, errors.New(\"statik/fs: no zip data registered\")\n-\t}\n-\tzipReader, err := zip.NewReader(strings.NewReader(asset), int64(len(asset)))\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\tfiles := make(map[string]file, len(zipReader.File))\n-\tdirs := make(map[string][]string)\n-\tfs := &statikFS{files: files, dirs: dirs}\n-\tfor _, zipFile := range zipReader.File {\n-\t\tfi := zipFile.FileInfo()\n-\t\tf := file{FileInfo: fi, fs: fs}\n-\t\tf.data, err = unzip(zipFile)\n-\t\tif err != nil {\n-\t\t\treturn nil, fmt.Errorf(\"statik/fs: error unzipping file %q: %s\", zipFile.Name, err)\n-\t\t}\n-\t\tfiles[\"/\"+zipFile.Name] = f\n-\t}\n-\tfor fn := range files {\n-\t\t// go up directories recursively in order to care deep directory\n-\t\tfor dn := path.Dir(fn); dn != fn; {\n-\t\t\tif _, ok := files[dn]; !ok {\n-\t\t\t\tfiles[dn] = file{FileInfo: dirInfo{dn}, fs: fs}\n-\t\t\t} else {\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t\tfn, dn = dn, path.Dir(dn)\n-\t\t}\n-\t}\n-\tfor fn := range files {\n-\t\tdn := path.Dir(fn)\n-\t\tif fn != dn {\n-\t\t\tfs.dirs[dn] = append(fs.dirs[dn], path.Base(fn))\n-\t\t}\n-\t}\n-\tfor _, s := range fs.dirs {\n-\t\tsort.Strings(s)\n-\t}\n-\treturn fs, nil\n-}\n-\n-var _ = os.FileInfo(dirInfo{})\n-\n-type dirInfo struct {\n-\tname string\n-}\n-\n-func (di dirInfo) Name() string       { return path.Base(di.name) }\n-func (di dirInfo) Size() int64        { return 0 }\n-func (di dirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }\n-func (di dirInfo) ModTime() time.Time { return time.Time{} }\n-func (di dirInfo) IsDir() bool        { return true }\n-func (di dirInfo) Sys() interface{}   { return nil }\n-\n-// Open returns a file matching the given file name, or os.ErrNotExists if\n-// no file matching the given file name is found in the archive.\n-// If a directory is requested, Open returns the file named \"index.html\"\n-// in the requested directory, if that file exists.\n-func (fs *statikFS) Open(name string) (http.File, error) {\n-\tname = filepath.ToSlash(filepath.Clean(name))\n-\tif f, ok := fs.files[name]; ok {\n-\t\treturn newHTTPFile(f), nil\n-\t}\n-\treturn nil, os.ErrNotExist\n-}\n-\n-func newHTTPFile(file file) *httpFile {\n-\tif file.IsDir() {\n-\t\treturn &httpFile{file: file, isDir: true}\n-\t}\n-\treturn &httpFile{file: file, reader: bytes.NewReader(file.data)}\n-}\n-\n-// httpFile represents an HTTP file and acts as a bridge\n-// between file and http.File.\n-type httpFile struct {\n-\tfile\n-\n-\treader *bytes.Reader\n-\tisDir  bool\n-\tdirIdx int\n-}\n-\n-// Read reads bytes into p, returns the number of read bytes.\n-func (f *httpFile) Read(p []byte) (n int, err error) {\n-\tif f.reader == nil && f.isDir {\n-\t\treturn 0, io.EOF\n-\t}\n-\treturn f.reader.Read(p)\n-}\n-\n-// Seek seeks to the offset.\n-func (f *httpFile) Seek(offset int64, whence int) (ret int64, err error) {\n-\treturn f.reader.Seek(offset, whence)\n-}\n-\n-// Stat stats the file.\n-func (f *httpFile) Stat() (os.FileInfo, error) {\n-\treturn f, nil\n-}\n-\n-// IsDir returns true if the file location represents a directory.\n-func (f *httpFile) IsDir() bool {\n-\treturn f.isDir\n-}\n-\n-// Readdir returns an empty slice of files, directory\n-// listing is disabled.\n-func (f *httpFile) Readdir(count int) ([]os.FileInfo, error) {\n-\tvar fis []os.FileInfo\n-\tif !f.isDir {\n-\t\treturn fis, nil\n-\t}\n-\tdi, ok := f.FileInfo.(dirInfo)\n-\tif !ok {\n-\t\treturn nil, fmt.Errorf(\"failed to read directory: %q\", f.Name())\n-\t}\n-\n-\t// If count is positive, the specified number of files will be returned,\n-\t// and if non-positive, all remaining files will be returned.\n-\t// The reading position of which file is returned is held in dirIndex.\n-\tfnames := f.file.fs.dirs[di.name]\n-\tflen := len(fnames)\n-\n-\t// If dirIdx reaches the end and the count is a positive value,\n-\t// an io.EOF error is returned.\n-\t// In other cases, no error will be returned even if, for example,\n-\t// you specified more counts than the number of remaining files.\n-\tstart := f.dirIdx\n-\tif start >= flen && count > 0 {\n-\t\treturn fis, io.EOF\n-\t}\n-\tvar end int\n-\tif count <= 0 {\n-\t\tend = flen\n-\t} else {\n-\t\tend = start + count\n-\t}\n-\tif end > flen {\n-\t\tend = flen\n-\t}\n-\tfor i := start; i < end; i++ {\n-\t\tfis = append(fis, f.file.fs.files[path.Join(di.name, fnames[i])].FileInfo)\n-\t}\n-\tf.dirIdx += len(fis)\n-\treturn fis, nil\n-}\n-\n-func (f *httpFile) Close() error {\n-\treturn nil\n-}\n-\n-func unzip(zf *zip.File) ([]byte, error) {\n-\trc, err := zf.Open()\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\tdefer rc.Close()\n-\treturn ioutil.ReadAll(rc)\n-}"
    },
    {
      "sha": "f4eb37d1a918c6abba73122792f2ce829e28d4f4",
      "filename": "backend/vendor/github.com/rakyll/statik/fs/walk.go",
      "status": "removed",
      "additions": 0,
      "deletions": 79,
      "changes": 79,
      "blob_url": "https://github.com/umputun/remark42/blob/27b28dba0d2e12f6b03b2fd3bc55386223be7ac1/backend%2Fvendor%2Fgithub.com%2Frakyll%2Fstatik%2Ffs%2Fwalk.go",
      "raw_url": "https://github.com/umputun/remark42/raw/27b28dba0d2e12f6b03b2fd3bc55386223be7ac1/backend%2Fvendor%2Fgithub.com%2Frakyll%2Fstatik%2Ffs%2Fwalk.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Frakyll%2Fstatik%2Ffs%2Fwalk.go?ref=27b28dba0d2e12f6b03b2fd3bc55386223be7ac1",
      "patch": "@@ -1,79 +0,0 @@\n-// Copyright 2014 Google Inc. All Rights Reserved.\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//      http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-package fs\n-\n-import (\n-\t\"bytes\"\n-\t\"io\"\n-\t\"net/http\"\n-\t\"path\"\n-\t\"path/filepath\"\n-)\n-\n-// Walk walks the file tree rooted at root,\n-// calling walkFn for each file or directory in the tree, including root.\n-// All errors that arise visiting files and directories are filtered by walkFn.\n-//\n-// As with filepath.Walk, if the walkFn returns filepath.SkipDir, then the directory is skipped.\n-func Walk(hfs http.FileSystem, root string, walkFn filepath.WalkFunc) error {\n-\tdh, err := hfs.Open(root)\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\tdi, err := dh.Stat()\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\tfis, err := dh.Readdir(-1)\n-\tdh.Close()\n-\tif err = walkFn(root, di, err); err != nil {\n-\t\tif err == filepath.SkipDir {\n-\t\t\treturn nil\n-\t\t}\n-\t\treturn err\n-\t}\n-\tfor _, fi := range fis {\n-\t\tfn := path.Join(root, fi.Name())\n-\t\tif fi.IsDir() {\n-\t\t\tif err = Walk(hfs, fn, walkFn); err != nil {\n-\t\t\t\tif err == filepath.SkipDir {\n-\t\t\t\t\tcontinue\n-\t\t\t\t}\n-\t\t\t\treturn err\n-\t\t\t}\n-\t\t\tcontinue\n-\t\t}\n-\t\tif err = walkFn(fn, fi, nil); err != nil {\n-\t\t\tif err == filepath.SkipDir {\n-\t\t\t\tcontinue\n-\t\t\t}\n-\t\t\treturn err\n-\t\t}\n-\t}\n-\treturn nil\n-}\n-\n-// ReadFile reads the contents of the file of hfs specified by name.\n-// Just as ioutil.ReadFile does.\n-func ReadFile(hfs http.FileSystem, name string) ([]byte, error) {\n-\tfh, err := hfs.Open(name)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\tvar buf bytes.Buffer\n-\t_, err = io.Copy(&buf, fh)\n-\tfh.Close()\n-\treturn buf.Bytes(), err\n-}"
    },
    {
      "sha": "c44ec46dacd4e2e05356ca76fb19622dcda1cec9",
      "filename": "backend/vendor/modules.txt",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fvendor%2Fmodules.txt",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/backend%2Fvendor%2Fmodules.txt",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fmodules.txt?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -168,9 +168,6 @@ github.com/pkg/errors\n # github.com/pmezard/go-difflib v1.0.0\n ## explicit\n github.com/pmezard/go-difflib/difflib\n-# github.com/rakyll/statik v0.1.7\n-## explicit; go 1.12\n-github.com/rakyll/statik/fs\n # github.com/rs/xid v1.4.0\n ## explicit; go 1.12\n github.com/rs/xid"
    },
    {
      "sha": "da8a6efc8c91a550e7c1b7ce80679e8177f3efae",
      "filename": "docker-init.sh",
      "status": "modified",
      "additions": 21,
      "deletions": 9,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/docker-init.sh",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/docker-init.sh",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/docker-init.sh?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -3,17 +3,29 @@ echo \"prepare environment\"\n # replace {% REMARK_URL %} by content of REMARK_URL variable\n find . -regex '.*\\.\\(html\\|js\\|mjs\\)$' -print -exec sed -i \"s|{% REMARK_URL %}|${REMARK_URL}|g\" {} \\;\n \n-if [ -n \"${SITE_ID}\" ]; then\n-  #replace \"site_id: 'remark'\" by SITE_ID\n-  sed -i \"s|'remark'|'${SITE_ID}'|g\" /srv/web/*.html\n+# replace 'site_id: \"remark\"' by the first SITE from the comma-separated list of IDs, if present\n+if [ -n \"${SITE}\" ]; then\n+\tsep=','\n+\tcase ${SITE} in\n+\t*\"$sep\"*)\n+\t\texport single_site_id=${SITE%%\"$sep\"*}\n+\t\techo \"multiple site IDs passed in SITE (\\\"${SITE}\\\"): using \\\"${single_site_id}\\\" in frontend site_id\"\n+\t\t;;\n+\t*)\n+\t\techo \"using non-standard frontend site_id from SITE variable (\\\"${SITE}\\\") instead of \\\"remark\\\"\"\n+\t\texport single_site_id=$SITE\n+\t\t;;\n+\tesac\n+\techo \"single_site_id: ${single_site_id}\"\n+\tsed -i \"s|site_id:\\\"[^\\\"]*\\\"|site_id:\\\"${single_site_id}\\\"|g\" /srv/web/*.html\n fi\n \n if [ -d \"/srv/var\" ]; then\n-  echo \"changing ownership of /srv/var to app:app (remark42 user inside the container)\"\n-  chown -R app:app /srv/var || echo \"WARNING: /srv/var ownership change failed, if application will fail that might be the reason\"\n+\techo \"changing ownership of /srv/var to app:app (remark42 user inside the container)\"\n+\tchown -R app:app /srv/var || echo \"WARNING: /srv/var ownership change failed, if application will fail that might be the reason\"\n else\n-  echo \"ERROR: /srv/var doesn't exist, which means that state of the application\"\n-  echo \"ERROR: will be lost on container stop or restart.\"\n-  echo \"ERROR: Please mount local directory to /srv/var in order for it to work.\"\n-  exit 199\n+\techo \"ERROR: /srv/var doesn't exist, which means that state of the application\"\n+\techo \"ERROR: will be lost on container stop or restart.\"\n+\techo \"ERROR: Please mount local directory to /srv/var in order for it to work.\"\n+\texit 199\n fi"
    },
    {
      "sha": "0edb01c9dab6fd7081516ad966d60b887cfc9bd1",
      "filename": "site/Dockerfile",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/site%2FDockerfile",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/site%2FDockerfile",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/site%2FDockerfile?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -7,6 +7,14 @@ RUN yarn build\n RUN ls -la /site\n \n FROM ghcr.io/umputun/reproxy\n+LABEL org.opencontainers.image.authors=\"Umputun <umputun@gmail.com>\" \\\n+      org.opencontainers.image.description=\"Remark42 site\" \\\n+      org.opencontainers.image.documentation=\"https://github.com/umputun/remark42/tree/master/site\" \\\n+      org.opencontainers.image.licenses=\"MIT\" \\\n+      org.opencontainers.image.source=\"https://github.com/umputun/remark42.git\" \\\n+      org.opencontainers.image.title=\"Remark42 site\" \\\n+      org.opencontainers.image.url=\"https://remark42.com/\"\n+\n COPY --from=build /site/build /srv/site\n EXPOSE 8080\n USER app"
    },
    {
      "sha": "7a27ce15d761aeb3de9c305ca2005ca96478b28d",
      "filename": "site/src/docs/contributing/backend/index.md",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/a9836aaea08000d08606050b0f874d0764f345bf/site%2Fsrc%2Fdocs%2Fcontributing%2Fbackend%2Findex.md",
      "raw_url": "https://github.com/umputun/remark42/raw/a9836aaea08000d08606050b0f874d0764f345bf/site%2Fsrc%2Fdocs%2Fcontributing%2Fbackend%2Findex.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/site%2Fsrc%2Fdocs%2Fcontributing%2Fbackend%2Findex.md?ref=a9836aaea08000d08606050b0f874d0764f345bf",
      "patch": "@@ -36,13 +36,13 @@ In order to have working Remark42 installation you need once to copy frontend st\n # frontend files\n docker pull umputun/remark42:master\n docker create -ti --name remark42files umputun/remark42:master sh\n-docker cp remark42files:/srv/web/ ./backend/\n+docker cp remark42files:/srv/web/ ./backend/app/cmd/\n docker rm -f remark42files\n # fix frontend files to point to the right URL\n ## Mac version\n-find -E ./backend/web -regex '.*\\.(html|js|mjs)$' -print -exec sed -i '' \"s|{% REMARK_URL %}|http://127.0.0.1:8080|g\" {} \\;\n+find -E ./backend/app/cmd/web -regex '.*\\.(html|js|mjs)$' -print -exec sed -i '' \"s|{% REMARK_URL %}|http://127.0.0.1:8080|g\" {} \\;\n ## Linux version\n-find ./backend/web -regex '.*\\.\\(html\\|js\\|mjs\\)$' -print -exec sed -i \"s|{% REMARK_URL %}|http://127.0.0.1:8080|g\" {} \\;\n+find ./backend/app/cmd/web -regex '.*\\.\\(html\\|js\\|mjs\\)$' -print -exec sed -i \"s|{% REMARK_URL %}|http://127.0.0.1:8080|g\" {} \\;\n ```\n \n To run backend - `cd backend; go run app/main.go server --dbg --secret=12345 --url=http://127.0.0.1:8080 --admin-passwd=password --site=remark`. It stars backend service with embedded bolt store on port `8080` with basic auth, allowing to authenticate and run requests directly, like this:"
    }
  ]
}
