{
  "sha": "f2842490d3ccaf9e29b0ffc43f193350334ead94",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpmMjg0MjQ5MGQzY2NhZjllMjliMGZmYzQzZjE5MzM1MDMzNGVhZDk0",
  "commit": {
    "author": {
      "name": "Daniel Waterworth",
      "email": "me@danielwaterworth.com",
      "date": "2020-09-05T15:14:45Z"
    },
    "committer": {
      "name": "Daniel Waterworth",
      "email": "me@danielwaterworth.com",
      "date": "2020-09-05T17:42:11Z"
    },
    "message": "PERF: Don't load all poll_votes for a poll",
    "tree": {
      "sha": "2362f99f25824c3cfebc8456b9f27aa77e4d1ebe",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/2362f99f25824c3cfebc8456b9f27aa77e4d1ebe"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/f2842490d3ccaf9e29b0ffc43f193350334ead94",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/f2842490d3ccaf9e29b0ffc43f193350334ead94",
  "html_url": "https://github.com/discourse/discourse/commit/f2842490d3ccaf9e29b0ffc43f193350334ead94",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/f2842490d3ccaf9e29b0ffc43f193350334ead94/comments",
  "author": {
    "login": "danielwaterworth",
    "id": 663767,
    "node_id": "MDQ6VXNlcjY2Mzc2Nw==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/663767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danielwaterworth",
    "html_url": "https://github.com/danielwaterworth",
    "followers_url": "https://api.github.com/users/danielwaterworth/followers",
    "following_url": "https://api.github.com/users/danielwaterworth/following{/other_user}",
    "gists_url": "https://api.github.com/users/danielwaterworth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danielwaterworth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danielwaterworth/subscriptions",
    "organizations_url": "https://api.github.com/users/danielwaterworth/orgs",
    "repos_url": "https://api.github.com/users/danielwaterworth/repos",
    "events_url": "https://api.github.com/users/danielwaterworth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danielwaterworth/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "danielwaterworth",
    "id": 663767,
    "node_id": "MDQ6VXNlcjY2Mzc2Nw==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/663767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danielwaterworth",
    "html_url": "https://github.com/danielwaterworth",
    "followers_url": "https://api.github.com/users/danielwaterworth/followers",
    "following_url": "https://api.github.com/users/danielwaterworth/following{/other_user}",
    "gists_url": "https://api.github.com/users/danielwaterworth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danielwaterworth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danielwaterworth/subscriptions",
    "organizations_url": "https://api.github.com/users/danielwaterworth/orgs",
    "repos_url": "https://api.github.com/users/danielwaterworth/repos",
    "events_url": "https://api.github.com/users/danielwaterworth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danielwaterworth/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "13c9d7e70431c91d03e206e2f04121bc8cb69db7",
      "url": "https://api.github.com/repos/discourse/discourse/commits/13c9d7e70431c91d03e206e2f04121bc8cb69db7",
      "html_url": "https://github.com/discourse/discourse/commit/13c9d7e70431c91d03e206e2f04121bc8cb69db7"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 16,
    "deletions": 16
  },
  "files": [
    {
      "sha": "210533836ff52757ae3e6fed272f8978b0622798",
      "filename": "plugins/poll/app/models/poll.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/f2842490d3ccaf9e29b0ffc43f193350334ead94/plugins/poll/app/models/poll.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/f2842490d3ccaf9e29b0ffc43f193350334ead94/plugins/poll/app/models/poll.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/plugins/poll/app/models/poll.rb?ref=f2842490d3ccaf9e29b0ffc43f193350334ead94",
      "patch": "@@ -55,7 +55,7 @@ def is_me?(user)\n   end\n \n   def has_voted?(user)\n-    user&.id && poll_votes.any? { |v| v.user_id == user.id }\n+    user&.id && poll_votes.where(user_id: user.id).exists?\n   end\n \n   def can_see_voters?(user)"
    },
    {
      "sha": "171eb95387f1ff1faf911fe9bb9221ac0f2e9e4c",
      "filename": "plugins/poll/app/serializers/poll_serializer.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/f2842490d3ccaf9e29b0ffc43f193350334ead94/plugins/poll/app/serializers/poll_serializer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/f2842490d3ccaf9e29b0ffc43f193350334ead94/plugins/poll/app/serializers/poll_serializer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/plugins/poll/app/serializers/poll_serializer.rb?ref=f2842490d3ccaf9e29b0ffc43f193350334ead94",
      "patch": "@@ -45,7 +45,7 @@ def options\n   end\n \n   def voters\n-    object.poll_votes.map { |v| v.user_id }.uniq.count + object.anonymous_voters.to_i\n+    object.poll_votes.count('DISTINCT user_id') + object.anonymous_voters.to_i\n   end\n \n   def close"
    },
    {
      "sha": "391610c26f175829feb63332b99fb6dc5ca362b1",
      "filename": "plugins/poll/plugin.rb",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/discourse/discourse/blob/f2842490d3ccaf9e29b0ffc43f193350334ead94/plugins/poll/plugin.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/f2842490d3ccaf9e29b0ffc43f193350334ead94/plugins/poll/plugin.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/plugins/poll/plugin.rb?ref=f2842490d3ccaf9e29b0ffc43f193350334ead94",
      "patch": "@@ -68,7 +68,7 @@ def vote(post_id, poll_name, options, user)\n             raise StandardError.new I18n.t(\"poll.user_cant_post_in_topic\")\n           end\n \n-          poll = Poll.includes(poll_options: :poll_votes).find_by(post_id: post_id, name: poll_name)\n+          poll = Poll.includes(:poll_options).find_by(post_id: post_id, name: poll_name)\n \n           raise StandardError.new I18n.t(\"poll.no_poll_with_this_name\", name: poll_name) unless poll\n           raise StandardError.new I18n.t(\"poll.poll_must_be_open_to_vote\") if poll.is_closed?\n@@ -91,18 +91,18 @@ def vote(post_id, poll_name, options, user)\n             obj << option.id if options.include?(option.digest)\n           end\n \n+          old_option_ids = poll.poll_options.each_with_object([]) do |option, obj|\n+            if option.poll_votes.where(user_id: user.id).exists?\n+              obj << option.id\n+            end\n+          end\n+\n           # remove non-selected votes\n           PollVote\n             .where(poll: poll, user: user)\n             .where.not(poll_option_id: new_option_ids)\n             .delete_all\n \n-          old_option_ids = poll.poll_options.each_with_object([]) do |option, obj|\n-            if option.poll_votes.any? { |v| v.user_id == user.id }\n-              obj << option.id\n-            end\n-          end\n-\n           # create missing votes\n           (new_option_ids - old_option_ids).each do |option_id|\n             PollVote.create!(poll: poll, user: user, poll_option_id: option_id)\n@@ -575,7 +575,6 @@ def groupable_user_fields\n \n       if post_with_polls.present?\n         Poll\n-          .includes(poll_options: :poll_votes, poll_votes: :poll_option)\n           .where(post_id: post_with_polls)\n           .each do |p|\n             polls[p.post_id] ||= []\n@@ -591,7 +590,7 @@ def groupable_user_fields\n     @preloaded_polls ||= if @topic_view.present?\n       @topic_view.polls[object.id]\n     else\n-      Poll.includes(poll_options: :poll_votes).where(post: object)\n+      Poll.includes(:poll_options).where(post: object)\n     end\n   end\n \n@@ -609,11 +608,12 @@ def groupable_user_fields\n \n   add_to_serializer(:post, :polls_votes, false) do\n     preloaded_polls.map do |poll|\n-      user_poll_votes = poll.poll_votes.each_with_object([]) do |vote, obj|\n-        if vote.user_id == scope.user.id\n-          obj << vote.poll_option.digest\n-        end\n-      end\n+      user_poll_votes =\n+        poll\n+          .poll_votes\n+          .where(user_id: scope.user.id)\n+          .joins(:poll_option)\n+          .pluck(\"poll_options.digest\")\n \n       [poll.name, user_poll_votes]\n     end.to_h"
    }
  ]
}
