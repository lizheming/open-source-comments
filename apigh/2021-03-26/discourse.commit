{
  "sha": "8de07181a84de6b268d720918c50a3609c5a60ac",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo4ZGUwNzE4MWE4NGRlNmIyNjhkNzIwOTE4YzUwYTM2MDljNWE2MGFj",
  "commit": {
    "author": {
      "name": "Martin Brennan",
      "email": "mjrbrennan@gmail.com",
      "date": "2021-03-26T03:53:47Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-03-26T03:53:47Z"
    },
    "message": "FEATURE: Add new :topic_tags_changed DiscourseEvent (#12530)\n\nThis is called in DiscourseTagging.tag_topic_by_names only after\r\nall the validations etc. have been passed, and after topic.tags = X\r\nhas been called (because this is when the associations are created/\r\ndestroyed). The event has the topic, then a second param with the\r\nold and new tag names in arrays for easy inspection.",
    "tree": {
      "sha": "bc37634c2f88cc6c0498f2cb8e2c22e2ee162271",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/bc37634c2f88cc6c0498f2cb8e2c22e2ee162271"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/8de07181a84de6b268d720918c50a3609c5a60ac",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgXVrLCRBK7hj4Ov3rIwAAdHIIAEp+f2oZaXJPj2gq5yoUN5Cn\na27obRaQ+sSE83dp8brtnNVrsiYf+GXxx8sZJ5ql3iWc7abC8559iZITeGH40k+p\nMbVzgodxSAIB0veB8pVrznY55iV71wIR8pzRID33K6PrpT3RcgmQ8MGW44WhN0p6\nYyRLs6CYmXwKyNiQ01T8UGMCsjtXjidAK267pbzq+EPxwlC4yoNCFIJe8UztP3Vv\nLGtojDJI/fKNpluQEwSqr3PM+AvlrvBF+/RMk+AizThDo9BMsjDJLe6PFmDHPjy1\nAgNp944pJCHPdkK9aIOUY96xHgwlgUqYDqJuMLhCk+NV6tvNGj9192MZd7LqyVo=\n=E4lJ\n-----END PGP SIGNATURE-----\n",
      "payload": "tree bc37634c2f88cc6c0498f2cb8e2c22e2ee162271\nparent 3bd482c6bdacdb9739bf3ec38226d4a8e70d1531\nauthor Martin Brennan <mjrbrennan@gmail.com> 1616730827 +1000\ncommitter GitHub <noreply@github.com> 1616730827 +1000\n\nFEATURE: Add new :topic_tags_changed DiscourseEvent (#12530)\n\nThis is called in DiscourseTagging.tag_topic_by_names only after\r\nall the validations etc. have been passed, and after topic.tags = X\r\nhas been called (because this is when the associations are created/\r\ndestroyed). The event has the topic, then a second param with the\r\nold and new tag names in arrays for easy inspection."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/8de07181a84de6b268d720918c50a3609c5a60ac",
  "html_url": "https://github.com/discourse/discourse/commit/8de07181a84de6b268d720918c50a3609c5a60ac",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/8de07181a84de6b268d720918c50a3609c5a60ac/comments",
  "author": {
    "login": "martin-brennan",
    "id": 920448,
    "node_id": "MDQ6VXNlcjkyMDQ0OA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/920448?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/martin-brennan",
    "html_url": "https://github.com/martin-brennan",
    "followers_url": "https://api.github.com/users/martin-brennan/followers",
    "following_url": "https://api.github.com/users/martin-brennan/following{/other_user}",
    "gists_url": "https://api.github.com/users/martin-brennan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/martin-brennan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/martin-brennan/subscriptions",
    "organizations_url": "https://api.github.com/users/martin-brennan/orgs",
    "repos_url": "https://api.github.com/users/martin-brennan/repos",
    "events_url": "https://api.github.com/users/martin-brennan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/martin-brennan/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3bd482c6bdacdb9739bf3ec38226d4a8e70d1531",
      "url": "https://api.github.com/repos/discourse/discourse/commits/3bd482c6bdacdb9739bf3ec38226d4a8e70d1531",
      "html_url": "https://github.com/discourse/discourse/commit/3bd482c6bdacdb9739bf3ec38226d4a8e70d1531"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 24,
    "deletions": 0
  },
  "files": [
    {
      "sha": "3fcd53a5fa655ddfc248dc91b18db45d2262bd96",
      "filename": "lib/discourse_tagging.rb",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/8de07181a84de6b268d720918c50a3609c5a60ac/lib/discourse_tagging.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/8de07181a84de6b268d720918c50a3609c5a60ac/lib/discourse_tagging.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/discourse_tagging.rb?ref=8de07181a84de6b268d720918c50a3609c5a60ac",
      "patch": "@@ -127,6 +127,12 @@ def self.tag_topic_by_names(topic, guardian, tag_names_arg, append: false)\n         topic.tags = []\n       end\n       topic.tags_changed = true\n+\n+      DiscourseEvent.trigger(\n+        :topic_tags_changed,\n+        topic, old_tag_names: old_tag_names, new_tag_names: topic.tags.map(&:name)\n+      )\n+\n       return true\n     end\n     false"
    },
    {
      "sha": "ffd27a88bb4b2c400e98be491c0ad259e905e756",
      "filename": "spec/components/discourse_tagging_spec.rb",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/discourse/discourse/blob/8de07181a84de6b268d720918c50a3609c5a60ac/spec/components/discourse_tagging_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/8de07181a84de6b268d720918c50a3609c5a60ac/spec/components/discourse_tagging_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/discourse_tagging_spec.rb?ref=8de07181a84de6b268d720918c50a3609c5a60ac",
      "patch": "@@ -265,12 +265,30 @@\n         expect(topic.errors[:base]&.first).to eq(I18n.t(\"tags.restricted_tag_disallowed\", tag: 'alpha'))\n       end\n \n+      it \"does not send a discourse event for regular users who can't add staff-only tags\" do\n+        events = DiscourseEvent.track_events do\n+          DiscourseTagging.tag_topic_by_names(topic, Guardian.new(user), ['alpha'])\n+        end\n+        expect(events.count).to eq(0)\n+      end\n+\n       it 'staff can add staff-only tags' do\n         valid = DiscourseTagging.tag_topic_by_names(topic, Guardian.new(admin), ['alpha'])\n         expect(valid).to eq(true)\n         expect(topic.errors[:base]).to be_empty\n       end\n \n+      it 'sends a discourse event when the staff adds a staff-only tag' do\n+        old_tag_names = topic.tags.pluck(:name)\n+        tag_changed_event = DiscourseEvent.track_events do\n+          DiscourseTagging.tag_topic_by_names(topic, Guardian.new(admin), ['alpha'])\n+        end.last\n+        expect(tag_changed_event[:event_name]).to eq(:topic_tags_changed)\n+        expect(tag_changed_event[:params].first).to eq(topic)\n+        expect(tag_changed_event[:params].second[:old_tag_names]).to eq(old_tag_names)\n+        expect(tag_changed_event[:params].second[:new_tag_names]).to eq(['alpha'])\n+      end\n+\n       context 'non-staff users in tag group groups' do\n         fab!(:non_staff_group) { Fabricate(:group, name: 'non_staff_group') }\n "
    }
  ]
}
