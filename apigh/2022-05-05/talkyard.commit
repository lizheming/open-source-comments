{
  "sha": "e39ae474a66d08aa42849e9e5a682eabcc33b80b",
  "node_id": "C_kwDOAKEu-toAKGUzOWFlNDc0YTY2ZDA4YWE0Mjg0OWU5ZTVhNjgyZWFiY2MzM2I4MGI",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2022-04-16T13:11:37Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2022-04-16T13:11:37Z"
    },
    "message": "Merge v0.2022.09 into 'release'.",
    "tree": {
      "sha": "d8366c09a44ff9d50d2b1bd95ac48f34fc7ccaf1",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/d8366c09a44ff9d50d2b1bd95ac48f34fc7ccaf1"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/e39ae474a66d08aa42849e9e5a682eabcc33b80b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/e39ae474a66d08aa42849e9e5a682eabcc33b80b",
  "html_url": "https://github.com/debiki/talkyard/commit/e39ae474a66d08aa42849e9e5a682eabcc33b80b",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/e39ae474a66d08aa42849e9e5a682eabcc33b80b/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5528484f529b48cadf7ac02048839cb515e2e128",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/5528484f529b48cadf7ac02048839cb515e2e128",
      "html_url": "https://github.com/debiki/talkyard/commit/5528484f529b48cadf7ac02048839cb515e2e128"
    },
    {
      "sha": "0bb56841ce4235f441bec875ab5e9d6c2afb6b71",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/0bb56841ce4235f441bec875ab5e9d6c2afb6b71",
      "html_url": "https://github.com/debiki/talkyard/commit/0bb56841ce4235f441bec875ab5e9d6c2afb6b71"
    }
  ],
  "stats": {
    "total": 546,
    "additions": 373,
    "deletions": 173
  },
  "files": [
    {
      "sha": "fdccfa976da2606156cdddd9986518d923b3fdca",
      "filename": "appsv/server/debiki/RateLimiter.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/e39ae474a66d08aa42849e9e5a682eabcc33b80b/appsv%2Fserver%2Fdebiki%2FRateLimiter.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/e39ae474a66d08aa42849e9e5a682eabcc33b80b/appsv%2Fserver%2Fdebiki%2FRateLimiter.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FRateLimiter.scala?ref=e39ae474a66d08aa42849e9e5a682eabcc33b80b",
      "patch": "@@ -100,7 +100,7 @@ class RateLimiter(globals: Globals, security: EdSecurity) {\n     // If authenticated, the user gets his/her own rate limit entry, otherwise s/he\n     // has to share resources with everyone on the same ip.\n     val roleIdOrIp = request.user.flatMap(_.anyMemberId).map(request.siteLimits.id + \"|\" + _)\n-      .getOrElse(request.ip)\n+          .getOrElse(request.ip)\n     val key = s\"$roleIdOrIp|${rateLimits.key}\"\n \n     var timestampsHolder: TimestampsHolder =\n@@ -113,7 +113,7 @@ class RateLimiter(globals: Globals, security: EdSecurity) {\n \n     val effectiveLimits = rateLimits multBy request.siteLimits\n \n-    // If the rate limits have been changed, we need a new properly sized cache elem.\n+    // If the rate limits have been changed, resize the req timestamp cache:  [rez_req_ts_cache]\n     if (requestTimestamps.length != effectiveLimits.numRequestsToRemember(isNewUser = false)) {\n       timestampsHolder = makeCacheItem(key, effectiveLimits)\n       timestampsCache.put(key, timestampsHolder)"
    },
    {
      "sha": "5e271c4c49105bf901b214dc2246bcae02fdac8b",
      "filename": "appsv/server/debiki/RateLimits.scala",
      "status": "modified",
      "additions": 33,
      "deletions": 26,
      "changes": 59,
      "blob_url": "https://github.com/debiki/talkyard/blob/e39ae474a66d08aa42849e9e5a682eabcc33b80b/appsv%2Fserver%2Fdebiki%2FRateLimits.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/e39ae474a66d08aa42849e9e5a682eabcc33b80b/appsv%2Fserver%2Fdebiki%2FRateLimits.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FRateLimits.scala?ref=e39ae474a66d08aa42849e9e5a682eabcc33b80b",
      "patch": "@@ -91,6 +91,13 @@ abstract class RateLimits {  CLEAN_UP // change to case class, and all concrete\n   def maxPerDayNewUser: i32\n   def isReadLimits: Opt[Bo] = None  // only partly impl\n \n+  override def toString(): St =\n+    (s\"RateLimits($key, $what, maxPerFifteenSeconds: $maxPerFifteenSeconds, \" +\n+        s\"maxPerFifteenMinutes: $maxPerFifteenMinutes, \" +\n+        s\"maxPerDay: $maxPerDay, \" +\n+        s\"maxPerDayNewUser: $maxPerDayNewUser, \" +\n+        s\"isReadLimits: $isReadLimits\")\n+\n   assert(maxPerDay >= maxPerDayNewUser || maxPerDayNewUser == Unlimited)\n   assert(maxPerDay >= maxPerFifteenMinutes || maxPerFifteenMinutes == Unlimited)\n   assert(maxPerDay >= maxPerFifteenSeconds || maxPerFifteenSeconds == Unlimited)\n@@ -111,36 +118,47 @@ abstract class RateLimits {  CLEAN_UP // change to case class, and all concrete\n       return this // unchanged\n     }\n \n+    def multByM(lim: i32): i32 = {\n+      if (lim == Unlimited) Unlimited\n+      else {\n+        // Better round up, so won't accidentally get zero, if a multiplier is 0 < _ < 1.\n+        val next64: f64 = math.ceil(lim.toLong * m.toDouble)\n+        if (next64 > MaxReqsToRemember) Unlimited\n+        else if (next64 <= 0.0) 0\n+        else next64.toInt\n+      }\n+    }\n+\n     // Later, when is case class:   [rate_lims_case_cl]\n     // copy(maxPerFifteenSeconds = math.floor(maxPerFifteenSeconds * m),\n     //       maxPerFifteenMinutes = math.floor(maxPerFifteenMinutes * m),\n     //       maxPerDay = math.floor(maxPerDay * m),\n     //       maxPerDayNewUser = math.floor(maxPerDayNewUser * m))\n     //\n     // But for now:\n+    val _this = this\n     new RateLimits {\n-      val key: St = this.key\n-      val what: St = this.what\n-      // Better round up, so won't accidentally get zero, if a multiplier is 0<..<1.\n-      val maxPerFifteenSeconds: i32 = math.ceil(maxPerFifteenSeconds * m).toInt\n-      val maxPerFifteenMinutes: i32 = math.ceil(maxPerFifteenMinutes * m).toInt\n-      val maxPerDay: i32 = math.ceil(maxPerDay * m).toInt\n-      val maxPerDayNewUser: i32 = math.ceil(maxPerDayNewUser * m).toInt\n+      val key: St = _this.key\n+      val what: St = _this.what\n+      val maxPerFifteenSeconds: i32 = multByM(_this.maxPerFifteenSeconds)\n+      val maxPerFifteenMinutes: i32 = multByM(_this.maxPerFifteenMinutes)\n+      val maxPerDay: i32 = multByM(_this.maxPerDay)\n+      val maxPerDayNewUser: i32 = multByM(_this.maxPerDayNewUser)\n     }\n   }\n \n-  def isUnlimited(isNewUser: Boolean): Boolean =\n+  def isUnlimited(isNewUser: Bo): Bo =\n     maxPerFifteenSeconds == Unlimited &&\n       maxPerFifteenMinutes == Unlimited &&\n       (if (isNewUser) maxPerDayNewUser == Unlimited else maxPerDay == Unlimited)\n \n \n-  def noRequestsAllowed(isNewUser: Boolean): Boolean =\n+  def noRequestsAllowed(isNewUser: Bo): Bo =\n     maxPerFifteenSeconds == 0 || maxPerFifteenMinutes == 0 ||\n       (if (isNewUser) maxPerDayNewUser == 0 else maxPerDay == 0)\n \n \n-  def numRequestsToRemember(isNewUser: Boolean): Int = {\n+  def numRequestsToRemember(isNewUser: Bo): i32 = {\n     if (isNewUser && maxPerDayNewUser != Unlimited) {\n       maxPerDayNewUser\n     }\n@@ -157,27 +175,16 @@ abstract class RateLimits {  CLEAN_UP // change to case class, and all concrete\n       0\n     }\n   }\n-\n-\n-  def numSecondsToRemember: Int = {\n-    if (maxPerDay != Unlimited || maxPerDayNewUser != Unlimited) {\n-      24 * 3600\n-    }\n-    else  if (maxPerFifteenMinutes != Unlimited) {\n-      15 * 60\n-    }\n-    else if (maxPerFifteenSeconds != Unlimited) {\n-      15\n-    }\n-    else {\n-      1 // not 0 because that means unlimited\n-    }\n-  }\n }\n \n \n \n object RateLimits {\n+\n+  // If a rate limit is higher than this, it'll behave like Unlimited.\n+  // (So as not to allocate an a too big array.)\n+  val MaxReqsToRemember: i32 = 1000\n+\n   val Unlimited: Int = Int.MaxValue\n \n   // COULD add more types of limits, these: (supported by Discourse as of Feb 2015)"
    },
    {
      "sha": "15a61c78c4e3c7c29b49c4083fdf2bd63ec83130",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans%2Ftyse-v0-dev?ref=e39ae474a66d08aa42849e9e5a682eabcc33b80b",
      "patch": "@@ -1 +1 @@\n-Subproject commit e1b44b2afbb1a5e5f05f84f62ad5017c6ac53e70\n+Subproject commit 15a61c78c4e3c7c29b49c4083fdf2bd63ec83130"
    },
    {
      "sha": "9d7cfc653e6b76f03ece99832d499dc7876961c5",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/e39ae474a66d08aa42849e9e5a682eabcc33b80b/s%2Frun-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/e39ae474a66d08aa42849e9e5a682eabcc33b80b/s%2Frun-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s%2Frun-e2e-tests.sh?ref=e39ae474a66d08aa42849e9e5a682eabcc33b80b",
      "patch": "@@ -298,8 +298,9 @@ function runAllE2eTests {\n   $r s/wdio --only create-site-admin-guide.2browsers $args\n   $r s/wdio --only gmail-fb-join-login.extidp.1br $args\n \n-  $r s/wdio --only oidc-azure-login-required.2br.extidp $args\n-  $r s/wdio --only oidc-azure-pub-site.2br.extidp $args\n+  # Needs HTTPS (dummy localhost cert is ok).\n+  $r s/wdio-7 --only oidc-azure-login-required.2br.extidp --cd -i $args\n+  $r s/wdio-7 --only oidc-azure-pub-site.2br.extidp --cd -i $args\n \n   $r s/wdio --only login-expire-idle-after.2br.mtime $args\n "
    },
    {
      "sha": "0c7d0b496cc45cf896e9b8c95297f5aa0a899a76",
      "filename": "tests/app/debiki/RateLimiterSpec.scala",
      "status": "modified",
      "additions": 207,
      "deletions": 9,
      "changes": 216,
      "blob_url": "https://github.com/debiki/talkyard/blob/e39ae474a66d08aa42849e9e5a682eabcc33b80b/tests%2Fapp%2Fdebiki%2FRateLimiterSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/e39ae474a66d08aa42849e9e5a682eabcc33b80b/tests%2Fapp%2Fdebiki%2FRateLimiterSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2FRateLimiterSpec.scala?ref=e39ae474a66d08aa42849e9e5a682eabcc33b80b",
      "patch": "@@ -18,6 +18,7 @@\n package debiki\n \n import com.debiki.core._\n+import com.debiki.core.Prelude._\n import debiki.dao.DaoAppSuite\n import talkyard.server.http.DebikiRequest\n import org.mockito.Mockito._\n@@ -40,8 +41,14 @@ class RateLimiterSpec\n \n   var nextIp = 0\n \n-  def mockRequest(now: UnixTime, ip: String = null, roleId: UserId = 0, siteId: SiteId = NoSiteId)\n+  def mockRequest(now: UnixTime, ip: String = null, roleId: UserId = 0,\n+        siteId: SiteId = NoSiteId,\n+        siteReadLimitsMultiplier: Opt[f32] = None,\n+        siteLogLimitsMultiplier: Opt[f32] = None,\n+        siteCreateLimitsMultiplier: Opt[f32] = None,\n+        )\n         : DebikiRequest[AnyContentAsEmpty.type] = {\n+\n     val requestMock = Mockito.mock(classOf[DebikiRequest[AnyContentAsEmpty.type]])\n     // `now` might be small, close to 0, so add a few months.\n     val fourMonthsSeconds = 10*1000*1000 // roughly four months\n@@ -56,9 +63,9 @@ class RateLimiterSpec\n \n     val siteLimits = new SiteLimitsMultipliers {\n       def id: SiteId = siteId\n-      def readLimitsMultiplier: Opt[f32] = None\n-      def logLimitsMultiplier: Opt[f32] = None\n-      def createLimitsMultiplier: Opt[f32] = None\n+      def readLimitsMultiplier: Opt[f32] = siteReadLimitsMultiplier\n+      def logLimitsMultiplier: Opt[f32] = siteLogLimitsMultiplier\n+      def createLimitsMultiplier: Opt[f32] = siteCreateLimitsMultiplier\n     }\n \n     when(requestMock.siteLimits).thenReturn(siteLimits)\n@@ -81,18 +88,29 @@ class RateLimiterSpec\n \n \n   def makeLimits(maxPerFifteenSeconds: Int = Unlimited, maxPerFifteenMinutes: Int = Unlimited,\n-        maxPerDay: Int = Unlimited, maxPerDayNewUser: Int = Unlimited): RateLimits = {\n+        maxPerDay: Int = Unlimited, maxPerDayNewUser: Int = Unlimited,\n+        isReadLimits: Opt[Bo] = None,\n+        isLogLimits: Opt[Bo] = None,\n+        isCreateLimits: Opt[Bo] = None,\n+        ): RateLimits = {\n+\n     val maxPerFifteenSeconds_ = maxPerFifteenSeconds\n     val maxPerFifteenMinutes_ = maxPerFifteenMinutes\n     val maxPerDay_ = maxPerDay\n     val maxPerDayNewUser_ = if (maxPerDayNewUser == Unlimited) maxPerDay else maxPerDayNewUser\n+    val isReadLimits_ = isReadLimits\n+    val isLogLimits_ = isLogLimits\n+    val isCreateLimits_ = isCreateLimits\n     new RateLimits {\n       val key = \"key\"\n       val what = \"dummy\"\n-      def maxPerFifteenSeconds: Int = maxPerFifteenSeconds_\n-      def maxPerFifteenMinutes: Int = maxPerFifteenMinutes_\n-      def maxPerDay: Int = maxPerDay_\n-      def maxPerDayNewUser: Int = maxPerDayNewUser_\n+      def maxPerFifteenSeconds: i32 = maxPerFifteenSeconds_\n+      def maxPerFifteenMinutes: i32 = maxPerFifteenMinutes_\n+      def maxPerDay: i32 = maxPerDay_\n+      def maxPerDayNewUser: i32 = maxPerDayNewUser_\n+      override def isReadLimits: Opt[Bo] = isReadLimits_\n+      //erride def isLogLimits: Opt[Bo] = isLogLimits_\n+      //erride def isCreateLimits: Opt[Bo] = isCreateLimits_\n     }\n   }\n \n@@ -353,6 +371,186 @@ class RateLimiterSpec\n         }\n       }\n     }\n+\n+\n+    \"limits are dynamic: read, create, log, per site\" - {\n+      \"a per 15 seconds read limit gets multiplied by the read limits multiplier\" -  {\n+        val limits0 = makeLimits(maxPerFifteenSeconds = 0, isReadLimits = Some(true))\n+        val limits1 = makeLimits(maxPerFifteenSeconds = 1, isReadLimits = Some(true))\n+        val limits6 = makeLimits(maxPerFifteenSeconds = 6, isReadLimits = Some(true))\n+        val limits19 = makeLimits(maxPerFifteenSeconds = 19, isReadLimits = Some(true))\n+        val limits21 = makeLimits(maxPerFifteenSeconds = 21, isReadLimits = Some(true))\n+\n+        val theMultiplier = Some(0.2f)\n+\n+        def mkReq(now: i32, ip: St = null) =\n+          mockRequest(now = now, siteReadLimitsMultiplier = theMultiplier,\n+                siteId = 44, ip = ip)\n+\n+        \"Limit 0 * 0.2 -> 0 reqs allowed\" in {\n+          // The limit is 0 * 0.2 = 0, so this should get rejected immediately:\n+          val req = mkReq(now = 1)\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits0, req)\n+          }\n+        }\n+\n+        \"Limit 1 * 0.2 -> ceil -> 1 req allowed\" in {\n+          // 1 * 0.2 gets ceiled() up to 1, so one request should be allowed:\n+          val req = mkReq(now = 1)\n+          RateLimiter.rateLimit(limits1, req)\n+          // But the 2nd req gets rejected.\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits1, req)\n+          }\n+        }\n+\n+        \"Limit 6 * 0.2  = 1.2 -> ceil -> 2 reqs allowed, 3rd rejected\" in {\n+          val req = mkReq(now = 1)\n+          RateLimiter.rateLimit(limits6, req)\n+          RateLimiter.rateLimit(limits6, req)\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits6, req)\n+          }\n+        }\n+\n+        \"Limit 19 * 0.2  = 3.8 -> ceil -> 4\" in {\n+          val req = mkReq(now = 1)\n+          for (i <- 1 to 4) {\n+            RateLimiter.rateLimit(limits19, req)\n+          }\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits19, req)\n+          }\n+        }\n+\n+\n+        val ipForLim21 = \"193.0.0.21\"\n+\n+        \"Limit 21 * 0.2  = 4.2 -> ceil -> 5\" in {\n+          val req = mkReq(now = 1, ip = ipForLim21)\n+          for (i <- 1 to 5) {\n+            RateLimiter.rateLimit(limits21, req)\n+          }\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits21, req)\n+          }\n+        }\n+\n+        \"After 15 sec, 5 more reqs are allowed\" in {\n+          // 14 seconds is too soon. (The 1st req was at 1 sec, see above)\n+          val reqTooSoon = mkReq(now = 1 + 14, ip = ipForLim21)  // same IP\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits21, reqTooSoon)\n+          }\n+\n+          // 16 seconds is > 15 seconds later, fine.\n+          val reqLater = mkReq(now = 1 + 16, ip = ipForLim21)\n+          for (i <- 1 to 5) {\n+            RateLimiter.rateLimit(limits21, reqLater)\n+          }\n+\n+          // Too many again\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits21, reqLater)\n+          }\n+        }\n+      }\n+\n+\n+      \"The per 15 mins and 1 day read limits get multiplied too\" - {\n+\n+        def mkReq(now: i32, readMultiplier: f32, ip: St = null) =\n+          mockRequest(now = now, siteReadLimitsMultiplier = Some(readMultiplier),\n+                siteId = 45, ip = ip)\n+\n+        \"The per 15 min limits work:   Limit ceil 7 * 0.3  = 3\" in {\n+          val req = mkReq(now = 1, readMultiplier = 0.3f)\n+          val limits7 = makeLimits(maxPerFifteenMinutes = 7, isReadLimits = Some(true))\n+          for (i <- 1 to 3) {\n+            RateLimiter.rateLimit(limits7, req)\n+          }\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits7, req)\n+          }\n+        }\n+\n+\n+        \"Limits scale up, not just down:   Limit ceil 7 * 3f  = 21\" in {\n+          val req = mkReq(now = 1, readMultiplier = 3f)\n+          val limits7 = makeLimits(maxPerFifteenMinutes = 7, isReadLimits = Some(true))\n+          for (i <- 1 to 21) {\n+            RateLimiter.rateLimit(limits7, req)\n+          }\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits7, req)\n+          }\n+        }\n+\n+\n+        val ipForDayLim20 = \"193.0.0.20\"\n+        val limits20PerDay = makeLimits(maxPerDay = 20, isReadLimits = Some(true))\n+\n+        \"The per day limits work too:   Limit ceil 20 * 2f  = 40\" in {\n+          val reqM2 = mkReq(now = 1, readMultiplier = 2f, ip = ipForDayLim20)\n+\n+          for (i <- 1 to 40) {\n+            RateLimiter.rateLimit(limits20PerDay, reqM2)\n+          }\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits20PerDay, reqM2)\n+          }\n+        }\n+\n+        \"If too many reqs per day, ok again after 1 day — and limits still scaled up 2f\" in {\n+          // Less than a day is too soon. (The first req was at second 1)\n+          val aSecondTooSoon = 1 + 3600 * 24 - 1\n+          val reqTooSoon = mkReq(now = aSecondTooSoon, readMultiplier = 2f, ip = ipForDayLim20)\n+\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits20PerDay, reqTooSoon)\n+          }\n+\n+          // But two seconds later is fine.\n+          val aSecondAfter = aSecondTooSoon + 2\n+          val reqLater = mkReq(now = aSecondAfter, readMultiplier = 2f, ip = ipForDayLim20)\n+          for (i <- 1 to 40) {\n+            RateLimiter.rateLimit(limits20PerDay, reqLater)\n+          }\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits20PerDay, reqLater)\n+          }\n+        }\n+\n+        o\"\"\"Increasing the multiplier works too\n+              — hmm but currently clears the req timestamp arrays\"\"\" in {\n+          // Same multiplier: 2f, won't work, already done 40 + 40 reqs.\n+          // Yes, works! Because we've resized the request timestamp cache [rez_req_ts_cache]\n+          // and forgotten the old timestamps.\n+          val now = 1 + 3600 * 24 + 60\n+          /* not too many:\n+          val reqTooMany = mkReq(now = now, readMultiplier = 2f, ip = ipForDayLim20)\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits20PerDay, reqTooMany)\n+          } */\n+\n+          // New multiplier: 3f, 20 more reqs allowed:\n+          val req20MoreOk = mkReq(now = now, readMultiplier = 3f, ip = ipForDayLim20)\n+          //r (i <- 1 to 20) {\n+          for (i <- 1 to 60) {  // 60 works, see above — old reqs forgotten.\n+            RateLimiter.rateLimit(limits20PerDay, req20MoreOk)\n+          }\n+          // And that's it.\n+          assertThrowsTooManyRequests {\n+            RateLimiter.rateLimit(limits20PerDay, req20MoreOk) // 21 no 61 more not ok\n+          }\n+        }\n+      }\n+\n+\n+      TESTS_MISSING // also try the create & log limits too  (not only the read limit).\n+      // but currently (2022-04) there are no such rate limits (becasue haven't updated them)\n+    }\n   }\n \n }\n\\ No newline at end of file"
    },
    {
      "sha": "c7520aaa3c3207a5df7740dc12f87c5ff0b48783",
      "filename": "tests/e2e-wdio7/specs/d.oidc-azure-impl.ts",
      "status": "renamed",
      "additions": 123,
      "deletions": 129,
      "changes": 252,
      "blob_url": "https://github.com/debiki/talkyard/blob/e39ae474a66d08aa42849e9e5a682eabcc33b80b/tests%2Fe2e-wdio7%2Fspecs%2Fd.oidc-azure-impl.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/e39ae474a66d08aa42849e9e5a682eabcc33b80b/tests%2Fe2e-wdio7%2Fspecs%2Fd.oidc-azure-impl.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fd.oidc-azure-impl.ts?ref=e39ae474a66d08aa42849e9e5a682eabcc33b80b",
      "patch": "@@ -1,18 +1,12 @@\n /// <reference path=\"../test-types.ts\"/>\n \n import * as _ from 'lodash';\n-import assert = require('../utils/ty-assert');\n-// import fs = require('fs');  EMBCMTS\n-import server = require('../utils/server');\n-import utils = require('../utils/utils');\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n import { buildSite } from '../utils/site-builder';\n-import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n-import settings = require('../utils/settings');\n-import lad = require('../utils/log-and-die');\n-import c = require('../test-constants');\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import settings from '../utils/settings';\n \n-\n-let everyonesBrowsers: TyAllE2eTestBrowsers;\n let richBrowserA: TyE2eTestBrowser;\n let richBrowserB: TyE2eTestBrowser;\n \n@@ -53,7 +47,7 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n     return;\n   }\n \n-  it(`construct site`, () => {\n+  it(`construct site`, async () => {\n     const builder = buildSite();\n     forum = builder.addTwoCatsForum({\n       title: \"Some E2E Test\",\n@@ -62,9 +56,8 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n \n     builder.getSite().meta.localHostname = localHostname;\n \n-    everyonesBrowsers = new TyE2eTestBrowser(allWdioBrowsers);\n-    richBrowserA = new TyE2eTestBrowser(wdioBrowserA);\n-    richBrowserB = new TyE2eTestBrowser(wdioBrowserB);\n+    richBrowserA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    richBrowserB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n \n     // Azure user 01\n     owen = forum.members.owen;\n@@ -97,31 +90,31 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n     assert.refEq(builder.getSite(), forum.siteData);\n   });\n \n-  it(`import site`, () => {\n-    site = server.importSiteData(forum.siteData);\n-    server.skipRateLimits(site.id);\n+  it(`import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    await server.skipRateLimits(site.id);\n   });\n \n \n-  it(`Owen logs in to admin area, using password, OIDC not yet configured`, () => {\n-    owen_brA.adminArea.settings.login.goHere(site.origin, { loginAs: owen });\n+  it(`Owen logs in to admin area, using password, OIDC not yet configured`, async () => {\n+    await owen_brA.adminArea.settings.login.goHere(site.origin, { loginAs: owen });\n   });\n \n \n   if (variants.loginRequired) {\n-    it(`Owen makes the site login-required`, () => {\n-      owen_brA.adminArea.settings.login.setLoginRequired(true);\n+    it(`Owen makes the site login-required`, async () => {\n+      await owen_brA.adminArea.settings.login.setLoginRequired(true);\n     });\n   }\n \n \n-  it(`Owen enbles OIDC`, () => {\n-    owen_brA.adminArea.settings.login.setEnableOidcDontSave(true);\n+  it(`Owen enbles OIDC`, async () => {\n+    await owen_brA.adminArea.settings.login.setEnableOidcDontSave(true);\n   });\n \n \n-  it(`... configures an Azure AD ID provider, saves the config`, () => {\n-    owen_brA.adminArea.settings.login.configureIdps(`[{\n+  it(`... configures an Azure AD ID provider, saves the config`, async () => {\n+    await owen_brA.adminArea.settings.login.configureIdps(`[{\n   \"protocol\": \"oidc\",\n   \"alias\": \"azure_test_alias\",\n   \"enabled\": true,\n@@ -153,79 +146,79 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n \n \n \n-  it(`... saves the settings too`, () => {\n+  it(`... saves the settings too`, async () => {\n     // Maybe bad UX to require 2 clicks, fix later [nice_oidc_conf_ux].\n-    owen_brA.adminArea.settings.clickSaveAll();\n+    await owen_brA.adminArea.settings.clickSaveAll();\n   });\n \n \n-  it(`Owen now tries to enable OIDC SSO   TyTOIDCSSO`, () => {\n-    owen_brA.adminArea.settings.login.setOnlyOidc(true);\n+  it(`Owen now tries to enable OIDC SSO   TyTOIDCSSO`, async () => {\n+    await owen_brA.adminArea.settings.login.setOnlyOidc(true);\n   });\n-  it(`... tries to save`, () => {\n-    owen_brA.adminArea.settings.clickSaveAll({ willFail: true });\n+  it(`... tries to save`, async () => {\n+    await owen_brA.adminArea.settings.clickSaveAll({ willFail: true });\n   });\n   it(`... but not allowed — he hasn't yet logged in with OIDC,\n-              and might lock himself out`, () => {\n-    owen_brA.serverErrorDialog.waitAndAssertTextMatches('TyEADM0LGI2_');\n-    owen_brA.serverErrorDialog.close();\n+              and might lock himself out`, async () => {\n+    await owen_brA.serverErrorDialog.waitAndAssertTextMatches('TyEADM0LGI2_');\n+    await owen_brA.serverErrorDialog.close();\n   });\n \n \n \n-  it(`Owen logs out`, () => {\n-    owen_brA.topbar.clickLogout({ waitForLoginDialog });\n+  it(`Owen logs out`, async () => {\n+    await owen_brA.topbar.clickLogout({ waitForLoginDialog });\n     // Redirects to /   [.6022563]\n-    assert.eq(owen_brA.urlPath(), afterLogoutPath);\n+    assert.eq(await owen_brA.urlPath(), afterLogoutPath);\n   });\n-  it(`... logs in via Azure AD OIDC`, () => {\n+  it(`... logs in via Azure AD OIDC`, async () => {\n     if (!variants.loginRequired) {\n       // No login required — Owen needs to click Log In.\n       // This tests linking accounts, from in a login popup.\n-      owen_brA.topbar.clickLogin();\n+      await owen_brA.topbar.clickLogin();\n     }\n     else {\n       // Login dialog already visible.\n       // This tests linking accounts, from in a \"full screen\" main win login.\n     }\n-    owen_brA.loginDialog.clickLoginWithOidcAzureAd();\n-    owen_brA.loginDialog.loginWithOidcAzureAd({\n+    await owen_brA.loginDialog.clickLoginWithOidcAzureAd();\n+    await owen_brA.loginDialog.loginWithOidcAzureAd({\n           email: settings.azureUser01UsernameAndEmail,\n           password: settings.azureUser01Password,\n           fullScreenLogin: variants.loginRequired,\n           stayInPopup: !variants.loginRequired });\n   });\n   it(`... since in Azure he has the same email address, he can link his Azure account\n-            to his Talkyard account  TyTOIDCLNVERACT`, () => {\n+            to his Talkyard account  TyTOIDCLNVERACT`, async () => {\n     // Check that email addr and username etc is correct  TyTLNIDP2TY043.\n-    owen_brA.loginDialog.checkLinkAccountsTextOk({\n+    await owen_brA.loginDialog.checkLinkAccountsTextOk({\n       matchingEmail: settings.azureUser01UsernameAndEmail,\n       talkyardUsername: owen.username,\n       azureFullName: settings.azureUser01FullName,\n       idpName: \"Azure AD Test\",\n     });\n   });\n-  it(`... he links the accounts`, () => {\n-    owen_brA.loginDialog.clickYesLinkAccounts();\n+  it(`... he links the accounts`, async () => {\n+    await owen_brA.loginDialog.clickYesLinkAccounts();\n   });\n \n-  it(`... clicks Log In Again`, () => {\n-    owen_brA.loginDialog.clickLogInAgain({\n+  it(`... clicks Log In Again`, async () => {\n+    await owen_brA.loginDialog.clickLogInAgain({\n           isInPopupThatWillClose: !variants.loginRequired });\n   });\n \n   if (!variants.loginRequired) {\n-    it(`... the login popup closes`, () => {\n-      owen_brA.switchBackToFirstTabOrWindow();\n+    it(`... the login popup closes`, async () => {\n+      await owen_brA.switchBackToFirstTabOrWindow();\n     });\n   }\n \n-  it(`... thereafter he's logged in as Owen again`, () => {\n-    owen_brA.topbar.assertMyUsernameMatches(owen.username);\n+  it(`... thereafter he's logged in as Owen again`, async () => {\n+    await owen_brA.topbar.assertMyUsernameMatches(owen.username);\n   });\n-  it(`... he jumps to the admin area — was redirected to '/', at logout`, () => {\n+  it(`... he jumps to the admin area — was redirected to '/', at logout`, async () => {\n     // Owen got redirected to / above.  [.6022563]\n-    owen_brA.adminArea.settings.login.goHere(site.origin);\n+    await owen_brA.adminArea.settings.login.goHere(site.origin);\n   });\n \n \n@@ -258,7 +251,7 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n \n \n   // IDP email *un*verified, no Ty acct\n-  it(`Azure user  tyaz13  with no Ty account arrives`, () => {});\n+  it(`Azure user  tyaz13  with no Ty account arrives`, async () => {});\n   addSignUpViaAzureTestSteps({\n         br: () => azure_brB,\n         resetBrowser: true,\n@@ -271,7 +264,7 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n \n \n   // IDP email *un*verified, Ty acct w verified email\n-  it(`Maria arrives; she has a Ty account already and Azure acct 12`, () => {});\n+  it(`Maria arrives; she has a Ty account already and Azure acct 12`, async () => {});\n   addLoginAndLinkAzureAccountTestSteps({\n         br: () => maria_brB,\n         resetBrowser: true,\n@@ -288,35 +281,35 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n \n \n \n-  it(`Owen enables OIDC SSO — works now, when has tested login   TyTOIDCSSO`, () => {\n-    owen_brA.adminArea.settings.login.setOnlyOidc(true);\n+  it(`Owen enables OIDC SSO — works now, when has tested login   TyTOIDCSSO`, async () => {\n+    await owen_brA.adminArea.settings.login.setOnlyOidc(true);\n   });\n-  it(`... and save, no problems`, () => {\n-    owen_brA.adminArea.settings.clickSaveAll();\n+  it(`... and save, no problems`, async () => {\n+    await owen_brA.adminArea.settings.clickSaveAll();\n   });\n \n   // Verify that login works for an account created before SSO got enabled.\n   // (Maybe an \"unnecessary\" test but ... Thinking in that way, all tests are :-))\n-  it(`Owen logs out`, () => {\n-    owen_brA.topbar.clickLogout({ waitForLoginDialog });\n+  it(`Owen logs out`, async () => {\n+    await owen_brA.topbar.clickLogout({ waitForLoginDialog });\n   });\n-  it(`... can log in again, also now with SSO enabled`, () => {\n+  it(`... can log in again, also now with SSO enabled`, async () => {\n     if (!variants.loginRequired) {\n-      owen_brA.topbar.clickLogin();\n+      await owen_brA.topbar.clickLogin();\n       // Will get redirected and logged in directly. [insta_sso_redir]\n     }\n     else {\n-      owen_brA.loginDialog.clickSingleSignOnButton();\n+      await owen_brA.loginDialog.clickSingleSignOnButton();\n     }\n   });\n-  it(`... he gets logged in directly — accounts already linked`, () => {\n-    owen_brA.topbar.assertMyUsernameMatches(owen.username);\n+  it(`... he gets logged in directly — accounts already linked`, async () => {\n+    await owen_brA.topbar.assertMyUsernameMatches(owen.username);\n   });\n \n \n \n   // IDP email verified, no Ty acct\n-  it(`Azure user  tyaz04  arrives, has no Ty account`, () => {});\n+  it(`Azure user  tyaz04  arrives, has no Ty account`, async () => {});\n   addSignUpViaAzureTestSteps({\n         br: () => azure_brB,\n         resetBrowser: true,\n@@ -327,7 +320,7 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n \n \n   // IDP email verified, Ty acct w verified email\n-  it(`Michael arrives; he has a Ty account already, and Azure acct 06`, () => {});\n+  it(`Michael arrives; he has a Ty account already, and Azure acct 06`, async () => {});\n   addLoginAndLinkAzureAccountTestSteps({\n         br: () => michael_brB,\n         resetBrowser: true,\n@@ -343,7 +336,7 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n \n \n   // IDP email *un*verified, no Ty acct\n-  it(`Azure user  tyaz11  with no Ty account arrives`, () => {});\n+  it(`Azure user  tyaz11  with no Ty account arrives`, async () => {});\n   addSignUpViaAzureTestSteps({\n         br: () => azure_brB,\n         resetBrowser: true,\n@@ -357,7 +350,7 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n \n \n   // IDP email *un*verified, Ty acct w verified email\n-  it(`Maja arrives; she has a Ty account already, and Azure acct 14`, () => {});\n+  it(`Maja arrives; she has a Ty account already, and Azure acct 14`, async () => {});\n   addLoginAndLinkAzureAccountTestSteps({\n         br: () => maja_brB,\n         resetBrowser: true,\n@@ -379,26 +372,26 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n         isSingleSignOn: Bo }) {\n \n     if (!variants.loginRequired) {\n-      it(`... clicks Log In`, () => {\n-        ps.br().topbar.clickLogin();\n+      it(`... clicks Log In`, async () => {\n+        await ps.br().topbar.clickLogin();\n       });\n       if (ps.isSingleSignOn) {\n         // auto redirected\n       }\n       else {\n-        it(`... picks Azure`, () => {\n-          ps.br().loginDialog.clickLoginWithOidcAzureAd();\n+        it(`... picks Azure`, async () => {\n+          await ps.br().loginDialog.clickLoginWithOidcAzureAd();\n         });\n       }\n     }\n     else if (ps.isSingleSignOn) {\n-      it(`... clicks the Single Sign-On button`, () => {\n-        ps.br().loginDialog.clickSingleSignOnButton();\n+      it(`... clicks the Single Sign-On button`, async () => {\n+        await ps.br().loginDialog.clickSingleSignOnButton();\n       });\n     }\n     else {\n-      it(`... picks Azure`, () => {\n-        ps.br().loginDialog.clickLoginWithOidcAzureAd();\n+      it(`... picks Azure`, async () => {\n+        await ps.br().loginDialog.clickLoginWithOidcAzureAd();\n       });\n     }\n   }\n@@ -415,76 +408,77 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n         isSingleSignOn?: Bo,\n         resetBrowser?: Bo }) {\n \n-    it(`Azure user ${ps.azureUsername} arrives`, () => {\n+    it(`Azure user ${ps.azureUsername} arrives`, async () => {\n       // Delete cookies so won't be already logged in as the previous Azure user.\n       if (ps.resetBrowser) {\n-        ps.br().reloadSession();\n+        await ps.br().reloadSession();\n       }\n-      ps.br().go2(site.origin);\n+      await ps.br().go2(site.origin);\n     });\n \n     addStartAzureLoginSteps({ br: ps.br, isSingleSignOn: ps.isSingleSignOn });\n \n-    it(`... logs in via Azure — hen has no Ty account, so one will get created`, () => {\n-      ps.br().loginDialog.loginWithOidcAzureAd({\n+    it(`... logs in via Azure — hen has no Ty account, so one will get created`, async () => {\n+      await ps.br().loginDialog.loginWithOidcAzureAd({\n             email: ps.azureUsername,\n             password: ps.azurePassword,\n             fullScreenLogin: variants.loginRequired });\n     });\n \n     if (ps.azureFullName) {\n-      it(`... the full name from Azure is: '${ps.azureFullName}'`, () => {\n-        ps.br().assertValueIs('#e2eFullName', ps.azureFullName);\n+      it(`... the full name from Azure is: '${ps.azureFullName}'`, async () => {\n+        await ps.br().assertValueIs('#e2eFullName', ps.azureFullName);\n       });\n     }\n     if (ps.azureEmail) {\n-      it(`... the email from Azure is: '${ps.azureEmail}'`, () => {\n-        ps.br().assertValueIs('#e2eEmail', ps.azureEmail);\n+      it(`... the email from Azure is: '${ps.azureEmail}'`, async () => {\n+        await ps.br().assertValueIs('#e2eEmail', ps.azureEmail);\n       });\n     }\n \n     it(`... Hen types a Ty username — Azure apparently doesn't include any username\n-              and sets the OIDC 'sub' field to just an opaque string`, () => {\n-      ps.br().waitAndSetValue('.esCreateUserDlg #e2eUsername',\n+              and sets the OIDC 'sub' field to just an opaque string`, async () => {\n+      await ps.br().waitAndSetValue('.esCreateUserDlg #e2eUsername',\n             ps.newTalkyardUsername, { checkAndRetry: true });\n     });\n-    it(`... saves`, () => {\n-      ps.br().loginDialog.clickSubmit();\n+    it(`... saves`, async () => {\n+      await ps.br().loginDialog.clickSubmit();\n     });\n-    it(`... accepts terms`, () => {\n-      ps.br().loginDialog.acceptTerms();\n+    it(`... accepts terms`, async () => {\n+      await ps.br().loginDialog.acceptTerms();\n     });\n \n     if (ps.azureEmailVerified === false) {\n-      it(`... clicks an email addr verification email`, () => {\n-        const url = server.getLastVerifyEmailAddressLinkEmailedTo(site.id, ps.azureEmail);\n-        ps.br().go2(url);\n+      it(`... clicks an email addr verification email`, async () => {\n+        const url = await server.waitAndGetLastVerifyEmailAddressLinkEmailedTo(\n+                site.id, ps.azureEmail);\n+        await ps.br().go2(url);\n       });\n-      it(`... email now verified, continues`, () => {\n-        ps.br().hasVerifiedSignupEmailPage.clickContinue();\n+      it(`... email now verified, continues`, async () => {\n+        await ps.br().hasVerifiedSignupEmailPage.clickContinue();\n       });\n     }\n     else if (!variants.loginRequired && !ps.isSingleSignOn) {\n       // UX: Maybe could show this dialog also if login-required or if needed to verify\n       // the email addr? Oh well.\n-      it(`... there's a welcome dialog`, () => {\n-        ps.br().loginDialog.waitAndClickOkInWelcomeDialog();\n+      it(`... there's a welcome dialog`, async () => {\n+        await ps.br().loginDialog.waitAndClickOkInWelcomeDialog();\n       });\n     }\n \n-    it(`... username shown in topbar: '${ps.newTalkyardUsername}'`, () => {\n-      ps.br().topbar.assertMyUsernameMatches(ps.newTalkyardUsername);\n+    it(`... username shown in topbar: '${ps.newTalkyardUsername}'`, async () => {\n+      await ps.br().topbar.assertMyUsernameMatches(ps.newTalkyardUsername);\n     });\n \n-    it(`... logs out`, () => {\n-      ps.br().topbar.clickLogout({ waitForLoginDialog });\n+    it(`... logs out`, async () => {\n+      await ps.br().topbar.clickLogout({ waitForLoginDialog });\n     });\n \n-    it(`... logs in again — gets logged in directly`, () => {});\n+    it(`... logs in again — gets logged in directly`, async () => {});\n     addStartAzureLoginSteps({ br: ps.br, isSingleSignOn: ps.isSingleSignOn });\n \n-    it(`... correct username shown in topbar: '${ps.newTalkyardUsername}'`, () => {\n-      ps.br().topbar.assertMyUsernameMatches(ps.newTalkyardUsername);\n+    it(`... correct username shown in topbar: '${ps.newTalkyardUsername}'`, async () => {\n+      await ps.br().topbar.assertMyUsernameMatches(ps.newTalkyardUsername);\n     });\n   }\n \n@@ -502,60 +496,60 @@ export function addOidcAzureTestSteps(variants: { loginRequired: Bo }) {\n         azureFullName?: St,\n         isSingleSignOn?: Bo }) {\n \n-    it(`${ps.who} arrives`, () => {\n+    it(`${ps.who} arrives`, async () => {\n       if (ps.resetBrowser) {\n-        ps.br().reloadSession();\n+        await ps.br().reloadSession();\n       }\n-      ps.br().go2(site.origin);\n+      await ps.br().go2(site.origin);\n     });\n \n     addStartAzureLoginSteps({ br: ps.br, isSingleSignOn: ps.isSingleSignOn });\n \n     it(`... logs in via Azure — hen has a Ty account, and\n-              wants to link it to hens Azure account`, () => {\n-      ps.br().loginDialog.loginWithOidcAzureAd({\n+              wants to link it to hens Azure account`, async () => {\n+      await ps.br().loginDialog.loginWithOidcAzureAd({\n             email: ps.azureUsername,\n             password: ps.azurePassword,\n             fullScreenLogin: variants.loginRequired,\n             stayInPopup: !variants.loginRequired });\n     });\n \n     if (ps.azureEmailVerified === false) {\n-      it(`... clicks an email addr verification email`, () => {\n-        const url = server.getLastVerifyEmailAddressLinkEmailedTo(\n-          site.id, ps.azureEmail, 'LINKING_IDP_ACCT');\n-        ps.br().go2(url);\n+      it(`... clicks an email addr verification email`, async () => {\n+        const url = await server.waitAndGetLastVerifyEmailAddressLinkEmailedTo(\n+                site.id, ps.azureEmail, 'LINKING_IDP_ACCT');\n+        await ps.br().go2(url);\n       });\n     }\n \n-    it(`... ${ps.who} says Yes to linking to the Ty account`, () => {\n-      ps.br().loginDialog.clickYesLinkAccounts();\n+    it(`... ${ps.who} says Yes to linking to the Ty account`, async () => {\n+      await ps.br().loginDialog.clickYesLinkAccounts();\n     });\n \n-    it(`... clicks Log In Again`, () => {\n-      ps.br().loginDialog.clickLogInAgain({\n+    it(`... clicks Log In Again`, async () => {\n+      await ps.br().loginDialog.clickLogInAgain({\n           isInPopupThatWillClose: !variants.loginRequired });\n     });\n \n     if (!variants.loginRequired) {\n-      it(`... the login popup closes`, () => {\n-        ps.br().switchBackToFirstTabOrWindow();\n+      it(`... the login popup closes`, async () => {\n+        await ps.br().switchBackToFirstTabOrWindow();\n       });\n     }\n \n-    it(`... ${ps.who}'s username appears in the topbar`, () => {\n-      ps.br().topbar.assertMyUsernameMatches(ps.tyUser().username);\n+    it(`... ${ps.who}'s username appears in the topbar`, async () => {\n+      await ps.br().topbar.assertMyUsernameMatches(ps.tyUser().username);\n     });\n \n-    it(`... logs out`, () => {\n-      ps.br().topbar.clickLogout({ waitForLoginDialog });\n+    it(`... logs out`, async () => {\n+      await ps.br().topbar.clickLogout({ waitForLoginDialog });\n     });\n \n-    it(`... logs in again — gets logged in directly`, () => {});\n+    it(`... logs in again — gets logged in directly`, async () => {});\n     addStartAzureLoginSteps({ br: ps.br, isSingleSignOn: ps.isSingleSignOn });\n \n-    it(`... ${ps.who}'s username again shown in topbar`, () => {\n-      ps.br().topbar.assertMyUsernameMatches(ps.tyUser().username);\n+    it(`... ${ps.who}'s username again shown in topbar`, async () => {\n+      await ps.br().topbar.assertMyUsernameMatches(ps.tyUser().username);\n     });\n   }\n ",
      "previous_filename": "tests/e2e/specs/oidc-azure-impl.ts"
    },
    {
      "sha": "3cc2d76722154692e75f261857ccf3dcb25ab20f",
      "filename": "tests/e2e-wdio7/specs/d.oidc-azure-login-required.2br.extidp.e2e.ts",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/e39ae474a66d08aa42849e9e5a682eabcc33b80b/tests%2Fe2e-wdio7%2Fspecs%2Fd.oidc-azure-login-required.2br.extidp.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/e39ae474a66d08aa42849e9e5a682eabcc33b80b/tests%2Fe2e-wdio7%2Fspecs%2Fd.oidc-azure-login-required.2br.extidp.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fd.oidc-azure-login-required.2br.extidp.e2e.ts?ref=e39ae474a66d08aa42849e9e5a682eabcc33b80b",
      "patch": "@@ -1,4 +1,4 @@\n-import { addOidcAzureTestSteps } from './oidc-azure-impl';\n+import { addOidcAzureTestSteps } from './d.oidc-azure-impl';\n \n describe(`oidc-azure-login-required.2br.extidp  TyTE2E60RTE24`, () => {\n   addOidcAzureTestSteps({ loginRequired: true });",
      "previous_filename": "tests/e2e/specs/oidc-azure-login-required.2br.extidp.test.ts"
    },
    {
      "sha": "609fbf84cb583ba84d712ebb2058b6e120c514ab",
      "filename": "tests/e2e-wdio7/specs/d.oidc-azure-pub-site.2br.extidp.e2e.ts",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/e39ae474a66d08aa42849e9e5a682eabcc33b80b/tests%2Fe2e-wdio7%2Fspecs%2Fd.oidc-azure-pub-site.2br.extidp.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/e39ae474a66d08aa42849e9e5a682eabcc33b80b/tests%2Fe2e-wdio7%2Fspecs%2Fd.oidc-azure-pub-site.2br.extidp.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fd.oidc-azure-pub-site.2br.extidp.e2e.ts?ref=e39ae474a66d08aa42849e9e5a682eabcc33b80b",
      "patch": "@@ -1,4 +1,4 @@\n-import { addOidcAzureTestSteps } from './oidc-azure-impl';\n+import { addOidcAzureTestSteps } from './d.oidc-azure-impl';\n \n describe(`oidc-azure-pub-site.2br.extidp  TyTE2EOIDCAZ02`, () => {\n   addOidcAzureTestSteps({ loginRequired: false });",
      "previous_filename": "tests/e2e/specs/oidc-azure-pub-site.2br.extidp.test.ts"
    },
    {
      "sha": "759711c11654b401123afc66c9d371b8800f5809",
      "filename": "tests/e2e-wdio7/utils/server.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/e39ae474a66d08aa42849e9e5a682eabcc33b80b/tests%2Fe2e-wdio7%2Futils%2Fserver.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/e39ae474a66d08aa42849e9e5a682eabcc33b80b/tests%2Fe2e-wdio7%2Futils%2Fserver.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Fserver.ts?ref=e39ae474a66d08aa42849e9e5a682eabcc33b80b",
      "patch": "@@ -804,7 +804,7 @@ export default {\n   getEmailsSentToAddrs,\n   sendIncomingEmailWebhook,\n   waitAndGetLastReplyNotfLinkEmailedTo,\n-  waitAndGetLastVerifyEmailAddressLinkEmailedTo,\n+  waitAndGetLastVerifyEmailAddressLinkEmailedTo,  // was: getLastVerifyEmailAddressLinkEmailedTo\n   // no, worse name:\n   // getVerifyEmailAddressLinkFromLastEmailTo: waitAndGetLastVerifyEmailAddressLinkEmailedTo,\n   waitAndGetVerifyAnotherEmailAddressLinkEmailedTo,"
    },
    {
      "sha": "8b682e22c2a1d98b6327fa94314e645a1bdbe2e6",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/e39ae474a66d08aa42849e9e5a682eabcc33b80b/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/e39ae474a66d08aa42849e9e5a682eabcc33b80b/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=e39ae474a66d08aa42849e9e5a682eabcc33b80b",
      "patch": "@@ -1 +1 @@\n-v0.2022.08\n+v0.2022.09"
    }
  ]
}
