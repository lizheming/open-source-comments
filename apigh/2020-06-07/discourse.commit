{
  "sha": "293467a37ae33c5fd8fd40bbfc05bffa578b90ed",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODoyOTM0NjdhMzdhZTMzYzVmZDhmZDQwYmJmYzA1YmZmYTU3OGI5MGVk",
  "commit": {
    "author": {
      "name": "David Taylor",
      "email": "david@taylorhq.com",
      "date": "2020-06-05T16:15:14Z"
    },
    "committer": {
      "name": "David Taylor",
      "email": "david@taylorhq.com",
      "date": "2020-06-05T16:15:14Z"
    },
    "message": "REFACTOR: Remove jquery usage from resolveAllShortUrls, and fix debounce\n\n- This function now requires an explicit scope. It will never run on the entire document.\n\n- Previously debounce was being used with an anonymous function, which means it was having no effect.",
    "tree": {
      "sha": "5f85bdb6a5f607df0e0de1ae895b2c8ceffe4ad1",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/5f85bdb6a5f607df0e0de1ae895b2c8ceffe4ad1"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/293467a37ae33c5fd8fd40bbfc05bffa578b90ed",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEHsYLdRGl7BC5CQY1RpBMGLHT9DQFAl7ab5UACgkQRpBMGLHT\n9DT2+w//RyFCDfZQqTDsQU1WNwBW5KWb+qSVyQDHPsKPfneuHByU2laVRFKuYBoI\nv8NlYyjRe4NQka/gZPD8Sh4GjKLzm79L0qTm/9E8vJ0L76JeclABoR8YTwV8361o\nStnxU1WVu4dIkE+GMMcHSJWj9qK+75Ndj5N1aoG67fY8zAyuCriCfpk0wPBSRDeR\nsrenZAd9Yi9ulB3fTjd6sQHj/bIOChWgkMBiLrA5THmoshoRSRnkc/7N/4IA7LrY\n352lKfs+5UeYZA1c9ZF2ieZeCfyHO/Ayl+lbZARV1d+v4+B1wRKENhJT61c2IJWh\naLFbi1AZR3KhUF/T4xWzSc9T8o21OZQ26V9jE+YNUviKGcT/9KHfttEbNpqG8u53\n2wI2SEVYMQ/T936EVqEUEajaoNjNPZJnPFCsaVl/0sT3o6c6cpJJdFWA+H7sE3Ji\nW5ThEVZzdQFIQtbFoqtVcfs/PPr9GrcfQ87V9FmcHCU80bwis+0hQqFkiJLkU4c4\nYi95tQs9W4UcvgYQP3AItTeZrGMvqhDsTQxuy6xUFgbtscU+wG3LxqHrJxg28j6u\nTBTjIx7c/MLACDq41EHThIH/8LVSV6vLAwVcWesvj9ILaXEijn/K2965Su3nb7UP\nwmWunnGcirFAVdRmReoDi/Dxpuig0Q6gWskAvnIk66uANeLFAAk=\n=GG52\n-----END PGP SIGNATURE-----",
      "payload": "tree 5f85bdb6a5f607df0e0de1ae895b2c8ceffe4ad1\nparent d4caf69ed7ab43c776fef38906fe828ae33e81b6\nauthor David Taylor <david@taylorhq.com> 1591373714 +0100\ncommitter David Taylor <david@taylorhq.com> 1591373714 +0100\n\nREFACTOR: Remove jquery usage from resolveAllShortUrls, and fix debounce\n\n- This function now requires an explicit scope. It will never run on the entire document.\n\n- Previously debounce was being used with an anonymous function, which means it was having no effect.\n"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/293467a37ae33c5fd8fd40bbfc05bffa578b90ed",
  "html_url": "https://github.com/discourse/discourse/commit/293467a37ae33c5fd8fd40bbfc05bffa578b90ed",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/293467a37ae33c5fd8fd40bbfc05bffa578b90ed/comments",
  "author": {
    "login": "davidtaylorhq",
    "id": 6270921,
    "node_id": "MDQ6VXNlcjYyNzA5MjE=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/6270921?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davidtaylorhq",
    "html_url": "https://github.com/davidtaylorhq",
    "followers_url": "https://api.github.com/users/davidtaylorhq/followers",
    "following_url": "https://api.github.com/users/davidtaylorhq/following{/other_user}",
    "gists_url": "https://api.github.com/users/davidtaylorhq/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davidtaylorhq/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davidtaylorhq/subscriptions",
    "organizations_url": "https://api.github.com/users/davidtaylorhq/orgs",
    "repos_url": "https://api.github.com/users/davidtaylorhq/repos",
    "events_url": "https://api.github.com/users/davidtaylorhq/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davidtaylorhq/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "davidtaylorhq",
    "id": 6270921,
    "node_id": "MDQ6VXNlcjYyNzA5MjE=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/6270921?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davidtaylorhq",
    "html_url": "https://github.com/davidtaylorhq",
    "followers_url": "https://api.github.com/users/davidtaylorhq/followers",
    "following_url": "https://api.github.com/users/davidtaylorhq/following{/other_user}",
    "gists_url": "https://api.github.com/users/davidtaylorhq/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davidtaylorhq/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davidtaylorhq/subscriptions",
    "organizations_url": "https://api.github.com/users/davidtaylorhq/orgs",
    "repos_url": "https://api.github.com/users/davidtaylorhq/repos",
    "events_url": "https://api.github.com/users/davidtaylorhq/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davidtaylorhq/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d4caf69ed7ab43c776fef38906fe828ae33e81b6",
      "url": "https://api.github.com/repos/discourse/discourse/commits/d4caf69ed7ab43c776fef38906fe828ae33e81b6",
      "html_url": "https://github.com/discourse/discourse/commit/d4caf69ed7ab43c776fef38906fe828ae33e81b6"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 44,
    "deletions": 38
  },
  "files": [
    {
      "sha": "234d0906d6bdbe7e266edaae5801dfc58a901ad9",
      "filename": "app/assets/javascripts/discourse/app/components/cook-text.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/293467a37ae33c5fd8fd40bbfc05bffa578b90ed/app/assets/javascripts/discourse/app/components/cook-text.js",
      "raw_url": "https://github.com/discourse/discourse/raw/293467a37ae33c5fd8fd40bbfc05bffa578b90ed/app/assets/javascripts/discourse/app/components/cook-text.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/components/cook-text.js?ref=293467a37ae33c5fd8fd40bbfc05bffa578b90ed",
      "patch": "@@ -16,7 +16,7 @@ const CookText = Component.extend({\n       next(() =>\n         window\n           .requireModule(\"pretty-text/upload-short-url\")\n-          .resolveAllShortUrls(ajax, this.siteSettings)\n+          .resolveAllShortUrls(ajax, this.siteSettings, this.element)\n       );\n     });\n   }"
    },
    {
      "sha": "5ccdc41417aa4cb7abd5d80360dcc2710e912d1d",
      "filename": "app/assets/javascripts/pretty-text/addon/upload-short-url.js",
      "status": "modified",
      "additions": 36,
      "deletions": 32,
      "changes": 68,
      "blob_url": "https://github.com/discourse/discourse/blob/293467a37ae33c5fd8fd40bbfc05bffa578b90ed/app/assets/javascripts/pretty-text/addon/upload-short-url.js",
      "raw_url": "https://github.com/discourse/discourse/raw/293467a37ae33c5fd8fd40bbfc05bffa578b90ed/app/assets/javascripts/pretty-text/addon/upload-short-url.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/addon/upload-short-url.js?ref=293467a37ae33c5fd8fd40bbfc05bffa578b90ed",
      "patch": "@@ -43,12 +43,14 @@ export function resetCache() {\n   _cache = {};\n }\n \n-function retrieveCachedUrl($upload, siteSettings, dataAttribute, callback) {\n-  const cachedUpload = lookupCachedUploadUrl($upload.data(dataAttribute));\n+function retrieveCachedUrl(upload, siteSettings, dataAttribute, callback) {\n+  const cachedUpload = lookupCachedUploadUrl(\n+    upload.getAttribute(`data-${dataAttribute}`)\n+  );\n   const url = getAttributeBasedUrl(dataAttribute, cachedUpload, siteSettings);\n \n   if (url) {\n-    $upload.removeAttr(`data-${dataAttribute}`);\n+    upload.removeAttribute(`data-${dataAttribute}`);\n     if (url !== MISSING) {\n       callback(url);\n     }\n@@ -77,75 +79,77 @@ function getAttributeBasedUrl(dataAttribute, cachedUpload, siteSettings) {\n   return cachedUpload.short_path;\n }\n \n-function _loadCachedShortUrls($uploads, siteSettings) {\n-  $uploads.each((_idx, upload) => {\n-    const $upload = $(upload);\n+function _loadCachedShortUrls(uploadElements, siteSettings) {\n+  uploadElements.forEach(upload => {\n     switch (upload.tagName) {\n       case \"A\":\n-        retrieveCachedUrl($upload, siteSettings, \"orig-href\", url => {\n-          $upload.attr(\"href\", url);\n+        retrieveCachedUrl(upload, siteSettings, \"orig-href\", url => {\n+          upload.href = url;\n         });\n \n         break;\n       case \"IMG\":\n-        retrieveCachedUrl($upload, siteSettings, \"orig-src\", url => {\n-          $upload.attr(\"src\", url);\n+        retrieveCachedUrl(upload, siteSettings, \"orig-src\", url => {\n+          upload.src = url;\n         });\n \n         break;\n       case \"SOURCE\": // video/audio tag > source tag\n-        retrieveCachedUrl($upload, siteSettings, \"orig-src\", url => {\n-          $upload.attr(\"src\", url);\n-\n+        retrieveCachedUrl(upload, siteSettings, \"orig-src\", url => {\n           if (url.startsWith(`//${window.location.host}`)) {\n             let hostRegex = new RegExp(\"//\" + window.location.host, \"g\");\n             url = url.replace(hostRegex, \"\");\n           }\n           let fullUrl = window.location.origin + url;\n-          $upload.attr(\"src\", fullUrl);\n+          upload.src = fullUrl;\n \n           // this is necessary, otherwise because of the src change the\n           // video/audio just doesn't bother loading!\n-          let $parent = $upload.parent();\n-          $parent[0].load();\n+          upload.parentElement.load();\n \n           // set the url and text for the <a> tag within the <video/audio> tag\n-          $parent\n-            .find(\"a\")\n-            .attr(\"href\", fullUrl)\n-            .text(fullUrl);\n+          const link = upload.parentElement.querySelector(\"a\");\n+          if (link) {\n+            link.href = fullUrl;\n+            link.textContent = fullUrl;\n+          }\n         });\n \n         break;\n     }\n   });\n }\n \n-function _loadShortUrls($uploads, ajax, siteSettings) {\n-  let urls = $uploads.toArray().map(upload => {\n-    const $upload = $(upload);\n-    return $upload.data(\"orig-src\") || $upload.data(\"orig-href\");\n+function _loadShortUrls(uploads, ajax, siteSettings) {\n+  let urls = [...uploads].map(upload => {\n+    return (\n+      upload.getAttribute(\"data-orig-src\") ||\n+      upload.getAttribute(\"data-orig-href\")\n+    );\n   });\n \n   return lookupUncachedUploadUrls(urls, ajax).then(() =>\n-    _loadCachedShortUrls($uploads, siteSettings)\n+    _loadCachedShortUrls(uploads, siteSettings)\n   );\n }\n \n-export function resolveAllShortUrls(ajax, siteSettings, scope = null) {\n+export function resolveAllShortUrls(ajax, siteSettings, scope) {\n   const attributes =\n     \"img[data-orig-src], a[data-orig-href], source[data-orig-src]\";\n-  let $shortUploadUrls = $(scope || document).find(attributes);\n+  let shortUploadElements = scope.querySelectorAll(attributes);\n \n-  if ($shortUploadUrls.length > 0) {\n-    _loadCachedShortUrls($shortUploadUrls, siteSettings);\n+  if (shortUploadElements.length > 0) {\n+    _loadCachedShortUrls(shortUploadElements, siteSettings);\n \n-    $shortUploadUrls = $(scope || document).find(attributes);\n-    if ($shortUploadUrls.length > 0) {\n+    shortUploadElements = scope.querySelectorAll(attributes);\n+    if (shortUploadElements.length > 0) {\n       // this is carefully batched so we can do a leading debounce (trigger right away)\n       return debounce(\n         null,\n-        () => _loadShortUrls($shortUploadUrls, ajax, siteSettings),\n+        _loadShortUrls,\n+        shortUploadElements,\n+        ajax,\n+        siteSettings,\n         450,\n         true\n       );"
    },
    {
      "sha": "cbd02d972bed8814a655c966ef1b964e492c83ca",
      "filename": "test/javascripts/lib/upload-short-url-test.js",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/discourse/discourse/blob/293467a37ae33c5fd8fd40bbfc05bffa578b90ed/test/javascripts/lib/upload-short-url-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/293467a37ae33c5fd8fd40bbfc05bffa578b90ed/test/javascripts/lib/upload-short-url-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/lib/upload-short-url-test.js?ref=293467a37ae33c5fd8fd40bbfc05bffa578b90ed",
      "patch": "@@ -84,7 +84,7 @@ QUnit.test(\"resolveAllShortUrls\", async assert => {\n   lookup = lookupCachedUploadUrl(\"upload://a.jpeg\");\n   assert.deepEqual(lookup, {});\n \n-  await resolveAllShortUrls(ajax, { secure_media: false });\n+  await resolveAllShortUrls(ajax, { secure_media: false }, fixture()[0]);\n \n   lookup = lookupCachedUploadUrl(\"upload://a.jpeg\");\n \n@@ -126,7 +126,7 @@ QUnit.test(\n   \"resolveAllShortUrls - href + src replaced correctly\",\n   async assert => {\n     stubUrls();\n-    await resolveAllShortUrls(ajax, { secure_media: false });\n+    await resolveAllShortUrls(ajax, { secure_media: false }, fixture()[0]);\n \n     let image1 = fixture()\n       .find(\"img\")\n@@ -156,7 +156,7 @@ QUnit.test(\n       ],\n       null\n     );\n-    await resolveAllShortUrls(ajax, { secure_media: true });\n+    await resolveAllShortUrls(ajax, { secure_media: true }, fixture()[0]);\n \n     let link = fixture().find(\"a\");\n     assert.equal(\n@@ -169,7 +169,9 @@ QUnit.test(\n QUnit.test(\"resolveAllShortUrls - scoped\", async assert => {\n   stubUrls();\n   let lookup;\n-  await resolveAllShortUrls(ajax, \".scoped-area\");\n+\n+  let scopedElement = fixture()[0].querySelector(\".scoped-area\");\n+  await resolveAllShortUrls(ajax, {}, scopedElement);\n \n   lookup = lookupCachedUploadUrl(\"upload://z.jpeg\");\n \n@@ -181,7 +183,7 @@ QUnit.test(\"resolveAllShortUrls - scoped\", async assert => {\n   // do this because the pretender caches ALL the urls, not\n   // just the ones being looked up (like the normal behaviour)\n   resetCache();\n-  await resolveAllShortUrls(ajax, \".scoped-area\");\n+  await resolveAllShortUrls(ajax, {}, scopedElement);\n \n   lookup = lookupCachedUploadUrl(\"upload://a.jpeg\");\n   assert.deepEqual(lookup, {});"
    }
  ]
}
