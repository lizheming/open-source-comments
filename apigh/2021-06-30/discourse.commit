{
  "sha": "16227e38ac02b99045629882d3af54cde96448c2",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODoxNjIyN2UzOGFjMDJiOTkwNDU2Mjk4ODJkM2FmNTRjZGU5NjQ0OGMy",
  "commit": {
    "author": {
      "name": "Dan Ungureanu",
      "email": "dan@ungureanu.me",
      "date": "2021-06-30T09:00:47Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2021-06-30T09:00:47Z"
    },
    "message": "FIX: Do not redirect to a topic user cannot see (#13550)\n\nInviting a user to a private topic used to redirect them to a 404 page\r\nimmediately after sign up.",
    "tree": {
      "sha": "ad27fb04b067e570bd5f729d0340e0d347e8bed8",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/ad27fb04b067e570bd5f729d0340e0d347e8bed8"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/16227e38ac02b99045629882d3af54cde96448c2",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg3DK/CRBK7hj4Ov3rIwAAfpYIAD8Xgb2SWzKiKzG7HNp5hcSo\nF5UXuqb2t+/OnxoOu8UMqMzTjaIeQ8j68KDbO5C1K28O3P1oBBzrKjv80d4shY2p\nPhEqV5A5bw1BxsRvpNcDWwjs57W7ZCPRdW3rlelikoTUAGtM4ONpEihuzHgztp4q\nFU1gvG+3tgQZT0MSslz0I76Ha/aRPynzzadIDML+iTzA96sh6wDSdUWBA3H08RNi\nWxox5IjsDFL8Ty6I3v6YVb4i0RPAt0CmabjcnXyJH9gfWjSw4YKncLAXAQT87xmy\nJ66NY3koHnXN8+Vop4W9ueVzS65Dfber2+m3cUqlafXdY2mqwBKToHZLD2TbibM=\n=O9vU\n-----END PGP SIGNATURE-----\n",
      "payload": "tree ad27fb04b067e570bd5f729d0340e0d347e8bed8\nparent 95038856c9ddeee7d0d8083a75006a5e3492dd54\nauthor Dan Ungureanu <dan@ungureanu.me> 1625043647 +0300\ncommitter GitHub <noreply@github.com> 1625043647 +0300\n\nFIX: Do not redirect to a topic user cannot see (#13550)\n\nInviting a user to a private topic used to redirect them to a 404 page\r\nimmediately after sign up."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/16227e38ac02b99045629882d3af54cde96448c2",
  "html_url": "https://github.com/discourse/discourse/commit/16227e38ac02b99045629882d3af54cde96448c2",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/16227e38ac02b99045629882d3af54cde96448c2/comments",
  "author": {
    "login": "udan11",
    "id": 4147664,
    "node_id": "MDQ6VXNlcjQxNDc2NjQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4147664?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/udan11",
    "html_url": "https://github.com/udan11",
    "followers_url": "https://api.github.com/users/udan11/followers",
    "following_url": "https://api.github.com/users/udan11/following{/other_user}",
    "gists_url": "https://api.github.com/users/udan11/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/udan11/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/udan11/subscriptions",
    "organizations_url": "https://api.github.com/users/udan11/orgs",
    "repos_url": "https://api.github.com/users/udan11/repos",
    "events_url": "https://api.github.com/users/udan11/events{/privacy}",
    "received_events_url": "https://api.github.com/users/udan11/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "95038856c9ddeee7d0d8083a75006a5e3492dd54",
      "url": "https://api.github.com/repos/discourse/discourse/commits/95038856c9ddeee7d0d8083a75006a5e3492dd54",
      "html_url": "https://github.com/discourse/discourse/commit/95038856c9ddeee7d0d8083a75006a5e3492dd54"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 47,
    "deletions": 5
  },
  "files": [
    {
      "sha": "0ef40298b82aafe1c40b7f59ff12c05fdd51da70",
      "filename": "app/controllers/invites_controller.rb",
      "status": "modified",
      "additions": 13,
      "deletions": 5,
      "changes": 18,
      "blob_url": "https://github.com/discourse/discourse/blob/16227e38ac02b99045629882d3af54cde96448c2/app/controllers/invites_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/16227e38ac02b99045629882d3af54cde96448c2/app/controllers/invites_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/invites_controller.rb?ref=16227e38ac02b99045629882d3af54cde96448c2",
      "patch": "@@ -251,11 +251,19 @@ def perform_accept_invitation\n       topic = invite.topics.first\n       response = {}\n \n-      if user.present? && user.active?\n-        response[:redirect_to] = topic.present? ? path(topic.relative_url) : path(\"/\")\n-      elsif user.present?\n-        response[:message] = I18n.t('invite.confirm_email')\n-        cookies[:destination_url] = path(topic.relative_url) if topic.present?\n+      if user.present?\n+        if user.active?\n+          if user.guardian.can_see?(topic)\n+            response[:redirect_to] = path(topic.relative_url)\n+          else\n+            response[:redirect_to] = path(\"/\")\n+          end\n+        else\n+          response[:message] = I18n.t('invite.confirm_email')\n+          if user.guardian.can_see?(topic)\n+            cookies[:destination_url] = path(topic.relative_url)\n+          end\n+        end\n       end\n \n       render json: success_json.merge(response)"
    },
    {
      "sha": "6d74c455e0c3dc6bfdd70d2356948472b3ebd372",
      "filename": "spec/requests/invites_controller_spec.rb",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/discourse/discourse/blob/16227e38ac02b99045629882d3af54cde96448c2/spec/requests/invites_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/16227e38ac02b99045629882d3af54cde96448c2/spec/requests/invites_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/invites_controller_spec.rb?ref=16227e38ac02b99045629882d3af54cde96448c2",
      "patch": "@@ -684,6 +684,40 @@\n         expect(response.body).to include(I18n.t('login.already_logged_in', current_user: user.username))\n       end\n     end\n+\n+    context 'topic invites' do\n+      fab!(:invite) { Fabricate(:invite, email: 'test@example.com') }\n+\n+      fab!(:secured_category) do\n+        secured_category = Fabricate(:category)\n+        secured_category.permissions = { staff: :full }\n+        secured_category.save!\n+        secured_category\n+      end\n+\n+      it 'redirects user to topic if activated' do\n+        topic = Fabricate(:topic)\n+        TopicInvite.create!(invite: invite, topic: topic)\n+\n+        put \"/invites/show/#{invite.invite_key}.json\", params: { email_token: invite.email_token }\n+        expect(response.parsed_body['redirect_to']).to eq(topic.relative_url)\n+      end\n+\n+      it 'sets destination_url cookie if user is not activated' do\n+        topic = Fabricate(:topic)\n+        TopicInvite.create!(invite: invite, topic: topic)\n+\n+        put \"/invites/show/#{invite.invite_key}.json\"\n+        expect(cookies['destination_url']).to eq(topic.relative_url)\n+      end\n+\n+      it 'does not redirect user if they cannot see topic' do\n+        TopicInvite.create!(invite: invite, topic: Fabricate(:topic, category: secured_category))\n+\n+        put \"/invites/show/#{invite.invite_key}.json\", params: { email_token: invite.email_token }\n+        expect(response.parsed_body['redirect_to']).to eq(\"/\")\n+      end\n+    end\n   end\n \n   context '#destroy_all_expired' do"
    }
  ]
}
