{
  "sha": "80854f9d4000e88ecd1f96cc3f445574e6dfc25f",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjgwODU0ZjlkNDAwMGU4OGVjZDFmOTZjYzNmNDQ1NTc0ZTZkZmMyNWY=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-05-21T18:18:10Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-05-21T18:18:10Z"
    },
    "message": "allow anon names to inlude non-latin. Add limit (64) to max len #715",
    "tree": {
      "sha": "4c00f1c66751c4c9a76da875bc42564fc5031510",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/4c00f1c66751c4c9a76da875bc42564fc5031510"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/80854f9d4000e88ecd1f96cc3f445574e6dfc25f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/80854f9d4000e88ecd1f96cc3f445574e6dfc25f",
  "html_url": "https://github.com/umputun/remark42/commit/80854f9d4000e88ecd1f96cc3f445574e6dfc25f",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/80854f9d4000e88ecd1f96cc3f445574e6dfc25f/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "46826940927184aa1f03ded0c1449d477e8d479c",
      "url": "https://api.github.com/repos/umputun/remark42/commits/46826940927184aa1f03ded0c1449d477e8d479c",
      "html_url": "https://github.com/umputun/remark42/commit/46826940927184aa1f03ded0c1449d477e8d479c"
    }
  ],
  "stats": {
    "total": 19,
    "additions": 18,
    "deletions": 1
  },
  "files": [
    {
      "sha": "217073572668d2911edbd769451e9e8cf8bf2c4a",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/80854f9d4000e88ecd1f96cc3f445574e6dfc25f/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark42/raw/80854f9d4000e88ecd1f96cc3f445574e6dfc25f/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server.go?ref=80854f9d4000e88ecd1f96cc3f445574e6dfc25f",
      "patch": "@@ -718,13 +718,17 @@ func (s *ServerCommand) addAuthProviders(authenticator *auth.Service) error {\n \n \tif s.Auth.Anonymous {\n \t\tlog.Print(\"[INFO] anonymous access enabled\")\n-\t\tvar isValidAnonName = regexp.MustCompile(`^[a-zA-Z][\\w ]+$`).MatchString\n+\t\tvar isValidAnonName = regexp.MustCompile(`^[\\p{L}\\d_ ]+$`).MatchString\n \t\tauthenticator.AddDirectProvider(\"anonymous\", provider.CredCheckerFunc(func(user, _ string) (ok bool, err error) {\n \t\t\tuser = strings.TrimSpace(user)\n \t\t\tif len(user) < 3 {\n \t\t\t\tlog.Printf(\"[WARN] name %q is too short, should be at least 3 characters\", user)\n \t\t\t\treturn false, nil\n \t\t\t}\n+\t\t\tif len(user) > 64 {\n+\t\t\t\tlog.Printf(\"[WARN] name %q is too long, should be up to 64 characters\", user)\n+\t\t\t\treturn false, nil\n+\t\t\t}\n \n \t\t\tif !isValidAnonName(user) {\n \t\t\t\tlog.Printf(\"[WARN] name %q should have letters, digits, underscores and spaces only\", user)"
    },
    {
      "sha": "12c4d58278f6ce0d9fa6a001c3f63c50843938bc",
      "filename": "backend/app/cmd/server_test.go",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/80854f9d4000e88ecd1f96cc3f445574e6dfc25f/backend/app/cmd/server_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/80854f9d4000e88ecd1f96cc3f445574e6dfc25f/backend/app/cmd/server_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/cmd/server_test.go?ref=80854f9d4000e88ecd1f96cc3f445574e6dfc25f",
      "patch": "@@ -133,6 +133,12 @@ func TestServerApp_AnonMode(t *testing.T) {\n \tdefer resp.Body.Close()\n \tassert.Equal(t, http.StatusCreated, resp.StatusCode)\n \n+\t// try to login with non-latin name\n+\tresp, err = http.Get(fmt.Sprintf(\"http://localhost:%d/auth/anonymous/login?user=Раз_Два%20%20Три_34567&aud=remark\", port))\n+\trequire.NoError(t, err)\n+\tdefer resp.Body.Close()\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n+\n \t// try to login with bad name\n \tresp, err = http.Get(fmt.Sprintf(\"http://localhost:%d/auth/anonymous/login?user=**blah123&aud=remark\", port))\n \trequire.NoError(t, err)\n@@ -145,6 +151,13 @@ func TestServerApp_AnonMode(t *testing.T) {\n \tdefer resp.Body.Close()\n \tassert.Equal(t, http.StatusForbidden, resp.StatusCode)\n \n+\t// try to login with long name\n+\tln := strings.Repeat(\"x\", 65)\n+\tresp, err = http.Get(fmt.Sprintf(\"http://localhost:%d/auth/anonymous/login?user=%s&aud=remark\", port, ln))\n+\trequire.NoError(t, err)\n+\tdefer resp.Body.Close()\n+\tassert.Equal(t, http.StatusForbidden, resp.StatusCode)\n+\n \t// try to login with admin name\n \tresp, err = http.Get(fmt.Sprintf(\"http://localhost:%d/auth/anonymous/login?user=umputun&aud=remark\", port))\n \trequire.NoError(t, err)"
    }
  ]
}
