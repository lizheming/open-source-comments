{
  "sha": "09f06f587c814fa359c2a6d3dbd05465159c7775",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjA5ZjA2ZjU4N2M4MTRmYTM1OWMyYTZkM2RiZDA1NDY1MTU5Yzc3NzU=",
  "commit": {
    "author": {
      "name": "vdimir",
      "email": "vdimir@users.noreply.github.com",
      "date": "2020-07-08T16:28:37Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-07-09T17:43:07Z"
    },
    "message": "Add tests for comment.Imported, refine image.SubmitAndCommit tests",
    "tree": {
      "sha": "11d1244544c67e7ae99891b29bf109b54beaece6",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/11d1244544c67e7ae99891b29bf109b54beaece6"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/09f06f587c814fa359c2a6d3dbd05465159c7775",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/09f06f587c814fa359c2a6d3dbd05465159c7775",
  "html_url": "https://github.com/umputun/remark42/commit/09f06f587c814fa359c2a6d3dbd05465159c7775",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/09f06f587c814fa359c2a6d3dbd05465159c7775/comments",
  "author": {
    "login": "vdimir",
    "id": 7023786,
    "node_id": "MDQ6VXNlcjcwMjM3ODY=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/7023786?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vdimir",
    "html_url": "https://github.com/vdimir",
    "followers_url": "https://api.github.com/users/vdimir/followers",
    "following_url": "https://api.github.com/users/vdimir/following{/other_user}",
    "gists_url": "https://api.github.com/users/vdimir/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vdimir/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vdimir/subscriptions",
    "organizations_url": "https://api.github.com/users/vdimir/orgs",
    "repos_url": "https://api.github.com/users/vdimir/repos",
    "events_url": "https://api.github.com/users/vdimir/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vdimir/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d7c9aecf03c91ebbcc1de1817562b31d9ba75a0a",
      "url": "https://api.github.com/repos/umputun/remark42/commits/d7c9aecf03c91ebbcc1de1817562b31d9ba75a0a",
      "html_url": "https://github.com/umputun/remark42/commit/d7c9aecf03c91ebbcc1de1817562b31d9ba75a0a"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 32,
    "deletions": 12
  },
  "files": [
    {
      "sha": "470308484b1dceece09fff13c1f12d594fe8e0ec",
      "filename": "backend/app/migrator/disqus_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/migrator/disqus_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/migrator/disqus_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/migrator/disqus_test.go?ref=09f06f587c814fa359c2a6d3dbd05465159c7775",
      "patch": "@@ -39,6 +39,7 @@ func TestDisqus_Import(t *testing.T) {\n \tassert.Equal(t, \"Alexander Blah\", c.User.Name)\n \tassert.Equal(t, \"disqus_328c8b68974aef73785f6b38c3d3fedfdf941434\", c.User.ID)\n \tassert.Equal(t, \"2ba6b71dbf9750ae3356cce14cac6c1b1962747c\", c.User.IP)\n+\tassert.True(t, c.Imported)\n \n \tposts, err := dataStore.List(\"test\", 0, 0)\n \tassert.NoError(t, err)\n@@ -71,6 +72,7 @@ func TestDisqus_Convert(t *testing.T) {\n \t\t\tID:   \"disqus_328c8b68974aef73785f6b38c3d3fedfdf941434\",\n \t\t\tIP:   \"178.178.178.178\",\n \t\t},\n+\t\tImported: true,\n \t}\n \texp0.Timestamp, _ = time.Parse(\"2006-01-02T15:04:05Z\", \"2011-08-31T15:16:29Z\")\n \tassert.Equal(t, exp0, res[0])"
    },
    {
      "sha": "10c8250e7024dbbd76dd33a8ea9d997d78b029f0",
      "filename": "backend/app/migrator/native_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/migrator/native_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/migrator/native_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/migrator/native_test.go?ref=09f06f587c814fa359c2a6d3dbd05465159c7775",
      "patch": "@@ -73,7 +73,7 @@ func TestNative_Import(t *testing.T) {\n \n \tinp := `{\"version\":1,\"users\":[{\"id\":\"user1\",\"blocked\":{\"status\":false,\"until\":\"0001-01-01T00:00:00Z\"},\"verified\":true},{\"id\":\"user2\",\"blocked\":{\"status\":true,\"until\":\"2018-12-23T02:55:22.472041-06:00\"},\"verified\":false}],\"posts\":[{\"url\":\"https://radio-t.com\",\"read_only\":true}]}\n \t{\"id\":\"efbc17f177ee1a1c0ee6e1e025749966ec071adc\",\"pid\":\"\",\"text\":\"some text, <a href=\\\"http://radio-t.com\\\" rel=\\\"nofollow\\\">link</a>\",\"user\":{\"name\":\"user name\",\"id\":\"user1\",\"picture\":\"\",\"ip\":\"293ec5b0cf154855258824ec7fac5dc63d176915\",\"admin\":false},\"locator\":{\"site\":\"radio-t\",\"url\":\"https://radio-t.com\"},\"score\":0,\"votes\":{},\"time\":\"2017-12-20T15:18:22-06:00\"}\n-\t{\"id\":\"f863bd79-fec6-4a75-b308-61fe5dd02aa1\",\"pid\":\"1234\",\"text\":\"some text2\",\"user\":{\"name\":\"user name\",\"id\":\"user2\",\"picture\":\"\",\"ip\":\"293ec5b0cf154855258824ec7fac5dc63d176915\",\"admin\":false},\"locator\":{\"site\":\"radio-t\",\"url\":\"https://radio-t.com/2\"},\"score\":0,\"votes\":{},\"time\":\"2017-12-20T15:18:23-06:00\"}`\n+\t{\"id\":\"f863bd79-fec6-4a75-b308-61fe5dd02aa1\",\"pid\":\"1234\",\"text\":\"some text2\",\"user\":{\"name\":\"user name\",\"id\":\"user2\",\"picture\":\"\",\"ip\":\"293ec5b0cf154855258824ec7fac5dc63d176915\",\"admin\":false},\"locator\":{\"site\":\"radio-t\",\"url\":\"https://radio-t.com/2\"},\"score\":0,\"votes\":{},\"time\":\"2017-12-20T15:18:23-06:00\",\"imported\":false}`\n \n \tb.AdminStore = admin.NewStaticStore(\"12345\", nil, []string{}, \"\")\n \tr := Native{DataStore: b}\n@@ -87,10 +87,12 @@ func TestNative_Import(t *testing.T) {\n \tassert.Equal(t, \"f863bd79-fec6-4a75-b308-61fe5dd02aa1\", comments[0].ID)\n \tassert.Equal(t, \"1234\", comments[0].ParentID)\n \tassert.Equal(t, false, b.IsReadOnly(comments[0].Locator))\n+\tassert.True(t, comments[0].Imported)\n \n \tassert.Equal(t, \"efbc17f177ee1a1c0ee6e1e025749966ec071adc\", comments[1].ID)\n \tassert.Equal(t, \"https://radio-t.com\", comments[1].Locator.URL)\n \tassert.Equal(t, true, b.IsReadOnly(comments[1].Locator))\n+\tassert.True(t, comments[1].Imported)\n \n \tassert.Equal(t, false, b.IsBlocked(\"radio-t\", \"user1\"))\n \tassert.Equal(t, true, b.IsVerified(\"radio-t\", \"user1\"))"
    },
    {
      "sha": "79bb7226acf75b3de2ebae589d6b654689c9be24",
      "filename": "backend/app/migrator/wordpress_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/migrator/wordpress_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/migrator/wordpress_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/migrator/wordpress_test.go?ref=09f06f587c814fa359c2a6d3dbd05465159c7775",
      "patch": "@@ -42,6 +42,7 @@ func TestWordPress_Import(t *testing.T) {\n \tts, _ := time.Parse(wpTimeLayout, \"2010-08-18 15:19:14\")\n \tassert.Equal(t, ts, c.Timestamp)\n \tassert.Equal(t, c.Text, \"<p>Mekkatorque was over in that tent up to the right</p>\\n\")\n+\tassert.True(t, c.Imported)\n \n \tposts, err := dataStore.List(siteID, 0, 0)\n \tassert.NoError(t, err)\n@@ -77,6 +78,7 @@ func TestWordPress_Convert(t *testing.T) {\n \t\t\tID:   \"wordpress_\" + store.EncodeID(\"Wednesday Reading &laquo; Cynwise&#039;s Battlefield Manual\"),\n \t\t\tIP:   \"74.200.244.101\",\n \t\t},\n+\t\tImported: true,\n \t}\n \texp1.Timestamp, _ = time.Parse(wpTimeLayout, \"2010-07-21 14:02:08\")\n \tassert.Equal(t, exp1, comments[1])"
    },
    {
      "sha": "c346d4903b6196ced7eb85f4d3f414aebc86ad34",
      "filename": "backend/app/store/image/image.go",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark42/blob/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/store/image/image.go",
      "raw_url": "https://github.com/umputun/remark42/raw/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/store/image/image.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/image/image.go?ref=09f06f587c814fa359c2a6d3dbd05465159c7775",
      "patch": "@@ -29,6 +29,7 @@ import (\n \n \t\"github.com/PuerkitoBio/goquery\"\n \tlog \"github.com/go-pkgz/lgr\"\n+\t\"github.com/hashicorp/go-multierror\"\n \t\"github.com/pkg/errors\"\n \t\"github.com/rs/xid\"\n \t\"golang.org/x/image/draw\"\n@@ -102,12 +103,15 @@ func NewService(s Store, p ServiceParams) *Service {\n }\n \n // SubmitAndCommit multiple ids immediately\n-func (s *Service) SubmitAndCommit(idsFn func() []string) {\n+func (s *Service) SubmitAndCommit(idsFn func() []string) error {\n+\terrs := new(multierror.Error)\n \tfor _, id := range idsFn() {\n-\t\tif err := s.store.Commit(id); err != nil {\n-\t\t\tlog.Printf(\"[WARN] failed to commit image %s\", id)\n+\t\terr := s.store.Commit(id)\n+\t\tif err != nil {\n+\t\t\terrs = multierror.Append(errs, errors.Wrapf(err, \"failed to commit image %s\", id))\n \t\t}\n \t}\n+\treturn errs.ErrorOrNil()\n }\n \n // Submit multiple ids via function for delayed commit\n@@ -127,7 +131,11 @@ func (s *Service) Submit(idsFn func() []string) {\n \t\t\t\tfor atomic.LoadInt32(&s.term) == 0 && time.Since(req.TS) <= s.commitTTL {\n \t\t\t\t\ttime.Sleep(time.Millisecond * 10) // small sleep to relive busy wait but keep reactive for term (close)\n \t\t\t\t}\n-\t\t\t\ts.SubmitAndCommit(req.idsFn)\n+\t\t\t\terr := s.SubmitAndCommit(req.idsFn)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\tlog.Printf(\"[WARN] image commit error %v\", err)\n+\t\t\t\t}\n+\n \t\t\t\tatomic.AddInt32(&s.submitCount, -1)\n \t\t\t}\n \t\t\tlog.Printf(\"[INFO] image submitter terminated\")"
    },
    {
      "sha": "04e23790fd7e22e0d5a9619a885e9b7e97d81bfd",
      "filename": "backend/app/store/image/image_test.go",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/store/image/image_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/store/image/image_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/image/image_test.go?ref=09f06f587c814fa359c2a6d3dbd05465159c7775",
      "patch": "@@ -136,13 +136,14 @@ func TestService_Cleanup(t *testing.T) {\n func TestService_Submit(t *testing.T) {\n \tstore := MockStore{}\n \tstore.On(\"Commit\", mock.Anything, mock.Anything).Times(7).Return(nil)\n-\tsvc := Service{store: &store, ServiceParams: ServiceParams{ImageAPI: \"/blah/\", EditDuration: time.Millisecond * 100}}\n+\tsvc := NewService(&store, ServiceParams{ImageAPI: \"/blah/\", EditDuration: time.Millisecond * 100})\n \tsvc.Submit(func() []string { return []string{\"id1\", \"id2\", \"id3\"} })\n-\tsvc.SubmitAndCommit(func() []string { return []string{\"id4\", \"id5\"} })\n+\terr := svc.SubmitAndCommit(func() []string { return []string{\"id4\", \"id5\"} })\n+\tassert.NoError(t, err)\n \tsvc.Submit(func() []string { return []string{\"id6\", \"id7\"} })\n \tsvc.Submit(nil)\n \tstore.AssertNumberOfCalls(t, \"Commit\", 2)\n-\ttime.Sleep(time.Millisecond * 150)\n+\ttime.Sleep(time.Millisecond * 175)\n \tstore.AssertNumberOfCalls(t, \"Commit\", 7)\n \tsvc.Close(context.TODO())\n }"
    },
    {
      "sha": "d1ee262b688f6bbdfedc0c49d6ee09a750ee1ef2",
      "filename": "backend/app/store/service/service.go",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/store/service/service.go",
      "raw_url": "https://github.com/umputun/remark42/raw/09f06f587c814fa359c2a6d3dbd05465159c7775/backend/app/store/service/service.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/service/service.go?ref=09f06f587c814fa359c2a6d3dbd05465159c7775",
      "patch": "@@ -101,13 +101,13 @@ func (s *DataStore) Create(comment store.Comment) (commentID string, err error)\n \t\tcomment.PostTitle = title\n \t}()\n \n-\tdefer s.submitImages(comment) // submit images only after creation in Engine\n+\tcommentID, err = s.Engine.Create(comment)\n+\ts.submitImages(comment)\n \n \tif e := s.AdminStore.OnEvent(comment.Locator.SiteID, admin.EvCreate); e != nil {\n \t\tlog.Printf(\"[WARN] failed to send create event, %s\", e)\n \t}\n-\n-\treturn s.Engine.Create(comment)\n+\treturn commentID, err\n }\n \n // Find wraps engine's Find call and alter results if needed. User used to alter comments\n@@ -244,11 +244,16 @@ func (s *DataStore) submitImages(comment store.Comment) {\n \t\treturn imgIds\n \t}\n \n+\tvar err error\n \tif comment.Imported {\n-\t\ts.ImageService.SubmitAndCommit(idsFn)\n+\t\terr = s.ImageService.SubmitAndCommit(idsFn)\n \t} else {\n \t\ts.ImageService.Submit(idsFn)\n \t}\n+\n+\tif err != nil {\n+\t\tlog.Printf(\"[WARN] failed to commit comment's images: %v\", err)\n+\t}\n }\n \n // prepareNewComment sets new comment fields, hashing and sanitizing data"
    }
  ]
}
