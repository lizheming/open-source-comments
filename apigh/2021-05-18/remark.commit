{
  "sha": "4d011aa5f3f484c663ec0bfea908a87acad4a012",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjRkMDExYWE1ZjNmNDg0YzY2M2VjMGJmZWE5MDhhODdhY2FkNGEwMTI=",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2021-05-17T00:29:49Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2021-05-18T02:31:56Z"
    },
    "message": "remove error return from ExtractPictures\n\nThat function returns an error in a never\nexpected condition, and that error would be\nlogged message on the caller side:\nnone of the callers handles it.\n\nThat change hides that error from the caller\nso that function would have a signature that\nbetter fit what it does and how it behaves.",
    "tree": {
      "sha": "2bf3f74a675f92dbcd84ca7196cf5e8663157131",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/2bf3f74a675f92dbcd84ca7196cf5e8663157131"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/4d011aa5f3f484c663ec0bfea908a87acad4a012",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/4d011aa5f3f484c663ec0bfea908a87acad4a012",
  "html_url": "https://github.com/umputun/remark42/commit/4d011aa5f3f484c663ec0bfea908a87acad4a012",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/4d011aa5f3f484c663ec0bfea908a87acad4a012/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "75196d185d8e06b220dfe4ccaf40f11131b09990",
      "url": "https://api.github.com/repos/umputun/remark42/commits/75196d185d8e06b220dfe4ccaf40f11131b09990",
      "html_url": "https://github.com/umputun/remark42/commit/75196d185d8e06b220dfe4ccaf40f11131b09990"
    }
  ],
  "stats": {
    "total": 49,
    "additions": 14,
    "deletions": 35
  },
  "files": [
    {
      "sha": "b9dd0015f7c19d02f022c4ad8b2f30745e08aa2b",
      "filename": "backend/app/rest/api/rest_private.go",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/4d011aa5f3f484c663ec0bfea908a87acad4a012/backend/app/rest/api/rest_private.go",
      "raw_url": "https://github.com/umputun/remark42/raw/4d011aa5f3f484c663ec0bfea908a87acad4a012/backend/app/rest/api/rest_private.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_private.go?ref=4d011aa5f3f484c663ec0bfea908a87acad4a012",
      "patch": "@@ -89,13 +89,8 @@ func (s *private) createCommentCtrl(w http.ResponseWriter, r *http.Request) {\n \tcomment = s.commentFormatter.Format(comment)\n \n \t// check if images are valid\n-\timgIDs, err := s.imageService.ExtractPictures(comment.Text)\n-\tif err != nil {\n-\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't extract pictures from comment text\", rest.ErrCommentValidation)\n-\t\treturn\n-\t}\n-\tfor _, id := range imgIDs {\n-\t\t_, err = s.imageService.Load(id)\n+\tfor _, id := range s.imageService.ExtractPictures(comment.Text) {\n+\t\t_, err := s.imageService.Load(id)\n \t\tif err != nil {\n \t\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't load picture from the comment\", rest.ErrImgNotFound)\n \t\t\treturn"
    },
    {
      "sha": "e1dabc896b37a266f0b632cec60c2fbdca011c87",
      "filename": "backend/app/rest/api/rest_public.go",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/4d011aa5f3f484c663ec0bfea908a87acad4a012/backend/app/rest/api/rest_public.go",
      "raw_url": "https://github.com/umputun/remark42/raw/4d011aa5f3f484c663ec0bfea908a87acad4a012/backend/app/rest/api/rest_public.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/rest/api/rest_public.go?ref=4d011aa5f3f484c663ec0bfea908a87acad4a012",
      "patch": "@@ -134,12 +134,7 @@ func (s *public) previewCommentCtrl(w http.ResponseWriter, r *http.Request) {\n \tcomment.Sanitize()\n \n \t// check if images are valid\n-\timgIDs, err := s.imageService.ExtractPictures(comment.Text)\n-\tif err != nil {\n-\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't extract pictures from comment text\", rest.ErrCommentValidation)\n-\t\treturn\n-\t}\n-\tfor _, id := range imgIDs {\n+\tfor _, id := range s.imageService.ExtractPictures(comment.Text) {\n \t\t_, err = s.imageService.Load(id)\n \t\tif err != nil {\n \t\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't load picture from the comment\", rest.ErrImgNotFound)"
    },
    {
      "sha": "96d2c0469160209f798f9f24373d20ac975b5c4d",
      "filename": "backend/app/store/image/image.go",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/4d011aa5f3f484c663ec0bfea908a87acad4a012/backend/app/store/image/image.go",
      "raw_url": "https://github.com/umputun/remark42/raw/4d011aa5f3f484c663ec0bfea908a87acad4a012/backend/app/store/image/image.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/image/image.go?ref=4d011aa5f3f484c663ec0bfea908a87acad4a012",
      "patch": "@@ -137,13 +137,12 @@ func (s *Service) Submit(idsFn func() []string) {\n }\n \n // ExtractPictures gets list of images from the doc html and convert from urls to ids, i.e. user/pic.png\n-// It doesn't return possible errors parsing the cached images, and will try to return as many parsed ids\n-// as possible instead.\n-func (s *Service) ExtractPictures(commentHTML string) (ids []string, err error) {\n+func (s *Service) ExtractPictures(commentHTML string) (ids []string) {\n \n \tdoc, err := goquery.NewDocumentFromReader(strings.NewReader(commentHTML))\n \tif err != nil {\n-\t\treturn nil, errors.Wrap(err, \"can't create document\")\n+\t\tlog.Printf(\"[ERROR] can't parse commentHTML to parse images: %q, error: %v\", commentHTML, err)\n+\t\treturn nil\n \t}\n \tdoc.Find(\"img\").Each(func(i int, sl *goquery.Selection) {\n \t\tif im, ok := sl.Attr(\"src\"); ok {\n@@ -172,7 +171,7 @@ func (s *Service) ExtractPictures(commentHTML string) (ids []string, err error)\n \t\t}\n \t})\n \n-\treturn ids, nil\n+\treturn ids\n }\n \n // Cleanup runs periodic cleanup with 2.5*ServiceParams.EditDuration. Blocking loop, should be called inside of goroutine by consumer"
    },
    {
      "sha": "229819f4c72ddf6fb8607fb3eb87a9a873a925ee",
      "filename": "backend/app/store/image/image_test.go",
      "status": "modified",
      "additions": 6,
      "deletions": 12,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark42/blob/4d011aa5f3f484c663ec0bfea908a87acad4a012/backend/app/store/image/image_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/4d011aa5f3f484c663ec0bfea908a87acad4a012/backend/app/store/image/image_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/image/image_test.go?ref=4d011aa5f3f484c663ec0bfea908a87acad4a012",
      "patch": "@@ -77,8 +77,7 @@ func TestService_ExtractPictures(t *testing.T) {\n \tsvc := Service{ServiceParams: ServiceParams{ImageAPI: \"/blah/\", ProxyAPI: \"/non_existent\"}}\n \thtml := `blah <img src=\"/blah/user1/pic1.png\"/> foo\n <img src=\"/blah/user2/pic3.png\"/> xyz <p>123</p> <img src=\"/pic3.png\"/> <img src=\"https://i.ibb.co/0cqqqnD/ezgif-5-3b07b6b97610.png\" alt=\"\">`\n-\tids, err := svc.ExtractPictures(html)\n-\trequire.NoError(t, err)\n+\tids := svc.ExtractPictures(html)\n \trequire.Equal(t, 2, len(ids), \"two images\")\n \tassert.Equal(t, \"user1/pic1.png\", ids[0])\n \tassert.Equal(t, \"user2/pic3.png\", ids[1])\n@@ -90,35 +89,30 @@ func TestService_ExtractPictures(t *testing.T) {\n <p><img src=\"https://remark42.radio-t.com/api/v1/picture/github_ef0f706a79cc24b17bbbb374cd234a691d034128/bjttt8ahajfmrhsula10.png\" alt=\"bjtr0-201906-08110846-i324c.png\"/></p>\\n\\n<p>\n По форме все верно, это все packages, но по сути это все одна библиотека организованная таким образом. При ее импорте, например посредством go mod, она выглядит как один модуль, т.е.\n <code>github.com/go-pkgz/auth v0.5.2</code>.</p>\\n`\n-\tids, err = svc.ExtractPictures(html)\n-\trequire.NoError(t, err)\n+\tids = svc.ExtractPictures(html)\n \trequire.Equal(t, 1, len(ids), \"one image in\")\n \tassert.Equal(t, \"github_ef0f706a79cc24b17bbbb374cd234a691d034128/bjttt8ahajfmrhsula10.png\", ids[0])\n \n \t// proxied image\n \thtml = `<img src=\"https://remark42.radio-t.com/api/v1/img?src=aHR0cHM6Ly9ob21lcGFnZXMuY2FlLndpc2MuZWR1L35lY2U1MzMvaW1hZ2VzL2JvYXQucG5n\" alt=\"cat.png\">`\n-\tids, err = svc.ExtractPictures(html)\n-\trequire.NoError(t, err)\n+\tids = svc.ExtractPictures(html)\n \trequire.Equal(t, 1, len(ids), \"one image in\")\n \tassert.Equal(t, \"cached_images/12318fbd4c55e9d177b8b5ae197bc89c5afd8e07-a41fcb00643f28d700504256ec81cbf2e1aac53e\", ids[0])\n \n \t// bad url\n \thtml = `<img src=\" https://remark42.radio-t.com/api/v1/img\">`\n-\tids, err = svc.ExtractPictures(html)\n-\trequire.NoError(t, err)\n+\tids = svc.ExtractPictures(html)\n \trequire.Empty(t, ids)\n \n \t// bad src\n \thtml = `<img src=\"https://remark42.radio-t.com/api/v1/img?src=bad\">`\n-\tids, err = svc.ExtractPictures(html)\n-\trequire.NoError(t, err)\n+\tids = svc.ExtractPictures(html)\n \trequire.Empty(t, ids)\n \n \t// good src with bad content\n \tbadURL := base64.URLEncoding.EncodeToString([]byte(\" http://foo.bar\"))\n \thtml = fmt.Sprintf(`<img src=\"https://remark42.radio-t.com/api/v1/img?src=%s\">`, badURL)\n-\tids, err = svc.ExtractPictures(html)\n-\trequire.NoError(t, err)\n+\tids = svc.ExtractPictures(html)\n \trequire.Empty(t, ids)\n }\n "
    },
    {
      "sha": "19c8e4b1565f754cb5afc187f2703abe81543cb1",
      "filename": "backend/app/store/service/service.go",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/4d011aa5f3f484c663ec0bfea908a87acad4a012/backend/app/store/service/service.go",
      "raw_url": "https://github.com/umputun/remark42/raw/4d011aa5f3f484c663ec0bfea908a87acad4a012/backend/app/store/service/service.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend/app/store/service/service.go?ref=4d011aa5f3f484c663ec0bfea908a87acad4a012",
      "patch": "@@ -235,11 +235,7 @@ func (s *DataStore) submitImages(comment store.Comment) {\n \t\t\tlog.Printf(\"[WARN] can't get comment's %s text for image extraction, %v\", comment.ID, err)\n \t\t\treturn nil\n \t\t}\n-\t\timgIDs, err := s.ImageService.ExtractPictures(cc.Text)\n-\t\tif err != nil {\n-\t\t\tlog.Printf(\"[WARN] can't get extract pictures from %s, %v\", comment.ID, err)\n-\t\t\treturn nil\n-\t\t}\n+\t\timgIDs := s.ImageService.ExtractPictures(cc.Text)\n \t\tif len(imgIDs) > 0 {\n \t\t\tlog.Printf(\"[DEBUG] image ids extracted from %s - %+v\", comment.ID, imgIDs)\n \t\t}"
    }
  ]
}
